/*
 * generated by Xtext
 */
package org.eclipse.emf.query2.syntax.scoping;

import static com.google.common.collect.Iterables.transform;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.ENamedElement;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.query2.syntax.query.AliasAttributeExpression;
import org.eclipse.emf.query2.syntax.query.FromEntry;
import org.eclipse.emf.query2.syntax.query.Import;
import org.eclipse.emf.query2.syntax.query.MQLquery;
import org.eclipse.emf.query2.syntax.query.Model;
import org.eclipse.emf.query2.syntax.query.SelectEntry;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.resource.EObjectDescription;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.scoping.impl.SimpleScope;
import org.eclipse.xtext.util.SimpleAttributeResolver;

import com.google.common.base.Function;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping on
 * how and when to use it
 * 
 */
public class QueryScopeProvider extends AbstractDeclarativeScopeProvider {

	private static final Function<ENamedElement, IEObjectDescription> NAME_2_STRUCTURAL_FEATURE = new Function<ENamedElement, IEObjectDescription>() {

		public IEObjectDescription apply(ENamedElement feature) {
			return EObjectDescription.create(feature.getName(), feature);
		}
	};
	private IScope importScope;
	EList<Import> imports = null;

	IScope scope_FromEntry(MQLquery _this, EClass type) {
		Iterable<IEObjectDescription> transformed = transform(_this.getFromEntries(), new Function<FromEntry, IEObjectDescription>() {

			public IEObjectDescription apply(FromEntry from) {
				return EObjectDescription.create(from.getAlias(), from);
			}
		});
		return new SimpleScope(IScope.NULLSCOPE, transformed);
	}
	
	IScope scope_SelectEntry_attribute(SelectEntry _this, EReference ref) {
		Iterable<IEObjectDescription> transformed = transform(_this.getSelect().getType().getEAllAttributes(), NAME_2_STRUCTURAL_FEATURE);
		return new SimpleScope(IScope.NULLSCOPE, transformed);

	}

	IScope scope_AliasAttributeExpression_attribute(AliasAttributeExpression _this, EReference ref) {
		Iterable<IEObjectDescription> transformed = transform(_this.getAlias().getType().getEAllStructuralFeatures(), NAME_2_STRUCTURAL_FEATURE);
		return new SimpleScope(IScope.NULLSCOPE, transformed);

	}

	IScope scope_EClass(Model _this, EClass type) {
		if(importScope==null || imports!=_this.getImports()){
			imports = _this.getImports();
			importScope = new DefaultScope(_this.eResource(), _this.getImports(), type); 
		}
		return importScope;
	}
	
	private static class DefaultScope extends SimpleScope {

		public DefaultScope(Resource resource, EList<Import> imports, EClass type) {
			this(resource, imports, type, SimpleAttributeResolver.NAME_RESOLVER);
		}
		
		public DefaultScope(Resource resource, List<Import> imports, EClass type, Function<EObject, String> nameResolver) {
			super(createParent(imports, type, resource, nameResolver), Scopes.allInResource(resource,type,nameResolver));
		}


		private static IScope createParent(List<Import> imports, EClass type, Resource resource, Function<EObject, String> nameResolver) {
			final List<String> orderedImportURIs = new ArrayList<String>(10);
			for (Import imp : imports) {
				orderedImportURIs.add(imp.getImpURI());
			}
			IScope result = IScope.NULLSCOPE;
			for(int i = orderedImportURIs.size() - 1; i >= 0; i--) {
				result = new LazyReferencedResourceScope(result, type, resource, orderedImportURIs.get(i), nameResolver);
			}
			return result;
		}
		
		static class LazyReferencedResourceScope extends SimpleScope {

			public LazyReferencedResourceScope(IScope parent, EClass type, Resource context, String uri, Function<EObject, String> nameFunc) {
				super(parent, Scopes.allInResource(EcoreUtil2.getResource(context, uri), type, nameFunc));
			}

		}
	}

}
