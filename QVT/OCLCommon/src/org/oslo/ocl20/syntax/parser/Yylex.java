/* The following code was generated by JFlex 1.4.1 on 10.08.07 16:28 */

/**
 * 
 * @author Octavian Patrascoiu
 *
 */

// Usercode Section
package org.oslo.ocl20.syntax.parser;

import java.io.Reader;
import org.oslo.ocl20.OclProcessorImpl;

import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import uk.ac.kent.cs.kmf.util.ILog;
      

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 10.08.07 16:28 from the specification file
 * <tt>ocl.flex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\6\0\1\15"+
    "\1\20\1\23\1\5\1\14\1\26\1\6\1\11\1\4\12\10\1\16"+
    "\1\27\1\47\1\46\1\50\1\32\1\31\1\7\1\54\1\61\1\7"+
    "\1\13\11\7\1\62\3\7\1\52\1\63\6\7\1\21\1\0\1\24"+
    "\1\17\1\7\1\0\1\40\1\70\1\60\1\42\1\12\1\65\1\55"+
    "\1\66\1\33\1\7\1\67\1\36\1\34\1\41\1\43\1\35\1\56"+
    "\1\44\1\37\1\53\1\57\1\51\1\7\1\45\1\64\1\7\1\22"+
    "\1\30\1\25\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\5\1\10\1\0\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\11\5\1\26\1\27\1\30\12\5\2\0\1\31\2\0"+
    "\1\32\2\5\1\33\1\34\1\35\1\5\1\36\1\5"+
    "\1\37\11\5\1\40\1\5\1\41\1\42\1\43\13\5"+
    "\2\1\1\0\1\44\1\0\1\44\4\5\1\45\1\5"+
    "\1\46\2\5\1\47\1\50\1\51\1\52\1\5\1\53"+
    "\1\54\1\55\1\56\3\5\1\57\7\5\1\60\3\5"+
    "\1\61\2\5\1\62\2\5\1\63\1\64\6\5\1\65"+
    "\1\66\12\5\1\67\1\70\4\5\1\71\7\5\1\72"+
    "\1\73\1\74\2\5\1\75\4\5\1\76\5\5\1\77"+
    "\2\5\1\100\1\101\1\102\1\103";

  private static int [] zzUnpackAction() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\71\0\253\0\344\0\u011d\0\u0156"+
    "\0\u018f\0\71\0\u01c8\0\u0201\0\u023a\0\71\0\71\0\71"+
    "\0\71\0\71\0\71\0\71\0\71\0\71\0\71\0\71"+
    "\0\u0273\0\u02ac\0\u02e5\0\u031e\0\u0357\0\u0390\0\u03c9\0\u0402"+
    "\0\u043b\0\71\0\u0474\0\u04ad\0\u04e6\0\u051f\0\u0558\0\u0591"+
    "\0\u05ca\0\u0603\0\u063c\0\u0675\0\u06ae\0\u06e7\0\u0720\0\u0759"+
    "\0\71\0\u0792\0\u07cb\0\71\0\u0804\0\u083d\0\u0876\0\71"+
    "\0\71\0\u08af\0\u08e8\0\u0921\0\344\0\u095a\0\u0993\0\u09cc"+
    "\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\344\0\u0b5b"+
    "\0\71\0\71\0\71\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78"+
    "\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40"+
    "\0\u0e79\0\u0eb2\0\u0eeb\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf"+
    "\0\344\0\u1008\0\344\0\u1041\0\u107a\0\344\0\344\0\344"+
    "\0\344\0\u10b3\0\344\0\344\0\344\0\344\0\u10ec\0\u1125"+
    "\0\u115e\0\344\0\u1197\0\u11d0\0\u1209\0\u1242\0\u127b\0\u12b4"+
    "\0\u12ed\0\344\0\u1326\0\u135f\0\u1398\0\344\0\u13d1\0\u140a"+
    "\0\344\0\u1443\0\u147c\0\344\0\344\0\u14b5\0\u14ee\0\u1527"+
    "\0\u1560\0\u1599\0\u15d2\0\344\0\344\0\u160b\0\u1644\0\u167d"+
    "\0\u16b6\0\u16ef\0\u1728\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845"+
    "\0\344\0\u187e\0\u18b7\0\u18f0\0\u1929\0\344\0\u1962\0\u199b"+
    "\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8\0\344\0\344\0\344"+
    "\0\u1af1\0\u1b2a\0\344\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e\0\344"+
    "\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b\0\344\0\u1d64\0\u1d9d"+
    "\0\344\0\344\0\344\0\344";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\3\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\6\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\6\1\35\1\36"+
    "\1\37\1\40\1\6\1\41\1\42\1\43\1\44\1\6"+
    "\1\45\1\46\1\47\2\6\1\50\1\51\1\52\1\53"+
    "\1\54\1\6\1\55\2\6\1\56\75\0\1\57\1\60"+
    "\71\0\1\57\41\0\1\61\27\0\2\6\1\0\2\6"+
    "\17\0\13\6\3\0\20\6\10\0\1\7\1\62\2\63"+
    "\66\0\1\64\66\0\2\6\1\0\2\6\17\0\3\6"+
    "\1\65\2\6\1\66\4\6\3\0\20\6\15\13\1\67"+
    "\53\13\16\0\1\70\71\0\1\71\60\0\2\6\1\0"+
    "\2\6\17\0\1\6\1\72\4\6\1\73\4\6\3\0"+
    "\2\6\1\74\11\6\1\75\3\6\7\0\2\6\1\0"+
    "\2\6\17\0\10\6\1\76\2\6\3\0\20\6\7\0"+
    "\2\6\1\0\2\6\17\0\5\6\1\77\2\6\1\100"+
    "\1\101\1\6\3\0\20\6\7\0\2\6\1\0\1\102"+
    "\1\6\17\0\13\6\3\0\20\6\7\0\2\6\1\0"+
    "\2\6\17\0\6\6\1\103\4\6\3\0\20\6\7\0"+
    "\2\6\1\0\2\6\17\0\10\6\1\104\2\6\3\0"+
    "\20\6\7\0\2\6\1\0\1\105\1\6\17\0\1\106"+
    "\12\6\3\0\20\6\7\0\2\6\1\0\2\6\17\0"+
    "\11\6\1\107\1\6\3\0\20\6\7\0\2\6\1\0"+
    "\2\6\17\0\10\6\1\110\2\6\3\0\20\6\46\0"+
    "\1\111\1\0\1\112\66\0\1\113\31\0\2\6\1\0"+
    "\1\114\1\6\17\0\13\6\3\0\20\6\7\0\2\6"+
    "\1\0\2\6\17\0\11\6\1\115\1\6\3\0\15\6"+
    "\1\116\2\6\7\0\2\6\1\0\2\6\17\0\5\6"+
    "\1\117\5\6\3\0\20\6\7\0\2\6\1\0\2\6"+
    "\17\0\6\6\1\120\4\6\3\0\20\6\7\0\2\6"+
    "\1\0\2\6\17\0\10\6\1\121\2\6\3\0\20\6"+
    "\7\0\2\6\1\0\2\6\17\0\10\6\1\122\2\6"+
    "\3\0\20\6\7\0\2\6\1\0\2\6\17\0\11\6"+
    "\1\123\1\6\3\0\20\6\7\0\2\6\1\0\2\6"+
    "\17\0\13\6\3\0\6\6\1\124\11\6\7\0\2\6"+
    "\1\0\2\6\17\0\5\6\1\125\5\6\3\0\20\6"+
    "\7\0\2\6\1\0\2\6\17\0\10\6\1\126\2\6"+
    "\3\0\20\6\1\57\1\127\1\130\66\57\5\60\1\131"+
    "\63\60\10\0\1\132\66\0\1\133\1\0\1\134\3\0"+
    "\1\133\63\0\2\6\1\0\2\6\17\0\4\6\1\135"+
    "\6\6\3\0\20\6\7\0\2\6\1\0\2\6\17\0"+
    "\7\6\1\136\3\6\3\0\20\6\15\0\1\13\62\0"+
    "\2\6\1\0\2\6\17\0\2\6\1\137\10\6\3\0"+
    "\20\6\7\0\2\6\1\0\2\6\17\0\1\140\12\6"+
    "\3\0\1\141\17\6\7\0\2\6\1\0\1\142\1\6"+
    "\17\0\13\6\3\0\20\6\7\0\2\6\1\0\2\6"+
    "\17\0\7\6\1\143\3\6\3\0\20\6\7\0\2\6"+
    "\1\0\2\6\17\0\13\6\3\0\7\6\1\144\10\6"+
    "\7\0\2\6\1\0\2\6\17\0\4\6\1\145\6\6"+
    "\3\0\20\6\7\0\2\6\1\0\1\146\1\6\17\0"+
    "\13\6\3\0\20\6\7\0\2\6\1\0\2\6\17\0"+
    "\13\6\3\0\2\6\1\147\15\6\7\0\2\6\1\0"+
    "\2\6\17\0\7\6\1\150\3\6\3\0\20\6\7\0"+
    "\2\6\1\0\2\6\17\0\13\6\3\0\2\6\1\151"+
    "\15\6\7\0\2\6\1\0\2\6\17\0\11\6\1\152"+
    "\1\6\3\0\14\6\1\153\3\6\7\0\2\6\1\0"+
    "\2\6\17\0\13\6\3\0\1\154\17\6\7\0\2\6"+
    "\1\0\2\6\17\0\11\6\1\155\1\6\3\0\20\6"+
    "\7\0\2\6\1\0\2\6\17\0\13\6\3\0\2\6"+
    "\1\156\2\6\1\157\12\6\7\0\2\6\1\0\2\6"+
    "\17\0\13\6\3\0\6\6\1\160\11\6\7\0\2\6"+
    "\1\0\1\161\1\6\17\0\13\6\3\0\20\6\7\0"+
    "\2\6\1\0\2\6\17\0\13\6\3\0\4\6\1\162"+
    "\13\6\7\0\2\6\1\0\2\6\17\0\7\6\1\163"+
    "\3\6\3\0\20\6\7\0\2\6\1\0\2\6\17\0"+
    "\6\6\1\164\4\6\3\0\20\6\7\0\2\6\1\0"+
    "\2\6\17\0\3\6\1\165\7\6\3\0\20\6\7\0"+
    "\2\6\1\0\2\6\17\0\7\6\1\166\3\6\3\0"+
    "\20\6\7\0\2\6\1\0\2\6\17\0\2\6\1\167"+
    "\10\6\3\0\20\6\7\0\2\6\1\0\2\6\17\0"+
    "\3\6\1\170\7\6\3\0\20\6\7\0\2\6\1\0"+
    "\2\6\17\0\7\6\1\171\3\6\3\0\20\6\2\0"+
    "\1\2\67\0\1\2\67\0\4\60\1\2\1\131\63\60"+
    "\10\0\1\132\1\0\2\63\65\0\1\134\67\0\2\6"+
    "\1\0\1\172\1\6\17\0\13\6\3\0\20\6\7\0"+
    "\2\6\1\0\2\6\17\0\1\173\1\6\1\174\10\6"+
    "\3\0\20\6\7\0\2\6\1\0\2\6\17\0\3\6"+
    "\1\175\7\6\3\0\20\6\7\0\2\6\1\0\2\6"+
    "\17\0\13\6\3\0\2\6\1\176\15\6\7\0\2\6"+
    "\1\0\2\6\17\0\11\6\1\177\1\6\3\0\20\6"+
    "\7\0\2\6\1\0\2\6\17\0\13\6\3\0\16\6"+
    "\1\200\1\6\7\0\2\6\1\0\2\6\17\0\13\6"+
    "\3\0\2\6\1\201\15\6\7\0\2\6\1\0\2\6"+
    "\17\0\1\202\12\6\3\0\20\6\7\0\2\6\1\0"+
    "\2\6\17\0\13\6\3\0\6\6\1\203\11\6\7\0"+
    "\2\6\1\0\1\204\1\6\17\0\13\6\3\0\20\6"+
    "\7\0\2\6\1\0\2\6\17\0\6\6\1\205\4\6"+
    "\3\0\20\6\7\0\2\6\1\0\1\206\1\6\17\0"+
    "\13\6\3\0\20\6\7\0\2\6\1\0\2\6\17\0"+
    "\13\6\3\0\2\6\1\207\15\6\7\0\2\6\1\0"+
    "\2\6\17\0\3\6\1\210\7\6\3\0\20\6\7\0"+
    "\2\6\1\0\1\211\1\6\17\0\13\6\3\0\20\6"+
    "\7\0\2\6\1\0\2\6\17\0\3\6\1\212\7\6"+
    "\3\0\20\6\7\0\2\6\1\0\2\6\17\0\4\6"+
    "\1\213\6\6\3\0\20\6\7\0\2\6\1\0\2\6"+
    "\17\0\13\6\3\0\13\6\1\214\4\6\7\0\2\6"+
    "\1\0\2\6\17\0\13\6\3\0\14\6\1\215\3\6"+
    "\7\0\2\6\1\0\2\6\17\0\5\6\1\216\5\6"+
    "\3\0\20\6\7\0\2\6\1\0\2\6\17\0\1\217"+
    "\12\6\3\0\20\6\7\0\2\6\1\0\2\6\17\0"+
    "\5\6\1\220\5\6\3\0\20\6\7\0\2\6\1\0"+
    "\2\6\17\0\5\6\1\221\5\6\3\0\20\6\7\0"+
    "\2\6\1\0\2\6\17\0\13\6\3\0\1\222\17\6"+
    "\7\0\2\6\1\0\1\223\1\6\17\0\13\6\3\0"+
    "\20\6\7\0\2\6\1\0\2\6\17\0\13\6\3\0"+
    "\14\6\1\224\3\6\7\0\2\6\1\0\1\225\1\6"+
    "\17\0\13\6\3\0\20\6\7\0\2\6\1\0\1\226"+
    "\1\6\17\0\13\6\3\0\20\6\7\0\2\6\1\0"+
    "\2\6\17\0\11\6\1\227\1\6\3\0\20\6\7\0"+
    "\2\6\1\0\1\230\1\6\17\0\13\6\3\0\20\6"+
    "\7\0\2\6\1\0\1\231\1\6\17\0\13\6\3\0"+
    "\20\6\7\0\2\6\1\0\2\6\17\0\13\6\3\0"+
    "\7\6\1\232\10\6\7\0\2\6\1\0\1\233\1\6"+
    "\17\0\13\6\3\0\20\6\7\0\2\6\1\0\2\6"+
    "\17\0\13\6\3\0\2\6\1\234\15\6\7\0\2\6"+
    "\1\0\2\6\17\0\13\6\3\0\4\6\1\235\13\6"+
    "\7\0\2\6\1\0\1\236\1\6\17\0\13\6\3\0"+
    "\20\6\7\0\2\6\1\0\2\6\17\0\6\6\1\237"+
    "\4\6\3\0\20\6\7\0\2\6\1\0\2\6\17\0"+
    "\1\240\12\6\3\0\20\6\7\0\2\6\1\0\2\6"+
    "\17\0\12\6\1\241\3\0\20\6\7\0\2\6\1\0"+
    "\2\6\17\0\13\6\3\0\7\6\1\242\10\6\7\0"+
    "\2\6\1\0\1\243\1\6\17\0\13\6\3\0\20\6"+
    "\7\0\2\6\1\0\2\6\17\0\13\6\3\0\12\6"+
    "\1\244\5\6\7\0\2\6\1\0\2\6\17\0\13\6"+
    "\3\0\16\6\1\245\1\6\7\0\2\6\1\0\2\6"+
    "\17\0\4\6\1\246\6\6\3\0\20\6\7\0\2\6"+
    "\1\0\1\247\1\6\17\0\13\6\3\0\20\6\7\0"+
    "\2\6\1\0\1\250\1\6\17\0\13\6\3\0\20\6"+
    "\7\0\2\6\1\0\2\6\17\0\13\6\3\0\7\6"+
    "\1\251\10\6\7\0\2\6\1\0\2\6\17\0\6\6"+
    "\1\252\4\6\3\0\20\6\7\0\2\6\1\0\2\6"+
    "\17\0\13\6\3\0\2\6\1\253\15\6\7\0\2\6"+
    "\1\0\2\6\17\0\13\6\3\0\2\6\1\254\15\6"+
    "\7\0\2\6\1\0\2\6\17\0\7\6\1\255\3\6"+
    "\3\0\20\6\7\0\2\6\1\0\2\6\17\0\13\6"+
    "\3\0\13\6\1\256\4\6\7\0\2\6\1\0\2\6"+
    "\17\0\5\6\1\257\5\6\3\0\20\6\7\0\2\6"+
    "\1\0\1\260\1\6\17\0\13\6\3\0\20\6\7\0"+
    "\2\6\1\0\1\261\1\6\17\0\13\6\3\0\20\6"+
    "\7\0\2\6\1\0\2\6\17\0\1\262\12\6\3\0"+
    "\20\6\7\0\2\6\1\0\2\6\17\0\13\6\3\0"+
    "\1\6\1\263\16\6\7\0\2\6\1\0\2\6\17\0"+
    "\2\6\1\264\10\6\3\0\20\6\7\0\2\6\1\0"+
    "\2\6\17\0\13\6\3\0\4\6\1\265\13\6\7\0"+
    "\2\6\1\0\2\6\17\0\7\6\1\266\3\6\3\0"+
    "\20\6\7\0\2\6\1\0\2\6\17\0\10\6\1\267"+
    "\2\6\3\0\20\6\7\0\2\6\1\0\1\270\1\6"+
    "\17\0\13\6\3\0\20\6\7\0\2\6\1\0\1\271"+
    "\1\6\17\0\13\6\3\0\20\6\7\0\2\6\1\0"+
    "\1\272\1\6\17\0\13\6\3\0\20\6\7\0\2\6"+
    "\1\0\2\6\17\0\6\6\1\273\4\6\3\0\20\6"+
    "\7\0\2\6\1\0\2\6\17\0\13\6\3\0\2\6"+
    "\1\274\15\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7638];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\5\1\1\11\1\0\2\1"+
    "\13\11\11\1\1\11\14\1\2\0\1\11\2\0\1\11"+
    "\3\1\2\11\17\1\3\11\15\1\1\0\1\1\1\0"+
    "\141\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

	private ComplexSymbolFactory sf; 
	public Yylex(Reader r, ComplexSymbolFactory sf){
                this(r);
                this.sf=sf;
    } 

	// Debug flag
	public static boolean lexDebug = false;
	protected void debug(int type) {
    	if (lexDebug) {
    		log.reportMessage(yyline+":"+yycolumn+" Token "+type+" '"+yytext()+"'");		
    	}
	}

	// Output log
	protected ILog log;
	public void setLog(ILog log) {
		this.log = log;
	}
	
    // Create a new java_cup.runtime.Symbol with information about the current token
    protected Symbol symbol(int type) {
    	debug(type);
    	return sf.newSymbol("", type,new Location(yyline+1+OclProcessorImpl.lineDelta,yycolumn+1),new Location(yyline+1+OclProcessorImpl.lineDelta,yycolumn+1+yylength()), yytext());
    }
    protected Symbol symbol(int type, Object value) {
		debug(type);
		return sf.newSymbol("", type, new Location(yyline+1+OclProcessorImpl.lineDelta, yycolumn +1), new Location(yyline+1+OclProcessorImpl.lineDelta,yycolumn+1+yylength()), value);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 146) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 19: 
          { return symbol(sym.BAR);
          }
        case 68: break;
        case 62: 
          { return symbol(sym.SEQUENCE);
          }
        case 69: break;
        case 15: 
          { return symbol(sym.RIGHT_BRK);
          }
        case 70: break;
        case 13: 
          { return symbol(sym.LEFT_BRA);
          }
        case 71: break;
        case 64: 
          { return symbol(sym.TUPLE_TYPE);
          }
        case 72: break;
        case 29: 
          { return symbol(sym.UP_UP);
          }
        case 73: break;
        case 61: 
          { return symbol(sym.CONTEXT);
          }
        case 74: break;
        case 24: 
          { return symbol(sym.GT);
          }
        case 75: break;
        case 49: 
          { return symbol(sym.INIT);
          }
        case 76: break;
        case 23: 
          { return symbol(sym.LT);
          }
        case 77: break;
        case 59: 
          { return symbol(sym.ITERATE);
          }
        case 78: break;
        case 57: 
          { return symbol(sym.DERIVE);
          }
        case 79: break;
        case 16: 
          { return symbol(sym.RIGHT_BRA);
          }
        case 80: break;
        case 42: 
          { return symbol(sym.NOT);
          }
        case 81: break;
        case 41: 
          { return symbol(sym.AND);
          }
        case 82: break;
        case 38: 
          { return symbol(sym.INT_MOD);
          }
        case 83: break;
        case 1: 
          { /* just skip what was found, do nothing */
          }
        case 84: break;
        case 11: 
          { return symbol(sym.LEFT_PAR);
          }
        case 85: break;
        case 66: 
          { return symbol(sym.COLLECTION);
          }
        case 86: break;
        case 47: 
          { return symbol(sym.BAG);
          }
        case 87: break;
        case 10: 
          { return symbol(sym.UP);
          }
        case 88: break;
        case 55: 
          { return symbol(sym.TUPLE);
          }
        case 89: break;
        case 44: 
          { return symbol(sym.INT_DIVIDE);
          }
        case 90: break;
        case 8: 
          { return symbol(sym.PLUS);
          }
        case 91: break;
        case 51: 
          { return symbol(sym.TRUE);
          }
        case 92: break;
        case 14: 
          { return symbol(sym.RIGHT_PAR);
          }
        case 93: break;
        case 5: 
          { return symbol(sym.SIMPLE_NAME);
          }
        case 94: break;
        case 3: 
          { return symbol(sym.TIMES);
          }
        case 95: break;
        case 48: 
          { return symbol(sym.ELSE);
          }
        case 96: break;
        case 9: 
          { return symbol(sym.COLON);
          }
        case 97: break;
        case 43: 
          { return symbol(sym.DEF);
          }
        case 98: break;
        case 21: 
          { return symbol(sym.QUESTION);
          }
        case 99: break;
        case 52: 
          { return symbol(sym.THEN);
          }
        case 100: break;
        case 67: 
          { return symbol(sym.ORDERED_SET);
          }
        case 101: break;
        case 31: 
          { return symbol(sym.IF);
          }
        case 102: break;
        case 58: 
          { return symbol(sym.IMPLIES);
          }
        case 103: break;
        case 50: 
          { return symbol(sym.POST);
          }
        case 104: break;
        case 54: 
          { return symbol(sym.ENDIF);
          }
        case 105: break;
        case 32: 
          { return symbol(sym.OR);
          }
        case 106: break;
        case 30: 
          { return symbol(sym.IN);
          }
        case 107: break;
        case 53: 
          { return symbol(sym.BODY);
          }
        case 108: break;
        case 22: 
          { return symbol(sym.EQ);
          }
        case 109: break;
        case 20: 
          { return symbol(sym.AT);
          }
        case 110: break;
        case 39: 
          { return symbol(sym.PRE);
          }
        case 111: break;
        case 18: 
          { return symbol(sym.SEMICOLON);
          }
        case 112: break;
        case 63: 
          { return symbol(sym.UNDEFINED);
          }
        case 113: break;
        case 40: 
          { return symbol(sym.LET);
          }
        case 114: break;
        case 60: 
          { return symbol(sym.PACKAGE);
          }
        case 115: break;
        case 34: 
          { return symbol(sym.NE);
          }
        case 116: break;
        case 6: 
          { return symbol(sym.INTEGER);
          }
        case 117: break;
        case 45: 
          { return symbol(sym.XOR);
          }
        case 118: break;
        case 25: 
          { return symbol(sym.MINUS_GT);
          }
        case 119: break;
        case 4: 
          { return symbol(sym.MINUS);
          }
        case 120: break;
        case 46: 
          { return symbol(sym.SET);
          }
        case 121: break;
        case 26: 
          { return symbol(sym.DOT_DOT);
          }
        case 122: break;
        case 35: 
          { return symbol(sym.GE);
          }
        case 123: break;
        case 27: 
          { return symbol(sym.STRING);
          }
        case 124: break;
        case 2: 
          { return symbol(sym.DIVIDE);
          }
        case 125: break;
        case 28: 
          { return symbol(sym.COLON_COLON);
          }
        case 126: break;
        case 17: 
          { return symbol(sym.COMMA);
          }
        case 127: break;
        case 12: 
          { return symbol(sym.LEFT_BRK);
          }
        case 128: break;
        case 36: 
          { return symbol(sym.REAL);
          }
        case 129: break;
        case 33: 
          { return symbol(sym.LE);
          }
        case 130: break;
        case 56: 
          { return symbol(sym.FALSE);
          }
        case 131: break;
        case 65: 
          { return symbol(sym.ENDPACKAGE);
          }
        case 132: break;
        case 37: 
          { return symbol(sym.INV);
          }
        case 133: break;
        case 7: 
          { return symbol(sym.DOT);
          }
        case 134: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 	return symbol(sym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
