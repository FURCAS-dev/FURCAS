
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Aug 10 16:28:51 CEST 2007
//----------------------------------------------------

package org.oslo.ocl20.syntax.parser;

import java.util.*;
import org.oslo.ocl20.syntax.ast.*;
import org.oslo.ocl20.syntax.ast.contexts.*;
import org.oslo.ocl20.syntax.ast.expressions.*;
import org.oslo.ocl20.syntax.ast.types.*;
import java_cup.runtime.*;
import uk.ac.kent.cs.kmf.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Aug 10 16:28:51 CEST 2007
  */
public class Yyparse extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Yyparse() {super();}

  /** Constructor which sets the default scanner. */
  public Yyparse(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Yyparse(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\205\000\002\002\004\000\002\002\006\000\002\002" +
    "\003\000\002\003\002\000\002\003\004\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\010\010\000" +
    "\002\011\005\000\002\011\005\000\002\011\006\000\002" +
    "\011\006\000\002\005\005\000\002\006\006\000\002\006" +
    "\005\000\002\006\006\000\002\006\005\000\002\006\007" +
    "\000\002\006\006\000\002\006\007\000\002\006\006\000" +
    "\002\007\007\000\002\007\005\000\002\012\005\000\002" +
    "\014\006\000\002\014\005\000\002\014\006\000\002\014" +
    "\005\000\002\014\006\000\002\014\005\000\002\014\007" +
    "\000\002\014\006\000\002\014\007\000\002\014\006\000" +
    "\002\014\007\000\002\014\006\000\002\013\012\000\002" +
    "\013\010\000\002\013\011\000\002\013\007\000\002\013" +
    "\010\000\002\013\006\000\002\013\007\000\002\013\005" +
    "\000\002\015\003\000\002\015\005\000\002\016\007\000" +
    "\002\016\005\000\002\016\005\000\002\016\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\020" +
    "\006\000\002\022\006\000\002\023\003\000\002\023\005" +
    "\000\002\023\004\000\002\023\006\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\006\000\002\023\010\000\002\023" +
    "\012\000\002\023\014\000\002\023\010\000\002\023\007" +
    "\000\002\023\014\000\002\023\012\000\002\023\004\000" +
    "\002\023\004\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\011\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\006\000\002\023" +
    "\010\000\002\023\007\000\002\023\010\000\002\023\007" +
    "\000\002\024\003\000\002\024\005\000\002\025\003\000" +
    "\002\025\005\000\002\026\003\000\002\026\005\000\002" +
    "\026\003\000\002\027\002\000\002\027\004\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\031\006\000\002\031\005\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\032\003\000\002\032" +
    "\005\000\002\033\003\000\002\033\003\000\002\034\005" +
    "\000\002\035\006\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\037\003\000\002\037\005\000\002\040" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012e\000\010\002\ufffe\004\005\006\ufffe\001\002\000" +
    "\004\002\u0130\001\002\000\004\106\016\001\002\000\006" +
    "\002\uffff\006\013\001\002\000\010\002\ufffd\005\ufffd\006" +
    "\ufffd\001\002\000\010\002\ufffc\005\ufffc\006\ufffc\001\002" +
    "\000\010\002\ufffb\005\ufffb\006\ufffb\001\002\000\010\002" +
    "\ufffa\005\ufffa\006\ufffa\001\002\000\020\016\017\017\024" +
    "\020\021\021\025\022\014\024\030\106\016\001\002\000" +
    "\006\071\uff8c\073\uff8c\001\002\000\010\013\u0109\014\u010b" +
    "\015\u0108\001\002\000\140\002\uff7d\005\uff7d\006\uff7d\007" +
    "\uff7d\010\uff7d\011\uff7d\012\uff7d\013\uff7d\014\uff7d\015\uff7d" +
    "\026\uff7d\027\uff7d\030\uff7d\031\uff7d\032\uff7d\033\uff7d\034" +
    "\uff7d\035\uff7d\036\uff7d\037\uff7d\040\uff7d\041\uff7d\043\uff7d" +
    "\044\uff7d\045\uff7d\046\uff7d\051\uff7d\053\uff7d\054\uff7d\055" +
    "\uff7d\056\uff7d\057\uff7d\060\uff7d\061\uff7d\062\uff7d\063\uff7d" +
    "\064\uff7d\066\uff7d\067\uff7d\070\uff7d\071\uff7d\072\uff7d\074" +
    "\uff7d\075\uff7d\076\uff7d\077\uff7d\106\uff7d\001\002\000\006" +
    "\071\uff90\073\uff90\001\002\000\036\007\uffcc\010\uffcc\011" +
    "\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\032\uffcc\051\uffcc" +
    "\056\uffcc\061\uffcc\062\uffcc\074\uffcc\076\uffcc\001\002\000" +
    "\006\071\uff8e\073\uff8e\001\002\000\012\011\uffce\012\uffce" +
    "\067\345\106\016\001\002\000\004\071\260\001\002\000" +
    "\006\071\uff8f\073\uff8f\001\002\000\006\071\uff8d\073\uff8d" +
    "\001\002\000\014\011\uff7f\012\uff7f\067\uff7f\071\331\106" +
    "\uff7f\001\002\000\006\011\306\012\304\001\002\000\004" +
    "\071\032\001\002\000\036\007\uffcd\010\uffcd\011\uffcd\012" +
    "\uffcd\013\uffcd\014\uffcd\015\uffcd\032\uffcd\051\uffcd\056\uffcd" +
    "\061\uffcd\062\uffcd\074\uffcd\076\uffcd\001\002\000\004\106" +
    "\016\001\002\000\006\056\243\074\303\001\002\000\022" +
    "\032\036\051\uffcf\056\uffcf\060\037\061\uffcf\062\uffcf\074" +
    "\uffcf\076\uffcf\001\002\000\012\051\uffd4\056\uffd4\074\uffd4" +
    "\076\uffd4\001\002\000\050\016\017\017\024\020\021\021" +
    "\025\022\014\023\046\024\030\041\061\047\050\050\062" +
    "\052\053\071\056\100\064\101\065\102\055\103\052\104" +
    "\060\105\070\106\016\001\002\000\020\016\017\017\024" +
    "\020\021\021\025\022\014\024\030\106\016\001\002\000" +
    "\034\007\uffce\010\uffce\013\uffce\014\uffce\015\uffce\032\uffce" +
    "\051\uffce\056\uffce\061\uffce\062\uffce\067\240\074\uffce\076" +
    "\uffce\001\002\000\136\002\uff7f\005\uff7f\006\uff7f\007\uff7f" +
    "\010\uff7f\011\uff7f\012\uff7f\013\uff7f\014\uff7f\015\uff7f\026" +
    "\uff7f\027\uff7f\030\uff7f\031\uff7f\032\uff7f\033\uff7f\034\uff7f" +
    "\035\uff7f\036\uff7f\037\uff7f\040\uff7f\041\uff7f\043\uff7f\044" +
    "\uff7f\045\uff7f\046\uff7f\051\uff7f\053\uff7f\054\uff7f\055\uff7f" +
    "\056\uff7f\057\uff7f\060\uff7f\061\uff7f\062\uff7f\063\uff7f\064" +
    "\uff7f\066\uff7f\067\uff7f\070\uff7f\071\uff7f\072\uff7f\074\uff7f" +
    "\075\uff7f\076\uff7f\077\uff7f\001\002\000\020\032\043\051" +
    "\uffd1\056\uffd1\061\uffd1\062\uffd1\074\uffd1\076\uffd1\001\002" +
    "\000\050\016\017\017\024\020\021\021\025\022\014\023" +
    "\046\024\030\041\061\047\050\050\062\052\053\071\056" +
    "\100\064\101\065\102\055\103\052\104\060\105\070\106" +
    "\016\001\002\000\132\002\uff94\005\uff94\006\uff94\007\uff94" +
    "\010\uff94\011\uff94\012\uff94\013\uff94\014\uff94\015\uff94\026" +
    "\uff94\027\uff94\030\uff94\031\uff94\032\uff94\033\uff94\034\uff94" +
    "\035\uff94\036\uff94\037\uff94\040\uff94\041\uff94\043\uff94\044" +
    "\uff94\045\uff94\046\uff94\051\uff94\053\uff94\054\uff94\055\uff94" +
    "\056\uff94\057\uff94\060\uff94\061\uff94\062\uff94\063\uff94\066" +
    "\uff94\070\uff94\071\uff94\072\uff94\074\uff94\075\uff94\076\uff94" +
    "\077\uff94\001\002\000\132\002\uffc9\005\uffc9\006\uffc9\007" +
    "\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9" +
    "\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034" +
    "\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\043\uffc9" +
    "\044\uffc9\045\uffc9\046\uffc9\051\uffc9\053\uffc9\054\uffc9\055" +
    "\uffc9\056\uffc9\057\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9" +
    "\066\uffc9\070\uffc9\071\uffc9\072\uffc9\074\uffc9\075\uffc9\076" +
    "\uffc9\077\uffc9\001\002\000\004\073\277\001\002\000\132" +
    "\002\uff95\005\uff95\006\uff95\007\uff95\010\uff95\011\uff95\012" +
    "\uff95\013\uff95\014\uff95\015\uff95\026\uff95\027\uff95\030\uff95" +
    "\031\uff95\032\uff95\033\uff95\034\uff95\035\uff95\036\uff95\037" +
    "\uff95\040\uff95\041\uff95\043\uff95\044\uff95\045\uff95\046\uff95" +
    "\051\uff95\053\uff95\054\uff95\055\uff95\056\uff95\057\uff95\060" +
    "\uff95\061\uff95\062\uff95\063\uff95\066\uff95\070\uff95\071\uff95" +
    "\072\uff95\074\uff95\075\uff95\076\uff95\077\uff95\001\002\000" +
    "\050\016\017\017\024\020\021\021\025\022\014\023\046" +
    "\024\030\041\061\047\050\050\062\052\053\071\056\100" +
    "\064\101\065\102\055\103\052\104\060\105\070\106\016" +
    "\001\002\000\006\071\260\073\261\001\002\000\132\002" +
    "\uff82\005\uff82\006\uff82\007\uff82\010\uff82\011\uff82\012\uff82" +
    "\013\uff82\014\uff82\015\uff82\026\uff82\027\uff82\030\uff82\031" +
    "\uff82\032\uff82\033\uff82\034\uff82\035\uff82\036\uff82\037\uff82" +
    "\040\uff82\041\uff82\043\uff82\044\uff82\045\uff82\046\uff82\051" +
    "\uff82\053\uff82\054\uff82\055\uff82\056\uff82\057\uff82\060\uff82" +
    "\061\uff82\062\uff82\063\uff82\066\uff82\070\uff82\071\uff82\072" +
    "\uff82\074\uff82\075\uff82\076\uff82\077\uff82\001\002\000\050" +
    "\016\017\017\024\020\021\021\025\022\014\023\046\024" +
    "\030\041\061\047\050\050\062\052\053\071\056\100\064" +
    "\101\065\102\055\103\052\104\060\105\070\106\016\001" +
    "\002\000\132\002\uff93\005\uff93\006\uff93\007\uff93\010\uff93" +
    "\011\uff93\012\uff93\013\uff93\014\uff93\015\uff93\026\uff93\027" +
    "\uff93\030\uff93\031\uff93\032\uff93\033\uff93\034\uff93\035\uff93" +
    "\036\uff93\037\uff93\040\uff93\041\uff93\043\uff93\044\uff93\045" +
    "\uff93\046\uff93\051\uff93\053\uff93\054\uff93\055\uff93\056\uff93" +
    "\057\uff93\060\uff93\061\uff93\062\uff93\063\uff93\066\uff93\070" +
    "\uff93\071\uff93\072\uff93\074\uff93\075\uff93\076\uff93\077\uff93" +
    "\001\002\000\132\002\uff83\005\uff83\006\uff83\007\uff83\010" +
    "\uff83\011\uff83\012\uff83\013\uff83\014\uff83\015\uff83\026\uff83" +
    "\027\uff83\030\uff83\031\uff83\032\uff83\033\uff83\034\uff83\035" +
    "\uff83\036\uff83\037\uff83\040\uff83\041\uff83\043\uff83\044\uff83" +
    "\045\uff83\046\uff83\051\uff83\053\uff83\054\uff83\055\uff83\056" +
    "\uff83\057\uff83\060\uff83\061\uff83\062\uff83\063\uff83\066\uff83" +
    "\070\uff83\071\uff83\072\uff83\074\uff83\075\uff83\076\uff83\077" +
    "\uff83\001\002\000\050\016\017\017\024\020\021\021\025" +
    "\022\014\023\046\024\030\041\061\047\050\050\062\052" +
    "\053\071\056\100\064\101\065\102\055\103\052\104\060" +
    "\105\070\106\016\001\002\000\132\002\uff97\005\uff97\006" +
    "\uff97\007\uff97\010\uff97\011\uff97\012\uff97\013\uff97\014\uff97" +
    "\015\uff97\026\uff97\027\uff97\030\uff97\031\uff97\032\uff97\033" +
    "\uff97\034\uff97\035\uff97\036\uff97\037\uff97\040\uff97\041\uff97" +
    "\043\uff97\044\uff97\045\uff97\046\uff97\051\uff97\053\uff97\054" +
    "\uff97\055\uff97\056\uff97\057\uff97\060\uff97\061\uff97\062\uff97" +
    "\063\uff97\066\uff97\070\uff97\071\uff97\072\uff97\074\uff97\075" +
    "\uff97\076\uff97\077\uff97\001\002\000\132\002\uff81\005\uff81" +
    "\006\uff81\007\uff81\010\uff81\011\uff81\012\uff81\013\uff81\014" +
    "\uff81\015\uff81\026\uff81\027\uff81\030\uff81\031\uff81\032\uff81" +
    "\033\uff81\034\uff81\035\uff81\036\uff81\037\uff81\040\uff81\041" +
    "\uff81\043\uff81\044\uff81\045\uff81\046\uff81\051\uff81\053\uff81" +
    "\054\uff81\055\uff81\056\uff81\057\uff81\060\uff81\061\uff81\062" +
    "\uff81\063\uff81\066\uff81\070\uff81\071\uff81\072\uff81\074\uff81" +
    "\075\uff81\076\uff81\077\uff81\001\002\000\050\016\017\017" +
    "\024\020\021\021\025\022\014\023\046\024\030\041\061" +
    "\047\050\050\062\052\053\071\056\100\064\101\065\102" +
    "\055\103\052\104\060\105\070\106\016\001\002\000\004" +
    "\106\016\001\002\000\136\002\uff99\005\uff99\006\uff99\007" +
    "\uff99\010\uff99\011\uff99\012\uff99\013\uff99\014\uff99\015\uff99" +
    "\026\uff99\027\uff99\030\uff99\031\uff99\032\uff99\033\uff99\034" +
    "\uff99\035\uff99\036\uff99\037\uff99\040\uff99\041\uff99\043\uff99" +
    "\044\uff99\045\uff99\046\uff99\051\uff99\053\uff99\054\uff99\055" +
    "\uff99\056\uff99\057\uff99\060\uff99\061\uff99\062\uff99\063\uff99" +
    "\064\125\066\uff99\067\240\070\uff99\071\uff99\072\uff99\074" +
    "\uff99\075\uff99\076\uff99\077\uff99\001\002\000\132\002\uff85" +
    "\005\uff85\006\uff85\007\uff85\010\uff85\011\uff85\012\uff85\013" +
    "\uff85\014\uff85\015\uff85\026\uff85\027\uff85\030\uff85\031\uff85" +
    "\032\uff85\033\uff85\034\uff85\035\uff85\036\uff85\037\uff85\040" +
    "\uff85\041\uff85\043\uff85\044\uff85\045\uff85\046\uff85\051\uff85" +
    "\053\uff85\054\uff85\055\uff85\056\uff85\057\uff85\060\uff85\061" +
    "\uff85\062\uff85\063\uff85\066\uff85\070\uff85\071\uff85\072\uff85" +
    "\074\uff85\075\uff85\076\uff85\077\uff85\001\002\000\132\002" +
    "\uff84\005\uff84\006\uff84\007\uff84\010\uff84\011\uff84\012\uff84" +
    "\013\uff84\014\uff84\015\uff84\026\uff84\027\uff84\030\uff84\031" +
    "\uff84\032\uff84\033\uff84\034\uff84\035\uff84\036\uff84\037\uff84" +
    "\040\uff84\041\uff84\043\uff84\044\uff84\045\uff84\046\uff84\051" +
    "\uff84\053\uff84\054\uff84\055\uff84\056\uff84\057\uff84\060\uff84" +
    "\061\uff84\062\uff84\063\uff84\066\uff84\070\uff84\071\uff84\072" +
    "\uff84\074\uff84\075\uff84\076\uff84\077\uff84\001\002\000\132" +
    "\002\uff96\005\uff96\006\uff96\007\uff96\010\uff96\011\uff96\012" +
    "\uff96\013\uff96\014\uff96\015\uff96\026\uff96\027\uff96\030\uff96" +
    "\031\uff96\032\uff96\033\uff96\034\uff96\035\uff96\036\uff96\037" +
    "\uff96\040\uff96\041\uff96\043\uff96\044\uff96\045\uff96\046\uff96" +
    "\051\uff96\053\uff96\054\uff96\055\uff96\056\uff96\057\uff96\060" +
    "\uff96\061\uff96\062\uff96\063\uff96\066\uff96\070\uff96\071\uff96" +
    "\072\uff96\074\uff96\075\uff96\076\uff96\077\uff96\001\002\000" +
    "\072\026\101\027\072\030\076\031\116\032\115\033\074" +
    "\034\073\035\102\036\103\037\110\040\075\041\111\043" +
    "\071\044\106\045\114\046\112\051\uffd2\056\uffd2\057\113" +
    "\061\uffd2\062\uffd2\063\100\070\077\071\105\072\107\074" +
    "\uffd2\076\uffd2\077\104\001\002\000\132\002\uff80\005\uff80" +
    "\006\uff80\007\uff80\010\uff80\011\uff80\012\uff80\013\uff80\014" +
    "\uff80\015\uff80\026\uff80\027\uff80\030\uff80\031\uff80\032\uff80" +
    "\033\uff80\034\uff80\035\uff80\036\uff80\037\uff80\040\uff80\041" +
    "\uff80\043\uff80\044\uff80\045\uff80\046\uff80\051\uff80\053\uff80" +
    "\054\uff80\055\uff80\056\uff80\057\uff80\060\uff80\061\uff80\062" +
    "\uff80\063\uff80\066\uff80\070\uff80\071\uff80\072\uff80\074\uff80" +
    "\075\uff80\076\uff80\077\uff80\001\002\000\050\016\017\017" +
    "\024\020\021\021\025\022\014\023\046\024\030\041\061" +
    "\047\050\050\062\052\053\071\056\100\064\101\065\102" +
    "\055\103\052\104\060\105\070\106\016\001\002\000\050" +
    "\016\017\017\024\020\021\021\025\022\014\023\046\024" +
    "\030\041\061\047\050\050\062\052\053\071\056\100\064" +
    "\101\065\102\055\103\052\104\060\105\070\106\016\001" +
    "\002\000\050\016\017\017\024\020\021\021\025\022\014" +
    "\023\046\024\030\041\061\047\050\050\062\052\053\071" +
    "\056\100\064\101\065\102\055\103\052\104\060\105\070" +
    "\106\016\001\002\000\050\016\017\017\024\020\021\021" +
    "\025\022\014\023\046\024\030\041\061\047\050\050\062" +
    "\052\053\071\056\100\064\101\065\102\055\103\052\104" +
    "\060\105\070\106\016\001\002\000\050\016\017\017\024" +
    "\020\021\021\025\022\014\023\046\024\030\041\061\047" +
    "\050\050\062\052\053\071\056\100\064\101\065\102\055" +
    "\103\052\104\060\105\070\106\016\001\002\000\050\016" +
    "\017\017\024\020\021\021\025\022\014\023\046\024\030" +
    "\041\061\047\050\050\062\052\053\071\056\100\064\101" +
    "\065\102\055\103\052\104\060\105\070\106\016\001\002" +
    "\000\004\106\016\001\002\000\004\106\016\001\002\000" +
    "\050\016\017\017\024\020\021\021\025\022\014\023\046" +
    "\024\030\041\061\047\050\050\062\052\053\071\056\100" +
    "\064\101\065\102\055\103\052\104\060\105\070\106\016" +
    "\001\002\000\050\016\017\017\024\020\021\021\025\022" +
    "\014\023\046\024\030\041\061\047\050\050\062\052\053" +
    "\071\056\100\064\101\065\102\055\103\052\104\060\105" +
    "\070\106\016\001\002\000\050\016\017\017\024\020\021" +
    "\021\025\022\014\023\046\024\030\041\061\047\050\050" +
    "\062\052\053\071\056\100\064\101\065\102\055\103\052" +
    "\104\060\105\070\106\016\001\002\000\010\003\170\025" +
    "\172\106\016\001\002\000\052\016\017\017\024\020\021" +
    "\021\025\022\014\023\046\024\030\041\061\047\050\050" +
    "\062\052\053\071\056\074\144\100\064\101\065\102\055" +
    "\103\052\104\060\105\070\106\016\001\002\000\050\016" +
    "\017\017\024\020\021\021\025\022\014\023\046\024\030" +
    "\041\061\047\050\050\062\052\053\071\056\100\064\101" +
    "\065\102\055\103\052\104\060\105\070\106\016\001\002" +
    "\000\050\016\017\017\024\020\021\021\025\022\014\023" +
    "\046\024\030\041\061\047\050\050\062\052\053\071\056" +
    "\100\064\101\065\102\055\103\052\104\060\105\070\106" +
    "\016\001\002\000\050\016\017\017\024\020\021\021\025" +
    "\022\014\023\046\024\030\041\061\047\050\050\062\052" +
    "\053\071\056\100\064\101\065\102\055\103\052\104\060" +
    "\105\070\106\016\001\002\000\050\016\017\017\024\020" +
    "\021\021\025\022\014\023\046\024\030\041\061\047\050" +
    "\050\062\052\053\071\056\100\064\101\065\102\055\103" +
    "\052\104\060\105\070\106\016\001\002\000\050\016\017" +
    "\017\024\020\021\021\025\022\014\023\046\024\030\041" +
    "\061\047\050\050\062\052\053\071\056\100\064\101\065" +
    "\102\055\103\052\104\060\105\070\106\016\001\002\000" +
    "\010\003\122\015\123\106\016\001\002\000\050\016\017" +
    "\017\024\020\021\021\025\022\014\023\046\024\030\041" +
    "\061\047\050\050\062\052\053\071\056\100\064\101\065" +
    "\102\055\103\052\104\060\105\070\106\016\001\002\000" +
    "\050\016\017\017\024\020\021\021\025\022\014\023\046" +
    "\024\030\041\061\047\050\050\062\052\053\071\056\100" +
    "\064\101\065\102\055\103\052\104\060\105\070\106\016" +
    "\001\002\000\050\016\017\017\024\020\021\021\025\022" +
    "\014\023\046\024\030\041\061\047\050\050\062\052\053" +
    "\071\056\100\064\101\065\102\055\103\052\104\060\105" +
    "\070\106\016\001\002\000\132\002\uffa7\005\uffa7\006\uffa7" +
    "\007\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015" +
    "\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032\115\033\074" +
    "\034\073\035\102\036\103\037\110\040\075\041\111\043" +
    "\071\044\106\045\114\046\112\051\uffa7\053\uffa7\054\uffa7" +
    "\055\uffa7\056\uffa7\057\113\060\uffa7\061\uffa7\062\uffa7\063" +
    "\uffa7\066\uffa7\070\uffa7\071\105\072\107\074\uffa7\075\uffa7" +
    "\076\uffa7\077\104\001\002\000\132\002\uffab\005\uffab\006" +
    "\uffab\007\uffab\010\uffab\011\uffab\012\uffab\013\uffab\014\uffab" +
    "\015\uffab\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033" +
    "\uffab\034\073\035\102\036\103\037\110\040\075\041\111" +
    "\043\071\044\106\045\114\046\112\051\uffab\053\uffab\054" +
    "\uffab\055\uffab\056\uffab\057\113\060\uffab\061\uffab\062\uffab" +
    "\063\uffab\066\uffab\070\uffab\071\105\072\107\074\uffab\075" +
    "\uffab\076\uffab\077\104\001\002\000\132\002\uffb4\005\uffb4" +
    "\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014" +
    "\uffb4\015\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4" +
    "\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041" +
    "\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4\051\uffb4\053\uffb4" +
    "\054\uffb4\055\uffb4\056\uffb4\057\113\060\uffb4\061\uffb4\062" +
    "\uffb4\063\uffb4\066\uffb4\070\uffb4\071\105\072\107\074\uffb4" +
    "\075\uffb4\076\uffb4\077\104\001\002\000\132\002\uffc4\005" +
    "\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4" +
    "\014\uffc4\015\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032" +
    "\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4" +
    "\041\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\051\uffc4\053" +
    "\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4" +
    "\062\uffc4\063\uffc4\066\uffc4\070\uffc4\071\uffc4\072\uffc4\074" +
    "\uffc4\075\uffc4\076\uffc4\077\uffc4\001\002\000\132\002\uffc5" +
    "\005\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013" +
    "\uffc5\014\uffc5\015\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5" +
    "\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040" +
    "\uffc5\041\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\051\uffc5" +
    "\053\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5\061" +
    "\uffc5\062\uffc5\063\uffc5\066\uffc5\070\uffc5\071\uffc5\072\uffc5" +
    "\074\uffc5\075\uffc5\076\uffc5\077\uffc5\001\002\000\134\002" +
    "\uff99\005\uff99\006\uff99\007\uff99\010\uff99\011\uff99\012\uff99" +
    "\013\uff99\014\uff99\015\uff99\026\uff99\027\uff99\030\uff99\031" +
    "\uff99\032\uff99\033\uff99\034\uff99\035\uff99\036\uff99\037\uff99" +
    "\040\uff99\041\uff99\043\uff99\044\uff99\045\uff99\046\uff99\051" +
    "\uff99\053\uff99\054\uff99\055\uff99\056\uff99\057\uff99\060\uff99" +
    "\061\uff99\062\uff99\063\uff99\064\125\066\uff99\070\uff99\071" +
    "\uff99\072\uff99\074\uff99\075\uff99\076\uff99\077\uff99\001\002" +
    "\000\004\013\127\001\002\000\132\002\uffc6\005\uffc6\006" +
    "\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6" +
    "\015\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033" +
    "\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6" +
    "\043\uffc6\044\uffc6\045\uffc6\046\uffc6\051\uffc6\053\uffc6\054" +
    "\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6" +
    "\063\uffc6\066\uffc6\070\uffc6\071\uffc6\072\uffc6\074\uffc6\075" +
    "\uffc6\076\uffc6\077\uffc6\001\002\000\132\002\uff98\005\uff98" +
    "\006\uff98\007\uff98\010\uff98\011\uff98\012\uff98\013\uff98\014" +
    "\uff98\015\uff98\026\uff98\027\uff98\030\uff98\031\uff98\032\uff98" +
    "\033\uff98\034\uff98\035\uff98\036\uff98\037\uff98\040\uff98\041" +
    "\uff98\043\uff98\044\uff98\045\uff98\046\uff98\051\uff98\053\uff98" +
    "\054\uff98\055\uff98\056\uff98\057\uff98\060\uff98\061\uff98\062" +
    "\uff98\063\uff98\066\uff98\070\uff98\071\uff98\072\uff98\074\uff98" +
    "\075\uff98\076\uff98\077\uff98\001\002\000\132\002\uffb3\005" +
    "\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\013\uffb3" +
    "\014\uffb3\015\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032" +
    "\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3" +
    "\041\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\051\uffb3\053" +
    "\uffb3\054\uffb3\055\uffb3\056\uffb3\057\113\060\uffb3\061\uffb3" +
    "\062\uffb3\063\uffb3\066\uffb3\070\uffb3\071\105\072\107\074" +
    "\uffb3\075\uffb3\076\uffb3\077\104\001\002\000\132\002\uffb1" +
    "\005\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\013" +
    "\uffb1\014\uffb1\015\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1" +
    "\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040" +
    "\uffb1\041\uffb1\043\071\044\106\045\114\046\112\051\uffb1" +
    "\053\uffb1\054\uffb1\055\uffb1\056\uffb1\057\113\060\uffb1\061" +
    "\uffb1\062\uffb1\063\uffb1\066\uffb1\070\uffb1\071\105\072\107" +
    "\074\uffb1\075\uffb1\076\uffb1\077\104\001\002\000\132\002" +
    "\uffac\005\uffac\006\uffac\007\uffac\010\uffac\011\uffac\012\uffac" +
    "\013\uffac\014\uffac\015\uffac\026\uffac\027\uffac\030\uffac\031" +
    "\uffac\032\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac" +
    "\040\075\041\111\043\071\044\106\045\114\046\112\051" +
    "\uffac\053\uffac\054\uffac\055\uffac\056\uffac\057\113\060\uffac" +
    "\061\uffac\062\uffac\063\uffac\066\uffac\070\uffac\071\105\072" +
    "\107\074\uffac\075\uffac\076\uffac\077\104\001\002\000\064" +
    "\026\101\027\072\030\076\031\116\032\115\033\074\034" +
    "\073\035\102\036\103\037\110\040\075\041\111\043\071" +
    "\044\106\045\114\046\112\056\uffa0\057\113\063\100\070" +
    "\077\071\105\072\107\074\uffa0\075\uffa0\077\104\001\002" +
    "\000\006\056\135\075\136\001\002\000\050\016\017\017" +
    "\024\020\021\021\025\022\014\023\046\024\030\041\061" +
    "\047\050\050\062\052\053\071\056\100\064\101\065\102" +
    "\055\103\052\104\060\105\070\106\016\001\002\000\134" +
    "\002\uff99\005\uff99\006\uff99\007\uff99\010\uff99\011\uff99\012" +
    "\uff99\013\uff99\014\uff99\015\uff99\026\uff99\027\uff99\030\uff99" +
    "\031\uff99\032\uff99\033\uff99\034\uff99\035\uff99\036\uff99\037" +
    "\uff99\040\uff99\041\uff99\043\uff99\044\uff99\045\uff99\046\uff99" +
    "\051\uff99\053\uff99\054\uff99\055\uff99\056\uff99\057\uff99\060" +
    "\uff99\061\uff99\062\uff99\063\uff99\064\125\066\uff99\070\uff99" +
    "\071\uff99\072\uff99\074\uff99\075\uff99\076\uff99\077\uff99\001" +
    "\002\000\132\002\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb" +
    "\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\026\uffbb\027" +
    "\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb" +
    "\036\uffbb\037\uffbb\040\uffbb\041\uffbb\043\uffbb\044\uffbb\045" +
    "\uffbb\046\uffbb\051\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb" +
    "\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\066\uffbb\070" +
    "\uffbb\071\uffbb\072\uffbb\074\uffbb\075\uffbb\076\uffbb\077\uffbb" +
    "\001\002\000\064\026\101\027\072\030\076\031\116\032" +
    "\115\033\074\034\073\035\102\036\103\037\110\040\075" +
    "\041\111\043\071\044\106\045\114\046\112\056\uff9f\057" +
    "\113\063\100\070\077\071\105\072\107\074\uff9f\075\uff9f" +
    "\077\104\001\002\000\132\002\uffb5\005\uffb5\006\uffb5\007" +
    "\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5" +
    "\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034" +
    "\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\043\uffb5" +
    "\044\uffb5\045\uffb5\046\uffb5\051\uffb5\053\uffb5\054\uffb5\055" +
    "\uffb5\056\uffb5\057\113\060\uffb5\061\uffb5\062\uffb5\063\uffb5" +
    "\066\uffb5\070\uffb5\071\105\072\107\074\uffb5\075\uffb5\076" +
    "\uffb5\077\104\001\002\000\004\062\165\001\002\000\072" +
    "\026\uff7f\027\uff7f\030\uff7f\031\uff7f\032\036\033\uff7f\034" +
    "\uff7f\035\uff7f\036\uff7f\037\uff7f\040\uff7f\041\uff7f\043\uff7f" +
    "\044\uff7f\045\uff7f\046\uff7f\056\uff7f\057\uff7f\060\037\062" +
    "\uffcf\063\uff7f\064\uff7f\067\uff7f\070\uff7f\071\uff7f\072\uff7f" +
    "\074\uff7f\077\uff7f\001\002\000\132\002\uffc1\005\uffc1\006" +
    "\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1" +
    "\015\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033" +
    "\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1" +
    "\043\uffc1\044\uffc1\045\uffc1\046\uffc1\051\uffc1\053\uffc1\054" +
    "\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1" +
    "\063\uffc1\066\uffc1\070\uffc1\071\uffc1\072\uffc1\074\uffc1\075" +
    "\uffc1\076\uffc1\077\uffc1\001\002\000\064\026\101\027\072" +
    "\030\076\031\116\032\115\033\074\034\073\035\102\036" +
    "\103\037\110\040\075\041\111\043\071\044\106\045\114" +
    "\046\112\056\147\057\113\060\146\063\100\070\077\071" +
    "\105\072\107\074\150\077\104\001\002\000\020\016\017" +
    "\017\024\020\021\021\025\022\014\024\030\106\016\001" +
    "\002\000\050\016\017\017\024\020\021\021\025\022\014" +
    "\023\046\024\030\041\061\047\050\050\062\052\053\071" +
    "\056\100\064\101\065\102\055\103\052\104\060\105\070" +
    "\106\016\001\002\000\132\002\uffc0\005\uffc0\006\uffc0\007" +
    "\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0" +
    "\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034" +
    "\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\043\uffc0" +
    "\044\uffc0\045\uffc0\046\uffc0\051\uffc0\053\uffc0\054\uffc0\055" +
    "\uffc0\056\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0\063\uffc0" +
    "\066\uffc0\070\uffc0\071\uffc0\072\uffc0\074\uffc0\075\uffc0\076" +
    "\uffc0\077\uffc0\001\002\000\004\062\154\001\002\000\006" +
    "\056\135\074\153\001\002\000\132\002\uffbf\005\uffbf\006" +
    "\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf" +
    "\015\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033" +
    "\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf" +
    "\043\uffbf\044\uffbf\045\uffbf\046\uffbf\051\uffbf\053\uffbf\054" +
    "\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\061\uffbf\062\uffbf" +
    "\063\uffbf\066\uffbf\070\uffbf\071\uffbf\072\uffbf\074\uffbf\075" +
    "\uffbf\076\uffbf\077\uffbf\001\002\000\050\016\017\017\024" +
    "\020\021\021\025\022\014\023\046\024\030\041\061\047" +
    "\050\050\062\052\053\071\056\100\064\101\065\102\055" +
    "\103\052\104\060\105\070\106\016\001\002\000\060\026" +
    "\101\027\072\030\076\031\116\032\115\033\074\034\073" +
    "\035\102\036\103\037\110\040\075\041\111\043\071\044" +
    "\106\045\114\046\112\057\113\063\100\070\077\071\105" +
    "\072\107\074\156\077\104\001\002\000\132\002\uffbe\005" +
    "\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe" +
    "\014\uffbe\015\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032" +
    "\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe" +
    "\041\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\051\uffbe\053" +
    "\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe" +
    "\062\uffbe\063\uffbe\066\uffbe\070\uffbe\071\uffbe\072\uffbe\074" +
    "\uffbe\075\uffbe\076\uffbe\077\uffbe\001\002\000\004\056\160" +
    "\001\002\000\004\106\016\001\002\000\004\062\162\001" +
    "\002\000\050\016\017\017\024\020\021\021\025\022\014" +
    "\023\046\024\030\041\061\047\050\050\062\052\053\071" +
    "\056\100\064\101\065\102\055\103\052\104\060\105\070" +
    "\106\016\001\002\000\060\026\101\027\072\030\076\031" +
    "\116\032\115\033\074\034\073\035\102\036\103\037\110" +
    "\040\075\041\111\043\071\044\106\045\114\046\112\057" +
    "\113\063\100\070\077\071\105\072\107\074\164\077\104" +
    "\001\002\000\132\002\uffbd\005\uffbd\006\uffbd\007\uffbd\010" +
    "\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\026\uffbd" +
    "\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035" +
    "\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\043\uffbd\044\uffbd" +
    "\045\uffbd\046\uffbd\051\uffbd\053\uffbd\054\uffbd\055\uffbd\056" +
    "\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\066\uffbd" +
    "\070\uffbd\071\uffbd\072\uffbd\074\uffbd\075\uffbd\076\uffbd\077" +
    "\uffbd\001\002\000\050\016\017\017\024\020\021\021\025" +
    "\022\014\023\046\024\030\041\061\047\050\050\062\052" +
    "\053\071\056\100\064\101\065\102\055\103\052\104\060" +
    "\105\070\106\016\001\002\000\060\026\101\027\072\030" +
    "\076\031\116\032\115\033\074\034\073\035\102\036\103" +
    "\037\110\040\075\041\111\043\071\044\106\045\114\046" +
    "\112\057\113\063\100\070\077\071\105\072\107\074\167" +
    "\077\104\001\002\000\132\002\uffbc\005\uffbc\006\uffbc\007" +
    "\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc" +
    "\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034" +
    "\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\043\uffbc" +
    "\044\uffbc\045\uffbc\046\uffbc\051\uffbc\053\uffbc\054\uffbc\055" +
    "\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc" +
    "\066\uffbc\070\uffbc\071\uffbc\072\uffbc\074\uffbc\075\uffbc\076" +
    "\uffbc\077\uffbc\001\002\000\132\002\uffc2\005\uffc2\006\uffc2" +
    "\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015" +
    "\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2" +
    "\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\043" +
    "\uffc2\044\uffc2\045\uffc2\046\uffc2\051\uffc2\053\uffc2\054\uffc2" +
    "\055\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2\063" +
    "\uffc2\066\uffc2\070\uffc2\071\uffc2\072\uffc2\074\uffc2\075\uffc2" +
    "\076\uffc2\077\uffc2\001\002\000\132\002\uffc3\005\uffc3\006" +
    "\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3" +
    "\015\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033" +
    "\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3" +
    "\043\uffc3\044\uffc3\045\uffc3\046\uffc3\051\uffc3\053\uffc3\054" +
    "\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\062\uffc3" +
    "\063\uffc3\066\uffc3\070\uffc3\071\uffc3\072\uffc3\074\uffc3\075" +
    "\uffc3\076\uffc3\077\uffc3\001\002\000\004\071\173\001\002" +
    "\000\004\106\016\001\002\000\006\061\175\062\176\001" +
    "\002\000\004\106\016\001\002\000\050\016\017\017\024" +
    "\020\021\021\025\022\014\023\046\024\030\041\061\047" +
    "\050\050\062\052\053\071\056\100\064\101\065\102\055" +
    "\103\052\104\060\105\070\106\016\001\002\000\060\026" +
    "\101\027\072\030\076\031\116\032\115\033\074\034\073" +
    "\035\102\036\103\037\110\040\075\041\111\043\071\044" +
    "\106\045\114\046\112\057\113\063\100\070\077\071\105" +
    "\072\107\074\200\077\104\001\002\000\132\002\uffb9\005" +
    "\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9" +
    "\014\uffb9\015\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032" +
    "\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9" +
    "\041\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\051\uffb9\053" +
    "\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9" +
    "\062\uffb9\063\uffb9\066\uffb9\070\uffb9\071\uffb9\072\uffb9\074" +
    "\uffb9\075\uffb9\076\uffb9\077\uffb9\001\002\000\004\062\202" +
    "\001\002\000\050\016\017\017\024\020\021\021\025\022" +
    "\014\023\046\024\030\041\061\047\050\050\062\052\053" +
    "\071\056\100\064\101\065\102\055\103\052\104\060\105" +
    "\070\106\016\001\002\000\060\026\101\027\072\030\076" +
    "\031\116\032\115\033\074\034\073\035\102\036\103\037" +
    "\110\040\075\041\111\043\071\044\106\045\114\046\112" +
    "\057\113\063\100\070\077\071\105\072\107\074\204\077" +
    "\104\001\002\000\132\002\uffba\005\uffba\006\uffba\007\uffba" +
    "\010\uffba\011\uffba\012\uffba\013\uffba\014\uffba\015\uffba\026" +
    "\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba" +
    "\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\043\uffba\044" +
    "\uffba\045\uffba\046\uffba\051\uffba\053\uffba\054\uffba\055\uffba" +
    "\056\uffba\057\uffba\060\uffba\061\uffba\062\uffba\063\uffba\066" +
    "\uffba\070\uffba\071\uffba\072\uffba\074\uffba\075\uffba\076\uffba" +
    "\077\uffba\001\002\000\132\002\uffad\005\uffad\006\uffad\007" +
    "\uffad\010\uffad\011\uffad\012\uffad\013\uffad\014\uffad\015\uffad" +
    "\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad\034" +
    "\uffad\035\uffad\036\uffad\037\uffad\040\075\041\111\043\071" +
    "\044\106\045\114\046\112\051\uffad\053\uffad\054\uffad\055" +
    "\uffad\056\uffad\057\113\060\uffad\061\uffad\062\uffad\063\uffad" +
    "\066\uffad\070\uffad\071\105\072\107\074\uffad\075\uffad\076" +
    "\uffad\077\104\001\002\000\132\002\uffae\005\uffae\006\uffae" +
    "\007\uffae\010\uffae\011\uffae\012\uffae\013\uffae\014\uffae\015" +
    "\uffae\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae" +
    "\034\uffae\035\uffae\036\uffae\037\uffae\040\075\041\111\043" +
    "\071\044\106\045\114\046\112\051\uffae\053\uffae\054\uffae" +
    "\055\uffae\056\uffae\057\113\060\uffae\061\uffae\062\uffae\063" +
    "\uffae\066\uffae\070\uffae\071\105\072\107\074\uffae\075\uffae" +
    "\076\uffae\077\104\001\002\000\132\002\uffa6\005\uffa6\006" +
    "\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\014\uffa6" +
    "\015\uffa6\026\uffa6\027\072\030\076\031\116\032\115\033" +
    "\074\034\073\035\102\036\103\037\110\040\075\041\111" +
    "\043\071\044\106\045\114\046\112\051\uffa6\053\uffa6\054" +
    "\uffa6\055\uffa6\056\uffa6\057\113\060\uffa6\061\uffa6\062\uffa6" +
    "\063\uffa6\066\uffa6\070\uffa6\071\105\072\107\074\uffa6\075" +
    "\uffa6\076\uffa6\077\104\001\002\000\004\071\211\001\002" +
    "\000\054\016\017\017\024\020\021\021\025\022\014\023" +
    "\046\024\030\041\061\047\050\050\062\052\053\065\212" +
    "\071\056\074\214\100\064\101\065\102\055\103\052\104" +
    "\060\105\070\106\016\001\002\000\010\056\uff9c\060\222" +
    "\074\uff9c\001\002\000\006\056\uff9e\074\uff9e\001\002\000" +
    "\132\002\uffa1\005\uffa1\006\uffa1\007\uffa1\010\uffa1\011\uffa1" +
    "\012\uffa1\013\uffa1\014\uffa1\015\uffa1\026\uffa1\027\uffa1\030" +
    "\uffa1\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1" +
    "\037\uffa1\040\uffa1\041\uffa1\043\uffa1\044\uffa1\045\uffa1\046" +
    "\uffa1\051\uffa1\053\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1" +
    "\060\uffa1\061\uffa1\062\uffa1\063\uffa1\066\uffa1\070\uffa1\071" +
    "\uffa1\072\uffa1\074\uffa1\075\uffa1\076\uffa1\077\uffa1\001\002" +
    "\000\006\056\217\074\220\001\002\000\062\026\101\027" +
    "\072\030\076\031\116\032\115\033\074\034\073\035\102" +
    "\036\103\037\110\040\075\041\111\043\071\044\106\045" +
    "\114\046\112\056\uff9a\057\113\063\100\070\077\071\105" +
    "\072\107\074\uff9a\077\104\001\002\000\052\016\017\017" +
    "\024\020\021\021\025\022\014\023\046\024\030\041\061" +
    "\047\050\050\062\052\053\065\212\071\056\100\064\101" +
    "\065\102\055\103\052\104\060\105\070\106\016\001\002" +
    "\000\132\002\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2\011" +
    "\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2\026\uffa2\027\uffa2" +
    "\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036" +
    "\uffa2\037\uffa2\040\uffa2\041\uffa2\043\uffa2\044\uffa2\045\uffa2" +
    "\046\uffa2\051\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2\057" +
    "\uffa2\060\uffa2\061\uffa2\062\uffa2\063\uffa2\066\uffa2\070\uffa2" +
    "\071\uffa2\072\uffa2\074\uffa2\075\uffa2\076\uffa2\077\uffa2\001" +
    "\002\000\006\056\uff9d\074\uff9d\001\002\000\020\016\017" +
    "\017\024\020\021\021\025\022\014\024\030\106\016\001" +
    "\002\000\006\056\uff9b\074\uff9b\001\002\000\004\071\225" +
    "\001\002\000\054\016\017\017\024\020\021\021\025\022" +
    "\014\023\046\024\030\041\061\047\050\050\062\052\053" +
    "\065\212\071\056\074\226\100\064\101\065\102\055\103" +
    "\052\104\060\105\070\106\016\001\002\000\132\002\uffa3" +
    "\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3\013" +
    "\uffa3\014\uffa3\015\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3" +
    "\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040" +
    "\uffa3\041\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\051\uffa3" +
    "\053\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3\060\uffa3\061" +
    "\uffa3\062\uffa3\063\uffa3\066\uffa3\070\uffa3\071\uffa3\072\uffa3" +
    "\074\uffa3\075\uffa3\076\uffa3\077\uffa3\001\002\000\006\056" +
    "\217\074\230\001\002\000\132\002\uffa4\005\uffa4\006\uffa4" +
    "\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4\014\uffa4\015" +
    "\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4" +
    "\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\043" +
    "\uffa4\044\uffa4\045\uffa4\046\uffa4\051\uffa4\053\uffa4\054\uffa4" +
    "\055\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4\062\uffa4\063" +
    "\uffa4\066\uffa4\070\uffa4\071\uffa4\072\uffa4\074\uffa4\075\uffa4" +
    "\076\uffa4\077\uffa4\001\002\000\132\002\uffa8\005\uffa8\006" +
    "\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8" +
    "\015\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032\115\033" +
    "\074\034\073\035\102\036\103\037\110\040\075\041\111" +
    "\043\071\044\106\045\114\046\112\051\uffa8\053\uffa8\054" +
    "\uffa8\055\uffa8\056\uffa8\057\113\060\uffa8\061\uffa8\062\uffa8" +
    "\063\uffa8\066\uffa8\070\uffa8\071\105\072\107\074\uffa8\075" +
    "\uffa8\076\uffa8\077\104\001\002\000\132\002\uffb2\005\uffb2" +
    "\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014" +
    "\uffb2\015\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2" +
    "\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041" +
    "\uffb2\043\071\044\106\045\114\046\112\051\uffb2\053\uffb2" +
    "\054\uffb2\055\uffb2\056\uffb2\057\113\060\uffb2\061\uffb2\062" +
    "\uffb2\063\uffb2\066\uffb2\070\uffb2\071\105\072\107\074\uffb2" +
    "\075\uffb2\076\uffb2\077\104\001\002\000\132\002\uffaa\005" +
    "\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa" +
    "\014\uffaa\015\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032" +
    "\uffaa\033\uffaa\034\073\035\102\036\103\037\110\040\075" +
    "\041\111\043\071\044\106\045\114\046\112\051\uffaa\053" +
    "\uffaa\054\uffaa\055\uffaa\056\uffaa\057\113\060\uffaa\061\uffaa" +
    "\062\uffaa\063\uffaa\066\uffaa\070\uffaa\071\105\072\107\074" +
    "\uffaa\075\uffaa\076\uffaa\077\104\001\002\000\132\002\uffaf" +
    "\005\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf\013" +
    "\uffaf\014\uffaf\015\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf" +
    "\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040" +
    "\075\041\111\043\071\044\106\045\114\046\112\051\uffaf" +
    "\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057\113\060\uffaf\061" +
    "\uffaf\062\uffaf\063\uffaf\066\uffaf\070\uffaf\071\105\072\107" +
    "\074\uffaf\075\uffaf\076\uffaf\077\104\001\002\000\132\002" +
    "\uffa9\005\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9" +
    "\013\uffa9\014\uffa9\015\uffa9\026\uffa9\027\uffa9\030\uffa9\031" +
    "\uffa9\032\115\033\074\034\073\035\102\036\103\037\110" +
    "\040\075\041\111\043\071\044\106\045\114\046\112\051" +
    "\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9\057\113\060\uffa9" +
    "\061\uffa9\062\uffa9\063\uffa9\066\uffa9\070\uffa9\071\105\072" +
    "\107\074\uffa9\075\uffa9\076\uffa9\077\104\001\002\000\132" +
    "\002\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012" +
    "\uffb6\013\uffb6\014\uffb6\015\uffb6\026\uffb6\027\uffb6\030\uffb6" +
    "\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037" +
    "\uffb6\040\uffb6\041\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6" +
    "\051\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\113\060" +
    "\uffb6\061\uffb6\062\uffb6\063\uffb6\066\uffb6\070\uffb6\071\105" +
    "\072\107\074\uffb6\075\uffb6\076\uffb6\077\104\001\002\000" +
    "\132\002\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7" +
    "\012\uffc7\013\uffc7\014\uffc7\015\uffc7\026\uffc7\027\uffc7\030" +
    "\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7" +
    "\037\uffc7\040\uffc7\041\uffc7\043\uffc7\044\uffc7\045\uffc7\046" +
    "\uffc7\051\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7" +
    "\060\uffc7\061\uffc7\062\uffc7\063\uffc7\066\uffc7\070\uffc7\071" +
    "\uffc7\072\uffc7\074\uffc7\075\uffc7\076\uffc7\077\uffc7\001\002" +
    "\000\004\106\016\001\002\000\136\002\uff7e\005\uff7e\006" +
    "\uff7e\007\uff7e\010\uff7e\011\uff7e\012\uff7e\013\uff7e\014\uff7e" +
    "\015\uff7e\026\uff7e\027\uff7e\030\uff7e\031\uff7e\032\uff7e\033" +
    "\uff7e\034\uff7e\035\uff7e\036\uff7e\037\uff7e\040\uff7e\041\uff7e" +
    "\043\uff7e\044\uff7e\045\uff7e\046\uff7e\051\uff7e\053\uff7e\054" +
    "\uff7e\055\uff7e\056\uff7e\057\uff7e\060\uff7e\061\uff7e\062\uff7e" +
    "\063\uff7e\064\uff7e\066\uff7e\067\uff7e\070\uff7e\071\uff7e\072" +
    "\uff7e\074\uff7e\075\uff7e\076\uff7e\077\uff7e\001\002\000\006" +
    "\051\244\056\243\001\002\000\004\106\016\001\002\000" +
    "\050\016\017\017\024\020\021\021\025\022\014\023\046" +
    "\024\030\041\061\047\050\050\062\052\053\071\056\100" +
    "\064\101\065\102\055\103\052\104\060\105\070\106\016" +
    "\001\002\000\132\002\uffa5\005\uffa5\006\uffa5\007\uffa5\010" +
    "\uffa5\011\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\026\101" +
    "\027\072\030\076\031\116\032\115\033\074\034\073\035" +
    "\102\036\103\037\110\040\075\041\111\043\071\044\106" +
    "\045\114\046\112\051\uffa5\053\uffa5\054\uffa5\055\uffa5\056" +
    "\uffa5\057\113\060\uffa5\061\uffa5\062\uffa5\063\100\066\uffa5" +
    "\070\077\071\105\072\107\074\uffa5\075\uffa5\076\uffa5\077" +
    "\104\001\002\000\012\051\uffd3\056\uffd3\074\uffd3\076\uffd3" +
    "\001\002\000\132\002\uffb7\005\uffb7\006\uffb7\007\uffb7\010" +
    "\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\026\uffb7" +
    "\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035" +
    "\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\043\uffb7\044\uffb7" +
    "\045\uffb7\046\uffb7\051\uffb7\053\uffb7\054\uffb7\055\uffb7\056" +
    "\uffb7\057\113\060\uffb7\061\uffb7\062\uffb7\063\uffb7\066\uffb7" +
    "\070\uffb7\071\105\072\107\074\uffb7\075\uffb7\076\uffb7\077" +
    "\104\001\002\000\060\026\101\027\072\030\076\031\116" +
    "\032\115\033\074\034\073\035\102\036\103\037\110\040" +
    "\075\041\111\043\071\044\106\045\114\046\112\057\113" +
    "\063\100\070\077\071\105\072\107\074\251\077\104\001" +
    "\002\000\132\002\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8" +
    "\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\026\uffc8\027" +
    "\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8" +
    "\036\uffc8\037\uffc8\040\uffc8\041\uffc8\043\uffc8\044\uffc8\045" +
    "\uffc8\046\uffc8\051\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8" +
    "\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8\066\uffc8\070" +
    "\uffc8\071\uffc8\072\uffc8\074\uffc8\075\uffc8\076\uffc8\077\uffc8" +
    "\001\002\000\060\026\101\027\072\030\076\031\116\032" +
    "\115\033\074\034\073\035\102\036\103\037\110\040\075" +
    "\041\111\043\071\044\106\045\114\046\112\053\253\057" +
    "\113\063\100\070\077\071\105\072\107\077\104\001\002" +
    "\000\050\016\017\017\024\020\021\021\025\022\014\023" +
    "\046\024\030\041\061\047\050\050\062\052\053\071\056" +
    "\100\064\101\065\102\055\103\052\104\060\105\070\106" +
    "\016\001\002\000\060\026\101\027\072\030\076\031\116" +
    "\032\115\033\074\034\073\035\102\036\103\037\110\040" +
    "\075\041\111\043\071\044\106\045\114\046\112\054\255" +
    "\057\113\063\100\070\077\071\105\072\107\077\104\001" +
    "\002\000\050\016\017\017\024\020\021\021\025\022\014" +
    "\023\046\024\030\041\061\047\050\050\062\052\053\071" +
    "\056\100\064\101\065\102\055\103\052\104\060\105\070" +
    "\106\016\001\002\000\060\026\101\027\072\030\076\031" +
    "\116\032\115\033\074\034\073\035\102\036\103\037\110" +
    "\040\075\041\111\043\071\044\106\045\114\046\112\055" +
    "\257\057\113\063\100\070\077\071\105\072\107\077\104" +
    "\001\002\000\132\002\uffb0\005\uffb0\006\uffb0\007\uffb0\010" +
    "\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\026\uffb0" +
    "\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035" +
    "\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\043\uffb0\044\uffb0" +
    "\045\uffb0\046\uffb0\051\uffb0\053\uffb0\054\uffb0\055\uffb0\056" +
    "\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0\066\uffb0" +
    "\070\uffb0\071\uffb0\072\uffb0\074\uffb0\075\uffb0\076\uffb0\077" +
    "\uffb0\001\002\000\020\016\017\017\024\020\021\021\025" +
    "\022\014\024\030\106\016\001\002\000\052\016\017\017" +
    "\024\020\021\021\025\022\014\023\046\024\030\041\061" +
    "\047\050\050\062\052\053\071\056\076\266\100\064\101" +
    "\065\102\055\103\052\104\060\105\070\106\016\001\002" +
    "\000\006\056\uff88\076\uff88\001\002\000\006\056\uff8b\076" +
    "\uff8b\001\002\000\006\056\271\076\272\001\002\000\064" +
    "\026\101\027\072\030\076\031\116\032\115\033\074\034" +
    "\073\035\102\036\103\037\110\040\075\041\111\043\071" +
    "\044\106\045\114\046\112\056\uff89\057\113\063\100\066" +
    "\267\070\077\071\105\072\107\076\uff89\077\104\001\002" +
    "\000\132\002\uff91\005\uff91\006\uff91\007\uff91\010\uff91\011" +
    "\uff91\012\uff91\013\uff91\014\uff91\015\uff91\026\uff91\027\uff91" +
    "\030\uff91\031\uff91\032\uff91\033\uff91\034\uff91\035\uff91\036" +
    "\uff91\037\uff91\040\uff91\041\uff91\043\uff91\044\uff91\045\uff91" +
    "\046\uff91\051\uff91\053\uff91\054\uff91\055\uff91\056\uff91\057" +
    "\uff91\060\uff91\061\uff91\062\uff91\063\uff91\066\uff91\070\uff91" +
    "\071\uff91\072\uff91\074\uff91\075\uff91\076\uff91\077\uff91\001" +
    "\002\000\050\016\017\017\024\020\021\021\025\022\014" +
    "\023\046\024\030\041\061\047\050\050\062\052\053\071" +
    "\056\100\064\101\065\102\055\103\052\104\060\105\070" +
    "\106\016\001\002\000\062\026\101\027\072\030\076\031" +
    "\116\032\115\033\074\034\073\035\102\036\103\037\110" +
    "\040\075\041\111\043\071\044\106\045\114\046\112\056" +
    "\uff87\057\113\063\100\070\077\071\105\072\107\076\uff87" +
    "\077\104\001\002\000\050\016\017\017\024\020\021\021" +
    "\025\022\014\023\046\024\030\041\061\047\050\050\062" +
    "\052\053\071\056\100\064\101\065\102\055\103\052\104" +
    "\060\105\070\106\016\001\002\000\132\002\uff92\005\uff92" +
    "\006\uff92\007\uff92\010\uff92\011\uff92\012\uff92\013\uff92\014" +
    "\uff92\015\uff92\026\uff92\027\uff92\030\uff92\031\uff92\032\uff92" +
    "\033\uff92\034\uff92\035\uff92\036\uff92\037\uff92\040\uff92\041" +
    "\uff92\043\uff92\044\uff92\045\uff92\046\uff92\051\uff92\053\uff92" +
    "\054\uff92\055\uff92\056\uff92\057\uff92\060\uff92\061\uff92\062" +
    "\uff92\063\uff92\066\uff92\070\uff92\071\uff92\072\uff92\074\uff92" +
    "\075\uff92\076\uff92\077\uff92\001\002\000\006\056\uff8a\076" +
    "\uff8a\001\002\000\004\074\275\001\002\000\132\002\uffcb" +
    "\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013" +
    "\uffcb\014\uffcb\015\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb" +
    "\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040" +
    "\uffcb\041\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\051\uffcb" +
    "\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\061" +
    "\uffcb\062\uffcb\063\uffcb\066\uffcb\070\uffcb\071\uffcb\072\uffcb" +
    "\074\uffcb\075\uffcb\076\uffcb\077\uffcb\001\002\000\132\002" +
    "\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8" +
    "\013\uffb8\014\uffb8\015\uffb8\026\uffb8\027\uffb8\030\uffb8\031" +
    "\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8" +
    "\040\uffb8\041\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\051" +
    "\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057\113\060\uffb8" +
    "\061\uffb8\062\uffb8\063\uffb8\066\uffb8\070\uffb8\071\105\072" +
    "\107\074\uffb8\075\uffb8\076\uffb8\077\104\001\002\000\004" +
    "\106\016\001\002\000\006\056\243\076\301\001\002\000" +
    "\132\002\uff86\005\uff86\006\uff86\007\uff86\010\uff86\011\uff86" +
    "\012\uff86\013\uff86\014\uff86\015\uff86\026\uff86\027\uff86\030" +
    "\uff86\031\uff86\032\uff86\033\uff86\034\uff86\035\uff86\036\uff86" +
    "\037\uff86\040\uff86\041\uff86\043\uff86\044\uff86\045\uff86\046" +
    "\uff86\051\uff86\053\uff86\054\uff86\055\uff86\056\uff86\057\uff86" +
    "\060\uff86\061\uff86\062\uff86\063\uff86\066\uff86\070\uff86\071" +
    "\uff86\072\uff86\074\uff86\075\uff86\076\uff86\077\uff86\001\002" +
    "\000\072\026\101\027\072\030\076\031\116\032\115\033" +
    "\074\034\073\035\102\036\103\037\110\040\075\041\111" +
    "\043\071\044\106\045\114\046\112\051\uffd0\056\uffd0\057" +
    "\113\061\uffd0\062\uffd0\063\100\070\077\071\105\072\107" +
    "\074\uffd0\076\uffd0\077\104\001\002\000\132\002\uffca\005" +
    "\uffca\006\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca" +
    "\014\uffca\015\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032" +
    "\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca" +
    "\041\uffca\043\uffca\044\uffca\045\uffca\046\uffca\051\uffca\053" +
    "\uffca\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca\061\uffca" +
    "\062\uffca\063\uffca\066\uffca\070\uffca\071\uffca\072\uffca\074" +
    "\uffca\075\uffca\076\uffca\077\uffca\001\002\000\006\060\363" +
    "\106\016\001\002\000\014\002\ufff4\005\ufff4\006\ufff4\011" +
    "\315\012\314\001\002\000\006\060\310\106\016\001\002" +
    "\000\004\060\312\001\002\000\050\016\017\017\024\020" +
    "\021\021\025\022\014\023\046\024\030\041\061\047\050" +
    "\050\062\052\053\071\056\100\064\101\065\102\055\103" +
    "\052\104\060\105\070\106\016\001\002\000\070\002\ufff2" +
    "\005\ufff2\006\ufff2\011\ufff2\012\ufff2\026\101\027\072\030" +
    "\076\031\116\032\115\033\074\034\073\035\102\036\103" +
    "\037\110\040\075\041\111\043\071\044\106\045\114\046" +
    "\112\057\113\063\100\070\077\071\105\072\107\077\104" +
    "\001\002\000\050\016\017\017\024\020\021\021\025\022" +
    "\014\023\046\024\030\041\061\047\050\050\062\052\053" +
    "\071\056\100\064\101\065\102\055\103\052\104\060\105" +
    "\070\106\016\001\002\000\070\002\ufff3\005\ufff3\006\ufff3" +
    "\011\ufff3\012\ufff3\026\101\027\072\030\076\031\116\032" +
    "\115\033\074\034\073\035\102\036\103\037\110\040\075" +
    "\041\111\043\071\044\106\045\114\046\112\057\113\063" +
    "\100\070\077\071\105\072\107\077\104\001\002\000\006" +
    "\060\324\106\016\001\002\000\006\060\316\106\016\001" +
    "\002\000\050\016\017\017\024\020\021\021\025\022\014" +
    "\023\046\024\030\041\061\047\050\050\062\052\053\071" +
    "\056\100\064\101\065\102\055\103\052\104\060\105\070" +
    "\106\016\001\002\000\004\060\320\001\002\000\050\016" +
    "\017\017\024\020\021\021\025\022\014\023\046\024\030" +
    "\041\061\047\050\050\062\052\053\071\056\100\064\101" +
    "\065\102\055\103\052\104\060\105\070\106\016\001\002" +
    "\000\070\002\uffef\005\uffef\006\uffef\011\uffef\012\uffef\026" +
    "\101\027\072\030\076\031\116\032\115\033\074\034\073" +
    "\035\102\036\103\037\110\040\075\041\111\043\071\044" +
    "\106\045\114\046\112\057\113\063\100\070\077\071\105" +
    "\072\107\077\104\001\002\000\070\002\uffee\005\uffee\006" +
    "\uffee\011\uffee\012\uffee\026\101\027\072\030\076\031\116" +
    "\032\115\033\074\034\073\035\102\036\103\037\110\040" +
    "\075\041\111\043\071\044\106\045\114\046\112\057\113" +
    "\063\100\070\077\071\105\072\107\077\104\001\002\000" +
    "\004\060\361\001\002\000\004\106\016\001\002\000\004" +
    "\032\357\001\002\000\014\002\uffec\005\uffec\006\uffec\011" +
    "\uffec\012\uffec\001\002\000\004\067\345\001\002\000\010" +
    "\060\332\067\uff7f\071\331\001\002\000\006\074\337\106" +
    "\016\001\002\000\020\016\017\017\024\020\021\021\025" +
    "\022\014\024\030\106\016\001\002\000\004\032\334\001" +
    "\002\000\050\016\017\017\024\020\021\021\025\022\014" +
    "\023\046\024\030\041\061\047\050\050\062\052\053\071" +
    "\056\100\064\101\065\102\055\103\052\104\060\105\070" +
    "\106\016\001\002\000\070\002\uffeb\005\uffeb\006\uffeb\011" +
    "\uffeb\012\uffeb\026\101\027\072\030\076\031\116\032\115" +
    "\033\074\034\073\035\102\036\103\037\110\040\075\041" +
    "\111\043\071\044\106\045\114\046\112\057\113\063\100" +
    "\070\077\071\105\072\107\077\104\001\002\000\006\056" +
    "\243\074\342\001\002\000\014\013\uffd5\014\uffd5\015\uffd5" +
    "\032\uffd5\060\340\001\002\000\020\016\017\017\024\020" +
    "\021\021\025\022\014\024\030\106\016\001\002\000\012" +
    "\013\uffd6\014\uffd6\015\uffd6\032\uffd6\001\002\000\014\013" +
    "\uffd7\014\uffd7\015\uffd7\032\uffd7\060\343\001\002\000\020" +
    "\016\017\017\024\020\021\021\025\022\014\024\030\106" +
    "\016\001\002\000\012\013\uffd8\014\uffd8\015\uffd8\032\uffd8" +
    "\001\002\000\004\106\016\001\002\000\014\011\uff7e\012" +
    "\uff7e\067\uff7e\071\347\106\uff7e\001\002\000\006\074\351" +
    "\106\016\001\002\000\006\056\243\074\354\001\002\000" +
    "\014\013\uffd9\014\uffd9\015\uffd9\032\uffd9\060\352\001\002" +
    "\000\020\016\017\017\024\020\021\021\025\022\014\024" +
    "\030\106\016\001\002\000\012\013\uffda\014\uffda\015\uffda" +
    "\032\uffda\001\002\000\014\013\uffdb\014\uffdb\015\uffdb\032" +
    "\uffdb\060\355\001\002\000\020\016\017\017\024\020\021" +
    "\021\025\022\014\024\030\106\016\001\002\000\012\013" +
    "\uffdc\014\uffdc\015\uffdc\032\uffdc\001\002\000\050\016\017" +
    "\017\024\020\021\021\025\022\014\023\046\024\030\041" +
    "\061\047\050\050\062\052\053\071\056\100\064\101\065" +
    "\102\055\103\052\104\060\105\070\106\016\001\002\000" +
    "\070\002\uffea\005\uffea\006\uffea\011\uffea\012\uffea\026\101" +
    "\027\072\030\076\031\116\032\115\033\074\034\073\035" +
    "\102\036\103\037\110\040\075\041\111\043\071\044\106" +
    "\045\114\046\112\057\113\063\100\070\077\071\105\072" +
    "\107\077\104\001\002\000\004\106\016\001\002\000\014" +
    "\002\uffed\005\uffed\006\uffed\011\uffed\012\uffed\001\002\000" +
    "\004\106\016\001\002\000\004\060\365\001\002\000\004" +
    "\106\016\001\002\000\014\002\ufff1\005\ufff1\006\ufff1\011" +
    "\ufff1\012\ufff1\001\002\000\014\002\ufff0\005\ufff0\006\ufff0" +
    "\011\ufff0\012\ufff0\001\002\000\004\060\371\001\002\000" +
    "\020\016\017\017\024\020\021\021\025\022\014\024\030" +
    "\106\016\001\002\000\006\007\373\010\375\001\002\000" +
    "\004\060\u0106\001\002\000\014\002\ufff9\005\ufff9\006\ufff9" +
    "\007\u0100\010\u0101\001\002\000\004\060\376\001\002\000" +
    "\050\016\017\017\024\020\021\021\025\022\014\023\046" +
    "\024\030\041\061\047\050\050\062\052\053\071\056\100" +
    "\064\101\065\102\055\103\052\104\060\105\070\106\016" +
    "\001\002\000\070\002\ufff7\005\ufff7\006\ufff7\007\ufff7\010" +
    "\ufff7\026\101\027\072\030\076\031\116\032\115\033\074" +
    "\034\073\035\102\036\103\037\110\040\075\041\111\043" +
    "\071\044\106\045\114\046\112\057\113\063\100\070\077" +
    "\071\105\072\107\077\104\001\002\000\004\060\u0104\001" +
    "\002\000\004\060\u0102\001\002\000\050\016\017\017\024" +
    "\020\021\021\025\022\014\023\046\024\030\041\061\047" +
    "\050\050\062\052\053\071\056\100\064\101\065\102\055" +
    "\103\052\104\060\105\070\106\016\001\002\000\070\002" +
    "\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\026\101\027\072" +
    "\030\076\031\116\032\115\033\074\034\073\035\102\036" +
    "\103\037\110\040\075\041\111\043\071\044\106\045\114" +
    "\046\112\057\113\063\100\070\077\071\105\072\107\077" +
    "\104\001\002\000\050\016\017\017\024\020\021\021\025" +
    "\022\014\023\046\024\030\041\061\047\050\050\062\052" +
    "\053\071\056\100\064\101\065\102\055\103\052\104\060" +
    "\105\070\106\016\001\002\000\070\002\ufff6\005\ufff6\006" +
    "\ufff6\007\ufff6\010\ufff6\026\101\027\072\030\076\031\116" +
    "\032\115\033\074\034\073\035\102\036\103\037\110\040" +
    "\075\041\111\043\071\044\106\045\114\046\112\057\113" +
    "\063\100\070\077\071\105\072\107\077\104\001\002\000" +
    "\050\016\017\017\024\020\021\021\025\022\014\023\046" +
    "\024\030\041\061\047\050\050\062\052\053\071\056\100" +
    "\064\101\065\102\055\103\052\104\060\105\070\106\016" +
    "\001\002\000\070\002\ufff8\005\ufff8\006\ufff8\007\ufff8\010" +
    "\ufff8\026\101\027\072\030\076\031\116\032\115\033\074" +
    "\034\073\035\102\036\103\037\110\040\075\041\111\043" +
    "\071\044\106\045\114\046\112\057\113\063\100\070\077" +
    "\071\105\072\107\077\104\001\002\000\006\060\u0128\106" +
    "\016\001\002\000\006\060\u0124\106\016\001\002\000\016" +
    "\002\uffe9\005\uffe9\006\uffe9\013\u0111\014\u0113\015\u0112\001" +
    "\002\000\006\060\u010c\106\016\001\002\000\050\016\017" +
    "\017\024\020\021\021\025\022\014\023\046\024\030\041" +
    "\061\047\050\050\062\052\053\071\056\100\064\101\065" +
    "\102\055\103\052\104\060\105\070\106\016\001\002\000" +
    "\004\060\u010e\001\002\000\050\016\017\017\024\020\021" +
    "\021\025\022\014\023\046\024\030\041\061\047\050\050" +
    "\062\052\053\071\056\100\064\101\065\102\055\103\052" +
    "\104\060\105\070\106\016\001\002\000\072\002\uffe6\005" +
    "\uffe6\006\uffe6\013\uffe6\014\uffe6\015\uffe6\026\101\027\072" +
    "\030\076\031\116\032\115\033\074\034\073\035\102\036" +
    "\103\037\110\040\075\041\111\043\071\044\106\045\114" +
    "\046\112\057\113\063\100\070\077\071\105\072\107\077" +
    "\104\001\002\000\072\002\uffe5\005\uffe5\006\uffe5\013\uffe5" +
    "\014\uffe5\015\uffe5\026\101\027\072\030\076\031\116\032" +
    "\115\033\074\034\073\035\102\036\103\037\110\040\075" +
    "\041\111\043\071\044\106\045\114\046\112\057\113\063" +
    "\100\070\077\071\105\072\107\077\104\001\002\000\006" +
    "\060\u011f\106\016\001\002\000\006\060\u0119\106\016\001" +
    "\002\000\006\060\u0115\106\016\001\002\000\004\060\u0117" +
    "\001\002\000\050\016\017\017\024\020\021\021\025\022" +
    "\014\023\046\024\030\041\061\047\050\050\062\052\053" +
    "\071\056\100\064\101\065\102\055\103\052\104\060\105" +
    "\070\106\016\001\002\000\072\002\uffdf\005\uffdf\006\uffdf" +
    "\013\uffdf\014\uffdf\015\uffdf\026\101\027\072\030\076\031" +
    "\116\032\115\033\074\034\073\035\102\036\103\037\110" +
    "\040\075\041\111\043\071\044\106\045\114\046\112\057" +
    "\113\063\100\070\077\071\105\072\107\077\104\001\002" +
    "\000\050\016\017\017\024\020\021\021\025\022\014\023" +
    "\046\024\030\041\061\047\050\050\062\052\053\071\056" +
    "\100\064\101\065\102\055\103\052\104\060\105\070\106" +
    "\016\001\002\000\072\002\uffe0\005\uffe0\006\uffe0\013\uffe0" +
    "\014\uffe0\015\uffe0\026\101\027\072\030\076\031\116\032" +
    "\115\033\074\034\073\035\102\036\103\037\110\040\075" +
    "\041\111\043\071\044\106\045\114\046\112\057\113\063" +
    "\100\070\077\071\105\072\107\077\104\001\002\000\050" +
    "\016\017\017\024\020\021\021\025\022\014\023\046\024" +
    "\030\041\061\047\050\050\062\052\053\071\056\100\064" +
    "\101\065\102\055\103\052\104\060\105\070\106\016\001" +
    "\002\000\004\060\u011b\001\002\000\050\016\017\017\024" +
    "\020\021\021\025\022\014\023\046\024\030\041\061\047" +
    "\050\050\062\052\053\071\056\100\064\101\065\102\055" +
    "\103\052\104\060\105\070\106\016\001\002\000\072\002" +
    "\uffde\005\uffde\006\uffde\013\uffde\014\uffde\015\uffde\026\101" +
    "\027\072\030\076\031\116\032\115\033\074\034\073\035" +
    "\102\036\103\037\110\040\075\041\111\043\071\044\106" +
    "\045\114\046\112\057\113\063\100\070\077\071\105\072" +
    "\107\077\104\001\002\000\072\002\uffdd\005\uffdd\006\uffdd" +
    "\013\uffdd\014\uffdd\015\uffdd\026\101\027\072\030\076\031" +
    "\116\032\115\033\074\034\073\035\102\036\103\037\110" +
    "\040\075\041\111\043\071\044\106\045\114\046\112\057" +
    "\113\063\100\070\077\071\105\072\107\077\104\001\002" +
    "\000\004\060\u0121\001\002\000\050\016\017\017\024\020" +
    "\021\021\025\022\014\023\046\024\030\041\061\047\050" +
    "\050\062\052\053\071\056\100\064\101\065\102\055\103" +
    "\052\104\060\105\070\106\016\001\002\000\072\002\uffe1" +
    "\005\uffe1\006\uffe1\013\uffe1\014\uffe1\015\uffe1\026\101\027" +
    "\072\030\076\031\116\032\115\033\074\034\073\035\102" +
    "\036\103\037\110\040\075\041\111\043\071\044\106\045" +
    "\114\046\112\057\113\063\100\070\077\071\105\072\107" +
    "\077\104\001\002\000\050\016\017\017\024\020\021\021" +
    "\025\022\014\023\046\024\030\041\061\047\050\050\062" +
    "\052\053\071\056\100\064\101\065\102\055\103\052\104" +
    "\060\105\070\106\016\001\002\000\072\002\uffe2\005\uffe2" +
    "\006\uffe2\013\uffe2\014\uffe2\015\uffe2\026\101\027\072\030" +
    "\076\031\116\032\115\033\074\034\073\035\102\036\103" +
    "\037\110\040\075\041\111\043\071\044\106\045\114\046" +
    "\112\057\113\063\100\070\077\071\105\072\107\077\104" +
    "\001\002\000\004\060\u0126\001\002\000\050\016\017\017" +
    "\024\020\021\021\025\022\014\023\046\024\030\041\061" +
    "\047\050\050\062\052\053\071\056\100\064\101\065\102" +
    "\055\103\052\104\060\105\070\106\016\001\002\000\072" +
    "\002\uffe7\005\uffe7\006\uffe7\013\uffe7\014\uffe7\015\uffe7\026" +
    "\101\027\072\030\076\031\116\032\115\033\074\034\073" +
    "\035\102\036\103\037\110\040\075\041\111\043\071\044" +
    "\106\045\114\046\112\057\113\063\100\070\077\071\105" +
    "\072\107\077\104\001\002\000\050\016\017\017\024\020" +
    "\021\021\025\022\014\023\046\024\030\041\061\047\050" +
    "\050\062\052\053\071\056\100\064\101\065\102\055\103" +
    "\052\104\060\105\070\106\016\001\002\000\072\002\uffe8" +
    "\005\uffe8\006\uffe8\013\uffe8\014\uffe8\015\uffe8\026\101\027" +
    "\072\030\076\031\116\032\115\033\074\034\073\035\102" +
    "\036\103\037\110\040\075\041\111\043\071\044\106\045" +
    "\114\046\112\057\113\063\100\070\077\071\105\072\107" +
    "\077\104\001\002\000\050\016\017\017\024\020\021\021" +
    "\025\022\014\023\046\024\030\041\061\047\050\050\062" +
    "\052\053\071\056\100\064\101\065\102\055\103\052\104" +
    "\060\105\070\106\016\001\002\000\004\060\u012a\001\002" +
    "\000\050\016\017\017\024\020\021\021\025\022\014\023" +
    "\046\024\030\041\061\047\050\050\062\052\053\071\056" +
    "\100\064\101\065\102\055\103\052\104\060\105\070\106" +
    "\016\001\002\000\072\002\uffe4\005\uffe4\006\uffe4\013\uffe4" +
    "\014\uffe4\015\uffe4\026\101\027\072\030\076\031\116\032" +
    "\115\033\074\034\073\035\102\036\103\037\110\040\075" +
    "\041\111\043\071\044\106\045\114\046\112\057\113\063" +
    "\100\070\077\071\105\072\107\077\104\001\002\000\072" +
    "\002\uffe3\005\uffe3\006\uffe3\013\uffe3\014\uffe3\015\uffe3\026" +
    "\101\027\072\030\076\031\116\032\115\033\074\034\073" +
    "\035\102\036\103\037\110\040\075\041\111\043\071\044" +
    "\106\045\114\046\112\057\113\063\100\070\077\071\105" +
    "\072\107\077\104\001\002\000\010\005\ufffe\006\ufffe\067" +
    "\240\001\002\000\006\005\u012f\006\013\001\002\000\004" +
    "\002\000\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012e\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\006\037\u012c\040\040\001\001\000\012\004\006" +
    "\005\010\010\007\012\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\013\014\017\026\020\030\021\022\022\017\037\021\040" +
    "\025\001\001\000\002\001\001\000\004\014\u0109\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\367\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\304\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\015\032\016\034\040\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\020\043" +
    "\021\050\022\053\023\301\030\044\031\056\035\065\036" +
    "\046\037\062\040\040\001\001\000\016\017\041\020\030" +
    "\021\022\022\017\037\037\040\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\020\043" +
    "\021\050\022\053\023\066\030\044\031\056\035\065\036" +
    "\046\037\062\040\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\020" +
    "\043\021\050\022\053\023\275\030\044\031\056\035\065" +
    "\036\046\037\062\040\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\020\043\021\050\022\053\023\251" +
    "\030\044\031\056\035\065\036\046\037\062\040\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\020\043" +
    "\021\050\022\053\023\247\030\044\031\056\035\065\036" +
    "\046\037\062\040\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\020\043\021\050\022\053\023\246\030" +
    "\044\031\056\035\065\036\046\037\062\040\040\001\001" +
    "\000\010\015\241\016\034\040\033\001\001\000\004\027" +
    "\236\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\020" +
    "\043\021\050\022\053\023\235\030\044\031\056\035\065" +
    "\036\046\037\062\040\040\001\001\000\026\020\043\021" +
    "\050\022\053\023\234\030\044\031\056\035\065\036\046" +
    "\037\062\040\040\001\001\000\026\020\043\021\050\022" +
    "\053\023\233\030\044\031\056\035\065\036\046\037\062" +
    "\040\040\001\001\000\026\020\043\021\050\022\053\023" +
    "\232\030\044\031\056\035\065\036\046\037\062\040\040" +
    "\001\001\000\026\020\043\021\050\022\053\023\231\030" +
    "\044\031\056\035\065\036\046\037\062\040\040\001\001" +
    "\000\026\020\043\021\050\022\053\023\230\030\044\031" +
    "\056\035\065\036\046\037\062\040\040\001\001\000\004" +
    "\040\223\001\001\000\004\040\207\001\001\000\026\020" +
    "\043\021\050\022\053\023\206\030\044\031\056\035\065" +
    "\036\046\037\062\040\040\001\001\000\026\020\043\021" +
    "\050\022\053\023\205\030\044\031\056\035\065\036\046" +
    "\037\062\040\040\001\001\000\026\020\043\021\050\022" +
    "\053\023\204\030\044\031\056\035\065\036\046\037\062" +
    "\040\040\001\001\000\004\040\170\001\001\000\030\016" +
    "\141\020\043\021\050\022\053\023\144\030\044\031\056" +
    "\035\065\036\046\037\062\040\142\001\001\000\026\020" +
    "\043\021\050\022\053\023\140\030\044\031\056\035\065" +
    "\036\046\037\062\040\040\001\001\000\030\020\043\021" +
    "\050\022\053\023\132\024\133\030\044\031\056\035\065" +
    "\036\046\037\062\040\040\001\001\000\026\020\043\021" +
    "\050\022\053\023\131\030\044\031\056\035\065\036\046" +
    "\037\062\040\040\001\001\000\026\020\043\021\050\022" +
    "\053\023\130\030\044\031\056\035\065\036\046\037\062" +
    "\040\040\001\001\000\026\020\043\021\050\022\053\023" +
    "\127\030\044\031\056\035\065\036\046\037\062\040\040" +
    "\001\001\000\004\040\123\001\001\000\026\020\043\021" +
    "\050\022\053\023\120\030\044\031\056\035\065\036\046" +
    "\037\062\040\040\001\001\000\026\020\043\021\050\022" +
    "\053\023\117\030\044\031\056\035\065\036\046\037\062" +
    "\040\040\001\001\000\026\020\043\021\050\022\053\023" +
    "\116\030\044\031\056\035\065\036\046\037\062\040\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\020\043\021" +
    "\050\022\053\023\137\030\044\031\056\035\065\036\046" +
    "\037\062\040\040\001\001\000\004\027\136\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\017\156\020\030\021\022\022\017\037\037" +
    "\040\040\001\001\000\032\016\150\020\043\021\050\022" +
    "\053\023\132\024\151\030\044\031\056\035\065\036\046" +
    "\037\062\040\142\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\020\043" +
    "\021\050\022\053\023\154\030\044\031\056\035\065\036" +
    "\046\037\062\040\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\160\040\033\001" +
    "\001\000\002\001\001\000\026\020\043\021\050\022\053" +
    "\023\162\030\044\031\056\035\065\036\046\037\062\040" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\020\043\021\050\022\053\023\165\030\044\031\056\035" +
    "\065\036\046\037\062\040\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\173\040\033\001\001\000\002" +
    "\001\001\000\006\016\200\040\033\001\001\000\026\020" +
    "\043\021\050\022\053\023\176\030\044\031\056\035\065" +
    "\036\046\037\062\040\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\020\043\021\050" +
    "\022\053\023\202\030\044\031\056\035\065\036\046\037" +
    "\062\040\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\020\043\021\050\022\053\023\215" +
    "\025\214\026\212\030\044\031\056\035\065\036\046\037" +
    "\062\040\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\020\043\021\050\022\053\023\215\026\220\030\044" +
    "\031\056\035\065\036\046\037\062\040\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\017\222\020\030" +
    "\021\022\022\017\037\037\040\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\020\043\021\050\022\053" +
    "\023\215\025\226\026\212\030\044\031\056\035\065\036" +
    "\046\037\062\040\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\240\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\016\245" +
    "\040\033\001\001\000\026\020\043\021\050\022\053\023" +
    "\244\030\044\031\056\035\065\036\046\037\062\040\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\020\043\021\050\022\053\023\253\030\044\031" +
    "\056\035\065\036\046\037\062\040\040\001\001\000\002" +
    "\001\001\000\026\020\043\021\050\022\053\023\255\030" +
    "\044\031\056\035\065\036\046\037\062\040\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\017\273\020" +
    "\030\021\022\022\017\037\037\040\040\001\001\000\034" +
    "\020\043\021\050\022\053\023\264\030\044\031\056\032" +
    "\263\033\262\034\261\035\065\036\046\037\062\040\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\020\043" +
    "\021\050\022\053\023\267\030\044\031\056\035\065\036" +
    "\046\037\062\040\040\001\001\000\002\001\001\000\032" +
    "\020\043\021\050\022\053\023\264\030\044\031\056\033" +
    "\272\034\261\035\065\036\046\037\062\040\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\277\016\034" +
    "\040\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\040\363\001\001" +
    "\000\002\001\001\000\004\040\306\001\001\000\002\001" +
    "\001\000\026\020\043\021\050\022\053\023\310\030\044" +
    "\031\056\035\065\036\046\037\062\040\040\001\001\000" +
    "\002\001\001\000\026\020\043\021\050\022\053\023\312" +
    "\030\044\031\056\035\065\036\046\037\062\040\040\001" +
    "\001\000\002\001\001\000\004\040\322\001\001\000\004" +
    "\040\316\001\001\000\026\020\043\021\050\022\053\023" +
    "\321\030\044\031\056\035\065\036\046\037\062\040\040" +
    "\001\001\000\002\001\001\000\026\020\043\021\050\022" +
    "\053\023\320\030\044\031\056\035\065\036\046\037\062" +
    "\040\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\007\325\013\324\037\326\040\327" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\015\335\016\034\040\033" +
    "\001\001\000\016\017\332\020\030\021\022\022\017\037" +
    "\037\040\040\001\001\000\002\001\001\000\026\020\043" +
    "\021\050\022\053\023\334\030\044\031\056\035\065\036" +
    "\046\037\062\040\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\017\340\020\030\021" +
    "\022\022\017\037\037\040\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\017\343\020\030\021\022\022" +
    "\017\037\037\040\040\001\001\000\002\001\001\000\004" +
    "\040\345\001\001\000\002\001\001\000\010\015\347\016" +
    "\034\040\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\017\352\020\030\021\022\022\017\037\037\040" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\017\355\020\030\021\022\022\017\037\037\040\040\001" +
    "\001\000\002\001\001\000\026\020\043\021\050\022\053" +
    "\023\357\030\044\031\056\035\065\036\046\037\062\040" +
    "\040\001\001\000\002\001\001\000\012\007\361\013\324" +
    "\037\326\040\327\001\001\000\002\001\001\000\012\007" +
    "\366\013\324\037\326\040\327\001\001\000\002\001\001" +
    "\000\012\007\365\013\324\037\326\040\327\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\017\371\020\030\021\022\022\017\037\037\040\040\001" +
    "\001\000\004\011\373\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\020\043\021\050\022" +
    "\053\023\376\030\044\031\056\035\065\036\046\037\062" +
    "\040\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\020\043\021\050\022\053\023\u0102" +
    "\030\044\031\056\035\065\036\046\037\062\040\040\001" +
    "\001\000\002\001\001\000\026\020\043\021\050\022\053" +
    "\023\u0104\030\044\031\056\035\065\036\046\037\062\040" +
    "\040\001\001\000\002\001\001\000\026\020\043\021\050" +
    "\022\053\023\u0106\030\044\031\056\035\065\036\046\037" +
    "\062\040\040\001\001\000\002\001\001\000\004\040\u0128" +
    "\001\001\000\004\040\u0122\001\001\000\002\001\001\000" +
    "\004\040\u010c\001\001\000\026\020\043\021\050\022\053" +
    "\023\u010f\030\044\031\056\035\065\036\046\037\062\040" +
    "\040\001\001\000\002\001\001\000\026\020\043\021\050" +
    "\022\053\023\u010e\030\044\031\056\035\065\036\046\037" +
    "\062\040\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\u011d\001\001\000\004\040\u0119\001\001\000" +
    "\004\040\u0113\001\001\000\002\001\001\000\026\020\043" +
    "\021\050\022\053\023\u0115\030\044\031\056\035\065\036" +
    "\046\037\062\040\040\001\001\000\002\001\001\000\026" +
    "\020\043\021\050\022\053\023\u0117\030\044\031\056\035" +
    "\065\036\046\037\062\040\040\001\001\000\002\001\001" +
    "\000\026\020\043\021\050\022\053\023\u011c\030\044\031" +
    "\056\035\065\036\046\037\062\040\040\001\001\000\002" +
    "\001\001\000\026\020\043\021\050\022\053\023\u011b\030" +
    "\044\031\056\035\065\036\046\037\062\040\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\020\043\021\050\022\053\023\u011f\030\044\031\056" +
    "\035\065\036\046\037\062\040\040\001\001\000\002\001" +
    "\001\000\026\020\043\021\050\022\053\023\u0121\030\044" +
    "\031\056\035\065\036\046\037\062\040\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\020\043\021\050" +
    "\022\053\023\u0124\030\044\031\056\035\065\036\046\037" +
    "\062\040\040\001\001\000\002\001\001\000\026\020\043" +
    "\021\050\022\053\023\u0126\030\044\031\056\035\065\036" +
    "\046\037\062\040\040\001\001\000\002\001\001\000\026" +
    "\020\043\021\050\022\053\023\u012b\030\044\031\056\035" +
    "\065\036\046\037\062\040\040\001\001\000\002\001\001" +
    "\000\026\020\043\021\050\022\053\023\u012a\030\044\031" +
    "\056\035\065\036\046\037\062\040\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\u012d\001\001\000" +
    "\012\004\006\005\010\010\007\012\011\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Yyparse$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Yyparse$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Yyparse$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	// Init the log
	CUP$Yyparse$actions.setLog(log);
	// Init the log
	CUP$Yyparse$actions.setFactory(factory);

    }


	// Log file
	protected ILog log;
	public void setLog(ILog log) {
		this.log = log;
	}
	public ILog getLog() {
		return log;
	}

	// Factory
	protected ASTBuilder factory;
	public void setFactory(ASTBuilder factory) {
		this.factory = factory;
	}
	public ASTBuilder getFactory() {
		return factory;
	}

	// Change the method report_error to display location and the reason
	public void report_error(String message, Object info) {
		ErrorManager.reportError(log, info, message);
	}
	
	// Change the method report_error to display location and the reason
	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Yyparse$actions {


	// Log file
	protected static ILog log;
	public static void setLog(ILog log) {
		CUP$Yyparse$actions.log = log;
	}
	public static ILog getLog() {
		return CUP$Yyparse$actions.log;
	}

	// Factory
	protected static ASTBuilder factory;
	public static void setFactory(ASTBuilder factory) {
		CUP$Yyparse$actions.factory = factory;
	}
	public static ASTBuilder getFactory() {
		return CUP$Yyparse$actions.factory;
	}

	// Check and make a variableDeclaration
	public static VariableDeclarationAS makeVariableDeclaration(OclExpressionAS nameExp, TypeAS type, OclExpressionAS init, int left, int right) {
		if (nameExp instanceof PathNameExpAS) {
			List pathName = ((PathNameExpAS)nameExp).getPathName();
			if (pathName.size() == 1) {
				String name = (String)pathName.get(0);
				return factory.buildVariableDeclaration(name, type, init);
			}
		}
		Symbol info = new Symbol(0, left, right);
		report_error("Variable declaration expected", info);
		return null;
	}
	
	// Report errors
	public static void report_error(String message, Object info) {
		ErrorManager.reportError(log, info, message);
	}


  private final Yyparse parser;

  /** Constructor */
  CUP$Yyparse$actions(Yyparse parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Yyparse$do_action(
    int                        CUP$Yyparse$act_num,
    java_cup.runtime.lr_parser CUP$Yyparse$parser,
    java.util.Stack            CUP$Yyparse$stack,
    int                        CUP$Yyparse$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Yyparse$result;

      /* select the action based on the action number */
      switch (CUP$Yyparse$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // simpleName ::= SIMPLE_NAME 
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								RESULT = value;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("simpleName",30, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // pathName ::= pathName COLON_COLON simpleName 
            {
              List RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List path = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Add name to path
								RESULT = path;
								path.add(name);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("pathName",29, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // pathName ::= simpleName 
            {
              List RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a
								List seq = new Vector();
								seq.add(name);
								RESULT = seq;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("pathName",29, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // primitiveLiteralExp ::= UNDEFINED 
            {
              PrimitiveLiteralExpAS RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create BooleanLiteralExp
								RESULT = factory.buildBooleanLiteralExp(value);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("primitiveLiteralExp",28, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // primitiveLiteralExp ::= FALSE 
            {
              PrimitiveLiteralExpAS RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create BooleanLiteralExp
								RESULT = factory.buildBooleanLiteralExp(value);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("primitiveLiteralExp",28, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // primitiveLiteralExp ::= TRUE 
            {
              PrimitiveLiteralExpAS RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create BooleanLiteralExp
								RESULT = factory.buildBooleanLiteralExp(value);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("primitiveLiteralExp",28, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // primitiveLiteralExp ::= STRING 
            {
              PrimitiveLiteralExpAS RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create StringLiteralExp
								RESULT = factory.buildStringLiteralExp(value);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("primitiveLiteralExp",28, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // primitiveLiteralExp ::= REAL 
            {
              PrimitiveLiteralExpAS RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create RealLiteralExp
								RESULT = factory.buildRealLiteralExp(value);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("primitiveLiteralExp",28, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // primitiveLiteralExp ::= INTEGER 
            {
              PrimitiveLiteralExpAS RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create IntegerLiteralExp
								RESULT = factory.buildIntegerLiteralExp(value);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("primitiveLiteralExp",28, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // tupleLiteralExp ::= TUPLE LEFT_BRA variableDeclarationList RIGHT_BRA 
            {
              TupleLiteralExpAS RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List seq = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create TupleLiteralExp
								RESULT = factory.buildTupleLiteralExp(seq);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("tupleLiteralExp",27, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // collectionRange ::= oclExpression DOT_DOT oclExpression 
            {
              CollectionRangeAS RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS first = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int lastleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int lastright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS last = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create CollectionRange
								RESULT = factory.buildCollectionRange(first, last);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("collectionRange",26, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // collectionLiteralPart ::= collectionRange 
            {
              CollectionLiteralPartAS RESULT =null;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		CollectionRangeAS range = (CollectionRangeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Copy rule
								RESULT = range;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("collectionLiteralPart",25, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // collectionLiteralPart ::= oclExpression 
            {
              CollectionLiteralPartAS RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create CollectionItem
								RESULT = factory.buildCollectionItem(exp);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("collectionLiteralPart",25, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // collectionLiteralParts ::= collectionLiteralParts COMMA collectionLiteralPart 
            {
              List RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List seq = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int colPartleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int colPartright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		CollectionLiteralPartAS colPart = (CollectionLiteralPartAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Add collPart to seq
								RESULT = seq;
								seq.add(colPart);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("collectionLiteralParts",24, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // collectionLiteralParts ::= collectionLiteralPart 
            {
              List RESULT =null;
		int colPartleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int colPartright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		CollectionLiteralPartAS colPart = (CollectionLiteralPartAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a List
								List seq = new Vector();
								seq.add(colPart);
								RESULT = seq;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("collectionLiteralParts",24, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // collectionKind ::= ORDERED_SET 
            {
              CollectionKindAS RESULT =null;
		
								// Set kind to ORDERED_SET
								RESULT = CollectionKindAS.ORDERED_SET_LITERAL;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("collectionKind",15, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // collectionKind ::= COLLECTION 
            {
              CollectionKindAS RESULT =null;
		
								// Set kind to COLLECTION
								RESULT = CollectionKindAS.COLLECTION_LITERAL;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("collectionKind",15, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // collectionKind ::= SEQUENCE 
            {
              CollectionKindAS RESULT =null;
		
								// Set kind to SEQUENCE
								RESULT = CollectionKindAS.SEQUENCE_LITERAL;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("collectionKind",15, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // collectionKind ::= BAG 
            {
              CollectionKindAS RESULT =null;
		
								// Set kind to BAG
								RESULT = CollectionKindAS.BAG_LITERAL;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("collectionKind",15, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // collectionKind ::= SET 
            {
              CollectionKindAS RESULT =null;
		
								// Set kind to SET
								RESULT = CollectionKindAS.SET_LITERAL;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("collectionKind",15, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // collectionLiteralExp ::= collectionKind LEFT_BRA RIGHT_BRA 
            {
              CollectionLiteralExpAS RESULT =null;
		int kindleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int kindright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		CollectionKindAS kind = (CollectionKindAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		
								// Create CollectionLiteralExp
								RESULT = factory.buildCollectionLiteralExp(kind, new Vector());
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("collectionLiteralExp",23, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // collectionLiteralExp ::= collectionKind LEFT_BRA collectionLiteralParts RIGHT_BRA 
            {
              CollectionLiteralExpAS RESULT =null;
		int kindleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int kindright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		CollectionKindAS kind = (CollectionKindAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int partsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int partsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List parts = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create CollectionLiteralExp
								RESULT = factory.buildCollectionLiteralExp(kind, parts);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("collectionLiteralExp",23, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // literalExp ::= tupleType 
            {
              LiteralExpAS RESULT =null;
		int typeExprleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int typeExprright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		TupleTypeAS typeExpr = (TupleTypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								RESULT = typeExpr;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("literalExp",22, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // literalExp ::= collectionType 
            {
              LiteralExpAS RESULT =null;
		int typeExprleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int typeExprright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		CollectionTypeAS typeExpr = (CollectionTypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								RESULT = typeExpr;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("literalExp",22, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // literalExp ::= primitiveLiteralExp 
            {
              LiteralExpAS RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		PrimitiveLiteralExpAS exp = (PrimitiveLiteralExpAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								RESULT = exp;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("literalExp",22, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // literalExp ::= tupleLiteralExp 
            {
              LiteralExpAS RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		TupleLiteralExpAS exp = (TupleLiteralExpAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								RESULT = exp;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("literalExp",22, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // literalExp ::= collectionLiteralExp 
            {
              LiteralExpAS RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		CollectionLiteralExpAS exp = (CollectionLiteralExpAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								RESULT = exp;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("literalExp",22, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // isMarkedPre ::= AT PRE 
            {
              Boolean RESULT =null;
		
								RESULT = new Boolean(true);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("isMarkedPre",21, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // isMarkedPre ::= 
            {
              Boolean RESULT =null;
		
								RESULT = new Boolean(false);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("isMarkedPre",21, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // oclMessageArgument ::= oclExpression 
            {
              OclMessageArgAS RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create OclMessageArg
								RESULT = factory.buildOclMessageArg(exp,null);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclMessageArgument",20, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // oclMessageArgument ::= QUESTION COLON type 
            {
              OclMessageArgAS RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create OclMessageArg
								OclMessageArgAS arg = factory.buildOclMessageArg(null,type);
								RESULT = arg;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclMessageArgument",20, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // oclMessageArgument ::= QUESTION 
            {
              OclMessageArgAS RESULT =null;
		
								// Create OclMessageArg
								OclMessageArgAS arg = factory.buildOclMessageArg(null,null);
								RESULT = arg;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclMessageArgument",20, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // oclMessageArgumentList ::= oclMessageArgumentList COMMA oclMessageArgument 
            {
              List RESULT =null;
		int argListleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int argListright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List argList = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclMessageArgAS arg = (OclMessageArgAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
										
			  					// Append 'arg' to 'argList' 
			  					RESULT = argList;
			  					argList.add(arg);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclMessageArgumentList",19, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // oclMessageArgumentList ::= oclMessageArgument 
            {
              List RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclMessageArgAS arg = (OclMessageArgAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create List
								List seq = new Vector();
								seq.add(arg);
								RESULT = seq;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclMessageArgumentList",19, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // argumentList ::= argumentList COMMA oclExpression 
            {
              List RESULT =null;
		int argListleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int argListright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List argList = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS arg = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
			  					// Append 'arg' to 'argList' 
			  					RESULT = argList;
			  					argList.add(arg);
			  				
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("argumentList",18, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // argumentList ::= oclExpression 
            {
              List RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS arg = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a List
								List seq = new Vector();
								seq.add(arg);
								RESULT = seq;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("argumentList",18, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // oclExpression ::= oclExpression UP simpleName LEFT_PAR RIGHT_PAR 
            {
              OclExpressionAS RESULT =null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		OclExpressionAS target = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		
								// Create OclMessageExp
								RESULT = factory.buildOclMessageExp(OclMessageKindAS.UP_LITERAL, target, name, new Vector());
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // oclExpression ::= oclExpression UP simpleName LEFT_PAR oclMessageArgumentList RIGHT_PAR 
            {
              OclExpressionAS RESULT =null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		OclExpressionAS target = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List arguments = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create OclMessageExp
								RESULT = factory.buildOclMessageExp(OclMessageKindAS.UP_LITERAL, target, name, arguments);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // oclExpression ::= oclExpression UP_UP simpleName LEFT_PAR RIGHT_PAR 
            {
              OclExpressionAS RESULT =null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		OclExpressionAS target = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		
								// Create OclMessageExpAS
								RESULT = factory.buildOclMessageExp(OclMessageKindAS.UP_UP_LITERAL, target, name, new Vector());
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // oclExpression ::= oclExpression UP_UP simpleName LEFT_PAR oclMessageArgumentList RIGHT_PAR 
            {
              OclExpressionAS RESULT =null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		OclExpressionAS target = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List arguments = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create OclMessageExpAS
								RESULT = factory.buildOclMessageExp(OclMessageKindAS.UP_UP_LITERAL, target, name, arguments);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // oclExpression ::= LET variableDeclarationList IN oclExpression 
            {
              OclExpressionAS RESULT =null;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List variables = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create LetExp
								RESULT = factory.buildLetExp(variables, exp);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // oclExpression ::= oclExpression IMPLIES oclExpression 
            {
              OclExpressionAS RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create ImpliesExp
								RESULT = factory.buildImpliesExp(left, right);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // oclExpression ::= oclExpression XOR oclExpression 
            {
              OclExpressionAS RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create OrExp
								RESULT = factory.buildXorExp(left, right);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // oclExpression ::= oclExpression OR oclExpression 
            {
              OclExpressionAS RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create OrExp
								RESULT = factory.buildOrExp(left, right);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // oclExpression ::= oclExpression AND oclExpression 
            {
              OclExpressionAS RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create AndExp
								RESULT = factory.buildAndExp(left, right);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // oclExpression ::= oclExpression NE oclExpression 
            {
              OclExpressionAS RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create an OperationCallExp
								RESULT = factory.buildOperationCallExp("<>", left, right);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // oclExpression ::= oclExpression EQ oclExpression 
            {
              OclExpressionAS RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create an OperationCallExp
								RESULT = factory.buildOperationCallExp("=", left, right);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // oclExpression ::= oclExpression GE oclExpression 
            {
              OclExpressionAS RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create an OperationCallExp
								RESULT = factory.buildOperationCallExp(">=", left, right);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // oclExpression ::= oclExpression LE oclExpression 
            {
              OclExpressionAS RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create an OperationCallExp
								RESULT = factory.buildOperationCallExp("<=", left, right);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // oclExpression ::= oclExpression GT oclExpression 
            {
              OclExpressionAS RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create an OperationCallExp
								RESULT = factory.buildOperationCallExp(">", left, right);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // oclExpression ::= oclExpression LT oclExpression 
            {
              OclExpressionAS RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create an OperationCallExp
								RESULT = factory.buildOperationCallExp("<", left, right);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // oclExpression ::= IF oclExpression THEN oclExpression ELSE oclExpression ENDIF 
            {
              OclExpressionAS RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		OclExpressionAS condition = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int thenExpleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int thenExpright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		OclExpressionAS thenExp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int elseExpleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int elseExpright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		OclExpressionAS elseExp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create IfExp
								RESULT = factory.buildIfExp(condition, thenExp, elseExp);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // oclExpression ::= oclExpression MINUS oclExpression 
            {
              OclExpressionAS RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create an OperationCallExp
								RESULT = factory.buildOperationCallExp("-", left, right);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // oclExpression ::= oclExpression PLUS oclExpression 
            {
              OclExpressionAS RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create an OperationCallExp
								RESULT = factory.buildOperationCallExp("+", left, right);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // oclExpression ::= oclExpression INT_MOD oclExpression 
            {
              OclExpressionAS RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create an OperationCallExp
								RESULT = factory.buildOperationCallExp("mod", left, right);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // oclExpression ::= oclExpression INT_DIVIDE oclExpression 
            {
              OclExpressionAS RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create an OperationCallExp
								RESULT = factory.buildOperationCallExp("div", left, right);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // oclExpression ::= oclExpression DIVIDE oclExpression 
            {
              OclExpressionAS RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create an OperationCallExp
								RESULT = factory.buildOperationCallExp("/", left, right);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // oclExpression ::= oclExpression TIMES oclExpression 
            {
              OclExpressionAS RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create an OperationCallExp
								RESULT = factory.buildOperationCallExp("*", left, right);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // oclExpression ::= MINUS oclExpression 
            {
              OclExpressionAS RESULT =null;
		int opdleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS opd = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create an OperationCallExp
								RESULT = factory.buildOperationCallExp("-", opd, null);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // oclExpression ::= NOT oclExpression 
            {
              OclExpressionAS RESULT =null;
		int opdleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS opd = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create NotExp
								RESULT = factory.buildNotExp(opd);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // oclExpression ::= oclExpression MINUS_GT ITERATE LEFT_PAR variableDeclaration BAR oclExpression RIGHT_PAR 
            {
              OclExpressionAS RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).right;
		OclExpressionAS exp1 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		VariableDeclarationAS var2 = (VariableDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		OclExpressionAS exp2 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create IterateExp
								RESULT = factory.buildIterateExp(exp1, null, var2, exp2);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // oclExpression ::= oclExpression MINUS_GT ITERATE LEFT_PAR variableDeclaration SEMICOLON variableDeclaration BAR oclExpression RIGHT_PAR 
            {
              OclExpressionAS RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).right;
		OclExpressionAS exp1 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).value;
		int var1left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		VariableDeclarationAS var1 = (VariableDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		VariableDeclarationAS var2 = (VariableDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		OclExpressionAS exp2 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create IterateExp
								RESULT = factory.buildIterateExp(exp1, var1, var2, exp2);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // oclExpression ::= oclExpression LEFT_BRK argumentList RIGHT_BRK isMarkedPre 
            {
              OclExpressionAS RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List arguments = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int isMarkedPreleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int isMarkedPreright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		Boolean isMarkedPre = (Boolean)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create AssociationCallExp
								RESULT = factory.buildAssociationCallExp(exp, arguments, isMarkedPre);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // oclExpression ::= oclExpression LEFT_PAR variableDeclaration BAR oclExpression RIGHT_PAR 
            {
              OclExpressionAS RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		OclExpressionAS exp1 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int var1left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		VariableDeclarationAS var1 = (VariableDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		OclExpressionAS exp2 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create IteratorCallExp
								List varList = new Vector();
								varList.add(var1);
								RESULT = factory.buildIteratorCallExp(exp1, varList, exp2);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // oclExpression ::= oclExpression LEFT_PAR oclExpression COLON type COMMA variableDeclaration BAR oclExpression RIGHT_PAR 
            {
              OclExpressionAS RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).right;
		OclExpressionAS exp1 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).value;
		int nameExpleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).left;
		int nameExpright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).right;
		OclExpressionAS nameExp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		VariableDeclarationAS var2 = (VariableDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		OclExpressionAS exp2 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create first variable - check the name
								VariableDeclarationAS var1 = makeVariableDeclaration(nameExp, type, null, nameExpleft, nameExpright);
								// Create IteratorCallExp
								List varList = new Vector();
								varList.add(var1);
								varList.add(var2);
								RESULT = factory.buildIteratorCallExp(exp1, varList, exp2);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // oclExpression ::= oclExpression LEFT_PAR oclExpression COMMA variableDeclaration BAR oclExpression RIGHT_PAR 
            {
              OclExpressionAS RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).right;
		OclExpressionAS exp1 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).value;
		int nameExpleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int nameExpright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		OclExpressionAS nameExp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		VariableDeclarationAS var2 = (VariableDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		OclExpressionAS exp2 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create first variable - check the name
								VariableDeclarationAS var1 = makeVariableDeclaration(nameExp, null, null, nameExpleft, nameExpright);
								// Create IteratorCallExp
								List varList = new Vector();
								varList.add(var1);
								varList.add(var2);
								RESULT = factory.buildIteratorCallExp(exp1, varList, exp2);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // oclExpression ::= oclExpression LEFT_PAR oclExpression COMMA argumentList RIGHT_PAR 
            {
              OclExpressionAS RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		OclExpressionAS arg1 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create OperationCallExp
								List args = new Vector();
								args.add(arg1);
								args.addAll(list);
								RESULT = factory.buildOperationCallExp(exp, args);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // oclExpression ::= oclExpression LEFT_PAR oclExpression RIGHT_PAR 
            {
              OclExpressionAS RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		OclExpressionAS arg = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create OperationCallExp
								List args = new Vector();
								args.add(arg);
								RESULT = factory.buildOperationCallExp(exp, args);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // oclExpression ::= oclExpression LEFT_PAR RIGHT_PAR 
            {
              OclExpressionAS RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		
								// Create OperationCallExp
								RESULT = factory.buildOperationCallExp(exp, new Vector());
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // oclExpression ::= oclExpression MINUS_GT error 
            {
              OclExpressionAS RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		
								// Error recovery
								RESULT = exp;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // oclExpression ::= oclExpression MINUS_GT simpleName 
            {
              OclExpressionAS RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int simpleNameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int simpleNameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		String simpleName = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create ArrowSelectionExp
								RESULT = factory.buildArrowSelectionExp(exp, simpleName);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // oclExpression ::= oclExpression DOT error 
            {
              OclExpressionAS RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		
								// Error recovery
								RESULT = exp;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // oclExpression ::= oclExpression DOT BODY 
            {
              OclExpressionAS RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		
								// Create DotSelectionExp
								RESULT = factory.buildDotSelectionExp(exp, "body", null);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // oclExpression ::= oclExpression DOT simpleName isMarkedPre 
            {
              OclExpressionAS RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int simpleNameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int simpleNameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		String simpleName = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		int isMarkedPreleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int isMarkedPreright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		Boolean isMarkedPre = (Boolean)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create DotSelectionExp
								RESULT = factory.buildDotSelectionExp(exp, simpleName, isMarkedPre);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // oclExpression ::= pathName isMarkedPre 
            {
              OclExpressionAS RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List path = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		int isMarkedPreleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int isMarkedPreright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		Boolean isMarkedPre = (Boolean)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create PathNameExp
								RESULT = factory.buildPathNameExp(path, isMarkedPre);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // oclExpression ::= LEFT_PAR oclExpression RIGHT_PAR 
            {
              OclExpressionAS RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Copy rule
								RESULT = exp;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // oclExpression ::= literalExp 
            {
              OclExpressionAS RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		LiteralExpAS exp = (LiteralExpAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Literal expression without enumLiteralExp
								// Copy rule
								RESULT = exp;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tupleType ::= TUPLE_TYPE LEFT_PAR variableDeclarationList RIGHT_PAR 
            {
              TupleTypeAS RESULT =null;
		int varListleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create TupleType
								RESULT = factory.buildTupleType(varList);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("tupleType",16, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // collectionType ::= collectionKind LEFT_PAR type RIGHT_PAR 
            {
              CollectionTypeAS RESULT =null;
		int kindleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int kindright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		CollectionKindAS kind = (CollectionKindAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int elementTypeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int elementTyperight = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		TypeAS elementType = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create CollectionType
								RESULT = factory.buildCollectionType(kind, elementType);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("collectionType",14, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type ::= tupleType 
            {
              TypeAS RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		TupleTypeAS type = (TupleTypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Copy rule
								RESULT = type;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // type ::= collectionType 
            {
              TypeAS RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		CollectionTypeAS type = (CollectionTypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Copy rule
								RESULT = type;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // type ::= pathName 
            {
              TypeAS RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		List path = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create PathNameType
								RESULT = factory.buildPathNameType(path);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // variableDeclaration ::= simpleName 
            {
              VariableDeclarationAS RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a VariableDeclaration
								RESULT = factory.buildVariableDeclaration(name, null, null);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("variableDeclaration",12, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // variableDeclaration ::= simpleName EQ oclExpression 
            {
              VariableDeclarationAS RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS init = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a VariableDeclaration
								RESULT = factory.buildVariableDeclaration(name, null, init);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("variableDeclaration",12, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // variableDeclaration ::= simpleName COLON type 
            {
              VariableDeclarationAS RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a VariableDeclaration
								RESULT = factory.buildVariableDeclaration(name, type, null);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("variableDeclaration",12, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // variableDeclaration ::= simpleName COLON type EQ oclExpression 
            {
              VariableDeclarationAS RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS init = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a VariableDeclaration
								RESULT = factory.buildVariableDeclaration(name, type, init);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("variableDeclaration",12, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // variableDeclarationList ::= variableDeclarationList COMMA variableDeclaration 
            {
              List RESULT =null;
		int varListleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		VariableDeclarationAS var = (VariableDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
			  					// Append 'var' to 'varList' 
			  					RESULT = varList;
			  					RESULT.add(var);
			  				
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("variableDeclarationList",11, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // variableDeclarationList ::= variableDeclaration 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		VariableDeclarationAS var = (VariableDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a List
								RESULT = new Vector();
								RESULT.add(var);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("variableDeclarationList",11, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operation ::= simpleName LEFT_PAR RIGHT_PAR 
            {
              OperationAS RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		
								// Create an Operationn
								RESULT = factory.buildOperation(new Vector(), name, new Vector(), null);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("operation",9, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operation ::= simpleName LEFT_PAR RIGHT_PAR COLON type 
            {
              OperationAS RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create an Operationn
								RESULT = factory.buildOperation(new Vector(), name, new Vector(), type);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("operation",9, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operation ::= simpleName LEFT_PAR variableDeclarationList RIGHT_PAR 
            {
              OperationAS RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List params = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create an Operationn
								RESULT = factory.buildOperation(new Vector(), name, params, null);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("operation",9, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operation ::= simpleName LEFT_PAR variableDeclarationList RIGHT_PAR COLON type 
            {
              OperationAS RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		List params = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create an Operationn
								RESULT = factory.buildOperation(new Vector(), name, params, type);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("operation",9, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operation ::= pathName COLON_COLON simpleName LEFT_PAR RIGHT_PAR 
            {
              OperationAS RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		List path = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		
								// Create an Operationn
								RESULT = factory.buildOperation(path, name, new Vector(), null);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("operation",9, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operation ::= pathName COLON_COLON simpleName LEFT_PAR RIGHT_PAR COLON type 
            {
              OperationAS RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)).right;
		List path = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create an Operation
								RESULT = factory.buildOperation(path, name, new Vector(), type);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("operation",9, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operation ::= pathName COLON_COLON simpleName LEFT_PAR variableDeclarationList RIGHT_PAR 
            {
              OperationAS RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		List path = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List params = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create an Operationn
								RESULT = factory.buildOperation(path, name, params, null);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("operation",9, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operation ::= pathName COLON_COLON simpleName LEFT_PAR variableDeclarationList RIGHT_PAR COLON type 
            {
              OperationAS RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).right;
		List path = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		List params = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create an Operationn
								RESULT = factory.buildOperation(path, name, params, type);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("operation",9, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // prePostOrBodyDecl ::= prePostOrBodyDecl BODY COLON oclExpression 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a constraint
								RESULT = list;
								RESULT.add(factory.buildConstraint(ConstraintKindAS.BODY_LITERAL, "", exp, null));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("prePostOrBodyDecl",10, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // prePostOrBodyDecl ::= prePostOrBodyDecl BODY simpleName COLON oclExpression 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a constraint
								RESULT = list;
								RESULT.add(factory.buildConstraint(ConstraintKindAS.BODY_LITERAL, name, exp, null));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("prePostOrBodyDecl",10, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // prePostOrBodyDecl ::= prePostOrBodyDecl POST COLON oclExpression 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a constraint
								RESULT = list;
								RESULT.add(factory.buildConstraint(ConstraintKindAS.POST_LITERAL, "", exp, null));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("prePostOrBodyDecl",10, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // prePostOrBodyDecl ::= prePostOrBodyDecl POST simpleName COLON oclExpression 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a constraint
								RESULT = list;
								RESULT.add(factory.buildConstraint(ConstraintKindAS.POST_LITERAL, name, exp, null));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("prePostOrBodyDecl",10, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // prePostOrBodyDecl ::= prePostOrBodyDecl PRE COLON oclExpression 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a constraint
								RESULT = list;
								RESULT.add(factory.buildConstraint(ConstraintKindAS.PRE_LITERAL, "", exp, null));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("prePostOrBodyDecl",10, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // prePostOrBodyDecl ::= prePostOrBodyDecl PRE simpleName COLON oclExpression 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Add constraint to list
								RESULT = list;
								RESULT.add(factory.buildConstraint(ConstraintKindAS.PRE_LITERAL, name, exp, null));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("prePostOrBodyDecl",10, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // prePostOrBodyDecl ::= BODY COLON oclExpression 
            {
              List RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a LIST and add constraint
								RESULT = new Vector();
								RESULT.add(factory.buildConstraint(ConstraintKindAS.BODY_LITERAL, "", exp, null));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("prePostOrBodyDecl",10, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // prePostOrBodyDecl ::= BODY simpleName COLON oclExpression 
            {
              List RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a LIST and add constraint
								RESULT = new Vector();
								RESULT.add(factory.buildConstraint(ConstraintKindAS.BODY_LITERAL, name, exp, null));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("prePostOrBodyDecl",10, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // prePostOrBodyDecl ::= POST COLON oclExpression 
            {
              List RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a LIST and add constraint
								RESULT = new Vector();
								RESULT.add(factory.buildConstraint(ConstraintKindAS.POST_LITERAL, "", exp, null));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("prePostOrBodyDecl",10, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // prePostOrBodyDecl ::= POST simpleName COLON oclExpression 
            {
              List RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a LIST and add constraint
								RESULT = new Vector();
								RESULT.add(factory.buildConstraint(ConstraintKindAS.POST_LITERAL, name, exp, null));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("prePostOrBodyDecl",10, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // prePostOrBodyDecl ::= PRE COLON oclExpression 
            {
              List RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a LIST and add constraint
								RESULT = new Vector();
								RESULT.add(factory.buildConstraint(ConstraintKindAS.PRE_LITERAL, "", exp, null));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("prePostOrBodyDecl",10, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // prePostOrBodyDecl ::= PRE simpleName COLON oclExpression 
            {
              List RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a LIST and add constraint
								// Create a constraint
								ConstraintAS cons = factory.buildConstraint(ConstraintKindAS.PRE_LITERAL, name, exp, null);
								// Create a list
								RESULT = new Vector();
								RESULT.add(cons);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("prePostOrBodyDecl",10, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operationContextDecl ::= CONTEXT operation prePostOrBodyDecl 
            {
              OperationContextDeclAS RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		OperationAS oper = (OperationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create OperationContextDecl
								RESULT = factory.buildOperationContextDeclaration(oper, list);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("operationContextDecl",8, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // defExpression ::= operation EQ oclExpression 
            {
              Object[] RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OperationAS oper = (OperationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a container
								RESULT = new Object[] {oper, exp};
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("defExpression",5, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // defExpression ::= simpleName COLON type EQ oclExpression 
            {
              Object[] RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a container
								VariableDeclarationAS var = factory.buildVariableDeclaration(name,type,exp);
								RESULT = new Object[] {var, exp};
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("defExpression",5, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // invOrDef ::= invOrDef DEF COLON defExpression 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		Object[] exp = (Object[])((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Add constraint to list
								RESULT = list;
								RESULT.add(factory.buildConstraint(ConstraintKindAS.DEF_LITERAL, "", (OclExpressionAS)exp[1], exp[0]));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("invOrDef",4, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // invOrDef ::= invOrDef DEF simpleName COLON defExpression 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		Object[] exp = (Object[])((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Add constraint to list
								RESULT = list;
								RESULT.add(factory.buildConstraint(ConstraintKindAS.DEF_LITERAL, name, (OclExpressionAS)exp[1], exp[0]));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("invOrDef",4, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // invOrDef ::= invOrDef INV COLON oclExpression 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Add constraint to list
								RESULT = list;
								RESULT.add(factory.buildConstraint(ConstraintKindAS.INV_LITERAL, "", exp, null));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("invOrDef",4, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // invOrDef ::= invOrDef INV simpleName COLON oclExpression 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Add constraint to list
								RESULT = list;
								RESULT.add(factory.buildConstraint(ConstraintKindAS.INV_LITERAL, name, exp, null));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("invOrDef",4, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // invOrDef ::= DEF COLON defExpression 
            {
              List RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		Object[] exp = (Object[])((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a LIST and add constraint
								RESULT = new Vector();
								RESULT.add(factory.buildConstraint(ConstraintKindAS.DEF_LITERAL, "", (OclExpressionAS)exp[1], exp[0]));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("invOrDef",4, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // invOrDef ::= DEF simpleName COLON defExpression 
            {
              List RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		Object[] exp = (Object[])((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a LIST and add constraint
								RESULT = new Vector();
								RESULT.add(factory.buildConstraint(ConstraintKindAS.DEF_LITERAL, name, (OclExpressionAS)exp[1], exp[0]));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("invOrDef",4, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // invOrDef ::= INV COLON oclExpression 
            {
              List RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a LIST and add constraint
								RESULT = new Vector();
								RESULT.add(factory.buildConstraint(ConstraintKindAS.INV_LITERAL, "", exp, null));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("invOrDef",4, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // invOrDef ::= INV simpleName COLON oclExpression 
            {
              List RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a LIST and add constraint
								RESULT = new Vector();
								RESULT.add(factory.buildConstraint(ConstraintKindAS.INV_LITERAL, name, exp, null));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("invOrDef",4, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // classifierContextDecl ::= CONTEXT type invOrDef 
            {
              ClassifierContextDeclAS RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		TypeAS t = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		int constraintsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int constraintsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		List constraints = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a ClassifierContext
								//RESULT = factory.buildClassifierContextDeclaration(path, constraints);
								RESULT = factory.buildClassifierContextDeclaration(t, constraints);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("classifierContextDecl",3, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // initOrDerValue ::= initOrDerValue DERIVE COLON oclExpression 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Add constraint to list
								RESULT = list;
								RESULT.add(factory.buildConstraint(ConstraintKindAS.DERIVE_LITERAL, "", exp, null));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("initOrDerValue",7, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // initOrDerValue ::= initOrDerValue INIT COLON oclExpression 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Add constraint to list
								RESULT = list;
								RESULT.add(factory.buildConstraint(ConstraintKindAS.INIT_LITERAL, "", exp, null));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("initOrDerValue",7, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // initOrDerValue ::= DERIVE COLON oclExpression 
            {
              List RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a LIST and add constraint
								RESULT = new Vector();
								RESULT.add(factory.buildConstraint(ConstraintKindAS.DERIVE_LITERAL, "", exp, null));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("initOrDerValue",7, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // initOrDerValue ::= INIT COLON oclExpression 
            {
              List RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a LIST and add constraint
								RESULT = new Vector();
								RESULT.add(factory.buildConstraint(ConstraintKindAS.INIT_LITERAL, "", exp, null));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("initOrDerValue",7, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // propertyContextDecl ::= CONTEXT pathName simpleName COLON type initOrDerValue 
            {
              PropertyContextDeclAS RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		List path = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		int constraintsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int constraintsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		List constraints = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create PropertyContextDecl
								RESULT = factory.buildPropertyContextDeclaration(path, name, type, constraints);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("propertyContextDecl",6, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // contextDeclaration ::= operationContextDecl 
            {
              ContextDeclarationAS RESULT =null;
		int contextDeclleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int contextDeclright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OperationContextDeclAS contextDecl = (OperationContextDeclAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Copy rule
								RESULT = contextDecl;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("contextDeclaration",2, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // contextDeclaration ::= classifierContextDecl 
            {
              ContextDeclarationAS RESULT =null;
		int contextDeclleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int contextDeclright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		ClassifierContextDeclAS contextDecl = (ClassifierContextDeclAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Copy rule
								RESULT = contextDecl;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("contextDeclaration",2, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // contextDeclaration ::= propertyContextDecl 
            {
              ContextDeclarationAS RESULT =null;
		int contextDeclleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int contextDeclright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		PropertyContextDeclAS contextDecl = (PropertyContextDeclAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Copy rule
								RESULT = contextDecl;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("contextDeclaration",2, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // contextDeclList ::= contextDeclList contextDeclaration 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		int contextDeclleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int contextDeclright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		ContextDeclarationAS contextDecl = (ContextDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Add element to list
								RESULT = list;
								RESULT.add(contextDecl);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("contextDeclList",1, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // contextDeclList ::= 
            {
              List RESULT =null;
		
								// Create a LIST
								RESULT = new Vector();
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("contextDeclList",1, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // packageDeclaration ::= contextDeclList 
            {
              PackageDeclarationAS RESULT =null;
		int contextDeclsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int contextDeclsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		List contextDecls = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a PackageDeclaration
								RESULT = factory.buildPackageDeclaration(new Vector(), contextDecls);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("packageDeclaration",0, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // packageDeclaration ::= PACKAGE pathName contextDeclList ENDPACKAGE 
            {
              PackageDeclarationAS RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List path = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int contextDeclsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int contextDeclsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List contextDecls = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create a PackageDeclaration
								RESULT = factory.buildPackageDeclaration(path, contextDecls);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("packageDeclaration",0, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= packageDeclaration EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		PackageDeclarationAS start_val = (PackageDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		RESULT = start_val;
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Yyparse$parser.done_parsing();
          return CUP$Yyparse$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

