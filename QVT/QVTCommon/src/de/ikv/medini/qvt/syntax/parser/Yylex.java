/* The following code was generated by JFlex 1.4.1 on 23.07.07 11:26 */

/**
 * 
 * @author Octavian Patrascoiu
 *
 */

// Usercode Section
package de.ikv.medini.qvt.syntax.parser;

import java.io.Reader;
import org.oslo.ocl20.OclProcessorImpl;

import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import uk.ac.kent.cs.kmf.util.ILog;
      

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 23.07.07 11:26 from the specification file
 * <tt>ocl.flex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\6\0\1\15"+
    "\1\46\1\51\1\5\1\14\1\54\1\6\1\11\1\4\12\10\1\44"+
    "\1\55\1\62\1\61\1\63\1\60\1\57\1\7\1\65\1\67\1\7"+
    "\1\13\11\7\1\70\3\7\1\64\1\71\6\7\1\47\1\0\1\52"+
    "\1\45\1\7\1\0\1\24\1\36\1\37\1\31\1\12\1\27\1\66"+
    "\1\40\1\16\1\7\1\32\1\34\1\17\1\25\1\21\1\20\1\42"+
    "\1\22\1\26\1\23\1\43\1\35\1\41\1\30\1\33\1\7\1\50"+
    "\1\56\1\53\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\6\1\11\1\1\22\6\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\5\6\2\0\1\32"+
    "\2\0\1\33\3\6\1\34\1\0\1\35\2\6\1\36"+
    "\1\37\4\6\1\40\24\6\1\41\1\42\1\43\1\44"+
    "\1\45\5\6\2\2\1\0\1\46\1\0\1\46\7\6"+
    "\1\47\1\50\1\6\1\51\4\6\1\52\3\6\1\53"+
    "\1\54\1\6\1\55\1\6\1\56\1\57\1\6\1\60"+
    "\1\61\6\6\1\62\1\6\1\63\7\6\1\64\3\6"+
    "\1\65\1\66\5\6\1\67\1\70\3\6\1\71\3\6"+
    "\1\72\7\6\1\73\13\6\1\74\4\6\1\75\1\76"+
    "\4\6\1\77\3\6\1\100\10\6\1\101\1\102\7\6"+
    "\1\103\1\6\1\104\1\6\1\105\1\106\1\6\1\107"+
    "\3\6\1\110\12\6\1\111\3\6\1\112\5\6\1\113"+
    "\1\114\1\6\1\115\1\116\2\6\1\117\1\120\2\6"+
    "\1\121\1\122\4\6\1\123\1\6\1\124";

  private static int [] zzUnpackAction() {
    int [] result = new int[278];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\72\0\164\0\72\0\256\0\350\0\u0122"+
    "\0\u015c\0\u0196\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2"+
    "\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2"+
    "\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692"+
    "\0\72\0\72\0\72\0\72\0\72\0\72\0\72\0\72"+
    "\0\72\0\72\0\72\0\72\0\u06cc\0\u0706\0\u0740\0\u077a"+
    "\0\u07b4\0\u07ee\0\u0828\0\u0862\0\u089c\0\72\0\u08d6\0\u0910"+
    "\0\72\0\u094a\0\u0984\0\u09be\0\72\0\u020a\0\u09f8\0\u0a32"+
    "\0\u0a6c\0\u0aa6\0\350\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\350"+
    "\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e"+
    "\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e"+
    "\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\72\0\72\0\72\0\72"+
    "\0\72\0\u1050\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac"+
    "\0\u11e6\0\u1220\0\u125a\0\u125a\0\u1294\0\u12ce\0\u1308\0\u1342"+
    "\0\u137c\0\u13b6\0\u13f0\0\350\0\350\0\u142a\0\350\0\u1464"+
    "\0\u149e\0\u14d8\0\u1512\0\350\0\u154c\0\u1586\0\u15c0\0\350"+
    "\0\350\0\u15fa\0\350\0\u1634\0\350\0\350\0\u166e\0\350"+
    "\0\350\0\u16a8\0\u16e2\0\u171c\0\u1756\0\u1790\0\u17ca\0\350"+
    "\0\u1804\0\350\0\u183e\0\u1878\0\u18b2\0\u18ec\0\u1926\0\u1960"+
    "\0\u199a\0\350\0\u19d4\0\u1a0e\0\u1a48\0\350\0\350\0\u1a82"+
    "\0\u1abc\0\u1af6\0\u1b30\0\u1b6a\0\350\0\350\0\u1ba4\0\u1bde"+
    "\0\u1c18\0\350\0\u1c52\0\u1c8c\0\u1cc6\0\350\0\u1d00\0\u1d3a"+
    "\0\u1d74\0\u1dae\0\u1de8\0\u1e22\0\u1e5c\0\350\0\u1e96\0\u1ed0"+
    "\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8\0\u1ff2\0\u202c\0\u2066\0\u20a0"+
    "\0\u20da\0\350\0\u2114\0\u214e\0\u2188\0\u21c2\0\350\0\350"+
    "\0\u21fc\0\u2236\0\u2270\0\u22aa\0\u22e4\0\u231e\0\u2358\0\u2392"+
    "\0\350\0\u23cc\0\u2406\0\u2440\0\u247a\0\u24b4\0\u24ee\0\u2528"+
    "\0\u2562\0\350\0\350\0\u259c\0\u25d6\0\u2610\0\u264a\0\u2684"+
    "\0\u26be\0\u26f8\0\350\0\u2732\0\350\0\u276c\0\350\0\350"+
    "\0\u27a6\0\350\0\u27e0\0\u281a\0\u2854\0\350\0\u288e\0\u28c8"+
    "\0\u2902\0\u293c\0\u2976\0\u29b0\0\u29ea\0\u2a24\0\u2a5e\0\u2a98"+
    "\0\350\0\u2ad2\0\u2b0c\0\u2b46\0\350\0\u2b80\0\u2bba\0\u2bf4"+
    "\0\u2c2e\0\u2c68\0\350\0\350\0\u2ca2\0\350\0\350\0\u2cdc"+
    "\0\u2d16\0\350\0\350\0\u2d50\0\u2d8a\0\350\0\350\0\u2dc4"+
    "\0\u2dfe\0\u2e38\0\u2e72\0\350\0\u2eac\0\350";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[278];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\7\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\7\1\25\1\26\1\27"+
    "\1\30\1\7\1\31\1\7\1\32\1\33\1\7\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\7\1\61\1\62\1\63"+
    "\76\0\1\64\1\65\72\0\1\64\54\0\1\66\15\0"+
    "\2\7\1\0\2\7\2\0\26\7\20\0\6\7\10\0"+
    "\1\10\1\67\2\70\67\0\1\71\67\0\2\7\1\0"+
    "\2\7\2\0\7\7\1\72\2\7\1\73\3\7\1\74"+
    "\7\7\20\0\6\7\14\0\1\75\55\0\15\76\1\77"+
    "\54\76\7\0\2\7\1\0\2\7\2\0\1\7\1\100"+
    "\3\7\1\101\1\7\1\102\1\7\1\103\14\7\20\0"+
    "\6\7\7\0\2\7\1\0\2\7\2\0\3\7\1\104"+
    "\22\7\20\0\6\7\7\0\2\7\1\0\2\7\2\0"+
    "\3\7\1\105\1\106\1\7\1\107\17\7\20\0\6\7"+
    "\7\0\2\7\1\0\2\7\2\0\4\7\1\110\12\7"+
    "\1\111\6\7\20\0\6\7\7\0\2\7\1\0\1\112"+
    "\1\7\2\0\26\7\20\0\6\7\7\0\2\7\1\0"+
    "\2\7\2\0\3\7\1\113\1\114\15\7\1\115\3\7"+
    "\20\0\6\7\7\0\2\7\1\0\2\7\2\0\7\7"+
    "\1\116\16\7\20\0\6\7\7\0\2\7\1\0\2\7"+
    "\2\0\3\7\1\117\22\7\20\0\6\7\7\0\2\7"+
    "\1\0\2\7\2\0\6\7\1\120\17\7\20\0\6\7"+
    "\7\0\2\7\1\0\2\7\2\0\3\7\1\121\22\7"+
    "\20\0\6\7\7\0\2\7\1\0\1\122\1\7\2\0"+
    "\1\123\2\7\1\124\22\7\20\0\6\7\7\0\2\7"+
    "\1\0\1\125\1\7\2\0\26\7\20\0\6\7\7\0"+
    "\2\7\1\0\1\126\1\7\2\0\26\7\20\0\6\7"+
    "\7\0\2\7\1\0\2\7\2\0\3\7\1\127\22\7"+
    "\20\0\6\7\7\0\2\7\1\0\2\7\2\0\3\7"+
    "\1\130\16\7\1\131\3\7\20\0\6\7\7\0\2\7"+
    "\1\0\2\7\2\0\22\7\1\132\3\7\20\0\6\7"+
    "\7\0\2\7\1\0\2\7\2\0\25\7\1\133\20\0"+
    "\6\7\7\0\2\7\1\0\2\7\2\0\7\7\1\134"+
    "\16\7\20\0\6\7\44\0\1\135\72\0\1\136\105\0"+
    "\1\137\1\0\1\140\67\0\1\141\17\0\2\7\1\0"+
    "\1\142\1\7\2\0\26\7\20\0\6\7\7\0\2\7"+
    "\1\0\2\7\2\0\6\7\1\143\17\7\20\0\6\7"+
    "\7\0\2\7\1\0\2\7\2\0\3\7\1\144\22\7"+
    "\20\0\6\7\7\0\2\7\1\0\2\7\2\0\4\7"+
    "\1\145\21\7\20\0\6\7\7\0\2\7\1\0\2\7"+
    "\2\0\25\7\1\146\20\0\6\7\1\64\1\147\1\150"+
    "\67\64\5\65\1\151\64\65\10\0\1\152\67\0\1\153"+
    "\1\0\1\154\3\0\1\153\64\0\2\7\1\0\2\7"+
    "\2\0\11\7\1\155\1\7\1\156\12\7\20\0\6\7"+
    "\7\0\2\7\1\0\2\7\2\0\5\7\1\157\20\7"+
    "\20\0\6\7\7\0\2\7\1\0\2\7\2\0\10\7"+
    "\1\160\15\7\20\0\6\7\15\0\1\76\63\0\2\7"+
    "\1\0\2\7\2\0\2\7\1\161\23\7\20\0\6\7"+
    "\7\0\2\7\1\0\1\162\1\7\2\0\26\7\20\0"+
    "\6\7\7\0\2\7\1\0\2\7\2\0\1\163\16\7"+
    "\1\164\6\7\20\0\6\7\7\0\2\7\1\0\2\7"+
    "\2\0\13\7\1\165\12\7\20\0\6\7\7\0\2\7"+
    "\1\0\2\7\2\0\10\7\1\166\15\7\20\0\6\7"+
    "\7\0\2\7\1\0\1\167\1\7\2\0\1\170\25\7"+
    "\20\0\6\7\7\0\2\7\1\0\2\7\2\0\21\7"+
    "\1\171\4\7\20\0\6\7\7\0\2\7\1\0\1\172"+
    "\1\7\2\0\26\7\20\0\6\7\7\0\2\7\1\0"+
    "\2\7\2\0\16\7\1\173\7\7\20\0\6\7\7\0"+
    "\2\7\1\0\2\7\2\0\2\7\1\174\23\7\20\0"+
    "\6\7\7\0\2\7\1\0\2\7\2\0\6\7\1\175"+
    "\16\7\1\176\20\0\6\7\7\0\2\7\1\0\1\177"+
    "\1\7\2\0\26\7\20\0\6\7\7\0\2\7\1\0"+
    "\2\7\2\0\13\7\1\200\12\7\20\0\6\7\7\0"+
    "\2\7\1\0\2\7\2\0\5\7\1\201\20\7\20\0"+
    "\6\7\7\0\2\7\1\0\2\7\2\0\16\7\1\202"+
    "\7\7\20\0\6\7\7\0\2\7\1\0\2\7\2\0"+
    "\4\7\1\203\21\7\20\0\6\7\7\0\2\7\1\0"+
    "\2\7\2\0\4\7\1\204\4\7\1\205\14\7\20\0"+
    "\6\7\7\0\2\7\1\0\2\7\2\0\17\7\1\206"+
    "\6\7\20\0\6\7\7\0\2\7\1\0\2\7\2\0"+
    "\1\7\1\207\24\7\20\0\6\7\7\0\2\7\1\0"+
    "\2\7\2\0\15\7\1\210\10\7\20\0\6\7\7\0"+
    "\2\7\1\0\2\7\2\0\5\7\1\211\20\7\20\0"+
    "\6\7\7\0\2\7\1\0\2\7\2\0\13\7\1\212"+
    "\12\7\20\0\6\7\7\0\2\7\1\0\2\7\2\0"+
    "\7\7\1\213\16\7\20\0\6\7\7\0\2\7\1\0"+
    "\1\214\1\7\2\0\26\7\20\0\6\7\7\0\2\7"+
    "\1\0\1\215\1\7\2\0\26\7\20\0\6\7\7\0"+
    "\2\7\1\0\1\216\1\7\2\0\26\7\20\0\6\7"+
    "\7\0\2\7\1\0\2\7\2\0\13\7\1\217\12\7"+
    "\20\0\6\7\7\0\2\7\1\0\2\7\2\0\5\7"+
    "\1\220\16\7\1\221\1\7\20\0\6\7\7\0\2\7"+
    "\1\0\2\7\2\0\26\7\20\0\2\7\1\222\3\7"+
    "\7\0\2\7\1\0\2\7\2\0\16\7\1\223\7\7"+
    "\20\0\6\7\7\0\2\7\1\0\2\7\2\0\13\7"+
    "\1\224\12\7\20\0\6\7\7\0\2\7\1\0\2\7"+
    "\2\0\2\7\1\225\23\7\20\0\6\7\2\0\1\3"+
    "\70\0\1\3\70\0\4\65\1\3\1\151\64\65\10\0"+
    "\1\152\1\0\2\70\66\0\1\154\70\0\2\7\1\0"+
    "\2\7\2\0\3\7\1\226\22\7\20\0\6\7\7\0"+
    "\2\7\1\0\2\7\2\0\1\227\1\7\1\230\23\7"+
    "\20\0\6\7\7\0\2\7\1\0\1\231\1\7\2\0"+
    "\26\7\20\0\6\7\7\0\2\7\1\0\1\232\1\7"+
    "\2\0\26\7\20\0\6\7\7\0\2\7\1\0\2\7"+
    "\2\0\3\7\1\233\12\7\1\234\7\7\20\0\6\7"+
    "\7\0\2\7\1\0\2\7\2\0\4\7\1\235\21\7"+
    "\20\0\6\7\7\0\2\7\1\0\2\7\2\0\5\7"+
    "\1\236\20\7\20\0\6\7\7\0\2\7\1\0\2\7"+
    "\2\0\5\7\1\237\20\7\20\0\6\7\7\0\2\7"+
    "\1\0\2\7\2\0\1\7\1\240\24\7\20\0\6\7"+
    "\7\0\2\7\1\0\2\7\2\0\14\7\1\241\11\7"+
    "\20\0\6\7\7\0\2\7\1\0\2\7\2\0\4\7"+
    "\1\242\21\7\20\0\6\7\7\0\2\7\1\0\2\7"+
    "\2\0\6\7\1\243\17\7\20\0\6\7\7\0\2\7"+
    "\1\0\2\7\2\0\7\7\1\244\16\7\20\0\6\7"+
    "\7\0\2\7\1\0\1\245\1\7\2\0\26\7\20\0"+
    "\6\7\7\0\2\7\1\0\2\7\2\0\7\7\1\246"+
    "\16\7\20\0\6\7\7\0\2\7\1\0\2\7\2\0"+
    "\10\7\1\247\15\7\20\0\6\7\7\0\2\7\1\0"+
    "\2\7\2\0\1\250\25\7\20\0\6\7\7\0\2\7"+
    "\1\0\2\7\2\0\6\7\1\251\17\7\20\0\6\7"+
    "\7\0\2\7\1\0\2\7\2\0\15\7\1\252\10\7"+
    "\20\0\6\7\7\0\2\7\1\0\2\7\2\0\5\7"+
    "\1\253\20\7\20\0\6\7\7\0\2\7\1\0\2\7"+
    "\2\0\21\7\1\254\4\7\20\0\6\7\7\0\2\7"+
    "\1\0\2\7\2\0\4\7\1\255\2\7\1\256\16\7"+
    "\20\0\6\7\7\0\2\7\1\0\2\7\2\0\4\7"+
    "\1\257\21\7\20\0\6\7\7\0\2\7\1\0\1\260"+
    "\1\7\2\0\26\7\20\0\6\7\7\0\2\7\1\0"+
    "\2\7\2\0\25\7\1\261\20\0\6\7\7\0\2\7"+
    "\1\0\2\7\2\0\16\7\1\262\7\7\20\0\6\7"+
    "\7\0\2\7\1\0\1\263\1\7\2\0\26\7\20\0"+
    "\6\7\7\0\2\7\1\0\2\7\2\0\16\7\1\264"+
    "\7\7\20\0\6\7\7\0\2\7\1\0\2\7\2\0"+
    "\4\7\1\265\21\7\20\0\6\7\7\0\2\7\1\0"+
    "\2\7\2\0\11\7\1\266\14\7\20\0\6\7\7\0"+
    "\2\7\1\0\2\7\2\0\6\7\1\267\17\7\20\0"+
    "\6\7\7\0\2\7\1\0\2\7\2\0\7\7\1\270"+
    "\16\7\20\0\6\7\7\0\2\7\1\0\2\7\2\0"+
    "\4\7\1\271\21\7\20\0\6\7\7\0\2\7\1\0"+
    "\1\272\1\7\2\0\1\273\25\7\20\0\6\7\7\0"+
    "\2\7\1\0\2\7\2\0\6\7\1\274\17\7\20\0"+
    "\6\7\7\0\2\7\1\0\2\7\2\0\1\275\25\7"+
    "\20\0\6\7\7\0\2\7\1\0\2\7\2\0\6\7"+
    "\1\276\17\7\20\0\6\7\7\0\2\7\1\0\2\7"+
    "\2\0\4\7\1\277\21\7\20\0\6\7\7\0\2\7"+
    "\1\0\2\7\2\0\5\7\1\300\20\7\20\0\6\7"+
    "\7\0\2\7\1\0\2\7\2\0\10\7\1\301\15\7"+
    "\20\0\6\7\7\0\2\7\1\0\1\302\1\7\2\0"+
    "\26\7\20\0\6\7\7\0\2\7\1\0\2\7\2\0"+
    "\17\7\1\303\6\7\20\0\6\7\7\0\2\7\1\0"+
    "\2\7\2\0\1\304\25\7\20\0\6\7\7\0\2\7"+
    "\1\0\1\305\1\7\2\0\26\7\20\0\6\7\7\0"+
    "\2\7\1\0\2\7\2\0\14\7\1\306\11\7\20\0"+
    "\6\7\7\0\2\7\1\0\1\307\1\7\2\0\26\7"+
    "\20\0\6\7\7\0\2\7\1\0\2\7\2\0\15\7"+
    "\1\310\10\7\20\0\6\7\7\0\2\7\1\0\2\7"+
    "\2\0\11\7\1\311\14\7\20\0\6\7\7\0\2\7"+
    "\1\0\1\312\1\7\2\0\26\7\20\0\6\7\7\0"+
    "\2\7\1\0\1\313\1\7\2\0\26\7\20\0\6\7"+
    "\7\0\2\7\1\0\2\7\2\0\4\7\1\314\21\7"+
    "\20\0\6\7\7\0\2\7\1\0\1\315\1\7\2\0"+
    "\26\7\20\0\6\7\7\0\2\7\1\0\2\7\2\0"+
    "\21\7\1\316\4\7\20\0\6\7\7\0\2\7\1\0"+
    "\2\7\2\0\21\7\1\317\4\7\20\0\6\7\7\0"+
    "\2\7\1\0\2\7\2\0\13\7\1\320\12\7\20\0"+
    "\6\7\7\0\2\7\1\0\2\7\2\0\5\7\1\321"+
    "\20\7\20\0\6\7\7\0\2\7\1\0\2\7\2\0"+
    "\1\7\1\322\24\7\20\0\6\7\7\0\2\7\1\0"+
    "\1\323\1\7\2\0\26\7\20\0\6\7\7\0\2\7"+
    "\1\0\2\7\2\0\5\7\1\324\20\7\20\0\6\7"+
    "\7\0\2\7\1\0\2\7\2\0\5\7\1\325\20\7"+
    "\20\0\6\7\7\0\2\7\1\0\2\7\2\0\26\7"+
    "\20\0\2\7\1\326\3\7\7\0\2\7\1\0\2\7"+
    "\2\0\1\327\25\7\20\0\6\7\7\0\2\7\1\0"+
    "\2\7\2\0\1\330\25\7\20\0\6\7\7\0\2\7"+
    "\1\0\2\7\2\0\11\7\1\331\14\7\20\0\6\7"+
    "\7\0\2\7\1\0\1\332\1\7\2\0\26\7\20\0"+
    "\6\7\7\0\2\7\1\0\2\7\2\0\7\7\1\333"+
    "\16\7\20\0\6\7\7\0\2\7\1\0\2\7\2\0"+
    "\12\7\1\334\13\7\20\0\6\7\7\0\2\7\1\0"+
    "\2\7\2\0\3\7\1\335\22\7\20\0\6\7\7\0"+
    "\2\7\1\0\2\7\2\0\1\336\25\7\20\0\6\7"+
    "\7\0\2\7\1\0\2\7\2\0\7\7\1\337\16\7"+
    "\20\0\6\7\7\0\2\7\1\0\2\7\2\0\21\7"+
    "\1\340\4\7\20\0\6\7\7\0\2\7\1\0\1\341"+
    "\1\7\2\0\26\7\20\0\6\7\7\0\2\7\1\0"+
    "\2\7\2\0\26\7\20\0\5\7\1\342\7\0\2\7"+
    "\1\0\1\343\1\7\2\0\26\7\20\0\6\7\7\0"+
    "\2\7\1\0\2\7\2\0\14\7\1\344\11\7\20\0"+
    "\6\7\7\0\2\7\1\0\2\7\2\0\10\7\1\345"+
    "\15\7\20\0\6\7\7\0\2\7\1\0\1\346\1\7"+
    "\2\0\26\7\20\0\6\7\7\0\2\7\1\0\2\7"+
    "\2\0\10\7\1\347\15\7\20\0\6\7\7\0\2\7"+
    "\1\0\1\350\1\7\2\0\26\7\20\0\6\7\7\0"+
    "\2\7\1\0\2\7\2\0\1\351\25\7\20\0\6\7"+
    "\7\0\2\7\1\0\1\352\1\7\2\0\26\7\20\0"+
    "\6\7\7\0\2\7\1\0\2\7\2\0\13\7\1\353"+
    "\12\7\20\0\6\7\7\0\2\7\1\0\2\7\2\0"+
    "\3\7\1\354\22\7\20\0\6\7\7\0\2\7\1\0"+
    "\2\7\2\0\3\7\1\355\22\7\20\0\6\7\7\0"+
    "\2\7\1\0\2\7\2\0\5\7\1\356\20\7\20\0"+
    "\6\7\7\0\2\7\1\0\2\7\2\0\7\7\1\357"+
    "\16\7\20\0\6\7\7\0\2\7\1\0\2\7\2\0"+
    "\7\7\1\360\16\7\20\0\6\7\7\0\2\7\1\0"+
    "\2\7\2\0\21\7\1\361\4\7\20\0\6\7\7\0"+
    "\2\7\1\0\2\7\2\0\5\7\1\362\20\7\20\0"+
    "\6\7\7\0\2\7\1\0\2\7\2\0\13\7\1\363"+
    "\12\7\20\0\6\7\7\0\2\7\1\0\2\7\2\0"+
    "\15\7\1\364\10\7\20\0\6\7\7\0\2\7\1\0"+
    "\2\7\2\0\6\7\1\365\17\7\20\0\6\7\7\0"+
    "\2\7\1\0\2\7\2\0\7\7\1\366\16\7\20\0"+
    "\6\7\7\0\2\7\1\0\2\7\2\0\17\7\1\367"+
    "\6\7\20\0\6\7\7\0\2\7\1\0\1\370\1\7"+
    "\2\0\26\7\20\0\6\7\7\0\2\7\1\0\2\7"+
    "\2\0\7\7\1\371\16\7\20\0\6\7\7\0\2\7"+
    "\1\0\2\7\2\0\4\7\1\372\21\7\20\0\6\7"+
    "\7\0\2\7\1\0\2\7\2\0\16\7\1\373\7\7"+
    "\20\0\6\7\7\0\2\7\1\0\1\374\1\7\2\0"+
    "\26\7\20\0\6\7\7\0\2\7\1\0\1\375\1\7"+
    "\2\0\26\7\20\0\6\7\7\0\2\7\1\0\2\7"+
    "\2\0\1\376\25\7\20\0\6\7\7\0\2\7\1\0"+
    "\2\7\2\0\26\7\20\0\1\377\5\7\7\0\2\7"+
    "\1\0\2\7\2\0\2\7\1\u0100\23\7\20\0\6\7"+
    "\7\0\2\7\1\0\2\7\2\0\26\7\20\0\2\7"+
    "\1\u0101\3\7\7\0\2\7\1\0\2\7\2\0\5\7"+
    "\1\u0102\20\7\20\0\6\7\7\0\2\7\1\0\1\u0103"+
    "\1\7\2\0\26\7\20\0\6\7\7\0\2\7\1\0"+
    "\2\7\2\0\10\7\1\u0104\15\7\20\0\6\7\7\0"+
    "\2\7\1\0\2\7\2\0\1\7\1\u0105\24\7\20\0"+
    "\6\7\7\0\2\7\1\0\2\7\2\0\15\7\1\u0106"+
    "\10\7\20\0\6\7\7\0\2\7\1\0\2\7\2\0"+
    "\13\7\1\u0107\12\7\20\0\6\7\7\0\2\7\1\0"+
    "\2\7\2\0\3\7\1\u0108\22\7\20\0\6\7\7\0"+
    "\2\7\1\0\1\u0109\1\7\2\0\26\7\20\0\6\7"+
    "\7\0\2\7\1\0\1\u010a\1\7\2\0\26\7\20\0"+
    "\6\7\7\0\2\7\1\0\1\u010b\1\7\2\0\26\7"+
    "\20\0\6\7\7\0\2\7\1\0\1\u010c\1\7\2\0"+
    "\26\7\20\0\6\7\7\0\2\7\1\0\2\7\2\0"+
    "\6\7\1\u010d\17\7\20\0\6\7\7\0\2\7\1\0"+
    "\2\7\2\0\7\7\1\u010e\16\7\20\0\6\7\7\0"+
    "\2\7\1\0\2\7\2\0\5\7\1\u010f\20\7\20\0"+
    "\6\7\7\0\2\7\1\0\2\7\2\0\13\7\1\u0110"+
    "\12\7\20\0\6\7\7\0\2\7\1\0\2\7\2\0"+
    "\5\7\1\u0111\20\7\20\0\6\7\7\0\2\7\1\0"+
    "\2\7\2\0\20\7\1\u0112\5\7\20\0\6\7\7\0"+
    "\2\7\1\0\2\7\2\0\1\u0113\25\7\20\0\6\7"+
    "\7\0\2\7\1\0\2\7\2\0\15\7\1\u0114\10\7"+
    "\20\0\6\7\7\0\2\7\1\0\2\7\2\0\3\7"+
    "\1\u0115\22\7\20\0\6\7\7\0\2\7\1\0\2\7"+
    "\2\0\7\7\1\u0116\16\7\20\0\6\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12006];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\1\11\33\1\14\11\7\1\2\0"+
    "\1\11\2\0\1\11\3\1\1\11\1\0\36\1\5\11"+
    "\7\1\1\0\1\1\1\0\253\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[278];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private ComplexSymbolFactory sf; 
	public Yylex(Reader r, ComplexSymbolFactory sf){
                this(r);
                this.sf=sf;
    } 

	// Debug flag
	public static boolean lexDebug = false;
	protected void debug(int type) {
    	if (lexDebug) {
    		log.reportMessage(yyline+":"+yycolumn+" Token "+type+" '"+yytext()+"'");		
    	}
	}

	// Output log
	protected ILog log;
	public void setLog(ILog log) {
		this.log = log;
	}
	
    // Create a new java_cup.runtime.Symbol with information about the current token
    protected Symbol symbol(int type) {
    	debug(type);
    	return sf.newSymbol("", type,new Location(yyline+1+OclProcessorImpl.lineDelta,yycolumn+1),new Location(yyline+1+OclProcessorImpl.lineDelta,yycolumn+1+yylength()), yytext());
    }
    protected Symbol symbol(int type, Object value) {
		debug(type);
		return sf.newSymbol("", type, new Location(yyline+1+OclProcessorImpl.lineDelta, yycolumn +1), new Location(yyline+1+OclProcessorImpl.lineDelta,yycolumn+1+yylength()), value);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 146) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 6: 
          { return symbol(sym.SIMPLE_NAME);
          }
        case 85: break;
        case 30: 
          { return symbol(sym.IN);
          }
        case 86: break;
        case 14: 
          { return symbol(sym.LEFT_BRA);
          }
        case 87: break;
        case 32: 
          { return symbol(sym.OR);
          }
        case 88: break;
        case 58: 
          { return symbol(sym.WHEN);
          }
        case 89: break;
        case 57: 
          { return symbol(sym.BODY);
          }
        case 90: break;
        case 16: 
          { return symbol(sym.RIGHT_BRK);
          }
        case 91: break;
        case 50: 
          { return symbol(sym.SET);
          }
        case 92: break;
        case 5: 
          { return symbol(sym.MINUS);
          }
        case 93: break;
        case 19: 
          { return symbol(sym.SEMICOLON);
          }
        case 94: break;
        case 52: 
          { return symbol(sym.ELSE);
          }
        case 95: break;
        case 39: 
          { return symbol(sym.INV);
          }
        case 96: break;
        case 79: 
          { return symbol(sym.TUPLE_TYPE);
          }
        case 97: break;
        case 8: 
          { return symbol(sym.DOT);
          }
        case 98: break;
        case 10: 
          { return symbol(sym.COLON);
          }
        case 99: break;
        case 43: 
          { return symbol(sym.AND);
          }
        case 100: break;
        case 37: 
          { return symbol(sym.GE);
          }
        case 101: break;
        case 61: 
          { return symbol(sym.WHERE);
          }
        case 102: break;
        case 20: 
          { return symbol(sym.BAR);
          }
        case 103: break;
        case 47: 
          { return symbol(sym.INT_DIVIDE);
          }
        case 104: break;
        case 68: 
          { return symbol(sym.EXTENDS);
          }
        case 105: break;
        case 31: 
          { return symbol(sym.IF);
          }
        case 106: break;
        case 11: 
          { return symbol(sym.UP);
          }
        case 107: break;
        case 59: 
          { return symbol(sym.ENDIF);
          }
        case 108: break;
        case 42: 
          { return symbol(sym.TOP);
          }
        case 109: break;
        case 44: 
          { return symbol(sym.NOT);
          }
        case 110: break;
        case 64: 
          { return symbol(sym.IMPORT);
          }
        case 111: break;
        case 70: 
          { return symbol(sym.ITERATE);
          }
        case 112: break;
        case 22: 
          { return symbol(sym.QUESTION);
          }
        case 113: break;
        case 67: 
          { return symbol(sym.ENFORCE);
          }
        case 114: break;
        case 46: 
          { return symbol(sym.DEF);
          }
        case 115: break;
        case 65: 
          { return symbol(sym.DERIVE);
          }
        case 116: break;
        case 18: 
          { return symbol(sym.COMMA);
          }
        case 117: break;
        case 35: 
          { return symbol(sym.LE);
          }
        case 118: break;
        case 82: 
          { return symbol(sym.ORDERED_SET);
          }
        case 119: break;
        case 17: 
          { return symbol(sym.RIGHT_BRA);
          }
        case 120: break;
        case 81: 
          { return symbol(sym.COLLECTION);
          }
        case 121: break;
        case 49: 
          { return symbol(sym.LET);
          }
        case 122: break;
        case 12: 
          { return symbol(sym.LEFT_PAR);
          }
        case 123: break;
        case 55: 
          { return symbol(sym.TRUE);
          }
        case 124: break;
        case 36: 
          { return symbol(sym.NE);
          }
        case 125: break;
        case 48: 
          { return symbol(sym.KEY);
          }
        case 126: break;
        case 83: 
          { return symbol(sym.IMPLEMENTEDBY);
          }
        case 127: break;
        case 80: 
          { return symbol(sym.ENDPACKAGE);
          }
        case 128: break;
        case 40: 
          { return symbol(sym.INT_MOD);
          }
        case 129: break;
        case 28: 
          { return symbol(sym.DOUBLEPLUS);
          }
        case 130: break;
        case 29: 
          { return symbol(sym.STRING);
          }
        case 131: break;
        case 41: 
          { return symbol(sym.PRE);
          }
        case 132: break;
        case 76: 
          { return symbol(sym.OVERRIDES);
          }
        case 133: break;
        case 45: 
          { return symbol(sym.XOR);
          }
        case 134: break;
        case 9: 
          { return symbol(sym.PLUS);
          }
        case 135: break;
        case 63: 
          { return symbol(sym.TUPLE);
          }
        case 136: break;
        case 56: 
          { return symbol(sym.THEN);
          }
        case 137: break;
        case 51: 
          { return symbol(sym.BAG);
          }
        case 138: break;
        case 34: 
          { return symbol(sym.UP_UP);
          }
        case 139: break;
        case 75: 
          { return symbol(sym.PRIMITIVE);
          }
        case 140: break;
        case 21: 
          { return symbol(sym.AT);
          }
        case 141: break;
        case 4: 
          { return symbol(sym.TIMES);
          }
        case 142: break;
        case 71: 
          { return symbol(sym.PACKAGE);
          }
        case 143: break;
        case 53: 
          { return symbol(sym.INIT);
          }
        case 144: break;
        case 77: 
          { return symbol(sym.CHECKONLY);
          }
        case 145: break;
        case 84: 
          { return symbol(sym.TRANSFORMATION);
          }
        case 146: break;
        case 62: 
          { return symbol(sym.QUERY);
          }
        case 147: break;
        case 2: 
          { /* just skip what was found, do nothing */
          }
        case 148: break;
        case 66: 
          { return symbol(sym.DOMAIN);
          }
        case 149: break;
        case 13: 
          { return symbol(sym.LEFT_BRK);
          }
        case 150: break;
        case 72: 
          { return symbol(sym.CONTEXT);
          }
        case 151: break;
        case 27: 
          { return symbol(sym.DOT_DOT);
          }
        case 152: break;
        case 3: 
          { return symbol(sym.DIVIDE);
          }
        case 153: break;
        case 15: 
          { return symbol(sym.RIGHT_PAR);
          }
        case 154: break;
        case 25: 
          { return symbol(sym.GT);
          }
        case 155: break;
        case 69: 
          { return symbol(sym.IMPLIES);
          }
        case 156: break;
        case 26: 
          { return symbol(sym.MINUS_GT);
          }
        case 157: break;
        case 78: 
          { return symbol(sym.UNDEFINED);
          }
        case 158: break;
        case 38: 
          { return symbol(sym.REAL);
          }
        case 159: break;
        case 23: 
          { return symbol(sym.EQ);
          }
        case 160: break;
        case 54: 
          { return symbol(sym.POST);
          }
        case 161: break;
        case 33: 
          { return symbol(sym.COLON_COLON);
          }
        case 162: break;
        case 60: 
          { return symbol(sym.FALSE);
          }
        case 163: break;
        case 1: 
          { log.reportError("Illegal character '"+yytext()+"'"); return symbol(sym.BAD);
          }
        case 164: break;
        case 74: 
          { return symbol(sym.SEQUENCE);
          }
        case 165: break;
        case 73: 
          { return symbol(sym.RELATION);
          }
        case 166: break;
        case 7: 
          { return symbol(sym.INTEGER);
          }
        case 167: break;
        case 24: 
          { return symbol(sym.LT);
          }
        case 168: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 	return symbol(sym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
