keywords:

	"import"
	"transformation" 
	"extends"
	"key"
	"top"
	"relation"
	"overrides"
	"domain"
	"implementedby"
	"primitive"
	"checkonly"
	"enforce"
	"when"
	"where"
	"query"

7.13.1 Relations Textual Syntax Grammar
<topLevel> 						::= ('import' <filename> ';' )* <transformation>*
<filename> 						::= <identifier>
<transformation> 				::= 'transformation' <identifier> '('
									<modelDecl> (',' <modelDecl>)* ')'
									['extends' <identifier> (',' <identifier>)* ]
									'{'
										<keyDecl>* ( <relation> | <query> )*
									'}'
<modelDecl> 					::= <modelId> ':' <metaModelId> (',' <metaModelId>)*
<modelId> 						::= <identifier>
<metaModelId> 					::= <identifier>
<keyDecl> 						::= 'key' <classId> '{' <propertyId> (',' <propertyId>)* '}' ';'
<classId> 						::= <identifier>
<propertyId> 					::= <identifier>
<relation> 						::= ['top'] 'relation' <identifier> ['overrides' <identifier>]
								'{'
									<varDeclaration>*
										( <domain> | <primitiveTypeDomain>)+
										<when>? <where>?
								'}'
<varDeclaration> 				::= <identifier> (, <identifier>)* ':' <typeCS> ';'
<domain> 						::= [<checkEnforceQualifier>]
								'domain' <modelId> [ <identifier> ] ':' <typeCS>
								'{' [<propertyTemplate> (',' <propertyTemplate>)*] '}' [ '{' <oclExpressionCS> '}' ]
									['implementedby' <OperationCallExpCS>]
								';'
<primitiveTypeDomain> 			::= 'primitive' 'domain' <identifier> ':' <typeCS> ';'
<checkEnforceQualifier> 		::= 'checkonly' | 'enforce'
<when> 							::= 'when' '{' <pattern> '}'
<where> 						::= 'where' '{' <pattern> '}'
<pattern>						::=	<predicate>*
<predicate>						::=	<oclExpressionCS> ';'
<query> 						::= 'query' <pathNameCS> 
								'(' [<paramDeclaration> (','
									<paramDeclaration>)*] 
								')' ':' <typeCS>
								(
									';' | '{' <oclExpressionCS> '}'
								)
		
		
7.13.2 Expressions syntax (extensions to OCL)

<oclExpressionCS> 				::= <propertyCallExpCS>
								| <variableExpCS>
								| <literalExpCS>
								| <letExpCS>
								| <ifExpCS>
								| <template>
								| '(' <oclExpressionCS> ')'
<template> 						::= <objectTemplate>
								| <collectionTemplate>
<objectTemplate> 				::= [<identifier>] ':' <typeCS> '{' [<propertyTemplate> (',' <propertyTemplate>)*] '}'
<propertyTemplate> 				::= <identifier> '=' <oclExpressionCS>
<collectionTemplate>			::= <identifier> ':' <collectionTypeIdentifierCS>
									'(' <typeCS> ')'
									'{'
										<setComprehensionExpression>
										| <memberSelectionExprCS>
										| <oclExpressionCSList>
									(',' <oclExpressionCSList>)*
									'}'
<setComprehensionExpression> 	::= (<identifier> | <objectTemplate>) '|' <oclExpressionCS>
<memberSelectionExprCS> 		::= (<identifier> | <objectTemplate> | '_') '++' (<identifier> | '_')

