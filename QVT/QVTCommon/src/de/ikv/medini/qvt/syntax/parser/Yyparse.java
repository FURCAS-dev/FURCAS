
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jul 23 11:26:09 CEST 2007
//----------------------------------------------------

package de.ikv.medini.qvt.syntax.parser;

import java.util.*;
import java_cup.runtime.*;
import uk.ac.kent.cs.kmf.util.*;
import org.oslo.ocl20.syntax.ast.*;
import org.oslo.ocl20.syntax.ast.contexts.*;
import org.oslo.ocl20.syntax.ast.expressions.*;
import org.oslo.ocl20.syntax.ast.types.*;
import org.oslo.ocl20.syntax.parser.ErrorManager;
import org.oslo.ocl20.syntax.ast.expressions.CollectionKindAS;
import org.oslo.ocl20.syntax.ast.expressions.DotSelectionExpAS;
import org.oslo.ocl20.syntax.ast.expressions.OclExpressionAS;
import org.oslo.ocl20.syntax.ast.qvt.CollectionTemplateAS;
import org.oslo.ocl20.syntax.ast.qvt.DomainAS;
import org.oslo.ocl20.syntax.ast.qvt.ExecutionKindAS;
import org.oslo.ocl20.syntax.ast.qvt.KeyDeclarationAS;
import org.oslo.ocl20.syntax.ast.qvt.MemberSelectionExpressionAS;
import org.oslo.ocl20.syntax.ast.qvt.ModelDeclarationAS;
import org.oslo.ocl20.syntax.ast.qvt.ObjectTemplateAS;
import org.oslo.ocl20.syntax.ast.qvt.PrimitiveDomainAS;
import org.oslo.ocl20.syntax.ast.qvt.PropertyTemplateAS;
import org.oslo.ocl20.syntax.ast.qvt.QueryAS;
import org.oslo.ocl20.syntax.ast.qvt.QvtFactory;
import org.oslo.ocl20.syntax.ast.qvt.RelationAS;
import org.oslo.ocl20.syntax.ast.qvt.SetComprehensionExpressionAS;
import org.oslo.ocl20.syntax.ast.qvt.TopLevelAS;
import org.oslo.ocl20.syntax.ast.qvt.TransformationAS;
import org.oslo.ocl20.syntax.ast.qvt.ParameterDeclarationAS;
import org.oslo.ocl20.syntax.ast.qvt.TemplateAS;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jul 23 11:26:09 CEST 2007
  */
public class Yyparse extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Yyparse() {super();}

  /** Constructor which sets the default scanner. */
  public Yyparse(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Yyparse(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\323\000\002\002\004\000\002\041\004\000\002\042" +
    "\002\000\002\042\006\000\002\043\002\000\002\043\004" +
    "\000\002\044\014\000\002\045\002\000\002\045\004\000" +
    "\002\046\003\000\002\046\005\000\002\047\003\000\002" +
    "\047\005\000\002\050\002\000\002\050\004\000\002\051" +
    "\002\000\002\051\004\000\002\051\004\000\002\052\005" +
    "\000\002\053\003\000\002\053\005\000\002\054\010\000" +
    "\002\055\003\000\002\055\005\000\002\056\014\000\002" +
    "\057\003\000\002\057\003\000\002\057\004\000\002\057" +
    "\004\000\002\060\002\000\002\060\003\000\002\061\002" +
    "\000\002\061\004\000\002\062\006\000\002\063\002\000" +
    "\002\063\004\000\002\064\016\000\002\065\002\000\002" +
    "\065\005\000\002\066\002\000\002\066\004\000\002\067" +
    "\002\000\002\067\003\000\002\070\002\000\002\070\003" +
    "\000\002\070\005\000\002\071\010\000\002\072\003\000" +
    "\002\072\003\000\002\073\002\000\002\073\006\000\002" +
    "\074\002\000\002\074\006\000\002\075\002\000\002\075" +
    "\004\000\002\076\004\000\002\076\004\000\002\077\012" +
    "\000\002\100\003\000\002\100\005\000\002\101\005\000" +
    "\002\102\002\000\002\102\003\000\002\102\005\000\002" +
    "\002\006\000\002\002\003\000\002\003\002\000\002\003" +
    "\004\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\010\010\000\002\011\005\000\002\011\005\000" +
    "\002\011\006\000\002\011\006\000\002\005\005\000\002" +
    "\006\006\000\002\006\005\000\002\006\006\000\002\006" +
    "\005\000\002\006\007\000\002\006\006\000\002\006\007" +
    "\000\002\006\006\000\002\007\007\000\002\007\005\000" +
    "\002\012\005\000\002\014\006\000\002\014\005\000\002" +
    "\014\006\000\002\014\005\000\002\014\006\000\002\014" +
    "\005\000\002\014\007\000\002\014\006\000\002\014\007" +
    "\000\002\014\006\000\002\014\007\000\002\014\006\000" +
    "\002\013\012\000\002\013\010\000\002\013\011\000\002" +
    "\013\007\000\002\013\010\000\002\013\006\000\002\013" +
    "\007\000\002\013\005\000\002\015\003\000\002\015\005" +
    "\000\002\016\007\000\002\016\005\000\002\016\005\000" +
    "\002\016\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\020\006\000\002\022\006\000\002\103" +
    "\003\000\002\103\003\000\002\104\007\000\002\104\010" +
    "\000\002\105\005\000\002\106\014\000\002\106\014\000" +
    "\002\106\014\000\002\111\002\000\002\111\005\000\002" +
    "\107\005\000\002\107\005\000\002\110\005\000\002\110" +
    "\005\000\002\023\003\000\002\023\003\000\002\023\005" +
    "\000\002\023\004\000\002\023\006\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\006\000\002\023\010\000\002\023" +
    "\012\000\002\023\014\000\002\023\010\000\002\023\007" +
    "\000\002\023\014\000\002\023\012\000\002\023\004\000" +
    "\002\023\004\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\011\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\006\000\002\023" +
    "\010\000\002\023\007\000\002\023\010\000\002\023\007" +
    "\000\002\024\003\000\002\024\005\000\002\025\003\000" +
    "\002\025\005\000\002\026\003\000\002\026\005\000\002" +
    "\026\003\000\002\027\002\000\002\027\004\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\031\006\000\002\031\005\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\032\003\000\002\032" +
    "\005\000\002\033\003\000\002\033\003\000\002\034\005" +
    "\000\002\035\006\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\037\003\000\002\037\005\000\002\040" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0160\000\010\002\uffff\110\uffff\111\uffff\001\002\000" +
    "\004\002\u0162\001\002\000\010\002\ufffd\110\006\111\ufffd" +
    "\001\002\000\004\106\013\001\002\000\006\002\000\111" +
    "\010\001\002\000\004\106\013\001\002\000\006\002\ufffc" +
    "\111\ufffc\001\002\000\004\071\014\001\002\000\122\026" +
    "\uff2f\027\uff2f\030\uff2f\031\uff2f\032\uff2f\033\uff2f\034\uff2f" +
    "\035\uff2f\036\uff2f\037\uff2f\040\uff2f\041\uff2f\043\uff2f\044" +
    "\uff2f\045\uff2f\046\uff2f\051\uff2f\053\uff2f\054\uff2f\055\uff2f" +
    "\056\uff2f\057\uff2f\060\uff2f\061\uff2f\062\uff2f\063\uff2f\064" +
    "\uff2f\066\uff2f\067\uff2f\070\uff2f\071\uff2f\072\uff2f\073\uff2f" +
    "\074\uff2f\075\uff2f\076\uff2f\077\uff2f\106\uff2f\116\uff2f\125" +
    "\uff2f\001\002\000\004\106\013\001\002\000\006\056\025" +
    "\074\026\001\002\000\004\060\020\001\002\000\006\056" +
    "\ufff8\074\ufff8\001\002\000\004\106\013\001\002\000\006" +
    "\056\uffef\074\uffef\001\002\000\006\056\uffee\074\uffee\001" +
    "\002\000\004\106\013\001\002\000\006\056\uffed\074\uffed" +
    "\001\002\000\004\106\013\001\002\000\006\073\ufffa\112" +
    "\027\001\002\000\004\106\013\001\002\000\004\073\031" +
    "\001\002\000\014\076\ufff4\113\ufff4\114\ufff4\115\ufff4\127" +
    "\ufff4\001\002\000\014\076\ufff2\113\034\114\ufff2\115\ufff2" +
    "\127\ufff2\001\002\000\012\076\051\114\052\115\uffe4\127" +
    "\055\001\002\000\004\106\013\001\002\000\014\076\ufff3" +
    "\113\ufff3\114\ufff3\115\ufff3\127\ufff3\001\002\000\006\067" +
    "\041\073\040\001\002\000\026\032\uff31\051\uff31\056\uff31" +
    "\061\uff31\062\uff31\067\uff31\071\uff31\073\uff31\074\uff31\076" +
    "\uff31\001\002\000\004\106\013\001\002\000\004\106\013" +
    "\001\002\000\114\026\uff30\027\uff30\030\uff30\031\uff30\032" +
    "\uff30\033\uff30\034\uff30\035\uff30\036\uff30\037\uff30\040\uff30" +
    "\041\uff30\043\uff30\044\uff30\045\uff30\046\uff30\051\uff30\053" +
    "\uff30\054\uff30\055\uff30\056\uff30\057\uff30\060\uff30\061\uff30" +
    "\062\uff30\063\uff30\064\uff30\066\uff30\067\uff30\070\uff30\071" +
    "\uff30\072\uff30\073\uff30\074\uff30\075\uff30\076\uff30\077\uff30" +
    "\001\002\000\006\056\046\076\045\001\002\000\006\056" +
    "\uffeb\076\uffeb\001\002\000\004\061\050\001\002\000\004" +
    "\106\013\001\002\000\006\056\uffea\076\uffea\001\002\000" +
    "\014\076\uffec\113\uffec\114\uffec\115\uffec\127\uffec\001\002" +
    "\000\006\002\ufffb\111\ufffb\001\002\000\004\115\uffe3\001" +
    "\002\000\012\076\ufff1\114\ufff1\115\ufff1\127\ufff1\001\002" +
    "\000\012\076\ufff0\114\ufff0\115\ufff0\127\ufff0\001\002\000" +
    "\004\106\013\001\002\000\004\115\057\001\002\000\004" +
    "\106\013\001\002\000\006\073\uffe2\116\061\001\002\000" +
    "\004\106\013\001\002\000\004\073\063\001\002\000\012" +
    "\106\uffdf\120\uffdf\121\uffdf\122\uffdf\001\002\000\012\106" +
    "\013\120\076\121\073\122\065\001\002\000\004\126\uffd1" +
    "\001\002\000\016\076\uffe8\120\uffe8\121\uffe8\122\uffe8\123" +
    "\uffe8\124\uffe8\001\002\000\012\106\uffde\120\uffde\121\uffde" +
    "\122\uffde\001\002\000\006\056\u0147\060\u0148\001\002\000" +
    "\016\076\uffd0\120\076\121\073\122\065\123\u0136\124\uffd0" +
    "\001\002\000\004\126\u0124\001\002\000\004\126\uffd2\001" +
    "\002\000\016\076\uffe7\120\uffe7\121\uffe7\122\uffe7\123\uffe7" +
    "\124\uffe7\001\002\000\010\056\ufff6\060\ufff6\073\ufff6\001" +
    "\002\000\004\126\077\001\002\000\004\106\013\001\002" +
    "\000\004\060\101\001\002\000\020\016\103\017\110\020" +
    "\105\021\112\022\102\024\113\106\013\001\002\000\006" +
    "\071\uff3e\073\uff3e\001\002\000\006\071\uff42\073\uff42\001" +
    "\002\000\022\032\uff8d\051\uff8d\056\uff8d\061\uff8d\062\uff8d" +
    "\073\uff8d\074\uff8d\076\uff8d\001\002\000\006\071\uff40\073" +
    "\uff40\001\002\000\024\032\uff8f\051\uff8f\056\uff8f\061\uff8f" +
    "\062\uff8f\067\041\073\uff8f\074\uff8f\076\uff8f\001\002\000" +
    "\004\071\u010f\001\002\000\006\071\uff41\073\uff41\001\002" +
    "\000\004\061\u0123\001\002\000\006\071\uff3f\073\uff3f\001" +
    "\002\000\004\071\115\001\002\000\022\032\uff8e\051\uff8e" +
    "\056\uff8e\061\uff8e\062\uff8e\073\uff8e\074\uff8e\076\uff8e\001" +
    "\002\000\004\106\013\001\002\000\006\056\376\074\u0122" +
    "\001\002\000\022\032\121\051\uff90\056\uff90\060\122\061" +
    "\uff90\062\uff90\074\uff90\076\uff90\001\002\000\012\051\uff95" +
    "\056\uff95\074\uff95\076\uff95\001\002\000\052\016\103\017" +
    "\110\020\105\021\112\022\102\023\130\024\113\041\145" +
    "\047\132\050\146\052\135\060\136\071\140\100\151\101" +
    "\152\102\141\103\134\104\144\105\156\106\013\001\002" +
    "\000\020\016\103\017\110\020\105\021\112\022\102\024" +
    "\113\106\013\001\002\000\020\032\124\051\uff92\056\uff92" +
    "\061\uff92\062\uff92\074\uff92\076\uff92\001\002\000\052\016" +
    "\103\017\110\020\105\021\112\022\102\023\130\024\113" +
    "\041\145\047\132\050\146\052\135\060\136\071\140\100" +
    "\151\101\152\102\141\103\134\104\144\105\156\106\013" +
    "\001\002\000\106\026\uff8a\027\uff8a\030\uff8a\031\uff8a\032" +
    "\uff8a\033\uff8a\034\uff8a\035\uff8a\036\uff8a\037\uff8a\040\uff8a" +
    "\041\uff8a\043\uff8a\044\uff8a\045\uff8a\046\uff8a\051\uff8a\053" +
    "\uff8a\054\uff8a\055\uff8a\056\uff8a\057\uff8a\060\uff8a\061\uff8a" +
    "\062\uff8a\063\uff8a\066\uff8a\070\uff8a\071\uff8a\072\uff8a\074" +
    "\uff8a\075\uff8a\076\uff8a\077\uff8a\001\002\000\106\026\uff46" +
    "\027\uff46\030\uff46\031\uff46\032\uff46\033\uff46\034\uff46\035" +
    "\uff46\036\uff46\037\uff46\040\uff46\041\uff46\043\uff46\044\uff46" +
    "\045\uff46\046\uff46\051\uff46\053\uff46\054\uff46\055\uff46\056" +
    "\uff46\057\uff46\060\uff46\061\uff46\062\uff46\063\uff46\066\uff46" +
    "\070\uff46\071\uff46\072\uff46\074\uff46\075\uff46\076\uff46\077" +
    "\uff46\001\002\000\106\026\uff7b\027\uff7b\030\uff7b\031\uff7b" +
    "\032\uff7b\033\uff7b\034\uff7b\035\uff7b\036\uff7b\037\uff7b\040" +
    "\uff7b\041\uff7b\043\uff7b\044\uff7b\045\uff7b\046\uff7b\051\uff7b" +
    "\053\uff7b\054\uff7b\055\uff7b\056\uff7b\057\uff7b\060\uff7b\061" +
    "\uff7b\062\uff7b\063\uff7b\066\uff7b\070\uff7b\071\uff7b\072\uff7b" +
    "\074\uff7b\075\uff7b\076\uff7b\077\uff7b\001\002\000\004\073" +
    "\u011e\001\002\000\106\026\uff47\027\uff47\030\uff47\031\uff47" +
    "\032\uff47\033\uff47\034\uff47\035\uff47\036\uff47\037\uff47\040" +
    "\uff47\041\uff47\043\uff47\044\uff47\045\uff47\046\uff47\051\uff47" +
    "\053\uff47\054\uff47\055\uff47\056\uff47\057\uff47\060\uff47\061" +
    "\uff47\062\uff47\063\uff47\066\uff47\070\uff47\071\uff47\072\uff47" +
    "\074\uff47\075\uff47\076\uff47\077\uff47\001\002\000\052\016" +
    "\103\017\110\020\105\021\112\022\102\023\130\024\113" +
    "\041\145\047\132\050\146\052\135\060\136\071\140\100" +
    "\151\101\152\102\141\103\134\104\144\105\156\106\013" +
    "\001\002\000\006\071\u010f\073\u0110\001\002\000\106\026" +
    "\uff34\027\uff34\030\uff34\031\uff34\032\uff34\033\uff34\034\uff34" +
    "\035\uff34\036\uff34\037\uff34\040\uff34\041\uff34\043\uff34\044" +
    "\uff34\045\uff34\046\uff34\051\uff34\053\uff34\054\uff34\055\uff34" +
    "\056\uff34\057\uff34\060\uff34\061\uff34\062\uff34\063\uff34\066" +
    "\uff34\070\uff34\071\uff34\072\uff34\074\uff34\075\uff34\076\uff34" +
    "\077\uff34\001\002\000\052\016\103\017\110\020\105\021" +
    "\112\022\102\023\130\024\113\041\145\047\132\050\146" +
    "\052\135\060\136\071\140\100\151\101\152\102\141\103" +
    "\134\104\144\105\156\106\013\001\002\000\020\016\103" +
    "\017\110\020\105\021\112\022\102\024\113\106\013\001" +
    "\002\000\106\026\uff45\027\uff45\030\uff45\031\uff45\032\uff45" +
    "\033\uff45\034\uff45\035\uff45\036\uff45\037\uff45\040\uff45\041" +
    "\uff45\043\uff45\044\uff45\045\uff45\046\uff45\051\uff45\053\uff45" +
    "\054\uff45\055\uff45\056\uff45\057\uff45\060\uff45\061\uff45\062" +
    "\uff45\063\uff45\066\uff45\070\uff45\071\uff45\072\uff45\074\uff45" +
    "\075\uff45\076\uff45\077\uff45\001\002\000\052\016\103\017" +
    "\110\020\105\021\112\022\102\023\130\024\113\041\145" +
    "\047\132\050\146\052\135\060\136\071\140\100\151\101" +
    "\152\102\141\103\134\104\144\105\156\106\013\001\002" +
    "\000\106\026\uff35\027\uff35\030\uff35\031\uff35\032\uff35\033" +
    "\uff35\034\uff35\035\uff35\036\uff35\037\uff35\040\uff35\041\uff35" +
    "\043\uff35\044\uff35\045\uff35\046\uff35\051\uff35\053\uff35\054" +
    "\uff35\055\uff35\056\uff35\057\uff35\060\uff35\061\uff35\062\uff35" +
    "\063\uff35\066\uff35\070\uff35\071\uff35\072\uff35\074\uff35\075" +
    "\uff35\076\uff35\077\uff35\001\002\000\112\026\uff31\027\uff31" +
    "\030\uff31\031\uff31\032\uff31\033\uff31\034\uff31\035\uff31\036" +
    "\uff31\037\uff31\040\uff31\041\uff31\043\uff31\044\uff31\045\uff31" +
    "\046\uff31\051\uff31\053\uff31\054\uff31\055\uff31\056\uff31\057" +
    "\uff31\060\310\061\uff31\062\uff31\063\uff31\064\uff31\066\uff31" +
    "\067\uff31\070\uff31\071\uff31\072\uff31\074\uff31\075\uff31\076" +
    "\uff31\077\uff31\001\002\000\106\026\uff49\027\uff49\030\uff49" +
    "\031\uff49\032\uff49\033\uff49\034\uff49\035\uff49\036\uff49\037" +
    "\uff49\040\uff49\041\uff49\043\uff49\044\uff49\045\uff49\046\uff49" +
    "\051\uff49\053\uff49\054\uff49\055\uff49\056\uff49\057\uff49\060" +
    "\uff49\061\uff49\062\uff49\063\uff49\066\uff49\070\uff49\071\uff49" +
    "\072\uff49\074\uff49\075\uff49\076\uff49\077\uff49\001\002\000" +
    "\106\026\uff33\027\uff33\030\uff33\031\uff33\032\uff33\033\uff33" +
    "\034\uff33\035\uff33\036\uff33\037\uff33\040\uff33\041\uff33\043" +
    "\uff33\044\uff33\045\uff33\046\uff33\051\uff33\053\uff33\054\uff33" +
    "\055\uff33\056\uff33\057\uff33\060\uff33\061\uff33\062\uff33\063" +
    "\uff33\066\uff33\070\uff33\071\uff33\072\uff33\074\uff33\075\uff33" +
    "\076\uff33\077\uff33\001\002\000\052\016\103\017\110\020" +
    "\105\021\112\022\102\023\130\024\113\041\145\047\132" +
    "\050\146\052\135\060\136\071\140\100\151\101\152\102" +
    "\141\103\134\104\144\105\156\106\013\001\002\000\004" +
    "\106\013\001\002\000\106\026\uff89\027\uff89\030\uff89\031" +
    "\uff89\032\uff89\033\uff89\034\uff89\035\uff89\036\uff89\037\uff89" +
    "\040\uff89\041\uff89\043\uff89\044\uff89\045\uff89\046\uff89\051" +
    "\uff89\053\uff89\054\uff89\055\uff89\056\uff89\057\uff89\060\uff89" +
    "\061\uff89\062\uff89\063\uff89\066\uff89\070\uff89\071\uff89\072" +
    "\uff89\074\uff89\075\uff89\076\uff89\077\uff89\001\002\000\112" +
    "\026\uff4b\027\uff4b\030\uff4b\031\uff4b\032\uff4b\033\uff4b\034" +
    "\uff4b\035\uff4b\036\uff4b\037\uff4b\040\uff4b\041\uff4b\043\uff4b" +
    "\044\uff4b\045\uff4b\046\uff4b\051\uff4b\053\uff4b\054\uff4b\055" +
    "\uff4b\056\uff4b\057\uff4b\060\uff4b\061\uff4b\062\uff4b\063\uff4b" +
    "\064\213\066\uff4b\067\041\070\uff4b\071\uff4b\072\uff4b\074" +
    "\uff4b\075\uff4b\076\uff4b\077\uff4b\001\002\000\106\026\uff37" +
    "\027\uff37\030\uff37\031\uff37\032\uff37\033\uff37\034\uff37\035" +
    "\uff37\036\uff37\037\uff37\040\uff37\041\uff37\043\uff37\044\uff37" +
    "\045\uff37\046\uff37\051\uff37\053\uff37\054\uff37\055\uff37\056" +
    "\uff37\057\uff37\060\uff37\061\uff37\062\uff37\063\uff37\066\uff37" +
    "\070\uff37\071\uff37\072\uff37\074\uff37\075\uff37\076\uff37\077" +
    "\uff37\001\002\000\106\026\uff36\027\uff36\030\uff36\031\uff36" +
    "\032\uff36\033\uff36\034\uff36\035\uff36\036\uff36\037\uff36\040" +
    "\uff36\041\uff36\043\uff36\044\uff36\045\uff36\046\uff36\051\uff36" +
    "\053\uff36\054\uff36\055\uff36\056\uff36\057\uff36\060\uff36\061" +
    "\uff36\062\uff36\063\uff36\066\uff36\070\uff36\071\uff36\072\uff36" +
    "\074\uff36\075\uff36\076\uff36\077\uff36\001\002\000\072\026" +
    "\167\027\160\030\164\031\204\032\203\033\162\034\161" +
    "\035\170\036\171\037\175\040\163\041\176\043\157\044" +
    "\174\045\202\046\200\051\uff93\056\uff93\057\201\061\uff93" +
    "\062\uff93\063\166\070\165\071\173\072\177\074\uff93\076" +
    "\uff93\077\172\001\002\000\106\026\uff48\027\uff48\030\uff48" +
    "\031\uff48\032\uff48\033\uff48\034\uff48\035\uff48\036\uff48\037" +
    "\uff48\040\uff48\041\uff48\043\uff48\044\uff48\045\uff48\046\uff48" +
    "\051\uff48\053\uff48\054\uff48\055\uff48\056\uff48\057\uff48\060" +
    "\uff48\061\uff48\062\uff48\063\uff48\066\uff48\070\uff48\071\uff48" +
    "\072\uff48\074\uff48\075\uff48\076\uff48\077\uff48\001\002\000" +
    "\106\026\uff7c\027\uff7c\030\uff7c\031\uff7c\032\uff7c\033\uff7c" +
    "\034\uff7c\035\uff7c\036\uff7c\037\uff7c\040\uff7c\041\uff7c\043" +
    "\uff7c\044\uff7c\045\uff7c\046\uff7c\051\uff7c\053\uff7c\054\uff7c" +
    "\055\uff7c\056\uff7c\057\uff7c\060\uff7c\061\uff7c\062\uff7c\063" +
    "\uff7c\066\uff7c\070\uff7c\071\uff7c\072\uff7c\074\uff7c\075\uff7c" +
    "\076\uff7c\077\uff7c\001\002\000\106\026\uff32\027\uff32\030" +
    "\uff32\031\uff32\032\uff32\033\uff32\034\uff32\035\uff32\036\uff32" +
    "\037\uff32\040\uff32\041\uff32\043\uff32\044\uff32\045\uff32\046" +
    "\uff32\051\uff32\053\uff32\054\uff32\055\uff32\056\uff32\057\uff32" +
    "\060\uff32\061\uff32\062\uff32\063\uff32\066\uff32\070\uff32\071" +
    "\uff32\072\uff32\074\uff32\075\uff32\076\uff32\077\uff32\001\002" +
    "\000\052\016\103\017\110\020\105\021\112\022\102\023" +
    "\130\024\113\041\145\047\132\050\146\052\135\060\136" +
    "\071\140\100\151\101\152\102\141\103\134\104\144\105" +
    "\156\106\013\001\002\000\052\016\103\017\110\020\105" +
    "\021\112\022\102\023\130\024\113\041\145\047\132\050" +
    "\146\052\135\060\136\071\140\100\151\101\152\102\141" +
    "\103\134\104\144\105\156\106\013\001\002\000\052\016" +
    "\103\017\110\020\105\021\112\022\102\023\130\024\113" +
    "\041\145\047\132\050\146\052\135\060\136\071\140\100" +
    "\151\101\152\102\141\103\134\104\144\105\156\106\013" +
    "\001\002\000\052\016\103\017\110\020\105\021\112\022" +
    "\102\023\130\024\113\041\145\047\132\050\146\052\135" +
    "\060\136\071\140\100\151\101\152\102\141\103\134\104" +
    "\144\105\156\106\013\001\002\000\052\016\103\017\110" +
    "\020\105\021\112\022\102\023\130\024\113\041\145\047" +
    "\132\050\146\052\135\060\136\071\140\100\151\101\152" +
    "\102\141\103\134\104\144\105\156\106\013\001\002\000" +
    "\052\016\103\017\110\020\105\021\112\022\102\023\130" +
    "\024\113\041\145\047\132\050\146\052\135\060\136\071" +
    "\140\100\151\101\152\102\141\103\134\104\144\105\156" +
    "\106\013\001\002\000\004\106\013\001\002\000\004\106" +
    "\013\001\002\000\052\016\103\017\110\020\105\021\112" +
    "\022\102\023\130\024\113\041\145\047\132\050\146\052" +
    "\135\060\136\071\140\100\151\101\152\102\141\103\134" +
    "\104\144\105\156\106\013\001\002\000\052\016\103\017" +
    "\110\020\105\021\112\022\102\023\130\024\113\041\145" +
    "\047\132\050\146\052\135\060\136\071\140\100\151\101" +
    "\152\102\141\103\134\104\144\105\156\106\013\001\002" +
    "\000\052\016\103\017\110\020\105\021\112\022\102\023" +
    "\130\024\113\041\145\047\132\050\146\052\135\060\136" +
    "\071\140\100\151\101\152\102\141\103\134\104\144\105" +
    "\156\106\013\001\002\000\010\003\325\025\327\106\013" +
    "\001\002\000\054\016\103\017\110\020\105\021\112\022" +
    "\102\023\130\024\113\041\145\047\132\050\146\052\135" +
    "\060\136\071\140\074\232\100\151\101\152\102\141\103" +
    "\134\104\144\105\156\106\013\001\002\000\052\016\103" +
    "\017\110\020\105\021\112\022\102\023\130\024\113\041" +
    "\145\047\132\050\146\052\135\060\136\071\140\100\151" +
    "\101\152\102\141\103\134\104\144\105\156\106\013\001" +
    "\002\000\052\016\103\017\110\020\105\021\112\022\102" +
    "\023\130\024\113\041\145\047\132\050\146\052\135\060" +
    "\136\071\140\100\151\101\152\102\141\103\134\104\144" +
    "\105\156\106\013\001\002\000\052\016\103\017\110\020" +
    "\105\021\112\022\102\023\130\024\113\041\145\047\132" +
    "\050\146\052\135\060\136\071\140\100\151\101\152\102" +
    "\141\103\134\104\144\105\156\106\013\001\002\000\052" +
    "\016\103\017\110\020\105\021\112\022\102\023\130\024" +
    "\113\041\145\047\132\050\146\052\135\060\136\071\140" +
    "\100\151\101\152\102\141\103\134\104\144\105\156\106" +
    "\013\001\002\000\052\016\103\017\110\020\105\021\112" +
    "\022\102\023\130\024\113\041\145\047\132\050\146\052" +
    "\135\060\136\071\140\100\151\101\152\102\141\103\134" +
    "\104\144\105\156\106\013\001\002\000\010\003\210\015" +
    "\211\106\013\001\002\000\052\016\103\017\110\020\105" +
    "\021\112\022\102\023\130\024\113\041\145\047\132\050" +
    "\146\052\135\060\136\071\140\100\151\101\152\102\141" +
    "\103\134\104\144\105\156\106\013\001\002\000\052\016" +
    "\103\017\110\020\105\021\112\022\102\023\130\024\113" +
    "\041\145\047\132\050\146\052\135\060\136\071\140\100" +
    "\151\101\152\102\141\103\134\104\144\105\156\106\013" +
    "\001\002\000\052\016\103\017\110\020\105\021\112\022" +
    "\102\023\130\024\113\041\145\047\132\050\146\052\135" +
    "\060\136\071\140\100\151\101\152\102\141\103\134\104" +
    "\144\105\156\106\013\001\002\000\106\026\uff59\027\uff59" +
    "\030\uff59\031\uff59\032\203\033\162\034\161\035\170\036" +
    "\171\037\175\040\163\041\176\043\157\044\174\045\202" +
    "\046\200\051\uff59\053\uff59\054\uff59\055\uff59\056\uff59\057" +
    "\201\060\uff59\061\uff59\062\uff59\063\uff59\066\uff59\070\uff59" +
    "\071\173\072\177\074\uff59\075\uff59\076\uff59\077\172\001" +
    "\002\000\106\026\uff5d\027\uff5d\030\uff5d\031\uff5d\032\uff5d" +
    "\033\uff5d\034\161\035\170\036\171\037\175\040\163\041" +
    "\176\043\157\044\174\045\202\046\200\051\uff5d\053\uff5d" +
    "\054\uff5d\055\uff5d\056\uff5d\057\201\060\uff5d\061\uff5d\062" +
    "\uff5d\063\uff5d\066\uff5d\070\uff5d\071\173\072\177\074\uff5d" +
    "\075\uff5d\076\uff5d\077\172\001\002\000\106\026\uff66\027" +
    "\uff66\030\uff66\031\uff66\032\uff66\033\uff66\034\uff66\035\uff66" +
    "\036\uff66\037\uff66\040\uff66\041\uff66\043\uff66\044\uff66\045" +
    "\uff66\046\uff66\051\uff66\053\uff66\054\uff66\055\uff66\056\uff66" +
    "\057\201\060\uff66\061\uff66\062\uff66\063\uff66\066\uff66\070" +
    "\uff66\071\173\072\177\074\uff66\075\uff66\076\uff66\077\172" +
    "\001\002\000\106\026\uff76\027\uff76\030\uff76\031\uff76\032" +
    "\uff76\033\uff76\034\uff76\035\uff76\036\uff76\037\uff76\040\uff76" +
    "\041\uff76\043\uff76\044\uff76\045\uff76\046\uff76\051\uff76\053" +
    "\uff76\054\uff76\055\uff76\056\uff76\057\uff76\060\uff76\061\uff76" +
    "\062\uff76\063\uff76\066\uff76\070\uff76\071\uff76\072\uff76\074" +
    "\uff76\075\uff76\076\uff76\077\uff76\001\002\000\106\026\uff77" +
    "\027\uff77\030\uff77\031\uff77\032\uff77\033\uff77\034\uff77\035" +
    "\uff77\036\uff77\037\uff77\040\uff77\041\uff77\043\uff77\044\uff77" +
    "\045\uff77\046\uff77\051\uff77\053\uff77\054\uff77\055\uff77\056" +
    "\uff77\057\uff77\060\uff77\061\uff77\062\uff77\063\uff77\066\uff77" +
    "\070\uff77\071\uff77\072\uff77\074\uff77\075\uff77\076\uff77\077" +
    "\uff77\001\002\000\110\026\uff4b\027\uff4b\030\uff4b\031\uff4b" +
    "\032\uff4b\033\uff4b\034\uff4b\035\uff4b\036\uff4b\037\uff4b\040" +
    "\uff4b\041\uff4b\043\uff4b\044\uff4b\045\uff4b\046\uff4b\051\uff4b" +
    "\053\uff4b\054\uff4b\055\uff4b\056\uff4b\057\uff4b\060\uff4b\061" +
    "\uff4b\062\uff4b\063\uff4b\064\213\066\uff4b\070\uff4b\071\uff4b" +
    "\072\uff4b\074\uff4b\075\uff4b\076\uff4b\077\uff4b\001\002\000" +
    "\004\013\215\001\002\000\106\026\uff78\027\uff78\030\uff78" +
    "\031\uff78\032\uff78\033\uff78\034\uff78\035\uff78\036\uff78\037" +
    "\uff78\040\uff78\041\uff78\043\uff78\044\uff78\045\uff78\046\uff78" +
    "\051\uff78\053\uff78\054\uff78\055\uff78\056\uff78\057\uff78\060" +
    "\uff78\061\uff78\062\uff78\063\uff78\066\uff78\070\uff78\071\uff78" +
    "\072\uff78\074\uff78\075\uff78\076\uff78\077\uff78\001\002\000" +
    "\106\026\uff4a\027\uff4a\030\uff4a\031\uff4a\032\uff4a\033\uff4a" +
    "\034\uff4a\035\uff4a\036\uff4a\037\uff4a\040\uff4a\041\uff4a\043" +
    "\uff4a\044\uff4a\045\uff4a\046\uff4a\051\uff4a\053\uff4a\054\uff4a" +
    "\055\uff4a\056\uff4a\057\uff4a\060\uff4a\061\uff4a\062\uff4a\063" +
    "\uff4a\066\uff4a\070\uff4a\071\uff4a\072\uff4a\074\uff4a\075\uff4a" +
    "\076\uff4a\077\uff4a\001\002\000\106\026\uff65\027\uff65\030" +
    "\uff65\031\uff65\032\uff65\033\uff65\034\uff65\035\uff65\036\uff65" +
    "\037\uff65\040\uff65\041\uff65\043\uff65\044\uff65\045\uff65\046" +
    "\uff65\051\uff65\053\uff65\054\uff65\055\uff65\056\uff65\057\201" +
    "\060\uff65\061\uff65\062\uff65\063\uff65\066\uff65\070\uff65\071" +
    "\173\072\177\074\uff65\075\uff65\076\uff65\077\172\001\002" +
    "\000\064\026\167\027\160\030\164\031\204\032\203\033" +
    "\162\034\161\035\170\036\171\037\175\040\163\041\176" +
    "\043\157\044\174\045\202\046\200\056\uff52\057\201\063" +
    "\166\070\165\071\173\072\177\074\uff52\075\uff52\077\172" +
    "\001\002\000\006\056\221\075\222\001\002\000\052\016" +
    "\103\017\110\020\105\021\112\022\102\023\130\024\113" +
    "\041\145\047\132\050\146\052\135\060\136\071\140\100" +
    "\151\101\152\102\141\103\134\104\144\105\156\106\013" +
    "\001\002\000\110\026\uff4b\027\uff4b\030\uff4b\031\uff4b\032" +
    "\uff4b\033\uff4b\034\uff4b\035\uff4b\036\uff4b\037\uff4b\040\uff4b" +
    "\041\uff4b\043\uff4b\044\uff4b\045\uff4b\046\uff4b\051\uff4b\053" +
    "\uff4b\054\uff4b\055\uff4b\056\uff4b\057\uff4b\060\uff4b\061\uff4b" +
    "\062\uff4b\063\uff4b\064\213\066\uff4b\070\uff4b\071\uff4b\072" +
    "\uff4b\074\uff4b\075\uff4b\076\uff4b\077\uff4b\001\002\000\106" +
    "\026\uff6d\027\uff6d\030\uff6d\031\uff6d\032\uff6d\033\uff6d\034" +
    "\uff6d\035\uff6d\036\uff6d\037\uff6d\040\uff6d\041\uff6d\043\uff6d" +
    "\044\uff6d\045\uff6d\046\uff6d\051\uff6d\053\uff6d\054\uff6d\055" +
    "\uff6d\056\uff6d\057\uff6d\060\uff6d\061\uff6d\062\uff6d\063\uff6d" +
    "\066\uff6d\070\uff6d\071\uff6d\072\uff6d\074\uff6d\075\uff6d\076" +
    "\uff6d\077\uff6d\001\002\000\064\026\167\027\160\030\164" +
    "\031\204\032\203\033\162\034\161\035\170\036\171\037" +
    "\175\040\163\041\176\043\157\044\174\045\202\046\200" +
    "\056\uff51\057\201\063\166\070\165\071\173\072\177\074" +
    "\uff51\075\uff51\077\172\001\002\000\106\026\uff63\027\uff63" +
    "\030\uff63\031\uff63\032\uff63\033\uff63\034\uff63\035\uff63\036" +
    "\uff63\037\uff63\040\uff63\041\uff63\043\157\044\174\045\202" +
    "\046\200\051\uff63\053\uff63\054\uff63\055\uff63\056\uff63\057" +
    "\201\060\uff63\061\uff63\062\uff63\063\uff63\066\uff63\070\uff63" +
    "\071\173\072\177\074\uff63\075\uff63\076\uff63\077\172\001" +
    "\002\000\106\026\uff5e\027\uff5e\030\uff5e\031\uff5e\032\uff5e" +
    "\033\uff5e\034\uff5e\035\uff5e\036\uff5e\037\uff5e\040\163\041" +
    "\176\043\157\044\174\045\202\046\200\051\uff5e\053\uff5e" +
    "\054\uff5e\055\uff5e\056\uff5e\057\201\060\uff5e\061\uff5e\062" +
    "\uff5e\063\uff5e\066\uff5e\070\uff5e\071\173\072\177\074\uff5e" +
    "\075\uff5e\076\uff5e\077\172\001\002\000\106\026\uff67\027" +
    "\uff67\030\uff67\031\uff67\032\uff67\033\uff67\034\uff67\035\uff67" +
    "\036\uff67\037\uff67\040\uff67\041\uff67\043\uff67\044\uff67\045" +
    "\uff67\046\uff67\051\uff67\053\uff67\054\uff67\055\uff67\056\uff67" +
    "\057\201\060\uff67\061\uff67\062\uff67\063\uff67\066\uff67\070" +
    "\uff67\071\173\072\177\074\uff67\075\uff67\076\uff67\077\172" +
    "\001\002\000\004\062\322\001\002\000\072\026\uff31\027" +
    "\uff31\030\uff31\031\uff31\032\121\033\uff31\034\uff31\035\uff31" +
    "\036\uff31\037\uff31\040\uff31\041\uff31\043\uff31\044\uff31\045" +
    "\uff31\046\uff31\056\uff31\057\uff31\060\253\062\uff90\063\uff31" +
    "\064\uff31\067\uff31\070\uff31\071\uff31\072\uff31\074\uff31\077" +
    "\uff31\001\002\000\106\026\uff73\027\uff73\030\uff73\031\uff73" +
    "\032\uff73\033\uff73\034\uff73\035\uff73\036\uff73\037\uff73\040" +
    "\uff73\041\uff73\043\uff73\044\uff73\045\uff73\046\uff73\051\uff73" +
    "\053\uff73\054\uff73\055\uff73\056\uff73\057\uff73\060\uff73\061" +
    "\uff73\062\uff73\063\uff73\066\uff73\070\uff73\071\uff73\072\uff73" +
    "\074\uff73\075\uff73\076\uff73\077\uff73\001\002\000\064\026" +
    "\167\027\160\030\164\031\204\032\203\033\162\034\161" +
    "\035\170\036\171\037\175\040\163\041\176\043\157\044" +
    "\174\045\202\046\200\056\235\057\201\060\234\063\166" +
    "\070\165\071\173\072\177\074\236\077\172\001\002\000" +
    "\020\016\103\017\110\020\105\021\112\022\102\024\113" +
    "\106\013\001\002\000\052\016\103\017\110\020\105\021" +
    "\112\022\102\023\130\024\113\041\145\047\132\050\146" +
    "\052\135\060\136\071\140\100\151\101\152\102\141\103" +
    "\134\104\144\105\156\106\013\001\002\000\106\026\uff72" +
    "\027\uff72\030\uff72\031\uff72\032\uff72\033\uff72\034\uff72\035" +
    "\uff72\036\uff72\037\uff72\040\uff72\041\uff72\043\uff72\044\uff72" +
    "\045\uff72\046\uff72\051\uff72\053\uff72\054\uff72\055\uff72\056" +
    "\uff72\057\uff72\060\uff72\061\uff72\062\uff72\063\uff72\066\uff72" +
    "\070\uff72\071\uff72\072\uff72\074\uff72\075\uff72\076\uff72\077" +
    "\uff72\001\002\000\004\062\242\001\002\000\006\056\221" +
    "\074\241\001\002\000\106\026\uff71\027\uff71\030\uff71\031" +
    "\uff71\032\uff71\033\uff71\034\uff71\035\uff71\036\uff71\037\uff71" +
    "\040\uff71\041\uff71\043\uff71\044\uff71\045\uff71\046\uff71\051" +
    "\uff71\053\uff71\054\uff71\055\uff71\056\uff71\057\uff71\060\uff71" +
    "\061\uff71\062\uff71\063\uff71\066\uff71\070\uff71\071\uff71\072" +
    "\uff71\074\uff71\075\uff71\076\uff71\077\uff71\001\002\000\052" +
    "\016\103\017\110\020\105\021\112\022\102\023\130\024" +
    "\113\041\145\047\132\050\146\052\135\060\136\071\140" +
    "\100\151\101\152\102\141\103\134\104\144\105\156\106" +
    "\013\001\002\000\060\026\167\027\160\030\164\031\204" +
    "\032\203\033\162\034\161\035\170\036\171\037\175\040" +
    "\163\041\176\043\157\044\174\045\202\046\200\057\201" +
    "\063\166\070\165\071\173\072\177\074\244\077\172\001" +
    "\002\000\106\026\uff70\027\uff70\030\uff70\031\uff70\032\uff70" +
    "\033\uff70\034\uff70\035\uff70\036\uff70\037\uff70\040\uff70\041" +
    "\uff70\043\uff70\044\uff70\045\uff70\046\uff70\051\uff70\053\uff70" +
    "\054\uff70\055\uff70\056\uff70\057\uff70\060\uff70\061\uff70\062" +
    "\uff70\063\uff70\066\uff70\070\uff70\071\uff70\072\uff70\074\uff70" +
    "\075\uff70\076\uff70\077\uff70\001\002\000\004\056\246\001" +
    "\002\000\004\106\013\001\002\000\004\062\250\001\002" +
    "\000\052\016\103\017\110\020\105\021\112\022\102\023" +
    "\130\024\113\041\145\047\132\050\146\052\135\060\136" +
    "\071\140\100\151\101\152\102\141\103\134\104\144\105" +
    "\156\106\013\001\002\000\060\026\167\027\160\030\164" +
    "\031\204\032\203\033\162\034\161\035\170\036\171\037" +
    "\175\040\163\041\176\043\157\044\174\045\202\046\200" +
    "\057\201\063\166\070\165\071\173\072\177\074\252\077" +
    "\172\001\002\000\106\026\uff6f\027\uff6f\030\uff6f\031\uff6f" +
    "\032\uff6f\033\uff6f\034\uff6f\035\uff6f\036\uff6f\037\uff6f\040" +
    "\uff6f\041\uff6f\043\uff6f\044\uff6f\045\uff6f\046\uff6f\051\uff6f" +
    "\053\uff6f\054\uff6f\055\uff6f\056\uff6f\057\uff6f\060\uff6f\061" +
    "\uff6f\062\uff6f\063\uff6f\066\uff6f\070\uff6f\071\uff6f\072\uff6f" +
    "\074\uff6f\075\uff6f\076\uff6f\077\uff6f\001\002\000\020\016" +
    "\103\017\110\020\105\021\112\022\102\024\113\106\013" +
    "\001\002\000\004\071\267\001\002\000\010\032\124\062" +
    "\uff92\073\256\001\002\000\010\056\uffd6\076\uffd6\106\013" +
    "\001\002\000\006\056\uffd5\076\uffd5\001\002\000\006\056" +
    "\264\076\265\001\002\000\004\032\262\001\002\000\052" +
    "\016\103\017\110\020\105\021\112\022\102\023\130\024" +
    "\113\041\145\047\132\050\146\052\135\060\136\071\140" +
    "\100\151\101\152\102\141\103\134\104\144\105\156\106" +
    "\013\001\002\000\062\026\167\027\160\030\164\031\204" +
    "\032\203\033\162\034\161\035\170\036\171\037\175\040" +
    "\163\041\176\043\157\044\174\045\202\046\200\056\uff86" +
    "\057\201\063\166\070\165\071\173\072\177\076\uff86\077" +
    "\172\001\002\000\004\106\013\001\002\000\110\026\uff87" +
    "\027\uff87\030\uff87\031\uff87\032\uff87\033\uff87\034\uff87\035" +
    "\uff87\036\uff87\037\uff87\040\uff87\041\uff87\043\uff87\044\uff87" +
    "\045\uff87\046\uff87\051\uff87\053\uff87\054\uff87\055\uff87\056" +
    "\uff87\057\uff87\060\uff87\061\uff87\062\uff87\063\uff87\066\uff87" +
    "\070\uff87\071\uff87\072\uff87\074\uff87\075\uff87\076\uff87\077" +
    "\uff87\125\uff87\001\002\000\006\056\uffd4\076\uffd4\001\002" +
    "\000\020\016\103\017\110\020\105\021\112\022\102\024" +
    "\113\106\013\001\002\000\004\074\271\001\002\000\010" +
    "\032\uff8c\062\uff8c\073\uff8c\001\002\000\052\016\103\017" +
    "\110\020\105\021\112\022\102\023\130\024\113\041\145" +
    "\047\132\050\146\052\135\060\136\071\140\100\151\101" +
    "\152\102\141\103\134\104\144\105\156\106\013\001\002" +
    "\000\066\026\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a\033" +
    "\uff8a\034\uff8a\035\uff8a\036\uff8a\037\uff8a\040\uff8a\041\uff8a" +
    "\043\uff8a\044\uff8a\045\uff8a\046\uff8a\056\uff8a\057\uff8a\062" +
    "\316\063\uff8a\070\uff8a\071\uff8a\072\uff8a\076\uff8a\077\uff8a" +
    "\125\317\001\002\000\006\056\uff82\076\uff82\001\002\000" +
    "\074\026\uff31\027\uff31\030\uff31\031\uff31\032\uff31\033\uff31" +
    "\034\uff31\035\uff31\036\uff31\037\uff31\040\uff31\041\uff31\043" +
    "\uff31\044\uff31\045\uff31\046\uff31\056\uff31\057\uff31\060\310" +
    "\062\306\063\uff31\064\uff31\067\uff31\070\uff31\071\uff31\072" +
    "\uff31\076\uff31\077\uff31\125\307\001\002\000\006\056\uff82" +
    "\076\uff82\001\002\000\062\026\167\027\160\030\164\031" +
    "\204\032\203\033\162\034\161\035\170\036\171\037\175" +
    "\040\163\041\176\043\157\044\174\045\202\046\200\056" +
    "\uff82\057\201\063\166\070\165\071\173\072\177\076\uff82" +
    "\077\172\001\002\000\006\056\301\076\302\001\002\000" +
    "\052\016\103\017\110\020\105\021\112\022\102\023\130" +
    "\024\113\041\145\047\132\050\146\052\135\060\136\071" +
    "\140\100\151\101\152\102\141\103\134\104\144\105\156" +
    "\106\013\001\002\000\106\026\uff83\027\uff83\030\uff83\031" +
    "\uff83\032\uff83\033\uff83\034\uff83\035\uff83\036\uff83\037\uff83" +
    "\040\uff83\041\uff83\043\uff83\044\uff83\045\uff83\046\uff83\051" +
    "\uff83\053\uff83\054\uff83\055\uff83\056\uff83\057\uff83\060\uff83" +
    "\061\uff83\062\uff83\063\uff83\066\uff83\070\uff83\071\uff83\072" +
    "\uff83\074\uff83\075\uff83\076\uff83\077\uff83\001\002\000\062" +
    "\026\167\027\160\030\164\031\204\032\203\033\162\034" +
    "\161\035\170\036\171\037\175\040\163\041\176\043\157" +
    "\044\174\045\202\046\200\056\uff81\057\201\063\166\070" +
    "\165\071\173\072\177\076\uff81\077\172\001\002\000\006" +
    "\056\301\076\305\001\002\000\106\026\uff85\027\uff85\030" +
    "\uff85\031\uff85\032\uff85\033\uff85\034\uff85\035\uff85\036\uff85" +
    "\037\uff85\040\uff85\041\uff85\043\uff85\044\uff85\045\uff85\046" +
    "\uff85\051\uff85\053\uff85\054\uff85\055\uff85\056\uff85\057\uff85" +
    "\060\uff85\061\uff85\062\uff85\063\uff85\066\uff85\070\uff85\071" +
    "\uff85\072\uff85\074\uff85\075\uff85\076\uff85\077\uff85\001\002" +
    "\000\052\016\103\017\110\020\105\021\112\022\102\023" +
    "\130\024\113\041\145\047\132\050\146\052\135\060\136" +
    "\071\140\100\151\101\152\102\141\103\134\104\144\105" +
    "\156\106\013\001\002\000\004\106\013\001\002\000\020" +
    "\016\103\017\110\020\105\021\112\022\102\024\113\106" +
    "\013\001\002\000\004\073\256\001\002\000\006\056\uff7e" +
    "\076\uff7e\001\002\000\062\026\167\027\160\030\164\031" +
    "\204\032\203\033\162\034\161\035\170\036\171\037\175" +
    "\040\163\041\176\043\157\044\174\045\202\046\200\056" +
    "\uff80\057\201\063\166\070\165\071\173\072\177\076\uff80" +
    "\077\172\001\002\000\006\056\301\076\315\001\002\000" +
    "\106\026\uff84\027\uff84\030\uff84\031\uff84\032\uff84\033\uff84" +
    "\034\uff84\035\uff84\036\uff84\037\uff84\040\uff84\041\uff84\043" +
    "\uff84\044\uff84\045\uff84\046\uff84\051\uff84\053\uff84\054\uff84" +
    "\055\uff84\056\uff84\057\uff84\060\uff84\061\uff84\062\uff84\063" +
    "\uff84\066\uff84\070\uff84\071\uff84\072\uff84\074\uff84\075\uff84" +
    "\076\uff84\077\uff84\001\002\000\052\016\103\017\110\020" +
    "\105\021\112\022\102\023\130\024\113\041\145\047\132" +
    "\050\146\052\135\060\136\071\140\100\151\101\152\102" +
    "\141\103\134\104\144\105\156\106\013\001\002\000\004" +
    "\106\013\001\002\000\006\056\uff7d\076\uff7d\001\002\000" +
    "\062\026\167\027\160\030\164\031\204\032\203\033\162" +
    "\034\161\035\170\036\171\037\175\040\163\041\176\043" +
    "\157\044\174\045\202\046\200\056\uff7f\057\201\063\166" +
    "\070\165\071\173\072\177\076\uff7f\077\172\001\002\000" +
    "\052\016\103\017\110\020\105\021\112\022\102\023\130" +
    "\024\113\041\145\047\132\050\146\052\135\060\136\071" +
    "\140\100\151\101\152\102\141\103\134\104\144\105\156" +
    "\106\013\001\002\000\060\026\167\027\160\030\164\031" +
    "\204\032\203\033\162\034\161\035\170\036\171\037\175" +
    "\040\163\041\176\043\157\044\174\045\202\046\200\057" +
    "\201\063\166\070\165\071\173\072\177\074\324\077\172" +
    "\001\002\000\106\026\uff6e\027\uff6e\030\uff6e\031\uff6e\032" +
    "\uff6e\033\uff6e\034\uff6e\035\uff6e\036\uff6e\037\uff6e\040\uff6e" +
    "\041\uff6e\043\uff6e\044\uff6e\045\uff6e\046\uff6e\051\uff6e\053" +
    "\uff6e\054\uff6e\055\uff6e\056\uff6e\057\uff6e\060\uff6e\061\uff6e" +
    "\062\uff6e\063\uff6e\066\uff6e\070\uff6e\071\uff6e\072\uff6e\074" +
    "\uff6e\075\uff6e\076\uff6e\077\uff6e\001\002\000\106\026\uff74" +
    "\027\uff74\030\uff74\031\uff74\032\uff74\033\uff74\034\uff74\035" +
    "\uff74\036\uff74\037\uff74\040\uff74\041\uff74\043\uff74\044\uff74" +
    "\045\uff74\046\uff74\051\uff74\053\uff74\054\uff74\055\uff74\056" +
    "\uff74\057\uff74\060\uff74\061\uff74\062\uff74\063\uff74\066\uff74" +
    "\070\uff74\071\uff74\072\uff74\074\uff74\075\uff74\076\uff74\077" +
    "\uff74\001\002\000\106\026\uff75\027\uff75\030\uff75\031\uff75" +
    "\032\uff75\033\uff75\034\uff75\035\uff75\036\uff75\037\uff75\040" +
    "\uff75\041\uff75\043\uff75\044\uff75\045\uff75\046\uff75\051\uff75" +
    "\053\uff75\054\uff75\055\uff75\056\uff75\057\uff75\060\uff75\061" +
    "\uff75\062\uff75\063\uff75\066\uff75\070\uff75\071\uff75\072\uff75" +
    "\074\uff75\075\uff75\076\uff75\077\uff75\001\002\000\004\071" +
    "\330\001\002\000\004\106\013\001\002\000\006\061\332" +
    "\062\333\001\002\000\004\106\013\001\002\000\052\016" +
    "\103\017\110\020\105\021\112\022\102\023\130\024\113" +
    "\041\145\047\132\050\146\052\135\060\136\071\140\100" +
    "\151\101\152\102\141\103\134\104\144\105\156\106\013" +
    "\001\002\000\060\026\167\027\160\030\164\031\204\032" +
    "\203\033\162\034\161\035\170\036\171\037\175\040\163" +
    "\041\176\043\157\044\174\045\202\046\200\057\201\063" +
    "\166\070\165\071\173\072\177\074\335\077\172\001\002" +
    "\000\106\026\uff6b\027\uff6b\030\uff6b\031\uff6b\032\uff6b\033" +
    "\uff6b\034\uff6b\035\uff6b\036\uff6b\037\uff6b\040\uff6b\041\uff6b" +
    "\043\uff6b\044\uff6b\045\uff6b\046\uff6b\051\uff6b\053\uff6b\054" +
    "\uff6b\055\uff6b\056\uff6b\057\uff6b\060\uff6b\061\uff6b\062\uff6b" +
    "\063\uff6b\066\uff6b\070\uff6b\071\uff6b\072\uff6b\074\uff6b\075" +
    "\uff6b\076\uff6b\077\uff6b\001\002\000\004\062\337\001\002" +
    "\000\052\016\103\017\110\020\105\021\112\022\102\023" +
    "\130\024\113\041\145\047\132\050\146\052\135\060\136" +
    "\071\140\100\151\101\152\102\141\103\134\104\144\105" +
    "\156\106\013\001\002\000\060\026\167\027\160\030\164" +
    "\031\204\032\203\033\162\034\161\035\170\036\171\037" +
    "\175\040\163\041\176\043\157\044\174\045\202\046\200" +
    "\057\201\063\166\070\165\071\173\072\177\074\341\077" +
    "\172\001\002\000\106\026\uff6c\027\uff6c\030\uff6c\031\uff6c" +
    "\032\uff6c\033\uff6c\034\uff6c\035\uff6c\036\uff6c\037\uff6c\040" +
    "\uff6c\041\uff6c\043\uff6c\044\uff6c\045\uff6c\046\uff6c\051\uff6c" +
    "\053\uff6c\054\uff6c\055\uff6c\056\uff6c\057\uff6c\060\uff6c\061" +
    "\uff6c\062\uff6c\063\uff6c\066\uff6c\070\uff6c\071\uff6c\072\uff6c" +
    "\074\uff6c\075\uff6c\076\uff6c\077\uff6c\001\002\000\106\026" +
    "\uff5f\027\uff5f\030\uff5f\031\uff5f\032\uff5f\033\uff5f\034\uff5f" +
    "\035\uff5f\036\uff5f\037\uff5f\040\163\041\176\043\157\044" +
    "\174\045\202\046\200\051\uff5f\053\uff5f\054\uff5f\055\uff5f" +
    "\056\uff5f\057\201\060\uff5f\061\uff5f\062\uff5f\063\uff5f\066" +
    "\uff5f\070\uff5f\071\173\072\177\074\uff5f\075\uff5f\076\uff5f" +
    "\077\172\001\002\000\106\026\uff60\027\uff60\030\uff60\031" +
    "\uff60\032\uff60\033\uff60\034\uff60\035\uff60\036\uff60\037\uff60" +
    "\040\163\041\176\043\157\044\174\045\202\046\200\051" +
    "\uff60\053\uff60\054\uff60\055\uff60\056\uff60\057\201\060\uff60" +
    "\061\uff60\062\uff60\063\uff60\066\uff60\070\uff60\071\173\072" +
    "\177\074\uff60\075\uff60\076\uff60\077\172\001\002\000\106" +
    "\026\uff58\027\160\030\164\031\204\032\203\033\162\034" +
    "\161\035\170\036\171\037\175\040\163\041\176\043\157" +
    "\044\174\045\202\046\200\051\uff58\053\uff58\054\uff58\055" +
    "\uff58\056\uff58\057\201\060\uff58\061\uff58\062\uff58\063\uff58" +
    "\066\uff58\070\uff58\071\173\072\177\074\uff58\075\uff58\076" +
    "\uff58\077\172\001\002\000\004\071\346\001\002\000\056" +
    "\016\103\017\110\020\105\021\112\022\102\023\130\024" +
    "\113\041\145\047\132\050\146\052\135\060\136\065\351" +
    "\071\140\074\350\100\151\101\152\102\141\103\134\104" +
    "\144\105\156\106\013\001\002\000\062\026\167\027\160" +
    "\030\164\031\204\032\203\033\162\034\161\035\170\036" +
    "\171\037\175\040\163\041\176\043\157\044\174\045\202" +
    "\046\200\056\uff4c\057\201\063\166\070\165\071\173\072" +
    "\177\074\uff4c\077\172\001\002\000\106\026\uff53\027\uff53" +
    "\030\uff53\031\uff53\032\uff53\033\uff53\034\uff53\035\uff53\036" +
    "\uff53\037\uff53\040\uff53\041\uff53\043\uff53\044\uff53\045\uff53" +
    "\046\uff53\051\uff53\053\uff53\054\uff53\055\uff53\056\uff53\057" +
    "\uff53\060\uff53\061\uff53\062\uff53\063\uff53\066\uff53\070\uff53" +
    "\071\uff53\072\uff53\074\uff53\075\uff53\076\uff53\077\uff53\001" +
    "\002\000\010\056\uff4e\060\357\074\uff4e\001\002\000\006" +
    "\056\354\074\355\001\002\000\006\056\uff50\074\uff50\001" +
    "\002\000\054\016\103\017\110\020\105\021\112\022\102" +
    "\023\130\024\113\041\145\047\132\050\146\052\135\060" +
    "\136\065\351\071\140\100\151\101\152\102\141\103\134" +
    "\104\144\105\156\106\013\001\002\000\106\026\uff54\027" +
    "\uff54\030\uff54\031\uff54\032\uff54\033\uff54\034\uff54\035\uff54" +
    "\036\uff54\037\uff54\040\uff54\041\uff54\043\uff54\044\uff54\045" +
    "\uff54\046\uff54\051\uff54\053\uff54\054\uff54\055\uff54\056\uff54" +
    "\057\uff54\060\uff54\061\uff54\062\uff54\063\uff54\066\uff54\070" +
    "\uff54\071\uff54\072\uff54\074\uff54\075\uff54\076\uff54\077\uff54" +
    "\001\002\000\006\056\uff4f\074\uff4f\001\002\000\020\016" +
    "\103\017\110\020\105\021\112\022\102\024\113\106\013" +
    "\001\002\000\006\056\uff4d\074\uff4d\001\002\000\004\071" +
    "\362\001\002\000\056\016\103\017\110\020\105\021\112" +
    "\022\102\023\130\024\113\041\145\047\132\050\146\052" +
    "\135\060\136\065\351\071\140\074\363\100\151\101\152" +
    "\102\141\103\134\104\144\105\156\106\013\001\002\000" +
    "\106\026\uff55\027\uff55\030\uff55\031\uff55\032\uff55\033\uff55" +
    "\034\uff55\035\uff55\036\uff55\037\uff55\040\uff55\041\uff55\043" +
    "\uff55\044\uff55\045\uff55\046\uff55\051\uff55\053\uff55\054\uff55" +
    "\055\uff55\056\uff55\057\uff55\060\uff55\061\uff55\062\uff55\063" +
    "\uff55\066\uff55\070\uff55\071\uff55\072\uff55\074\uff55\075\uff55" +
    "\076\uff55\077\uff55\001\002\000\006\056\354\074\365\001" +
    "\002\000\106\026\uff56\027\uff56\030\uff56\031\uff56\032\uff56" +
    "\033\uff56\034\uff56\035\uff56\036\uff56\037\uff56\040\uff56\041" +
    "\uff56\043\uff56\044\uff56\045\uff56\046\uff56\051\uff56\053\uff56" +
    "\054\uff56\055\uff56\056\uff56\057\uff56\060\uff56\061\uff56\062" +
    "\uff56\063\uff56\066\uff56\070\uff56\071\uff56\072\uff56\074\uff56" +
    "\075\uff56\076\uff56\077\uff56\001\002\000\106\026\uff5a\027" +
    "\uff5a\030\uff5a\031\uff5a\032\203\033\162\034\161\035\170" +
    "\036\171\037\175\040\163\041\176\043\157\044\174\045" +
    "\202\046\200\051\uff5a\053\uff5a\054\uff5a\055\uff5a\056\uff5a" +
    "\057\201\060\uff5a\061\uff5a\062\uff5a\063\uff5a\066\uff5a\070" +
    "\uff5a\071\173\072\177\074\uff5a\075\uff5a\076\uff5a\077\172" +
    "\001\002\000\106\026\uff64\027\uff64\030\uff64\031\uff64\032" +
    "\uff64\033\uff64\034\uff64\035\uff64\036\uff64\037\uff64\040\uff64" +
    "\041\uff64\043\157\044\174\045\202\046\200\051\uff64\053" +
    "\uff64\054\uff64\055\uff64\056\uff64\057\201\060\uff64\061\uff64" +
    "\062\uff64\063\uff64\066\uff64\070\uff64\071\173\072\177\074" +
    "\uff64\075\uff64\076\uff64\077\172\001\002\000\106\026\uff5c" +
    "\027\uff5c\030\uff5c\031\uff5c\032\uff5c\033\uff5c\034\161\035" +
    "\170\036\171\037\175\040\163\041\176\043\157\044\174" +
    "\045\202\046\200\051\uff5c\053\uff5c\054\uff5c\055\uff5c\056" +
    "\uff5c\057\201\060\uff5c\061\uff5c\062\uff5c\063\uff5c\066\uff5c" +
    "\070\uff5c\071\173\072\177\074\uff5c\075\uff5c\076\uff5c\077" +
    "\172\001\002\000\106\026\uff61\027\uff61\030\uff61\031\uff61" +
    "\032\uff61\033\uff61\034\uff61\035\uff61\036\uff61\037\uff61\040" +
    "\163\041\176\043\157\044\174\045\202\046\200\051\uff61" +
    "\053\uff61\054\uff61\055\uff61\056\uff61\057\201\060\uff61\061" +
    "\uff61\062\uff61\063\uff61\066\uff61\070\uff61\071\173\072\177" +
    "\074\uff61\075\uff61\076\uff61\077\172\001\002\000\106\026" +
    "\uff5b\027\uff5b\030\uff5b\031\uff5b\032\203\033\162\034\161" +
    "\035\170\036\171\037\175\040\163\041\176\043\157\044" +
    "\174\045\202\046\200\051\uff5b\053\uff5b\054\uff5b\055\uff5b" +
    "\056\uff5b\057\201\060\uff5b\061\uff5b\062\uff5b\063\uff5b\066" +
    "\uff5b\070\uff5b\071\173\072\177\074\uff5b\075\uff5b\076\uff5b" +
    "\077\172\001\002\000\106\026\uff68\027\uff68\030\uff68\031" +
    "\uff68\032\uff68\033\uff68\034\uff68\035\uff68\036\uff68\037\uff68" +
    "\040\uff68\041\uff68\043\uff68\044\uff68\045\uff68\046\uff68\051" +
    "\uff68\053\uff68\054\uff68\055\uff68\056\uff68\057\201\060\uff68" +
    "\061\uff68\062\uff68\063\uff68\066\uff68\070\uff68\071\173\072" +
    "\177\074\uff68\075\uff68\076\uff68\077\172\001\002\000\106" +
    "\026\uff79\027\uff79\030\uff79\031\uff79\032\uff79\033\uff79\034" +
    "\uff79\035\uff79\036\uff79\037\uff79\040\uff79\041\uff79\043\uff79" +
    "\044\uff79\045\uff79\046\uff79\051\uff79\053\uff79\054\uff79\055" +
    "\uff79\056\uff79\057\uff79\060\uff79\061\uff79\062\uff79\063\uff79" +
    "\066\uff79\070\uff79\071\uff79\072\uff79\074\uff79\075\uff79\076" +
    "\uff79\077\uff79\001\002\000\006\051\377\056\376\001\002" +
    "\000\004\106\013\001\002\000\052\016\103\017\110\020" +
    "\105\021\112\022\102\023\130\024\113\041\145\047\132" +
    "\050\146\052\135\060\136\071\140\100\151\101\152\102" +
    "\141\103\134\104\144\105\156\106\013\001\002\000\106" +
    "\026\167\027\160\030\164\031\204\032\203\033\162\034" +
    "\161\035\170\036\171\037\175\040\163\041\176\043\157" +
    "\044\174\045\202\046\200\051\uff57\053\uff57\054\uff57\055" +
    "\uff57\056\uff57\057\201\060\uff57\061\uff57\062\uff57\063\166" +
    "\066\uff57\070\165\071\173\072\177\074\uff57\075\uff57\076" +
    "\uff57\077\172\001\002\000\012\051\uff94\056\uff94\074\uff94" +
    "\076\uff94\001\002\000\106\026\uff69\027\uff69\030\uff69\031" +
    "\uff69\032\uff69\033\uff69\034\uff69\035\uff69\036\uff69\037\uff69" +
    "\040\uff69\041\uff69\043\uff69\044\uff69\045\uff69\046\uff69\051" +
    "\uff69\053\uff69\054\uff69\055\uff69\056\uff69\057\201\060\uff69" +
    "\061\uff69\062\uff69\063\uff69\066\uff69\070\uff69\071\173\072" +
    "\177\074\uff69\075\uff69\076\uff69\077\172\001\002\000\060" +
    "\026\167\027\160\030\164\031\204\032\203\033\162\034" +
    "\161\035\170\036\171\037\175\040\163\041\176\043\157" +
    "\044\174\045\202\046\200\057\201\063\166\070\165\071" +
    "\173\072\177\074\u0104\077\172\001\002\000\106\026\uff7a" +
    "\027\uff7a\030\uff7a\031\uff7a\032\uff7a\033\uff7a\034\uff7a\035" +
    "\uff7a\036\uff7a\037\uff7a\040\uff7a\041\uff7a\043\uff7a\044\uff7a" +
    "\045\uff7a\046\uff7a\051\uff7a\053\uff7a\054\uff7a\055\uff7a\056" +
    "\uff7a\057\uff7a\060\uff7a\061\uff7a\062\uff7a\063\uff7a\066\uff7a" +
    "\070\uff7a\071\uff7a\072\uff7a\074\uff7a\075\uff7a\076\uff7a\077" +
    "\uff7a\001\002\000\004\073\u0106\001\002\000\010\056\uffd6" +
    "\076\uffd6\106\013\001\002\000\006\056\264\076\u0108\001" +
    "\002\000\110\026\uff88\027\uff88\030\uff88\031\uff88\032\uff88" +
    "\033\uff88\034\uff88\035\uff88\036\uff88\037\uff88\040\uff88\041" +
    "\uff88\043\uff88\044\uff88\045\uff88\046\uff88\051\uff88\053\uff88" +
    "\054\uff88\055\uff88\056\uff88\057\uff88\060\uff88\061\uff88\062" +
    "\uff88\063\uff88\066\uff88\070\uff88\071\uff88\072\uff88\074\uff88" +
    "\075\uff88\076\uff88\077\uff88\125\uff88\001\002\000\060\026" +
    "\167\027\160\030\164\031\204\032\203\033\162\034\161" +
    "\035\170\036\171\037\175\040\163\041\176\043\157\044" +
    "\174\045\202\046\200\053\u010a\057\201\063\166\070\165" +
    "\071\173\072\177\077\172\001\002\000\052\016\103\017" +
    "\110\020\105\021\112\022\102\023\130\024\113\041\145" +
    "\047\132\050\146\052\135\060\136\071\140\100\151\101" +
    "\152\102\141\103\134\104\144\105\156\106\013\001\002" +
    "\000\060\026\167\027\160\030\164\031\204\032\203\033" +
    "\162\034\161\035\170\036\171\037\175\040\163\041\176" +
    "\043\157\044\174\045\202\046\200\054\u010c\057\201\063" +
    "\166\070\165\071\173\072\177\077\172\001\002\000\052" +
    "\016\103\017\110\020\105\021\112\022\102\023\130\024" +
    "\113\041\145\047\132\050\146\052\135\060\136\071\140" +
    "\100\151\101\152\102\141\103\134\104\144\105\156\106" +
    "\013\001\002\000\060\026\167\027\160\030\164\031\204" +
    "\032\203\033\162\034\161\035\170\036\171\037\175\040" +
    "\163\041\176\043\157\044\174\045\202\046\200\055\u010e" +
    "\057\201\063\166\070\165\071\173\072\177\077\172\001" +
    "\002\000\106\026\uff62\027\uff62\030\uff62\031\uff62\032\uff62" +
    "\033\uff62\034\uff62\035\uff62\036\uff62\037\uff62\040\uff62\041" +
    "\uff62\043\uff62\044\uff62\045\uff62\046\uff62\051\uff62\053\uff62" +
    "\054\uff62\055\uff62\056\uff62\057\uff62\060\uff62\061\uff62\062" +
    "\uff62\063\uff62\066\uff62\070\uff62\071\uff62\072\uff62\074\uff62" +
    "\075\uff62\076\uff62\077\uff62\001\002\000\020\016\103\017" +
    "\110\020\105\021\112\022\102\024\113\106\013\001\002" +
    "\000\054\016\103\017\110\020\105\021\112\022\102\023" +
    "\130\024\113\041\145\047\132\050\146\052\135\060\136" +
    "\071\140\076\u0115\100\151\101\152\102\141\103\134\104" +
    "\144\105\156\106\013\001\002\000\064\026\167\027\160" +
    "\030\164\031\204\032\203\033\162\034\161\035\170\036" +
    "\171\037\175\040\163\041\176\043\157\044\174\045\202" +
    "\046\200\056\uff3b\057\201\063\166\066\u0119\070\165\071" +
    "\173\072\177\076\uff3b\077\172\001\002\000\006\056\u0117" +
    "\076\u0116\001\002\000\006\056\uff3d\076\uff3d\001\002\000" +
    "\006\056\uff3a\076\uff3a\001\002\000\106\026\uff43\027\uff43" +
    "\030\uff43\031\uff43\032\uff43\033\uff43\034\uff43\035\uff43\036" +
    "\uff43\037\uff43\040\uff43\041\uff43\043\uff43\044\uff43\045\uff43" +
    "\046\uff43\051\uff43\053\uff43\054\uff43\055\uff43\056\uff43\057" +
    "\uff43\060\uff43\061\uff43\062\uff43\063\uff43\066\uff43\070\uff43" +
    "\071\uff43\072\uff43\074\uff43\075\uff43\076\uff43\077\uff43\001" +
    "\002\000\106\026\uff44\027\uff44\030\uff44\031\uff44\032\uff44" +
    "\033\uff44\034\uff44\035\uff44\036\uff44\037\uff44\040\uff44\041" +
    "\uff44\043\uff44\044\uff44\045\uff44\046\uff44\051\uff44\053\uff44" +
    "\054\uff44\055\uff44\056\uff44\057\uff44\060\uff44\061\uff44\062" +
    "\uff44\063\uff44\066\uff44\070\uff44\071\uff44\072\uff44\074\uff44" +
    "\075\uff44\076\uff44\077\uff44\001\002\000\052\016\103\017" +
    "\110\020\105\021\112\022\102\023\130\024\113\041\145" +
    "\047\132\050\146\052\135\060\136\071\140\100\151\101" +
    "\152\102\141\103\134\104\144\105\156\106\013\001\002" +
    "\000\006\056\uff3c\076\uff3c\001\002\000\052\016\103\017" +
    "\110\020\105\021\112\022\102\023\130\024\113\041\145" +
    "\047\132\050\146\052\135\060\136\071\140\100\151\101" +
    "\152\102\141\103\134\104\144\105\156\106\013\001\002" +
    "\000\062\026\167\027\160\030\164\031\204\032\203\033" +
    "\162\034\161\035\170\036\171\037\175\040\163\041\176" +
    "\043\157\044\174\045\202\046\200\056\uff39\057\201\063" +
    "\166\070\165\071\173\072\177\076\uff39\077\172\001\002" +
    "\000\004\074\u011c\001\002\000\110\026\uff8c\027\uff8c\030" +
    "\uff8c\031\uff8c\032\uff8c\033\uff8c\034\uff8c\035\uff8c\036\uff8c" +
    "\037\uff8c\040\uff8c\041\uff8c\043\uff8c\044\uff8c\045\uff8c\046" +
    "\uff8c\051\uff8c\053\uff8c\054\uff8c\055\uff8c\056\uff8c\057\uff8c" +
    "\060\uff8c\061\uff8c\062\uff8c\063\uff8c\066\uff8c\070\uff8c\071" +
    "\uff8c\072\uff8c\073\uff8c\074\uff8c\075\uff8c\076\uff8c\077\uff8c" +
    "\001\002\000\106\026\uff6a\027\uff6a\030\uff6a\031\uff6a\032" +
    "\uff6a\033\uff6a\034\uff6a\035\uff6a\036\uff6a\037\uff6a\040\uff6a" +
    "\041\uff6a\043\uff6a\044\uff6a\045\uff6a\046\uff6a\051\uff6a\053" +
    "\uff6a\054\uff6a\055\uff6a\056\uff6a\057\201\060\uff6a\061\uff6a" +
    "\062\uff6a\063\uff6a\066\uff6a\070\uff6a\071\173\072\177\074" +
    "\uff6a\075\uff6a\076\uff6a\077\172\001\002\000\004\106\013" +
    "\001\002\000\006\056\376\076\u0120\001\002\000\106\026" +
    "\uff38\027\uff38\030\uff38\031\uff38\032\uff38\033\uff38\034\uff38" +
    "\035\uff38\036\uff38\037\uff38\040\uff38\041\uff38\043\uff38\044" +
    "\uff38\045\uff38\046\uff38\051\uff38\053\uff38\054\uff38\055\uff38" +
    "\056\uff38\057\uff38\060\uff38\061\uff38\062\uff38\063\uff38\066" +
    "\uff38\070\uff38\071\uff38\072\uff38\074\uff38\075\uff38\076\uff38" +
    "\077\uff38\001\002\000\072\026\167\027\160\030\164\031" +
    "\204\032\203\033\162\034\161\035\170\036\171\037\175" +
    "\040\163\041\176\043\157\044\174\045\202\046\200\051" +
    "\uff91\056\uff91\057\201\061\uff91\062\uff91\063\166\070\165" +
    "\071\173\072\177\074\uff91\076\uff91\077\172\001\002\000" +
    "\110\026\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b\033\uff8b" +
    "\034\uff8b\035\uff8b\036\uff8b\037\uff8b\040\uff8b\041\uff8b\043" +
    "\uff8b\044\uff8b\045\uff8b\046\uff8b\051\uff8b\053\uff8b\054\uff8b" +
    "\055\uff8b\056\uff8b\057\uff8b\060\uff8b\061\uff8b\062\uff8b\063" +
    "\uff8b\066\uff8b\070\uff8b\071\uff8b\072\uff8b\073\uff8b\074\uff8b" +
    "\075\uff8b\076\uff8b\077\uff8b\001\002\000\016\076\uffd3\120" +
    "\uffd3\121\uffd3\122\uffd3\123\uffd3\124\uffd3\001\002\000\004" +
    "\106\013\001\002\000\006\060\uffd8\106\013\001\002\000" +
    "\004\060\uffd7\001\002\000\004\060\u0128\001\002\000\020" +
    "\016\103\017\110\020\105\021\112\022\102\024\113\106" +
    "\013\001\002\000\004\073\u012a\001\002\000\010\056\uffd6" +
    "\076\uffd6\106\013\001\002\000\006\056\264\076\u012c\001" +
    "\002\000\010\061\uffdc\073\u012d\117\uffdc\001\002\000\052" +
    "\016\103\017\110\020\105\021\112\022\102\023\130\024" +
    "\113\041\145\047\132\050\146\052\135\060\136\071\140" +
    "\100\151\101\152\102\141\103\134\104\144\105\156\106" +
    "\013\001\002\000\006\061\uffda\117\u012f\001\002\000\052" +
    "\016\103\017\110\020\105\021\112\022\102\023\130\024" +
    "\113\041\145\047\132\050\146\052\135\060\136\071\140" +
    "\100\151\101\152\102\141\103\134\104\144\105\156\106" +
    "\013\001\002\000\004\061\u0131\001\002\000\016\076\uffdd" +
    "\120\uffdd\121\uffdd\122\uffdd\123\uffdd\124\uffdd\001\002\000" +
    "\060\026\167\027\160\030\164\031\204\032\203\033\162" +
    "\034\161\035\170\036\171\037\175\040\163\041\176\043" +
    "\157\044\174\045\202\046\200\057\201\061\uffd9\063\166" +
    "\070\165\071\173\072\177\077\172\001\002\000\060\026" +
    "\167\027\160\030\164\031\204\032\203\033\162\034\161" +
    "\035\170\036\171\037\175\040\163\041\176\043\157\044" +
    "\174\045\202\046\200\057\201\063\166\070\165\071\173" +
    "\072\177\076\u0134\077\172\001\002\000\006\061\uffdb\117" +
    "\uffdb\001\002\000\006\076\uffce\124\u0142\001\002\000\004" +
    "\073\u0139\001\002\000\016\076\uffe6\120\uffe6\121\uffe6\122" +
    "\uffe6\123\uffe6\124\uffe6\001\002\000\016\076\uffe5\120\uffe5" +
    "\121\uffe5\122\uffe5\123\uffe5\124\uffe5\001\002\000\056\003" +
    "\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc" +
    "\024\uffcc\041\uffcc\047\uffcc\050\uffcc\052\uffcc\060\uffcc\071" +
    "\uffcc\076\uffcc\100\uffcc\101\uffcc\102\uffcc\103\uffcc\104\uffcc" +
    "\105\uffcc\106\uffcc\001\002\000\056\003\u013d\016\103\017" +
    "\110\020\105\021\112\022\102\023\130\024\113\041\145" +
    "\047\132\050\146\052\135\060\136\071\140\076\u013e\100" +
    "\151\101\152\102\141\103\134\104\144\105\156\106\013" +
    "\001\002\000\060\026\167\027\160\030\164\031\204\032" +
    "\203\033\162\034\161\035\170\036\171\037\175\040\163" +
    "\041\176\043\157\044\174\045\202\046\200\057\201\061" +
    "\u0140\063\166\070\165\071\173\072\177\077\172\001\002" +
    "\000\056\003\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022" +
    "\uffcb\023\uffcb\024\uffcb\041\uffcb\047\uffcb\050\uffcb\052\uffcb" +
    "\060\uffcb\071\uffcb\076\uffcb\100\uffcb\101\uffcb\102\uffcb\103" +
    "\uffcb\104\uffcb\105\uffcb\106\uffcb\001\002\000\004\061\u013f" +
    "\001\002\000\006\076\uffcf\124\uffcf\001\002\000\056\003" +
    "\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9" +
    "\024\uffc9\041\uffc9\047\uffc9\050\uffc9\052\uffc9\060\uffc9\071" +
    "\uffc9\076\uffc9\100\uffc9\101\uffc9\102\uffc9\103\uffc9\104\uffc9" +
    "\105\uffc9\106\uffc9\001\002\000\056\003\uffca\016\uffca\017" +
    "\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca\041\uffca" +
    "\047\uffca\050\uffca\052\uffca\060\uffca\071\uffca\076\uffca\100" +
    "\uffca\101\uffca\102\uffca\103\uffca\104\uffca\105\uffca\106\uffca" +
    "\001\002\000\004\076\u0146\001\002\000\004\073\u0143\001" +
    "\002\000\056\003\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc" +
    "\022\uffcc\023\uffcc\024\uffcc\041\uffcc\047\uffcc\050\uffcc\052" +
    "\uffcc\060\uffcc\071\uffcc\076\uffcc\100\uffcc\101\uffcc\102\uffcc" +
    "\103\uffcc\104\uffcc\105\uffcc\106\uffcc\001\002\000\056\003" +
    "\u013d\016\103\017\110\020\105\021\112\022\102\023\130" +
    "\024\113\041\145\047\132\050\146\052\135\060\136\071" +
    "\140\076\u0145\100\151\101\152\102\141\103\134\104\144" +
    "\105\156\106\013\001\002\000\004\076\uffcd\001\002\000" +
    "\012\076\uffe9\114\uffe9\115\uffe9\127\uffe9\001\002\000\004" +
    "\106\013\001\002\000\020\016\103\017\110\020\105\021" +
    "\112\022\102\024\113\106\013\001\002\000\004\061\u014a" +
    "\001\002\000\012\106\uffe0\120\uffe0\121\uffe0\122\uffe0\001" +
    "\002\000\010\056\ufff5\060\ufff5\073\ufff5\001\002\000\004" +
    "\073\uffe1\001\002\000\006\067\041\071\u014e\001\002\000" +
    "\010\056\uffc4\074\uffc4\106\013\001\002\000\006\056\u0154" +
    "\074\u0155\001\002\000\004\060\u0152\001\002\000\006\056" +
    "\uffc3\074\uffc3\001\002\000\020\016\103\017\110\020\105" +
    "\021\112\022\102\024\113\106\013\001\002\000\006\056" +
    "\uffc5\074\uffc5\001\002\000\004\106\013\001\002\000\004" +
    "\060\u0156\001\002\000\020\016\103\017\110\020\105\021" +
    "\112\022\102\024\113\106\013\001\002\000\006\061\u0158" +
    "\073\u015a\001\002\000\012\076\uffc7\114\uffc7\115\uffc7\127" +
    "\uffc7\001\002\000\012\076\uffc8\114\uffc8\115\uffc8\127\uffc8" +
    "\001\002\000\052\016\103\017\110\020\105\021\112\022" +
    "\102\023\130\024\113\041\145\047\132\050\146\052\135" +
    "\060\136\071\140\100\151\101\152\102\141\103\134\104" +
    "\144\105\156\106\013\001\002\000\060\026\167\027\160" +
    "\030\164\031\204\032\203\033\162\034\161\035\170\036" +
    "\171\037\175\040\163\041\176\043\157\044\174\045\202" +
    "\046\200\057\201\063\166\070\165\071\173\072\177\076" +
    "\u015c\077\172\001\002\000\012\076\uffc6\114\uffc6\115\uffc6" +
    "\127\uffc6\001\002\000\006\056\uffc2\074\uffc2\001\002\000" +
    "\006\056\u0147\073\ufff9\001\002\000\006\056\ufff7\074\ufff7" +
    "\001\002\000\004\061\u0161\001\002\000\010\002\ufffe\110" +
    "\ufffe\111\ufffe\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0160\000\006\041\003\042\004\001\001\000\002\001" +
    "\001\000\004\043\006\001\001\000\004\040\u015f\001\001" +
    "\000\004\044\010\001\001\000\004\040\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\040\015\046\014\052\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\040\021\053\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\040" +
    "\023\001\001\000\002\001\001\000\006\040\015\052\u015e" +
    "\001\001\000\004\045\027\001\001\000\006\040\074\047" +
    "\u015d\001\001\000\002\001\001\000\004\050\031\001\001" +
    "\000\006\051\032\054\034\001\001\000\010\056\052\060" +
    "\055\077\053\001\001\000\006\037\035\040\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\040\043\055\042\001\001\000\004\040\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\037\u014c\040\036" +
    "\001\001\000\002\001\001\000\004\040\057\001\001\000" +
    "\004\061\061\001\001\000\004\040\u014b\001\001\000\002" +
    "\001\001\000\004\063\063\001\001\000\020\040\074\047" +
    "\067\057\070\062\066\064\065\071\073\072\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\064\u0136\071\u0137\072\071\073\u0134" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\077" +
    "\001\001\000\002\001\001\000\016\017\110\020\113\021" +
    "\106\022\103\037\105\040\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\015\115\016\117\040\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\020" +
    "\125\021\132\022\136\023\u0120\030\126\031\142\035\153" +
    "\036\130\037\147\040\141\103\154\104\124\106\146\001" +
    "\001\000\016\017\122\020\113\021\106\022\103\037\105" +
    "\040\036\001\001\000\002\001\001\000\034\020\125\021" +
    "\132\022\136\023\152\030\126\031\142\035\153\036\130" +
    "\037\147\040\141\103\154\104\124\106\146\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\020\125\021\132\022" +
    "\136\023\u011c\030\126\031\142\035\153\036\130\037\147" +
    "\040\141\103\154\104\124\106\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\020\125\021\132\022\136" +
    "\023\u0108\030\126\031\142\035\153\036\130\037\147\040" +
    "\141\103\154\104\124\106\146\001\001\000\016\017\u0104" +
    "\020\113\021\106\022\103\037\105\040\036\001\001\000" +
    "\002\001\001\000\034\020\125\021\132\022\136\023\u0102" +
    "\030\126\031\142\035\153\036\130\037\147\040\141\103" +
    "\154\104\124\106\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\020" +
    "\125\021\132\022\136\023\u0101\030\126\031\142\035\153" +
    "\036\130\037\147\040\141\103\154\104\124\106\146\001" +
    "\001\000\010\015\374\016\117\040\116\001\001\000\002" +
    "\001\001\000\004\027\373\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\020\125\021\132\022" +
    "\136\023\372\030\126\031\142\035\153\036\130\037\147" +
    "\040\141\103\154\104\124\106\146\001\001\000\034\020" +
    "\125\021\132\022\136\023\371\030\126\031\142\035\153" +
    "\036\130\037\147\040\141\103\154\104\124\106\146\001" +
    "\001\000\034\020\125\021\132\022\136\023\370\030\126" +
    "\031\142\035\153\036\130\037\147\040\141\103\154\104" +
    "\124\106\146\001\001\000\034\020\125\021\132\022\136" +
    "\023\367\030\126\031\142\035\153\036\130\037\147\040" +
    "\141\103\154\104\124\106\146\001\001\000\034\020\125" +
    "\021\132\022\136\023\366\030\126\031\142\035\153\036" +
    "\130\037\147\040\141\103\154\104\124\106\146\001\001" +
    "\000\034\020\125\021\132\022\136\023\365\030\126\031" +
    "\142\035\153\036\130\037\147\040\141\103\154\104\124" +
    "\106\146\001\001\000\004\040\360\001\001\000\004\040" +
    "\344\001\001\000\034\020\125\021\132\022\136\023\343" +
    "\030\126\031\142\035\153\036\130\037\147\040\141\103" +
    "\154\104\124\106\146\001\001\000\034\020\125\021\132" +
    "\022\136\023\342\030\126\031\142\035\153\036\130\037" +
    "\147\040\141\103\154\104\124\106\146\001\001\000\034" +
    "\020\125\021\132\022\136\023\341\030\126\031\142\035" +
    "\153\036\130\037\147\040\141\103\154\104\124\106\146" +
    "\001\001\000\004\040\325\001\001\000\036\016\227\020" +
    "\125\021\132\022\136\023\232\030\126\031\142\035\153" +
    "\036\130\037\147\040\230\103\154\104\124\106\146\001" +
    "\001\000\034\020\125\021\132\022\136\023\226\030\126" +
    "\031\142\035\153\036\130\037\147\040\141\103\154\104" +
    "\124\106\146\001\001\000\034\020\125\021\132\022\136" +
    "\023\225\030\126\031\142\035\153\036\130\037\147\040" +
    "\141\103\154\104\124\106\146\001\001\000\034\020\125" +
    "\021\132\022\136\023\224\030\126\031\142\035\153\036" +
    "\130\037\147\040\141\103\154\104\124\106\146\001\001" +
    "\000\036\020\125\021\132\022\136\023\216\024\217\030" +
    "\126\031\142\035\153\036\130\037\147\040\141\103\154" +
    "\104\124\106\146\001\001\000\034\020\125\021\132\022" +
    "\136\023\215\030\126\031\142\035\153\036\130\037\147" +
    "\040\141\103\154\104\124\106\146\001\001\000\004\040" +
    "\211\001\001\000\034\020\125\021\132\022\136\023\206" +
    "\030\126\031\142\035\153\036\130\037\147\040\141\103" +
    "\154\104\124\106\146\001\001\000\034\020\125\021\132" +
    "\022\136\023\205\030\126\031\142\035\153\036\130\037" +
    "\147\040\141\103\154\104\124\106\146\001\001\000\034" +
    "\020\125\021\132\022\136\023\204\030\126\031\142\035" +
    "\153\036\130\037\147\040\141\103\154\104\124\106\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\213" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\020\125\021\132\022\136\023\223\030\126\031" +
    "\142\035\153\036\130\037\147\040\141\103\154\104\124" +
    "\106\146\001\001\000\004\027\222\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\017\244\020\113" +
    "\021\106\022\103\037\105\040\036\001\001\000\040\016" +
    "\236\020\125\021\132\022\136\023\216\024\237\030\126" +
    "\031\142\035\153\036\130\037\147\040\230\103\154\104" +
    "\124\106\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\020\125\021" +
    "\132\022\136\023\242\030\126\031\142\035\153\036\130" +
    "\037\147\040\141\103\154\104\124\106\146\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\246\040\116\001\001\000\002\001\001\000\034\020" +
    "\125\021\132\022\136\023\250\030\126\031\142\035\153" +
    "\036\130\037\147\040\141\103\154\104\124\106\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\017\254" +
    "\020\113\021\253\022\103\037\105\040\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\040\260\070\257" +
    "\105\256\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\020\125\021\132\022\136\023\262" +
    "\030\126\031\142\035\153\036\130\037\147\040\141\103" +
    "\154\104\124\106\146\001\001\000\002\001\001\000\006" +
    "\040\260\105\265\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\017\267\020\113\021\106\022\103\037\105" +
    "\040\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\020\125\021\132\022\136\023\276\030\126\031\142" +
    "\035\153\036\130\037\147\040\274\103\154\104\272\106" +
    "\146\107\275\110\273\001\001\000\002\001\001\000\004" +
    "\111\313\001\001\000\002\001\001\000\004\111\303\001" +
    "\001\000\004\111\277\001\001\000\002\001\001\000\034" +
    "\020\125\021\132\022\136\023\302\030\126\031\142\035" +
    "\153\036\130\037\147\040\141\103\154\104\124\106\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\020\125\021\132\022\136" +
    "\023\312\030\126\031\142\035\153\036\130\037\147\040" +
    "\141\103\154\104\124\106\146\001\001\000\004\040\311" +
    "\001\001\000\016\017\310\020\113\021\253\022\103\037" +
    "\105\040\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\020\125\021\132\022\136\023\320\030\126\031\142" +
    "\035\153\036\130\037\147\040\141\103\154\104\124\106" +
    "\146\001\001\000\004\040\317\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\020\125\021\132\022\136\023" +
    "\322\030\126\031\142\035\153\036\130\037\147\040\141" +
    "\103\154\104\124\106\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\330\040\116\001\001\000\002\001" +
    "\001\000\006\016\335\040\116\001\001\000\034\020\125" +
    "\021\132\022\136\023\333\030\126\031\142\035\153\036" +
    "\130\037\147\040\141\103\154\104\124\106\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\020\125\021\132\022\136\023\337\030\126\031\142" +
    "\035\153\036\130\037\147\040\141\103\154\104\124\106" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\020\125\021\132\022\136\023\346\025\351" +
    "\026\352\030\126\031\142\035\153\036\130\037\147\040" +
    "\141\103\154\104\124\106\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\020\125\021\132\022\136\023\346" +
    "\026\355\030\126\031\142\035\153\036\130\037\147\040" +
    "\141\103\154\104\124\106\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\017\357\020\113\021\106\022" +
    "\103\037\105\040\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\020\125\021\132\022\136\023\346\025" +
    "\363\026\352\030\126\031\142\035\153\036\130\037\147" +
    "\040\141\103\154\104\124\106\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\u0100\040\116\001\001\000\034\020" +
    "\125\021\132\022\136\023\377\030\126\031\142\035\153" +
    "\036\130\037\147\040\141\103\154\104\124\106\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\040\260\070\u0106\105\256\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\020\125\021" +
    "\132\022\136\023\u010a\030\126\031\142\035\153\036\130" +
    "\037\147\040\141\103\154\104\124\106\146\001\001\000" +
    "\002\001\001\000\034\020\125\021\132\022\136\023\u010c" +
    "\030\126\031\142\035\153\036\130\037\147\040\141\103" +
    "\154\104\124\106\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\017\u011a\020\113\021\106\022\103\037" +
    "\105\040\036\001\001\000\042\020\125\021\132\022\136" +
    "\023\u0110\030\126\031\142\032\u0111\033\u0112\034\u0113\035" +
    "\153\036\130\037\147\040\141\103\154\104\124\106\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\020\125\021\132\022\136\023\u0110\030\126\031" +
    "\142\033\u0117\034\u0113\035\153\036\130\037\147\040\141" +
    "\103\154\104\124\106\146\001\001\000\002\001\001\000" +
    "\034\020\125\021\132\022\136\023\u0119\030\126\031\142" +
    "\035\153\036\130\037\147\040\141\103\154\104\124\106" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\u011e\016\117\040" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\040" +
    "\u0124\001\001\000\006\040\u0125\067\u0126\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\017\u0128\020\113\021" +
    "\106\022\103\037\105\040\036\001\001\000\002\001\001" +
    "\000\010\040\260\070\u012a\105\256\001\001\000\002\001" +
    "\001\000\004\065\u012d\001\001\000\034\020\125\021\132" +
    "\022\136\023\u0132\030\126\031\142\035\153\036\130\037" +
    "\147\040\141\103\154\104\124\106\146\001\001\000\004" +
    "\066\u012f\001\001\000\034\020\125\021\132\022\136\023" +
    "\u0131\030\126\031\142\035\153\036\130\037\147\040\141" +
    "\103\154\104\124\106\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\074\u0140\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\075\u0139\001\001" +
    "\000\036\020\125\021\132\022\136\023\u013a\030\126\031" +
    "\142\035\153\036\130\037\147\040\141\076\u013b\103\154" +
    "\104\124\106\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\075\u0143\001\001\000\036\020\125\021\132\022\136" +
    "\023\u013a\030\126\031\142\035\153\036\130\037\147\040" +
    "\141\076\u013b\103\154\104\124\106\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\u014a\001\001\000" +
    "\016\017\u0148\020\113\021\106\022\103\037\105\040\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\040\u014f" +
    "\101\u0150\102\u014e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\017\u0152\020\113\021\106" +
    "\022\103\037\105\040\036\001\001\000\002\001\001\000" +
    "\006\040\u014f\101\u015c\001\001\000\002\001\001\000\016" +
    "\017\u0156\020\113\021\106\022\103\037\105\040\036\001" +
    "\001\000\004\100\u0158\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\020\125\021\132\022\136\023\u015a\030" +
    "\126\031\142\035\153\036\130\037\147\040\141\103\154" +
    "\104\124\106\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Yyparse$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Yyparse$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Yyparse$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	// Init the log
	CUP$Yyparse$actions.setLog(log);
	// Init the log
	CUP$Yyparse$actions.setFactory(factory);

    }


	// Log file
	protected ILog log;
	public void setLog(ILog log) {
		this.log = log;
	}
	public ILog getLog() {
		return log;
	}

	// Factory
	protected ASTBuilder factory;
	public void setFactory(ASTBuilder factory) {
		this.factory = factory;
	}
	public ASTBuilder getFactory() {
		return factory;
	}

	// Change the method report_error to display location and the reason
	public void report_error(String message, Object info) {
		ErrorManager.reportError(log, info, message);
	}
	
	// Change the method report_error to display location and the reason
	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Yyparse$actions {


	// Log file
	protected static ILog log;
	public static void setLog(ILog log) {
		CUP$Yyparse$actions.log = log;
	}
	public static ILog getLog() {
		return CUP$Yyparse$actions.log;
	}

	// Factory
	protected static ASTBuilder factory;
	public static void setFactory(ASTBuilder factory) {
		CUP$Yyparse$actions.factory = factory;
	}
	public static ASTBuilder getFactory() {
		return CUP$Yyparse$actions.factory;
	}

	// Check and make a variableDeclaration
	public static VariableDeclarationAS makeVariableDeclaration(OclExpressionAS nameExp, TypeAS type, OclExpressionAS init, int left, int right) {
		if (nameExp instanceof PathNameExpAS) {
			List pathName = ((PathNameExpAS)nameExp).getPathName();
			if (pathName.size() == 1) {
				String name = (String)pathName.get(0);
				return factory.buildVariableDeclaration(name, type, init);
			}
		}
		Symbol info = new Symbol(0, left, right);
		report_error("Variable declaration expected", info);
		return null;
	}
	
	// Report errors
	public static void report_error(String message, Object info) {
		ErrorManager.reportError(log, info, message);
	}


  private final Yyparse parser;

  /** Constructor */
  CUP$Yyparse$actions(Yyparse parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Yyparse$do_action(
    int                        CUP$Yyparse$act_num,
    java_cup.runtime.lr_parser CUP$Yyparse$parser,
    java.util.Stack            CUP$Yyparse$stack,
    int                        CUP$Yyparse$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Yyparse$result;

      /* select the action based on the action number */
      switch (CUP$Yyparse$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // simpleName ::= SIMPLE_NAME 
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								RESULT = value;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("simpleName",30, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // pathName ::= pathName COLON_COLON simpleName 
            {
              List RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List path = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Add name to path
								RESULT = path;
								path.add(name);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("pathName",29, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // pathName ::= simpleName 
            {
              List RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a
								List seq = new Vector();
								seq.add(name);
								RESULT = seq;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("pathName",29, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // primitiveLiteralExp ::= UNDEFINED 
            {
              PrimitiveLiteralExpAS RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create BooleanLiteralExp
								RESULT = factory.buildBooleanLiteralExp(value);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("primitiveLiteralExp",28, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // primitiveLiteralExp ::= FALSE 
            {
              PrimitiveLiteralExpAS RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create BooleanLiteralExp
								RESULT = factory.buildBooleanLiteralExp(value);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("primitiveLiteralExp",28, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // primitiveLiteralExp ::= TRUE 
            {
              PrimitiveLiteralExpAS RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create BooleanLiteralExp
								RESULT = factory.buildBooleanLiteralExp(value);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("primitiveLiteralExp",28, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // primitiveLiteralExp ::= STRING 
            {
              PrimitiveLiteralExpAS RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create StringLiteralExp
								RESULT = factory.buildStringLiteralExp(value);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("primitiveLiteralExp",28, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // primitiveLiteralExp ::= REAL 
            {
              PrimitiveLiteralExpAS RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create RealLiteralExp
								RESULT = factory.buildRealLiteralExp(value);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("primitiveLiteralExp",28, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // primitiveLiteralExp ::= INTEGER 
            {
              PrimitiveLiteralExpAS RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create IntegerLiteralExp
								RESULT = factory.buildIntegerLiteralExp(value);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("primitiveLiteralExp",28, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // tupleLiteralExp ::= TUPLE LEFT_BRA variableDeclarationList RIGHT_BRA 
            {
              TupleLiteralExpAS RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List seq = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create TupleLiteralExp
								RESULT = factory.buildTupleLiteralExp(seq);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("tupleLiteralExp",27, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // collectionRange ::= oclExpression DOT_DOT oclExpression 
            {
              CollectionRangeAS RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS first = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int lastleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int lastright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS last = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create CollectionRange
								RESULT = factory.buildCollectionRange(first, last);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("collectionRange",26, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // collectionLiteralPart ::= collectionRange 
            {
              CollectionLiteralPartAS RESULT =null;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		CollectionRangeAS range = (CollectionRangeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Copy rule
								RESULT = range;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("collectionLiteralPart",25, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // collectionLiteralPart ::= oclExpression 
            {
              CollectionLiteralPartAS RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create CollectionItem
								RESULT = factory.buildCollectionItem(exp);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("collectionLiteralPart",25, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // collectionLiteralParts ::= collectionLiteralParts COMMA collectionLiteralPart 
            {
              List RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List seq = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int colPartleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int colPartright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		CollectionLiteralPartAS colPart = (CollectionLiteralPartAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Add collPart to seq
								RESULT = seq;
								seq.add(colPart);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("collectionLiteralParts",24, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // collectionLiteralParts ::= collectionLiteralPart 
            {
              List RESULT =null;
		int colPartleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int colPartright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		CollectionLiteralPartAS colPart = (CollectionLiteralPartAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a List
								List seq = new Vector();
								seq.add(colPart);
								RESULT = seq;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("collectionLiteralParts",24, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // collectionKind ::= ORDERED_SET 
            {
              CollectionKindAS RESULT =null;
		
								// Set kind to ORDERED_SET
								RESULT = CollectionKindAS.ORDERED_SET_LITERAL;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("collectionKind",15, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // collectionKind ::= COLLECTION 
            {
              CollectionKindAS RESULT =null;
		
								// Set kind to COLLECTION
								RESULT = CollectionKindAS.COLLECTION_LITERAL;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("collectionKind",15, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // collectionKind ::= SEQUENCE 
            {
              CollectionKindAS RESULT =null;
		
								// Set kind to SEQUENCE
								RESULT = CollectionKindAS.SEQUENCE_LITERAL;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("collectionKind",15, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // collectionKind ::= BAG 
            {
              CollectionKindAS RESULT =null;
		
								// Set kind to BAG
								RESULT = CollectionKindAS.BAG_LITERAL;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("collectionKind",15, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // collectionKind ::= SET 
            {
              CollectionKindAS RESULT =null;
		
								// Set kind to SET
								RESULT = CollectionKindAS.SET_LITERAL;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("collectionKind",15, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // collectionLiteralExp ::= collectionKind LEFT_BRA RIGHT_BRA 
            {
              CollectionLiteralExpAS RESULT =null;
		int kindleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int kindright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		CollectionKindAS kind = (CollectionKindAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		
								// Create CollectionLiteralExp
								RESULT = factory.buildCollectionLiteralExp(kind, new Vector());
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("collectionLiteralExp",23, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // collectionLiteralExp ::= collectionKind LEFT_BRA collectionLiteralParts RIGHT_BRA 
            {
              CollectionLiteralExpAS RESULT =null;
		int kindleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int kindright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		CollectionKindAS kind = (CollectionKindAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int partsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int partsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List parts = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create CollectionLiteralExp
								RESULT = factory.buildCollectionLiteralExp(kind, parts);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("collectionLiteralExp",23, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // literalExp ::= tupleType 
            {
              LiteralExpAS RESULT =null;
		int typeExprleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int typeExprright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		TupleTypeAS typeExpr = (TupleTypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								RESULT = typeExpr;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("literalExp",22, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // literalExp ::= collectionType 
            {
              LiteralExpAS RESULT =null;
		int typeExprleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int typeExprright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		CollectionTypeAS typeExpr = (CollectionTypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								RESULT = typeExpr;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("literalExp",22, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // literalExp ::= primitiveLiteralExp 
            {
              LiteralExpAS RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		PrimitiveLiteralExpAS exp = (PrimitiveLiteralExpAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								RESULT = exp;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("literalExp",22, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // literalExp ::= tupleLiteralExp 
            {
              LiteralExpAS RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		TupleLiteralExpAS exp = (TupleLiteralExpAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								RESULT = exp;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("literalExp",22, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // literalExp ::= collectionLiteralExp 
            {
              LiteralExpAS RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		CollectionLiteralExpAS exp = (CollectionLiteralExpAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								RESULT = exp;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("literalExp",22, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // isMarkedPre ::= AT PRE 
            {
              Boolean RESULT =null;
		
								RESULT = new Boolean(true);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("isMarkedPre",21, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // isMarkedPre ::= 
            {
              Boolean RESULT =null;
		
								RESULT = new Boolean(false);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("isMarkedPre",21, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // oclMessageArgument ::= oclExpression 
            {
              OclMessageArgAS RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create OclMessageArg
								RESULT = factory.buildOclMessageArg(exp,null);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclMessageArgument",20, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // oclMessageArgument ::= QUESTION COLON type 
            {
              OclMessageArgAS RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create OclMessageArg
								OclMessageArgAS arg = factory.buildOclMessageArg(null,type);
								RESULT = arg;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclMessageArgument",20, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // oclMessageArgument ::= QUESTION 
            {
              OclMessageArgAS RESULT =null;
		
								// Create OclMessageArg
								OclMessageArgAS arg = factory.buildOclMessageArg(null,null);
								RESULT = arg;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclMessageArgument",20, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // oclMessageArgumentList ::= oclMessageArgumentList COMMA oclMessageArgument 
            {
              List RESULT =null;
		int argListleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int argListright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List argList = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclMessageArgAS arg = (OclMessageArgAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
										
			  					// Append 'arg' to 'argList' 
			  					RESULT = argList;
			  					argList.add(arg);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclMessageArgumentList",19, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // oclMessageArgumentList ::= oclMessageArgument 
            {
              List RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclMessageArgAS arg = (OclMessageArgAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create List
								List seq = new Vector();
								seq.add(arg);
								RESULT = seq;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclMessageArgumentList",19, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // argumentList ::= argumentList COMMA oclExpression 
            {
              List RESULT =null;
		int argListleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int argListright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List argList = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS arg = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
			  					// Append 'arg' to 'argList' 
			  					RESULT = argList;
			  					argList.add(arg);
			  				
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("argumentList",18, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // argumentList ::= oclExpression 
            {
              List RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS arg = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a List
								List seq = new Vector();
								seq.add(arg);
								RESULT = seq;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("argumentList",18, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // oclExpression ::= oclExpression UP simpleName LEFT_PAR RIGHT_PAR 
            {
              OclExpressionAS RESULT =null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		OclExpressionAS target = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		
								// Create OclMessageExp
								RESULT = factory.buildOclMessageExp(OclMessageKindAS.UP_LITERAL, target, name, new Vector());
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // oclExpression ::= oclExpression UP simpleName LEFT_PAR oclMessageArgumentList RIGHT_PAR 
            {
              OclExpressionAS RESULT =null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		OclExpressionAS target = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List arguments = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create OclMessageExp
								RESULT = factory.buildOclMessageExp(OclMessageKindAS.UP_LITERAL, target, name, arguments);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // oclExpression ::= oclExpression UP_UP simpleName LEFT_PAR RIGHT_PAR 
            {
              OclExpressionAS RESULT =null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		OclExpressionAS target = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		
								// Create OclMessageExpAS
								RESULT = factory.buildOclMessageExp(OclMessageKindAS.UP_UP_LITERAL, target, name, new Vector());
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // oclExpression ::= oclExpression UP_UP simpleName LEFT_PAR oclMessageArgumentList RIGHT_PAR 
            {
              OclExpressionAS RESULT =null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		OclExpressionAS target = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List arguments = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create OclMessageExpAS
								RESULT = factory.buildOclMessageExp(OclMessageKindAS.UP_UP_LITERAL, target, name, arguments);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // oclExpression ::= LET variableDeclarationList IN oclExpression 
            {
              OclExpressionAS RESULT =null;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List variables = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create LetExp
								RESULT = factory.buildLetExp(variables, exp);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // oclExpression ::= oclExpression IMPLIES oclExpression 
            {
              OclExpressionAS RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create ImpliesExp
								RESULT = factory.buildImpliesExp(left, right);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // oclExpression ::= oclExpression XOR oclExpression 
            {
              OclExpressionAS RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create OrExp
								RESULT = factory.buildXorExp(left, right);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // oclExpression ::= oclExpression OR oclExpression 
            {
              OclExpressionAS RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create OrExp
								RESULT = factory.buildOrExp(left, right);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // oclExpression ::= oclExpression AND oclExpression 
            {
              OclExpressionAS RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create AndExp
								RESULT = factory.buildAndExp(left, right);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // oclExpression ::= oclExpression NE oclExpression 
            {
              OclExpressionAS RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create an OperationCallExp
								RESULT = factory.buildOperationCallExp("<>", left, right);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // oclExpression ::= oclExpression EQ oclExpression 
            {
              OclExpressionAS RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create an OperationCallExp
								RESULT = factory.buildOperationCallExp("=", left, right);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // oclExpression ::= oclExpression GE oclExpression 
            {
              OclExpressionAS RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create an OperationCallExp
								RESULT = factory.buildOperationCallExp(">=", left, right);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // oclExpression ::= oclExpression LE oclExpression 
            {
              OclExpressionAS RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create an OperationCallExp
								RESULT = factory.buildOperationCallExp("<=", left, right);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // oclExpression ::= oclExpression GT oclExpression 
            {
              OclExpressionAS RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create an OperationCallExp
								RESULT = factory.buildOperationCallExp(">", left, right);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // oclExpression ::= oclExpression LT oclExpression 
            {
              OclExpressionAS RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create an OperationCallExp
								RESULT = factory.buildOperationCallExp("<", left, right);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // oclExpression ::= IF oclExpression THEN oclExpression ELSE oclExpression ENDIF 
            {
              OclExpressionAS RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		OclExpressionAS condition = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int thenExpleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int thenExpright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		OclExpressionAS thenExp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int elseExpleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int elseExpright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		OclExpressionAS elseExp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create IfExp
								RESULT = factory.buildIfExp(condition, thenExp, elseExp);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // oclExpression ::= oclExpression MINUS oclExpression 
            {
              OclExpressionAS RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create an OperationCallExp
								RESULT = factory.buildOperationCallExp("-", left, right);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // oclExpression ::= oclExpression PLUS oclExpression 
            {
              OclExpressionAS RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create an OperationCallExp
								RESULT = factory.buildOperationCallExp("+", left, right);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // oclExpression ::= oclExpression INT_MOD oclExpression 
            {
              OclExpressionAS RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create an OperationCallExp
								RESULT = factory.buildOperationCallExp("mod", left, right);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // oclExpression ::= oclExpression INT_DIVIDE oclExpression 
            {
              OclExpressionAS RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create an OperationCallExp
								RESULT = factory.buildOperationCallExp("div", left, right);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // oclExpression ::= oclExpression DIVIDE oclExpression 
            {
              OclExpressionAS RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create an OperationCallExp
								RESULT = factory.buildOperationCallExp("/", left, right);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // oclExpression ::= oclExpression TIMES oclExpression 
            {
              OclExpressionAS RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS left = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS right = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create an OperationCallExp
								RESULT = factory.buildOperationCallExp("*", left, right);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // oclExpression ::= MINUS oclExpression 
            {
              OclExpressionAS RESULT =null;
		int opdleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS opd = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create an OperationCallExp
								RESULT = factory.buildOperationCallExp("-", opd, null);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // oclExpression ::= NOT oclExpression 
            {
              OclExpressionAS RESULT =null;
		int opdleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS opd = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create NotExp
								RESULT = factory.buildNotExp(opd);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // oclExpression ::= oclExpression MINUS_GT ITERATE LEFT_PAR variableDeclaration BAR oclExpression RIGHT_PAR 
            {
              OclExpressionAS RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).right;
		OclExpressionAS exp1 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		VariableDeclarationAS var2 = (VariableDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		OclExpressionAS exp2 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create IterateExp
								RESULT = factory.buildIterateExp(exp1, null, var2, exp2);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // oclExpression ::= oclExpression MINUS_GT ITERATE LEFT_PAR variableDeclaration SEMICOLON variableDeclaration BAR oclExpression RIGHT_PAR 
            {
              OclExpressionAS RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).right;
		OclExpressionAS exp1 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).value;
		int var1left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		VariableDeclarationAS var1 = (VariableDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		VariableDeclarationAS var2 = (VariableDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		OclExpressionAS exp2 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create IterateExp
								RESULT = factory.buildIterateExp(exp1, var1, var2, exp2);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // oclExpression ::= oclExpression LEFT_BRK argumentList RIGHT_BRK isMarkedPre 
            {
              OclExpressionAS RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List arguments = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int isMarkedPreleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int isMarkedPreright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		Boolean isMarkedPre = (Boolean)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create AssociationCallExp
								RESULT = factory.buildAssociationCallExp(exp, arguments, isMarkedPre);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // oclExpression ::= oclExpression LEFT_PAR variableDeclaration BAR oclExpression RIGHT_PAR 
            {
              OclExpressionAS RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		OclExpressionAS exp1 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int var1left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		VariableDeclarationAS var1 = (VariableDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		OclExpressionAS exp2 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create IteratorCallExp
								List varList = new Vector();
								varList.add(var1);
								RESULT = factory.buildIteratorCallExp(exp1, varList, exp2);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // oclExpression ::= oclExpression LEFT_PAR oclExpression COLON type COMMA variableDeclaration BAR oclExpression RIGHT_PAR 
            {
              OclExpressionAS RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).right;
		OclExpressionAS exp1 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).value;
		int nameExpleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).left;
		int nameExpright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).right;
		OclExpressionAS nameExp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		VariableDeclarationAS var2 = (VariableDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		OclExpressionAS exp2 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create first variable - check the name
								VariableDeclarationAS var1 = makeVariableDeclaration(nameExp, type, null, nameExpleft, nameExpright);
								// Create IteratorCallExp
								List varList = new Vector();
								varList.add(var1);
								varList.add(var2);
								RESULT = factory.buildIteratorCallExp(exp1, varList, exp2);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // oclExpression ::= oclExpression LEFT_PAR oclExpression COMMA variableDeclaration BAR oclExpression RIGHT_PAR 
            {
              OclExpressionAS RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).right;
		OclExpressionAS exp1 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).value;
		int nameExpleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int nameExpright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		OclExpressionAS nameExp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		VariableDeclarationAS var2 = (VariableDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		OclExpressionAS exp2 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create first variable - check the name
								VariableDeclarationAS var1 = makeVariableDeclaration(nameExp, null, null, nameExpleft, nameExpright);
								// Create IteratorCallExp
								List varList = new Vector();
								varList.add(var1);
								varList.add(var2);
								RESULT = factory.buildIteratorCallExp(exp1, varList, exp2);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // oclExpression ::= oclExpression LEFT_PAR oclExpression COMMA argumentList RIGHT_PAR 
            {
              OclExpressionAS RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		OclExpressionAS arg1 = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create OperationCallExp
								List args = new Vector();
								args.add(arg1);
								args.addAll(list);
								RESULT = factory.buildOperationCallExp(exp, args);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // oclExpression ::= oclExpression LEFT_PAR oclExpression RIGHT_PAR 
            {
              OclExpressionAS RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		OclExpressionAS arg = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create OperationCallExp
								List args = new Vector();
								args.add(arg);
								RESULT = factory.buildOperationCallExp(exp, args);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // oclExpression ::= oclExpression LEFT_PAR RIGHT_PAR 
            {
              OclExpressionAS RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		
								// Create OperationCallExp
								RESULT = factory.buildOperationCallExp(exp, new Vector());
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // oclExpression ::= oclExpression MINUS_GT error 
            {
              OclExpressionAS RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		
								// Error recovery
								RESULT = exp;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // oclExpression ::= oclExpression MINUS_GT simpleName 
            {
              OclExpressionAS RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int simpleNameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int simpleNameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		String simpleName = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create ArrowSelectionExp
								RESULT = factory.buildArrowSelectionExp(exp, simpleName);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // oclExpression ::= oclExpression DOT error 
            {
              OclExpressionAS RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		
								// Error recovery
								RESULT = exp;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // oclExpression ::= oclExpression DOT BODY 
            {
              OclExpressionAS RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		
								// Create DotSelectionExp
								RESULT = factory.buildDotSelectionExp(exp, "body", null);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // oclExpression ::= oclExpression DOT simpleName isMarkedPre 
            {
              OclExpressionAS RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int simpleNameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int simpleNameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		String simpleName = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		int isMarkedPreleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int isMarkedPreright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		Boolean isMarkedPre = (Boolean)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create DotSelectionExp
								RESULT = factory.buildDotSelectionExp(exp, simpleName, isMarkedPre);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // oclExpression ::= pathName isMarkedPre 
            {
              OclExpressionAS RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List path = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		int isMarkedPreleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int isMarkedPreright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		Boolean isMarkedPre = (Boolean)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create PathNameExp
								RESULT = factory.buildPathNameExp(path, isMarkedPre);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // oclExpression ::= LEFT_PAR oclExpression RIGHT_PAR 
            {
              OclExpressionAS RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Copy rule
								RESULT = exp;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // oclExpression ::= literalExp 
            {
              OclExpressionAS RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		LiteralExpAS exp = (LiteralExpAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Literal expression without enumLiteralExp
								// Copy rule
								RESULT = exp;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // oclExpression ::= template 
            {
              OclExpressionAS RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		TemplateAS exp = (TemplateAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Copy rule
								RESULT = exp;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpression",17, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // memberSelectionExp ::= objectTemplate DOUBLEPLUS simpleName 
            {
              MemberSelectionExpressionAS RESULT =null;
		int objectTemplateleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int objectTemplateright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		ObjectTemplateAS objectTemplate = (ObjectTemplateAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int secondNameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int secondNameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		String secondName = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create SetComprehensionExpression
								RESULT = factory.buildMemberSelectionExpression(null, objectTemplate, secondName);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("memberSelectionExp",70, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // memberSelectionExp ::= simpleName DOUBLEPLUS simpleName 
            {
              MemberSelectionExpressionAS RESULT =null;
		int firstNameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int firstNameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String firstName = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int secondNameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int secondNameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		String secondName = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create SetComprehensionExpression
								RESULT = factory.buildMemberSelectionExpression(firstName, null, secondName);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("memberSelectionExp",70, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // setComprehensionExpression ::= objectTemplate BAR oclExpression 
            {
              SetComprehensionExpressionAS RESULT =null;
		int objectTemplateleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int objectTemplateright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		ObjectTemplateAS objectTemplate = (ObjectTemplateAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int oclExpressionleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int oclExpressionright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS oclExpression = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create SetComprehensionExpression
								RESULT = factory.buildSetComprehensionExpression(null, objectTemplate, oclExpression);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("setComprehensionExpression",69, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // setComprehensionExpression ::= simpleName BAR oclExpression 
            {
              SetComprehensionExpressionAS RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int oclExpressionleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int oclExpressionright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS oclExpression = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create SetComprehensionExpression
								RESULT = factory.buildSetComprehensionExpression(name, null, oclExpression);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("setComprehensionExpression",69, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // commaLeadingOclExpressionList ::= commaLeadingOclExpressionList COMMA oclExpression 
            {
              List RESULT =null;
		int commaLeadingOclExpressionListleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int commaLeadingOclExpressionListright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List commaLeadingOclExpressionList = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int oclExpressionleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int oclExpressionright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS oclExpression = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
			  					RESULT = commaLeadingOclExpressionList;
			  					RESULT.add(oclExpression);
			  				
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("commaLeadingOclExpressionList",71, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // commaLeadingOclExpressionList ::= 
            {
              List RESULT =null;
		
								// Create PropertyTemplate
								RESULT = new Vector();
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("commaLeadingOclExpressionList",71, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // collectionTemplate ::= simpleName COLON collectionKind LEFT_PAR type RIGHT_PAR LEFT_BRA oclExpression commaLeadingOclExpressionList RIGHT_BRA 
            {
              CollectionTemplateAS RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).value;
		int collectionKindleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).left;
		int collectionKindright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).right;
		CollectionKindAS collectionKind = (CollectionKindAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int oclExpressionleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int oclExpressionright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS oclExpression = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int commaLeadingOclExpressionListleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int commaLeadingOclExpressionListright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List commaLeadingOclExpressionList = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create CollectionTemplate
								RESULT = factory.buildCollectionTemplate(name, collectionKind, type, null, null, oclExpression, commaLeadingOclExpressionList);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("collectionTemplate",68, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // collectionTemplate ::= simpleName COLON collectionKind LEFT_PAR type RIGHT_PAR LEFT_BRA memberSelectionExp commaLeadingOclExpressionList RIGHT_BRA 
            {
              CollectionTemplateAS RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).value;
		int collectionKindleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).left;
		int collectionKindright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).right;
		CollectionKindAS collectionKind = (CollectionKindAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int memberSelectionExpleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int memberSelectionExpright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		MemberSelectionExpressionAS memberSelectionExp = (MemberSelectionExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int commaLeadingOclExpressionListleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int commaLeadingOclExpressionListright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List commaLeadingOclExpressionList = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create CollectionTemplate
								RESULT = factory.buildCollectionTemplate(name, collectionKind, type, null, memberSelectionExp, null, commaLeadingOclExpressionList);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("collectionTemplate",68, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // collectionTemplate ::= simpleName COLON collectionKind LEFT_PAR type RIGHT_PAR LEFT_BRA setComprehensionExpression commaLeadingOclExpressionList RIGHT_BRA 
            {
              CollectionTemplateAS RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).value;
		int collectionKindleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).left;
		int collectionKindright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).right;
		CollectionKindAS collectionKind = (CollectionKindAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int setComprehensionExpressionleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int setComprehensionExpressionright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		SetComprehensionExpressionAS setComprehensionExpression = (SetComprehensionExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int commaLeadingOclExpressionListleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int commaLeadingOclExpressionListright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List commaLeadingOclExpressionList = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create CollectionTemplate
								RESULT = factory.buildCollectionTemplate(name, collectionKind, type, setComprehensionExpression, null, null, commaLeadingOclExpressionList);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("collectionTemplate",68, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // propertyTemplate ::= simpleName EQ oclExpression 
            {
              PropertyTemplateAS RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int oclExpressionleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int oclExpressionright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS oclExpression = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create PropertyTemplate
								RESULT = factory.buildPropertyTemplate(name, oclExpression);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("propertyTemplate",67, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // objectTemplate ::= simpleName COLON type LEFT_BRA propertyTemplateList RIGHT_BRA 
            {
              ObjectTemplateAS RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int propertyTemplateListleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int propertyTemplateListright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List propertyTemplateList = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create TupleType
								RESULT = factory.buildObjectTemplate(name, type, propertyTemplateList);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("objectTemplate",66, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // objectTemplate ::= COLON type LEFT_BRA propertyTemplateList RIGHT_BRA 
            {
              ObjectTemplateAS RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int propertyTemplateListleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int propertyTemplateListright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List propertyTemplateList = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create ObjectTemplate
								RESULT = factory.buildObjectTemplate(null, type, propertyTemplateList);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("objectTemplate",66, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // template ::= collectionTemplate 
            {
              TemplateAS RESULT =null;
		int collectionTemplateleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int collectionTemplateright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		CollectionTemplateAS collectionTemplate = (CollectionTemplateAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								RESULT = collectionTemplate;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("template",65, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // template ::= objectTemplate 
            {
              TemplateAS RESULT =null;
		int objectTemplateleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int objectTemplateright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		ObjectTemplateAS objectTemplate = (ObjectTemplateAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								RESULT = objectTemplate;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("template",65, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // tupleType ::= TUPLE_TYPE LEFT_PAR variableDeclarationList RIGHT_PAR 
            {
              TupleTypeAS RESULT =null;
		int varListleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create TupleType
								RESULT = factory.buildTupleType(varList);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("tupleType",16, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // collectionType ::= collectionKind LEFT_PAR type RIGHT_PAR 
            {
              CollectionTypeAS RESULT =null;
		int kindleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int kindright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		CollectionKindAS kind = (CollectionKindAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int elementTypeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int elementTyperight = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		TypeAS elementType = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create CollectionType
								RESULT = factory.buildCollectionType(kind, elementType);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("collectionType",14, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // type ::= tupleType 
            {
              TypeAS RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		TupleTypeAS type = (TupleTypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Copy rule
								RESULT = type;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // type ::= collectionType 
            {
              TypeAS RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		CollectionTypeAS type = (CollectionTypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Copy rule
								RESULT = type;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // type ::= pathName 
            {
              TypeAS RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		List path = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create PathNameType
								RESULT = factory.buildPathNameType(path);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // variableDeclaration ::= simpleName 
            {
              VariableDeclarationAS RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a VariableDeclaration
								RESULT = factory.buildVariableDeclaration(name, null, null);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("variableDeclaration",12, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // variableDeclaration ::= simpleName EQ oclExpression 
            {
              VariableDeclarationAS RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS init = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a VariableDeclaration
								RESULT = factory.buildVariableDeclaration(name, null, init);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("variableDeclaration",12, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // variableDeclaration ::= simpleName COLON type 
            {
              VariableDeclarationAS RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a VariableDeclaration
								RESULT = factory.buildVariableDeclaration(name, type, null);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("variableDeclaration",12, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // variableDeclaration ::= simpleName COLON type EQ oclExpression 
            {
              VariableDeclarationAS RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS init = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a VariableDeclaration
								RESULT = factory.buildVariableDeclaration(name, type, init);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("variableDeclaration",12, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // variableDeclarationList ::= variableDeclarationList COMMA variableDeclaration 
            {
              List RESULT =null;
		int varListleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		VariableDeclarationAS var = (VariableDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
			  					// Append 'var' to 'varList' 
			  					RESULT = varList;
			  					RESULT.add(var);
			  				
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("variableDeclarationList",11, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // variableDeclarationList ::= variableDeclaration 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		VariableDeclarationAS var = (VariableDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a List
								RESULT = new Vector();
								RESULT.add(var);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("variableDeclarationList",11, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // operation ::= simpleName LEFT_PAR RIGHT_PAR 
            {
              OperationAS RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		
								// Create an Operationn
								RESULT = factory.buildOperation(new Vector(), name, new Vector(), null);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("operation",9, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // operation ::= simpleName LEFT_PAR RIGHT_PAR COLON type 
            {
              OperationAS RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create an Operationn
								RESULT = factory.buildOperation(new Vector(), name, new Vector(), type);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("operation",9, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // operation ::= simpleName LEFT_PAR variableDeclarationList RIGHT_PAR 
            {
              OperationAS RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List params = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create an Operationn
								RESULT = factory.buildOperation(new Vector(), name, params, null);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("operation",9, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operation ::= simpleName LEFT_PAR variableDeclarationList RIGHT_PAR COLON type 
            {
              OperationAS RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		List params = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create an Operationn
								RESULT = factory.buildOperation(new Vector(), name, params, type);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("operation",9, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operation ::= pathName COLON_COLON simpleName LEFT_PAR RIGHT_PAR 
            {
              OperationAS RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		List path = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		
								// Create an Operationn
								RESULT = factory.buildOperation(path, name, new Vector(), null);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("operation",9, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // operation ::= pathName COLON_COLON simpleName LEFT_PAR RIGHT_PAR COLON type 
            {
              OperationAS RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)).right;
		List path = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create an Operation
								RESULT = factory.buildOperation(path, name, new Vector(), type);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("operation",9, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // operation ::= pathName COLON_COLON simpleName LEFT_PAR variableDeclarationList RIGHT_PAR 
            {
              OperationAS RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		List path = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List params = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create an Operationn
								RESULT = factory.buildOperation(path, name, params, null);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("operation",9, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // operation ::= pathName COLON_COLON simpleName LEFT_PAR variableDeclarationList RIGHT_PAR COLON type 
            {
              OperationAS RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).right;
		List path = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		List params = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create an Operationn
								RESULT = factory.buildOperation(path, name, params, type);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("operation",9, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // prePostOrBodyDecl ::= prePostOrBodyDecl BODY COLON oclExpression 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a constraint
								RESULT = list;
								RESULT.add(factory.buildConstraint(ConstraintKindAS.BODY_LITERAL, "", exp, null));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("prePostOrBodyDecl",10, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // prePostOrBodyDecl ::= prePostOrBodyDecl BODY simpleName COLON oclExpression 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a constraint
								RESULT = list;
								RESULT.add(factory.buildConstraint(ConstraintKindAS.BODY_LITERAL, name, exp, null));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("prePostOrBodyDecl",10, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // prePostOrBodyDecl ::= prePostOrBodyDecl POST COLON oclExpression 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a constraint
								RESULT = list;
								RESULT.add(factory.buildConstraint(ConstraintKindAS.POST_LITERAL, "", exp, null));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("prePostOrBodyDecl",10, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // prePostOrBodyDecl ::= prePostOrBodyDecl POST simpleName COLON oclExpression 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a constraint
								RESULT = list;
								RESULT.add(factory.buildConstraint(ConstraintKindAS.POST_LITERAL, name, exp, null));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("prePostOrBodyDecl",10, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // prePostOrBodyDecl ::= prePostOrBodyDecl PRE COLON oclExpression 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a constraint
								RESULT = list;
								RESULT.add(factory.buildConstraint(ConstraintKindAS.PRE_LITERAL, "", exp, null));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("prePostOrBodyDecl",10, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // prePostOrBodyDecl ::= prePostOrBodyDecl PRE simpleName COLON oclExpression 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Add constraint to list
								RESULT = list;
								RESULT.add(factory.buildConstraint(ConstraintKindAS.PRE_LITERAL, name, exp, null));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("prePostOrBodyDecl",10, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // prePostOrBodyDecl ::= BODY COLON oclExpression 
            {
              List RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a LIST and add constraint
								RESULT = new Vector();
								RESULT.add(factory.buildConstraint(ConstraintKindAS.BODY_LITERAL, "", exp, null));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("prePostOrBodyDecl",10, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // prePostOrBodyDecl ::= BODY simpleName COLON oclExpression 
            {
              List RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a LIST and add constraint
								RESULT = new Vector();
								RESULT.add(factory.buildConstraint(ConstraintKindAS.BODY_LITERAL, name, exp, null));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("prePostOrBodyDecl",10, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // prePostOrBodyDecl ::= POST COLON oclExpression 
            {
              List RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a LIST and add constraint
								RESULT = new Vector();
								RESULT.add(factory.buildConstraint(ConstraintKindAS.POST_LITERAL, "", exp, null));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("prePostOrBodyDecl",10, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // prePostOrBodyDecl ::= POST simpleName COLON oclExpression 
            {
              List RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a LIST and add constraint
								RESULT = new Vector();
								RESULT.add(factory.buildConstraint(ConstraintKindAS.POST_LITERAL, name, exp, null));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("prePostOrBodyDecl",10, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // prePostOrBodyDecl ::= PRE COLON oclExpression 
            {
              List RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a LIST and add constraint
								RESULT = new Vector();
								RESULT.add(factory.buildConstraint(ConstraintKindAS.PRE_LITERAL, "", exp, null));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("prePostOrBodyDecl",10, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // prePostOrBodyDecl ::= PRE simpleName COLON oclExpression 
            {
              List RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a LIST and add constraint
								// Create a constraint
								ConstraintAS cons = factory.buildConstraint(ConstraintKindAS.PRE_LITERAL, name, exp, null);
								// Create a list
								RESULT = new Vector();
								RESULT.add(cons);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("prePostOrBodyDecl",10, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // operationContextDecl ::= CONTEXT operation prePostOrBodyDecl 
            {
              OperationContextDeclAS RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		OperationAS oper = (OperationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create OperationContextDecl
								RESULT = factory.buildOperationContextDeclaration(oper, list);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("operationContextDecl",8, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // defExpression ::= operation EQ oclExpression 
            {
              Object[] RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OperationAS oper = (OperationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a container
								RESULT = new Object[] {oper, exp};
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("defExpression",5, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // defExpression ::= simpleName COLON type EQ oclExpression 
            {
              Object[] RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a container
								VariableDeclarationAS var = factory.buildVariableDeclaration(name,type,exp);
								RESULT = new Object[] {var, exp};
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("defExpression",5, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // invOrDef ::= invOrDef DEF COLON defExpression 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		Object[] exp = (Object[])((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Add constraint to list
								RESULT = list;
								RESULT.add(factory.buildConstraint(ConstraintKindAS.DEF_LITERAL, "", (OclExpressionAS)exp[1], exp[0]));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("invOrDef",4, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // invOrDef ::= invOrDef DEF simpleName COLON defExpression 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		Object[] exp = (Object[])((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Add constraint to list
								RESULT = list;
								RESULT.add(factory.buildConstraint(ConstraintKindAS.DEF_LITERAL, name, (OclExpressionAS)exp[1], exp[0]));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("invOrDef",4, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // invOrDef ::= invOrDef INV COLON oclExpression 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Add constraint to list
								RESULT = list;
								RESULT.add(factory.buildConstraint(ConstraintKindAS.INV_LITERAL, "", exp, null));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("invOrDef",4, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // invOrDef ::= invOrDef INV simpleName COLON oclExpression 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Add constraint to list
								RESULT = list;
								RESULT.add(factory.buildConstraint(ConstraintKindAS.INV_LITERAL, name, exp, null));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("invOrDef",4, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // invOrDef ::= DEF COLON defExpression 
            {
              List RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		Object[] exp = (Object[])((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a LIST and add constraint
								RESULT = new Vector();
								RESULT.add(factory.buildConstraint(ConstraintKindAS.DEF_LITERAL, "", (OclExpressionAS)exp[1], exp[0]));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("invOrDef",4, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // invOrDef ::= DEF simpleName COLON defExpression 
            {
              List RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		Object[] exp = (Object[])((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a LIST and add constraint
								RESULT = new Vector();
								RESULT.add(factory.buildConstraint(ConstraintKindAS.DEF_LITERAL, name, (OclExpressionAS)exp[1], exp[0]));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("invOrDef",4, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // invOrDef ::= INV COLON oclExpression 
            {
              List RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a LIST and add constraint
								RESULT = new Vector();
								RESULT.add(factory.buildConstraint(ConstraintKindAS.INV_LITERAL, "", exp, null));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("invOrDef",4, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // invOrDef ::= INV simpleName COLON oclExpression 
            {
              List RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a LIST and add constraint
								RESULT = new Vector();
								RESULT.add(factory.buildConstraint(ConstraintKindAS.INV_LITERAL, name, exp, null));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("invOrDef",4, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // classifierContextDecl ::= CONTEXT type invOrDef 
            {
              ClassifierContextDeclAS RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		TypeAS t = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		int constraintsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int constraintsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		List constraints = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a ClassifierContext
								//RESULT = factory.buildClassifierContextDeclaration(path, constraints);
								RESULT = factory.buildClassifierContextDeclaration(t, constraints);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("classifierContextDecl",3, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // initOrDerValue ::= initOrDerValue DERIVE COLON oclExpression 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Add constraint to list
								RESULT = list;
								RESULT.add(factory.buildConstraint(ConstraintKindAS.DERIVE_LITERAL, "", exp, null));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("initOrDerValue",7, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // initOrDerValue ::= initOrDerValue INIT COLON oclExpression 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Add constraint to list
								RESULT = list;
								RESULT.add(factory.buildConstraint(ConstraintKindAS.INIT_LITERAL, "", exp, null));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("initOrDerValue",7, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // initOrDerValue ::= DERIVE COLON oclExpression 
            {
              List RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a LIST and add constraint
								RESULT = new Vector();
								RESULT.add(factory.buildConstraint(ConstraintKindAS.DERIVE_LITERAL, "", exp, null));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("initOrDerValue",7, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // initOrDerValue ::= INIT COLON oclExpression 
            {
              List RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS exp = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a LIST and add constraint
								RESULT = new Vector();
								RESULT.add(factory.buildConstraint(ConstraintKindAS.INIT_LITERAL, "", exp, null));
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("initOrDerValue",7, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // propertyContextDecl ::= CONTEXT pathName simpleName COLON type initOrDerValue 
            {
              PropertyContextDeclAS RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		List path = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		int constraintsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int constraintsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		List constraints = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create PropertyContextDecl
								RESULT = factory.buildPropertyContextDeclaration(path, name, type, constraints);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("propertyContextDecl",6, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // contextDeclaration ::= operationContextDecl 
            {
              ContextDeclarationAS RESULT =null;
		int contextDeclleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int contextDeclright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OperationContextDeclAS contextDecl = (OperationContextDeclAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Copy rule
								RESULT = contextDecl;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("contextDeclaration",2, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // contextDeclaration ::= classifierContextDecl 
            {
              ContextDeclarationAS RESULT =null;
		int contextDeclleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int contextDeclright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		ClassifierContextDeclAS contextDecl = (ClassifierContextDeclAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Copy rule
								RESULT = contextDecl;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("contextDeclaration",2, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // contextDeclaration ::= propertyContextDecl 
            {
              ContextDeclarationAS RESULT =null;
		int contextDeclleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int contextDeclright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		PropertyContextDeclAS contextDecl = (PropertyContextDeclAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Copy rule
								RESULT = contextDecl;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("contextDeclaration",2, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // contextDeclList ::= contextDeclList contextDeclaration 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		int contextDeclleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int contextDeclright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		ContextDeclarationAS contextDecl = (ContextDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Add element to list
								RESULT = list;
								RESULT.add(contextDecl);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("contextDeclList",1, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // contextDeclList ::= 
            {
              List RESULT =null;
		
								// Create a LIST
								RESULT = new Vector();
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("contextDeclList",1, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // packageDeclaration ::= contextDeclList 
            {
              PackageDeclarationAS RESULT =null;
		int contextDeclsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int contextDeclsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		List contextDecls = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a PackageDeclaration
								RESULT = factory.buildPackageDeclaration(new Vector(), contextDecls);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("packageDeclaration",0, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // packageDeclaration ::= PACKAGE pathName contextDeclList ENDPACKAGE 
            {
              PackageDeclarationAS RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List path = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int contextDeclsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int contextDeclsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List contextDecls = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create a PackageDeclaration
								RESULT = factory.buildPackageDeclaration(path, contextDecls);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("packageDeclaration",0, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // paramDeclarationList ::= paramDeclarationList COMMA paramDeclaration 
            {
              List RESULT =null;
		int paramDeclarationListleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int paramDeclarationListright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List paramDeclarationList = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int paramDeclarationleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int paramDeclarationright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		ParameterDeclarationAS paramDeclaration = (ParameterDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Add parameter declaration to parameter declaration list
								RESULT = paramDeclarationList;
								RESULT.add(paramDeclaration);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("paramDeclarationList",64, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // paramDeclarationList ::= paramDeclaration 
            {
              List RESULT =null;
		int paramDeclarationleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int paramDeclarationright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		ParameterDeclarationAS paramDeclaration = (ParameterDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a LIST 
								RESULT = new Vector();
								RESULT.add(paramDeclaration);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("paramDeclarationList",64, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // paramDeclarationList ::= 
            {
              List RESULT =null;
		
								// Create a LIST 
								RESULT = new Vector();
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("paramDeclarationList",64, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // paramDeclaration ::= simpleName COLON type 
            {
              ParameterDeclarationAS RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create ParameterDeclaration
								RESULT = factory.buildParameterDeclaration(name, type);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("paramDeclaration",63, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // semiOroclExpressionInBra ::= LEFT_BRA oclExpression RIGHT_BRA 
            {
              OclExpressionAS RESULT =null;
		int oclExpressionleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int oclExpressionright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		OclExpressionAS oclExpression = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								RESULT = oclExpression;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("semiOroclExpressionInBra",62, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // semiOroclExpressionInBra ::= SEMICOLON 
            {
              OclExpressionAS RESULT =null;
		
								RESULT = null;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("semiOroclExpressionInBra",62, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // query ::= QUERY pathName LEFT_PAR paramDeclarationList RIGHT_PAR COLON type semiOroclExpressionInBra 
            {
              QueryAS RESULT =null;
		int pathNameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)).left;
		int pathNameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)).right;
		List pathName = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)).value;
		int parameterDeclarationsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int parameterDeclarationsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		List parameterDeclarations = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS body = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create Query
								RESULT = factory.buildQuery(pathName, parameterDeclarations, type, body);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("query",61, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // predicate ::= error SEMICOLON 
            {
              OclExpressionAS RESULT =null;
		
								// error recovery
								RESULT = null;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("predicate",60, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // predicate ::= oclExpression SEMICOLON 
            {
              OclExpressionAS RESULT =null;
		int oclExpressionleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int oclExpressionright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		OclExpressionAS oclExpression = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create Query
								RESULT = oclExpression;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("predicate",60, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // pattern ::= pattern predicate 
            {
              List RESULT =null;
		int patternleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int patternright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List pattern = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		int predicateleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int predicateright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS predicate = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Add predicate to pattern
								RESULT = pattern;
								if (predicate != null /*null if error recovery occured*/) {
									RESULT.add(predicate);
								}
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("pattern",59, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // pattern ::= 
            {
              List RESULT =null;
		
								// Create a LIST 
								RESULT = new Vector();
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("pattern",59, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // where ::= WHERE LEFT_BRA pattern RIGHT_BRA 
            {
              List RESULT =null;
		int patternleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int patternright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List pattern = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								RESULT = pattern;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("where",58, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // where ::= 
            {
              List RESULT =null;
		
								RESULT = new Vector();
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("where",58, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // when ::= WHEN LEFT_BRA pattern RIGHT_BRA 
            {
              List RESULT =null;
		int patternleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int patternright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List pattern = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								RESULT = pattern;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("when",57, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // when ::= 
            {
              List RESULT =null;
		
								RESULT = new Vector();
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("when",57, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // checkEnforceQualifier ::= ENFORCE 
            {
              ExecutionKindAS RESULT =null;
		
								RESULT = ExecutionKindAS.ENFORCE_LITERAL;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("checkEnforceQualifier",56, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // checkEnforceQualifier ::= CHECKONLY 
            {
              ExecutionKindAS RESULT =null;
		
								RESULT = ExecutionKindAS.CHECK_ONLY_LITERAL;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("checkEnforceQualifier",56, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // primitiveTypeDomain ::= PRIMITIVE DOMAIN simpleName COLON type SEMICOLON 
            {
              PrimitiveDomainAS RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create PrimitiveDomain
								RESULT = factory.buildPrimitiveDomain(name, type);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("primitiveTypeDomain",55, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // propertyTemplateList ::= propertyTemplateList COMMA propertyTemplate 
            {
              List RESULT =null;
		int propertyTemplateListleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int propertyTemplateListright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List propertyTemplateList = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int propertyTemplateleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int propertyTemplateright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		PropertyTemplateAS propertyTemplate = (PropertyTemplateAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Add property template to property template list
								RESULT = propertyTemplateList;
								RESULT.add(propertyTemplate);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("propertyTemplateList",54, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // propertyTemplateList ::= propertyTemplate 
            {
              List RESULT =null;
		int propertyTemplateleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int propertyTemplateright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		PropertyTemplateAS propertyTemplate = (PropertyTemplateAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a LIST and add first property template 
								RESULT = new Vector();
								RESULT.add(propertyTemplate);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("propertyTemplateList",54, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // propertyTemplateList ::= 
            {
              List RESULT =null;
		
								// Create a LIST 
								RESULT = new Vector();
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("propertyTemplateList",54, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // optionalIdentifier ::= simpleName 
            {
              String RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// identifier
								RESULT = identifier;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("optionalIdentifier",53, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // optionalIdentifier ::= 
            {
              String RESULT =null;
		
								// no identifier
								RESULT = null;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("optionalIdentifier",53, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // implementedByOperation ::= IMPLEMENTEDBY oclExpression 
            {
              DotSelectionExpAS RESULT =null;
		int oclExpressionleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int oclExpressionright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		OclExpressionAS oclExpression = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// TODO make better
								// TODOMWA remove cast !! change model 
								RESULT = (DotSelectionExpAS)oclExpression;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("implementedByOperation",52, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // implementedByOperation ::= 
            {
              DotSelectionExpAS RESULT =null;
		
								RESULT = null;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("implementedByOperation",52, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // oclExpressionInBra ::= LEFT_BRA oclExpression RIGHT_BRA 
            {
              OclExpressionAS RESULT =null;
		int oclExpressionleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int oclExpressionright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		OclExpressionAS oclExpression = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								RESULT = oclExpression;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpressionInBra",51, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // oclExpressionInBra ::= 
            {
              OclExpressionAS RESULT =null;
		
								RESULT = null;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("oclExpressionInBra",51, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // domain ::= checkEnforceQualifier DOMAIN simpleName optionalIdentifier COLON type LEFT_BRA propertyTemplateList RIGHT_BRA oclExpressionInBra implementedByOperation SEMICOLON 
            {
              DomainAS RESULT =null;
		int checkEnforceQualifierleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-11)).left;
		int checkEnforceQualifierright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-11)).right;
		ExecutionKindAS checkEnforceQualifier = (ExecutionKindAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-11)).value;
		int modelIdleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).left;
		int modelIdright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).right;
		String modelId = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-8)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-8)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-8)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)).value;
		int propertyTemplateListleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int propertyTemplateListright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		List propertyTemplateList = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		OclExpressionAS body = (OclExpressionAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int implementedByleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int implementedByright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		DotSelectionExpAS implementedBy = (DotSelectionExpAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create VariableDeclaration
								RESULT = factory.buildDomain(checkEnforceQualifier, modelId, name, type, propertyTemplateList, body, implementedBy);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("domain",50, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-11)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // varDeclarationList ::= varDeclarationList varDeclaration 
            {
              List RESULT =null;
		int varDeclarationListleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int varDeclarationListright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List varDeclarationList = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		int varDeclarationleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int varDeclarationright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		org.oslo.ocl20.syntax.ast.qvt.VariableDeclarationAS varDeclaration = (org.oslo.ocl20.syntax.ast.qvt.VariableDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Add primitive type domain to domain list
								RESULT = varDeclarationList;
								RESULT.add(varDeclaration);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("varDeclarationList",49, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // varDeclarationList ::= 
            {
              List RESULT =null;
		
								// Create a LIST 
								RESULT = new Vector();
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("varDeclarationList",49, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // varDeclaration ::= identifierList COLON type SEMICOLON 
            {
              org.oslo.ocl20.syntax.ast.qvt.VariableDeclarationAS RESULT =null;
		int namesleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int namesright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		List names = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		TypeAS type = (TypeAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create VariableDeclaration
								RESULT = factory.buildVariableDeclaration(names, type);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("varDeclaration",48, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // isOverriding ::= OVERRIDES simpleName 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// override 
								RESULT = name;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("isOverriding",47, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // isOverriding ::= 
            {
              String RESULT =null;
		
								// override nothing
								RESULT = null;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("isOverriding",47, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // isTopLevel ::= TOP 
            {
              Boolean RESULT =null;
		
								// no top level
								RESULT = new Boolean(true);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("isTopLevel",46, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // isTopLevel ::= 
            {
              Boolean RESULT =null;
		
								// no top level
								RESULT = new Boolean(false);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("isTopLevel",46, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // domainOrprimitiveTypeDomainList ::= domainOrprimitiveTypeDomainList primitiveTypeDomain 
            {
              List RESULT =null;
		int domainOrprimitiveTypeDomainListleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int domainOrprimitiveTypeDomainListright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List domainOrprimitiveTypeDomainList = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		int primitiveTypeDomainleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int primitiveTypeDomainright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		PrimitiveDomainAS primitiveTypeDomain = (PrimitiveDomainAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Add primitive type domain to domain list
								RESULT = domainOrprimitiveTypeDomainList;
								RESULT.add(primitiveTypeDomain);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("domainOrprimitiveTypeDomainList",45, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // domainOrprimitiveTypeDomainList ::= domainOrprimitiveTypeDomainList domain 
            {
              List RESULT =null;
		int domainOrprimitiveTypeDomainListleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int domainOrprimitiveTypeDomainListright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List domainOrprimitiveTypeDomainList = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		DomainAS domain = (DomainAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Add domain to domain list
								RESULT = domainOrprimitiveTypeDomainList;
								RESULT.add(domain);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("domainOrprimitiveTypeDomainList",45, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // domainOrprimitiveTypeDomainList ::= primitiveTypeDomain 
            {
              List RESULT =null;
		int primitiveTypeDomainleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int primitiveTypeDomainright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		PrimitiveDomainAS primitiveTypeDomain = (PrimitiveDomainAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a LIST and add primitive type domain
								RESULT = new Vector();
								RESULT.add(primitiveTypeDomain);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("domainOrprimitiveTypeDomainList",45, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // domainOrprimitiveTypeDomainList ::= domain 
            {
              List RESULT =null;
		int domainleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		DomainAS domain = (DomainAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a LIST and add domain
								RESULT = new Vector();
								RESULT.add(domain);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("domainOrprimitiveTypeDomainList",45, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // relation ::= isTopLevel RELATION simpleName isOverriding LEFT_BRA varDeclarationList domainOrprimitiveTypeDomainList when where RIGHT_BRA 
            {
              RelationAS RESULT =null;
		int isToplevelleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).left;
		int isToplevelright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).right;
		Boolean isToplevel = (Boolean)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-7)).value;
		int isOverridingleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)).left;
		int isOverridingright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)).right;
		String isOverriding = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)).value;
		int varDeclarationListleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int varDeclarationListright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		List varDeclarationList = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int domainOrprimitiveTypeDomainListleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int domainOrprimitiveTypeDomainListright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		List domainOrprimitiveTypeDomainList = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int whenleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int whenright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List when = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int whereleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int whereright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List where = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create a Relation
								RESULT = factory.buildRelation(isToplevel, name, isOverriding, varDeclarationList, domainOrprimitiveTypeDomainList, when, where);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("relation",44, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // propertyIdList ::= propertyIdList COMMA simpleName 
            {
              List RESULT =null;
		int propertyIdListleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int propertyIdListright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List propertyIdList = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int propertyIdleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int propertyIdright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		String propertyId = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Add meta model id to meta model id list
								RESULT = propertyIdList;
								RESULT.add(propertyId);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("propertyIdList",43, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // propertyIdList ::= simpleName 
            {
              List RESULT =null;
		int propertyIdleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int propertyIdright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		String propertyId = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a LIST and add property id
								RESULT = new Vector();
								RESULT.add(propertyId);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("propertyIdList",43, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // keyDecl ::= KEY pathName LEFT_BRA propertyIdList RIGHT_BRA SEMICOLON 
            {
              KeyDeclarationAS RESULT =null;
		int classIdleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int classIdright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		List classId = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int propertyIdsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int propertyIdsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List propertyIds = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		
								// Create a KeyDeclaration
								RESULT = factory.buildKeyDeclaration(classId, propertyIds);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("keyDecl",42, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-5)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // metaModelIdList ::= metaModelIdList COMMA simpleName 
            {
              List RESULT =null;
		int metaModelIdListleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int metaModelIdListright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List metaModelIdList = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int metaModelIdleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int metaModelIdright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		String metaModelId = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Add meta model id to meta model id list
								RESULT = metaModelIdList;
								RESULT.add(metaModelId);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("metaModelIdList",41, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // metaModelIdList ::= simpleName 
            {
              List RESULT =null;
		int metaModelIdleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int metaModelIdright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		String metaModelId = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a LIST and add first meta model id
								RESULT = new Vector();
								RESULT.add(metaModelId);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("metaModelIdList",41, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // modelDecl ::= simpleName COLON metaModelIdList 
            {
              ModelDeclarationAS RESULT =null;
		int modelIdleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int modelIdright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		String modelId = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int metaModelIdsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int metaModelIdsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		List metaModelIds = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a ModelDeclaration
								RESULT = factory.buildModelDeclaration(modelId, metaModelIds);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("modelDecl",40, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // relationOrQueryList ::= relationOrQueryList query 
            {
              List RESULT =null;
		int relationOrQueryListleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int relationOrQueryListright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List relationOrQueryList = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		int queryleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int queryright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		QueryAS query = (QueryAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Add query to relation or query list
								RESULT = relationOrQueryList;
								RESULT.add(query);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("relationOrQueryList",39, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // relationOrQueryList ::= relationOrQueryList relation 
            {
              List RESULT =null;
		int relationOrQueryListleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int relationOrQueryListright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List relationOrQueryList = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		int relationleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int relationright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		RelationAS relation = (RelationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Add relation to relation or query list
								RESULT = relationOrQueryList;
								RESULT.add(relation);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("relationOrQueryList",39, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // relationOrQueryList ::= 
            {
              List RESULT =null;
		
								// Create a LIST
								RESULT = new Vector();
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("relationOrQueryList",39, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // keyDeclList ::= keyDeclList keyDecl 
            {
              List RESULT =null;
		int keyDeclListleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int keyDeclListright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List keyDeclList = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		int keyDeclleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int keyDeclright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		KeyDeclarationAS keyDecl = (KeyDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Add key declaration to key declaration list
								RESULT = keyDeclList;
								RESULT.add(keyDecl);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("keyDeclList",38, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // keyDeclList ::= 
            {
              List RESULT =null;
		
								// Create a LIST
								RESULT = new Vector();
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("keyDeclList",38, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // identifierList ::= identifierList COMMA simpleName 
            {
              List RESULT =null;
		int identifierListleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int identifierListright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List identifierList = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int simpleNameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int simpleNameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		String simpleName = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Add identifier to identifier list
								RESULT = identifierList;
								RESULT.add(simpleName);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("identifierList",37, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // identifierList ::= simpleName 
            {
              List RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a LIST and insert first identifier
								RESULT = new Vector();
								RESULT.add(name);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("identifierList",37, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // modelDeclList ::= modelDeclList COMMA modelDecl 
            {
              List RESULT =null;
		int modelDeclListleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int modelDeclListright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List modelDeclList = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int modelDeclleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int modelDeclright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		ModelDeclarationAS modelDecl = (ModelDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Add model declaration to model declaration list
								RESULT = modelDeclList;
								RESULT.add(modelDecl);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("modelDeclList",36, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // modelDeclList ::= modelDecl 
            {
              List RESULT =null;
		int modelDeclleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int modelDeclright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		ModelDeclarationAS modelDecl = (ModelDeclarationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a LIST and insert first model declaration
								RESULT = new Vector();
								RESULT.add(modelDecl);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("modelDeclList",36, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // isExtending ::= EXTENDS identifierList 
            {
              List RESULT =null;
		int identifierListleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int identifierListright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		List identifierList = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// return identifier list
								RESULT = identifierList;
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("isExtending",35, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // isExtending ::= 
            {
              List RESULT =null;
		
								// Create a LIST
								RESULT = new Vector();
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("isExtending",35, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // transformation ::= TRANSFORMATION simpleName LEFT_PAR modelDeclList RIGHT_PAR isExtending LEFT_BRA keyDeclList relationOrQueryList RIGHT_BRA 
            {
              TransformationAS RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-8)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-8)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-8)).value;
		int modelDeclarationsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)).left;
		int modelDeclarationsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)).right;
		List modelDeclarations = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-6)).value;
		int extends1left = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).left;
		int extends1right = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).right;
		List extends1 = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-4)).value;
		int keyDeclarationsleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).left;
		int keyDeclarationsright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).right;
		List keyDeclarations = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-2)).value;
		int relationsOrQuerysleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int relationsOrQuerysright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List relationsOrQuerys = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Create a Transformation
								RESULT = factory.buildTransformation(name, modelDeclarations, extends1 , keyDeclarations, relationsOrQuerys);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("transformation",34, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-9)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // transformationList ::= transformationList transformation 
            {
              List RESULT =null;
		int transformationListleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int transformationListright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List transformationList = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		int transformationleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int transformationright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		TransformationAS transformation = (TransformationAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Add transformation to transformation list
								RESULT = transformationList;
								RESULT.add(transformation);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("transformationList",33, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // transformationList ::= 
            {
              List RESULT =null;
		
								// Create a LIST
								RESULT = new Vector();
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("transformationList",33, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // importFileList ::= importFileList IMPORT simpleName SEMICOLON 
            {
              List RESULT =null;
		int importFileListleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).left;
		int importFileListright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).right;
		List importFileList = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		
								// Add file to import file list
								RESULT = importFileList;
								RESULT.add(name);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("importFileList",32, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-3)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // importFileList ::= 
            {
              List RESULT =null;
		
								// Create a LIST
								RESULT = new Vector();
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("importFileList",32, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // topLevel ::= importFileList transformationList 
            {
              TopLevelAS RESULT =null;
		int importFileListleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int importFileListright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		List importFileList = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		int transformationListleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).left;
		int transformationListright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()).right;
		List transformationList = (List)((java_cup.runtime.Symbol) CUP$Yyparse$stack.peek()).value;
		
								// Create a PackageDeclaration
								RESULT = factory.buildTopLevel(importFileList, transformationList);
							
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("topLevel",31, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          return CUP$Yyparse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= topLevel EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).right;
		TopLevelAS start_val = (TopLevelAS)((java_cup.runtime.Symbol) CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)).value;
		RESULT = start_val;
              CUP$Yyparse$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Yyparse$stack.elementAt(CUP$Yyparse$top-1)), ((java_cup.runtime.Symbol)CUP$Yyparse$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Yyparse$parser.done_parsing();
          return CUP$Yyparse$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

