/**
 * Generated by the MOIN Generator Version 3.0
 **/

package euml.presentation.graphic.__impl;

public class DiagramConnectorDiagramElementWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<euml.presentation.graphic.DiagramConnectorDiagramElement> implements euml.presentation.graphic.DiagramConnectorDiagramElement,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The DiagramConnectorDiagramElement wrapper
     */
    public DiagramConnectorDiagramElementWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, euml.presentation.graphic.__impl.DiagramConnectorDiagramElementImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private euml.presentation.graphic.__impl.DiagramConnectorDiagramElementImpl getCastWrappedObject() {
        return (euml.presentation.graphic.__impl.DiagramConnectorDiagramElementImpl) getWrappedObject();
    }

    public euml.presentation.graphic.DiagramConnectorDiagramElement unwrap() {
        return (euml.presentation.graphic.DiagramConnectorDiagramElement) getWrappedObject();
    }
    
    public boolean exists(euml.presentation.graphic.DiagramConnector _TheConnectors, euml.presentation.graphic.DiagramElement _TheDiagramObjects) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheConnectors), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheDiagramObjects));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheConnectors), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheDiagramObjects)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getTheConnectors(euml.presentation.graphic.DiagramElement _TheDiagramObjects) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getTheConnectors(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheDiagramObjects)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getTheConnectors(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheDiagramObjects))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.List getTheDiagramObjects(euml.presentation.graphic.DiagramConnector _TheConnectors) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.List) wrapResult(getCastWrappedObject().getTheDiagramObjects(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheConnectors)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.List) wrapResult(getCastWrappedObject().getTheDiagramObjects(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheConnectors))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(euml.presentation.graphic.DiagramConnector _TheConnectors, euml.presentation.graphic.DiagramElement _TheDiagramObjects) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheConnectors), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheDiagramObjects));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheConnectors), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheDiagramObjects)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(euml.presentation.graphic.DiagramConnector _TheConnectors, euml.presentation.graphic.DiagramElement _TheDiagramObjects) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheConnectors), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheDiagramObjects));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheConnectors), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheDiagramObjects)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<euml.presentation.graphic.DiagramConnectorDiagramElement> get___JmiInterface() {
        return euml.presentation.graphic.DiagramConnectorDiagramElement.class;
    }

    protected String metaObjectToString() {
        return "euml.presentation.graphic.DiagramConnectorDiagramElement (Java Type)\nEUML.Presentation.Graphic.DiagramConnector_DiagramElement (MOF Type)"; //$NON-NLS-1$
    }    
}