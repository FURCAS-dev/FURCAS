/**
 * Generated by the MOIN Generator Version 3.0
 **/

package euml.presentation.graphic.__impl;

public class DiagramElementInvisibleRegionWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<euml.presentation.graphic.DiagramElementInvisibleRegion> implements euml.presentation.graphic.DiagramElementInvisibleRegion,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The DiagramElementInvisibleRegion wrapper
     */
    public DiagramElementInvisibleRegionWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, euml.presentation.graphic.__impl.DiagramElementInvisibleRegionImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private euml.presentation.graphic.__impl.DiagramElementInvisibleRegionImpl getCastWrappedObject() {
        return (euml.presentation.graphic.__impl.DiagramElementInvisibleRegionImpl) getWrappedObject();
    }

    public euml.presentation.graphic.DiagramElementInvisibleRegion unwrap() {
        return (euml.presentation.graphic.DiagramElementInvisibleRegion) getWrappedObject();
    }
    
    public boolean exists(euml.presentation.graphic.DiagramElement _TheElement, euml.presentation.graphic.InvisibleRegion _TheRegions) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheElement), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheRegions));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheElement), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheRegions)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public euml.presentation.graphic.DiagramElement getTheElement(euml.presentation.graphic.InvisibleRegion _TheRegions) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (euml.presentation.graphic.DiagramElement) wrapResult(getCastWrappedObject().getTheElement(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheRegions)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (euml.presentation.graphic.DiagramElement) wrapResult(getCastWrappedObject().getTheElement(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheRegions))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public euml.presentation.graphic.InvisibleRegion getTheRegions(euml.presentation.graphic.DiagramElement _TheElement) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (euml.presentation.graphic.InvisibleRegion) wrapResult(getCastWrappedObject().getTheRegions(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheElement)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (euml.presentation.graphic.InvisibleRegion) wrapResult(getCastWrappedObject().getTheRegions(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheElement))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(euml.presentation.graphic.DiagramElement _TheElement, euml.presentation.graphic.InvisibleRegion _TheRegions) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheElement), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheRegions));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheElement), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheRegions)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(euml.presentation.graphic.DiagramElement _TheElement, euml.presentation.graphic.InvisibleRegion _TheRegions) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheElement), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheRegions));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheElement), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheRegions)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<euml.presentation.graphic.DiagramElementInvisibleRegion> get___JmiInterface() {
        return euml.presentation.graphic.DiagramElementInvisibleRegion.class;
    }

    protected String metaObjectToString() {
        return "euml.presentation.graphic.DiagramElementInvisibleRegion (Java Type)\nEUML.Presentation.Graphic.DiagramElement_InvisibleRegion (MOF Type)"; //$NON-NLS-1$
    }    
}