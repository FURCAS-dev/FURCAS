/**
 * Generated by the MOIN Generator Version 3.0
 **/

package euml.presentation.graphic.__impl;

public class CanvasRepresentaiveWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<euml.presentation.graphic.CanvasRepresentaive> implements euml.presentation.graphic.CanvasRepresentaive,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The CanvasRepresentaive wrapper
     */
    public CanvasRepresentaiveWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, euml.presentation.graphic.__impl.CanvasRepresentaiveImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private euml.presentation.graphic.__impl.CanvasRepresentaiveImpl getCastWrappedObject() {
        return (euml.presentation.graphic.__impl.CanvasRepresentaiveImpl) getWrappedObject();
    }

    public euml.presentation.graphic.CanvasRepresentaive unwrap() {
        return (euml.presentation.graphic.CanvasRepresentaive) getWrappedObject();
    }
    
    public boolean exists(euml.presentation.graphic.Canvas _TheDiagram, euml.presentation.graphic.Representaive _TheObjectOnDiagram) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheDiagram), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheObjectOnDiagram));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheDiagram), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheObjectOnDiagram)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public euml.presentation.graphic.Canvas getTheDiagram(euml.presentation.graphic.Representaive _TheObjectOnDiagram) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (euml.presentation.graphic.Canvas) wrapResult(getCastWrappedObject().getTheDiagram(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheObjectOnDiagram)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (euml.presentation.graphic.Canvas) wrapResult(getCastWrappedObject().getTheDiagram(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheObjectOnDiagram))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getTheObjectOnDiagram(euml.presentation.graphic.Canvas _TheDiagram) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getTheObjectOnDiagram(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheDiagram)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getTheObjectOnDiagram(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheDiagram))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(euml.presentation.graphic.Canvas _TheDiagram, euml.presentation.graphic.Representaive _TheObjectOnDiagram) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheDiagram), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheObjectOnDiagram));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheDiagram), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheObjectOnDiagram)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(euml.presentation.graphic.Canvas _TheDiagram, euml.presentation.graphic.Representaive _TheObjectOnDiagram) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheDiagram), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheObjectOnDiagram));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheDiagram), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TheObjectOnDiagram)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<euml.presentation.graphic.CanvasRepresentaive> get___JmiInterface() {
        return euml.presentation.graphic.CanvasRepresentaive.class;
    }

    protected String metaObjectToString() {
        return "euml.presentation.graphic.CanvasRepresentaive (Java Type)\nEUML.Presentation.Graphic.Canvas_Representaive (MOF Type)"; //$NON-NLS-1$
    }    
}