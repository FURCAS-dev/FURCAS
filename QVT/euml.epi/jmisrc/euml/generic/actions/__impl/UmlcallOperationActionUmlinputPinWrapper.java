/**
 * Generated by the MOIN Generator Version 3.0
 **/

package euml.generic.actions.__impl;

public class UmlcallOperationActionUmlinputPinWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<euml.generic.actions.UmlcallOperationActionUmlinputPin> implements euml.generic.actions.UmlcallOperationActionUmlinputPin,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The UmlcallOperationActionUmlinputPin wrapper
     */
    public UmlcallOperationActionUmlinputPinWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, euml.generic.actions.__impl.UmlcallOperationActionUmlinputPinImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private euml.generic.actions.__impl.UmlcallOperationActionUmlinputPinImpl getCastWrappedObject() {
        return (euml.generic.actions.__impl.UmlcallOperationActionUmlinputPinImpl) getWrappedObject();
    }

    public euml.generic.actions.UmlcallOperationActionUmlinputPin unwrap() {
        return (euml.generic.actions.UmlcallOperationActionUmlinputPin) getWrappedObject();
    }
    
    public boolean exists(euml.generic.actions.UmlcallOperationAction _Umlcalloperationaction, euml.generic.activities.UmlinputPin _Target) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Umlcalloperationaction), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Target));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Umlcalloperationaction), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Target)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getUmlcalloperationaction(euml.generic.activities.UmlinputPin _Target) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getUmlcalloperationaction(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Target)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getUmlcalloperationaction(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Target))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public euml.generic.activities.UmlinputPin getTarget(euml.generic.actions.UmlcallOperationAction _Umlcalloperationaction) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (euml.generic.activities.UmlinputPin) wrapResult(getCastWrappedObject().getTarget(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Umlcalloperationaction)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (euml.generic.activities.UmlinputPin) wrapResult(getCastWrappedObject().getTarget(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Umlcalloperationaction))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(euml.generic.actions.UmlcallOperationAction _Umlcalloperationaction, euml.generic.activities.UmlinputPin _Target) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Umlcalloperationaction), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Target));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Umlcalloperationaction), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Target)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(euml.generic.actions.UmlcallOperationAction _Umlcalloperationaction, euml.generic.activities.UmlinputPin _Target) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Umlcalloperationaction), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Target));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Umlcalloperationaction), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Target)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<euml.generic.actions.UmlcallOperationActionUmlinputPin> get___JmiInterface() {
        return euml.generic.actions.UmlcallOperationActionUmlinputPin.class;
    }

    protected String metaObjectToString() {
        return "euml.generic.actions.UmlcallOperationActionUmlinputPin (Java Type)\nEUML.Generic.Actions.UMLCallOperationAction_UMLInputPin (MOF Type)"; //$NON-NLS-1$
    }    
}