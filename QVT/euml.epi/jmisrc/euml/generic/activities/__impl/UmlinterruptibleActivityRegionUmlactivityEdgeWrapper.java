/**
 * Generated by the MOIN Generator Version 3.0
 **/

package euml.generic.activities.__impl;

public class UmlinterruptibleActivityRegionUmlactivityEdgeWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<euml.generic.activities.UmlinterruptibleActivityRegionUmlactivityEdge> implements euml.generic.activities.UmlinterruptibleActivityRegionUmlactivityEdge,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The UmlinterruptibleActivityRegionUmlactivityEdge wrapper
     */
    public UmlinterruptibleActivityRegionUmlactivityEdgeWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, euml.generic.activities.__impl.UmlinterruptibleActivityRegionUmlactivityEdgeImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private euml.generic.activities.__impl.UmlinterruptibleActivityRegionUmlactivityEdgeImpl getCastWrappedObject() {
        return (euml.generic.activities.__impl.UmlinterruptibleActivityRegionUmlactivityEdgeImpl) getWrappedObject();
    }

    public euml.generic.activities.UmlinterruptibleActivityRegionUmlactivityEdge unwrap() {
        return (euml.generic.activities.UmlinterruptibleActivityRegionUmlactivityEdge) getWrappedObject();
    }
    
    public boolean exists(euml.generic.activities.UmlinterruptibleActivityRegion _Interrupts, euml.generic.activities.UmlactivityEdge _InterruptingEdges) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Interrupts), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _InterruptingEdges));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Interrupts), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _InterruptingEdges)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public euml.generic.activities.UmlinterruptibleActivityRegion getInterrupts(euml.generic.activities.UmlactivityEdge _InterruptingEdges) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (euml.generic.activities.UmlinterruptibleActivityRegion) wrapResult(getCastWrappedObject().getInterrupts(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _InterruptingEdges)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (euml.generic.activities.UmlinterruptibleActivityRegion) wrapResult(getCastWrappedObject().getInterrupts(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _InterruptingEdges))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.List getInterruptingEdges(euml.generic.activities.UmlinterruptibleActivityRegion _Interrupts) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.List) wrapResult(getCastWrappedObject().getInterruptingEdges(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Interrupts)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.List) wrapResult(getCastWrappedObject().getInterruptingEdges(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Interrupts))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(euml.generic.activities.UmlinterruptibleActivityRegion _Interrupts, euml.generic.activities.UmlactivityEdge _InterruptingEdges) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Interrupts), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _InterruptingEdges));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Interrupts), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _InterruptingEdges)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(euml.generic.activities.UmlinterruptibleActivityRegion _Interrupts, euml.generic.activities.UmlactivityEdge _InterruptingEdges) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Interrupts), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _InterruptingEdges));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Interrupts), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _InterruptingEdges)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<euml.generic.activities.UmlinterruptibleActivityRegionUmlactivityEdge> get___JmiInterface() {
        return euml.generic.activities.UmlinterruptibleActivityRegionUmlactivityEdge.class;
    }

    protected String metaObjectToString() {
        return "euml.generic.activities.UmlinterruptibleActivityRegionUmlactivityEdge (Java Type)\nEUML.Generic.Activities.UMLInterruptibleActivityRegion_UMLActivityEdge (MOF Type)"; //$NON-NLS-1$
    }    
}