/**
 * Generated by the MOIN Generator Version 3.0
 **/

package euml.generic.activities.__impl;

public class UmlexceptionHandlerUmlactionWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<euml.generic.activities.UmlexceptionHandlerUmlaction> implements euml.generic.activities.UmlexceptionHandlerUmlaction,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The UmlexceptionHandlerUmlaction wrapper
     */
    public UmlexceptionHandlerUmlactionWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, euml.generic.activities.__impl.UmlexceptionHandlerUmlactionImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private euml.generic.activities.__impl.UmlexceptionHandlerUmlactionImpl getCastWrappedObject() {
        return (euml.generic.activities.__impl.UmlexceptionHandlerUmlactionImpl) getWrappedObject();
    }

    public euml.generic.activities.UmlexceptionHandlerUmlaction unwrap() {
        return (euml.generic.activities.UmlexceptionHandlerUmlaction) getWrappedObject();
    }
    
    public boolean exists(euml.generic.activities.UmlexceptionHandler _Umlexceptionhandler, euml.generic.activities.Umlaction _HandlerBody) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Umlexceptionhandler), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _HandlerBody));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Umlexceptionhandler), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _HandlerBody)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public euml.generic.activities.UmlexceptionHandler getUmlexceptionhandler(euml.generic.activities.Umlaction _HandlerBody) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (euml.generic.activities.UmlexceptionHandler) wrapResult(getCastWrappedObject().getUmlexceptionhandler(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _HandlerBody)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (euml.generic.activities.UmlexceptionHandler) wrapResult(getCastWrappedObject().getUmlexceptionhandler(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _HandlerBody))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public euml.generic.activities.Umlaction getHandlerBody(euml.generic.activities.UmlexceptionHandler _Umlexceptionhandler) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (euml.generic.activities.Umlaction) wrapResult(getCastWrappedObject().getHandlerBody(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Umlexceptionhandler)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (euml.generic.activities.Umlaction) wrapResult(getCastWrappedObject().getHandlerBody(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Umlexceptionhandler))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(euml.generic.activities.UmlexceptionHandler _Umlexceptionhandler, euml.generic.activities.Umlaction _HandlerBody) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Umlexceptionhandler), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _HandlerBody));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Umlexceptionhandler), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _HandlerBody)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(euml.generic.activities.UmlexceptionHandler _Umlexceptionhandler, euml.generic.activities.Umlaction _HandlerBody) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Umlexceptionhandler), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _HandlerBody));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Umlexceptionhandler), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _HandlerBody)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<euml.generic.activities.UmlexceptionHandlerUmlaction> get___JmiInterface() {
        return euml.generic.activities.UmlexceptionHandlerUmlaction.class;
    }

    protected String metaObjectToString() {
        return "euml.generic.activities.UmlexceptionHandlerUmlaction (Java Type)\nEUML.Generic.Activities.UMLExceptionHandler_UMLAction (MOF Type)"; //$NON-NLS-1$
    }    
}