/**
 * Generated by the MOIN Generator Version 3.0
 **/

package euml.generic.activities.__impl;

public class UmlexceptionHandlerWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefObjectWrapperImpl<euml.generic.activities.__impl.UmlexceptionHandlerImpl> implements euml.generic.activities.UmlexceptionHandler,com.sap.tc.moin.repository.Partitionable {

        
    private static final java.util.Map<java.lang.String, java.lang.Integer> OPERATION_IDS;

    static {
        
        OPERATION_IDS = new java.util.HashMap<java.lang.String, java.lang.Integer>();
        OPERATION_IDS.put("deduce_type_code_and_stereotype", Integer.valueOf(0)); //$NON-NLS-1$
        OPERATION_IDS.put("delete_element", Integer.valueOf(1)); //$NON-NLS-1$
    }

    public UmlexceptionHandlerWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, euml.generic.activities.__impl.UmlexceptionHandlerImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    @SuppressWarnings("unused")
    private euml.generic.activities.__impl.UmlexceptionHandlerImpl getCastWrappedObject() {
        return (euml.generic.activities.__impl.UmlexceptionHandlerImpl) getWrappedObject();
    }
    
    private euml.generic.activities.__impl.UmlexceptionHandlerImpl getCastWrappedObject(com.sap.tc.moin.repository.core.CorePartitionable resolved) {
        return (euml.generic.activities.__impl.UmlexceptionHandlerImpl) resolved;
    }
    
    public euml.generic.activities.__impl.UmlexceptionHandlerImpl unwrap() {
        return (euml.generic.activities.__impl.UmlexceptionHandlerImpl) getWrappedObject();
    }
        
    // methods for attributes
    public java.lang.String getMediniIdentifier() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        com.sap.tc.moin.repository.core.CorePartitionable resolved = mriReference.getIfResolved();
        if (resolved != null) {
            return getCastWrappedObject(resolved).getMediniIdentifier();
        }
            try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().getMediniIdentifier();
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().getMediniIdentifier(); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public void setMediniIdentifier(java.lang.String newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setMediniIdentifier(connection, newValue);
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setMediniIdentifier(connection, newValue);
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public java.lang.String getTypeCode() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        com.sap.tc.moin.repository.core.CorePartitionable resolved = mriReference.getIfResolved();
        if (resolved != null) {
            return getCastWrappedObject(resolved).getTypeCode();
        }
            try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().getTypeCode();
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().getTypeCode(); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public void setTypeCode(java.lang.String newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setTypeCode(connection, newValue);
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setTypeCode(connection, newValue);
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public java.lang.String getStereotype() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        com.sap.tc.moin.repository.core.CorePartitionable resolved = mriReference.getIfResolved();
        if (resolved != null) {
            return getCastWrappedObject(resolved).getStereotype();
        }
            try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().getStereotype();
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().getStereotype(); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public void setStereotype(java.lang.String newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setStereotype(connection, newValue);
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setStereotype(connection, newValue);
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

     
    // methods for references
    public java.util.Collection<euml.presentation.graphic.Representaive> getTheRepresentative() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection<euml.presentation.graphic.Representaive>) wrapResult(getCastWrappedObject().getTheRepresentative(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection<euml.presentation.graphic.Representaive>) wrapResult(getCastWrappedObject().getTheRepresentative(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public java.util.List<euml.generic.relationships.UmldirectedRelationship> getTheRelationshipOfSource() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.List<euml.generic.relationships.UmldirectedRelationship>) wrapResult(getCastWrappedObject().getTheRelationshipOfSource(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.List<euml.generic.relationships.UmldirectedRelationship>) wrapResult(getCastWrappedObject().getTheRelationshipOfSource(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public java.util.Collection<euml.generic.relationships.Umltrace> getTargettrace() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection<euml.generic.relationships.Umltrace>) wrapResult(getCastWrappedObject().getTargettrace(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection<euml.generic.relationships.Umltrace>) wrapResult(getCastWrappedObject().getTargettrace(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public java.util.Collection<euml.generic.relationships.Umltrace> getSourcetrace() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection<euml.generic.relationships.Umltrace>) wrapResult(getCastWrappedObject().getSourcetrace(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection<euml.generic.relationships.Umltrace>) wrapResult(getCastWrappedObject().getSourcetrace(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public java.util.Collection<euml.generic.relationships.Umlrelationship> getRelationships() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection<euml.generic.relationships.Umlrelationship>) wrapResult(getCastWrappedObject().getRelationships(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection<euml.generic.relationships.Umlrelationship>) wrapResult(getCastWrappedObject().getRelationships(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public java.util.Collection<euml.generic.relationships.UmldirectedRelationship> getTheRelationshipOfTarget() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection<euml.generic.relationships.UmldirectedRelationship>) wrapResult(getCastWrappedObject().getTheRelationshipOfTarget(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection<euml.generic.relationships.UmldirectedRelationship>) wrapResult(getCastWrappedObject().getTheRelationshipOfTarget(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public euml.generic.kernel.AppliedStereotype getTheStereotype() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (euml.generic.kernel.AppliedStereotype) wrapResult(getCastWrappedObject().getTheStereotype(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (euml.generic.kernel.AppliedStereotype) wrapResult(getCastWrappedObject().getTheStereotype(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setTheStereotype(euml.generic.kernel.AppliedStereotype newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setTheStereotype(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setTheStereotype(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public java.util.List<euml.generic.kernel.Umlannotation> getTheAnnotation() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.List<euml.generic.kernel.Umlannotation>) wrapResult(getCastWrappedObject().getTheAnnotation(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.List<euml.generic.kernel.Umlannotation>) wrapResult(getCastWrappedObject().getTheAnnotation(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public java.util.List<euml.generic.kernel.Umlconstraint> getTheConstraint() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.List<euml.generic.kernel.Umlconstraint>) wrapResult(getCastWrappedObject().getTheConstraint(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.List<euml.generic.kernel.Umlconstraint>) wrapResult(getCastWrappedObject().getTheConstraint(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public java.util.List<euml.generic.kernel.Umlelement> getTheUtilizedElements() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.List<euml.generic.kernel.Umlelement>) wrapResult(getCastWrappedObject().getTheUtilizedElements(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.List<euml.generic.kernel.Umlelement>) wrapResult(getCastWrappedObject().getTheUtilizedElements(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public java.util.Collection<euml.generic.kernel.Umlelement> getTheUtilisingElements() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection<euml.generic.kernel.Umlelement>) wrapResult(getCastWrappedObject().getTheUtilisingElements(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection<euml.generic.kernel.Umlelement>) wrapResult(getCastWrappedObject().getTheUtilisingElements(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public java.util.List<euml.generic.kernel.Umlelement> getTheOwnedElements() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.List<euml.generic.kernel.Umlelement>) wrapResult(getCastWrappedObject().getTheOwnedElements(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.List<euml.generic.kernel.Umlelement>) wrapResult(getCastWrappedObject().getTheOwnedElements(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public euml.generic.kernel.Umlelement getTheOwner() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (euml.generic.kernel.Umlelement) wrapResult(getCastWrappedObject().getTheOwner(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (euml.generic.kernel.Umlelement) wrapResult(getCastWrappedObject().getTheOwner(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setTheOwner(euml.generic.kernel.Umlelement newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setTheOwner(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setTheOwner(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public euml.generic.activities.Umlaction getHandlerBody() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (euml.generic.activities.Umlaction) wrapResult(getCastWrappedObject().getHandlerBody(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (euml.generic.activities.Umlaction) wrapResult(getCastWrappedObject().getHandlerBody(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setHandlerBody(euml.generic.activities.Umlaction newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setHandlerBody(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setHandlerBody(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public euml.generic.activities.UmlobjectNode getExceptionInput() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (euml.generic.activities.UmlobjectNode) wrapResult(getCastWrappedObject().getExceptionInput(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (euml.generic.activities.UmlobjectNode) wrapResult(getCastWrappedObject().getExceptionInput(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setExceptionInput(euml.generic.activities.UmlobjectNode newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setExceptionInput(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setExceptionInput(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public java.util.Collection<euml.generic.kernel.Umlclassifier> getExceptionType() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection<euml.generic.kernel.Umlclassifier>) wrapResult(getCastWrappedObject().getExceptionType(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection<euml.generic.kernel.Umlclassifier>) wrapResult(getCastWrappedObject().getExceptionType(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



   
    // methods for modeled operations
    public void deduceTypeCodeAndStereotype() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            ___invokeOperation(connection, 0, "497EC0C88ED00C70EC4911DD863D000E35A783E4", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public void deleteElement() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            ___invokeOperation(connection, 1, "497EC11EC24236F0EC4911DD9CF8000E35A783E4", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    
    // methods for internal modeled operations
    private void invoke__deduceTypeCodeAndStereotype(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        // missing an implementation provided in either tag org.omg.sap2mof.OperationCodeJava or org.omg.sap2mof.OperationCodeOcl
    }
    private void invoke__deleteElement(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        // missing an implementation provided in either tag org.omg.sap2mof.OperationCodeJava or org.omg.sap2mof.OperationCodeOcl
    }

    // reflective methods
    @Override
    public Object refInvokeOperation(com.sap.tc.moin.repository.core.CoreConnection connection, java.lang.String requestedOperation, java.util.List<? extends Object> args) throws com.sap.tc.moin.repository.mmi.reflect.RefException {
        if (requestedOperation == null) {
            throw new com.sap.tc.moin.repository.mmi.reflect.InvalidNameException(requestedOperation);
        }
        java.lang.Integer operationId = OPERATION_IDS.get(requestedOperation);
        if (operationId == null) {
            throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException(requestedOperation, refMetaObject(), "refInvokeOperation(String)"); //$NON-NLS-1$
        }
        switch (operationId) {
                
            case 0:
                return ___invokeOperation( connection, operationId, "497EC0C88ED00C70EC4911DD863D000E35A783E4", args ); //$NON-NLS-1$    
                
            case 1:
                return ___invokeOperation( connection, operationId, "497EC11EC24236F0EC4911DD9CF8000E35A783E4", args ); //$NON-NLS-1$    
            default:
                throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException(requestedOperation, refMetaObject(), "refInvokeOperation(String)"); //$NON-NLS-1$
        }
    }

    @Override
    public Object invoke___Operation(com.sap.tc.moin.repository.core.CoreConnection connection, int operationId, java.util.List<? extends Object> args) throws com.sap.tc.moin.repository.mmi.reflect.RefException {
        switch (operationId) {
                
            case 0:
                invoke__deduceTypeCodeAndStereotype(connection);
                return null;    
                
            case 1:
                invoke__deleteElement(connection);
                return null;    
            default:
                throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException( operationId, refMetaObject( ), "invoke___Operation(int)"); //$NON-NLS-1$
        }

    }    

    // get the JMI interface
    @SuppressWarnings("unchecked")
    public java.lang.Class<euml.generic.activities.UmlexceptionHandler> get___JmiInterface() {
        return euml.generic.activities.UmlexceptionHandler.class;
    }

    // to String
    protected String metaObjectToString() {
        return "euml.generic.activities.UmlexceptionHandler (Java Type)\nEUML.Generic.Activities.UMLExceptionHandler (MOF Type)"; //$NON-NLS-1$
    }    
}