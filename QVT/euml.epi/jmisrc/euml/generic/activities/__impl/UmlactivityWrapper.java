/**
 * Generated by the MOIN Generator Version 3.0
 **/

package euml.generic.activities.__impl;

public class UmlactivityWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefObjectWrapperImpl<euml.generic.activities.__impl.UmlactivityImpl> implements euml.generic.activities.Umlactivity,com.sap.tc.moin.repository.Partitionable {

        
    private static final java.util.Map<java.lang.String, java.lang.Integer> OPERATION_IDS;
    
    static {
        
        OPERATION_IDS = new java.util.HashMap<java.lang.String, java.lang.Integer>();
        OPERATION_IDS.put("deduce_type_code_and_stereotype", Integer.valueOf(0)); //$NON-NLS-1$
        OPERATION_IDS.put("delete_element", Integer.valueOf(1)); //$NON-NLS-1$
        OPERATION_IDS.put("getqualifiedName", Integer.valueOf(2)); //$NON-NLS-1$
        OPERATION_IDS.put("getqualifiedAlias", Integer.valueOf(3)); //$NON-NLS-1$
        OPERATION_IDS.put("gettheNamespace", Integer.valueOf(4)); //$NON-NLS-1$
        OPERATION_IDS.put("gettheContainedElements", Integer.valueOf(5)); //$NON-NLS-1$
        OPERATION_IDS.put("getownedBehavior", Integer.valueOf(6)); //$NON-NLS-1$
        OPERATION_IDS.put("getownedTriggers", Integer.valueOf(7)); //$NON-NLS-1$
        OPERATION_IDS.put("getcollaborationUsages", Integer.valueOf(8)); //$NON-NLS-1$
        OPERATION_IDS.put("gettheBaseClassifiers", Integer.valueOf(9)); //$NON-NLS-1$
        OPERATION_IDS.put("getgeneralizations", Integer.valueOf(10)); //$NON-NLS-1$
        OPERATION_IDS.put("getownedPorts", Integer.valueOf(11)); //$NON-NLS-1$
        OPERATION_IDS.put("getownedConnectors", Integer.valueOf(12)); //$NON-NLS-1$
        OPERATION_IDS.put("getownedProperties", Integer.valueOf(13)); //$NON-NLS-1$
        OPERATION_IDS.put("getparts", Integer.valueOf(14)); //$NON-NLS-1$
        OPERATION_IDS.put("getportUsages", Integer.valueOf(15)); //$NON-NLS-1$
        OPERATION_IDS.put("getownedOperation", Integer.valueOf(16)); //$NON-NLS-1$
        OPERATION_IDS.put("getownedReceptions", Integer.valueOf(17)); //$NON-NLS-1$
        OPERATION_IDS.put("getnestedClassifiers", Integer.valueOf(18)); //$NON-NLS-1$
        OPERATION_IDS.put("getownedParameters", Integer.valueOf(19)); //$NON-NLS-1$
        OPERATION_IDS.put("getedges", Integer.valueOf(20)); //$NON-NLS-1$
        OPERATION_IDS.put("getnodes", Integer.valueOf(21)); //$NON-NLS-1$
        OPERATION_IDS.put("getgroups", Integer.valueOf(22)); //$NON-NLS-1$
    }

    public UmlactivityWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, euml.generic.activities.__impl.UmlactivityImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    private euml.generic.activities.__impl.UmlactivityImpl getCastWrappedObject() {
        return (euml.generic.activities.__impl.UmlactivityImpl) getWrappedObject();
    }
    
    private euml.generic.activities.__impl.UmlactivityImpl getCastWrappedObject(com.sap.tc.moin.repository.core.CorePartitionable resolved) {
        return (euml.generic.activities.__impl.UmlactivityImpl) resolved;
    }
    
    public euml.generic.activities.__impl.UmlactivityImpl unwrap() {
        return (euml.generic.activities.__impl.UmlactivityImpl) getWrappedObject();
    }
        
    // methods for attributes
    public java.lang.String getMediniIdentifier() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        com.sap.tc.moin.repository.core.CorePartitionable resolved = mriReference.getIfResolved();
        if (resolved != null) {
            return getCastWrappedObject(resolved).getMediniIdentifier();
        }
            try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().getMediniIdentifier();
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().getMediniIdentifier(); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public void setMediniIdentifier(java.lang.String newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setMediniIdentifier(connection, newValue);
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setMediniIdentifier(connection, newValue);
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public java.lang.String getTypeCode() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        com.sap.tc.moin.repository.core.CorePartitionable resolved = mriReference.getIfResolved();
        if (resolved != null) {
            return getCastWrappedObject(resolved).getTypeCode();
        }
            try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().getTypeCode();
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().getTypeCode(); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public void setTypeCode(java.lang.String newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setTypeCode(connection, newValue);
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setTypeCode(connection, newValue);
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public java.lang.String getStereotype() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        com.sap.tc.moin.repository.core.CorePartitionable resolved = mriReference.getIfResolved();
        if (resolved != null) {
            return getCastWrappedObject(resolved).getStereotype();
        }
            try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().getStereotype();
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().getStereotype(); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public void setStereotype(java.lang.String newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setStereotype(connection, newValue);
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setStereotype(connection, newValue);
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public java.lang.String getName() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        com.sap.tc.moin.repository.core.CorePartitionable resolved = mriReference.getIfResolved();
        if (resolved != null) {
            return getCastWrappedObject(resolved).getName();
        }
            try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().getName();
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().getName(); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public void setName(java.lang.String newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setName(connection, newValue);
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setName(connection, newValue);
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public euml.generic.kernel.UmlvisibilityKind getVisibility() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        com.sap.tc.moin.repository.core.CorePartitionable resolved = mriReference.getIfResolved();
        if (resolved != null) {
            return getCastWrappedObject(resolved).getVisibility();
        }
            try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().getVisibility();
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().getVisibility(); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public void setVisibility(euml.generic.kernel.UmlvisibilityKind newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setVisibility(connection, newValue);
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setVisibility(connection, newValue);
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public java.lang.String getComment() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        com.sap.tc.moin.repository.core.CorePartitionable resolved = mriReference.getIfResolved();
        if (resolved != null) {
            return getCastWrappedObject(resolved).getComment();
        }
            try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().getComment();
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().getComment(); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public void setComment(java.lang.String newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setComment(connection, newValue);
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setComment(connection, newValue);
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public java.lang.String getAlias() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        com.sap.tc.moin.repository.core.CorePartitionable resolved = mriReference.getIfResolved();
        if (resolved != null) {
            return getCastWrappedObject(resolved).getAlias();
        }
            try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().getAlias();
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().getAlias(); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public void setAlias(java.lang.String newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setAlias(connection, newValue);
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setAlias(connection, newValue);
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public boolean isAbstract() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        com.sap.tc.moin.repository.core.CorePartitionable resolved = mriReference.getIfResolved();
        if (resolved != null) {
            return getCastWrappedObject(resolved).isAbstract();
        }
            try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().isAbstract();
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().isAbstract(); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public void setAbstract(boolean newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setAbstract(connection, newValue);
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setAbstract(connection, newValue);
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public boolean isSingleExecution() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        com.sap.tc.moin.repository.core.CorePartitionable resolved = mriReference.getIfResolved();
        if (resolved != null) {
            return getCastWrappedObject(resolved).isSingleExecution();
        }
            try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().isSingleExecution();
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().isSingleExecution(); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public void setSingleExecution(boolean newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setSingleExecution(connection, newValue);
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setSingleExecution(connection, newValue);
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

     
    // methods for references
    public java.util.Collection<euml.presentation.graphic.Representaive> getTheRepresentative() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection<euml.presentation.graphic.Representaive>) wrapResult(getCastWrappedObject().getTheRepresentative(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection<euml.presentation.graphic.Representaive>) wrapResult(getCastWrappedObject().getTheRepresentative(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public java.util.List<euml.generic.relationships.UmldirectedRelationship> getTheRelationshipOfSource() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.List<euml.generic.relationships.UmldirectedRelationship>) wrapResult(getCastWrappedObject().getTheRelationshipOfSource(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.List<euml.generic.relationships.UmldirectedRelationship>) wrapResult(getCastWrappedObject().getTheRelationshipOfSource(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public java.util.Collection<euml.generic.relationships.Umltrace> getTargettrace() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection<euml.generic.relationships.Umltrace>) wrapResult(getCastWrappedObject().getTargettrace(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection<euml.generic.relationships.Umltrace>) wrapResult(getCastWrappedObject().getTargettrace(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public java.util.Collection<euml.generic.relationships.Umltrace> getSourcetrace() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection<euml.generic.relationships.Umltrace>) wrapResult(getCastWrappedObject().getSourcetrace(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection<euml.generic.relationships.Umltrace>) wrapResult(getCastWrappedObject().getSourcetrace(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public java.util.Collection<euml.generic.relationships.Umlrelationship> getRelationships() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection<euml.generic.relationships.Umlrelationship>) wrapResult(getCastWrappedObject().getRelationships(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection<euml.generic.relationships.Umlrelationship>) wrapResult(getCastWrappedObject().getRelationships(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public java.util.Collection<euml.generic.relationships.UmldirectedRelationship> getTheRelationshipOfTarget() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection<euml.generic.relationships.UmldirectedRelationship>) wrapResult(getCastWrappedObject().getTheRelationshipOfTarget(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection<euml.generic.relationships.UmldirectedRelationship>) wrapResult(getCastWrappedObject().getTheRelationshipOfTarget(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public euml.generic.kernel.AppliedStereotype getTheStereotype() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (euml.generic.kernel.AppliedStereotype) wrapResult(getCastWrappedObject().getTheStereotype(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (euml.generic.kernel.AppliedStereotype) wrapResult(getCastWrappedObject().getTheStereotype(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setTheStereotype(euml.generic.kernel.AppliedStereotype newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setTheStereotype(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setTheStereotype(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public java.util.List<euml.generic.kernel.Umlannotation> getTheAnnotation() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.List<euml.generic.kernel.Umlannotation>) wrapResult(getCastWrappedObject().getTheAnnotation(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.List<euml.generic.kernel.Umlannotation>) wrapResult(getCastWrappedObject().getTheAnnotation(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public java.util.List<euml.generic.kernel.Umlconstraint> getTheConstraint() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.List<euml.generic.kernel.Umlconstraint>) wrapResult(getCastWrappedObject().getTheConstraint(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.List<euml.generic.kernel.Umlconstraint>) wrapResult(getCastWrappedObject().getTheConstraint(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public java.util.List<euml.generic.kernel.Umlelement> getTheUtilizedElements() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.List<euml.generic.kernel.Umlelement>) wrapResult(getCastWrappedObject().getTheUtilizedElements(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.List<euml.generic.kernel.Umlelement>) wrapResult(getCastWrappedObject().getTheUtilizedElements(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public java.util.Collection<euml.generic.kernel.Umlelement> getTheUtilisingElements() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection<euml.generic.kernel.Umlelement>) wrapResult(getCastWrappedObject().getTheUtilisingElements(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection<euml.generic.kernel.Umlelement>) wrapResult(getCastWrappedObject().getTheUtilisingElements(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public java.util.List<euml.generic.kernel.Umlelement> getTheOwnedElements() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.List<euml.generic.kernel.Umlelement>) wrapResult(getCastWrappedObject().getTheOwnedElements(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.List<euml.generic.kernel.Umlelement>) wrapResult(getCastWrappedObject().getTheOwnedElements(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public euml.generic.kernel.Umlelement getTheOwner() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (euml.generic.kernel.Umlelement) wrapResult(getCastWrappedObject().getTheOwner(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (euml.generic.kernel.Umlelement) wrapResult(getCastWrappedObject().getTheOwner(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setTheOwner(euml.generic.kernel.Umlelement newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setTheOwner(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setTheOwner(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public java.util.List<euml.generic.kernel.UmltypedElement> getThetypedelement() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.List<euml.generic.kernel.UmltypedElement>) wrapResult(getCastWrappedObject().getThetypedelement(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.List<euml.generic.kernel.UmltypedElement>) wrapResult(getCastWrappedObject().getThetypedelement(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public java.util.List<euml.generic.usecases.UmluseCase> getTheUseCase() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.List<euml.generic.usecases.UmluseCase>) wrapResult(getCastWrappedObject().getTheUseCase(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.List<euml.generic.usecases.UmluseCase>) wrapResult(getCastWrappedObject().getTheUseCase(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public euml.generic.compositestructures.UmlcollaborationUse getRepresentation() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (euml.generic.compositestructures.UmlcollaborationUse) wrapResult(getCastWrappedObject().getRepresentation(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (euml.generic.compositestructures.UmlcollaborationUse) wrapResult(getCastWrappedObject().getRepresentation(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setRepresentation(euml.generic.compositestructures.UmlcollaborationUse newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setRepresentation(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setRepresentation(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public euml.generic.commonbehaviors.Umlbehaviror getTheclassifierbehavior() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (euml.generic.commonbehaviors.Umlbehaviror) wrapResult(getCastWrappedObject().getTheclassifierbehavior(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (euml.generic.commonbehaviors.Umlbehaviror) wrapResult(getCastWrappedObject().getTheclassifierbehavior(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setTheclassifierbehavior(euml.generic.commonbehaviors.Umlbehaviror newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setTheclassifierbehavior(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setTheclassifierbehavior(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public java.util.List<euml.generic.kernel.Umloperation> getTheRaisingOperations() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.List<euml.generic.kernel.Umloperation>) wrapResult(getCastWrappedObject().getTheRaisingOperations(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.List<euml.generic.kernel.Umloperation>) wrapResult(getCastWrappedObject().getTheRaisingOperations(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public euml.generic.commonbehaviors.UmlbehavioralFeature getSpecification() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (euml.generic.commonbehaviors.UmlbehavioralFeature) wrapResult(getCastWrappedObject().getSpecification(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (euml.generic.commonbehaviors.UmlbehavioralFeature) wrapResult(getCastWrappedObject().getSpecification(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setSpecification(euml.generic.commonbehaviors.UmlbehavioralFeature newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setSpecification(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setSpecification(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public euml.generic.kernel.Umlclassifier getTheBehavioredClassifier() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (euml.generic.kernel.Umlclassifier) wrapResult(getCastWrappedObject().getTheBehavioredClassifier(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (euml.generic.kernel.Umlclassifier) wrapResult(getCastWrappedObject().getTheBehavioredClassifier(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setTheBehavioredClassifier(euml.generic.kernel.Umlclassifier newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setTheBehavioredClassifier(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setTheBehavioredClassifier(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

   
    // methods for modeled operations
    public void deduceTypeCodeAndStereotype() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            ___invokeOperation(connection, 0, "497EC0C88ED00C70EC4911DD863D000E35A783E4", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public void deleteElement() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            ___invokeOperation(connection, 1, "497EC11EC24236F0EC4911DD9CF8000E35A783E4", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public java.util.List<java.lang.String> getqualifiedName() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.util.List<java.lang.String>)___invokeOperation(connection, 2, "497EC2C6BE99ABE0EC4A11DDACEB000E35A783E4", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public java.util.List<java.lang.String> getqualifiedAlias() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.util.List<java.lang.String>)___invokeOperation(connection, 3, "497EC304E3AACEA0EC4A11DD9EC6000E35A783E4", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public euml.generic.kernel.Umlnamespace gettheNamespace() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (euml.generic.kernel.Umlnamespace)___invokeOperation(connection, 4, "497EC321F4ECAF30EC4A11DDCD09000E35A783E4", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public java.util.List<euml.generic.kernel.UmlnamedElement> gettheContainedElements() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.util.List<euml.generic.kernel.UmlnamedElement>)___invokeOperation(connection, 5, "497EC59168D6CC40EC4C11DD91C0000E35A783E4", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public java.util.List<euml.generic.commonbehaviors.Umlbehaviror> getownedBehavior() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.util.List<euml.generic.commonbehaviors.Umlbehaviror>)___invokeOperation(connection, 6, "497EE100C351FEA0EC5C11DDBC0C000E35A783E4", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public java.util.List<euml.generic.commonbehaviors.Umltrigger> getownedTriggers() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.util.List<euml.generic.commonbehaviors.Umltrigger>)___invokeOperation(connection, 7, "497EE12DDDCC4100EC5C11DDAABE000E35A783E4", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public java.util.List<euml.generic.compositestructures.UmlcollaborationUse> getcollaborationUsages() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.util.List<euml.generic.compositestructures.UmlcollaborationUse>)___invokeOperation(connection, 8, "497EE1DF483D1820EC5D11DD893B000E35A783E4", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public java.util.List<euml.generic.kernel.Umlclassifier> gettheBaseClassifiers() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.util.List<euml.generic.kernel.Umlclassifier>)___invokeOperation(connection, 9, "497EE30AFA04B8B0EC5D11DDAC9C000E35A783E4", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public java.util.List<euml.generic.relationships.Umlgeneralization> getgeneralizations() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.util.List<euml.generic.relationships.Umlgeneralization>)___invokeOperation(connection, 10, "497EE3E47C033990EC5E11DDBB66000E35A783E4", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public java.util.List<euml.generic.compositestructures.Umlport> getownedPorts() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.util.List<euml.generic.compositestructures.Umlport>)___invokeOperation(connection, 11, "498649D85E6D6A50F0C711DDBC55000E35A783E4", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public java.util.List<euml.generic.compositestructures.Umlconnector> getownedConnectors() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.util.List<euml.generic.compositestructures.Umlconnector>)___invokeOperation(connection, 12, "498649F770C3EF30F0C711DDCE2B000E35A783E4", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public java.util.List<euml.generic.kernel.Umlproperty> getownedProperties() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.util.List<euml.generic.kernel.Umlproperty>)___invokeOperation(connection, 13, "49864A1985568160F0C711DD9B76000E35A783E4", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public java.util.List<euml.generic.compositestructures.Umlpart> getparts() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.util.List<euml.generic.compositestructures.Umlpart>)___invokeOperation(connection, 14, "49864A2E916D4B00F0C711DD871C000E35A783E4", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public java.util.List<euml.generic.compositestructures.PortUsage> getportUsages() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.util.List<euml.generic.compositestructures.PortUsage>)___invokeOperation(connection, 15, "49864A3B99A8D640F0C711DD8B64000E35A783E4", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public java.util.List<euml.generic.kernel.Umloperation> getownedOperation() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.util.List<euml.generic.kernel.Umloperation>)___invokeOperation(connection, 16, "497ED545C53011A0EC5511DD93BF000E35A783E4", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public java.util.List<euml.generic.commonbehaviors.Umlreception> getownedReceptions() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.util.List<euml.generic.commonbehaviors.Umlreception>)___invokeOperation(connection, 17, "497ED6767ADC6670EC5611DDA41D000E35A783E4", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public java.util.List<euml.generic.kernel.Umlclassifier> getnestedClassifiers() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.util.List<euml.generic.kernel.Umlclassifier>)___invokeOperation(connection, 18, "497ED6958D26DD60EC5611DDA53C000E35A783E4", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public euml.generic.kernel.Umlparameter getownedParameters() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (euml.generic.kernel.Umlparameter)___invokeOperation(connection, 19, "497EEAF8B3ED81E0EC6211DDCE02000E35A783E4", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public java.util.List<euml.generic.activities.UmlactivityEdge> getedges() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.util.List<euml.generic.activities.UmlactivityEdge>)___invokeOperation(connection, 20, "497EF05DEB0EF160EC6511DD8C26000E35A783E4", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public java.util.List<euml.generic.activities.UmlactivityNode> getnodes() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.util.List<euml.generic.activities.UmlactivityNode>)___invokeOperation(connection, 21, "497EF069F2B47E30EC6511DDCAED000E35A783E4", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public java.util.List<euml.generic.activities.UmlactivityGroup> getgroups() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.util.List<euml.generic.activities.UmlactivityGroup>)___invokeOperation(connection, 22, "497EF076FA610FE0EC6511DDC8F8000E35A783E4", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    
    // methods for internal modeled operations
    private void invoke__deduceTypeCodeAndStereotype(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        // missing an implementation provided in either tag org.omg.sap2mof.OperationCodeJava or org.omg.sap2mof.OperationCodeOcl
    }
    private void invoke__deleteElement(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        // missing an implementation provided in either tag org.omg.sap2mof.OperationCodeJava or org.omg.sap2mof.OperationCodeOcl
    }
    private java.util.List<java.lang.String> invoke__getqualifiedName(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        // missing an implementation provided in either tag org.omg.sap2mof.OperationCodeJava or org.omg.sap2mof.OperationCodeOcl
        return null;
    }
    private java.util.List<java.lang.String> invoke__getqualifiedAlias(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        // missing an implementation provided in either tag org.omg.sap2mof.OperationCodeJava or org.omg.sap2mof.OperationCodeOcl
        return null;
    }
    private euml.generic.kernel.Umlnamespace invoke__gettheNamespace(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        // missing an implementation provided in either tag org.omg.sap2mof.OperationCodeJava or org.omg.sap2mof.OperationCodeOcl
        return null;
    }
    private java.util.List<euml.generic.kernel.UmlnamedElement> invoke__gettheContainedElements(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        // missing an implementation provided in either tag org.omg.sap2mof.OperationCodeJava or org.omg.sap2mof.OperationCodeOcl
        return null;
    }
    private java.util.List<euml.generic.commonbehaviors.Umlbehaviror> invoke__getownedBehavior(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        // missing an implementation provided in either tag org.omg.sap2mof.OperationCodeJava or org.omg.sap2mof.OperationCodeOcl
        return null;
    }
    private java.util.List<euml.generic.commonbehaviors.Umltrigger> invoke__getownedTriggers(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        // missing an implementation provided in either tag org.omg.sap2mof.OperationCodeJava or org.omg.sap2mof.OperationCodeOcl
        return null;
    }
    private java.util.List<euml.generic.compositestructures.UmlcollaborationUse> invoke__getcollaborationUsages(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        // missing an implementation provided in either tag org.omg.sap2mof.OperationCodeJava or org.omg.sap2mof.OperationCodeOcl
        return null;
    }
    private java.util.List<euml.generic.kernel.Umlclassifier> invoke__gettheBaseClassifiers(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        // missing an implementation provided in either tag org.omg.sap2mof.OperationCodeJava or org.omg.sap2mof.OperationCodeOcl
        return null;
    }
    private java.util.List<euml.generic.relationships.Umlgeneralization> invoke__getgeneralizations(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        // missing an implementation provided in either tag org.omg.sap2mof.OperationCodeJava or org.omg.sap2mof.OperationCodeOcl
        return null;
    }
    private java.util.List<euml.generic.compositestructures.Umlport> invoke__getownedPorts(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        // missing an implementation provided in either tag org.omg.sap2mof.OperationCodeJava or org.omg.sap2mof.OperationCodeOcl
        return null;
    }
    private java.util.List<euml.generic.compositestructures.Umlconnector> invoke__getownedConnectors(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        // missing an implementation provided in either tag org.omg.sap2mof.OperationCodeJava or org.omg.sap2mof.OperationCodeOcl
        return null;
    }
    private java.util.List<euml.generic.kernel.Umlproperty> invoke__getownedProperties(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        // missing an implementation provided in either tag org.omg.sap2mof.OperationCodeJava or org.omg.sap2mof.OperationCodeOcl
        return null;
    }
    private java.util.List<euml.generic.compositestructures.Umlpart> invoke__getparts(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        // missing an implementation provided in either tag org.omg.sap2mof.OperationCodeJava or org.omg.sap2mof.OperationCodeOcl
        return null;
    }
    private java.util.List<euml.generic.compositestructures.PortUsage> invoke__getportUsages(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        // missing an implementation provided in either tag org.omg.sap2mof.OperationCodeJava or org.omg.sap2mof.OperationCodeOcl
        return null;
    }
    private java.util.List<euml.generic.kernel.Umloperation> invoke__getownedOperation(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        // missing an implementation provided in either tag org.omg.sap2mof.OperationCodeJava or org.omg.sap2mof.OperationCodeOcl
        return null;
    }
    private java.util.List<euml.generic.commonbehaviors.Umlreception> invoke__getownedReceptions(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        // missing an implementation provided in either tag org.omg.sap2mof.OperationCodeJava or org.omg.sap2mof.OperationCodeOcl
        return null;
    }
    private java.util.List<euml.generic.kernel.Umlclassifier> invoke__getnestedClassifiers(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        // missing an implementation provided in either tag org.omg.sap2mof.OperationCodeJava or org.omg.sap2mof.OperationCodeOcl
        return null;
    }
    private euml.generic.kernel.Umlparameter invoke__getownedParameters(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        // missing an implementation provided in either tag org.omg.sap2mof.OperationCodeJava or org.omg.sap2mof.OperationCodeOcl
        return null;
    }
    private java.util.List<euml.generic.activities.UmlactivityEdge> invoke__getedges(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        // missing an implementation provided in either tag org.omg.sap2mof.OperationCodeJava or org.omg.sap2mof.OperationCodeOcl
        return null;
    }
    private java.util.List<euml.generic.activities.UmlactivityNode> invoke__getnodes(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        // missing an implementation provided in either tag org.omg.sap2mof.OperationCodeJava or org.omg.sap2mof.OperationCodeOcl
        return null;
    }
    private java.util.List<euml.generic.activities.UmlactivityGroup> invoke__getgroups(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        // missing an implementation provided in either tag org.omg.sap2mof.OperationCodeJava or org.omg.sap2mof.OperationCodeOcl
        return null;
    }

    // reflective methods
    @Override
    public Object refInvokeOperation(com.sap.tc.moin.repository.core.CoreConnection connection, java.lang.String requestedOperation, java.util.List<? extends Object> args) throws com.sap.tc.moin.repository.mmi.reflect.RefException {
        if (requestedOperation == null) {
            throw new com.sap.tc.moin.repository.mmi.reflect.InvalidNameException(requestedOperation);
        }
        java.lang.Integer operationId = OPERATION_IDS.get(requestedOperation);
        if (operationId == null) {
            throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException(requestedOperation, refMetaObject(), "refInvokeOperation(String)"); //$NON-NLS-1$
        }
        switch (operationId) {
                
            case 0:
                return ___invokeOperation( connection, operationId, "497EC0C88ED00C70EC4911DD863D000E35A783E4", args ); //$NON-NLS-1$    
                
            case 1:
                return ___invokeOperation( connection, operationId, "497EC11EC24236F0EC4911DD9CF8000E35A783E4", args ); //$NON-NLS-1$    
                
            case 2:
                return ___invokeOperation( connection, operationId, "497EC2C6BE99ABE0EC4A11DDACEB000E35A783E4", args ); //$NON-NLS-1$    
                
            case 3:
                return ___invokeOperation( connection, operationId, "497EC304E3AACEA0EC4A11DD9EC6000E35A783E4", args ); //$NON-NLS-1$    
                
            case 4:
                return ___invokeOperation( connection, operationId, "497EC321F4ECAF30EC4A11DDCD09000E35A783E4", args ); //$NON-NLS-1$    
                
            case 5:
                return ___invokeOperation( connection, operationId, "497EC59168D6CC40EC4C11DD91C0000E35A783E4", args ); //$NON-NLS-1$    
                
            case 6:
                return ___invokeOperation( connection, operationId, "497EE100C351FEA0EC5C11DDBC0C000E35A783E4", args ); //$NON-NLS-1$    
                
            case 7:
                return ___invokeOperation( connection, operationId, "497EE12DDDCC4100EC5C11DDAABE000E35A783E4", args ); //$NON-NLS-1$    
                
            case 8:
                return ___invokeOperation( connection, operationId, "497EE1DF483D1820EC5D11DD893B000E35A783E4", args ); //$NON-NLS-1$    
                
            case 9:
                return ___invokeOperation( connection, operationId, "497EE30AFA04B8B0EC5D11DDAC9C000E35A783E4", args ); //$NON-NLS-1$    
                
            case 10:
                return ___invokeOperation( connection, operationId, "497EE3E47C033990EC5E11DDBB66000E35A783E4", args ); //$NON-NLS-1$    
                
            case 11:
                return ___invokeOperation( connection, operationId, "498649D85E6D6A50F0C711DDBC55000E35A783E4", args ); //$NON-NLS-1$    
                
            case 12:
                return ___invokeOperation( connection, operationId, "498649F770C3EF30F0C711DDCE2B000E35A783E4", args ); //$NON-NLS-1$    
                
            case 13:
                return ___invokeOperation( connection, operationId, "49864A1985568160F0C711DD9B76000E35A783E4", args ); //$NON-NLS-1$    
                
            case 14:
                return ___invokeOperation( connection, operationId, "49864A2E916D4B00F0C711DD871C000E35A783E4", args ); //$NON-NLS-1$    
                
            case 15:
                return ___invokeOperation( connection, operationId, "49864A3B99A8D640F0C711DD8B64000E35A783E4", args ); //$NON-NLS-1$    
                
            case 16:
                return ___invokeOperation( connection, operationId, "497ED545C53011A0EC5511DD93BF000E35A783E4", args ); //$NON-NLS-1$    
                
            case 17:
                return ___invokeOperation( connection, operationId, "497ED6767ADC6670EC5611DDA41D000E35A783E4", args ); //$NON-NLS-1$    
                
            case 18:
                return ___invokeOperation( connection, operationId, "497ED6958D26DD60EC5611DDA53C000E35A783E4", args ); //$NON-NLS-1$    
                
            case 19:
                return ___invokeOperation( connection, operationId, "497EEAF8B3ED81E0EC6211DDCE02000E35A783E4", args ); //$NON-NLS-1$    
                
            case 20:
                return ___invokeOperation( connection, operationId, "497EF05DEB0EF160EC6511DD8C26000E35A783E4", args ); //$NON-NLS-1$    
                
            case 21:
                return ___invokeOperation( connection, operationId, "497EF069F2B47E30EC6511DDCAED000E35A783E4", args ); //$NON-NLS-1$    
                
            case 22:
                return ___invokeOperation( connection, operationId, "497EF076FA610FE0EC6511DDC8F8000E35A783E4", args ); //$NON-NLS-1$    
            default:
                throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException(requestedOperation, refMetaObject(), "refInvokeOperation(String)"); //$NON-NLS-1$
        }
    }
    
    @Override
    public Object invoke___Operation(com.sap.tc.moin.repository.core.CoreConnection connection, int operationId, java.util.List<? extends Object> args) throws com.sap.tc.moin.repository.mmi.reflect.RefException {
        switch (operationId) {
                
            case 0:
                invoke__deduceTypeCodeAndStereotype(connection);
                return null;    
                
            case 1:
                invoke__deleteElement(connection);
                return null;    
                
            case 2:
                return invoke__getqualifiedName(connection);    
                
            case 3:
                return invoke__getqualifiedAlias(connection);    
                
            case 4:
                return invoke__gettheNamespace(connection);    
                
            case 5:
                return invoke__gettheContainedElements(connection);    
                
            case 6:
                return invoke__getownedBehavior(connection);    
                
            case 7:
                return invoke__getownedTriggers(connection);    
                
            case 8:
                return invoke__getcollaborationUsages(connection);    
                
            case 9:
                return invoke__gettheBaseClassifiers(connection);    
                
            case 10:
                return invoke__getgeneralizations(connection);    
                
            case 11:
                return invoke__getownedPorts(connection);    
                
            case 12:
                return invoke__getownedConnectors(connection);    
                
            case 13:
                return invoke__getownedProperties(connection);    
                
            case 14:
                return invoke__getparts(connection);    
                
            case 15:
                return invoke__getportUsages(connection);    
                
            case 16:
                return invoke__getownedOperation(connection);    
                
            case 17:
                return invoke__getownedReceptions(connection);    
                
            case 18:
                return invoke__getnestedClassifiers(connection);    
                
            case 19:
                return invoke__getownedParameters(connection);    
                
            case 20:
                return invoke__getedges(connection);    
                
            case 21:
                return invoke__getnodes(connection);    
                
            case 22:
                return invoke__getgroups(connection);    
            default:
                throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException( operationId, refMetaObject( ), "invoke___Operation(int)"); //$NON-NLS-1$
        }
    
    }    

    // get the JMI interface
    public java.lang.Class<euml.generic.activities.Umlactivity> get___JmiInterface() {
        return euml.generic.activities.Umlactivity.class;
    }

    // to String
    protected String metaObjectToString() {
        return "euml.generic.activities.Umlactivity (Java Type)\nEUML.Generic.Activities.UMLActivity (MOF Type)"; //$NON-NLS-1$
    }    
}