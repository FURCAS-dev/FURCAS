/**
 * Generated by the MOIN Generator Version 3.0
 **/

package euml.generic.activities.__impl;

public class UmlvalueSpecificationUmlobjectNodeWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<euml.generic.activities.UmlvalueSpecificationUmlobjectNode> implements euml.generic.activities.UmlvalueSpecificationUmlobjectNode,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The UmlvalueSpecificationUmlobjectNode wrapper
     */
    public UmlvalueSpecificationUmlobjectNodeWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, euml.generic.activities.__impl.UmlvalueSpecificationUmlobjectNodeImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private euml.generic.activities.__impl.UmlvalueSpecificationUmlobjectNodeImpl getCastWrappedObject() {
        return (euml.generic.activities.__impl.UmlvalueSpecificationUmlobjectNodeImpl) getWrappedObject();
    }

    public euml.generic.activities.UmlvalueSpecificationUmlobjectNode unwrap() {
        return (euml.generic.activities.UmlvalueSpecificationUmlobjectNode) getWrappedObject();
    }
    
    public boolean exists(euml.generic.kernel.UmlvalueSpecification _AllocationScheme, euml.generic.activities.UmlobjectNode _AllocatedBy) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AllocationScheme), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AllocatedBy));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AllocationScheme), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AllocatedBy)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public euml.generic.kernel.UmlvalueSpecification getAllocationScheme(euml.generic.activities.UmlobjectNode _AllocatedBy) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (euml.generic.kernel.UmlvalueSpecification) wrapResult(getCastWrappedObject().getAllocationScheme(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AllocatedBy)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (euml.generic.kernel.UmlvalueSpecification) wrapResult(getCastWrappedObject().getAllocationScheme(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AllocatedBy))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.List getAllocatedBy(euml.generic.kernel.UmlvalueSpecification _AllocationScheme) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.List) wrapResult(getCastWrappedObject().getAllocatedBy(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AllocationScheme)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.List) wrapResult(getCastWrappedObject().getAllocatedBy(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AllocationScheme))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(euml.generic.kernel.UmlvalueSpecification _AllocationScheme, euml.generic.activities.UmlobjectNode _AllocatedBy) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AllocationScheme), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AllocatedBy));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AllocationScheme), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AllocatedBy)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(euml.generic.kernel.UmlvalueSpecification _AllocationScheme, euml.generic.activities.UmlobjectNode _AllocatedBy) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AllocationScheme), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AllocatedBy));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AllocationScheme), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AllocatedBy)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<euml.generic.activities.UmlvalueSpecificationUmlobjectNode> get___JmiInterface() {
        return euml.generic.activities.UmlvalueSpecificationUmlobjectNode.class;
    }

    protected String metaObjectToString() {
        return "euml.generic.activities.UmlvalueSpecificationUmlobjectNode (Java Type)\nEUML.Generic.Activities.UMLValueSpecification_UMLObjectNode (MOF Type)"; //$NON-NLS-1$
    }    
}