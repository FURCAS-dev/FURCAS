/**
 * Generated by the MOIN Generator Version 3.0
 **/

package euml.generic.commonbehaviors.__impl;

public class UmlsignalEventUmlsignalWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<euml.generic.commonbehaviors.UmlsignalEventUmlsignal> implements euml.generic.commonbehaviors.UmlsignalEventUmlsignal,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The UmlsignalEventUmlsignal wrapper
     */
    public UmlsignalEventUmlsignalWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, euml.generic.commonbehaviors.__impl.UmlsignalEventUmlsignalImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private euml.generic.commonbehaviors.__impl.UmlsignalEventUmlsignalImpl getCastWrappedObject() {
        return (euml.generic.commonbehaviors.__impl.UmlsignalEventUmlsignalImpl) getWrappedObject();
    }

    public euml.generic.commonbehaviors.UmlsignalEventUmlsignal unwrap() {
        return (euml.generic.commonbehaviors.UmlsignalEventUmlsignal) getWrappedObject();
    }
    
    public boolean exists(euml.generic.commonbehaviors.UmlsignalEvent _Umlsignalevent, euml.generic.commonbehaviors.Umlsignal _Signal) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Umlsignalevent), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Signal));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Umlsignalevent), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Signal)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public euml.generic.commonbehaviors.UmlsignalEvent getUmlsignalevent(euml.generic.commonbehaviors.Umlsignal _Signal) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (euml.generic.commonbehaviors.UmlsignalEvent) wrapResult(getCastWrappedObject().getUmlsignalevent(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Signal)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (euml.generic.commonbehaviors.UmlsignalEvent) wrapResult(getCastWrappedObject().getUmlsignalevent(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Signal))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public euml.generic.commonbehaviors.Umlsignal getSignal(euml.generic.commonbehaviors.UmlsignalEvent _Umlsignalevent) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (euml.generic.commonbehaviors.Umlsignal) wrapResult(getCastWrappedObject().getSignal(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Umlsignalevent)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (euml.generic.commonbehaviors.Umlsignal) wrapResult(getCastWrappedObject().getSignal(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Umlsignalevent))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(euml.generic.commonbehaviors.UmlsignalEvent _Umlsignalevent, euml.generic.commonbehaviors.Umlsignal _Signal) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Umlsignalevent), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Signal));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Umlsignalevent), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Signal)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(euml.generic.commonbehaviors.UmlsignalEvent _Umlsignalevent, euml.generic.commonbehaviors.Umlsignal _Signal) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Umlsignalevent), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Signal));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Umlsignalevent), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Signal)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<euml.generic.commonbehaviors.UmlsignalEventUmlsignal> get___JmiInterface() {
        return euml.generic.commonbehaviors.UmlsignalEventUmlsignal.class;
    }

    protected String metaObjectToString() {
        return "euml.generic.commonbehaviors.UmlsignalEventUmlsignal (Java Type)\nEUML.Generic.CommonBehaviors.UMLSignalEvent_UMLSignal (MOF Type)"; //$NON-NLS-1$
    }    
}