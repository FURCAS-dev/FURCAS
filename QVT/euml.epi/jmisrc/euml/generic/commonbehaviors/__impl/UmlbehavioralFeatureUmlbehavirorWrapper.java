/**
 * Generated by the MOIN Generator Version 3.0
 **/

package euml.generic.commonbehaviors.__impl;

public class UmlbehavioralFeatureUmlbehavirorWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<euml.generic.commonbehaviors.UmlbehavioralFeatureUmlbehaviror> implements euml.generic.commonbehaviors.UmlbehavioralFeatureUmlbehaviror,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The UmlbehavioralFeatureUmlbehaviror wrapper
     */
    public UmlbehavioralFeatureUmlbehavirorWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, euml.generic.commonbehaviors.__impl.UmlbehavioralFeatureUmlbehavirorImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private euml.generic.commonbehaviors.__impl.UmlbehavioralFeatureUmlbehavirorImpl getCastWrappedObject() {
        return (euml.generic.commonbehaviors.__impl.UmlbehavioralFeatureUmlbehavirorImpl) getWrappedObject();
    }

    public euml.generic.commonbehaviors.UmlbehavioralFeatureUmlbehaviror unwrap() {
        return (euml.generic.commonbehaviors.UmlbehavioralFeatureUmlbehaviror) getWrappedObject();
    }
    
    public boolean exists(euml.generic.commonbehaviors.UmlbehavioralFeature _Specification, euml.generic.commonbehaviors.Umlbehaviror _Method) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Specification), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Method));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Specification), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Method)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public euml.generic.commonbehaviors.UmlbehavioralFeature getSpecification(euml.generic.commonbehaviors.Umlbehaviror _Method) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (euml.generic.commonbehaviors.UmlbehavioralFeature) wrapResult(getCastWrappedObject().getSpecification(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Method)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (euml.generic.commonbehaviors.UmlbehavioralFeature) wrapResult(getCastWrappedObject().getSpecification(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Method))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.List getMethod(euml.generic.commonbehaviors.UmlbehavioralFeature _Specification) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.List) wrapResult(getCastWrappedObject().getMethod(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Specification)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.List) wrapResult(getCastWrappedObject().getMethod(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Specification))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(euml.generic.commonbehaviors.UmlbehavioralFeature _Specification, euml.generic.commonbehaviors.Umlbehaviror _Method) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Specification), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Method));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Specification), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Method)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(euml.generic.commonbehaviors.UmlbehavioralFeature _Specification, euml.generic.commonbehaviors.Umlbehaviror _Method) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Specification), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Method));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Specification), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Method)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<euml.generic.commonbehaviors.UmlbehavioralFeatureUmlbehaviror> get___JmiInterface() {
        return euml.generic.commonbehaviors.UmlbehavioralFeatureUmlbehaviror.class;
    }

    protected String metaObjectToString() {
        return "euml.generic.commonbehaviors.UmlbehavioralFeatureUmlbehaviror (Java Type)\nEUML.Generic.CommonBehaviors.UMLBehavioralFeature_UMLBehaviror (MOF Type)"; //$NON-NLS-1$
    }    
}