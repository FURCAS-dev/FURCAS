/**
 * Generated by the MOIN Generator Version 3.0
 **/

package euml.generic.commonbehaviors.__impl;

public class UmlreceptionUmlsignalWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<euml.generic.commonbehaviors.UmlreceptionUmlsignal> implements euml.generic.commonbehaviors.UmlreceptionUmlsignal,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The UmlreceptionUmlsignal wrapper
     */
    public UmlreceptionUmlsignalWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, euml.generic.commonbehaviors.__impl.UmlreceptionUmlsignalImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private euml.generic.commonbehaviors.__impl.UmlreceptionUmlsignalImpl getCastWrappedObject() {
        return (euml.generic.commonbehaviors.__impl.UmlreceptionUmlsignalImpl) getWrappedObject();
    }

    public euml.generic.commonbehaviors.UmlreceptionUmlsignal unwrap() {
        return (euml.generic.commonbehaviors.UmlreceptionUmlsignal) getWrappedObject();
    }
    
    public boolean exists(euml.generic.commonbehaviors.Umlreception _Umlreception, euml.generic.commonbehaviors.Umlsignal _Signal) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Umlreception), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Signal));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Umlreception), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Signal)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public euml.generic.commonbehaviors.Umlreception getUmlreception(euml.generic.commonbehaviors.Umlsignal _Signal) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (euml.generic.commonbehaviors.Umlreception) wrapResult(getCastWrappedObject().getUmlreception(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Signal)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (euml.generic.commonbehaviors.Umlreception) wrapResult(getCastWrappedObject().getUmlreception(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Signal))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public euml.generic.commonbehaviors.Umlsignal getSignal(euml.generic.commonbehaviors.Umlreception _Umlreception) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (euml.generic.commonbehaviors.Umlsignal) wrapResult(getCastWrappedObject().getSignal(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Umlreception)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (euml.generic.commonbehaviors.Umlsignal) wrapResult(getCastWrappedObject().getSignal(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Umlreception))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(euml.generic.commonbehaviors.Umlreception _Umlreception, euml.generic.commonbehaviors.Umlsignal _Signal) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Umlreception), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Signal));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Umlreception), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Signal)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(euml.generic.commonbehaviors.Umlreception _Umlreception, euml.generic.commonbehaviors.Umlsignal _Signal) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Umlreception), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Signal));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Umlreception), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Signal)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<euml.generic.commonbehaviors.UmlreceptionUmlsignal> get___JmiInterface() {
        return euml.generic.commonbehaviors.UmlreceptionUmlsignal.class;
    }

    protected String metaObjectToString() {
        return "euml.generic.commonbehaviors.UmlreceptionUmlsignal (Java Type)\nEUML.Generic.CommonBehaviors.UMLReception_UMLSignal (MOF Type)"; //$NON-NLS-1$
    }    
}