/**
 * Generated by the MOIN Generator Version 3.0
 **/

package euml.generic.relationships.__impl;

public class UmltraceUmlelementWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<euml.generic.relationships.UmltraceUmlelement> implements euml.generic.relationships.UmltraceUmlelement,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The UmltraceUmlelement wrapper
     */
    public UmltraceUmlelementWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, euml.generic.relationships.__impl.UmltraceUmlelementImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private euml.generic.relationships.__impl.UmltraceUmlelementImpl getCastWrappedObject() {
        return (euml.generic.relationships.__impl.UmltraceUmlelementImpl) getWrappedObject();
    }

    public euml.generic.relationships.UmltraceUmlelement unwrap() {
        return (euml.generic.relationships.UmltraceUmlelement) getWrappedObject();
    }
    
    public boolean exists(euml.generic.relationships.Umltrace _TargetTrace, euml.generic.kernel.Umlelement _Targetelement) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TargetTrace), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Targetelement));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TargetTrace), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Targetelement)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getTargetTrace(euml.generic.kernel.Umlelement _Targetelement) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getTargetTrace(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Targetelement)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getTargetTrace(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Targetelement))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public euml.generic.kernel.Umlelement getTargetelement(euml.generic.relationships.Umltrace _TargetTrace) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (euml.generic.kernel.Umlelement) wrapResult(getCastWrappedObject().getTargetelement(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TargetTrace)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (euml.generic.kernel.Umlelement) wrapResult(getCastWrappedObject().getTargetelement(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TargetTrace))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(euml.generic.relationships.Umltrace _TargetTrace, euml.generic.kernel.Umlelement _Targetelement) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TargetTrace), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Targetelement));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TargetTrace), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Targetelement)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(euml.generic.relationships.Umltrace _TargetTrace, euml.generic.kernel.Umlelement _Targetelement) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TargetTrace), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Targetelement));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TargetTrace), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Targetelement)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<euml.generic.relationships.UmltraceUmlelement> get___JmiInterface() {
        return euml.generic.relationships.UmltraceUmlelement.class;
    }

    protected String metaObjectToString() {
        return "euml.generic.relationships.UmltraceUmlelement (Java Type)\nEUML.Generic.Relationships.UMLTrace_UMLElement (MOF Type)"; //$NON-NLS-1$
    }    
}