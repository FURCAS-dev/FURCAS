/**
 * Generated by the MOIN Generator Version 3.0
 **/

package euml.generic.relationships.__impl;

public class RelationshipsPackageWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefPackageWrapperImpl<euml.generic.relationships.__impl.RelationshipsPackageImpl> implements euml.generic.relationships.RelationshipsPackage,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The RelationshipsPackage wrapper
     */
    public RelationshipsPackageWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, euml.generic.relationships.__impl.RelationshipsPackageImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    private euml.generic.relationships.__impl.RelationshipsPackageImpl getCastWrappedObject() {
        return (euml.generic.relationships.__impl.RelationshipsPackageImpl) getWrappedObject();
    }
    
    public euml.generic.relationships.__impl.RelationshipsPackageImpl unwrap() {
        return (euml.generic.relationships.__impl.RelationshipsPackageImpl) getWrappedObject();
    }
    
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getUmlrelationship()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getUmlrelationship(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getUmlrelationship(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getUmlgeneralization()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getUmlgeneralization(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getUmlgeneralization(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getUmldirectedRelationship()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getUmldirectedRelationship(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getUmldirectedRelationship(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getUmltrace()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getUmltrace(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getUmltrace(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public euml.generic.relationships.UmlelementUmldirectedRelationShip getUmlelementUmldirectedRelationShip()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (euml.generic.relationships.UmlelementUmldirectedRelationShip) wrapResult(getCastWrappedObject().getUmlelementUmldirectedRelationShip(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (euml.generic.relationships.UmlelementUmldirectedRelationShip) wrapResult(getCastWrappedObject().getUmlelementUmldirectedRelationShip(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public euml.generic.relationships.UmltraceUmlelement getUmltraceUmlelement()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (euml.generic.relationships.UmltraceUmlelement) wrapResult(getCastWrappedObject().getUmltraceUmlelement(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (euml.generic.relationships.UmltraceUmlelement) wrapResult(getCastWrappedObject().getUmltraceUmlelement(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public euml.generic.relationships.UmltraceUmlelement1 getUmltraceUmlelement1()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (euml.generic.relationships.UmltraceUmlelement1) wrapResult(getCastWrappedObject().getUmltraceUmlelement1(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (euml.generic.relationships.UmltraceUmlelement1) wrapResult(getCastWrappedObject().getUmltraceUmlelement1(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public euml.generic.relationships.UmlrelationshipUmlelement getUmlrelationshipUmlelement()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (euml.generic.relationships.UmlrelationshipUmlelement) wrapResult(getCastWrappedObject().getUmlrelationshipUmlelement(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (euml.generic.relationships.UmlrelationshipUmlelement) wrapResult(getCastWrappedObject().getUmlrelationshipUmlelement(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public euml.generic.relationships.UmldirectedRelationShipUmlelement getUmldirectedRelationShipUmlelement()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (euml.generic.relationships.UmldirectedRelationShipUmlelement) wrapResult(getCastWrappedObject().getUmldirectedRelationShipUmlelement(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (euml.generic.relationships.UmldirectedRelationShipUmlelement) wrapResult(getCastWrappedObject().getUmldirectedRelationShipUmlelement(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    // methods for structure type creators
    
    public java.lang.Class<euml.generic.relationships.RelationshipsPackage> get___JmiInterface() {
        return euml.generic.relationships.RelationshipsPackage.class;
    }
    
    protected String metaObjectToString() {
        return "euml.generic.relationships.RelationshipsPackage (Java Type)\nEUML.Generic.Relationships (MOF Type)"; //$NON-NLS-1$
    }
}