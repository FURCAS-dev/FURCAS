/**
 * Generated by the MOIN Generator Version 3.0
 **/

package euml.generic.compositestructures.__impl;

public class UmlportPortUsageWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<euml.generic.compositestructures.UmlportPortUsage> implements euml.generic.compositestructures.UmlportPortUsage,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The UmlportPortUsage wrapper
     */
    public UmlportPortUsageWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, euml.generic.compositestructures.__impl.UmlportPortUsageImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private euml.generic.compositestructures.__impl.UmlportPortUsageImpl getCastWrappedObject() {
        return (euml.generic.compositestructures.__impl.UmlportPortUsageImpl) getWrappedObject();
    }

    public euml.generic.compositestructures.UmlportPortUsage unwrap() {
        return (euml.generic.compositestructures.UmlportPortUsage) getWrappedObject();
    }
    
    public boolean exists(euml.generic.compositestructures.Umlport _Represents, euml.generic.compositestructures.PortUsage _RepresentedBy) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Represents), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _RepresentedBy));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Represents), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _RepresentedBy)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public euml.generic.compositestructures.Umlport getRepresents(euml.generic.compositestructures.PortUsage _RepresentedBy) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (euml.generic.compositestructures.Umlport) wrapResult(getCastWrappedObject().getRepresents(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _RepresentedBy)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (euml.generic.compositestructures.Umlport) wrapResult(getCastWrappedObject().getRepresents(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _RepresentedBy))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.List getRepresentedBy(euml.generic.compositestructures.Umlport _Represents) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.List) wrapResult(getCastWrappedObject().getRepresentedBy(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Represents)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.List) wrapResult(getCastWrappedObject().getRepresentedBy(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Represents))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(euml.generic.compositestructures.Umlport _Represents, euml.generic.compositestructures.PortUsage _RepresentedBy) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Represents), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _RepresentedBy));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Represents), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _RepresentedBy)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(euml.generic.compositestructures.Umlport _Represents, euml.generic.compositestructures.PortUsage _RepresentedBy) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Represents), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _RepresentedBy));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Represents), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _RepresentedBy)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<euml.generic.compositestructures.UmlportPortUsage> get___JmiInterface() {
        return euml.generic.compositestructures.UmlportPortUsage.class;
    }

    protected String metaObjectToString() {
        return "euml.generic.compositestructures.UmlportPortUsage (Java Type)\nEUML.Generic.CompositeStructures.UMLPort_PortUsage (MOF Type)"; //$NON-NLS-1$
    }    
}