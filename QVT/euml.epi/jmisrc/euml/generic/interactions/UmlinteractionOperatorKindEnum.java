/**
 * Generated by the MOIN Generator Version 3.0
 **/

package euml.generic.interactions;

public final class UmlinteractionOperatorKindEnum implements euml.generic.interactions.UmlinteractionOperatorKind
{
    private static final long serialVersionUID = 1L;
    
    private final static String ENUMLABELNOTFOUNDPATTERN = "Enumeration label \"{0}\" is not defined for enumeration \"{1}\""; //$NON-NLS-1$

    private static final java.util.List<String> __QUALIFIED_NAME = java.util.Collections.unmodifiableList(java.util.Arrays.asList(new String[] { "EUML", "Generic", "Interactions", "UMLInteractionOperatorKind" })); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$

    public static final UmlinteractionOperatorKindEnum SEQ = new UmlinteractionOperatorKindEnum("seq"); //$NON-NLS-1$
    public static final UmlinteractionOperatorKindEnum ALT = new UmlinteractionOperatorKindEnum("alt"); //$NON-NLS-1$
    public static final UmlinteractionOperatorKindEnum OPT = new UmlinteractionOperatorKindEnum("opt"); //$NON-NLS-1$
    public static final UmlinteractionOperatorKindEnum BREAK = new UmlinteractionOperatorKindEnum("break"); //$NON-NLS-1$
    public static final UmlinteractionOperatorKindEnum PAR = new UmlinteractionOperatorKindEnum("par"); //$NON-NLS-1$
    public static final UmlinteractionOperatorKindEnum STRICT = new UmlinteractionOperatorKindEnum("strict"); //$NON-NLS-1$
    public static final UmlinteractionOperatorKindEnum LOOP = new UmlinteractionOperatorKindEnum("loop"); //$NON-NLS-1$
    public static final UmlinteractionOperatorKindEnum CRITICAL = new UmlinteractionOperatorKindEnum("critical"); //$NON-NLS-1$
    public static final UmlinteractionOperatorKindEnum NEG = new UmlinteractionOperatorKindEnum("neg"); //$NON-NLS-1$
    public static final UmlinteractionOperatorKindEnum ASSERT = new UmlinteractionOperatorKindEnum("assert"); //$NON-NLS-1$
    public static final UmlinteractionOperatorKindEnum IGNORE = new UmlinteractionOperatorKindEnum("ignore"); //$NON-NLS-1$
    public static final UmlinteractionOperatorKindEnum CONSIDER = new UmlinteractionOperatorKindEnum("consider"); //$NON-NLS-1$

    private static java.util.Map<String, UmlinteractionOperatorKind> __labelIds = new java.util.HashMap<String, UmlinteractionOperatorKind>();
    private java.lang.String __literalName;

    static {
       __labelIds.put("seq", SEQ); //$NON-NLS-1$
       __labelIds.put("alt", ALT); //$NON-NLS-1$
       __labelIds.put("opt", OPT); //$NON-NLS-1$
       __labelIds.put("break", BREAK); //$NON-NLS-1$
       __labelIds.put("par", PAR); //$NON-NLS-1$
       __labelIds.put("strict", STRICT); //$NON-NLS-1$
       __labelIds.put("loop", LOOP); //$NON-NLS-1$
       __labelIds.put("critical", CRITICAL); //$NON-NLS-1$
       __labelIds.put("neg", NEG); //$NON-NLS-1$
       __labelIds.put("assert", ASSERT); //$NON-NLS-1$
       __labelIds.put("ignore", IGNORE); //$NON-NLS-1$
       __labelIds.put("consider", CONSIDER); //$NON-NLS-1$
    }

    // constructor is private
    private UmlinteractionOperatorKindEnum(java.lang.String literalName){
        this.__literalName = literalName;
    }

    public static UmlinteractionOperatorKind forName(java.lang.String value) {
        UmlinteractionOperatorKind result = __labelIds.get(value);
        if(result != null) {
            return result;
        }
        String message = new java.text.MessageFormat( ENUMLABELNOTFOUNDPATTERN ).format( new String[] { value, "UmlinteractionOperatorKindEnum" } ); //$NON-NLS-1$
        throw new java.lang.IllegalArgumentException(message);
    }

    public java.util.List<java.lang.String> refTypeName() {
        return __QUALIFIED_NAME;
    }

    @java.lang.Override
    public java.lang.String toString() {
        return this.__literalName;
    }

    /* this is required by the specification */
    protected java.lang.Object readResolve() throws java.io.ObjectStreamException {
        try {
            return forName(__literalName);
        }
        catch(java.lang.IllegalArgumentException iae) {
            java.io.InvalidObjectException ioe = new java.io.InvalidObjectException(iae.getMessage());
            ioe.initCause(iae);
            throw ioe;
        }
    }
}