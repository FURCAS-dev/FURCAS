/**
 * Generated by the MOIN Generator Version 3.0
 **/

package euml.generic.interactions.__impl;

public class SendEventWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<euml.generic.interactions.SendEvent> implements euml.generic.interactions.SendEvent,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The SendEvent wrapper
     */
    public SendEventWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, euml.generic.interactions.__impl.SendEventImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private euml.generic.interactions.__impl.SendEventImpl getCastWrappedObject() {
        return (euml.generic.interactions.__impl.SendEventImpl) getWrappedObject();
    }

    public euml.generic.interactions.SendEvent unwrap() {
        return (euml.generic.interactions.SendEvent) getWrappedObject();
    }
    
    public boolean exists(euml.generic.interactions.Umlmessage _Umlmessage, euml.generic.interactions.UmlmessageEnd _SendEvent) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Umlmessage), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SendEvent));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Umlmessage), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SendEvent)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public euml.generic.interactions.Umlmessage getUmlmessage(euml.generic.interactions.UmlmessageEnd _SendEvent) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (euml.generic.interactions.Umlmessage) wrapResult(getCastWrappedObject().getUmlmessage(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SendEvent)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (euml.generic.interactions.Umlmessage) wrapResult(getCastWrappedObject().getUmlmessage(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SendEvent))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public euml.generic.interactions.UmlmessageEnd getSendEvent(euml.generic.interactions.Umlmessage _Umlmessage) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (euml.generic.interactions.UmlmessageEnd) wrapResult(getCastWrappedObject().getSendEvent(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Umlmessage)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (euml.generic.interactions.UmlmessageEnd) wrapResult(getCastWrappedObject().getSendEvent(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Umlmessage))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(euml.generic.interactions.Umlmessage _Umlmessage, euml.generic.interactions.UmlmessageEnd _SendEvent) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Umlmessage), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SendEvent));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Umlmessage), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SendEvent)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(euml.generic.interactions.Umlmessage _Umlmessage, euml.generic.interactions.UmlmessageEnd _SendEvent) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Umlmessage), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SendEvent));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Umlmessage), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SendEvent)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<euml.generic.interactions.SendEvent> get___JmiInterface() {
        return euml.generic.interactions.SendEvent.class;
    }

    protected String metaObjectToString() {
        return "euml.generic.interactions.SendEvent (Java Type)\nEUML.Generic.Interactions.sendEvent (MOF Type)"; //$NON-NLS-1$
    }    
}