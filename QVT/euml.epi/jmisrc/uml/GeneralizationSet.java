/**
 * Generated by the MOIN Generator Version 3.0
 **/

package uml;

/**
 * A generalization set is a packageable element whose instances define collections of subsets of generalization relationships.
 * This interface is not intended to be implemented by clients.
 */
public interface GeneralizationSet extends uml.PackageableElement {

    /**
     * Descriptors for all features of this MofClass and its supertypes.
     */
    public static final Descriptors DESCRIPTORS = new Descriptors( );

    // class extent descriptor
    /**
     * Extent descriptor
     */
    public final com.sap.tc.moin.repository.mmi.descriptors.ClassDescriptor<com.sap.tc.moin.repository.mmi.reflect.RefClass, uml.GeneralizationSet> CLASS_DESCRIPTOR = new com.sap.tc.moin.repository.mmi.descriptors.ClassDescriptor<com.sap.tc.moin.repository.mmi.reflect.RefClass, uml.GeneralizationSet>("49868D0266A2D3E0F0EF11DDAB35000E35A783E4", "sap.com/moin/mm/euml", "uml", "GeneralizationSet"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ 

    
    // attributes
    public boolean isCovering() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public void setCovering(boolean newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public boolean isDisjoint() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public void setDisjoint(boolean newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;

    // references
    public uml.Classifier getPowertype() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public void setPowertype(uml.Classifier newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public java.util.Collection<uml.Generalization> getGeneralization() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;


    public static final class Descriptors {
        Descriptors( ) { 
        }
        /**
         * Returns the descriptor for the <code>name</code> attribute.
         * @return  the descriptor for the <code>name</code> attribute
         */
        public com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,uml.NamedElement,java.util.Collection<java.lang.String>> NAME( ) {
            return uml.NamedElement.DESCRIPTORS.NAME( );
        }
        /**
         * Returns the descriptor for the <code>visibility</code> attribute.
         * @return  the descriptor for the <code>visibility</code> attribute
         */
        public com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,uml.NamedElement,uml.VisibilityKind> VISIBILITY( ) {
            return uml.NamedElement.DESCRIPTORS.VISIBILITY( );
        }
        /**
         * Returns the descriptor for the <code>qualifiedName</code> attribute.
         * @return  the descriptor for the <code>qualifiedName</code> attribute
         */
        public com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,uml.NamedElement,java.lang.String> QUALIFIED_NAME( ) {
            return uml.NamedElement.DESCRIPTORS.QUALIFIED_NAME( );
        }
        private com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,uml.GeneralizationSet,java.lang.Boolean> __isCovering;
        /**
         * Returns the descriptor for the <code>isCovering</code> attribute.
         * @return  the descriptor for the <code>isCovering</code> attribute
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,uml.GeneralizationSet,java.lang.Boolean> IS_COVERING( ) {
            if ( __isCovering == null ) {
                __isCovering = new com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,uml.GeneralizationSet,java.lang.Boolean>( "498695F2BA913D70F0F411DD86C7000E35A783E4", "sap.com/moin/mm/euml", new java.lang.String[] { "uml", "GeneralizationSet", "isCovering" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ 
            }
            return __isCovering;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,uml.GeneralizationSet,java.lang.Boolean> __isDisjoint;
        /**
         * Returns the descriptor for the <code>isDisjoint</code> attribute.
         * @return  the descriptor for the <code>isDisjoint</code> attribute
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,uml.GeneralizationSet,java.lang.Boolean> IS_DISJOINT( ) {
            if ( __isDisjoint == null ) {
                __isDisjoint = new com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,uml.GeneralizationSet,java.lang.Boolean>( "498695FBBFE27A00F0F411DD831A000E35A783E4", "sap.com/moin/mm/euml", new java.lang.String[] { "uml", "GeneralizationSet", "isDisjoint" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ 
            }
            return __isDisjoint;
        }
        /**
         * Returns the descriptor for the <code>ownedElement</code> reference.
         * @return  the descriptor for the <code>ownedElement</code> reference
         */
        public com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,uml.Element,java.util.Collection<uml.Element>> OWNED_ELEMENT( ) {
            return uml.Element.DESCRIPTORS.OWNED_ELEMENT( );
        }
        /**
         * Returns the descriptor for the <code>owner</code> reference.
         * @return  the descriptor for the <code>owner</code> reference
         */
        public com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,uml.Element,uml.Element> OWNER( ) {
            return uml.Element.DESCRIPTORS.OWNER( );
        }
        /**
         * Returns the descriptor for the <code>ownedComment</code> reference.
         * @return  the descriptor for the <code>ownedComment</code> reference
         */
        public com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,uml.Element,java.util.Collection<uml.Comment>> OWNED_COMMENT( ) {
            return uml.Element.DESCRIPTORS.OWNED_COMMENT( );
        }
        /**
         * Returns the descriptor for the <code>clientDependency</code> reference.
         * @return  the descriptor for the <code>clientDependency</code> reference
         */
        public com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,uml.NamedElement,java.util.Collection<uml.Dependency>> CLIENT_DEPENDENCY( ) {
            return uml.NamedElement.DESCRIPTORS.CLIENT_DEPENDENCY( );
        }
        /**
         * Returns the descriptor for the <code>namespace</code> reference.
         * @return  the descriptor for the <code>namespace</code> reference
         */
        public com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,uml.NamedElement,uml.Namespace> NAMESPACE( ) {
            return uml.NamedElement.DESCRIPTORS.NAMESPACE( );
        }
        /**
         * Returns the descriptor for the <code>nameExpression</code> reference.
         * @return  the descriptor for the <code>nameExpression</code> reference
         */
        public com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,uml.NamedElement,uml.StringExpression> NAME_EXPRESSION( ) {
            return uml.NamedElement.DESCRIPTORS.NAME_EXPRESSION( );
        }
        /**
         * Returns the descriptor for the <code>templateparameter</code> reference.
         * @return  the descriptor for the <code>templateparameter</code> reference
         */
        public com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,uml.ParameterableElement,uml.TemplateParameter> TEMPLATEPARAMETER( ) {
            return uml.ParameterableElement.DESCRIPTORS.TEMPLATEPARAMETER( );
        }
        /**
         * Returns the descriptor for the <code>owningtemplateparameter</code> reference.
         * @return  the descriptor for the <code>owningtemplateparameter</code> reference
         */
        public com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,uml.ParameterableElement,uml.TemplateParameter> OWNINGTEMPLATEPARAMETER( ) {
            return uml.ParameterableElement.DESCRIPTORS.OWNINGTEMPLATEPARAMETER( );
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,uml.GeneralizationSet,uml.Classifier> __powertype;
        /**
         * Returns the descriptor for the <code>powertype</code> reference.
         * @return  the descriptor for the <code>powertype</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,uml.GeneralizationSet,uml.Classifier> POWERTYPE( ) {
            if ( __powertype == null ) {
                __powertype = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,uml.GeneralizationSet,uml.Classifier>( "49868D62A0631180F0EF11DDC03E000E35A783E4", "sap.com/moin/mm/euml", new java.lang.String[] { "uml", "GeneralizationSet", "powertype" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ 
            }
            return __powertype;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,uml.GeneralizationSet,java.util.Collection<uml.Generalization>> __generalization;
        /**
         * Returns the descriptor for the <code>generalization</code> reference.
         * @return  the descriptor for the <code>generalization</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,uml.GeneralizationSet,java.util.Collection<uml.Generalization>> GENERALIZATION( ) {
            if ( __generalization == null ) {
                __generalization = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,uml.GeneralizationSet,java.util.Collection<uml.Generalization>>( "498695213DED9610F0F411DD930E000E35A783E4", "sap.com/moin/mm/euml", new java.lang.String[] { "uml", "GeneralizationSet", "generalization" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ 
            }
            return __generalization;
        }
    }
}    