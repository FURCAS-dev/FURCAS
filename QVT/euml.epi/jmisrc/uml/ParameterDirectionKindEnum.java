/**
 * Generated by the MOIN Generator Version 3.0
 **/

package uml;

public final class ParameterDirectionKindEnum implements uml.ParameterDirectionKind
{
    private static final long serialVersionUID = 1L;
    
    private final static String ENUMLABELNOTFOUNDPATTERN = "Enumeration label \"{0}\" is not defined for enumeration \"{1}\""; //$NON-NLS-1$

    private static final java.util.List<String> __QUALIFIED_NAME = java.util.Collections.unmodifiableList(java.util.Arrays.asList(new String[] { "uml", "ParameterDirectionKind" })); //$NON-NLS-1$ //$NON-NLS-2$

    public static final ParameterDirectionKindEnum IN = new ParameterDirectionKindEnum("in"); //$NON-NLS-1$
    public static final ParameterDirectionKindEnum INOUT = new ParameterDirectionKindEnum("inout"); //$NON-NLS-1$
    public static final ParameterDirectionKindEnum OUT = new ParameterDirectionKindEnum("out"); //$NON-NLS-1$
    public static final ParameterDirectionKindEnum RETURN = new ParameterDirectionKindEnum("return"); //$NON-NLS-1$

    private static java.util.Map<String, ParameterDirectionKind> __labelIds = new java.util.HashMap<String, ParameterDirectionKind>();
    private java.lang.String __literalName;

    static {
       __labelIds.put("in", IN); //$NON-NLS-1$
       __labelIds.put("inout", INOUT); //$NON-NLS-1$
       __labelIds.put("out", OUT); //$NON-NLS-1$
       __labelIds.put("return", RETURN); //$NON-NLS-1$
    }

    // constructor is private
    private ParameterDirectionKindEnum(java.lang.String literalName){
        this.__literalName = literalName;
    }

    public static ParameterDirectionKind forName(java.lang.String value) {
        ParameterDirectionKind result = __labelIds.get(value);
        if(result != null) {
            return result;
        }
        String message = new java.text.MessageFormat( ENUMLABELNOTFOUNDPATTERN ).format( new String[] { value, "ParameterDirectionKindEnum" } ); //$NON-NLS-1$
        throw new java.lang.IllegalArgumentException(message);
    }

    public java.util.List<java.lang.String> refTypeName() {
        return __QUALIFIED_NAME;
    }

    @java.lang.Override
    public java.lang.String toString() {
        return this.__literalName;
    }

    /* this is required by the specification */
    protected java.lang.Object readResolve() throws java.io.ObjectStreamException {
        try {
            return forName(__literalName);
        }
        catch(java.lang.IllegalArgumentException iae) {
            java.io.InvalidObjectException ioe = new java.io.InvalidObjectException(iae.getMessage());
            ioe.initCause(iae);
            throw ioe;
        }
    }
}