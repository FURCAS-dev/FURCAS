/**
 * Generated by the MOIN Generator Version 3.0
 **/

package uml.__impl;

public class NamedElementStringExpressionWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<uml.NamedElementStringExpression> implements uml.NamedElementStringExpression,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The NamedElementStringExpression wrapper
     */
    public NamedElementStringExpressionWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, uml.__impl.NamedElementStringExpressionImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private uml.__impl.NamedElementStringExpressionImpl getCastWrappedObject() {
        return (uml.__impl.NamedElementStringExpressionImpl) getWrappedObject();
    }

    public uml.NamedElementStringExpression unwrap() {
        return (uml.NamedElementStringExpression) getWrappedObject();
    }
    
    public boolean exists(uml.NamedElement _Namedelement, uml.StringExpression _NameExpression) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Namedelement), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _NameExpression));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Namedelement), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _NameExpression)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public uml.NamedElement getNamedelement(uml.StringExpression _NameExpression) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (uml.NamedElement) wrapResult(getCastWrappedObject().getNamedelement(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _NameExpression)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (uml.NamedElement) wrapResult(getCastWrappedObject().getNamedelement(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _NameExpression))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public uml.StringExpression getNameExpression(uml.NamedElement _Namedelement) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (uml.StringExpression) wrapResult(getCastWrappedObject().getNameExpression(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Namedelement)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (uml.StringExpression) wrapResult(getCastWrappedObject().getNameExpression(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Namedelement))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(uml.NamedElement _Namedelement, uml.StringExpression _NameExpression) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Namedelement), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _NameExpression));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Namedelement), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _NameExpression)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(uml.NamedElement _Namedelement, uml.StringExpression _NameExpression) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Namedelement), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _NameExpression));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Namedelement), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _NameExpression)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<uml.NamedElementStringExpression> get___JmiInterface() {
        return uml.NamedElementStringExpression.class;
    }

    protected String metaObjectToString() {
        return "uml.NamedElementStringExpression (Java Type)\numl.NamedElement_StringExpression (MOF Type)"; //$NON-NLS-1$
    }    
}