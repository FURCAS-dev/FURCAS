/**
 * Generated by the MOIN Generator Version 3.0
 **/

package uml.__impl;

public class NamespacePackageImportWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<uml.NamespacePackageImport> implements uml.NamespacePackageImport,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The NamespacePackageImport wrapper
     */
    public NamespacePackageImportWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, uml.__impl.NamespacePackageImportImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private uml.__impl.NamespacePackageImportImpl getCastWrappedObject() {
        return (uml.__impl.NamespacePackageImportImpl) getWrappedObject();
    }

    public uml.NamespacePackageImport unwrap() {
        return (uml.NamespacePackageImport) getWrappedObject();
    }
    
    public boolean exists(uml.Namespace _ImportingNamespace, uml.PackageImport _PackageImport) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImportingNamespace), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _PackageImport));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImportingNamespace), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _PackageImport)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public uml.Namespace getImportingNamespace(uml.PackageImport _PackageImport) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (uml.Namespace) wrapResult(getCastWrappedObject().getImportingNamespace(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _PackageImport)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (uml.Namespace) wrapResult(getCastWrappedObject().getImportingNamespace(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _PackageImport))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getPackageImport(uml.Namespace _ImportingNamespace) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getPackageImport(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImportingNamespace)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getPackageImport(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImportingNamespace))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(uml.Namespace _ImportingNamespace, uml.PackageImport _PackageImport) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImportingNamespace), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _PackageImport));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImportingNamespace), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _PackageImport)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(uml.Namespace _ImportingNamespace, uml.PackageImport _PackageImport) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImportingNamespace), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _PackageImport));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImportingNamespace), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _PackageImport)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<uml.NamespacePackageImport> get___JmiInterface() {
        return uml.NamespacePackageImport.class;
    }

    protected String metaObjectToString() {
        return "uml.NamespacePackageImport (Java Type)\numl.Namespace_PackageImport (MOF Type)"; //$NON-NLS-1$
    }    
}