/**
 * Generated by the MOIN Generator Version 3.0
 **/

package uml.__impl;

public class PackageImportPackageWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<uml.PackageImportPackage> implements uml.PackageImportPackage,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The PackageImportPackage wrapper
     */
    public PackageImportPackageWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, uml.__impl.PackageImportPackageImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private uml.__impl.PackageImportPackageImpl getCastWrappedObject() {
        return (uml.__impl.PackageImportPackageImpl) getWrappedObject();
    }

    public uml.PackageImportPackage unwrap() {
        return (uml.PackageImportPackage) getWrappedObject();
    }
    
    public boolean exists(uml.PackageImport _Packageimport, uml.Package _ImportedPackage) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Packageimport), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImportedPackage));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Packageimport), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImportedPackage)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public uml.PackageImport getPackageimport(uml.Package _ImportedPackage) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (uml.PackageImport) wrapResult(getCastWrappedObject().getPackageimport(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImportedPackage)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (uml.PackageImport) wrapResult(getCastWrappedObject().getPackageimport(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImportedPackage))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public uml.Package getImportedPackage(uml.PackageImport _Packageimport) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (uml.Package) wrapResult(getCastWrappedObject().getImportedPackage(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Packageimport)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (uml.Package) wrapResult(getCastWrappedObject().getImportedPackage(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Packageimport))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(uml.PackageImport _Packageimport, uml.Package _ImportedPackage) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Packageimport), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImportedPackage));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Packageimport), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImportedPackage)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(uml.PackageImport _Packageimport, uml.Package _ImportedPackage) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Packageimport), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImportedPackage));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Packageimport), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImportedPackage)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<uml.PackageImportPackage> get___JmiInterface() {
        return uml.PackageImportPackage.class;
    }

    protected String metaObjectToString() {
        return "uml.PackageImportPackage (Java Type)\numl.PackageImport_Package (MOF Type)"; //$NON-NLS-1$
    }    
}