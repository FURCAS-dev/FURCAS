/**
 * Generated by the MOIN Generator Version 3.0
 **/

package uml.__impl;

public class ActualWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<uml.Actual> implements uml.Actual,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The Actual wrapper
     */
    public ActualWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, uml.__impl.ActualImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private uml.__impl.ActualImpl getCastWrappedObject() {
        return (uml.__impl.ActualImpl) getWrappedObject();
    }

    public uml.Actual unwrap() {
        return (uml.Actual) getWrappedObject();
    }
    
    public boolean exists(uml.TemplateParameterSubstitution _Templateparametersubstitution, uml.ParameterableElement _Actual) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Templateparametersubstitution), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Actual));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Templateparametersubstitution), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Actual)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public uml.TemplateParameterSubstitution getTemplateparametersubstitution(uml.ParameterableElement _Actual) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (uml.TemplateParameterSubstitution) wrapResult(getCastWrappedObject().getTemplateparametersubstitution(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Actual)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (uml.TemplateParameterSubstitution) wrapResult(getCastWrappedObject().getTemplateparametersubstitution(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Actual))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getActual(uml.TemplateParameterSubstitution _Templateparametersubstitution) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getActual(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Templateparametersubstitution)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getActual(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Templateparametersubstitution))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(uml.TemplateParameterSubstitution _Templateparametersubstitution, uml.ParameterableElement _Actual) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Templateparametersubstitution), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Actual));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Templateparametersubstitution), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Actual)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(uml.TemplateParameterSubstitution _Templateparametersubstitution, uml.ParameterableElement _Actual) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Templateparametersubstitution), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Actual));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Templateparametersubstitution), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Actual)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<uml.Actual> get___JmiInterface() {
        return uml.Actual.class;
    }

    protected String metaObjectToString() {
        return "uml.Actual (Java Type)\numl.actual (MOF Type)"; //$NON-NLS-1$
    }    
}