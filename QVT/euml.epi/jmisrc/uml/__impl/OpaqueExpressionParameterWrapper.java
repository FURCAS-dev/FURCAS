/**
 * Generated by the MOIN Generator Version 3.0
 **/

package uml.__impl;

public class OpaqueExpressionParameterWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<uml.OpaqueExpressionParameter> implements uml.OpaqueExpressionParameter,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The OpaqueExpressionParameter wrapper
     */
    public OpaqueExpressionParameterWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, uml.__impl.OpaqueExpressionParameterImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private uml.__impl.OpaqueExpressionParameterImpl getCastWrappedObject() {
        return (uml.__impl.OpaqueExpressionParameterImpl) getWrappedObject();
    }

    public uml.OpaqueExpressionParameter unwrap() {
        return (uml.OpaqueExpressionParameter) getWrappedObject();
    }
    
    public boolean exists(uml.OpaqueExpression _Opaqueexpression, uml.Parameter _Result) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Opaqueexpression), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Result));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Opaqueexpression), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Result)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public uml.OpaqueExpression getOpaqueexpression(uml.Parameter _Result) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (uml.OpaqueExpression) wrapResult(getCastWrappedObject().getOpaqueexpression(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Result)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (uml.OpaqueExpression) wrapResult(getCastWrappedObject().getOpaqueexpression(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Result))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public uml.Parameter getResult(uml.OpaqueExpression _Opaqueexpression) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (uml.Parameter) wrapResult(getCastWrappedObject().getResult(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Opaqueexpression)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (uml.Parameter) wrapResult(getCastWrappedObject().getResult(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Opaqueexpression))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<uml.OpaqueExpressionParameter> get___JmiInterface() {
        return uml.OpaqueExpressionParameter.class;
    }

    protected String metaObjectToString() {
        return "uml.OpaqueExpressionParameter (Java Type)\numl.OpaqueExpression_Parameter (MOF Type)"; //$NON-NLS-1$
    }    
}