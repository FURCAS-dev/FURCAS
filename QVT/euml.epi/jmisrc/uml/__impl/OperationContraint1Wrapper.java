/**
 * Generated by the MOIN Generator Version 3.0
 **/

package uml.__impl;

public class OperationContraint1Wrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<uml.OperationContraint1> implements uml.OperationContraint1,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The OperationContraint1 wrapper
     */
    public OperationContraint1Wrapper(com.sap.tc.moin.repository.core.CoreConnection conn, uml.__impl.OperationContraint1Impl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private uml.__impl.OperationContraint1Impl getCastWrappedObject() {
        return (uml.__impl.OperationContraint1Impl) getWrappedObject();
    }

    public uml.OperationContraint1 unwrap() {
        return (uml.OperationContraint1) getWrappedObject();
    }
    
    public boolean exists(uml.Operation _Operation, uml.Contraint _Postcondition) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Operation), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Postcondition));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Operation), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Postcondition)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public uml.Operation getOperation(uml.Contraint _Postcondition) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (uml.Operation) wrapResult(getCastWrappedObject().getOperation(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Postcondition)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (uml.Operation) wrapResult(getCastWrappedObject().getOperation(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Postcondition))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getPostcondition(uml.Operation _Operation) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getPostcondition(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Operation)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getPostcondition(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Operation))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(uml.Operation _Operation, uml.Contraint _Postcondition) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Operation), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Postcondition));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Operation), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Postcondition)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(uml.Operation _Operation, uml.Contraint _Postcondition) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Operation), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Postcondition));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Operation), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Postcondition)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<uml.OperationContraint1> get___JmiInterface() {
        return uml.OperationContraint1.class;
    }

    protected String metaObjectToString() {
        return "uml.OperationContraint1 (Java Type)\numl.Operation_Contraint1 (MOF Type)"; //$NON-NLS-1$
    }    
}