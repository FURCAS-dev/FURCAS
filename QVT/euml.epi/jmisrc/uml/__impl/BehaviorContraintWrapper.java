/**
 * Generated by the MOIN Generator Version 3.0
 **/

package uml.__impl;

public class BehaviorContraintWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<uml.BehaviorContraint> implements uml.BehaviorContraint,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The BehaviorContraint wrapper
     */
    public BehaviorContraintWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, uml.__impl.BehaviorContraintImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private uml.__impl.BehaviorContraintImpl getCastWrappedObject() {
        return (uml.__impl.BehaviorContraintImpl) getWrappedObject();
    }

    public uml.BehaviorContraint unwrap() {
        return (uml.BehaviorContraint) getWrappedObject();
    }
    
    public boolean exists(uml.Behavior _Behavior, uml.Contraint _Contraint) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Behavior), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Contraint));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Behavior), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Contraint)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public uml.Behavior getBehavior(uml.Contraint _Contraint) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (uml.Behavior) wrapResult(getCastWrappedObject().getBehavior(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Contraint)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (uml.Behavior) wrapResult(getCastWrappedObject().getBehavior(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Contraint))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getContraint(uml.Behavior _Behavior) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getContraint(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Behavior)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getContraint(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Behavior))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(uml.Behavior _Behavior, uml.Contraint _Contraint) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Behavior), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Contraint));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Behavior), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Contraint)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(uml.Behavior _Behavior, uml.Contraint _Contraint) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Behavior), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Contraint));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Behavior), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Contraint)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<uml.BehaviorContraint> get___JmiInterface() {
        return uml.BehaviorContraint.class;
    }

    protected String metaObjectToString() {
        return "uml.BehaviorContraint (Java Type)\numl.Behavior_Contraint (MOF Type)"; //$NON-NLS-1$
    }    
}