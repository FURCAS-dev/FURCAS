/**
 * Generated by the MOIN Generator Version 3.0
 **/

package uml.__impl;

public class OpaqueExpressionBehaviorWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<uml.OpaqueExpressionBehavior> implements uml.OpaqueExpressionBehavior,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The OpaqueExpressionBehavior wrapper
     */
    public OpaqueExpressionBehaviorWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, uml.__impl.OpaqueExpressionBehaviorImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private uml.__impl.OpaqueExpressionBehaviorImpl getCastWrappedObject() {
        return (uml.__impl.OpaqueExpressionBehaviorImpl) getWrappedObject();
    }

    public uml.OpaqueExpressionBehavior unwrap() {
        return (uml.OpaqueExpressionBehavior) getWrappedObject();
    }
    
    public boolean exists(uml.OpaqueExpression _Opaqueexpression, uml.Behavior _Behavior) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Opaqueexpression), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Behavior));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Opaqueexpression), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Behavior)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public uml.OpaqueExpression getOpaqueexpression(uml.Behavior _Behavior) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (uml.OpaqueExpression) wrapResult(getCastWrappedObject().getOpaqueexpression(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Behavior)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (uml.OpaqueExpression) wrapResult(getCastWrappedObject().getOpaqueexpression(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Behavior))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public uml.Behavior getBehavior(uml.OpaqueExpression _Opaqueexpression) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (uml.Behavior) wrapResult(getCastWrappedObject().getBehavior(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Opaqueexpression)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (uml.Behavior) wrapResult(getCastWrappedObject().getBehavior(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Opaqueexpression))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(uml.OpaqueExpression _Opaqueexpression, uml.Behavior _Behavior) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Opaqueexpression), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Behavior));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Opaqueexpression), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Behavior)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(uml.OpaqueExpression _Opaqueexpression, uml.Behavior _Behavior) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Opaqueexpression), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Behavior));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Opaqueexpression), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Behavior)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<uml.OpaqueExpressionBehavior> get___JmiInterface() {
        return uml.OpaqueExpressionBehavior.class;
    }

    protected String metaObjectToString() {
        return "uml.OpaqueExpressionBehavior (Java Type)\numl.OpaqueExpression_Behavior (MOF Type)"; //$NON-NLS-1$
    }    
}