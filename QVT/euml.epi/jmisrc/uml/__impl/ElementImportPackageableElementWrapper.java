/**
 * Generated by the MOIN Generator Version 3.0
 **/

package uml.__impl;

public class ElementImportPackageableElementWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<uml.ElementImportPackageableElement> implements uml.ElementImportPackageableElement,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The ElementImportPackageableElement wrapper
     */
    public ElementImportPackageableElementWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, uml.__impl.ElementImportPackageableElementImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private uml.__impl.ElementImportPackageableElementImpl getCastWrappedObject() {
        return (uml.__impl.ElementImportPackageableElementImpl) getWrappedObject();
    }

    public uml.ElementImportPackageableElement unwrap() {
        return (uml.ElementImportPackageableElement) getWrappedObject();
    }
    
    public boolean exists(uml.ElementImport _Elementimport, uml.PackageableElement _ImportedElement) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Elementimport), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImportedElement));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Elementimport), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImportedElement)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public uml.ElementImport getElementimport(uml.PackageableElement _ImportedElement) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (uml.ElementImport) wrapResult(getCastWrappedObject().getElementimport(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImportedElement)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (uml.ElementImport) wrapResult(getCastWrappedObject().getElementimport(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImportedElement))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public uml.PackageableElement getImportedElement(uml.ElementImport _Elementimport) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (uml.PackageableElement) wrapResult(getCastWrappedObject().getImportedElement(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Elementimport)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (uml.PackageableElement) wrapResult(getCastWrappedObject().getImportedElement(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Elementimport))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(uml.ElementImport _Elementimport, uml.PackageableElement _ImportedElement) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Elementimport), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImportedElement));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Elementimport), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImportedElement)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(uml.ElementImport _Elementimport, uml.PackageableElement _ImportedElement) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Elementimport), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImportedElement));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Elementimport), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImportedElement)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<uml.ElementImportPackageableElement> get___JmiInterface() {
        return uml.ElementImportPackageableElement.class;
    }

    protected String metaObjectToString() {
        return "uml.ElementImportPackageableElement (Java Type)\numl.ElementImport_PackageableElement (MOF Type)"; //$NON-NLS-1$
    }    
}