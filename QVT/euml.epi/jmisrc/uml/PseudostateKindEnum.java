/**
 * Generated by the MOIN Generator Version 3.0
 **/

package uml;

public final class PseudostateKindEnum implements uml.PseudostateKind
{
    private static final long serialVersionUID = 1L;
    
    private final static String ENUMLABELNOTFOUNDPATTERN = "Enumeration label \"{0}\" is not defined for enumeration \"{1}\""; //$NON-NLS-1$

    private static final java.util.List<String> __QUALIFIED_NAME = java.util.Collections.unmodifiableList(java.util.Arrays.asList(new String[] { "uml", "PseudostateKind" })); //$NON-NLS-1$ //$NON-NLS-2$

    public static final PseudostateKindEnum INITIAL = new PseudostateKindEnum("initial"); //$NON-NLS-1$
    public static final PseudostateKindEnum DEEP_HISTORY = new PseudostateKindEnum("deepHistory"); //$NON-NLS-1$
    public static final PseudostateKindEnum SHALLOW_HISTORY = new PseudostateKindEnum("shallowHistory"); //$NON-NLS-1$
    public static final PseudostateKindEnum JOIN = new PseudostateKindEnum("join"); //$NON-NLS-1$
    public static final PseudostateKindEnum FORK = new PseudostateKindEnum("fork"); //$NON-NLS-1$
    public static final PseudostateKindEnum JUNCTION = new PseudostateKindEnum("junction"); //$NON-NLS-1$
    public static final PseudostateKindEnum CHOICE = new PseudostateKindEnum("choice"); //$NON-NLS-1$
    public static final PseudostateKindEnum ENTRY_POINT = new PseudostateKindEnum("entryPoint"); //$NON-NLS-1$
    public static final PseudostateKindEnum EXIT_POINT = new PseudostateKindEnum("exitPoint"); //$NON-NLS-1$
    public static final PseudostateKindEnum TERMINATE = new PseudostateKindEnum("terminate"); //$NON-NLS-1$

    private static java.util.Map<String, PseudostateKind> __labelIds = new java.util.HashMap<String, PseudostateKind>();
    private java.lang.String __literalName;

    static {
       __labelIds.put("initial", INITIAL); //$NON-NLS-1$
       __labelIds.put("deepHistory", DEEP_HISTORY); //$NON-NLS-1$
       __labelIds.put("shallowHistory", SHALLOW_HISTORY); //$NON-NLS-1$
       __labelIds.put("join", JOIN); //$NON-NLS-1$
       __labelIds.put("fork", FORK); //$NON-NLS-1$
       __labelIds.put("junction", JUNCTION); //$NON-NLS-1$
       __labelIds.put("choice", CHOICE); //$NON-NLS-1$
       __labelIds.put("entryPoint", ENTRY_POINT); //$NON-NLS-1$
       __labelIds.put("exitPoint", EXIT_POINT); //$NON-NLS-1$
       __labelIds.put("terminate", TERMINATE); //$NON-NLS-1$
    }

    // constructor is private
    private PseudostateKindEnum(java.lang.String literalName){
        this.__literalName = literalName;
    }

    public static PseudostateKind forName(java.lang.String value) {
        PseudostateKind result = __labelIds.get(value);
        if(result != null) {
            return result;
        }
        String message = new java.text.MessageFormat( ENUMLABELNOTFOUNDPATTERN ).format( new String[] { value, "PseudostateKindEnum" } ); //$NON-NLS-1$
        throw new java.lang.IllegalArgumentException(message);
    }

    public java.util.List<java.lang.String> refTypeName() {
        return __QUALIFIED_NAME;
    }

    @java.lang.Override
    public java.lang.String toString() {
        return this.__literalName;
    }

    /* this is required by the specification */
    protected java.lang.Object readResolve() throws java.io.ObjectStreamException {
        try {
            return forName(__literalName);
        }
        catch(java.lang.IllegalArgumentException iae) {
            java.io.InvalidObjectException ioe = new java.io.InvalidObjectException(iae.getMessage());
            ioe.initCause(iae);
            throw ioe;
        }
    }
}