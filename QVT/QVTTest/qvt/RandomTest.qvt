transformation RandomTest(backward : EUML, forward : EUML) {
  
  top relation GenerateClass {
    
    varName,randomName : String;
    
    enforce domain backward p : EUML::Generic::Kernel::UMLPackage {
      name = varName
    };
    
    enforce domain forward cls : EUML::Generic::Kernel::UMLClass {
    	the_owner = p,
        name = varName + '_Class'+randomName
    };
    
    when {
    	randomName=getRandomString();
    }
    
  }
  
  top relation GenerateProperty {
    
    varName : String;
    
    enforce domain backward p : EUML::Generic::Kernel::UMLPackage {
      name = varName
    };
    
    enforce domain forward c : EUML::Generic::Kernel::UMLClass {
      the_owned_elements = prop : EUML::Generic::Kernel::UMLProperty {
        name = varName + '_Property_'-- + getRandomString()
      }
    };
    
    when {
    	GenerateClass(p,c);
    }
    
  }
    
  query getRandomString () : String {
    ''
  }
  
}