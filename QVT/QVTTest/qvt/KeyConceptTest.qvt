transformation KeyEmulation(source:EUML, target:EUML) { 
	
	key Generic::Kernel::UMLProperty {name,the_owner};
	key Generic::Kernel::UMLInterface {name};

	top relation SimpleComponent {
	
		ComponentName : String;
		
		enforce domain source SimpleComponent:Generic::Components::UMLComponent {
			name = ComponentName
		};
		
		enforce domain target ComponentPackage:Generic::Kernel::UMLPackage {
			name = ComponentName
		};
			
	}		
		
	relation IdentifyInterfaceByName {	
		
   		primitive domain InterfaceName:String;
   
		enforce domain source Interface:Generic::Kernel::UMLInterface { };
		
	}
	
	relation IdentifyByName {	
	
		enforce domain target Owner:Generic::Kernel::UMLElement { };
		
   		primitive domain InterfaceName:String;
   
		enforce domain source Object:Generic::Kernel::UMLElement { };
		
	}
	
	-- Spec 5.4.3		
	top relation ComponentProvidesInterface {
	
		InterfaceName : String;
				
		enforce domain source InterfaceRelationship:Generic::Relationships::UMLDirectedRelationship {
		
			the_target_element = Interface:Generic::Kernel::UMLInterface {
				name = InterfaceName
			},
			
			the_source_element = Component:Generic::Components::UMLComponent {}--,
			
			--the_owner = Component
		};
		
		enforce domain target Class:Generic::Kernel::UMLClass {
			the_owner = ComponentPackage : Generic::Kernel::UMLPackage{},
			name = InterfaceName
		};
		

		when {
			SimpleComponent(Component,ComponentPackage);
			--done by keys!  if IdentifyInterfaceByName(InterfaceName,Interface) then true else true endif;
		}
		
		where {
			--done by keys!  IdentifyInterfaceByName(InterfaceName,Interface);
			NotLinkToAbstractClass(ComponentPackage,Interface,Class);
		}
		
	}
	

	relation NotLinkToAbstractClass {
		
		checkonly domain source ComponentPackage:Generic::Kernel::UMLPackage { -- serves as primary key part
		};
					
		checkonly domain source Interface:Generic::Kernel::UMLInterface {
		};
						
		checkonly domain target Class:Generic::Kernel::UMLClass {
		};
						
		where {			
			CopyProperty(Interface,ComponentPackage,Class);
		}
		
	}	
	
	
	relation CopyProperty {
	
		PropertyName : String;	
		
		enforce domain source Interface:Generic::Kernel::UMLInterface {
			the_owned_elements = HLDProperty:Generic::Kernel::UMLProperty {
				name = PropertyName
			}
		};
		
		enforce domain source ComponentPackage:Generic::Kernel::UMLPackage {}; -- serves as primary key part
		
		checkonly domain target Class:Generic::Kernel::UMLClass {
			the_owned_elements = DLDProperty:Generic::Kernel::UMLProperty {
				name = PropertyName
			}
		};
		
		when {		
			ComponentPackage = Class.the_owner;
			--done by keys!  if IdentifyByName(Interface,PropertyName,HLDProperty) then true else true endif;
		}
		
		where {
			--done by keys!  IdentifyByName(Interface,PropertyName,HLDProperty);
		}
				
	}
	
	
}