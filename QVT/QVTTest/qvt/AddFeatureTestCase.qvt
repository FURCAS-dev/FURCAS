transformation AddFeatureTestCase(source:EUML, target:EUML) { 
	
	top relation Package2Package {
	
		packageName : String;
		
		enforce domain source package1:Generic::Kernel::UMLPackage {
			name = packageName,
			the_owner = packageOwner1:Generic::Kernel::UMLPackage {}
		};
		
		enforce domain target package2:Generic::Kernel::UMLPackage {
			name = packageName,
			the_utilized_elements =  packageOwner2:Generic::Kernel::UMLPackage {}
			/*
			the_relationship_of_source =  : EUML::Generic::Relationships::UMLDirectedRelationship {
				the_source_element =  package2,
				the_target_element =  packageOwner2:Generic::Kernel::UMLPackage {}
			}*/
		};
		
		when {
			Package2Package(packageOwner1,packageOwner2) or TopPackage2TopPackage(packageOwner1,packageOwner2);
		}
			
	}		
		
	top relation TopPackage2TopPackage {
	
		packageName : String;
		
		enforce domain source package1:Generic::Kernel::UMLPackage {
			name = packageName
		};
		
		enforce domain target package2:Generic::Kernel::UMLPackage {
			name = packageName
		};
		
		when {
			not Package2Package(package1,package2);
		}
			
	}		
	
	
}