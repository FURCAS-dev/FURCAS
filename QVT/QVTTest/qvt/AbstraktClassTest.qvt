transformation AbstraktClassTest(source : EUML, target : EUML) {
	
	top relation CopyPropertiesAndName {
		
		pname : String;
		tp2 : EUML::Generic::Kernel::UMLClassifier;
		
		enforce domain source sp : EUML::Generic::Kernel::UMLClassifier {
			the_owned_elements = spp : EUML::Generic::Kernel::UMLProperty {
			},
			name = pname
		};
		
		enforce domain target tp : EUML::Generic::Kernel::UMLClassifier {
			the_owned_elements = tpp : EUML::Generic::Kernel::UMLProperty {
			},
			name = pname
		};
		
		when {
			sp.oclIsKindOf(EUML::Generic::Activities::UMLActivity) or sp.oclIsKindOf(EUML::Generic::Components::UMLComponent);
		}
		
		where {
			ActivityToInterface(sp, tp) or ComponentToInterface(sp, tp);
			not markerRelation1(sp, tp); -- tp is resolved, so test that the relation call returns false since type incompatibility
			--TODO works only if QvtProcessorImpl.respectCheckOnlyFlag() returns true:                       not markerRelation1(sp, tp2); -- test that the relation call always returns false for unbound values in checkonly-domains
		}
		
	}
	
	relation ActivityToInterface {
		
		enforce domain source req_ds : EUML::Generic::Activities::UMLActivity {
		};
		
		enforce domain target uc_ds : EUML::Generic::Kernel::UMLInterface {
		};
		
	}
	
	relation ComponentToInterface {
		
		enforce domain source sp : EUML::Generic::Components::UMLComponent {
		};
		
		enforce domain target tp : EUML::Generic::CompositeStructures::UMLCollaboration {
		};
		
	}
	
	relation markerRelation1 {
		
		checkonly domain source sp : EUML::Generic::Activities::UMLActivity {
		};
		
		checkonly domain target tp : EUML::Generic::CompositeStructures::UMLCollaboration {
		};
		
	}
	
	relation markerRelation2 {
		
		checkonly domain source sp : EUML::Generic::CompositeStructures::UMLCollaboration {
		};
		
		checkonly domain target tp : EUML::Generic::Kernel::UMLInterface {
		};
		
	}
	
	top relation CollaborationToInterface {
		
		pname : String;
		
		enforce domain source sp : EUML::Generic::CompositeStructures::UMLCollaboration {
			name = pname
		};
		
		enforce domain target tp : EUML::Generic::Kernel::UMLInterface {
			name = pname + 'FromCollaboration'
		};
		
		where {
			markerRelation2(sp, tp); -- test that marking works
		}
		
	}
	
}