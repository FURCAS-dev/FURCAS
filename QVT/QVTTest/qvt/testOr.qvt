transformation testOr(source:EUML, target:EUML) {

        
        top relation ActivityToInterface {
        		pname : String;
                enforce domain source req_ds:Generic::Activities::UMLActivity {
                	name = pname
                };
                enforce domain target uc_ds:Generic::Kernel::UMLInterface {
                	name = pname+'FromBehavior'
                };
        }

        top relation usingOR {
        		pname : String;
                enforce domain source sc:Generic::Kernel::UMLProperty {
                    the_owner = sp:Generic::CompositeStructures::UMLStructuredClassifier {},
                	name = pname
                };
                enforce domain target tc:Generic::Kernel::UMLProperty {
                    the_owner = tp:Generic::Kernel::UMLInterface {},
                	name = pname
                };
                when {
ActivityToInterface(sp, tp) or CollaborationToInterface(sp, tp) or ComponentToInterface(sp, tp);
                }
        }

        top relation ComponentToInterface {
        		pname : String;
                enforce domain source sp:Generic::Components::UMLComponent {
                	name = pname
                };
                enforce domain target tp:Generic::Kernel::UMLInterface {
                	name = pname+'FromComponent'
                };
        }
          
        -- Note: never executed because no top relation
        relation CollaborationToInterface {
        		pname : String;
                enforce domain source sp:Generic::CompositeStructures::UMLCollaboration {
                	name = pname
                };
                enforce domain target tp:Generic::Kernel::UMLInterface {
                	name = pname+'FromCollaboration'
                };
        }
}