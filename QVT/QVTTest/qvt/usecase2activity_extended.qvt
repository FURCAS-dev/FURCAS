transformation usecase2activity(backward:EUML, forward:EUML) {

top relation test {
	powner : Generic::Kernel::UMLPackage;
	enforce domain backward p:Generic::Kernel::UMLPackage {
		the_owner=powner
	};
    enforce domain forward x:Generic::CompositeStructures::UMLCollaboration {
		name='Col1',
		typeCode='Collaboration',
		stereotype='',
		the_owner=powner
	};
	where {
		UsecaseToActivity(p,x);
	}  	
}

relation UsecaseToActivity {
	pname : String;
	pvisibility : Generic::Kernel::UMLVisibilityKind;
	powner : Generic::Kernel::UMLPackage;
	cedges : Generic::Activities::UMLActivityEdge;
	cgroups : Generic::Activities::UMLActivityGroup;
	cisSingeleExecution : Boolean;
	cnodes : Generic::Activities::UMLActivityNode;
	palias : String; -- ADDED

    enforce domain backward p:Generic::Kernel::Generic::Kernel::UMLPackage {
		visibility=pvisibility,
		the_owned_elements= u:Generic::UseCases::UMLUseCase {
			name=pname,
			alias=palias -- ADDED
		}
  };
  
    enforce domain forward x:Generic::CompositeStructures::UMLCollaboration {
    	the_owned_elements= a:Generic::Activities::UMLActivity {
		    name=pname.concat('Activity'),
			visibility=pvisibility,
		    typeCode='Activity',
	    	stereotype='behavior',
		    comment='', -- ADDED
		    alias=palias -- ADDED
        }
    };
  }   
}