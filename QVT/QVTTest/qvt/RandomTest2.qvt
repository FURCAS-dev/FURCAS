transformation RandomTest2(backward : EUML, forward : EUML) {
  
  key EUML::Generic::Kernel::UMLClass { name };
  
  top relation GenerateClass {
    
    varName : String;
    
    enforce domain backward p : EUML::Generic::Kernel::UMLPackage {
      name = varName
    };
    
    enforce domain forward p : EUML::Generic::Kernel::UMLPackage {
      the_owned_elements = cls : EUML::Generic::Kernel::UMLClass {
        name = varName + '_Class'
      }
    };
    
    where {
    	GenerateProperty(p,cls);
    }
    
  }
  
  relation GenerateProperty {
    
    varName : String;
    
    enforce domain backward p : EUML::Generic::Kernel::UMLPackage {
      name = varName
    };
    
    enforce domain forward c : EUML::Generic::Kernel::UMLClass {
      the_owned_elements = prop : EUML::Generic::Kernel::UMLProperty {
        name = varName + '_Property_'-- + getRandomString()
      }
    };
        
  }
  
  top relation GenerateOperation {
    
    varName : String;
    
    enforce domain backward p : EUML::Generic::Kernel::UMLClass {
      name = varName
    };
    
    enforce domain forward p : EUML::Generic::Kernel::UMLClass {
      the_owned_elements = op : EUML::Generic::Kernel::UMLOperation {
        name = varName + '_Operation_'-- + getRandomString()
      }
    };
    
  }
  
  query getRandomString () : String {
    ''
  }
  
}