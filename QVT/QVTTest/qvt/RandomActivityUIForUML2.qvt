transformation RandomActivityUI(backward : uml, forward : uml, common : uml) {
	
	key uml::Component { name };
	--key uml::Parameter { name, owner };
	
	
	top relation GenerateUIComponent {
		
		enforce domain backward domain1 : uml::Package {
		};
		
		enforce domain forward domain1 : uml::Package {
			packagedElement = uiComp : uml::Component {
				name = 'UI Component',
				packagedElement = activity : uml::Activity {}
			}
		};
		
	}
	
	top relation GenerateBusinessComponent {
		
		enforce domain backward domain1 : uml::Package {
		};
		
		enforce domain forward domain1 : uml::Package {
			packagedElement = busComp : uml::Component {
				name = 'Business Component'
			}
		};
		
	}
	
	top relation GenerateProvided {
		
		enforce domain backward busComp : uml::Component {
		};
		
		enforce domain backward itf : uml::Interface {
		};
		
		enforce domain forward rea : uml::Realization {
			
			 supplier = itf2 : uml::Interface {},
			 client =  busComp2 : uml::Component{}
		};		
		
		when {
			itf2=itf;
			busComp2=busComp;
			not IsUIComponent(busComp,busComp);
		}
		
	}
		
	top relation GenerateRequired {
		
		enforce domain backward uiComp : uml::Component {
		};		
				
		enforce domain common rea : uml::Realization {
			 supplier = itf : uml::Interface {},
			 client =  busComp : uml::Component {}
		};		
		
		enforce domain forward usage : uml::Usage {
			 supplier = itf2 : uml::Interface {},
			 client =  uiComp2 : uml::Component {}
		};		
				
		when {
			itf2=itf;
			uiComp2=uiComp;
			not busComp.oclIsUndefined() and not IsUIComponent(busComp,busComp);
			busComp <> uiComp;
		}
		
	}
	
	top relation GeneratePackage {
		
		varName : String;
		
		enforce domain backward p : uml::Package {
			name = varName
		};
		
		enforce domain forward p : uml::Package {
			packagedElement =  childPackage : uml::Package {
				name = varName + '_SubPackage_' --+ getRandomString()
			}
		};
		
	}
	
	top relation GenerateInterface {
		
		varName : String;
		
		enforce domain backward p : uml::Package {
			name = varName
		};
		
		enforce domain forward p : uml::Package {
			packagedElement = cls : uml::Interface {
				name = varName + '_Interface'
			}
		};
		
	}
	
	top relation GenerateOperation {
		
		varName : String;
		
		enforce domain backward itf : uml::Interface {
			name = varName
		};
		
		enforce domain forward itf : uml::Interface {
			ownedOperation = op : uml::Operation {			
				name = varName + '_Operation_' --+ getRandomString()
			}
		};
		
	}
	
	top relation GenerateParameter {
		
		varName,randomStr : String;
		
		enforce domain backward op : uml::Operation {
			name = varName
		};
		
		enforce domain forward op : uml::Operation {
			ownedParameter = param : uml::Parameter {
				name = varName + '_Parameter_'+randomStr--,		
						
				--type = 'type_' --+ getRandomString()
			}
		};
		
		when {
			randomStr=getRandomString();
		}
		
	}
	
	
	top relation GenerateSANodeInActivity {
				
		enforce domain backward sourceNode : uml::Activity {
		};
		
		enforce domain forward targetNode : uml::StructuredActivityNode {
			name = 'SA_', -- + getRandomString(),
			activity = sourceNode
		};
		
		
	}
	
	
	top relation GenerateSAInSA {
				
		enforce domain backward parentSA : uml::StructuredActivityNode {
			
		};
		
		enforce domain forward SA : uml::StructuredActivityNode {
			name = 'SA_', --getRandomString(),
			inStructuredNode = parentSA
		};
		
		
	}
	
	top relation GenerateNavigationStepWithOperationCall {
				
		enforce domain backward sourceNode : uml::StructuredActivityNode {
			inStructuredNode = varOwner : uml::StructuredActivityNode {}
		};
		
		enforce domain backward targetNode : uml::StructuredActivityNode {
			inStructuredNode = varOwner
		};
		
		enforce domain backward op : uml::Operation {
		};
		
		enforce domain forward callOp : uml::CallOperationAction {
			inStructuredNode = varOwner,
			operation = op,
			incoming = fromSourceNode : uml::ControlFlow {				
				source = sourceNode,
				inStructuredNode = varOwner2 : uml::StructuredActivityNode {}
			},
			outgoing = toTargetNode : uml::ControlFlow {
				target = targetNode,				
				inStructuredNode = varOwner2
			}
		};
		
		when {
			sourceNode<>targetNode;
			varOwner2=varOwner;
		}
		
		where {
			AddPins(sourceNode, targetNode, op, callOp, sourceNode, targetNode);
		}
		
	}
	
	relation AddPins {
		
		paramName:String;
		
		enforce domain backward sourceNode : uml::StructuredActivityNode {
			inStructuredNode = varOwner : uml::StructuredActivityNode {}
		};
		
		enforce domain backward targetNode : uml::StructuredActivityNode {
		};
		
		enforce domain backward op : uml::Operation {
			ownedParameter = param : uml::Parameter {
				name = paramName--,
				--type = ts				
				--theType = t : uml::Type {}
			}
		};
		
		enforce domain forward callOp : uml::CallOperationAction {};
		
		enforce domain forward sourceNode : uml::StructuredActivityNode {
			
			node = iPin : uml::InputPin {
				name = paramName,
				--type = ts,
				outgoing = ds : uml::ObjectFlow {
					inStructuredNode = varOwner2 : uml::StructuredActivityNode {}
				}
			}
		};
		
		enforce domain forward targetNode : uml::StructuredActivityNode {
			node = oPin : uml::OutputPin {
				name = paramName,
				--theType = t,
				--type = ts,
				incoming = ds
			}
		};
		
		when {
			varOwner2=varOwner; 
		}
		
	}
	
	query getRandomString () : String {
		''
	}
	
	query IsUIComponent (c : uml::Element, c2 : uml::Element) : Boolean {
		c.oclIsTypeOf(uml::NamedElement) and c.oclAsType(uml::NamedElement).name.startsWith('UI Component')
	}
	
}