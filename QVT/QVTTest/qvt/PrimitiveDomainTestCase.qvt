transformation PrimitiveDomainTestCase(backward:EUML, forward:EUML) {

top relation test {
	powner : Generic::Kernel::UMLPackage;
	enforce domain backward p:Generic::Kernel::UMLPackage {
		the_owner=powner
	};
    enforce domain forward x:Generic::Kernel::UMLPackage {
		name='GeneratedPackage',
		the_owner=powner
	};
	where {
		ComponentToClass(p,x,'one_');
		ComponentToClass(p,x,'two_');
	}  	
}

relation ComponentToClass {
	pname : String;
   	newPrefix: String;

    enforce domain backward p:Generic::Kernel::UMLPackage {
		the_owned_elements= u:Generic::Components::UMLComponent {
			name=pname
		}
 	 };
  
    enforce domain forward x:Generic::Kernel::UMLPackage {
    	the_owned_elements= a:Generic::Kernel::UMLClass {
		    name=newPrefix+pname
        }
    };    

	primitive domain prefix:String;
	
	when {
		newPrefix = prefix;	
	}
	
	
  }   
}