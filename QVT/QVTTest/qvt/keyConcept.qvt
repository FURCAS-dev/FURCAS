transformation keyConcept(backward:EUML, forward:EUML) {

	top relation Package2Package {

		varName : String;
	
		enforce domain backward p:Generic::Kernel::UMLPackage {
			the_owner = powner : Generic::Kernel::UMLElement {},
			name = varName+'_original'
		};
	
	    enforce domain forward x:Generic::Kernel::UMLPackage {
			the_owner = powner_generated : Generic::Kernel::UMLElement {},
			name = varName+'_generated'		
		};
		
		when {
			Package2Package(powner,powner_generated) or TopPackage2TopPackage(powner,powner_generated);
		}
	
	}

	top relation TopPackage2TopPackage {
	
		varName : String;

		enforce domain backward p:Generic::Kernel::UMLPackage {
			name = varName+'_original'
		};
	
    	enforce domain forward x:Generic::Kernel::UMLPackage {
			name = varName+'_generated'		
		};
	
		when {
			not Package2Package(p,x);	
		}
		
	  }
	  
}