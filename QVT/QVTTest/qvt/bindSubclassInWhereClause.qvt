/*
 This transformation tests the binding of object template variables in where clause relation calls,
 if the type of the variable in the called relation is a subtype of that of the calling relation.
 
 The containerPackage variable must be bound by either the componentToContainerPackage1 or the
 componentToContainerPackage2 relation in the where clause of componentToPackage, because its type
 in the former (UMLPackage) is a subtype of that in the latter (UMLNamespace).
*/
transformation TestTransformation (source:EUML, target:EUML) {

    top relation componentToPackage {
        
        theName: String;
        
        checkonly domain source umlComponent:Generic::Components::UMLComponent{
            name = theName
        };
        
        enforce domain target umlPackage:Generic::Kernel::UMLPackage{
            name = theName + 'Package',
            the_owner = containerPackage:Generic::Kernel::UMLNamespace{
               name = theName + 'PackageContainer'
            }
        };
        
        where{
            componentToContainerPackage1(umlComponent, containerPackage) or 
            componentToContainerPackage2(umlComponent, '', containerPackage);
        }
    }
    
    relation componentToContainerPackage1 {
        
        checkonly domain source umlComponent:Generic::Components::UMLComponent{
        };
        
        enforce domain target umlPackage:Generic::Kernel::UMLPackage{
        };
    }
    
    relation componentToContainerPackage2 {
        
        checkonly domain source umlComponent:Generic::Components::UMLComponent{
        };
        
        primitive domain anyString: String; 
        
        enforce domain target umlPackage:Generic::Kernel::UMLPackage{
        };
    }
}