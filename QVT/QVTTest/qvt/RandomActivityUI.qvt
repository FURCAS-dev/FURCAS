transformation RandomActivityUI(backward : EUML, forward : EUML, common : EUML) {
	
	key EUML::Generic::Components::UMLComponent { name };
	key EUML::Generic::Kernel::UMLParameter { name, the_owner };
	
	
	top relation GenerateUIComponent {
		
		enforce domain backward domain1 : EUML::Generic::Kernel::UMLPackage {
		};
		
		enforce domain forward uiComp : EUML::Generic::Components::UMLComponent {
			the_owner = domain1,
			name = 'UI Component',
			the_owned_elements = activity : EUML::Generic::Activities::UMLActivity {
			}
		};
		
	}
	
	top relation GenerateBusinessComponent {
		
		enforce domain backward domain1 : EUML::Generic::Kernel::UMLPackage {
		};
		
		enforce domain forward busComp : EUML::Generic::Components::UMLComponent {
			the_owner = domain1,
			name = 'Business Component'
		};
		
	}
	
	top relation GenerateProvided {
		
		enforce domain backward busComp : EUML::Generic::Components::UMLComponent {
		};
		
		enforce domain backward itf : EUML::Generic::Kernel::UMLInterface {
		};
		
		enforce domain forward busComp : EUML::Generic::Components::UMLComponent {
			the_owned_elements = busPort : EUML::Generic::CompositeStructures::UMLPort {
				provided = itf : EUML::Generic::Kernel::UMLInterface {}
			}
		};
		
		when {
			not IsUIComponent(busComp,busComp);
		}
		
	}
		
	top relation GenerateRequired {
		
		enforce domain backward uiComp : EUML::Generic::Components::UMLComponent {
		};
		
		enforce domain common busPort : EUML::Generic::CompositeStructures::UMLPort {
			provided = itf : EUML::Generic::Kernel::UMLInterface {
			}
		};
		
		enforce domain forward uiPort : EUML::Generic::CompositeStructures::UMLPort {
			required = itf : EUML::Generic::Kernel::UMLInterface {},
			the_owner =  uiComp			
		};
				
		when {
			not busPort.the_owner.oclIsUndefined() and not IsUIComponent(busPort.the_owner,busPort.the_owner);
			busPort.the_owner <> uiComp;
		}
		
	}
	
	top relation GeneratePackage {
		
		varName : String;
		
		enforce domain backward p : EUML::Generic::Kernel::UMLPackage {
			name = varName
		};
		
		enforce domain forward childPackage : EUML::Generic::Kernel::UMLPackage {
			the_owner = p,
			name = varName + '_SubPackage_' --+ getRandomString()
		};
		
	}
	
	top relation GenerateInterface {
		
		varName : String;
		
		enforce domain backward p : EUML::Generic::Kernel::UMLPackage {
			name = varName
		};
		
		enforce domain forward cls : EUML::Generic::Kernel::UMLInterface {
			the_owner = p,
			name = varName + '_Interface'
		};
		
	}
	
	top relation GenerateOperation {
		
		varName : String;
		
		enforce domain backward itf : EUML::Generic::Kernel::UMLInterface {
			name = varName
		};
		
		enforce domain forward itf : EUML::Generic::Kernel::UMLInterface {
			the_owned_elements = op : EUML::Generic::Kernel::UMLOperation {			
				name = varName + '_Operation_' --+ getRandomString()
			}
		};
		
	}
	
	top relation GenerateParameter {
		
		varName,randomStr : String;
		
		enforce domain backward op : EUML::Generic::Kernel::UMLOperation {
			name = varName
		};
		
		enforce domain forward op : EUML::Generic::Kernel::UMLOperation {
			the_owned_elements = param : EUML::Generic::Kernel::UMLParameter {
				name = varName + '_Parameter_'+randomStr,				
				type = 'type_' --+ getRandomString()
			}
		};
		
		when {
			randomStr=getRandomString();
		}
		
	}
	
	
	top relation GenerateSANodeInActivity {
				
		enforce domain backward sourceNode : EUML::Generic::Activities::UMLActivity {
		};
		
		enforce domain forward targetNode : EUML::Generic::Activities::UMLStructuredActivityNode {
			name = 'SA_', -- + getRandomString(),
			the_owner = sourceNode
		};
		
		
	}
	
	
	top relation GenerateSAInSA {
				
		enforce domain backward activity : EUML::Generic::Activities::UMLActivity {
		};
		
		enforce domain forward SA : EUML::Generic::Activities::UMLStructuredActivityNode {
			name = 'SA_', --getRandomString(),
			the_owner = activity
		};
		
		
	}
	
	top relation GenerateNavigationStepWithOperationCall {
				
		enforce domain backward sourceNode : EUML::Generic::Activities::UMLStructuredActivityNode {
			the_owner = owner : EUML::Generic::Kernel::UMLElement {}
		};
		
		enforce domain backward targetNode : EUML::Generic::Activities::UMLStructuredActivityNode {
			the_owner = owner
		};
		
		enforce domain backward op : EUML::Generic::Kernel::UMLOperation {
		};
		
		enforce domain forward callOp : EUML::Generic::Actions::UMLCallOperationAction {
			the_owner = owner,
			operation = op,
			theIncomingEdge = fromSourceNode : EUML::Generic::Activities::UMLControlFlow {
				theNodeOfTheOutgoingEdge = sourceNode
			},
			theOutgoingEdge = toTargetNode : EUML::Generic::Activities::UMLControlFlow {
				theNodeOfTheIncomingEdge = targetNode
			}
		};
		
		when {
			sourceNode<>targetNode;
		}
		
		where {
			AddPins(sourceNode, targetNode, op, callOp, sourceNode, targetNode);
		}
		
	}
	
	relation AddPins {
		
		ts:String;
		paramName:String;
		
		checkonly domain backward sourceNode : EUML::Generic::Activities::UMLStructuredActivityNode {
		};
		
		checkonly domain backward targetNode : EUML::Generic::Activities::UMLStructuredActivityNode {
		};
		
		checkonly domain backward op : EUML::Generic::Kernel::UMLOperation {
			the_owned_elements = param : EUML::Generic::Kernel::UMLParameter {
				name = paramName,
				type = ts				
				--theType = t : EUML::Generic::Kernel::UMLType {}
			}
		};
		
		checkonly domain forward callOp : EUML::Generic::Actions::UMLCallOperationAction {};
		
		checkonly domain forward sourceNode : EUML::Generic::Activities::UMLStructuredActivityNode {
			the_owned_elements = iPin : EUML::Generic::Activities::UMLInputPin {
				name = paramName,
				type = ts,
				theOutgoingEdge = ds : EUML::Generic::Activities::UMLObjectFlow {
				}
			}
		};
		
		checkonly domain forward targetNode : EUML::Generic::Activities::UMLStructuredActivityNode {
			the_owned_elements = oPin : EUML::Generic::Activities::UMLOutputPin {
				name = paramName,
				--theType = t,
				type = ts,
				theIncomingEdge = ds : EUML::Generic::Activities::UMLObjectFlow {
				}
			}
		};
		
	}
	
	query getRandomString () : String {
		''
	}
	
	query IsUIComponent (c : EUML::Generic::Kernel::UMLElement, c2 : EUML::Generic::Kernel::UMLElement) : Boolean {
		c.oclIsTypeOf(EUML::Generic::Kernel::UMLNamedElement) and c.oclAsType(EUML::Generic::Kernel::UMLNamedElement).name.startsWith('UI Component')
	}
	
}