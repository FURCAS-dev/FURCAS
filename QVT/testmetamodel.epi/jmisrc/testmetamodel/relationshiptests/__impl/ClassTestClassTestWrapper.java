/**
 * Generated by the MOIN Generator Version 3.0
 **/

package testmetamodel.relationshiptests.__impl;

public class ClassTestClassTestWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<testmetamodel.relationshiptests.ClassTestClassTest> implements testmetamodel.relationshiptests.ClassTestClassTest,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The ClassTestClassTest wrapper
     */
    public ClassTestClassTestWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, testmetamodel.relationshiptests.__impl.ClassTestClassTestImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private testmetamodel.relationshiptests.__impl.ClassTestClassTestImpl getCastWrappedObject() {
        return (testmetamodel.relationshiptests.__impl.ClassTestClassTestImpl) getWrappedObject();
    }

    public testmetamodel.relationshiptests.ClassTestClassTest unwrap() {
        return (testmetamodel.relationshiptests.ClassTestClassTest) getWrappedObject();
    }
    
    public boolean exists(testmetamodel.relationshiptests.ClassTest _Classtest, testmetamodel.relationshiptests.ClassTest _Classtest1) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Classtest), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Classtest1));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Classtest), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Classtest1)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public testmetamodel.relationshiptests.ClassTest getClasstest(testmetamodel.relationshiptests.ClassTest _Classtest1) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (testmetamodel.relationshiptests.ClassTest) wrapResult(getCastWrappedObject().getClasstest(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Classtest1)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (testmetamodel.relationshiptests.ClassTest) wrapResult(getCastWrappedObject().getClasstest(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Classtest1))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getClasstest1(testmetamodel.relationshiptests.ClassTest _Classtest) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getClasstest1(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Classtest)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getClasstest1(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Classtest))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(testmetamodel.relationshiptests.ClassTest _Classtest, testmetamodel.relationshiptests.ClassTest _Classtest1) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Classtest), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Classtest1));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Classtest), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Classtest1)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(testmetamodel.relationshiptests.ClassTest _Classtest, testmetamodel.relationshiptests.ClassTest _Classtest1) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Classtest), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Classtest1));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Classtest), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Classtest1)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<testmetamodel.relationshiptests.ClassTestClassTest> get___JmiInterface() {
        return testmetamodel.relationshiptests.ClassTestClassTest.class;
    }

    protected String metaObjectToString() {
        return "testmetamodel.relationshiptests.ClassTestClassTest (Java Type)\nTestMetaModel.RelationshipTests.ClassTest_ClassTest (MOF Type)"; //$NON-NLS-1$
    }    
}