/**
 * Generated by the MOIN Generator Version 3.0
 **/

package testmetamodel.classifiertest.__impl;

public class AbstractSuperClassSubClassWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<testmetamodel.classifiertest.AbstractSuperClassSubClass> implements testmetamodel.classifiertest.AbstractSuperClassSubClass,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AbstractSuperClassSubClass wrapper
     */
    public AbstractSuperClassSubClassWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, testmetamodel.classifiertest.__impl.AbstractSuperClassSubClassImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private testmetamodel.classifiertest.__impl.AbstractSuperClassSubClassImpl getCastWrappedObject() {
        return (testmetamodel.classifiertest.__impl.AbstractSuperClassSubClassImpl) getWrappedObject();
    }

    public testmetamodel.classifiertest.AbstractSuperClassSubClass unwrap() {
        return (testmetamodel.classifiertest.AbstractSuperClassSubClass) getWrappedObject();
    }
    
    public boolean exists(testmetamodel.classifiertest.AbstractSuperClass _AbstractSuperClass, testmetamodel.classifiertest.SubClass _SubClass) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AbstractSuperClass), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SubClass));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AbstractSuperClass), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SubClass)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getAbstractSuperClass(testmetamodel.classifiertest.SubClass _SubClass) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getAbstractSuperClass(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SubClass)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getAbstractSuperClass(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SubClass))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getSubClass(testmetamodel.classifiertest.AbstractSuperClass _AbstractSuperClass) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getSubClass(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AbstractSuperClass)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getSubClass(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AbstractSuperClass))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(testmetamodel.classifiertest.AbstractSuperClass _AbstractSuperClass, testmetamodel.classifiertest.SubClass _SubClass) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AbstractSuperClass), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SubClass));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AbstractSuperClass), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SubClass)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(testmetamodel.classifiertest.AbstractSuperClass _AbstractSuperClass, testmetamodel.classifiertest.SubClass _SubClass) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AbstractSuperClass), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SubClass));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AbstractSuperClass), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SubClass)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<testmetamodel.classifiertest.AbstractSuperClassSubClass> get___JmiInterface() {
        return testmetamodel.classifiertest.AbstractSuperClassSubClass.class;
    }

    protected String metaObjectToString() {
        return "testmetamodel.classifiertest.AbstractSuperClassSubClass (Java Type)\nTestMetaModel.ClassifierTest.AbstractSuperClass_SubClass (MOF Type)"; //$NON-NLS-1$
    }    
}