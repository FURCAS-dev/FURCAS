lexerHeader=@lexer::header {\
package generated.grammars;\
import com.sap.tc.moin.textual.grammar.antlr3.*;\
}

lexerMembers=@lexer::members {\
 public com.sap.tc.moin.textual.grammar.impl.TCSInjector ei = null;\
	private void newline() {}\
\
public Token emit() {\
	// override emit() to generate own token class\
		ANTLR3LocationToken ret = null;\
		ret = new ANTLR3LocationToken(input, type, channel, tokenStartCharIndex, getCharIndex()-1);\
		ret.setLine(tokenStartLine);\
		ret.setText(text);\
	  	ret.setCharPositionInLine(tokenStartCharPositionInLine);\
		ret.setEndLine(getLine());\
		ret.setEndColumn(getCharPositionInLine());\
		emit(ret);\
\
		return ret;\
	}\
} \

@header {
package generated.grammars;
import com.sap.tc.moin.textual.grammar.antlr3.*;
}
@members {
 public com.sap.tc.moin.textual.grammar.impl.TCSInjector ei = null;
 
//	public void reportError(RecognitionException ex) {
//		ei.reportError((Exception)ex);
//	}
	
//	public void emitErrorMessage(String s) {
//		ei.reportError(s);
//	}

	public void displayRecognitionError(String[] tokenNames, RecognitionException e) {
		ei.reportError((Exception)e);
	}

	//TODO: what about warnings?
//	public void reportWarning(String s) {
//		ei.reportWarning(s);
//	}
	
 public static void main(String[] args) throws Exception {
						CharStream input = new ANTLRFileStream(args[0]);
 TCSLexer lex = new 
 TCSLexer(input);
						CommonTokenStream tokens = new CommonTokenStream(lex);
						tokens.discardTokenType(WS);
						tokens.discardTokenType(COMMENT);
						tokens.discardTokenType(NL);
						
 TCSParser parser = new 
 TCSParser(tokens);
						parser.main();
					}
}
