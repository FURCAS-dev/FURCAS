package com.sap.ide.cts.parser.incremental;

import static com.sap.mi.textual.parsing.textblocks.TbChangeUtil.addToBlockAt;

import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

import javax.xml.soap.Text;

import tcs.ClassTemplate;
import tcs.PartitionHandling;
import tcs.Property;
import tcs.Template;
import textblockdefinition.TextBlockDefinition;
import textblocks.AbstractToken;
import textblocks.TextBlock;
import textblocks.TextblocksPackage;
import textblocks.VersionEnum;

import com.sap.mi.textual.common.interfaces.IModelElementProxy;
import com.sap.mi.textual.parsing.textblocks.ModelElementFromTextBlocksFactory;
import com.sap.mi.textual.parsing.textblocks.TextBlockFactory;
import com.sap.mi.textual.parsing.textblocks.observer.TextBlockProxy;
import com.sap.mi.textual.parsing.textblocks.observer.TokenRelocationUtil;
import com.sap.mi.textual.tcs.util.TcsUtil;
import com.sap.tc.moin.repository.ModelPartition;
import com.sap.tc.moin.repository.Partitionable;
import com.sap.tc.moin.repository.mmi.reflect.RefObject;
import com.sun.org.apache.bcel.internal.generic.GETSTATIC;

public class ReuseAwareTextBlockFactoryImpl implements TextBlockFactory {

	private TextblocksPackage textblocksPackage;
	private Map<Template, TextBlockDefinition> tbDefsMap = new HashMap<Template, TextBlockDefinition>();
	private TextBlockReuseStrategy reuseStrategy;
	private ModelElementFromTextBlocksFactory modelElementFactory;
	private PartitionAssignmentHandler partitionHandlerTextblock;

	public ReuseAwareTextBlockFactoryImpl(TextblocksPackage textblocksPackage,
			TextBlockReuseStrategy tbReuseStrategy,
			ModelElementFromTextBlocksFactory modelElementFactory,
			PartitionAssignmentHandler partitionHandlerTextblock) {
		super();
		this.textblocksPackage = textblocksPackage;
		reuseStrategy = tbReuseStrategy;
		this.modelElementFactory = modelElementFactory;
		this.partitionHandlerTextblock = partitionHandlerTextblock;
	}

	@Override
	public TextBlock createBlock() {
		TextBlock textBlock = (TextBlock) textblocksPackage.getTextBlock()
				.refCreateInstance();
		// TODO: check versioning for incremental parsing and adapt
		// correspondingly here
		textBlock.setVersion(VersionEnum.CURRENT);
		textBlock.setOffsetRelative(true);
		textBlock.setComplete(true); // default
		textBlock.setOffset(0);
		return textBlock;
	}

	/**
	 * Method implemented for interface
	 * {@link ITextBlockCreator#createNewTextBlock(TextBlockProxy)}
	 */
	@Override
	public TextBlock createNewTextBlock(TextBlockProxy proxy, TextBlock parent,
			ModelPartition defaultPartition) {
		// createModelElements(proxy);
		TextBlock tb =  instantiateBlockAndMoveTokens(proxy, parent, defaultPartition);
		assign_TB_ToPartition(tb, parent, defaultPartition);	
		return tb;
	}

	/**
	 * Instantiates a new {@link TextBlock} for the {@link TextBlockProxy} while
	 * moving all tokens that were captured there into the new block.
	 * Furthermore it calls itself recursively to add new blocks for its
	 * subBlock Proxies.
	 * 
	 * @param newVersion
	 *            The Proxy to instatiate
	 * @param parent
	 *            The parent textblock
	 * @return the newly instantiated {@link TextBlock} for the given proxy.
	 */
	private TextBlock instantiateBlockAndMoveTokens(TextBlockProxy newVersion,
			TextBlock parent, ModelPartition defaultPartition) {
		TextBlock tb = this.createBlock();
		TextBlockDefinition tbDef = getTbDef(newVersion.getTemplate());
		tb.setType(tbDef);
		tb.setSequenceElement(newVersion.getSequenceElement());
		tb.getParentAltChoices().addAll(newVersion.getAlternativeChoices());
		tb.getAdditionalTemplates().addAll(newVersion.getAdditionalTemplates());

		tb.getCorrespondingModelElements().addAll(
				modelElementFactory.createModelElementsFromTextBlock(
						newVersion, tb, parent, defaultPartition));
		
		for (IModelElementProxy proxy : newVersion.getCorrespondingModelElements()) {
			Template template = newVersion.getTemplate();
			if(!((RefObject)proxy.getRealObject()).refIsInstanceOf(newVersion.getTemplate().getMetaReference(), false)) {
				for (Template additionalTemplate : newVersion.getAdditionalTemplates()) {
					if(((RefObject)proxy.getRealObject()).refIsInstanceOf(additionalTemplate.getMetaReference(), false)) {
						template = additionalTemplate;
						break;
					}
				}
			}
			partitionHandlerTextblock.assignFromProxy(proxy, newVersion.getSequenceElement(), tb, parent, template, defaultPartition);
		}
		
		int endIndex = 0;
		for (Object subNode : newVersion.getSubNodes()) {
			if (subNode instanceof TextBlockProxy) {
				if (((TextBlockProxy) subNode).getSubNodes().size() > 0) {
					// do not create textBlocks for proxies that have no content
					// this may be the case for example with rules for elements
					// that have no correspondence in the concrete syntax and
					// have been generated by rules containing only property
					// inits.
					addToBlockAt(tb, endIndex++, instantiateBlockAndMoveTokens(
							(TextBlockProxy) subNode, tb, defaultPartition));
				}
			} else if (subNode instanceof AbstractToken) {
				TokenRelocationUtil.relocateToken((AbstractToken) subNode,
						endIndex++, tb);
				reuseStrategy.notifyTokenReuse((AbstractToken) subNode);
			}
		}
		
		
		for (TextBlock subBlock : tb.getSubBlocks()) {
			// To assign Elements to the correspondent Partition
			assign_TB_ToPartition(subBlock, tb, defaultPartition);			
		}
		// Add all elements in the context to the textblock
		for (Object elementInContext : newVersion.getContextElements()) {
			if (elementInContext instanceof IModelElementProxy) {
				if (((IModelElementProxy) elementInContext).getRealObject() == null) {
					throw new IncrementalParsingException(
							"Element in context was not resolved: "
									+ elementInContext);
				}
				tb.getElementsInContext().add(
						(RefObject) ((IModelElementProxy) elementInContext)
								.getRealObject());
			} else if (elementInContext instanceof RefObject) {
				tb.getElementsInContext().add((RefObject) elementInContext);
			}
		}
		// if the template has specified the addToContext property we need to
		// add the corresponding element
		// to the context
		if (newVersion.getTemplate() instanceof ClassTemplate) {
			if (((ClassTemplate) newVersion.getTemplate()).isAddToContext()) {
				// move up to the first parent textblock that has the context
				// property set
				TextBlock loopParent = parent;
				while (loopParent != null) {
					if (TcsUtil.isContext(loopParent.getType().getParseRule())) {
						loopParent.getElementsInContext().addAll(
								tb.getCorrespondingModelElements());
						break;
					}
					loopParent = loopParent.getParentBlock();
				}
			}
		}
		
		
		return tb;
	}

	private void assign_TB_ToPartition(TextBlock tb,
			TextBlock parent, ModelPartition defaultPartition) {

		if (tb instanceof TextBlock) {
			TextBlock resultTB = tb;
			if (resultTB.getType().getParseRule() instanceof ClassTemplate) {
				ClassTemplate classTemp = (ClassTemplate) resultTB.getType()
						.getParseRule();
				classTemplateAssignment(tb,parent, defaultPartition, classTemp);
			} else {
				anotherElementsAssignment(tb,parent, defaultPartition);
			}

		}

	}

	private void anotherElementsAssignment(TextBlock tb, TextBlock parent,
			ModelPartition defaultPartition) {
		PartitionHandlingWithRefObject partHandling = partitionHandlerTextblock.takeParentPartitionHandling(tb, parent);
		if (partHandling != null) {
			anotherElementsAssignmentWithParent(tb, parent, defaultPartition,
					partHandling);

		} else if (partitionHandlerTextblock.getMainPartitionContent()
				.equalsIgnoreCase("all")
				|| partitionHandlerTextblock.getMainPartitionContent()
						.equalsIgnoreCase("Textblocks")) {
			anotherElementsAssignmentWithoutParent(tb,parent, defaultPartition,
					partitionHandlerTextblock);
		}

	}

	private void anotherElementsAssignmentWithoutParent(TextBlock tb,TextBlock parent,
			ModelPartition defaultPartition,
			PartitionAssignmentHandler partitionHandlerTextblock2) {
		PartitionHandlingWithRefObject partWithRefObject2 = new PartitionHandlingWithRefObject(null,(RefObject)tb);
		Object refGetValue = "";
		try {
			refGetValue = tb.refGetValue("name");
		} catch (Exception e) {
			// TODO: handle exception
		}

		if (tb.getSequenceElement() != null
				&& tb.getSequenceElement() instanceof Property) {

			if (TcsUtil.getPartitionHandlingParg((Property) tb
					.getSequenceElement()) != null) {

				if ((TcsUtil.getPartitionHandlingParg((Property) tb
						.getSequenceElement())).getPartitionhandling() != null) {
					System.out
							.println("The element "
									+ tb
									+ "mit name "
									+ refGetValue
									+ "in instantiateBlockAndMoveTokens for property1 has been stored in .....");
					PartitionHandlingWithRefObject partWithRefObject = new PartitionHandlingWithRefObject(TcsUtil
									.getPartitionHandlingParg(
											(Property) tb.getSequenceElement())
									.getPartitionhandling(), (RefObject)tb);
					partitionHandlerTextblock.assignToPartition(
							defaultPartition, tb,parent, partWithRefObject);
				} else {
					System.out
							.println("The element "
									+ tb
									+ "mit name "
									+ refGetValue
									+ "in instantiateBlockAndMoveTokens for property2 has been stored in .....");
					partitionHandlerTextblock.assignToPartition(
							defaultPartition, tb,parent,partWithRefObject2, tb.getType().getParseRule());

				}
			} else {
				System.out
						.println("The element "
								+ tb
								+ "mit name "
								+ refGetValue
								+ "in instantiateBlockAndMoveTokens for property3 has been stored in .....");
				partitionHandlerTextblock.assignToPartition(defaultPartition,
						tb,parent,partWithRefObject2, tb.getType().getParseRule());

			}
		} else {
			System.out
					.println("The element "
							+ tb
							+ "mit name "
							+ refGetValue
							+ "in instantiateBlockAndMoveTokens has been stored in .....");
			partitionHandlerTextblock.assignToPartition(defaultPartition, tb,parent,partWithRefObject2,
					tb.getType().getParseRule());
		}

	}

	private void anotherElementsAssignmentWithParent(TextBlock tb,
			TextBlock parent, ModelPartition defaultPartition, PartitionHandlingWithRefObject partHandling) {
		if (partHandling.getPartitionHandling().getContent().toString().equalsIgnoreCase("all")
				|| partHandling.getPartitionHandling().getContent().toString().equalsIgnoreCase(
						"Textblocks")) {
			PartitionHandlingWithRefObject partHand3 = new PartitionHandlingWithRefObject(null,tb);
			Object refGetValue = "";
			try {
				refGetValue = tb.refGetValue("name");
			} catch (Exception e) {
				// TODO: handle exception
			}

			if (tb.getSequenceElement() != null
					&& tb.getSequenceElement() instanceof Property) {

				if (TcsUtil.getPartitionHandlingParg((Property) tb
						.getSequenceElement()) != null) {

					if ((TcsUtil.getPartitionHandlingParg((Property) tb
							.getSequenceElement())).getPartitionhandling() != null) {
						System.out
								.println("The element "
										+ tb
										+ "mit name "
										+ refGetValue
										+ "in instantiateBlockAndMoveTokens for property1 has been stored in .....");
						PartitionHandlingWithRefObject partHand1 = new PartitionHandlingWithRefObject(TcsUtil
										.getPartitionHandlingParg(
												(Property) tb
														.getSequenceElement())
										.getPartitionhandling(), (RefObject)tb);
						partitionHandlerTextblock.assignToPartition(
								defaultPartition, tb,parent, partHand1);
					} else {
						System.out
								.println("The element "
										+ tb
										+ "mit name "
										+ refGetValue
										+ "in instantiateBlockAndMoveTokens for property2 has been stored in .....");
						partitionHandlerTextblock.assignToPartition(
								defaultPartition, tb,parent,partHand3, tb.getType()
										.getParseRule());

					}
				} else {
					System.out
							.println("The element "
									+ tb
									+ "mit name "
									+ refGetValue
									+ "in instantiateBlockAndMoveTokens for property3 has been stored in .....");
					partitionHandlerTextblock.assignToPartition(
							defaultPartition, tb,parent,partHand3, tb.getType().getParseRule());

				}
			} else {
				System.out
						.println("The element "
								+ tb
								+ "mit name "
								+ refGetValue
								+ "in instantiateBlockAndMoveTokens has been stored in .....");
				partitionHandlerTextblock.assignToPartition(defaultPartition,
						tb, parent, partHand3,tb.getType().getParseRule());
			}

		}

	}

	private void classTemplateAssignment(TextBlock tb,
			TextBlock parent, ModelPartition defaultPartition, ClassTemplate classTemp) {
		
		PartitionHandlingWithRefObject partHand6 = new PartitionHandlingWithRefObject(null, tb);
		if (classTemp.getPartitionHandling() != null
				&& classTemp.getPartitionHandling().getContent() != null) {

			if (classTemp.getPartitionHandling().getContent().toString()
					.equalsIgnoreCase("textblocks")
					|| classTemp.getPartitionHandling().getContent().toString()
							.equalsIgnoreCase("all")) {

				Object refGetValue = "";
				try {
					refGetValue = tb.refGetValue("name");
				} catch (Exception e) {
					// TODO: handle exception
				}

				if (tb.getSequenceElement() != null
						&& tb.getSequenceElement() instanceof Property) {

					if (TcsUtil.getPartitionHandlingParg((Property) tb
							.getSequenceElement()) != null) {

						if ((TcsUtil.getPartitionHandlingParg((Property) tb
								.getSequenceElement())).getPartitionhandling() != null) {
							PartitionHandlingWithRefObject partHand4 = new PartitionHandlingWithRefObject(TcsUtil.getPartitionHandlingParg(
									(Property) tb.getSequenceElement())
									.getPartitionhandling(), (RefObject)tb);
							System.out
									.println("The element "
											+ tb
											+ "mit name "
											+ refGetValue
											+ "in instantiateBlockAndMoveTokens for property1 has been stored in .....");

							partitionHandlerTextblock.assignToPartition(
									defaultPartition, tb,parent,
									partHand4);
						} else {
							System.out
									.println("The element "
											+ tb
											+ "mit name "
											+ refGetValue
											+ "in instantiateBlockAndMoveTokens for property2 has been stored in .....");
							partitionHandlerTextblock.assignToPartition(
									defaultPartition, tb,parent, partHand6);

						}
					} else {
						System.out
								.println("The element "
										+ tb
										+ "mit name "
										+ refGetValue
										+ "in instantiateBlockAndMoveTokens for property3 has been stored in .....");
						partitionHandlerTextblock.assignToPartition(
								defaultPartition, tb,parent,partHand6, classTemp);

					}
				} else {
					System.out
							.println("The Textblock "
									+ tb
									+ "mit name "
									+ refGetValue
									+ "in instantiateBlockAndMoveTokens has been stored in .....");
					partitionHandlerTextblock.assignToPartition(
							defaultPartition, tb,parent,partHand6, tb.getType().getParseRule());
				}

			}
			// }
		} else {
			PartitionHandlingWithRefObject partitionHand = partitionHandlerTextblock.takeParentPartitionHandling(tb, parent);
			if (partitionHand.getPartitionHandling() != null) {

				classTemplateAssignmentWithParent(defaultPartition, tb,parent,
						partitionHand);
			} else if (partitionHandlerTextblock.getMainPartitionContent()
					.equalsIgnoreCase("all")
					|| partitionHandlerTextblock.getMainPartition().equals(
							"textblocks")) {

				classTemplateAssignmentWithoutParent(defaultPartition, tb,parent,
						partitionHand);

			}
		}

	}

	private void classTemplateAssignmentWithoutParent(
			ModelPartition defaultPartition, TextBlock tb,TextBlock parent,
			PartitionHandlingWithRefObject partitionHandler) {
		PartitionHandlingWithRefObject partRefObject =  new PartitionHandlingWithRefObject(null, tb);
		Object refGetValue = "";
		try {
			refGetValue = tb.refGetValue("name");
		} catch (Exception e) {
			// TODO: handle exception
		}

		if (tb.getSequenceElement() != null
				&& tb.getSequenceElement() instanceof Property) {

			if (TcsUtil.getPartitionHandlingParg((Property) tb
					.getSequenceElement()) != null) {

				if ((TcsUtil.getPartitionHandlingParg((Property) tb
						.getSequenceElement())).getPartitionhandling() != null) {
					PartitionHandlingWithRefObject partRefObject1 =  new PartitionHandlingWithRefObject(TcsUtil
							.getPartitionHandlingParg(
									(Property) tb.getSequenceElement())
							.getPartitionhandling(), tb);

					System.out
							.println("The element "
									+ tb
									+ "mit name "
									+ refGetValue
									+ "in instantiateBlockAndMoveTokens for property1 has been stored in .....");

					partitionHandlerTextblock.assignToPartition(
							defaultPartition, tb,parent, partRefObject1);
				} else {
					System.out
							.println("The element "
									+ tb
									+ "mit name "
									+ refGetValue
									+ "in instantiateBlockAndMoveTokens for property2 has been stored in .....");
					partitionHandlerTextblock.assignToPartition(
							defaultPartition, tb,parent,partitionHandler, tb.getType().getParseRule());

				}
			} else {
				System.out
						.println("The element "
								+ tb
								+ "mit name "
								+ refGetValue
								+ "in instantiateBlockAndMoveTokens for property3 has been stored in .....");
				partitionHandlerTextblock.assignToPartition(defaultPartition,
						tb,parent,partitionHandler, tb.getType().getParseRule());

			}
		} else {
			System.out
					.println("The element "
							+ tb
							+ "mit name "
							+ refGetValue
							+ "in instantiateBlockAndMoveTokens has been stored in .....");
			partitionHandlerTextblock.assignToPartition(defaultPartition, tb,parent,partitionHandler,
					tb.getType().getParseRule());
		}

	}

	private void classTemplateAssignmentWithParent(
			ModelPartition defaultPartition, TextBlock tb,TextBlock parent,
			PartitionHandlingWithRefObject partitionHand) {
		
		PartitionHandlingWithRefObject partHandlingWithRefObject = new PartitionHandlingWithRefObject(null, tb);
		if (partitionHand.getPartitionHandling().getContent().toString()
				.equalsIgnoreCase("all")
				|| partitionHand.getPartitionHandling().getContent().toString().equalsIgnoreCase(
						"textblocks")) {
			Object refGetValue = "";
			try {
				refGetValue = tb.refGetValue("name");
			} catch (Exception e) {
				// TODO: handle exception
			}

			if (tb.getSequenceElement() != null
					&& tb.getSequenceElement() instanceof Property) {

				if (TcsUtil.getPartitionHandlingParg((Property) tb
						.getSequenceElement()) != null) {

					if ((TcsUtil.getPartitionHandlingParg((Property) tb
							.getSequenceElement())).getPartitionhandling() != null) {
						PartitionHandlingWithRefObject partHandlingWithRefObject1 = new PartitionHandlingWithRefObject(TcsUtil
								.getPartitionHandlingParg(
										(Property) tb
												.getSequenceElement())
								.getPartitionhandling(), tb);
						System.out
								.println("The element "
										+ tb
										+ "mit name "
										+ refGetValue
										+ "in instantiateBlockAndMoveTokens for property1 has been stored in .....");

						partitionHandlerTextblock.assignToPartition(
								defaultPartition, tb,parent, partHandlingWithRefObject1);
					} else {
						System.out
								.println("The element "
										+ tb
										+ "mit name "
										+ refGetValue
										+ "in instantiateBlockAndMoveTokens for property2 has been stored in .....");
						partitionHandlerTextblock.assignToPartition(
								defaultPartition, tb,parent,partitionHand);

					}
				} else {
					System.out
							.println("The element "
									+ tb
									+ "mit name "
									+ refGetValue
									+ "in instantiateBlockAndMoveTokens for property3 has been stored in .....");
					partitionHandlerTextblock.assignToPartition(
							defaultPartition, tb,parent, partitionHand,tb.getType().getParseRule());

				}
			} else {
				System.out
						.println("The element "
								+ tb
								+ "mit name "
								+ refGetValue
								+ "in instantiateBlockAndMoveTokens has been stored in .....");
				partitionHandlerTextblock.assignToPartition(defaultPartition,
						tb, parent,partHandlingWithRefObject, tb.getType().getParseRule());
			}

		}

	}



	/**
	 * Get the {@link TextBlockDefinition} for the given template.
	 * 
	 * @param template
	 * @return
	 */
	public TextBlockDefinition getTbDef(Template template) {
		TextBlockDefinition tbDef = tbDefsMap.get(template);
		if (tbDef == null && template != null) {
			// check if there was already a corresponding tbdef within the
			// mapping definition
			Collection<TextBlockDefinition> tbDefs = textblocksPackage
					.getTextblockdefinition()
					.getTextblockDefinitionReferencesProduction()
					.getTextBlockDefinition(template);
			if (!tbDefs.isEmpty()) {
				if (tbDefs.size() == 1) {
					tbDef = tbDefs.iterator().next();
				} else {
					// TODO What to do if there is more than one?
					// for now this case seems strange, so throw an exception
					throw new IncrementalParsingException(
							"Cannot handle more than one TextBlocksDefinition per Template!");
				}
			} else {
				tbDef = initializeTextBlockDefinition(template);
			}
			tbDefsMap.put(template, tbDef);
		}
		return tbDef;
	}

	/**
	 * Initializes a new {@link TextBlockDefinition} for the given template TODO
	 * this should actually be done during creation of the mapping model.
	 * 
	 * @param template
	 * @return
	 */
	private TextBlockDefinition initializeTextBlockDefinition(Template template) {
		TextBlockDefinition tbDef = (TextBlockDefinition) textblocksPackage
				.getTextblockdefinition().getTextBlockDefinition()
				.refCreateInstance();
		tbDef.setParseRule(template);
		System.out.println("The element " + tbDef
				+ "in initializeTextBlockDefinition has been stored in .....");

		((Partitionable) template).get___Partition()
				.assignElementIncludingChildren(tbDef);
		return tbDef;
	}


}
