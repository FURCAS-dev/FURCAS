--specify your DSL grammar rules here ...

syntax MofClass(k=0) {

	primitiveTemplate identifier for PrimitiveTypes::String default using NAME:
		value = "unescapeString(%token%)";

	primitiveTemplate identifierOrKeyword for PrimitiveTypes::String using NAME orKeyword:
		value = "unescapeString(%token%)";

	primitiveTemplate stringSymbol for PrimitiveTypes::String using STRING:
		value = "unescapeString(%token%)",
		serializer="\"%value%\"";
	
	primitiveTemplate qualifiedNameSymbol for PrimitiveTypes::String using QNAME:
		value = "unescapeString(%token%)";

	primitiveTemplate annotationSymbol for PrimitiveTypes::String using MULTI_LINE_COMMENT:
		value = "unescapeString(%token%)",
		serializer="/** %value% */";

	primitiveTemplate integerSymbol for PrimitiveTypes::Integer default using INT:
		value = "Integer.valueOf(%token%)";
		
	primitiveTemplate longSymbol for PrimitiveTypes::Long default using INT:
		value = "Long.valueOf(%token%)";
	
	primitiveTemplate integerAsString for PrimitiveTypes::String using INT:
		value = "unescapeString(%token%)";
		
	primitiveTemplate floatAsString for PrimitiveTypes::String using FLOAT:
		value = "unescapeString(%token%)";
		
	primitiveTemplate booleanSymbol for PrimitiveTypes::String using BOOL:
		value = "%token%";
	
	primitiveTemplate booleanValueSymbol for PrimitiveTypes::Boolean default using BOOL:
		value = "Boolean.valueOf(%token%)";
	
	primitiveTemplate floatSymbol for PrimitiveTypes::Double default using FLOAT:
		value = "Double.valueOf(%token%)";
		
  ----------------------------- Templates ---------------------------

  ----------------------------- Class Declaration -------------------

  template Class main context(class)
  	: $annotation
  	  $visibility
  	  (isAbstract?"abstract")
  	  "class" name
  	  (isDefined(supertypes) ? "extends"
  	    [[ supertypes{forcedLower=1, as=qualifiedNameSymbol, query="OCL:
			let t=Sequence{1..?.size()}->select(j|?.subString(j, j+1) = '::')->iterate(
  				i; acc:Tuple(pos:Integer, ns:Set(Namespace), qn:String)=Tuple{pos=1, ns=null, qn=''} |
    				let namePart=?.subString(acc.pos, -1+i) in
      				Tuple{pos=i+2,
      				      ns=if acc.ns=null then
            			  	Namespace.allInstances()->select(
              					ns2 | ns2.container->isEmpty() and ns2.name=namePart)
              			  else
              			  	acc.ns.contents->select(ns2 | ns2.name=namePart)->asSet()
              			  endif,
            			  qn=acc.qn.concat('::').concat(namePart)}) in
				t.ns.contents->select(c | c.name=?.subString(t.pos, ?.size()))
  	  		", separator=","}
  	  	|
  	  		supertypes{forcedLower=1, as=identifier,
  	  		query="OCL:Moin::Model::Class.allInstances()", filter="->select(c|c.name=?)",
  	  		separator=","}
  	  	]])
  	  <space> "{" [
  	      contents
  	      (isDefined(invariants) ? "invariants" "{" contents{mode=invariants} "}")
  	  ] "}"
  	;
  
  template GeneralizableElement abstract;
  template ModelElement abstract;
  template Feature abstract;
  template StructuralFeature (disambiguateV3 = "model_structuralfeature") abstract;
  
  function scopeAndVisibility(Feature)
  	: [[ -- empty means the "public" default
  	       {{ visibility <- 'com.sap.tc.moin.repository.mmi.model.VisibilityKindEnum.PUBLIC_VIS' }}
  	     | "public"
  	       {{ visibility = 'com.sap.tc.moin.repository.mmi.model.VisibilityKindEnum.PUBLIC_VIS' }}
  	     | "protected"
  	       {{ visibility = 'com.sap.tc.moin.repository.mmi.model.VisibilityKindEnum.PROTECTED_VIS' }}
  	     | "private"
  	       {{ visibility = 'com.sap.tc.moin.repository.mmi.model.VisibilityKindEnum.PRIVATE_VIS' }}
  	  ]]
  	  (scope=#classifier_level ? "static")
  	;
  
  template Attribute
  	: $annotation
  	  (isChangeable ? : "readonly")
  	  $scopeAndVisibility
  	  --type
  	  $typeReference
  	  multiplicity
  	  name <no_space> ";"
  	;
  	
  template Reference
  	: $annotation
  	  "ref"
  	  (isChangeable ? : "readonly")
  	  $scopeAndVisibility
  	  --type
  	  $typeReference
  	  multiplicity
  	  name
  	  [[
  	    	"referencedEnd" referencedEnd{ refersTo=name, 
  	  	query = "self.container.oclAsType(Classifier).typedElements->select(
  	  		e|e.oclIsTypeOf(AssociationEnd)).oclAsType(AssociationEnd).otherEnd()",
  	  	filter ="->select(e|e.name=?)",
  	  	invert = "name" }
  	    |
  	    	{{ referencedEnd = lookIn("OCL:self.container.oclAsType(Classifier).typedElements->select(
  	  		e|e.oclIsTypeOf(AssociationEnd)).oclAsType(AssociationEnd).otherEnd()->select(e|e.name=self.name)") }}
  	   ]]
  	  <no_space>";"
  	;
  
  function typeReference(TypedElement)
  	:  [[ type{as=qualifiedNameSymbol, query="OCL:
			let t=Sequence{1..?.size()}->select(j|?.subString(j, j+1) = '::')->iterate(
  				i; acc:Tuple(pos:Integer, ns:Set(Namespace), qn:String)=Tuple{pos=1, ns=null, qn=''} |
    				let namePart=?.subString(acc.pos, -1+i) in
      				Tuple{pos=i+2,
      				      ns=if acc.ns=null then
            			  	Namespace.allInstances()->select(
              					ns2 | ns2.container->isEmpty() and ns2.name=namePart)
              			  else
              			  	acc.ns.contents->select(ns2 | ns2.name=namePart)->asSet()
              			  endif,
            			  qn=acc.qn.concat('::').concat(namePart)}) in
				t.ns.contents", filter="->select(c | c.name=?.subString(t.pos, ?.size()))"}
  	  |
  	  	type{as=identifier, query="OCL:Model::Classifier.allInstances()",
  	  	     filter="->select(name=?)"}
  	  ]]
  	;

    -- the hierarchy without mode is used to reference elements only
--	template GeneralizableElement abstract operatored(GENERALIZABLEELEMENT_OPS);
--	template Classifier abstract operatored(NAMESPACE_OPS);
--	template EnumerationType abstract operatored(CLASSIFIER_OPS);

	-- if parsed path has more than one element, 
	-- the first will be of type Generalizable element
	-- because that is the type of Mode::ModelElement.container
--	template GeneralizableElement referenceOnly
--		: name
--		;
		
	-- any following elements in a package path will be resolved using this
--	operatorTemplate ModelElement(operators = GENERALIZABLEELEMENT_DCOLON_OP, source = 'container') referenceOnly
--		: name
--		;
  
  template BehavioralFeature (disambiguateV3 = "model_behavioralfeature") abstract;
  template Operation context(operation)
  	: $annotation
  	  $scopeAndVisibility
  	  contents{mode=returnType, forcedLower=1, forcedUpper=1}
  	  name
  	  "("
  	  contents{mode=parameter}
  	  ")" "{"
  	  	body{forcedLower=1}
  	  "}"
  	  {{ isQuery='true' }}
  	;
  
  template ModelElement #returnType abstract;
  template TypedElement #returnType abstract;
  template Parameter #returnType
  	: -- type
  	  $typeReference
  	  multiplicity
  	  {{ direction='com.sap.tc.moin.repository.mmi.model.DirectionKindEnum.RETURN_DIR',
  	     name<-'"result"' }}
  	;
  
  template ModelElement #parameter abstract;
  template TypedElement #parameter abstract;
  template Parameter #parameter addToContext
  	: $annotation
  	  $typeReference
  	  -- type
  	  multiplicity
  	  name
  	  {{ direction='com.sap.tc.moin.repository.mmi.model.DirectionKindEnum.IN_DIR' }}
    ;
  
  template MultiplicityType
		: [[
			disambiguate("integerSymbol DDOT STAR | integerSymbol DDOT integerSymbol")
			lower ".." (upper = -1 ? "*" : upper) {{ isUnique = 'false', isOrdered = 'false' }}
			|
			disambiguate("LBRACKET integerSymbol DDOT")
			"["
			lower ".." (upper = -1 ? "*" : upper) {{ isUnique='false', isOrdered='true' }}
			"]"
			|
			disambiguate("LCURL integerSymbol DDOT")
			"{"
			lower ".." (upper = -1 ? "*" : upper) {{ isUnique = 'true', isOrdered = 'false' }}
			"}"
			|
			disambiguate("LBRACK_LCURL integerSymbol DDOT")
			"[{"
			lower ".." (upper = -1 ? "*" : upper) {{ isUnique = 'true', isOrdered = 'true' }} 
			"}]"
			|
			disambiguate("LCURL_LBRACK integerSymbol DDOT")
			"{["
			lower ".." (upper = -1 ? "*" : upper) {{ isUnique = 'true', isOrdered = 'true' }} 
			"]}"
			| -- Do we really want to support this? How would a C developer read "String* x"?
			disambiguate("STAR | integerSymbol ~DDOT")
			(upper = -1 ? "*" : upper) {{ lower = '0', isUnique = 'false', isOrdered = 'false' }}
			|
			disambiguate("LBRACKET integerSymbol RBRACKET | LBRACKET STAR RBRACKET")
			"["
			(upper = -1 ? "*" : upper) {{ lower = '0', isUnique='false', isOrdered='false' }}
			"]"
			|
			disambiguate("LBRACKET RBRACKET")
			"["
			{{upper = '-1', lower = '0', isUnique='false', isOrdered='true' }}
			"]"
			|
			disambiguate("LCURL STAR RCURL | LCURL integerSymbol RCURL")
			"{"
			(upper = -1 ? "*" : upper) {{ lower = '0', isUnique = 'true', isOrdered = 'false' }}
			"}"
			|
			disambiguate("LCURL RCURL")
			"{"
			{{upper = '-1', lower = '0', isUnique = 'true', isOrdered = 'false' }}
			"}"
			|
			disambiguate("LBRACK_LCURL STAR RCURL_RBRACK | LBRACK_LCURL integerSymbol RCURL_RBRACK")
			"[{"
			(upper = -1 ? "*" : upper) {{ lower = '0', isUnique = 'true', isOrdered = 'true' }} 
			"}]"
			|
			disambiguate("LCURL_LBRACK STAR RBRACK_RCURL | LCURL_LBRACK integerSymbol RBRACK_RCURL")
			"{["
			(upper = -1 ? "*" : upper) {{ lower = '0', isUnique = 'true', isOrdered = 'true' }} 
			"]}"
			|
			disambiguate("LCURL_LBRACK RBRACK_RCURL")
			"{["
			{{ lower = '0', upper='-1', isUnique = 'true', isOrdered = 'true' }} 
			"]}"
			|
			disambiguate("LBRACK_LCURL RCURL_RBRACK")
			"[{"
			{{ lower = '0', upper='-1', isUnique = 'true', isOrdered = 'true' }} 
			"}]"
			|
			{{ lower = '0', upper = '1', isOrdered = 'false', isUnique = 'false' }}
			]]
		;
  
  enumerationTemplate VisibilityKind
		:	#public_vis    = "public",
			#protected_vis = "protected",
			#private_vis   = "private"
		;

  function annotation(ModelElement)
  	: (isDefined(annotation) ? annotation{as=annotationSymbol} <newline> )
  	;
 
  function visibility(GeneralizableElement)
  	: [[ -- empty means the "public" default
  	       {{ visibility <- 'com.sap.tc.moin.repository.mmi.model.VisibilityKindEnum.PUBLIC_VIS' }}
  	     | "public"
  	       {{ visibility = 'com.sap.tc.moin.repository.mmi.model.VisibilityKindEnum.PUBLIC_VIS' }}
  	     | "protected"
  	       {{ visibility = 'com.sap.tc.moin.repository.mmi.model.VisibilityKindEnum.PROTECTED_VIS' }}
  	     | "private"
  	       {{ visibility = 'com.sap.tc.moin.repository.mmi.model.VisibilityKindEnum.PRIVATE_VIS' }}
  	  ]]
  	;
  
  template ModelElement #invariants abstract;
  template Constraint #invariants abstract;
  
  template OclConstraint #invariants -- (disambiguateV3="NAME COLON")
  	: name ":" oclExpression <no_space> ";"
  	  {{ invariantOf = lookIn("#context(class)") }}
  	;
  
 

  -- place keywords here (optional, seldom used)

  -- place symbols here (optional)
  
  symbols {
    DDOT = "..";
    LBRACKET = "[";
    RBRACKET = "]";
    LCURL = "{";
    RCURL = "}";
    STAR = "*";
    LCURL_LBRACK = "{[";
    RBRACK_RCURL = "]}";
    LBRACK_LCURL = "[{";
    RCURL_RBRACK = "}]";
    LPAREN = "(";
    RPAREN = ")";
    COLON = ":";
    DCOLON = "::";
  }

  -- place operatorLists here (optional)
	operators NAMESPACE_OPS{
		priority 0 {
			NAMESPACE_DCOLON_OP = DCOLON, 2;
		}
	}
	operators CLASSIFIER_OPS{
		priority 0 {
			CLASSIFIER_DCOLON_OP = DCOLON, 2;
		}
	}

	operators GENERALIZABLEELEMENT_OPS{
		priority 0 {
			GENERALIZABLEELEMENT_DCOLON_OP = DCOLON, 2;
		}
	}

	operators OclExpressions {
		priority 0 {
			dotOp		= ".", 2;
			arrowOp     = "->", 2;
		}
		priority 1 {
			equalsOp	= "=", 2;
		}
	}
  -- place tokens here (optional, except for COMMENT)

	omitted token COMMENT	: endOfLine(start = "//");
	omitted token MULTI_LINE_COMMENT	: multiLine(start = "/**", end = "*/");
lexer = "
%options testLiterals = false;


NL
	:	(	'\\r' '\\n'
		|	'\\n' '\\r'	//Improbable
		|	'\\r'
		|	'\\n'
		)
	{newline();$channel=HIDDEN;}
	;

WS
	:	(	' '
		|	'\\t'
		){$channel=HIDDEN;}
	;

%protected
DIGIT
	:	'0'..'9'
	;

%protected
ALPHA
	:	'a'..'z'
	|	'A'..'Z'
	|	'_'
	//For Unicode compatibility (from 0000 to 00ff)
	|	'\\u00C0' .. '\\u00D6'
	|	'\\u00D8' .. '\\u00F6'
	|	'\\u00F8' .. '\\u00FF'
	;

%protected
SNAME
	:	(ALPHA) (ALPHA | DIGIT)*
;

BOOL	:	'true' | 'false'	;

NAME
	:	(
			(SNAME ~DCOLON)=>SNAME
		|	'\\''!
			(	
			'\\n' {newline();}
			|	~('\\\\'|'\\\''|'\\n')
			)*
			'\\''!
		)
	;

QNAME
	: SNAME DCOLON SNAME (DCOLON SNAME )*
	;

protected
INT
 : (DIGIT)+
 ;

%protected
FLOAT
	:	DIGIT+ '.' DIGIT*
	;
  
RANGE_OR_INT
    :   ( INT '..' ) => INT  { _type = INT; }
    |	( INT '.' NAME ) => INT { _type = INT; }
    |   ( INT '.' ~('.'	|	'a'..'z'
					   	|	'A'..'Z'
					   	|	'_'
						//For Unicode compatibility (from 0000 to 00ff)
						|	'\\u00C0' .. '\\u00D6'
						|	'\\u00D8' .. '\\u00F6'
						|	'\\u00F8' .. '\\u00FF') )  => FLOAT { _type = FLOAT; }
    |   INT                  { _type = INT; }
    ;


STRING
	:	'\"'!
		(	
		//ESC	|		
			'\\n' {newline();}
		|	~('\\\\'|'\"'|'\\n')
		)*
		'\"'!
	;

	"; 

}