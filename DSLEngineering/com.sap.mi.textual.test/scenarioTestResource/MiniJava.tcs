syntax MiniJava {

        primitiveTemplate identifier for ->String default using NAME:
                value = "unescapeString(%token%)";

        primitiveTemplate identifierOrKeyword for ->String using NAME orKeyword:
                value = "unescapeString(%token%)";

        primitiveTemplate stringSymbol for ->String using STRING:
                value = "unescapeString(%token%)",
                serializer="'\'' + %value%.toCString() + '\''";

        primitiveTemplate integerSymbol for ->Integer default using INT:
                value = "Integer.valueOf(%token%)";

        primitiveTemplate floatSymbol for ->Double default using FLOAT:
                value = "Double.valueOf(%token%)";


        template TranslationUnit :
                "package" package {query = Package.allInstances()->select(name = ?), autoCreate = ifmisssing}
                imports {separator = ";"}
                classes
        ;
        
        template PackageImport :
                "import" package {query = Package.allInstances()->select(name = ?)}
        ;
        
        template ClassDeclaration :
                visibility "class" name "{"
                        members
                "}"
                {{ package = translationUnit.package}}
        ;
        
        template TypedElement abstract;
        template NamedElement abstract;
        template MemberDeclaration abstract;
        
        template FieldDeclaration :
                visibility  
                type {query = self.parentClass.translationUnit.imports.classes->select(name = ?)}
                name
        ;
        
        template MethodDeclaration :
                visibility  
                type {query = self.parentClass.translationUnit.imports.classes->select(name = ?)}
                name "(" parameters {separator = ","} ")"
                "{"
                        body
                "}"
        ;
        
        template Parameter :
                type {query = self.parentClass.translationUnit.imports.classes->select(name = ?)}
                name
        ;
        
        enumerationTemplate Visibility auto :
                #private           = "private",
                #protected         = "protected",
                #public            = "public",
        ;

        symbols {
                lsquare         = "[";
                rsquare         = "]"   : rightSpace;
                excl            = "!";
                coma            = ","   : leftNone, rightSpace;
                lparen          = "(";
                rparen          = ")"   : leftNone, rightSpace;
                lcurly          = "{"   : leftSpace;
                rcurly          = "}"   : leftNone, rightSpace;
                semi            = ";"   : leftNone, rightSpace;
        }

               
        token COMMENT   : endOfLine(start = "//");
        token MULTILINECOMMENT   : multiLine(start = "/*", end = "*/");

}