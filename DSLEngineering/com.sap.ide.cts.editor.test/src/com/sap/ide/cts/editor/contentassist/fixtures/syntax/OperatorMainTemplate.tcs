syntax OperatorMainTemplate {

	-- the main template is the operatored template
	template test::expression::Expression main abstract operatored;
	
	operatorTemplate test::expression::UnaryExpression
		(
			operators = opNegation opSqrt,
			source = 'left',
			storeOpTo = 'operator'
		)
	;
	
	-- using storeRightTo
	operatorTemplate test::expression::BinaryExpression
		(
			operators = opExponent opMultiply opDivide opPlus opMinus,
			source = 'left',
			storeOpTo = 'operator',
			storeRightTo = 'right'
		)
	;
	
	-- using sequence instead of storeRightTo
	operatorTemplate test::expression::BracketExpression
		(
			operators = opBracket,
			source = 'left',
			storeOpTo = 'operator'
		)
		:	"bracket" right "]"
	;
	
	template test::expression::IntegerExpression
		:	value
	;
	
	
	
	---------------------- BELOW IS A MINIMAL SYNTAX -------------------------------
		
	primitiveTemplate identifier for PrimitiveTypes::String default using NAME:
		value = "unescapeString(%token%)";

	primitiveTemplate identifierOrKeyword for PrimitiveTypes::String using NAME orKeyword:
		value = "unescapeString(%token%)";

	primitiveTemplate stringSymbol for PrimitiveTypes::String using STRING:
		value = "unescapeString(%token%)",
		serializer="'\\\"' + %value%.toCString() + '\\\"'";

	primitiveTemplate integerSymbol for PrimitiveTypes::Integer default using INT:
		value = "Integer.valueOf(%token%)";

	primitiveTemplate floatSymbol for PrimitiveTypes::Double default using FLOAT:
		value = "Double.valueOf(%token%)";
		
	---------------------- BREAK MINIMAL SYNTAX ------------------------------------
	
	operators {
			
		priority 0 { -- 0 is highest, left associativity (default)
			opNegation 	= "-", 1;
		}
		
		priority 1 { -- unary postfix
			postfix opSqrt 	= "sqrt", 1;
		}
		
		priority 2 {
			opBracket 	= "[", 2;
		}

		priority 3, right {	-- right associativity
			opExponent 	= "^^", 2;
		}

		priority 4 {
			opMultiply 	= "*", 2;
			opDivide 	= "/", 2;
		}

		priority 5 {
			opPlus 		= "+", 2;
			opMinus 	= "-", 2;
		}
	}
	
	---------------------- CONTINUE MINIMAL SYNTAX ---------------------------------

	token COMMENT	: endOfLine(start = "--");
	
}
