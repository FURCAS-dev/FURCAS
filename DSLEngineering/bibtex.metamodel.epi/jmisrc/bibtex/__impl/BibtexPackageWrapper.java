/**
 * Generated by the MOIN Generator Version 3.0
 **/

package bibtex.__impl;

public class BibtexPackageWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefPackageWrapperImpl<bibtex.__impl.BibtexPackageImpl> implements bibtex.BibtexPackage,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The BibtexPackage wrapper
     */
    public BibtexPackageWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, bibtex.__impl.BibtexPackageImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    private bibtex.__impl.BibtexPackageImpl getCastWrappedObject() {
        return (bibtex.__impl.BibtexPackageImpl) getWrappedObject();
    }
    
    public bibtex.__impl.BibtexPackageImpl unwrap() {
        return (bibtex.__impl.BibtexPackageImpl) getWrappedObject();
    }
    
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getEntry()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getEntry(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getEntry(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getAuthor()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getAuthor(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getAuthor(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getLiteratureDb()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getLiteratureDb(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getLiteratureDb(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public bibtex.LitertureDbEntry getLitertureDbEntry()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (bibtex.LitertureDbEntry) wrapResult(getCastWrappedObject().getLitertureDbEntry(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (bibtex.LitertureDbEntry) wrapResult(getCastWrappedObject().getLitertureDbEntry(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public bibtex.LitertureDbAuthor getLitertureDbAuthor()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (bibtex.LitertureDbAuthor) wrapResult(getCastWrappedObject().getLitertureDbAuthor(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (bibtex.LitertureDbAuthor) wrapResult(getCastWrappedObject().getLitertureDbAuthor(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public bibtex.EntryAuthor getEntryAuthor()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (bibtex.EntryAuthor) wrapResult(getCastWrappedObject().getEntryAuthor(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (bibtex.EntryAuthor) wrapResult(getCastWrappedObject().getEntryAuthor(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    // methods for structure type creators
    
    @SuppressWarnings("unchecked")
    public java.lang.Class<bibtex.BibtexPackage> get___JmiInterface() {
        return bibtex.BibtexPackage.class;
    }
    
    protected String metaObjectToString() {
        return "bibtex.BibtexPackage (Java Type)\nBibtex (MOF Type)"; //$NON-NLS-1$
    }
}