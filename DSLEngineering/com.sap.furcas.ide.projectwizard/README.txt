*/  Furcas Wizard README  \*
--Author: Frederik Petersen (D054528)

This readme file is for those who are trying to understand/change/extend the Furcas Project Wizard. The focus will mainly be on classes and other files in "DSLEngineering/com.sap.furcas.ide.projectwizard". Make sure to go with the newest version of the Furcas repository when developing. Make sure to read the
commentary in the classes as it will often explain methods and classes more detailed than this README.

I.    How does this wizard work?
II.   Changing the templates used to generate the Language project
III.  Understanding the connection between the metamodel and the language project
IV.   The projectwizard.test

I.   The class "FurcasWizard" is the central class of the project. See your favorite search engine for more information about "Wizards in Eclipse", "SWT" and "JFace Wizards" for more general knowledge as this README is not going to be a in depth tutorial. An instance of the class ProjectInfo, often refered to as variable pi keeps all the information that the user enters. This variable is read in the process of project, folder and file generation. The class CreateProject creates the language project. With the help of EclipseProjectHelper and SourceCodeFactory it generates the first files in the project. Those include the .project file etc. Files with a input dependent caption are generated with the help of StringTemplate (see chapter II for a detailed description on how to change those templates).
Now the creation of a new Metamodel project with the help of the class CreateMMProject depends on user's input. CreateMMProject also uses the help of EclipseProjectHelper and SourceCodeFactory. 
The next step is the connection that is made between the language project and the referenced metamodel. See chapter III for details. After that connection is made the last few lines of code in the generateSpecific method of FurcasWizard will make sure that the SyntaxBuilder (see DSLEngineering/com.sap.furcas.ide.dslproject.builders) and the JavaBuilder play their part in generating the Grammar file (.g extension) and Parser and Lexer classes in the generated/generated folder.

II.   The wizard uses StringTemplate for generating files in the language project (and if selected the fresh metamodel project) that require user input. See one of the well written StringTemplate tutorials for a general understanding. 
The class SourceCodeFactory reads the contents of the text files in the folder "resources", StringTemplate will now handle the replacement of the variables in the text files (those variables look like this $var$).

III.  The connection between project and metamodel is mostly build through a .properties file in the language project and a configuration object. The classes concerning this topic are found in the package com.sap.furcas.ide.dslproject.conf . The generateSpecific method of the FurcasWizard is the first place to look for understanding the connection. That's where the configuration object is configured. It's an instance of EcoreMetaProjectConf. 

IV.   The DSLEngineering/com.sap.furcas.ide.projectwizard.test project tests the following parts of the wizard as of now:

       - ProjectWizardTCSTest: This test makes sure that the sample .tcs file, generated by the wizard, is correct. It uses the ...projectwizard.test.metamodel project
                               for the metamodel. This test is kept really simple.

