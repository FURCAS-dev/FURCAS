syntax $CapLangName$ {

-- place templates here (at least one main template)

        template $FirstClass$ main
                 :"$FirstClass$"
                 ;

        primitiveTemplate identifier for ecore::EString default using NAME:
                value = "unescapeString(%token%)";

        primitiveTemplate identifierOrKeyword for ecore::EString using NAME orKeyword:
                value = "unescapeString(%token%)";


        primitiveTemplate integerSymbol for ecore::EIntegerObject default using INT:
                value = "Integer.valueOf(%token%)";
                
        primitiveTemplate longSymbol for ecore::ELongObject default using INT:
                value = "Long.valueOf(%token%)";
                
        primitiveTemplate integerAsStringSymbol for ecore::EString default using INT:
                value = "%token%";

        primitiveTemplate floatAsStringSymbol for ecore::EString default using FLOAT:
                value = "%token%";
                
        primitiveTemplate booleanSymbol for ecore::EString using BOOL:
                value = "%token%";      
                
        primitiveTemplate binarySymbol for ecore::EString using BINARY:
                value = "%token%";
                
        primitiveTemplate dateSymbol for ecore::EString using DATE:
                value = "%token%";
-- place keywords here (optional, seldom used)


-- place symbols here
                
        symbols {
                lbracket        = "[";
                rbracket        = "]";
                lcurl           = "{";
                rcurl           = "}";
                langle          = "<";
                rangle          = ">";
                lparen          = "(";
                rparen          = ")";
                excl            = "!";
                equals          = "=";
                dot             = ".";
                pipe            = "|";
                colon           = ":";
                semicolon       = ";";
                star            = "*";
        }
        

        omitted token COMMENT   : endOfLine(start = "//");
        omitted token MULTI_LINE_COMMENT        : multiLine(start = "/*", end = "*/");

}
