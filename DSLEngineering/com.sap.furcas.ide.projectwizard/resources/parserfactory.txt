package $ProjectName$.parser;

import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EcorePackage;
import org.eclipse.emf.ecore.resource.ResourceSet;

import generated.$CapLangName$Lexer;
import generated.$CapLangName$Parser;

import com.sap.furcas.ide.parserfactory.AbstractParserFactory;
import $ProjectName$.editor.Activator;

public class $CapLangName$ParserFactory extends AbstractParserFactory<$CapLangName$Parser, $CapLangName$Lexer> {

    private static final String LANGUAGE_ID = "$CapLangName$";

    @Override
    public Class<$CapLangName$Lexer> getLexerClass() {
        return $CapLangName$Lexer.class;
    }

    @Override
    public Class<$CapLangName$Parser> getParserClass() {
        return $CapLangName$Parser.class;
    }

    @Override
    public String getLanguageId() {
        return LANGUAGE_ID;
    }
        
    @Override
    public Set<URI> getMetamodelURIs() {
        HashSet<URI> metamodels = new HashSet<URI>();
        metamodels.add(URI.createURI("$URI$"));
        metamodels.add(URI.createURI(EcorePackage.eINSTANCE.getNsURI()));
        return metamodels;
    }

    @Override
    public URI getSyntaxResourceURI() {
        return URI.createPlatformPluginURI(Activator.PLUGIN_ID + "/mapping/$CapLangName$.furcas", true); 
    }

    @Override
    public Set<URI> getAdditionalQueryScope() {
        return Collections.emptySet();
    } 
	
}
