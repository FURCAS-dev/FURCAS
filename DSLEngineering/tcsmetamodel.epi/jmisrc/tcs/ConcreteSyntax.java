/**
 * Generated by the MOIN Generator Version 3.0
 **/

package tcs;

/**
 * This interface is not intended to be implemented by clients.
 */
public interface ConcreteSyntax extends tcs.NamedElement {

    /**
     * Descriptors for all features of this MofClass and its supertypes.
     */
    public static final Descriptors DESCRIPTORS = new Descriptors( );

    // class extent descriptor
    /**
     * Extent descriptor
     */
    public final com.sap.tc.moin.repository.mmi.descriptors.ClassDescriptor<com.sap.tc.moin.repository.mmi.reflect.RefClass, tcs.ConcreteSyntax> CLASS_DESCRIPTOR = new com.sap.tc.moin.repository.mmi.descriptors.ClassDescriptor<com.sap.tc.moin.repository.mmi.reflect.RefClass, tcs.ConcreteSyntax>("483FE093F85A80F22E3811DD99D7001742153E0C", "demo.sap.com/tcsmeta", "TCS", "ConcreteSyntax"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ 

    
    // attributes
    public java.lang.Integer getK() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public void setK(java.lang.Integer newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public java.lang.String getLexer() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public void setLexer(java.lang.String newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;

    // references
    public java.util.List<tcs.Template> getTemplates() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public java.util.Collection<tcs.Keyword> getKeywords() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public java.util.List<tcs.Token> getTokens() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public java.util.List<tcs.OperatorList> getOperatorLists() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public java.util.List<tcs.Symbol> getSymbols() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public java.util.Collection<tcs.ConcreteSyntax> getImports() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;


    public static final class Descriptors {
        Descriptors( ) { 
        }
        /**
         * Returns the descriptor for the <code>location</code> attribute.
         * @return  the descriptor for the <code>location</code> attribute
         */
        public com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,tcs.LocatedElement,java.lang.String> LOCATION( ) {
            return tcs.LocatedElement.DESCRIPTORS.LOCATION( );
        }
        /**
         * Returns the descriptor for the <code>commentsBefore</code> attribute.
         * @return  the descriptor for the <code>commentsBefore</code> attribute
         */
        public com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,tcs.LocatedElement,java.util.List<java.lang.String>> COMMENTS_BEFORE( ) {
            return tcs.LocatedElement.DESCRIPTORS.COMMENTS_BEFORE( );
        }
        /**
         * Returns the descriptor for the <code>commentsAfter</code> attribute.
         * @return  the descriptor for the <code>commentsAfter</code> attribute
         */
        public com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,tcs.LocatedElement,java.util.List<java.lang.String>> COMMENTS_AFTER( ) {
            return tcs.LocatedElement.DESCRIPTORS.COMMENTS_AFTER( );
        }
        /**
         * Returns the descriptor for the <code>name</code> attribute.
         * @return  the descriptor for the <code>name</code> attribute
         */
        public com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,tcs.NamedElement,java.lang.String> NAME( ) {
            return tcs.NamedElement.DESCRIPTORS.NAME( );
        }
        private com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,tcs.ConcreteSyntax,java.lang.Integer> __k;
        /**
         * Returns the descriptor for the <code>k</code> attribute.
         * @return  the descriptor for the <code>k</code> attribute
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,tcs.ConcreteSyntax,java.lang.Integer> K( ) {
            if ( __k == null ) {
                __k = new com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,tcs.ConcreteSyntax,java.lang.Integer>( "4840025C1C0AEB202E4D11DD9443001742153E0C", "demo.sap.com/tcsmeta", new java.lang.String[] { "TCS", "ConcreteSyntax", "k" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ 
            }
            return __k;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,tcs.ConcreteSyntax,java.lang.String> __lexer;
        /**
         * Returns the descriptor for the <code>lexer</code> attribute.
         * @return  the descriptor for the <code>lexer</code> attribute
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,tcs.ConcreteSyntax,java.lang.String> LEXER( ) {
            if ( __lexer == null ) {
                __lexer = new com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,tcs.ConcreteSyntax,java.lang.String>( "48400414224B74402E4E11DD8257001742153E0C", "demo.sap.com/tcsmeta", new java.lang.String[] { "TCS", "ConcreteSyntax", "lexer" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ 
            }
            return __lexer;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,tcs.ConcreteSyntax,java.util.List<tcs.Template>> __templates;
        /**
         * Returns the descriptor for the <code>templates</code> reference.
         * @return  the descriptor for the <code>templates</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,tcs.ConcreteSyntax,java.util.List<tcs.Template>> TEMPLATES( ) {
            if ( __templates == null ) {
                __templates = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,tcs.ConcreteSyntax,java.util.List<tcs.Template>>( "484003027F07F3D02E4D11DD8E4D001742153E0C", "demo.sap.com/tcsmeta", new java.lang.String[] { "TCS", "ConcreteSyntax", "templates" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ 
            }
            return __templates;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,tcs.ConcreteSyntax,java.util.Collection<tcs.Keyword>> __keywords;
        /**
         * Returns the descriptor for the <code>keywords</code> reference.
         * @return  the descriptor for the <code>keywords</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,tcs.ConcreteSyntax,java.util.Collection<tcs.Keyword>> KEYWORDS( ) {
            if ( __keywords == null ) {
                __keywords = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,tcs.ConcreteSyntax,java.util.Collection<tcs.Keyword>>( "4840048665CD67F32E4E11DDC817001742153E0C", "demo.sap.com/tcsmeta", new java.lang.String[] { "TCS", "ConcreteSyntax", "keywords" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ 
            }
            return __keywords;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,tcs.ConcreteSyntax,java.util.List<tcs.Token>> __tokens;
        /**
         * Returns the descriptor for the <code>tokens</code> reference.
         * @return  the descriptor for the <code>tokens</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,tcs.ConcreteSyntax,java.util.List<tcs.Token>> TOKENS( ) {
            if ( __tokens == null ) {
                __tokens = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,tcs.ConcreteSyntax,java.util.List<tcs.Token>>( "48400488674D51302E4E11DDA002001742153E0C", "demo.sap.com/tcsmeta", new java.lang.String[] { "TCS", "ConcreteSyntax", "tokens" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ 
            }
            return __tokens;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,tcs.ConcreteSyntax,java.util.List<tcs.OperatorList>> __operatorLists;
        /**
         * Returns the descriptor for the <code>operatorLists</code> reference.
         * @return  the descriptor for the <code>operatorLists</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,tcs.ConcreteSyntax,java.util.List<tcs.OperatorList>> OPERATOR_LISTS( ) {
            if ( __operatorLists == null ) {
                __operatorLists = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,tcs.ConcreteSyntax,java.util.List<tcs.OperatorList>>( "4840048A6842D4C32E4E11DD8039001742153E0C", "demo.sap.com/tcsmeta", new java.lang.String[] { "TCS", "ConcreteSyntax", "operatorLists" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ 
            }
            return __operatorLists;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,tcs.ConcreteSyntax,java.util.List<tcs.Symbol>> __symbols;
        /**
         * Returns the descriptor for the <code>symbols</code> reference.
         * @return  the descriptor for the <code>symbols</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,tcs.ConcreteSyntax,java.util.List<tcs.Symbol>> SYMBOLS( ) {
            if ( __symbols == null ) {
                __symbols = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,tcs.ConcreteSyntax,java.util.List<tcs.Symbol>>( "4840048B690B2DD32E4E11DD9831001742153E0C", "demo.sap.com/tcsmeta", new java.lang.String[] { "TCS", "ConcreteSyntax", "symbols" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ 
            }
            return __symbols;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,tcs.ConcreteSyntax,java.util.Collection<tcs.ConcreteSyntax>> __imports;
        /**
         * Returns the descriptor for the <code>imports</code> reference.
         * @return  the descriptor for the <code>imports</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,tcs.ConcreteSyntax,java.util.Collection<tcs.ConcreteSyntax>> IMPORTS( ) {
            if ( __imports == null ) {
                __imports = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,tcs.ConcreteSyntax,java.util.Collection<tcs.ConcreteSyntax>>( "E0EE4DB258B310E059B011DE8774001CBF745635", "demo.sap.com/tcsmeta", new java.lang.String[] { "TCS", "ConcreteSyntax", "imports" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ 
            }
            return __imports;
        }
    }
}    