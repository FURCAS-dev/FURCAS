/**
 * Generated by the MOIN Generator Version 3.0
 **/

package tcs;

/**
 * This interface is not intended to be implemented by clients.
 */
public interface PredicateSemantic extends com.sap.tc.moin.repository.mmi.reflect.RefObject {

    /**
     * Descriptors for all features of this MofClass and its supertypes.
     */
    public static final Descriptors DESCRIPTORS = new Descriptors( );

    // class extent descriptor
    /**
     * Extent descriptor
     */
    public final com.sap.tc.moin.repository.mmi.descriptors.ClassDescriptor<com.sap.tc.moin.repository.mmi.reflect.RefClass, tcs.PredicateSemantic> CLASS_DESCRIPTOR = new com.sap.tc.moin.repository.mmi.descriptors.ClassDescriptor<com.sap.tc.moin.repository.mmi.reflect.RefClass, tcs.PredicateSemantic>("E0469530E7243E2088AF11DEB9E0001CBF7437BB", "demo.sap.com/tcsmeta", "TCS", "PredicateSemantic"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ 

    
    // attributes
    public java.lang.String getWhen() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public void setWhen(java.lang.String newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public java.lang.String getMode() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public void setMode(java.lang.String newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;

    // references
    public tcs.ForeachPredicatePropertyInit getForeachParent() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public void setForeachParent(tcs.ForeachPredicatePropertyInit newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public tcs.Template getAs() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public void setAs(tcs.Template newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;


    public static final class Descriptors {
        Descriptors( ) { 
        }
        private com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,tcs.PredicateSemantic,java.lang.String> __when;
        /**
         * Returns the descriptor for the <code>when</code> attribute.
         * @return  the descriptor for the <code>when</code> attribute
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,tcs.PredicateSemantic,java.lang.String> WHEN( ) {
            if ( __when == null ) {
                __when = new com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,tcs.PredicateSemantic,java.lang.String>( "E0469530FA5C707088AF11DE852D001CBF7437BB", "demo.sap.com/tcsmeta", new java.lang.String[] { "TCS", "PredicateSemantic", "when" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ 
            }
            return __when;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,tcs.PredicateSemantic,java.lang.String> __mode;
        /**
         * Returns the descriptor for the <code>mode</code> attribute.
         * @return  the descriptor for the <code>mode</code> attribute
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,tcs.PredicateSemantic,java.lang.String> MODE( ) {
            if ( __mode == null ) {
                __mode = new com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,tcs.PredicateSemantic,java.lang.String>( "E0367719B28894D0AE6C11DEB9D6001CBF7437BB", "demo.sap.com/tcsmeta", new java.lang.String[] { "TCS", "PredicateSemantic", "mode" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ 
            }
            return __mode;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,tcs.PredicateSemantic,tcs.ForeachPredicatePropertyInit> __foreachParent;
        /**
         * Returns the descriptor for the <code>foreachParent</code> reference.
         * @return  the descriptor for the <code>foreachParent</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,tcs.PredicateSemantic,tcs.ForeachPredicatePropertyInit> FOREACH_PARENT( ) {
            if ( __foreachParent == null ) {
                __foreachParent = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,tcs.PredicateSemantic,tcs.ForeachPredicatePropertyInit>( "E0677A9AB6C85E30AE6811DEA907001CBF7437BB", "demo.sap.com/tcsmeta", new java.lang.String[] { "TCS", "PredicateSemantic", "foreachParent" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ 
            }
            return __foreachParent;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,tcs.PredicateSemantic,tcs.Template> __as;
        /**
         * Returns the descriptor for the <code>as</code> reference.
         * @return  the descriptor for the <code>as</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,tcs.PredicateSemantic,tcs.Template> AS( ) {
            if ( __as == null ) {
                __as = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,tcs.PredicateSemantic,tcs.Template>( "E012BF1ED50FA040B73E11DE94C800155883529C", "demo.sap.com/tcsmeta", new java.lang.String[] { "TCS", "PredicateSemantic", "as" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ 
            }
            return __as;
        }
    }
}    