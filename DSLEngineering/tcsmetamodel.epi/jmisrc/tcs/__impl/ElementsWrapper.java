/**
 * Generated by the MOIN Generator Version 3.0
 **/

package tcs.__impl;

public class ElementsWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<tcs.Elements> implements tcs.Elements,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The Elements wrapper
     */
    public ElementsWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, tcs.__impl.ElementsImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private tcs.__impl.ElementsImpl getCastWrappedObject() {
        return (tcs.__impl.ElementsImpl) getWrappedObject();
    }

    public tcs.Elements unwrap() {
        return (tcs.Elements) getWrappedObject();
    }
    
    public boolean exists(tcs.Sequence _Sequence, tcs.SequenceElement _Sequenceelement) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Sequence), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Sequenceelement));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Sequence), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Sequenceelement)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public tcs.Sequence getSequence(tcs.SequenceElement _Sequenceelement) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (tcs.Sequence) wrapResult(getCastWrappedObject().getSequence(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Sequenceelement)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (tcs.Sequence) wrapResult(getCastWrappedObject().getSequence(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Sequenceelement))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.List getSequenceelement(tcs.Sequence _Sequence) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.List) wrapResult(getCastWrappedObject().getSequenceelement(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Sequence)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.List) wrapResult(getCastWrappedObject().getSequenceelement(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Sequence))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(tcs.Sequence _Sequence, tcs.SequenceElement _Sequenceelement) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Sequence), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Sequenceelement));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Sequence), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Sequenceelement)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(tcs.Sequence _Sequence, tcs.SequenceElement _Sequenceelement) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Sequence), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Sequenceelement));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Sequence), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Sequenceelement)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<tcs.Elements> get___JmiInterface() {
        return tcs.Elements.class;
    }

    protected String metaObjectToString() {
        return "tcs.Elements (Java Type)\nTCS.elements (MOF Type)"; //$NON-NLS-1$
    }    
}