/**
 * Generated by the MOIN Generator Version 3.0
 **/

package tcs.__impl;

public class ConcreteSyntaxConcreteSyntaxWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<tcs.ConcreteSyntaxConcreteSyntax> implements tcs.ConcreteSyntaxConcreteSyntax,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The ConcreteSyntaxConcreteSyntax wrapper
     */
    public ConcreteSyntaxConcreteSyntaxWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, tcs.__impl.ConcreteSyntaxConcreteSyntaxImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private tcs.__impl.ConcreteSyntaxConcreteSyntaxImpl getCastWrappedObject() {
        return (tcs.__impl.ConcreteSyntaxConcreteSyntaxImpl) getWrappedObject();
    }

    public tcs.ConcreteSyntaxConcreteSyntax unwrap() {
        return (tcs.ConcreteSyntaxConcreteSyntax) getWrappedObject();
    }
    
    public boolean exists(tcs.ConcreteSyntax _ImportedBy, tcs.ConcreteSyntax _Imports) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImportedBy), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Imports));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImportedBy), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Imports)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public tcs.ConcreteSyntax getImportedBy(tcs.ConcreteSyntax _Imports) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (tcs.ConcreteSyntax) wrapResult(getCastWrappedObject().getImportedBy(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Imports)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (tcs.ConcreteSyntax) wrapResult(getCastWrappedObject().getImportedBy(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Imports))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getImports(tcs.ConcreteSyntax _ImportedBy) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getImports(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImportedBy)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getImports(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImportedBy))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(tcs.ConcreteSyntax _ImportedBy, tcs.ConcreteSyntax _Imports) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImportedBy), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Imports));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImportedBy), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Imports)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(tcs.ConcreteSyntax _ImportedBy, tcs.ConcreteSyntax _Imports) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImportedBy), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Imports));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImportedBy), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Imports)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<tcs.ConcreteSyntaxConcreteSyntax> get___JmiInterface() {
        return tcs.ConcreteSyntaxConcreteSyntax.class;
    }

    protected String metaObjectToString() {
        return "tcs.ConcreteSyntaxConcreteSyntax (Java Type)\nTCS.ConcreteSyntax_ConcreteSyntax (MOF Type)"; //$NON-NLS-1$
    }    
}