/**
 * Generated by the MOIN Generator Version 3.0
 **/

package tcs.__impl;

public class FunctionTemplateSequenceWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<tcs.FunctionTemplateSequence> implements tcs.FunctionTemplateSequence,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The FunctionTemplateSequence wrapper
     */
    public FunctionTemplateSequenceWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, tcs.__impl.FunctionTemplateSequenceImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private tcs.__impl.FunctionTemplateSequenceImpl getCastWrappedObject() {
        return (tcs.__impl.FunctionTemplateSequenceImpl) getWrappedObject();
    }

    public tcs.FunctionTemplateSequence unwrap() {
        return (tcs.FunctionTemplateSequence) getWrappedObject();
    }
    
    public boolean exists(tcs.FunctionTemplate _FunctionContainer, tcs.Sequence _Sequence) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FunctionContainer), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Sequence));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FunctionContainer), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Sequence)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public tcs.FunctionTemplate getFunctionContainer(tcs.Sequence _Sequence) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (tcs.FunctionTemplate) wrapResult(getCastWrappedObject().getFunctionContainer(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Sequence)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (tcs.FunctionTemplate) wrapResult(getCastWrappedObject().getFunctionContainer(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Sequence))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public tcs.Sequence getSequence(tcs.FunctionTemplate _FunctionContainer) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (tcs.Sequence) wrapResult(getCastWrappedObject().getSequence(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FunctionContainer)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (tcs.Sequence) wrapResult(getCastWrappedObject().getSequence(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FunctionContainer))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(tcs.FunctionTemplate _FunctionContainer, tcs.Sequence _Sequence) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FunctionContainer), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Sequence));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FunctionContainer), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Sequence)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(tcs.FunctionTemplate _FunctionContainer, tcs.Sequence _Sequence) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FunctionContainer), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Sequence));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FunctionContainer), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Sequence)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<tcs.FunctionTemplateSequence> get___JmiInterface() {
        return tcs.FunctionTemplateSequence.class;
    }

    protected String metaObjectToString() {
        return "tcs.FunctionTemplateSequence (Java Type)\nTCS.FunctionTemplate_Sequence (MOF Type)"; //$NON-NLS-1$
    }    
}