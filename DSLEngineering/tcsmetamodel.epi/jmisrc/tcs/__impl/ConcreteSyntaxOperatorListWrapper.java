/**
 * Generated by the MOIN Generator Version 3.0
 **/

package tcs.__impl;

public class ConcreteSyntaxOperatorListWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<tcs.ConcreteSyntaxOperatorList> implements tcs.ConcreteSyntaxOperatorList,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The ConcreteSyntaxOperatorList wrapper
     */
    public ConcreteSyntaxOperatorListWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, tcs.__impl.ConcreteSyntaxOperatorListImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private tcs.__impl.ConcreteSyntaxOperatorListImpl getCastWrappedObject() {
        return (tcs.__impl.ConcreteSyntaxOperatorListImpl) getWrappedObject();
    }

    public tcs.ConcreteSyntaxOperatorList unwrap() {
        return (tcs.ConcreteSyntaxOperatorList) getWrappedObject();
    }
    
    public boolean exists(tcs.ConcreteSyntax _Concretesyntax, tcs.OperatorList _Operatorlist) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Concretesyntax), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Operatorlist));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Concretesyntax), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Operatorlist)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public tcs.ConcreteSyntax getConcretesyntax(tcs.OperatorList _Operatorlist) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (tcs.ConcreteSyntax) wrapResult(getCastWrappedObject().getConcretesyntax(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Operatorlist)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (tcs.ConcreteSyntax) wrapResult(getCastWrappedObject().getConcretesyntax(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Operatorlist))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.List getOperatorlist(tcs.ConcreteSyntax _Concretesyntax) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.List) wrapResult(getCastWrappedObject().getOperatorlist(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Concretesyntax)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.List) wrapResult(getCastWrappedObject().getOperatorlist(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Concretesyntax))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(tcs.ConcreteSyntax _Concretesyntax, tcs.OperatorList _Operatorlist) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Concretesyntax), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Operatorlist));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Concretesyntax), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Operatorlist)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(tcs.ConcreteSyntax _Concretesyntax, tcs.OperatorList _Operatorlist) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Concretesyntax), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Operatorlist));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Concretesyntax), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Operatorlist)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<tcs.ConcreteSyntaxOperatorList> get___JmiInterface() {
        return tcs.ConcreteSyntaxOperatorList.class;
    }

    protected String metaObjectToString() {
        return "tcs.ConcreteSyntaxOperatorList (Java Type)\nTCS.ConcreteSyntax_OperatorList (MOF Type)"; //$NON-NLS-1$
    }    
}