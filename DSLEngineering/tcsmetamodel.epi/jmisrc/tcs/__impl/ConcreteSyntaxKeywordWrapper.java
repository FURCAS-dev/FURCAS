/**
 * Generated by the MOIN Generator Version 3.0
 **/

package tcs.__impl;

public class ConcreteSyntaxKeywordWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<tcs.ConcreteSyntaxKeyword> implements tcs.ConcreteSyntaxKeyword,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The ConcreteSyntaxKeyword wrapper
     */
    public ConcreteSyntaxKeywordWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, tcs.__impl.ConcreteSyntaxKeywordImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private tcs.__impl.ConcreteSyntaxKeywordImpl getCastWrappedObject() {
        return (tcs.__impl.ConcreteSyntaxKeywordImpl) getWrappedObject();
    }

    public tcs.ConcreteSyntaxKeyword unwrap() {
        return (tcs.ConcreteSyntaxKeyword) getWrappedObject();
    }
    
    public boolean exists(tcs.ConcreteSyntax _Concretesyntax, tcs.Keyword _Keyword) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Concretesyntax), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Keyword));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Concretesyntax), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Keyword)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public tcs.ConcreteSyntax getConcretesyntax(tcs.Keyword _Keyword) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (tcs.ConcreteSyntax) wrapResult(getCastWrappedObject().getConcretesyntax(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Keyword)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (tcs.ConcreteSyntax) wrapResult(getCastWrappedObject().getConcretesyntax(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Keyword))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getKeyword(tcs.ConcreteSyntax _Concretesyntax) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getKeyword(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Concretesyntax)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getKeyword(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Concretesyntax))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(tcs.ConcreteSyntax _Concretesyntax, tcs.Keyword _Keyword) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Concretesyntax), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Keyword));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Concretesyntax), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Keyword)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(tcs.ConcreteSyntax _Concretesyntax, tcs.Keyword _Keyword) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Concretesyntax), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Keyword));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Concretesyntax), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Keyword)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

<<<<<<< HEAD
=======
    @SuppressWarnings("unchecked")
>>>>>>> e04eb9c33a214a29f23acac04720aff53a6082b7
    public java.lang.Class<tcs.ConcreteSyntaxKeyword> get___JmiInterface() {
        return tcs.ConcreteSyntaxKeyword.class;
    }

    protected String metaObjectToString() {
        return "tcs.ConcreteSyntaxKeyword (Java Type)\nTCS.ConcreteSyntax_Keyword (MOF Type)"; //$NON-NLS-1$
    }    
}