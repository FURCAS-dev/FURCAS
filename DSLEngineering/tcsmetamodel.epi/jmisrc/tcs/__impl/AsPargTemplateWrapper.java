/**
 * Generated by the MOIN Generator Version 3.0
 **/

package tcs.__impl;

public class AsPargTemplateWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<tcs.AsPargTemplate> implements tcs.AsPargTemplate,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AsPargTemplate wrapper
     */
    public AsPargTemplateWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, tcs.__impl.AsPargTemplateImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private tcs.__impl.AsPargTemplateImpl getCastWrappedObject() {
        return (tcs.__impl.AsPargTemplateImpl) getWrappedObject();
    }

    public tcs.AsPargTemplate unwrap() {
        return (tcs.AsPargTemplate) getWrappedObject();
    }
    
    public boolean exists(tcs.AsParg _AsParg, tcs.Template _Template) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AsParg), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Template));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AsParg), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Template)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getAsParg(tcs.Template _Template) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getAsParg(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Template)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getAsParg(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Template))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public tcs.Template getTemplate(tcs.AsParg _AsParg) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (tcs.Template) wrapResult(getCastWrappedObject().getTemplate(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AsParg)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (tcs.Template) wrapResult(getCastWrappedObject().getTemplate(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AsParg))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(tcs.AsParg _AsParg, tcs.Template _Template) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AsParg), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Template));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AsParg), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Template)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(tcs.AsParg _AsParg, tcs.Template _Template) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AsParg), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Template));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AsParg), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Template)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

<<<<<<< HEAD
=======
    @SuppressWarnings("unchecked")
>>>>>>> e04eb9c33a214a29f23acac04720aff53a6082b7
    public java.lang.Class<tcs.AsPargTemplate> get___JmiInterface() {
        return tcs.AsPargTemplate.class;
    }

    protected String metaObjectToString() {
        return "tcs.AsPargTemplate (Java Type)\nTCS.AsPArg_Template (MOF Type)"; //$NON-NLS-1$
    }    
}