/**
 * Generated by the MOIN Generator Version 3.0
 **/

package tcs.__impl;

public class OperatorTemplateOperatorWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<tcs.OperatorTemplateOperator> implements tcs.OperatorTemplateOperator,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The OperatorTemplateOperator wrapper
     */
    public OperatorTemplateOperatorWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, tcs.__impl.OperatorTemplateOperatorImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private tcs.__impl.OperatorTemplateOperatorImpl getCastWrappedObject() {
        return (tcs.__impl.OperatorTemplateOperatorImpl) getWrappedObject();
    }

    public tcs.OperatorTemplateOperator unwrap() {
        return (tcs.OperatorTemplateOperator) getWrappedObject();
    }
    
    public boolean exists(tcs.OperatorTemplate _Templates, tcs.Operator _Operators) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Templates), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Operators));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Templates), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Operators)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getTemplates(tcs.Operator _Operators) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getTemplates(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Operators)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getTemplates(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Operators))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getOperators(tcs.OperatorTemplate _Templates) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getOperators(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Templates)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getOperators(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Templates))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(tcs.OperatorTemplate _Templates, tcs.Operator _Operators) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Templates), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Operators));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Templates), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Operators)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(tcs.OperatorTemplate _Templates, tcs.Operator _Operators) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Templates), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Operators));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Templates), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Operators)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<tcs.OperatorTemplateOperator> get___JmiInterface() {
        return tcs.OperatorTemplateOperator.class;
    }

    protected String metaObjectToString() {
        return "tcs.OperatorTemplateOperator (Java Type)\nTCS.OperatorTemplate_Operator (MOF Type)"; //$NON-NLS-1$
    }    
}