/**
 * Generated by the MOIN Generator Version 3.0
 **/

package tcs.__impl;

public class PredicateSemanticTemplateWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<tcs.PredicateSemanticTemplate> implements tcs.PredicateSemanticTemplate,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The PredicateSemanticTemplate wrapper
     */
    public PredicateSemanticTemplateWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, tcs.__impl.PredicateSemanticTemplateImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private tcs.__impl.PredicateSemanticTemplateImpl getCastWrappedObject() {
        return (tcs.__impl.PredicateSemanticTemplateImpl) getWrappedObject();
    }

    public tcs.PredicateSemanticTemplate unwrap() {
        return (tcs.PredicateSemanticTemplate) getWrappedObject();
    }
    
    public boolean exists(tcs.PredicateSemantic _Predicatesemantic, tcs.Template _Template) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Predicatesemantic), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Template));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Predicatesemantic), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Template)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getPredicatesemantic(tcs.Template _Template) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getPredicatesemantic(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Template)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getPredicatesemantic(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Template))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public tcs.Template getTemplate(tcs.PredicateSemantic _Predicatesemantic) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (tcs.Template) wrapResult(getCastWrappedObject().getTemplate(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Predicatesemantic)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (tcs.Template) wrapResult(getCastWrappedObject().getTemplate(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Predicatesemantic))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(tcs.PredicateSemantic _Predicatesemantic, tcs.Template _Template) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Predicatesemantic), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Template));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Predicatesemantic), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Template)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(tcs.PredicateSemantic _Predicatesemantic, tcs.Template _Template) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Predicatesemantic), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Template));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Predicatesemantic), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Template)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<tcs.PredicateSemanticTemplate> get___JmiInterface() {
        return tcs.PredicateSemanticTemplate.class;
    }

    protected String metaObjectToString() {
        return "tcs.PredicateSemanticTemplate (Java Type)\nTCS.PredicateSemantic_Template (MOF Type)"; //$NON-NLS-1$
    }    
}