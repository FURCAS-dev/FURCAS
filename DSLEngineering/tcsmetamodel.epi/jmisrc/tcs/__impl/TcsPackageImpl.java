/**
 * Generated by the MOIN Generator Version 3.0
 **/

package tcs.__impl;

public final class TcsPackageImpl extends com.sap.tc.moin.repository.core.jmi.reflect.RefPackageImpl
{
        
    public static final java.util.Map<java.lang.String, java.lang.Integer> FEATURE_IDS;
<<<<<<< HEAD
    
=======

>>>>>>> e04eb9c33a214a29f23acac04720aff53a6082b7
    static {
        
        FEATURE_IDS = new java.util.HashMap<java.lang.String, java.lang.Integer>(179);
        FEATURE_IDS.put("textblockdefinition", Integer.valueOf(0)); //$NON-NLS-1$
        FEATURE_IDS.put("LocatedElement", Integer.valueOf(1)); //$NON-NLS-1$
        FEATURE_IDS.put("NamedElement", Integer.valueOf(2)); //$NON-NLS-1$
        FEATURE_IDS.put("QualifiedNamedElement", Integer.valueOf(3)); //$NON-NLS-1$
        FEATURE_IDS.put("ConcreteSyntax", Integer.valueOf(4)); //$NON-NLS-1$
        FEATURE_IDS.put("Template", Integer.valueOf(5)); //$NON-NLS-1$
        FEATURE_IDS.put("FunctionTemplate", Integer.valueOf(6)); //$NON-NLS-1$
        FEATURE_IDS.put("ClassTemplate", Integer.valueOf(7)); //$NON-NLS-1$
        FEATURE_IDS.put("PrimitiveTemplate", Integer.valueOf(8)); //$NON-NLS-1$
        FEATURE_IDS.put("OperatorTemplate", Integer.valueOf(9)); //$NON-NLS-1$
        FEATURE_IDS.put("EnumerationTemplate", Integer.valueOf(10)); //$NON-NLS-1$
        FEATURE_IDS.put("EnumLiteralMapping", Integer.valueOf(11)); //$NON-NLS-1$
        FEATURE_IDS.put("Literal", Integer.valueOf(12)); //$NON-NLS-1$
        FEATURE_IDS.put("Symbol", Integer.valueOf(13)); //$NON-NLS-1$
        FEATURE_IDS.put("Keyword", Integer.valueOf(14)); //$NON-NLS-1$
        FEATURE_IDS.put("OperatorList", Integer.valueOf(15)); //$NON-NLS-1$
        FEATURE_IDS.put("Priority", Integer.valueOf(16)); //$NON-NLS-1$
        FEATURE_IDS.put("Operator", Integer.valueOf(17)); //$NON-NLS-1$
        FEATURE_IDS.put("Sequence", Integer.valueOf(18)); //$NON-NLS-1$
        FEATURE_IDS.put("SequenceElement", Integer.valueOf(19)); //$NON-NLS-1$
        FEATURE_IDS.put("LiteralRef", Integer.valueOf(20)); //$NON-NLS-1$
        FEATURE_IDS.put("Property", Integer.valueOf(21)); //$NON-NLS-1$
        FEATURE_IDS.put("CustomSeparator", Integer.valueOf(22)); //$NON-NLS-1$
        FEATURE_IDS.put("Block", Integer.valueOf(23)); //$NON-NLS-1$
        FEATURE_IDS.put("ConditionalElement", Integer.valueOf(24)); //$NON-NLS-1$
        FEATURE_IDS.put("Alternative", Integer.valueOf(25)); //$NON-NLS-1$
        FEATURE_IDS.put("FunctionCall", Integer.valueOf(26)); //$NON-NLS-1$
        FEATURE_IDS.put("PropertyArg", Integer.valueOf(27)); //$NON-NLS-1$
        FEATURE_IDS.put("RefersToPArg", Integer.valueOf(28)); //$NON-NLS-1$
        FEATURE_IDS.put("LookInPArg", Integer.valueOf(29)); //$NON-NLS-1$
        FEATURE_IDS.put("CreateInPArg", Integer.valueOf(30)); //$NON-NLS-1$
        FEATURE_IDS.put("SeparatorPArg", Integer.valueOf(31)); //$NON-NLS-1$
        FEATURE_IDS.put("AutoCreatePArg", Integer.valueOf(32)); //$NON-NLS-1$
        FEATURE_IDS.put("ImportContextPArg", Integer.valueOf(33)); //$NON-NLS-1$
        FEATURE_IDS.put("ForcedLowerPArg", Integer.valueOf(34)); //$NON-NLS-1$
        FEATURE_IDS.put("CreateAsPArg", Integer.valueOf(35)); //$NON-NLS-1$
        FEATURE_IDS.put("AsPArg", Integer.valueOf(36)); //$NON-NLS-1$
        FEATURE_IDS.put("ModePArg", Integer.valueOf(37)); //$NON-NLS-1$
        FEATURE_IDS.put("BlockArg", Integer.valueOf(38)); //$NON-NLS-1$
        FEATURE_IDS.put("NbNLBArg", Integer.valueOf(39)); //$NON-NLS-1$
        FEATURE_IDS.put("IndentIncrBArg", Integer.valueOf(40)); //$NON-NLS-1$
        FEATURE_IDS.put("StartNLBArg", Integer.valueOf(41)); //$NON-NLS-1$
        FEATURE_IDS.put("StartNbNLBArg", Integer.valueOf(42)); //$NON-NLS-1$
        FEATURE_IDS.put("EndNLBArg", Integer.valueOf(43)); //$NON-NLS-1$
        FEATURE_IDS.put("Expression", Integer.valueOf(44)); //$NON-NLS-1$
        FEATURE_IDS.put("AndExp", Integer.valueOf(45)); //$NON-NLS-1$
        FEATURE_IDS.put("AtomExp", Integer.valueOf(46)); //$NON-NLS-1$
        FEATURE_IDS.put("EqualsExp", Integer.valueOf(47)); //$NON-NLS-1$
        FEATURE_IDS.put("BooleanPropertyExp", Integer.valueOf(48)); //$NON-NLS-1$
        FEATURE_IDS.put("IsDefinedExp", Integer.valueOf(49)); //$NON-NLS-1$
        FEATURE_IDS.put("OneExp", Integer.valueOf(50)); //$NON-NLS-1$
        FEATURE_IDS.put("Value", Integer.valueOf(51)); //$NON-NLS-1$
        FEATURE_IDS.put("StringVal", Integer.valueOf(52)); //$NON-NLS-1$
        FEATURE_IDS.put("IntegerVal", Integer.valueOf(53)); //$NON-NLS-1$
        FEATURE_IDS.put("NegativeIntegerVal", Integer.valueOf(54)); //$NON-NLS-1$
        FEATURE_IDS.put("EnumLiteralVal", Integer.valueOf(55)); //$NON-NLS-1$
        FEATURE_IDS.put("Token", Integer.valueOf(56)); //$NON-NLS-1$
        FEATURE_IDS.put("OrPattern", Integer.valueOf(57)); //$NON-NLS-1$
        FEATURE_IDS.put("SimplePattern", Integer.valueOf(58)); //$NON-NLS-1$
        FEATURE_IDS.put("RulePattern", Integer.valueOf(59)); //$NON-NLS-1$
        FEATURE_IDS.put("Rule", Integer.valueOf(60)); //$NON-NLS-1$
        FEATURE_IDS.put("WordRule", Integer.valueOf(61)); //$NON-NLS-1$
        FEATURE_IDS.put("EndOfLineRule", Integer.valueOf(62)); //$NON-NLS-1$
        FEATURE_IDS.put("MultiLineRule", Integer.valueOf(63)); //$NON-NLS-1$
        FEATURE_IDS.put("Mapping", Integer.valueOf(64)); //$NON-NLS-1$
        FEATURE_IDS.put("SimpleMapping", Integer.valueOf(65)); //$NON-NLS-1$
        FEATURE_IDS.put("WildcardMapping", Integer.valueOf(66)); //$NON-NLS-1$
        FEATURE_IDS.put("OctalMapping", Integer.valueOf(67)); //$NON-NLS-1$
        FEATURE_IDS.put("HexadecimalMapping", Integer.valueOf(68)); //$NON-NLS-1$
        FEATURE_IDS.put("StringPattern", Integer.valueOf(69)); //$NON-NLS-1$
        FEATURE_IDS.put("ClassPattern", Integer.valueOf(70)); //$NON-NLS-1$
        FEATURE_IDS.put("InstanceOfExp", Integer.valueOf(71)); //$NON-NLS-1$
        FEATURE_IDS.put("QueryPArg", Integer.valueOf(72)); //$NON-NLS-1$
        FEATURE_IDS.put("InjectorActionsBlock", Integer.valueOf(73)); //$NON-NLS-1$
        FEATURE_IDS.put("InjectorAction", Integer.valueOf(74)); //$NON-NLS-1$
        FEATURE_IDS.put("PropertyInit", Integer.valueOf(75)); //$NON-NLS-1$
        FEATURE_IDS.put("PropertyReference", Integer.valueOf(76)); //$NON-NLS-1$
        FEATURE_IDS.put("ContextTags", Integer.valueOf(77)); //$NON-NLS-1$
        FEATURE_IDS.put("PrimitivePropertyInit", Integer.valueOf(78)); //$NON-NLS-1$
        FEATURE_IDS.put("LookupPropertyInit", Integer.valueOf(79)); //$NON-NLS-1$
        FEATURE_IDS.put("ForcedUpperPArg", Integer.valueOf(80)); //$NON-NLS-1$
        FEATURE_IDS.put("SequenceInAlternative", Integer.valueOf(81)); //$NON-NLS-1$
        FEATURE_IDS.put("DisambiguatePArg", Integer.valueOf(82)); //$NON-NLS-1$
        FEATURE_IDS.put("FilterPArg", Integer.valueOf(83)); //$NON-NLS-1$
        FEATURE_IDS.put("ForeachPredicatePropertyInit", Integer.valueOf(84)); //$NON-NLS-1$
        FEATURE_IDS.put("PartialPArg", Integer.valueOf(85)); //$NON-NLS-1$
        FEATURE_IDS.put("PredicateSemantic", Integer.valueOf(86)); //$NON-NLS-1$
        FEATURE_IDS.put("ContextTemplate", Integer.valueOf(87)); //$NON-NLS-1$
        FEATURE_IDS.put("ConcreteSyntax_Template", Integer.valueOf(88)); //$NON-NLS-1$
        FEATURE_IDS.put("ConcreteSyntax_Keyword", Integer.valueOf(89)); //$NON-NLS-1$
        FEATURE_IDS.put("ConcreteSyntax_Token", Integer.valueOf(90)); //$NON-NLS-1$
        FEATURE_IDS.put("ConcreteSyntax_OperatorList", Integer.valueOf(91)); //$NON-NLS-1$
        FEATURE_IDS.put("ConcreteSyntax_Symbol", Integer.valueOf(92)); //$NON-NLS-1$
        FEATURE_IDS.put("FunctionTemplate_Sequence", Integer.valueOf(93)); //$NON-NLS-1$
        FEATURE_IDS.put("ClassTemplate_Sequence", Integer.valueOf(94)); //$NON-NLS-1$
        FEATURE_IDS.put("ClassTemplate_PrefixSequence", Integer.valueOf(95)); //$NON-NLS-1$
        FEATURE_IDS.put("ClassTemplate_OperatorList", Integer.valueOf(96)); //$NON-NLS-1$
        FEATURE_IDS.put("EnumerationTemplate_EnumLiteralMapping", Integer.valueOf(97)); //$NON-NLS-1$
        FEATURE_IDS.put("EnumLiteralMapping_EnumLiteralVal", Integer.valueOf(98)); //$NON-NLS-1$
        FEATURE_IDS.put("EnumLiteralMapping_LiteralRef", Integer.valueOf(99)); //$NON-NLS-1$
        FEATURE_IDS.put("OperatorTemplate_Sequence", Integer.valueOf(100)); //$NON-NLS-1$
        FEATURE_IDS.put("OperatorTemplate_Operator", Integer.valueOf(101)); //$NON-NLS-1$
        FEATURE_IDS.put("OperatorList_Priority", Integer.valueOf(102)); //$NON-NLS-1$
        FEATURE_IDS.put("Priority_Operator", Integer.valueOf(103)); //$NON-NLS-1$
        FEATURE_IDS.put("elements", Integer.valueOf(104)); //$NON-NLS-1$
        FEATURE_IDS.put("Block_Sequence", Integer.valueOf(105)); //$NON-NLS-1$
        FEATURE_IDS.put("elseSequence", Integer.valueOf(106)); //$NON-NLS-1$
        FEATURE_IDS.put("SeparatorPArg_Sequence", Integer.valueOf(107)); //$NON-NLS-1$
        FEATURE_IDS.put("thenSequence", Integer.valueOf(108)); //$NON-NLS-1$
        FEATURE_IDS.put("ConditionalElement_Expression", Integer.valueOf(109)); //$NON-NLS-1$
        FEATURE_IDS.put("Operator_Literal", Integer.valueOf(110)); //$NON-NLS-1$
        FEATURE_IDS.put("Property_PropertyArg", Integer.valueOf(111)); //$NON-NLS-1$
        FEATURE_IDS.put("AndExp_AtomExp", Integer.valueOf(112)); //$NON-NLS-1$
        FEATURE_IDS.put("Block_BlockArg", Integer.valueOf(113)); //$NON-NLS-1$
        FEATURE_IDS.put("OrPattern_SimplePattern", Integer.valueOf(114)); //$NON-NLS-1$
        FEATURE_IDS.put("MultiLineRule_Mapping", Integer.valueOf(115)); //$NON-NLS-1$
        FEATURE_IDS.put("LiteralRef_Literal", Integer.valueOf(116)); //$NON-NLS-1$
        FEATURE_IDS.put("FunctionCall_FunctionTemplate", Integer.valueOf(117)); //$NON-NLS-1$
        FEATURE_IDS.put("QualifiedNamedElement_ModelElement", Integer.valueOf(118)); //$NON-NLS-1$
        FEATURE_IDS.put("Property_StrucFeature", Integer.valueOf(119)); //$NON-NLS-1$
        FEATURE_IDS.put("InjectorActionsBlock_InjectorAction", Integer.valueOf(120)); //$NON-NLS-1$
        FEATURE_IDS.put("Property_PropertyReference", Integer.valueOf(121)); //$NON-NLS-1$
        FEATURE_IDS.put("PropertyInit_PropertyReference", Integer.valueOf(122)); //$NON-NLS-1$
        FEATURE_IDS.put("AtomExp_PropertyReference", Integer.valueOf(123)); //$NON-NLS-1$
        FEATURE_IDS.put("OperatorTemplate_PropertyReference", Integer.valueOf(124)); //$NON-NLS-1$
        FEATURE_IDS.put("OperatorTemplate_PropertyReference1", Integer.valueOf(125)); //$NON-NLS-1$
        FEATURE_IDS.put("OperatorTemplate_PropertyReference2", Integer.valueOf(126)); //$NON-NLS-1$
        FEATURE_IDS.put("Alternative_Sequence", Integer.valueOf(127)); //$NON-NLS-1$
        FEATURE_IDS.put("ConcreteSyntax_ConcreteSyntax", Integer.valueOf(128)); //$NON-NLS-1$
        FEATURE_IDS.put("AsPArg_Template", Integer.valueOf(129)); //$NON-NLS-1$
        FEATURE_IDS.put("SequenceElement_Template", Integer.valueOf(130)); //$NON-NLS-1$
        FEATURE_IDS.put("LikePropertyInit_PredicateSemantic", Integer.valueOf(131)); //$NON-NLS-1$
        FEATURE_IDS.put("PredicateSemantic_Template", Integer.valueOf(132)); //$NON-NLS-1$
        FEATURE_IDS.put("ContextTemplate_ContextTags", Integer.valueOf(133)); //$NON-NLS-1$
    }

    // constructors    
    public TcsPackageImpl()
    {
        super();
    }
    public TcsPackageImpl(java.lang.Object workspace, java.lang.String mofId, com.sap.tc.moin.repository.mmi.reflect.RefPackage immediatePackage, com.sap.tc.moin.repository.mmi.reflect.RefObject metaObject)
    {
        super(workspace, mofId, immediatePackage, metaObject);
    }
    // internal enumeration creators
    public com.sap.tc.moin.repository.mmi.reflect.RefEnum create___RefEnum(com.sap.tc.moin.repository.mmi.model.EnumerationType enumType, String name) {
        com.sap.tc.moin.repository.mmi.reflect.RefEnum result = null;
        java.lang.String enumName = enumType.getName();
          if (enumName.equals("Associativity")) { //$NON-NLS-1$
            result = tcs.AssociativityEnum.forName(name);
          }
          else if (enumName.equals("AutoCreateKind")) { //$NON-NLS-1$
            result = tcs.AutoCreateKindEnum.forName(name);
          }
          else if (enumName.equals("SpaceKind")) { //$NON-NLS-1$
            result = tcs.SpaceKindEnum.forName(name);
          }
        return result;
    }
    // internal structure type creators
    // nested packages
    public com.sap.tc.moin.repository.mmi.reflect.RefPackage getTextblockdefinition(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refPackage(connection, "textblockdefinition"); //$NON-NLS-1$
    }
    // classes
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getLocatedElement(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "LocatedElement"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getNamedElement(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "NamedElement"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getQualifiedNamedElement(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "QualifiedNamedElement"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getConcreteSyntax(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "ConcreteSyntax"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getTemplate(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Template"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getFunctionTemplate(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "FunctionTemplate"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getClassTemplate(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "ClassTemplate"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getPrimitiveTemplate(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "PrimitiveTemplate"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getOperatorTemplate(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "OperatorTemplate"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getEnumerationTemplate(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "EnumerationTemplate"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getEnumLiteralMapping(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "EnumLiteralMapping"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getLiteral(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Literal"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getSymbol(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Symbol"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getKeyword(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Keyword"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getOperatorList(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "OperatorList"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getPriority(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Priority"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getOperator(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Operator"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getSequence(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Sequence"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getSequenceElement(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "SequenceElement"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getLiteralRef(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "LiteralRef"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getProperty(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Property"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getCustomSeparator(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "CustomSeparator"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getBlock(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Block"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getConditionalElement(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "ConditionalElement"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getAlternative(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Alternative"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getFunctionCall(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "FunctionCall"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getPropertyArg(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "PropertyArg"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getRefersToParg(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "RefersToPArg"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getLookInParg(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "LookInPArg"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getCreateInParg(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "CreateInPArg"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getSeparatorParg(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "SeparatorPArg"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getAutoCreateParg(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "AutoCreatePArg"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getImportContextParg(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "ImportContextPArg"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getForcedLowerParg(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "ForcedLowerPArg"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getCreateAsParg(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "CreateAsPArg"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getAsParg(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "AsPArg"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getModeParg(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "ModePArg"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getBlockArg(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "BlockArg"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getNbNlbarg(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "NbNLBArg"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getIndentIncrBarg(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "IndentIncrBArg"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getStartNlbarg(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "StartNLBArg"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getStartNbNlbarg(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "StartNbNLBArg"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getEndNlbarg(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "EndNLBArg"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getExpression(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Expression"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getAndExp(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "AndExp"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getAtomExp(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "AtomExp"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getEqualsExp(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "EqualsExp"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getBooleanPropertyExp(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "BooleanPropertyExp"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getIsDefinedExp(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "IsDefinedExp"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getOneExp(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "OneExp"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getValue(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Value"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getStringVal(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "StringVal"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getIntegerVal(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "IntegerVal"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getNegativeIntegerVal(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "NegativeIntegerVal"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getEnumLiteralVal(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "EnumLiteralVal"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getToken(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Token"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getOrPattern(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "OrPattern"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getSimplePattern(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "SimplePattern"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getRulePattern(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "RulePattern"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getRule(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Rule"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getWordRule(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "WordRule"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getEndOfLineRule(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "EndOfLineRule"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getMultiLineRule(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "MultiLineRule"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getMapping(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Mapping"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getSimpleMapping(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "SimpleMapping"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getWildcardMapping(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "WildcardMapping"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getOctalMapping(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "OctalMapping"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getHexadecimalMapping(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "HexadecimalMapping"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getStringPattern(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "StringPattern"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getClassPattern(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "ClassPattern"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getInstanceOfExp(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "InstanceOfExp"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getQueryParg(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "QueryPArg"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getInjectorActionsBlock(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "InjectorActionsBlock"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getInjectorAction(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "InjectorAction"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getPropertyInit(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "PropertyInit"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getPropertyReference(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "PropertyReference"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getContextTags(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "ContextTags"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getPrimitivePropertyInit(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "PrimitivePropertyInit"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getLookupPropertyInit(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "LookupPropertyInit"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getForcedUpperParg(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "ForcedUpperPArg"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getSequenceInAlternative(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "SequenceInAlternative"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getDisambiguateParg(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "DisambiguatePArg"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getFilterParg(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "FilterPArg"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getForeachPredicatePropertyInit(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "ForeachPredicatePropertyInit"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getPartialParg(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "PartialPArg"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getPredicateSemantic(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "PredicateSemantic"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getContextTemplate(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "ContextTemplate"); //$NON-NLS-1$
    }
    // associations
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getConcreteSyntaxTemplate(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "ConcreteSyntax_Template"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getConcreteSyntaxKeyword(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "ConcreteSyntax_Keyword"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getConcreteSyntaxToken(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "ConcreteSyntax_Token"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getConcreteSyntaxOperatorList(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "ConcreteSyntax_OperatorList"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getConcreteSyntaxSymbol(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "ConcreteSyntax_Symbol"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getFunctionTemplateSequence(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "FunctionTemplate_Sequence"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getClassTemplateSequence(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "ClassTemplate_Sequence"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getClassTemplatePrefixSequence(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "ClassTemplate_PrefixSequence"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getClassTemplateOperatorList(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "ClassTemplate_OperatorList"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getEnumerationTemplateEnumLiteralMapping(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "EnumerationTemplate_EnumLiteralMapping"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getEnumLiteralMappingEnumLiteralVal(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "EnumLiteralMapping_EnumLiteralVal"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getEnumLiteralMappingLiteralRef(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "EnumLiteralMapping_LiteralRef"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getOperatorTemplateSequence(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "OperatorTemplate_Sequence"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getOperatorTemplateOperator(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "OperatorTemplate_Operator"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getOperatorListPriority(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "OperatorList_Priority"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getPriorityOperator(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "Priority_Operator"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getElements(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "elements"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getBlockSequence(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "Block_Sequence"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getElseSequence(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "elseSequence"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getSeparatorPargSequence(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "SeparatorPArg_Sequence"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getThenSequence(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "thenSequence"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getConditionalElementExpression(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "ConditionalElement_Expression"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getOperatorLiteral(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "Operator_Literal"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getPropertyPropertyArg(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "Property_PropertyArg"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getAndExpAtomExp(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "AndExp_AtomExp"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getBlockBlockArg(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "Block_BlockArg"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getOrPatternSimplePattern(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "OrPattern_SimplePattern"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getMultiLineRuleMapping(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "MultiLineRule_Mapping"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getLiteralRefLiteral(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "LiteralRef_Literal"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getFunctionCallFunctionTemplate(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "FunctionCall_FunctionTemplate"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getQualifiedNamedElementModelElement(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "QualifiedNamedElement_ModelElement"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getPropertyStrucFeature(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "Property_StrucFeature"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getInjectorActionsBlockInjectorAction(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "InjectorActionsBlock_InjectorAction"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getPropertyPropertyReference(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "Property_PropertyReference"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getPropertyInitPropertyReference(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "PropertyInit_PropertyReference"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getAtomExpPropertyReference(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "AtomExp_PropertyReference"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getOperatorTemplatePropertyReference(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "OperatorTemplate_PropertyReference"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getOperatorTemplatePropertyReference1(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "OperatorTemplate_PropertyReference1"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getOperatorTemplatePropertyReference2(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "OperatorTemplate_PropertyReference2"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getAlternativeSequence(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "Alternative_Sequence"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getConcreteSyntaxConcreteSyntax(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "ConcreteSyntax_ConcreteSyntax"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getAsPargTemplate(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "AsPArg_Template"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getSequenceElementTemplate(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "SequenceElement_Template"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getLikePropertyInitPredicateSemantic(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "LikePropertyInit_PredicateSemantic"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getPredicateSemanticTemplate(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "PredicateSemantic_Template"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getContextTemplateContextTags(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "ContextTemplate_ContextTags"); //$NON-NLS-1$
    }
    // structure type creators

    protected java.lang.Object create___Extent(java.lang.Object workspace, java.lang.String mofId, com.sap.tc.moin.repository.mmi.reflect.RefPackage immediatePackage, com.sap.tc.moin.repository.mmi.reflect.RefObject metaObject) {
        java.lang.String name = ((com.sap.tc.moin.repository.mmi.model.ModelElement) metaObject).getName();
        com.sap.tc.moin.repository.mmi.reflect.RefBaseObject result = null;
        try {
            switch (FEATURE_IDS.get(name)) {
                case 0:
                    return new textblockdefinition.__impl.TextblockdefinitionPackageImpl(workspace, mofId, immediatePackage, metaObject);
                case 1:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
                case 2:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
                case 3:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
                case 4:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.ConcreteSyntaxImpl")); //$NON-NLS-1$
                case 5:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
                case 6:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.FunctionTemplateImpl")); //$NON-NLS-1$
                case 7:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.ClassTemplateImpl")); //$NON-NLS-1$
                case 8:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.PrimitiveTemplateImpl")); //$NON-NLS-1$
                case 9:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.OperatorTemplateImpl")); //$NON-NLS-1$
                case 10:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.EnumerationTemplateImpl")); //$NON-NLS-1$
                case 11:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.EnumLiteralMappingImpl")); //$NON-NLS-1$
                case 12:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
                case 13:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.SymbolImpl")); //$NON-NLS-1$
                case 14:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.KeywordImpl")); //$NON-NLS-1$
                case 15:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.OperatorListImpl")); //$NON-NLS-1$
                case 16:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.PriorityImpl")); //$NON-NLS-1$
                case 17:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.OperatorImpl")); //$NON-NLS-1$
                case 18:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.SequenceImpl")); //$NON-NLS-1$
                case 19:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
                case 20:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.LiteralRefImpl")); //$NON-NLS-1$
                case 21:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.PropertyImpl")); //$NON-NLS-1$
                case 22:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.CustomSeparatorImpl")); //$NON-NLS-1$
                case 23:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.BlockImpl")); //$NON-NLS-1$
                case 24:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.ConditionalElementImpl")); //$NON-NLS-1$
                case 25:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.AlternativeImpl")); //$NON-NLS-1$
                case 26:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.FunctionCallImpl")); //$NON-NLS-1$
                case 27:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
                case 28:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.RefersToPargImpl")); //$NON-NLS-1$
                case 29:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.LookInPargImpl")); //$NON-NLS-1$
                case 30:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.CreateInPargImpl")); //$NON-NLS-1$
                case 31:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.SeparatorPargImpl")); //$NON-NLS-1$
                case 32:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.AutoCreatePargImpl")); //$NON-NLS-1$
                case 33:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.ImportContextPargImpl")); //$NON-NLS-1$
                case 34:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.ForcedLowerPargImpl")); //$NON-NLS-1$
                case 35:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.CreateAsPargImpl")); //$NON-NLS-1$
                case 36:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.AsPargImpl")); //$NON-NLS-1$
                case 37:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.ModePargImpl")); //$NON-NLS-1$
                case 38:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
                case 39:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.NbNlbargImpl")); //$NON-NLS-1$
                case 40:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.IndentIncrBargImpl")); //$NON-NLS-1$
                case 41:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.StartNlbargImpl")); //$NON-NLS-1$
                case 42:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.StartNbNlbargImpl")); //$NON-NLS-1$
                case 43:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.EndNlbargImpl")); //$NON-NLS-1$
                case 44:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
                case 45:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.AndExpImpl")); //$NON-NLS-1$
                case 46:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
                case 47:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.EqualsExpImpl")); //$NON-NLS-1$
                case 48:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.BooleanPropertyExpImpl")); //$NON-NLS-1$
                case 49:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.IsDefinedExpImpl")); //$NON-NLS-1$
                case 50:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.OneExpImpl")); //$NON-NLS-1$
                case 51:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
                case 52:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.StringValImpl")); //$NON-NLS-1$
                case 53:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.IntegerValImpl")); //$NON-NLS-1$
                case 54:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.NegativeIntegerValImpl")); //$NON-NLS-1$
                case 55:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.EnumLiteralValImpl")); //$NON-NLS-1$
                case 56:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.TokenImpl")); //$NON-NLS-1$
                case 57:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.OrPatternImpl")); //$NON-NLS-1$
                case 58:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
                case 59:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.RulePatternImpl")); //$NON-NLS-1$
                case 60:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
                case 61:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.WordRuleImpl")); //$NON-NLS-1$
                case 62:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.EndOfLineRuleImpl")); //$NON-NLS-1$
                case 63:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.MultiLineRuleImpl")); //$NON-NLS-1$
                case 64:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
                case 65:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.SimpleMappingImpl")); //$NON-NLS-1$
                case 66:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.WildcardMappingImpl")); //$NON-NLS-1$
                case 67:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.OctalMappingImpl")); //$NON-NLS-1$
                case 68:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.HexadecimalMappingImpl")); //$NON-NLS-1$
                case 69:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.StringPatternImpl")); //$NON-NLS-1$
                case 70:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.ClassPatternImpl")); //$NON-NLS-1$
                case 71:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.InstanceOfExpImpl")); //$NON-NLS-1$
                case 72:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.QueryPargImpl")); //$NON-NLS-1$
                case 73:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.InjectorActionsBlockImpl")); //$NON-NLS-1$
                case 74:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
                case 75:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
                case 76:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.PropertyReferenceImpl")); //$NON-NLS-1$
                case 77:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.ContextTagsImpl")); //$NON-NLS-1$
                case 78:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.PrimitivePropertyInitImpl")); //$NON-NLS-1$
                case 79:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.LookupPropertyInitImpl")); //$NON-NLS-1$
                case 80:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.ForcedUpperPargImpl")); //$NON-NLS-1$
                case 81:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.SequenceInAlternativeImpl")); //$NON-NLS-1$
                case 82:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.DisambiguatePargImpl")); //$NON-NLS-1$
                case 83:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.FilterPargImpl")); //$NON-NLS-1$
                case 84:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.ForeachPredicatePropertyInitImpl")); //$NON-NLS-1$
                case 85:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.PartialPargImpl")); //$NON-NLS-1$
                case 86:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.PredicateSemanticImpl")); //$NON-NLS-1$
                case 87:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("tcs.__impl.ContextTemplateImpl")); //$NON-NLS-1$
                case 88:
                    return new tcs.__impl.ConcreteSyntaxTemplateImpl(workspace, mofId, immediatePackage, metaObject);
                case 89:
                    return new tcs.__impl.ConcreteSyntaxKeywordImpl(workspace, mofId, immediatePackage, metaObject);
                case 90:
                    return new tcs.__impl.ConcreteSyntaxTokenImpl(workspace, mofId, immediatePackage, metaObject);
                case 91:
                    return new tcs.__impl.ConcreteSyntaxOperatorListImpl(workspace, mofId, immediatePackage, metaObject);
                case 92:
                    return new tcs.__impl.ConcreteSyntaxSymbolImpl(workspace, mofId, immediatePackage, metaObject);
                case 93:
                    return new tcs.__impl.FunctionTemplateSequenceImpl(workspace, mofId, immediatePackage, metaObject);
                case 94:
                    return new tcs.__impl.ClassTemplateSequenceImpl(workspace, mofId, immediatePackage, metaObject);
                case 95:
                    return new tcs.__impl.ClassTemplatePrefixSequenceImpl(workspace, mofId, immediatePackage, metaObject);
                case 96:
                    return new tcs.__impl.ClassTemplateOperatorListImpl(workspace, mofId, immediatePackage, metaObject);
                case 97:
                    return new tcs.__impl.EnumerationTemplateEnumLiteralMappingImpl(workspace, mofId, immediatePackage, metaObject);
                case 98:
                    return new tcs.__impl.EnumLiteralMappingEnumLiteralValImpl(workspace, mofId, immediatePackage, metaObject);
                case 99:
                    return new tcs.__impl.EnumLiteralMappingLiteralRefImpl(workspace, mofId, immediatePackage, metaObject);
                case 100:
                    return new tcs.__impl.OperatorTemplateSequenceImpl(workspace, mofId, immediatePackage, metaObject);
                case 101:
                    return new tcs.__impl.OperatorTemplateOperatorImpl(workspace, mofId, immediatePackage, metaObject);
                case 102:
                    return new tcs.__impl.OperatorListPriorityImpl(workspace, mofId, immediatePackage, metaObject);
                case 103:
                    return new tcs.__impl.PriorityOperatorImpl(workspace, mofId, immediatePackage, metaObject);
                case 104:
                    return new tcs.__impl.ElementsImpl(workspace, mofId, immediatePackage, metaObject);
                case 105:
                    return new tcs.__impl.BlockSequenceImpl(workspace, mofId, immediatePackage, metaObject);
                case 106:
                    return new tcs.__impl.ElseSequenceImpl(workspace, mofId, immediatePackage, metaObject);
                case 107:
                    return new tcs.__impl.SeparatorPargSequenceImpl(workspace, mofId, immediatePackage, metaObject);
                case 108:
                    return new tcs.__impl.ThenSequenceImpl(workspace, mofId, immediatePackage, metaObject);
                case 109:
                    return new tcs.__impl.ConditionalElementExpressionImpl(workspace, mofId, immediatePackage, metaObject);
                case 110:
                    return new tcs.__impl.OperatorLiteralImpl(workspace, mofId, immediatePackage, metaObject);
                case 111:
                    return new tcs.__impl.PropertyPropertyArgImpl(workspace, mofId, immediatePackage, metaObject);
                case 112:
                    return new tcs.__impl.AndExpAtomExpImpl(workspace, mofId, immediatePackage, metaObject);
                case 113:
                    return new tcs.__impl.BlockBlockArgImpl(workspace, mofId, immediatePackage, metaObject);
                case 114:
                    return new tcs.__impl.OrPatternSimplePatternImpl(workspace, mofId, immediatePackage, metaObject);
                case 115:
                    return new tcs.__impl.MultiLineRuleMappingImpl(workspace, mofId, immediatePackage, metaObject);
                case 116:
                    return new tcs.__impl.LiteralRefLiteralImpl(workspace, mofId, immediatePackage, metaObject);
                case 117:
                    return new tcs.__impl.FunctionCallFunctionTemplateImpl(workspace, mofId, immediatePackage, metaObject);
                case 118:
                    return new tcs.__impl.QualifiedNamedElementModelElementImpl(workspace, mofId, immediatePackage, metaObject);
                case 119:
                    return new tcs.__impl.PropertyStrucFeatureImpl(workspace, mofId, immediatePackage, metaObject);
                case 120:
                    return new tcs.__impl.InjectorActionsBlockInjectorActionImpl(workspace, mofId, immediatePackage, metaObject);
                case 121:
                    return new tcs.__impl.PropertyPropertyReferenceImpl(workspace, mofId, immediatePackage, metaObject);
                case 122:
                    return new tcs.__impl.PropertyInitPropertyReferenceImpl(workspace, mofId, immediatePackage, metaObject);
                case 123:
                    return new tcs.__impl.AtomExpPropertyReferenceImpl(workspace, mofId, immediatePackage, metaObject);
                case 124:
                    return new tcs.__impl.OperatorTemplatePropertyReferenceImpl(workspace, mofId, immediatePackage, metaObject);
                case 125:
                    return new tcs.__impl.OperatorTemplatePropertyReference1Impl(workspace, mofId, immediatePackage, metaObject);
                case 126:
                    return new tcs.__impl.OperatorTemplatePropertyReference2Impl(workspace, mofId, immediatePackage, metaObject);
                case 127:
                    return new tcs.__impl.AlternativeSequenceImpl(workspace, mofId, immediatePackage, metaObject);
                case 128:
                    return new tcs.__impl.ConcreteSyntaxConcreteSyntaxImpl(workspace, mofId, immediatePackage, metaObject);
                case 129:
                    return new tcs.__impl.AsPargTemplateImpl(workspace, mofId, immediatePackage, metaObject);
                case 130:
                    return new tcs.__impl.SequenceElementTemplateImpl(workspace, mofId, immediatePackage, metaObject);
                case 131:
                    return new tcs.__impl.LikePropertyInitPredicateSemanticImpl(workspace, mofId, immediatePackage, metaObject);
                case 132:
                    return new tcs.__impl.PredicateSemanticTemplateImpl(workspace, mofId, immediatePackage, metaObject);
                case 133:
                    return new tcs.__impl.ContextTemplateContextTagsImpl(workspace, mofId, immediatePackage, metaObject);
                default:
                    throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException(name, null, "create___Extent()"); //$NON-NLS-1$
        }
        }
        catch(com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            throw ex;
        }
        catch(java.lang.Exception ex) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }        
    }

<<<<<<< HEAD
=======
    @SuppressWarnings("unchecked")
>>>>>>> e04eb9c33a214a29f23acac04720aff53a6082b7
    public java.lang.Class<tcs.TcsPackage> get___JmiInterface() {
        return tcs.TcsPackage.class;
    }
    
    protected void initialize() {
        if (___refPackages == null) {
            ___refPackages = new java.util.ArrayList<RefPackageAndName>(1);
            ___refPackagesByName = new java.util.HashMap<String, RefPackageAndName>();
<<<<<<< HEAD
            java.lang.String name = ""; //$NON-NLS-1$
=======
            @SuppressWarnings("unused")
            java.lang.String name = ""; //$NON-NLS-1$
            @SuppressWarnings("unused")
>>>>>>> e04eb9c33a214a29f23acac04720aff53a6082b7
            RefPackageAndName rpan = null;
            name = "textblockdefinition"; //$NON-NLS-1$
            rpan = new RefPackageAndName(name, "textblockdefinition.TextblockdefinitionPackage", true); //$NON-NLS-1$
            ___refPackages.add(rpan);
            ___refPackagesByName.put(name, rpan);
        }
  
        if (___refClasses == null) {
            ___refClasses = new java.util.ArrayList<RefClassAndName>(87);
            ___refClassesByName = new java.util.HashMap<String, RefClassAndName>();
            java.lang.String name = ""; //$NON-NLS-1$
            RefClassAndName rcan = null;
            name = "LocatedElement"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.LocatedElement"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "NamedElement"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.NamedElement"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "QualifiedNamedElement"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.QualifiedNamedElement"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "ConcreteSyntax"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.ConcreteSyntax"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Template"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.Template"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "FunctionTemplate"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.FunctionTemplate"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "ClassTemplate"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.ClassTemplate"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "PrimitiveTemplate"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.PrimitiveTemplate"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "OperatorTemplate"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.OperatorTemplate"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "EnumerationTemplate"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.EnumerationTemplate"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "EnumLiteralMapping"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.EnumLiteralMapping"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Literal"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.Literal"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Symbol"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.Symbol"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Keyword"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.Keyword"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "OperatorList"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.OperatorList"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Priority"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.Priority"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Operator"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.Operator"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Sequence"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.Sequence"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "SequenceElement"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.SequenceElement"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "LiteralRef"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.LiteralRef"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Property"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.Property"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "CustomSeparator"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.CustomSeparator"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Block"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.Block"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "ConditionalElement"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.ConditionalElement"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Alternative"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.Alternative"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "FunctionCall"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.FunctionCall"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "PropertyArg"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.PropertyArg"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "RefersToPArg"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.RefersToParg"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "LookInPArg"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.LookInParg"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "CreateInPArg"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.CreateInParg"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "SeparatorPArg"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.SeparatorParg"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "AutoCreatePArg"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.AutoCreateParg"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "ImportContextPArg"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.ImportContextParg"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "ForcedLowerPArg"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.ForcedLowerParg"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "CreateAsPArg"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.CreateAsParg"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "AsPArg"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.AsParg"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "ModePArg"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.ModeParg"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "BlockArg"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.BlockArg"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "NbNLBArg"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.NbNlbarg"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "IndentIncrBArg"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.IndentIncrBarg"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "StartNLBArg"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.StartNlbarg"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "StartNbNLBArg"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.StartNbNlbarg"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "EndNLBArg"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.EndNlbarg"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Expression"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.Expression"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "AndExp"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.AndExp"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "AtomExp"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.AtomExp"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "EqualsExp"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.EqualsExp"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "BooleanPropertyExp"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.BooleanPropertyExp"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "IsDefinedExp"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.IsDefinedExp"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "OneExp"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.OneExp"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Value"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.Value"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "StringVal"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.StringVal"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "IntegerVal"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.IntegerVal"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "NegativeIntegerVal"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.NegativeIntegerVal"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "EnumLiteralVal"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.EnumLiteralVal"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Token"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.Token"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "OrPattern"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.OrPattern"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "SimplePattern"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.SimplePattern"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "RulePattern"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.RulePattern"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Rule"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.Rule"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "WordRule"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.WordRule"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "EndOfLineRule"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.EndOfLineRule"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "MultiLineRule"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.MultiLineRule"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Mapping"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.Mapping"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "SimpleMapping"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.SimpleMapping"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "WildcardMapping"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.WildcardMapping"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "OctalMapping"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.OctalMapping"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "HexadecimalMapping"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.HexadecimalMapping"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "StringPattern"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.StringPattern"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "ClassPattern"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.ClassPattern"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "InstanceOfExp"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.InstanceOfExp"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "QueryPArg"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.QueryParg"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "InjectorActionsBlock"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.InjectorActionsBlock"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "InjectorAction"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.InjectorAction"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "PropertyInit"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.PropertyInit"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "PropertyReference"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.PropertyReference"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "ContextTags"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.ContextTags"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "PrimitivePropertyInit"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.PrimitivePropertyInit"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "LookupPropertyInit"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.LookupPropertyInit"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "ForcedUpperPArg"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.ForcedUpperParg"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "SequenceInAlternative"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.SequenceInAlternative"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "DisambiguatePArg"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.DisambiguateParg"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "FilterPArg"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.FilterParg"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "ForeachPredicatePropertyInit"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.ForeachPredicatePropertyInit"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "PartialPArg"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.PartialParg"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "PredicateSemantic"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.PredicateSemantic"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "ContextTemplate"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "tcs.ContextTemplate"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
        }
  
        if (___refAssociations == null) {
            ___refAssociations = new java.util.ArrayList<RefAssociationAndName>(46);
            ___refAssociationsByName = new java.util.HashMap<String, RefAssociationAndName>();
<<<<<<< HEAD
            java.lang.String name = ""; //$NON-NLS-1$
=======
            @SuppressWarnings("unused")
            java.lang.String name = ""; //$NON-NLS-1$
            @SuppressWarnings("unused")
>>>>>>> e04eb9c33a214a29f23acac04720aff53a6082b7
            RefAssociationAndName raan = null;
            name = "ConcreteSyntax_Template"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.ConcreteSyntaxTemplate"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "ConcreteSyntax_Keyword"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.ConcreteSyntaxKeyword"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "ConcreteSyntax_Token"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.ConcreteSyntaxToken"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "ConcreteSyntax_OperatorList"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.ConcreteSyntaxOperatorList"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "ConcreteSyntax_Symbol"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.ConcreteSyntaxSymbol"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "FunctionTemplate_Sequence"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.FunctionTemplateSequence"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "ClassTemplate_Sequence"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.ClassTemplateSequence"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "ClassTemplate_PrefixSequence"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.ClassTemplatePrefixSequence"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "ClassTemplate_OperatorList"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.ClassTemplateOperatorList"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "EnumerationTemplate_EnumLiteralMapping"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.EnumerationTemplateEnumLiteralMapping"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "EnumLiteralMapping_EnumLiteralVal"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.EnumLiteralMappingEnumLiteralVal"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "EnumLiteralMapping_LiteralRef"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.EnumLiteralMappingLiteralRef"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "OperatorTemplate_Sequence"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.OperatorTemplateSequence"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "OperatorTemplate_Operator"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.OperatorTemplateOperator"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "OperatorList_Priority"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.OperatorListPriority"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "Priority_Operator"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.PriorityOperator"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "elements"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.Elements"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "Block_Sequence"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.BlockSequence"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "elseSequence"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.ElseSequence"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "SeparatorPArg_Sequence"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.SeparatorPargSequence"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "thenSequence"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.ThenSequence"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "ConditionalElement_Expression"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.ConditionalElementExpression"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "Operator_Literal"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.OperatorLiteral"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "Property_PropertyArg"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.PropertyPropertyArg"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "AndExp_AtomExp"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.AndExpAtomExp"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "Block_BlockArg"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.BlockBlockArg"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "OrPattern_SimplePattern"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.OrPatternSimplePattern"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "MultiLineRule_Mapping"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.MultiLineRuleMapping"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "LiteralRef_Literal"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.LiteralRefLiteral"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "FunctionCall_FunctionTemplate"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.FunctionCallFunctionTemplate"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "QualifiedNamedElement_ModelElement"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.QualifiedNamedElementModelElement"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "Property_StrucFeature"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.PropertyStrucFeature"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "InjectorActionsBlock_InjectorAction"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.InjectorActionsBlockInjectorAction"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "Property_PropertyReference"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.PropertyPropertyReference"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "PropertyInit_PropertyReference"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.PropertyInitPropertyReference"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "AtomExp_PropertyReference"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.AtomExpPropertyReference"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "OperatorTemplate_PropertyReference"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.OperatorTemplatePropertyReference"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "OperatorTemplate_PropertyReference1"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.OperatorTemplatePropertyReference1"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "OperatorTemplate_PropertyReference2"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.OperatorTemplatePropertyReference2"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "Alternative_Sequence"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.AlternativeSequence"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "ConcreteSyntax_ConcreteSyntax"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.ConcreteSyntaxConcreteSyntax"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "AsPArg_Template"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.AsPargTemplate"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "SequenceElement_Template"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.SequenceElementTemplate"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "LikePropertyInit_PredicateSemantic"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.LikePropertyInitPredicateSemantic"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "PredicateSemantic_Template"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.PredicateSemanticTemplate"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "ContextTemplate_ContextTags"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "tcs.ContextTemplateContextTags"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
        }
    }
    
    @Override
    public com.sap.tc.moin.repository.spi.core.Wrapper<tcs.__impl.TcsPackageImpl> createWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, boolean synchronize) {
        return new tcs.__impl.TcsPackageWrapper(conn, this, synchronize);
    }

}