/**
 * Generated by the MOIN Generator Version 3.0
 **/

package tcs.__impl;

public class MultiLineRuleMappingWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<tcs.MultiLineRuleMapping> implements tcs.MultiLineRuleMapping,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The MultiLineRuleMapping wrapper
     */
    public MultiLineRuleMappingWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, tcs.__impl.MultiLineRuleMappingImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private tcs.__impl.MultiLineRuleMappingImpl getCastWrappedObject() {
        return (tcs.__impl.MultiLineRuleMappingImpl) getWrappedObject();
    }

    public tcs.MultiLineRuleMapping unwrap() {
        return (tcs.MultiLineRuleMapping) getWrappedObject();
    }
    
    public boolean exists(tcs.MultiLineRule _Multilinerule, tcs.Mapping _Mapping) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Multilinerule), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Mapping));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Multilinerule), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Mapping)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public tcs.MultiLineRule getMultilinerule(tcs.Mapping _Mapping) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (tcs.MultiLineRule) wrapResult(getCastWrappedObject().getMultilinerule(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Mapping)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (tcs.MultiLineRule) wrapResult(getCastWrappedObject().getMultilinerule(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Mapping))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getMapping(tcs.MultiLineRule _Multilinerule) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getMapping(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Multilinerule)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getMapping(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Multilinerule))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(tcs.MultiLineRule _Multilinerule, tcs.Mapping _Mapping) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Multilinerule), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Mapping));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Multilinerule), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Mapping)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(tcs.MultiLineRule _Multilinerule, tcs.Mapping _Mapping) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Multilinerule), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Mapping));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Multilinerule), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Mapping)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<tcs.MultiLineRuleMapping> get___JmiInterface() {
        return tcs.MultiLineRuleMapping.class;
    }

    protected String metaObjectToString() {
        return "tcs.MultiLineRuleMapping (Java Type)\nTCS.MultiLineRule_Mapping (MOF Type)"; //$NON-NLS-1$
    }    
}