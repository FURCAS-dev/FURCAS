/**
 * Generated by the MOIN Generator Version 3.0
 **/

package tcs.__impl;

public class ThenSequenceWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<tcs.ThenSequence> implements tcs.ThenSequence,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The ThenSequence wrapper
     */
    public ThenSequenceWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, tcs.__impl.ThenSequenceImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private tcs.__impl.ThenSequenceImpl getCastWrappedObject() {
        return (tcs.__impl.ThenSequenceImpl) getWrappedObject();
    }

    public tcs.ThenSequence unwrap() {
        return (tcs.ThenSequence) getWrappedObject();
    }
    
    public boolean exists(tcs.ConditionalElement _ThenContainer, tcs.Sequence _ThenSequence) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ThenContainer), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ThenSequence));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ThenContainer), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ThenSequence)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public tcs.ConditionalElement getThenContainer(tcs.Sequence _ThenSequence) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (tcs.ConditionalElement) wrapResult(getCastWrappedObject().getThenContainer(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ThenSequence)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (tcs.ConditionalElement) wrapResult(getCastWrappedObject().getThenContainer(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ThenSequence))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public tcs.Sequence getThenSequence(tcs.ConditionalElement _ThenContainer) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (tcs.Sequence) wrapResult(getCastWrappedObject().getThenSequence(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ThenContainer)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (tcs.Sequence) wrapResult(getCastWrappedObject().getThenSequence(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ThenContainer))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(tcs.ConditionalElement _ThenContainer, tcs.Sequence _ThenSequence) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ThenContainer), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ThenSequence));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ThenContainer), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ThenSequence)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(tcs.ConditionalElement _ThenContainer, tcs.Sequence _ThenSequence) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ThenContainer), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ThenSequence));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ThenContainer), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ThenSequence)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<tcs.ThenSequence> get___JmiInterface() {
        return tcs.ThenSequence.class;
    }

    protected String metaObjectToString() {
        return "tcs.ThenSequence (Java Type)\nTCS.thenSequence (MOF Type)"; //$NON-NLS-1$
    }    
}