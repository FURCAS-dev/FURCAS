/**
 * Generated by the MOIN Generator Version 3.0
 **/

package tcs.__impl;

public class PriorityOperatorWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<tcs.PriorityOperator> implements tcs.PriorityOperator,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The PriorityOperator wrapper
     */
    public PriorityOperatorWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, tcs.__impl.PriorityOperatorImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private tcs.__impl.PriorityOperatorImpl getCastWrappedObject() {
        return (tcs.__impl.PriorityOperatorImpl) getWrappedObject();
    }

    public tcs.PriorityOperator unwrap() {
        return (tcs.PriorityOperator) getWrappedObject();
    }
    
    public boolean exists(tcs.Priority _Priority, tcs.Operator _Operator) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Priority), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Operator));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Priority), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Operator)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public tcs.Priority getPriority(tcs.Operator _Operator) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (tcs.Priority) wrapResult(getCastWrappedObject().getPriority(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Operator)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (tcs.Priority) wrapResult(getCastWrappedObject().getPriority(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Operator))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.List getOperator(tcs.Priority _Priority) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.List) wrapResult(getCastWrappedObject().getOperator(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Priority)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.List) wrapResult(getCastWrappedObject().getOperator(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Priority))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(tcs.Priority _Priority, tcs.Operator _Operator) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Priority), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Operator));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Priority), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Operator)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(tcs.Priority _Priority, tcs.Operator _Operator) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Priority), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Operator));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Priority), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Operator)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<tcs.PriorityOperator> get___JmiInterface() {
        return tcs.PriorityOperator.class;
    }

    protected String metaObjectToString() {
        return "tcs.PriorityOperator (Java Type)\nTCS.Priority_Operator (MOF Type)"; //$NON-NLS-1$
    }    
}