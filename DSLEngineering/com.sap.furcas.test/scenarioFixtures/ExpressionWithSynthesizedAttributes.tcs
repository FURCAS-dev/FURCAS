/**
 * A simple expression language with a built-in calculator.
 * 
 * Introductory courses to attribute grammars often feature
 * the idea of an expression language that is evaluated
 * during parsing. The evaluation is performed bottom-up and
 * solely based on synthesized attributes.
 *
 * The same is realized here with the help of OCL and property-inits.
 * After parsing, the "calculatedValue" property holds the value of
 * an (sub)-expression
 */
syntax ExpressionWithSynthesizedAttributes {

-- BEGIN Primitive templates
		
	primitiveTemplate integerSymbol for EInt default using INT
	: value = "Double.valueOf(%token%)"
	;
	
	primitiveTemplate floatSymbol for EDouble default using FLOAT
	: value = "Double.valueOf(%token%)"
	;
		
-- END Primitive templates


-- BEGIN Class templates
		
	template ExpressionStatement main
		: expression
		;
		
	template Expression abstract operatored;
		
	template IntegerExpression
		: [[ value{as=integerSymbol} | value{as=floatSymbol} ]]  
		  {{calculatedValue=lookIn("OCL:self.value")}}
		;
		
	operatorTemplate UnaryExpression(operators=opMinus, source='expression')
		: {{calculatedValue=lookIn("OCL: -self.expression.calculatedValue")}}
		;
			
	operatorTemplate BinaryExpression(operators=opMul, source=leftSide, storeRightTo=rightSide)
		: {{calculatedValue=lookIn("OCL:self.leftSide.calculatedValue * self.rightSide.calculatedValue")}}
		;
		
	operatorTemplate BinaryExpression(operators=opDiv, source=leftSide, storeRightTo=rightSide)
		: {{calculatedValue=lookIn("OCL:self.leftSide.calculatedValue / self.rightSide.calculatedValue")}}
		;
	
	operatorTemplate BinaryExpression(operators=opPlus, source=leftSide, storeRightTo=rightSide)
		: {{calculatedValue=lookIn("OCL:self.leftSide.calculatedValue + self.rightSide.calculatedValue")}}
		;
		
	operatorTemplate BinaryExpression(operators=opSub, source=leftSide, storeRightTo=rightSide)
		: {{calculatedValue=lookIn("OCL:self.leftSide.calculatedValue - self.rightSide.calculatedValue")}}
		;	
		

-- BEGIN Special symbols
-- Possible modifications:
	symbols {
		lparen		= "(";
		rparen		= ")"	: leftNone, rightSpace;

		-- operator symbols
		minus		= "-"	: leftSpace, rightSpace;
		star		= "*"	: leftSpace, rightSpace;
		slash		= "/"	: leftSpace, rightSpace;
		plus		= "+"	: leftSpace, rightSpace;
	}
-- END Special symbols

-- BEGIN Operator table
-- Defines all operators with their priority, arity, and associativity.
-- All defined operators must be used in operator templates.
operators {
		priority 0, right {
			opMinus = minus, 1;
		}
		priority 1, left {
			opMul = star, 2;
			opDiv = slash, 2;
		}
		priority 2, left {
			opPlus = plus, 2;
			opSub = minus, 2;
		}
	}
-- END Operator table


-- BEGIN Lexer
-- Specifies the lexical entities.
-- Only needs modification when default lexer is not satisfactory.
-- Generally modified along with Primitive templates.

	omitted token COMMENT	: endOfLine(start = "//");


}
