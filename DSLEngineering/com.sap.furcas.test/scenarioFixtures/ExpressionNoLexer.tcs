syntax ExpressionNoLexer {

	-- variant of the Expression language having no lexer (default lexer to be used)

	primitiveTemplate identifier for ->String default using NAME:
		value = "unescapeString(%token%)";
		
	primitiveTemplate eintegerobject for ->Integer default using INT:
		value = "Integer.valueOf(%token%)";


	
	template ->ExpressionList main
	: ->elements{separator=","}
	;
	
	template ->Expression abstract operatored;
		
	operatorTemplate ->BinaryExpression(operators =
			opPlus, source = ->'left', storeRightTo = ->'right');
	
	
	template ->ValueExpression
		: ->value
		;
	
	
		

-- BEGIN Special symbols
-- Possible modifications:
	symbols {
--		lsquare		= "[";
--		rsquare		= "]"	: rightSpace;
--		excl		= "!";
		coma		= ","	: leftNone, rightSpace;
		lparen		= "(";
		rparen		= ")"	: leftNone, rightSpace;
		lcurly		= "{"	: leftSpace;
		rcurly		= "}"	: leftNone, rightSpace;
--		semi		= ";"	: leftNone, rightSpace;
--		colon		= ":"	: leftSpace, rightSpace;
--		pipe		= "|"	: leftSpace, rightSpace;
--		sharp		= "#"	: leftSpace;
--		qmark		= "?";
--		coloncolon	= "::"	: leftNone, rightNone;

		-- operator symbols
--		point		= "."	: leftNone;
--		rarrow		= "->"	: leftNone;
--		minus		= "-"	: leftSpace, rightSpace;
--		star		= "*"	: leftSpace, rightSpace;
--		slash		= "/"	: leftSpace, rightSpace;
		plus		= "+"	: leftSpace, rightSpace;
--		eq			= "="	: leftSpace, rightSpace;
--		gt			= ">"	: leftSpace, rightSpace;
--		lt			= "<"	: leftSpace, rightSpace;
--		ge			= ">="	: leftSpace, rightSpace;
--		le			= "<="	: leftSpace, rightSpace;
--		ne			= "<>"	: leftSpace, rightSpace;
--		larrow		= "<-"	: leftSpace, rightSpace;
	}
-- END Special symbols

-- BEGIN Operator table
-- Defines all operators with their priority, arity, and associativity.
-- All defined operators must be used in operator templates.

-- Specify operator table(s) here if necessary.
operators {
		priority 0 {
			opPlus = plus, 2;
		}
	}
-- END Operator table

token COMMENT	: endOfLine(start = "--");

}
