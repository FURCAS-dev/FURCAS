
-- !! This file does not reflect the latest coreMonet syntax, look for the one in /bootstrap instead



syntax TCSObsolete {

	primitiveTemplate identifier for ->String default using NAME:
		value = "unescapeString(%token%)";

	primitiveTemplate identifierOrKeyword for ->String using NAME orKeyword:
		value = "unescapeString(%token%)";

	primitiveTemplate stringSymbol for ->String using STRING:
		value = "unescapeString(%token%)",
		serializer="'\\\"' + %value%.toCString() + '\\\"'";

	primitiveTemplate integerSymbol for ->Integer default using INT:
		value = "Integer.valueOf(%token%)";

	primitiveTemplate floatSymbol for ->Double default using FLOAT:
		value = "Double.valueOf(%token%)";

	template ->ConcreteSyntax main context
		:	"syntax" ->name (isDefined(->k) ?  "(" "k" "=" ->k ")") "{" [
				->templates
				(isDefined(->keywords) ? "keywords" "{" [ ->keywords ] "}")
				(isDefined(->symbols) ? "symbols" "{" [ ->symbols ] "}")
				->operatorLists
				->tokens
				(isDefined(->lexer) ? "lexer" "=" ->lexer{as = stringSymbol} ";")
			] {nbNL = 2} "}"
		;

-- @begin Templates
	template ->Template abstract;

	function reference(->QualifiedNamedElement)
		: [["->" | ]] ->names{separator="::"}
		;

	template ->PrimitiveTemplate
		:	"primitiveTemplate" ->templateName "for" $reference 
				(->isDefault ? "default")
				"using" ->tokenName
				(->orKeyword ? "orKeyword")
			":"
				"value" "=" ->value{as = stringSymbol}
				(isDefined(->serializer) ?
					"," "serializer" "=" ->serializer{as = stringSymbol}
				)
			";"
		;

	template ->EnumerationTemplate
		:	"enumerationTemplate" $reference (->automatic ? "auto")
			(isDefined(->mappings) ?
					[ ":" [
						->mappings{separator = ","}
					] {startNL = false} ";" ]
				:
					";"
			)
		;

	template ->EnumLiteralMapping
		:	->literal "=" ->element
		;

	template ->ClassTemplate
		:	"template" $reference
			(isDefined(->mode) ? "#" ->mode)
			(isDefined(->disambiguate) ? "(" "disambiguate" "=" ->disambiguate{as = stringSymbol} ")")
			(->isMulti ? "multi")
			(->isMain ? "main")
			(->isAbstract ? (->isDeep ? "deep") "abstract")
			(->isOperatored ? "operatored" (isDefined(->operatorList) ? "(" ->operatorList{refersTo = name} ")"))
			(->isContext ? "context")
			(->isAddToContext ? "addToContext")
			(->isNonPrimary ? "nonPrimary")
			(isDefined(->prefixSequence) ? "prefix" [ ":" [ ->prefixSequence ] {startNL = false} ])
			(isDefined(->templateSequence) ? [ ":" [ ->templateSequence ] {startNL = false} ";" ] : ";")
		;

	template ->OperatorTemplate
		:	"operatorTemplate" $reference "("
				"operators" "=" ->operators{refersTo = name}
				"," "source" "=" [["->" | ]] ->source
				(isDefined(->storeOpTo) ? "," "storeOpTo" "=" [["->" | ]] ->storeOpTo)
				(isDefined(->storeRightTo) ? "," "storeRightTo" "=" [["->" | ]] ->storeRightTo)
				(isDefined(->disambiguate) ? "," "disambiguate" "=" ->disambiguate{as = stringSymbol})
				(isDefined(->disambiguateV3) ? "," "disambiguateV3" "=" ->disambiguateV3{as = stringSymbol})
			")"
			(->isContext ? "context")
			(isDefined(->otSequence) ? [ ":" [ ->otSequence ] {startNL = false} ";" ] : ";")
		;

	template ->FunctionTemplate addToContext
		:	"function" ->functionName "(" $reference ")"
				[ ":"
					[ ->functionSequence ] {startNL = false}
				";" ]
		;
-- @end Templates

	template ->Sequence
		:	->elements
		;

-- @begin Sequence Elements
	template ->SequenceElement abstract;

	template ->LiteralRef
		:
-- COMMENT FOR EXTRACTOR
--			[[
				->referredLiteral{refersTo = value, lookIn = #all, as = stringSymbol, autoCreate = ifmissing, createAs = Keyword}
--			|
--				"@" ->referredLiteral{refersTo = name}
--			]]
		;

	template ->Property
		:	[["->" | ]] ->name{as = identifierOrKeyword} (isDefined(->propertyArgs) ? "{" ->propertyArgs{separator = ","} "}")
		;

	template ->CustomSeparator
		:	"<" ->name ">"
		;

	template ->Block
		:	"[" ->blockSequence "]" (isDefined(->blockArgs) ? "{" ->blockArgs{separator = ","} "}")
		;

	template ->ConditionalElement
		:	"(" ->condition "?" ->thenSequence (isDefined(->elseSequence) ? ":" ->elseSequence) ")"
		;

	template ->PropertyInit
		:	"{{" [["->" | ]] ->name "=" ->value "}}"
		;

	template ->Alternative
		:	"[[" ->sequences{separator = "|"} "]]" (->isMulti ? "*")
		;

	template ->FunctionCall
		:	"$" ->calledFunction{refersTo = functionName}
		;
-- @end Sequence Elements


-- @begin Property Arguments
	template ->PropertyArg abstract;

	template ->RefersToPArg
		:	"refersTo" "=" ->propertyName{as = identifierOrKeyword}
		;

	template ->LookInPArg
		:	"lookIn" "=" (->propertyName = "#all" ? "#" "all" : ->propertyName{as = identifierOrKeyword, separator = "."})
		;

	template ->CreateInPArg
		:	"createIn" "=" ->propertyName{as = identifierOrKeyword, separator = "."}
		;

	template ->AsPArg
		:	"as" "=" ->value
		;

	template ->RefersToKeyPArg
		:	"refersToKey" "=" (->value ? "true" : "false")
		;

	template ->SeparatorPArg
		:	"separator" "=" ->separatorSequence
		;

	template ->AutoCreatePArg
		:	"autoCreate" "=" ->value
		;

	enumerationTemplate ->AutoCreateKind
		:	#always		= "always",
			#ifmissing	= "ifmissing",
			#never		= "never"
		;

	template ->ImportContextPArg
		:	"importContext"
		;

	template ->ForcedLowerPArg
		:	"forcedLower" "=" ->value
		;

	template ->CreateAsPArg
		:	"createAs" "=" ->name{as = identifierOrKeyword}
		;

	template ->ModePArg
		:	"mode" "=" ->mode{as = identifierOrKeyword}
		;
-- @end Property Arguments


-- @begin Block Arguments
	template ->BlockArg abstract;

	template ->NbNLBArg
		:	"nbNL" "=" ->value
		;

	template ->IndentIncrBArg
		:	"indentIncr" "=" ->value
		;

	template ->StartNLBArg
		:	"startNL" "=" (->value ? "true" : "false")
		;

	template ->StartNbNLBArg
		:	"startNbNL" "=" ->value
		;

	template ->EndNLBArg
		:	"endNL" "=" (->value ? "true" : "false")
		;
-- @end Block Arguments


-- @begin Literals
--	template ->Literal abstract;

	template ->Symbol addToContext
		:	->name "=" ->value{as = stringSymbol} (isDefined(->spaces) ? ":" ->spaces{separator = ","}) ";"
		;

	enumerationTemplate ->SpaceKind
		:	#leftSpace	=	"leftSpace",
			#leftNone	=	"leftNone",
			#rightSpace	=	"rightSpace",
			#rightNone	=	"rightNone"
		;

	template ->Keyword addToContext
		:	->name "=" ->value{as = stringSymbol} ";"
		;
-- @end Literals

-- @begin Operators
	template ->OperatorList addToContext
		:	"operators" (isDefined(->name) ? ->name) "{" [
				->priorities
			] "}"
		;

	template ->Priority
		:	"priority" ->value
			(->associativity = #left ?
					-- nothing
				:
					"," ->associativity
			)
			"{" [
				->operators
			] "}"
		;
		
	template ->Operator addToContext
		:	(->isPostfix ? "postfix") ->name "="
			(isDefined(->literal) ? [[
				->literal{refersTo = name}
			|
				->literal{refersTo = value, lookIn = #all, as = stringSymbol, autoCreate = ifmissing, createAs = Keyword}
			]])
			"," ->arity ";"
		;

	enumerationTemplate ->Associativity
		:	#left		= "left",
			#right		= "right"
		;
-- @end Operators

-- @begin Expressions
	template ->Expression abstract;

	template ->AndExp
		:	->expressions{separator = "and"}
		;

	template ->AtomExp abstract;

	template ->EqualsExp
		:	[["->" | ]] ->propertyName{as = identifierOrKeyword} "=" ->value
		;

	template ->BooleanPropertyExp
		:	[["->" | ]] ->propertyName{as = identifierOrKeyword}
		;

	template ->IsDefinedExp
		:	"isDefined" "(" [["->" | ]] ->propertyName{as = identifierOrKeyword} ")"
		;

	template ->OneExp
		:	"one" "(" [["->" | ]] ->propertyName{as = identifierOrKeyword} ")"
		;
--@end Expressions

-- @begin Values
	template ->Value abstract;

	template ->StringVal
		:	->symbol{as = stringSymbol}
		;
	
	template ->IntegerVal
		:	->symbol
		;
	
	template ->NegativeIntegerVal
		:	"-" ->symbol
		;

	template ->EnumLiteralVal
		:	"#" ->name{as = identifierOrKeyword}
		;
-- @end Values


-- @begin Tokens
	template ->Token
		:	"token" ->name ":" ->pattern ";"
		;

	template ->OrPattern
		:	->simplePatterns{separator = "|"}
		;

-- @begin SimplePatterns
	template ->SimplePattern abstract;

	template ->RulePattern
--		:	->name "(" arguments{separator = ","} ")"
		:	->rule
		;

-- @begin Rules
	template ->Rule abstract;

	template ->WordRule
		:	"word" "("
				"start" "=" ->start ","
				"part" "=" ->part
				(isDefined(->end) ?
					"," "end" "=" ->end
				)
				(isDefined(->words) ?
					"," "words" "=" "(" ->words{separator = ","} ")"
				)
			")"
		;

	template ->Word
		:	->name{as = stringSymbol} ":" ->token
		;

	template ->EndOfLineRule
		:	"endOfLine" "("
				"start" "=" (->dropStart ? "drop") ->start
			")"
		;

	template ->MultiLineRule
		:	"multiLine" "("
				"start" "=" (->dropStart ? "drop") ->start ","
				"end" "=" (->dropEnd ? "drop") ->end
				(isDefined(->esc) ?
					"," "esc" "=" ->esc
					(isDefined(->escMappings) ?
						"," "(" ->escMappings{separator = ","} ")"
					)
				)
			")"
		;
	
	template ->Mapping abstract;
	
	template ->SimpleMapping
		:	->key [["->" | ]] ->value
		;
		
	template ->WildcardMapping
		:	"." [["->" | ]] "."
		;
		
	template ->OctalMapping
		:	"octal"
		;
		
	template ->HexadecimalMapping
		:	"hex"
		;
-- @end Rules

--	template ->RuleArgument
--		:	->name "=" ->value
--		;

	template ->StringPattern
		:	->name{as = stringSymbol}
		;

	template ->ClassPattern
		:	"[" ->name "]"
		;
-- @end SimplePatterns
-- @end Tokens
	
	symbols {
		lsquare		= "[";
		rsquare		= "]";
		dlsquare	= "[[";
		drsquare	= "]]";
		excl		= "!";
		coma		= ",";
		lparen		= "(";
		rparen		= ")";
		lcurly		= "{";
		rcurly		= "}";
		dlcurly		= "{{";
		drcurly		= "}}";
		semi		= ";";
		colon		= ":";
		dlcolon		= "::";		
		pipe		= "|";
		sharp		= "#";
		qmark		= "?";
		dollar		= "$";
		arobas		= "@";

		-- operator symbols
		point		= ".";
		rarrow		= "->";
		minus		= "-";
		star		= "*";
		slash		= "/";
		plus		= "+";
		eq		= "=";
		gt		= ">";
		lt		= "<";
		ge		= ">=";
		le		= "<=";
		ne		= "<>";
		larrow		= "<-";
	}

	token COMMENT	: endOfLine(start = "--");

	lexer = "
%options testLiterals = false;

NL
	:	(	'\\r' '\\n'
		|	'\\n' '\\r'	//Improbable
		|	'\\r'
		|	'\\n'
		)
	{newline();}
	;

WS
	:	(	' '
		|	'\\t'
		)
	;

%protected
DIGIT
	:	'0'..'9'
	;

%protected
ALPHA
	:	'a'..'z'
	|	'A'..'Z'
	|	'_'
	//For Unicode compatibility (from 0000 to 00ff)
	|	'\\u00C0' .. '\\u00D6'
	|	'\\u00D8' .. '\\u00F6'
	|	'\\u00F8' .. '\\u00FF'
	;
	



%protected
SNAME
	:	(ALPHA) (ALPHA | DIGIT)* 
;


NAME
	:	(   
		SNAME
		|	'\\''!
			(	ESC
			|	'\\n' {newline();}
			|	~('\\\\'|'\\''|'\\n')
			)*
			'\\''!
		{setText(unescapeString(getText(), 1));}
		)
	;
	

INT
	:	(DIGIT)+
	;

	FLOAT	:	DIGIT+ '.' DIGIT*	;

%protected
ESC
	:	'\\\\'!
		(	'n' 
		|	'r' 
		|	't' 
		|	'b' 
		|	'f' 
		|	'\"' 
		|	'\\'' 
		|	'\\\\' 
		|	(
				('0'..'3')
				(
				:	('0'..'7')
					(
					:	'0'..'7'
					)?
				)?
			|	('4'..'7')
				(
				:	('0'..'7')
				)?
			)
				{
				}
		)
	;

STRING
	:	'\"'!
		(	ESC
		|	'\\n' {newline();}
		|	~('\\\\'|'\\\"'|'\\n')
		)*
		'\"'!
		{setText(unescapeString(getText(), 1));}

	;

	";

}
