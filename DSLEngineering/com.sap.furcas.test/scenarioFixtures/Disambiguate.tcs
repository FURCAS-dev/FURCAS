syntax Disambiguate {

-- BEGIN Primitive templates
-- Specifies representation of primitive types.
-- Only needs modification when default lexer is not satisfactory.
-- Generally modified along with the lexer.

	primitiveTemplate identifier for ->Disambiguate::String default using NAME:
		value = "unescapeString(%token%)";

-- END Primitive templates

-- BEGIN Class templates
-- Specifies representation of classes.
-- This is the main section to work on.
	
	template ->Statements main
	: ->statements{separator=";"}
	;
	
	template ->ObjectBasedExpression abstract operatored;
		
	operatorTemplate ->MethodCallExpression(operators =
			opDot, source = ->'source',
			disambiguateV3="identifier LPAREN")
	:	->methodName "(" ->parameter ")"
	;
	
	operatorTemplate ->AssociationEndNavigationExpression(operators =
			opDot, source = ->'source')
	:	->associationEndName
	;
	
	template ->This 
	:
		"this"
	;
	
		

-- BEGIN Special symbols
-- Possible modifications:
	symbols {
		semi		= ";"	: leftNone, rightSpace;
		lparen		= "(";
		rparen		= ")";

		-- operator symbols
		dot		= "."	: leftSpace, rightSpace;

	}
-- END Special symbols

-- BEGIN Operator table
-- Defines all operators with their priority, arity, and associativity.
-- All defined operators must be used in operator templates.

-- Specify operator table(s) here if necessary.
operators {
		priority 0 {
			opDot = dot, 2;
		}
	}
-- END Operator table


-- BEGIN Lexer
-- Specifies the lexical entities.
-- Only needs modification when default lexer is not satisfactory.
-- Generally modified along with Primitive templates.
	omitted token COMMENT	: endOfLine(start = "--");

	lexer = "
%options testLiterals = false;

NL
	:	(	'\\r' '\\n'
		|	'\\n' '\\r'	//Improbable
		|	'\\r'
		|	'\\n'
		)
	{newline();$channel=HIDDEN;}
	;

WS
	:	(	' '
		|	'\\t'
		){$channel=HIDDEN;}
	;

%protected
DIGIT
	:	'0'..'9'
	;

INT
	:	(DIGIT)+
	;

%protected
ALPHA
	:	'a'..'z'
	|	'A'..'Z'
	|	'_'
	//For Unicode compatibility (from 0000 to 00ff)
	|	'\\u00C0' .. '\\u00D6'
	|	'\\u00D8' .. '\\u00F6'
	|	'\\u00F8' .. '\\u00FF'
	;

%protected
SNAME
	:	(ALPHA) (ALPHA | DIGIT)*
;

NAME
	:	(
			SNAME
		|	'\"'!
			(	ESC
			|	'\\n' {newline();}
			|	~('\\\\'|'\\\"'|'\\n')
			)*
			'\"'!
		)
	;

%protected
ESC
	:	'\\\\'!
		(	'n' 
		|	'r' 
		|	't' 
		|	'b' 
		|	'f' 
		|	'\"' 
		|	'\\'' 
		|	'\\\\' 
		|	(
				('0'..'3')
				(
				:	('0'..'7')
					(
					:	'0'..'7'
					)?
				)?
			|	('4'..'7')
				(
				:	('0'..'7')
				)?
			)
				{
				}
		)
	;

STRING
	:	'\\''!
		(	ESC
		|	'\\n' {newline();}
		|	~('\\\\'|'\\''|'\\n')
		)*
		'\\''!
			{setText(unescapeString(getText(), 1));}
	;

	";
-- END Lexer

}
