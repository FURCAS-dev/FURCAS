/**
 * Generated by the MOIN Generator Version 3.0
 **/

package bibtex.__impl;

public class LitertureDbEntryWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<bibtex.LitertureDbEntry> implements bibtex.LitertureDbEntry,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The LitertureDbEntry wrapper
     */
    public LitertureDbEntryWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, bibtex.__impl.LitertureDbEntryImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private bibtex.__impl.LitertureDbEntryImpl getCastWrappedObject() {
        return (bibtex.__impl.LitertureDbEntryImpl) getWrappedObject();
    }

    public bibtex.LitertureDbEntry unwrap() {
        return (bibtex.LitertureDbEntry) getWrappedObject();
    }
    
    public boolean exists(bibtex.LiteratureDb _Literturedb, bibtex.Entry _Entries) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Literturedb), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Entries));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Literturedb), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Entries)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public bibtex.LiteratureDb getLiterturedb(bibtex.Entry _Entries) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (bibtex.LiteratureDb) wrapResult(getCastWrappedObject().getLiterturedb(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Entries)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (bibtex.LiteratureDb) wrapResult(getCastWrappedObject().getLiterturedb(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Entries))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getEntries(bibtex.LiteratureDb _Literturedb) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getEntries(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Literturedb)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getEntries(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Literturedb))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(bibtex.LiteratureDb _Literturedb, bibtex.Entry _Entries) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Literturedb), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Entries));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Literturedb), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Entries)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(bibtex.LiteratureDb _Literturedb, bibtex.Entry _Entries) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Literturedb), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Entries));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Literturedb), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Entries)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<bibtex.LitertureDbEntry> get___JmiInterface() {
        return bibtex.LitertureDbEntry.class;
    }

    protected String metaObjectToString() {
        return "bibtex.LitertureDbEntry (Java Type)\nBibtex.LitertureDb_Entry (MOF Type)"; //$NON-NLS-1$
    }    
}