/*
 * generated by Xtext
 */
package org.eclipse.ocl.examples.xtext.oclstdlib.scoping;

import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.ocl.examples.xtext.base.baseCST.ElementCS;
import org.eclipse.ocl.examples.xtext.base.scope.AbstractScopeAdapter;
import org.eclipse.ocl.examples.xtext.base.scoping.BaseScopeProvider;
import org.eclipse.ocl.examples.xtext.base.scoping.DefaultScopeAdapter;
import org.eclipse.ocl.examples.xtext.oclstdlib.oclstdlibCST.LibClassCS;
import org.eclipse.ocl.examples.xtext.oclstdlib.oclstdlibCST.LibDocumentCS;
import org.eclipse.ocl.examples.xtext.oclstdlib.oclstdlibCST.LibIterationCS;
import org.eclipse.ocl.examples.xtext.oclstdlib.oclstdlibCST.LibOperationCS;
import org.eclipse.ocl.examples.xtext.oclstdlib.oclstdlibCST.LibPackageCS;
import org.eclipse.ocl.examples.xtext.oclstdlib.oclstdlibCST.OCLstdlibCSTPackage;
import org.eclipse.ocl.examples.xtext.oclstdlib.oclstdlibCST.util.OCLstdlibCSTSwitch;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping
 * on how and when to use it 
 *
 */
public class OCLstdlibScopeProvider extends BaseScopeProvider {
	static {
		OCLstdlibScopeAdapter.addSwitch(OCLstdlibCSTPackage.eINSTANCE, new OCLstdlibScopeSwitch());
	}
	
	public static class OCLstdlibScopeSwitch 
		extends OCLstdlibCSTSwitch<AbstractScopeAdapter<? extends EObject>>
		implements OCLstdlibScopeAdapter.ISwitch
	{

		@Override
		public AbstractScopeAdapter<? extends EObject> caseLibClassCS(LibClassCS eObject) {
			return new LibClassScopeAdapter(eObject);
		}

		@Override
		public AbstractScopeAdapter<? extends EObject> caseLibDocumentCS(LibDocumentCS eObject) {
			return new LibDocumentScopeAdapter(eObject);
		}

		@Override
		public AbstractScopeAdapter<? extends EObject> caseLibIterationCS(LibIterationCS eObject) {
			return new LibOperationScopeAdapter(eObject);
		}

		@Override
		public AbstractScopeAdapter<? extends EObject> caseLibOperationCS(LibOperationCS eObject) {
			return new LibOperationScopeAdapter(eObject);
		}

		@Override
		public AbstractScopeAdapter<? extends EObject> caseLibPackageCS(LibPackageCS eObject) {
			return new LibPackageScopeAdapter(eObject);
		}

		@Override
		public AbstractScopeAdapter<?> defaultCase(EObject eObject) {
			return new DefaultScopeAdapter((ElementCS) eObject);
		}

		public AbstractScopeAdapter<?> doInPackageSwitch(EObject eObject) {
			return doSwitch(eObject.eClass(), eObject);
		}
	}

}
