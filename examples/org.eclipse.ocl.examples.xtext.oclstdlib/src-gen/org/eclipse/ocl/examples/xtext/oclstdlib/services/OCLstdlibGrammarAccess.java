/*
* generated by Xtext
*/

package org.eclipse.ocl.examples.xtext.oclstdlib.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class OCLstdlibGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class LibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Library");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLibraryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsLibImportCSParserRuleCall_2_0 = (RuleCall)cImportsAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPackagesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPackagesLibPackageCSParserRuleCall_4_0 = (RuleCall)cPackagesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////generate OCLstdlib "http://www.eclipse.org/ocl/examples/xtext/oclstdlib/OCLstdlibCST"
		//
		//Library returns LibDocumentCS:
		//	"library" name=Identifier imports+=LibImportCS* "{" packages+=LibPackageCS* "}";
		public ParserRule getRule() { return rule; }

		//"library" name=Identifier imports+=LibImportCS* "{" packages+=LibPackageCS* "}"
		public Group getGroup() { return cGroup; }

		//"library"
		public Keyword getLibraryKeyword_0() { return cLibraryKeyword_0; }

		//name=Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }

		//imports+=LibImportCS*
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }

		//LibImportCS
		public RuleCall getImportsLibImportCSParserRuleCall_2_0() { return cImportsLibImportCSParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//packages+=LibPackageCS*
		public Assignment getPackagesAssignment_4() { return cPackagesAssignment_4; }

		//LibPackageCS
		public RuleCall getPackagesLibPackageCSParserRuleCall_4_0() { return cPackagesLibPackageCSParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class LOWERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LOWER");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//LOWER returns ecore::EInt:
		//	INT;
		public ParserRule getRule() { return rule; }

		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}

	public class UPPERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UPPER");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//UPPER returns ecore::EInt:
		//	INT | "*";
		public ParserRule getRule() { return rule; }

		//INT | "*"
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//"*"
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}

	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Identifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRestrictedKeywordsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Identifier returns ecore::EString:
		//	ID | RestrictedKeywords;
		public ParserRule getRule() { return rule; }

		//ID | RestrictedKeywords
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//RestrictedKeywords
		public RuleCall getRestrictedKeywordsParserRuleCall_1() { return cRestrictedKeywordsParserRuleCall_1; }
	}

	public class RestrictedKeywordsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RestrictedKeywords");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cConformsToKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExtendsKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cImportKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cIterationKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cLibraryKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cOperationKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cPackageKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cPropertyKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cSuperKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cTypeKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		
		//RestrictedKeywords returns ecore::EString:
		//	"conformsTo" | "extends" | "import" | "iteration" | "library" | "operation" | "package" | "property" | "super" |
		//	"type";
		public ParserRule getRule() { return rule; }

		//"conformsTo" | "extends" | "import" | "iteration" | "library" | "operation" | "package" | "property" | "super" | "type"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"conformsTo"
		public Keyword getConformsToKeyword_0() { return cConformsToKeyword_0; }

		//"extends"
		public Keyword getExtendsKeyword_1() { return cExtendsKeyword_1; }

		//"import"
		public Keyword getImportKeyword_2() { return cImportKeyword_2; }

		//"iteration"
		public Keyword getIterationKeyword_3() { return cIterationKeyword_3; }

		//"library"
		public Keyword getLibraryKeyword_4() { return cLibraryKeyword_4; }

		//"operation"
		public Keyword getOperationKeyword_5() { return cOperationKeyword_5; }

		//"package"
		public Keyword getPackageKeyword_6() { return cPackageKeyword_6; }

		//"property"
		public Keyword getPropertyKeyword_7() { return cPropertyKeyword_7; }

		//"super"
		public Keyword getSuperKeyword_8() { return cSuperKeyword_8; }

		//"type"
		public Keyword getTypeKeyword_9() { return cTypeKeyword_9; }
	}

	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Name");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDOUBLE_QUOTED_STRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Name returns ecore::EString:
		//	Identifier | DOUBLE_QUOTED_STRING;
		public ParserRule getRule() { return rule; }

		//Identifier | DOUBLE_QUOTED_STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//Identifier
		public RuleCall getIdentifierParserRuleCall_0() { return cIdentifierParserRuleCall_0; }

		//DOUBLE_QUOTED_STRING
		public RuleCall getDOUBLE_QUOTED_STRINGTerminalRuleCall_1() { return cDOUBLE_QUOTED_STRINGTerminalRuleCall_1; }
	}

	public class LibImportCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LibImportCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIdentifierParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNamespaceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cNamespaceNamespaceCSCrossReference_2_0 = (CrossReference)cNamespaceAssignment_2.eContents().get(0);
		private final RuleCall cNamespaceNamespaceCSSINGLE_QUOTED_STRINGTerminalRuleCall_2_0_1 = (RuleCall)cNamespaceNamespaceCSCrossReference_2_0.eContents().get(1);
		
		//LibImportCS returns base::ImportCS:
		//	"import" (name=Identifier ":")? namespace=[base::NamespaceCS|SINGLE_QUOTED_STRING];
		public ParserRule getRule() { return rule; }

		//"import" (name=Identifier ":")? namespace=[base::NamespaceCS|SINGLE_QUOTED_STRING]
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//(name=Identifier ":")?
		public Group getGroup_1() { return cGroup_1; }

		//name=Identifier
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0_0() { return cNameIdentifierParserRuleCall_1_0_0; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//namespace=[base::NamespaceCS|SINGLE_QUOTED_STRING]
		public Assignment getNamespaceAssignment_2() { return cNamespaceAssignment_2; }

		//[base::NamespaceCS|SINGLE_QUOTED_STRING]
		public CrossReference getNamespaceNamespaceCSCrossReference_2_0() { return cNamespaceNamespaceCSCrossReference_2_0; }

		//SINGLE_QUOTED_STRING
		public RuleCall getNamespaceNamespaceCSSINGLE_QUOTED_STRINGTerminalRuleCall_2_0_1() { return cNamespaceNamespaceCSSINGLE_QUOTED_STRINGTerminalRuleCall_2_0_1; }
	}

	public class LibClassCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LibClassCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeParametersLibTypeParameterCSParserRuleCall_2_1_0 = (RuleCall)cTypeParametersAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cTypeParametersAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cTypeParametersLibTypeParameterCSParserRuleCall_2_2_1_0 = (RuleCall)cTypeParametersAssignment_2_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cConformsToKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cConformsToAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cConformsToLibTypedRefCSParserRuleCall_3_1_0 = (RuleCall)cConformsToAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cConformsToAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cConformsToLibTypedRefCSParserRuleCall_3_2_1_0 = (RuleCall)cConformsToAssignment_3_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cIterationsAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cIterationsLibIterationCSParserRuleCall_5_0_0 = (RuleCall)cIterationsAssignment_5_0.eContents().get(0);
		private final Assignment cOperationsAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cOperationsLibOperationCSParserRuleCall_5_1_0 = (RuleCall)cOperationsAssignment_5_1.eContents().get(0);
		private final Assignment cStructuralFeaturesAssignment_5_2 = (Assignment)cAlternatives_5.eContents().get(2);
		private final RuleCall cStructuralFeaturesLibPropertyCSParserRuleCall_5_2_0 = (RuleCall)cStructuralFeaturesAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//LibClassCS:
		//	"type" name=Identifier ("<" typeParameters+=LibTypeParameterCS ("," typeParameters+=LibTypeParameterCS)* ">")?
		//	("conformsTo" conformsTo+=LibTypedRefCS ("," conformsTo+=LibTypedRefCS)*)? "{" (iterations+=LibIterationCS |
		//	operations+=LibOperationCS | structuralFeatures+=LibPropertyCS)* "}";
		public ParserRule getRule() { return rule; }

		//"type" name=Identifier ("<" typeParameters+=LibTypeParameterCS ("," typeParameters+=LibTypeParameterCS)* ">")?
		//("conformsTo" conformsTo+=LibTypedRefCS ("," conformsTo+=LibTypedRefCS)*)? "{" (iterations+=LibIterationCS |
		//operations+=LibOperationCS | structuralFeatures+=LibPropertyCS)* "}"
		public Group getGroup() { return cGroup; }

		//"type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//name=Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }

		//("<" typeParameters+=LibTypeParameterCS ("," typeParameters+=LibTypeParameterCS)* ">")?
		public Group getGroup_2() { return cGroup_2; }

		//"<"
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }

		//typeParameters+=LibTypeParameterCS
		public Assignment getTypeParametersAssignment_2_1() { return cTypeParametersAssignment_2_1; }

		//LibTypeParameterCS
		public RuleCall getTypeParametersLibTypeParameterCSParserRuleCall_2_1_0() { return cTypeParametersLibTypeParameterCSParserRuleCall_2_1_0; }

		//("," typeParameters+=LibTypeParameterCS)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//typeParameters+=LibTypeParameterCS
		public Assignment getTypeParametersAssignment_2_2_1() { return cTypeParametersAssignment_2_2_1; }

		//LibTypeParameterCS
		public RuleCall getTypeParametersLibTypeParameterCSParserRuleCall_2_2_1_0() { return cTypeParametersLibTypeParameterCSParserRuleCall_2_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_3() { return cGreaterThanSignKeyword_2_3; }

		//("conformsTo" conformsTo+=LibTypedRefCS ("," conformsTo+=LibTypedRefCS)*)?
		public Group getGroup_3() { return cGroup_3; }

		//"conformsTo"
		public Keyword getConformsToKeyword_3_0() { return cConformsToKeyword_3_0; }

		//conformsTo+=LibTypedRefCS
		public Assignment getConformsToAssignment_3_1() { return cConformsToAssignment_3_1; }

		//LibTypedRefCS
		public RuleCall getConformsToLibTypedRefCSParserRuleCall_3_1_0() { return cConformsToLibTypedRefCSParserRuleCall_3_1_0; }

		//("," conformsTo+=LibTypedRefCS)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//conformsTo+=LibTypedRefCS
		public Assignment getConformsToAssignment_3_2_1() { return cConformsToAssignment_3_2_1; }

		//LibTypedRefCS
		public RuleCall getConformsToLibTypedRefCSParserRuleCall_3_2_1_0() { return cConformsToLibTypedRefCSParserRuleCall_3_2_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//(iterations+=LibIterationCS | operations+=LibOperationCS | structuralFeatures+=LibPropertyCS)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//iterations+=LibIterationCS
		public Assignment getIterationsAssignment_5_0() { return cIterationsAssignment_5_0; }

		//LibIterationCS
		public RuleCall getIterationsLibIterationCSParserRuleCall_5_0_0() { return cIterationsLibIterationCSParserRuleCall_5_0_0; }

		//operations+=LibOperationCS
		public Assignment getOperationsAssignment_5_1() { return cOperationsAssignment_5_1; }

		//LibOperationCS
		public RuleCall getOperationsLibOperationCSParserRuleCall_5_1_0() { return cOperationsLibOperationCSParserRuleCall_5_1_0; }

		//structuralFeatures+=LibPropertyCS
		public Assignment getStructuralFeaturesAssignment_5_2() { return cStructuralFeaturesAssignment_5_2; }

		//LibPropertyCS
		public RuleCall getStructuralFeaturesLibPropertyCSParserRuleCall_5_2_0() { return cStructuralFeaturesLibPropertyCSParserRuleCall_5_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class LibClassifierCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LibClassifierCS");
		private final RuleCall cLibClassCSParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//LibClassifierCS returns base::ClassifierCS:
		//	LibClassCS;
		public ParserRule getRule() { return rule; }

		//LibClassCS
		public RuleCall getLibClassCSParserRuleCall() { return cLibClassCSParserRuleCall; }
	}

	public class LibIterationCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LibIterationCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIterationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeParametersLibTypeParameterCSParserRuleCall_2_1_0 = (RuleCall)cTypeParametersAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cTypeParametersAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cTypeParametersLibTypeParameterCSParserRuleCall_2_2_1_0 = (RuleCall)cTypeParametersAssignment_2_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParametersLibParameterCSParserRuleCall_4_0 = (RuleCall)cParametersAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cParametersAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cParametersLibParameterCSParserRuleCall_5_1_0 = (RuleCall)cParametersAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTypeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cTypeLibTypedRefCSParserRuleCall_8_0 = (RuleCall)cTypeAssignment_8.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cClassAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cClassSINGLE_QUOTED_STRINGTerminalRuleCall_10_0 = (RuleCall)cClassAssignment_10.eContents().get(0);
		private final Keyword cSemicolonKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//LibIterationCS:
		//	"iteration" name=Name ("<" typeParameters+=LibTypeParameterCS ("," typeParameters+=LibTypeParameterCS)* ">")? "("
		//	parameters+=LibParameterCS ("," parameters+=LibParameterCS)* ")" ":" type=LibTypedRefCS "=>"
		//	class=SINGLE_QUOTED_STRING //	'=>' class=[ecore::EJavaClass|DOUBLE_QUOTED_STRING]
		//
		//	";";
		public ParserRule getRule() { return rule; }

		//"iteration" name=Name ("<" typeParameters+=LibTypeParameterCS ("," typeParameters+=LibTypeParameterCS)* ">")? "("
		//parameters+=LibParameterCS ("," parameters+=LibParameterCS)* ")" ":" type=LibTypedRefCS "=>" class=SINGLE_QUOTED_STRING //	'=>' class=[ecore::EJavaClass|DOUBLE_QUOTED_STRING]
		//
		//";"
		public Group getGroup() { return cGroup; }

		//"iteration"
		public Keyword getIterationKeyword_0() { return cIterationKeyword_0; }

		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }

		//("<" typeParameters+=LibTypeParameterCS ("," typeParameters+=LibTypeParameterCS)* ">")?
		public Group getGroup_2() { return cGroup_2; }

		//"<"
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }

		//typeParameters+=LibTypeParameterCS
		public Assignment getTypeParametersAssignment_2_1() { return cTypeParametersAssignment_2_1; }

		//LibTypeParameterCS
		public RuleCall getTypeParametersLibTypeParameterCSParserRuleCall_2_1_0() { return cTypeParametersLibTypeParameterCSParserRuleCall_2_1_0; }

		//("," typeParameters+=LibTypeParameterCS)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//typeParameters+=LibTypeParameterCS
		public Assignment getTypeParametersAssignment_2_2_1() { return cTypeParametersAssignment_2_2_1; }

		//LibTypeParameterCS
		public RuleCall getTypeParametersLibTypeParameterCSParserRuleCall_2_2_1_0() { return cTypeParametersLibTypeParameterCSParserRuleCall_2_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_3() { return cGreaterThanSignKeyword_2_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//parameters+=LibParameterCS
		public Assignment getParametersAssignment_4() { return cParametersAssignment_4; }

		//LibParameterCS
		public RuleCall getParametersLibParameterCSParserRuleCall_4_0() { return cParametersLibParameterCSParserRuleCall_4_0; }

		//("," parameters+=LibParameterCS)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//parameters+=LibParameterCS
		public Assignment getParametersAssignment_5_1() { return cParametersAssignment_5_1; }

		//LibParameterCS
		public RuleCall getParametersLibParameterCSParserRuleCall_5_1_0() { return cParametersLibParameterCSParserRuleCall_5_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//":"
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }

		//type=LibTypedRefCS
		public Assignment getTypeAssignment_8() { return cTypeAssignment_8; }

		//LibTypedRefCS
		public RuleCall getTypeLibTypedRefCSParserRuleCall_8_0() { return cTypeLibTypedRefCSParserRuleCall_8_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_9() { return cEqualsSignGreaterThanSignKeyword_9; }

		//class=SINGLE_QUOTED_STRING
		public Assignment getClassAssignment_10() { return cClassAssignment_10; }

		//SINGLE_QUOTED_STRING
		public RuleCall getClassSINGLE_QUOTED_STRINGTerminalRuleCall_10_0() { return cClassSINGLE_QUOTED_STRINGTerminalRuleCall_10_0; }

		////	'=>' class=[ecore::EJavaClass|DOUBLE_QUOTED_STRING]
		//
		//";"
		public Keyword getSemicolonKeyword_11() { return cSemicolonKeyword_11; }
	}

	public class LibOperationCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LibOperationCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOperationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeParametersLibTypeParameterCSParserRuleCall_2_1_0 = (RuleCall)cTypeParametersAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cTypeParametersAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cTypeParametersLibTypeParameterCSParserRuleCall_2_2_1_0 = (RuleCall)cTypeParametersAssignment_2_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParametersLibParameterCSParserRuleCall_4_0_0 = (RuleCall)cParametersAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParametersLibParameterCSParserRuleCall_4_1_1_0 = (RuleCall)cParametersAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTypeLibTypedRefCSParserRuleCall_7_0 = (RuleCall)cTypeAssignment_7.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cClassAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cClassSINGLE_QUOTED_STRINGTerminalRuleCall_9_0 = (RuleCall)cClassAssignment_9.eContents().get(0);
		private final Keyword cSemicolonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//LibOperationCS:
		//	"operation" name=Name ("<" typeParameters+=LibTypeParameterCS ("," typeParameters+=LibTypeParameterCS)* ">")? "("
		//	(parameters+=LibParameterCS ("," parameters+=LibParameterCS)*)? ")" ":" type=LibTypedRefCS "=>"
		//	class=SINGLE_QUOTED_STRING //	'=>' class=[ecore::EJavaClass|DOUBLE_QUOTED_STRING]
		//
		//	";";
		public ParserRule getRule() { return rule; }

		//"operation" name=Name ("<" typeParameters+=LibTypeParameterCS ("," typeParameters+=LibTypeParameterCS)* ">")? "("
		//(parameters+=LibParameterCS ("," parameters+=LibParameterCS)*)? ")" ":" type=LibTypedRefCS "=>"
		//class=SINGLE_QUOTED_STRING //	'=>' class=[ecore::EJavaClass|DOUBLE_QUOTED_STRING]
		//
		//";"
		public Group getGroup() { return cGroup; }

		//"operation"
		public Keyword getOperationKeyword_0() { return cOperationKeyword_0; }

		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }

		//("<" typeParameters+=LibTypeParameterCS ("," typeParameters+=LibTypeParameterCS)* ">")?
		public Group getGroup_2() { return cGroup_2; }

		//"<"
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }

		//typeParameters+=LibTypeParameterCS
		public Assignment getTypeParametersAssignment_2_1() { return cTypeParametersAssignment_2_1; }

		//LibTypeParameterCS
		public RuleCall getTypeParametersLibTypeParameterCSParserRuleCall_2_1_0() { return cTypeParametersLibTypeParameterCSParserRuleCall_2_1_0; }

		//("," typeParameters+=LibTypeParameterCS)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//typeParameters+=LibTypeParameterCS
		public Assignment getTypeParametersAssignment_2_2_1() { return cTypeParametersAssignment_2_2_1; }

		//LibTypeParameterCS
		public RuleCall getTypeParametersLibTypeParameterCSParserRuleCall_2_2_1_0() { return cTypeParametersLibTypeParameterCSParserRuleCall_2_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_3() { return cGreaterThanSignKeyword_2_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(parameters+=LibParameterCS ("," parameters+=LibParameterCS)*)?
		public Group getGroup_4() { return cGroup_4; }

		//parameters+=LibParameterCS
		public Assignment getParametersAssignment_4_0() { return cParametersAssignment_4_0; }

		//LibParameterCS
		public RuleCall getParametersLibParameterCSParserRuleCall_4_0_0() { return cParametersLibParameterCSParserRuleCall_4_0_0; }

		//("," parameters+=LibParameterCS)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//parameters+=LibParameterCS
		public Assignment getParametersAssignment_4_1_1() { return cParametersAssignment_4_1_1; }

		//LibParameterCS
		public RuleCall getParametersLibParameterCSParserRuleCall_4_1_1_0() { return cParametersLibParameterCSParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//":"
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }

		//type=LibTypedRefCS
		public Assignment getTypeAssignment_7() { return cTypeAssignment_7; }

		//LibTypedRefCS
		public RuleCall getTypeLibTypedRefCSParserRuleCall_7_0() { return cTypeLibTypedRefCSParserRuleCall_7_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_8() { return cEqualsSignGreaterThanSignKeyword_8; }

		//class=SINGLE_QUOTED_STRING
		public Assignment getClassAssignment_9() { return cClassAssignment_9; }

		//SINGLE_QUOTED_STRING
		public RuleCall getClassSINGLE_QUOTED_STRINGTerminalRuleCall_9_0() { return cClassSINGLE_QUOTED_STRINGTerminalRuleCall_9_0; }

		////	'=>' class=[ecore::EJavaClass|DOUBLE_QUOTED_STRING]
		//
		//";"
		public Keyword getSemicolonKeyword_10() { return cSemicolonKeyword_10; }
	}

	public class LibPackageCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LibPackageCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cSubpackagesAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cSubpackagesLibPackageCSParserRuleCall_3_0_0 = (RuleCall)cSubpackagesAssignment_3_0.eContents().get(0);
		private final Assignment cClassifiersAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cClassifiersLibClassifierCSParserRuleCall_3_1_0 = (RuleCall)cClassifiersAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LibPackageCS:
		//	"package" name=Identifier "{" (subpackages+=LibPackageCS | classifiers+=LibClassifierCS)* "}";
		public ParserRule getRule() { return rule; }

		//"package" name=Identifier "{" (subpackages+=LibPackageCS | classifiers+=LibClassifierCS)* "}"
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(subpackages+=LibPackageCS | classifiers+=LibClassifierCS)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//subpackages+=LibPackageCS
		public Assignment getSubpackagesAssignment_3_0() { return cSubpackagesAssignment_3_0; }

		//LibPackageCS
		public RuleCall getSubpackagesLibPackageCSParserRuleCall_3_0_0() { return cSubpackagesLibPackageCSParserRuleCall_3_0_0; }

		//classifiers+=LibClassifierCS
		public Assignment getClassifiersAssignment_3_1() { return cClassifiersAssignment_3_1; }

		//LibClassifierCS
		public RuleCall getClassifiersLibClassifierCSParserRuleCall_3_1_0() { return cClassifiersLibClassifierCSParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class LibParameterCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LibParameterCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIdentifierParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeLibTypedRefCSParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Group cGroup_3_1_0 = (Group)cAlternatives_3_1.eContents().get(0);
		private final Assignment cLowerAssignment_3_1_0_0 = (Assignment)cGroup_3_1_0.eContents().get(0);
		private final RuleCall cLowerLOWERParserRuleCall_3_1_0_0_0 = (RuleCall)cLowerAssignment_3_1_0_0.eContents().get(0);
		private final Group cGroup_3_1_0_1 = (Group)cGroup_3_1_0.eContents().get(1);
		private final Keyword cFullStopFullStopKeyword_3_1_0_1_0 = (Keyword)cGroup_3_1_0_1.eContents().get(0);
		private final Assignment cUpperAssignment_3_1_0_1_1 = (Assignment)cGroup_3_1_0_1.eContents().get(1);
		private final RuleCall cUpperUPPERParserRuleCall_3_1_0_1_1_0 = (RuleCall)cUpperAssignment_3_1_0_1_1.eContents().get(0);
		private final Assignment cMultiplicityAssignment_3_1_1 = (Assignment)cAlternatives_3_1.eContents().get(1);
		private final Alternatives cMultiplicityAlternatives_3_1_1_0 = (Alternatives)cMultiplicityAssignment_3_1_1.eContents().get(0);
		private final Keyword cMultiplicityAsteriskKeyword_3_1_1_0_0 = (Keyword)cMultiplicityAlternatives_3_1_1_0.eContents().get(0);
		private final Keyword cMultiplicityPlusSignKeyword_3_1_1_0_1 = (Keyword)cMultiplicityAlternatives_3_1_1_0.eContents().get(1);
		private final Keyword cMultiplicityQuestionMarkKeyword_3_1_1_0_2 = (Keyword)cMultiplicityAlternatives_3_1_1_0.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//LibParameterCS returns base::ParameterCS:
		//	name=Identifier ":" type=LibTypedRefCS ("[" (lower=LOWER (".." upper=UPPER)? | multiplicity=("*" | "+" | "?")) "]")?;
		public ParserRule getRule() { return rule; }

		//name=Identifier ":" type=LibTypedRefCS ("[" (lower=LOWER (".." upper=UPPER)? | multiplicity=("*" | "+" | "?")) "]")?
		public Group getGroup() { return cGroup; }

		//name=Identifier
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_0_0() { return cNameIdentifierParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=LibTypedRefCS
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//LibTypedRefCS
		public RuleCall getTypeLibTypedRefCSParserRuleCall_2_0() { return cTypeLibTypedRefCSParserRuleCall_2_0; }

		//("[" (lower=LOWER (".." upper=UPPER)? | multiplicity=("*" | "+" | "?")) "]")?
		public Group getGroup_3() { return cGroup_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }

		//lower=LOWER (".." upper=UPPER)? | multiplicity=("*" | "+" | "?")
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }

		//lower=LOWER (".." upper=UPPER)?
		public Group getGroup_3_1_0() { return cGroup_3_1_0; }

		//lower=LOWER
		public Assignment getLowerAssignment_3_1_0_0() { return cLowerAssignment_3_1_0_0; }

		//LOWER
		public RuleCall getLowerLOWERParserRuleCall_3_1_0_0_0() { return cLowerLOWERParserRuleCall_3_1_0_0_0; }

		//(".." upper=UPPER)?
		public Group getGroup_3_1_0_1() { return cGroup_3_1_0_1; }

		//".."
		public Keyword getFullStopFullStopKeyword_3_1_0_1_0() { return cFullStopFullStopKeyword_3_1_0_1_0; }

		//upper=UPPER
		public Assignment getUpperAssignment_3_1_0_1_1() { return cUpperAssignment_3_1_0_1_1; }

		//UPPER
		public RuleCall getUpperUPPERParserRuleCall_3_1_0_1_1_0() { return cUpperUPPERParserRuleCall_3_1_0_1_1_0; }

		//multiplicity=("*" | "+" | "?")
		public Assignment getMultiplicityAssignment_3_1_1() { return cMultiplicityAssignment_3_1_1; }

		//"*" | "+" | "?"
		public Alternatives getMultiplicityAlternatives_3_1_1_0() { return cMultiplicityAlternatives_3_1_1_0; }

		//"*"
		public Keyword getMultiplicityAsteriskKeyword_3_1_1_0_0() { return cMultiplicityAsteriskKeyword_3_1_1_0_0; }

		//"+"
		public Keyword getMultiplicityPlusSignKeyword_3_1_1_0_1() { return cMultiplicityPlusSignKeyword_3_1_1_0_1; }

		//"?"
		public Keyword getMultiplicityQuestionMarkKeyword_3_1_1_0_2() { return cMultiplicityQuestionMarkKeyword_3_1_1_0_2; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_2() { return cRightSquareBracketKeyword_3_2; }
	}

	public class LibPropertyCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LibPropertyCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeLibTypedRefCSParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cClassAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cClassSINGLE_QUOTED_STRINGTerminalRuleCall_5_0 = (RuleCall)cClassAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//LibPropertyCS:
		//	"property" name=Name ":" type=LibTypedRefCS "=>" class=SINGLE_QUOTED_STRING //	'=>' class=[ecore::EJavaClass|DOUBLE_QUOTED_STRING]
		//
		//	";";
		public ParserRule getRule() { return rule; }

		//"property" name=Name ":" type=LibTypedRefCS "=>" class=SINGLE_QUOTED_STRING //	'=>' class=[ecore::EJavaClass|DOUBLE_QUOTED_STRING]
		//
		//";"
		public Group getGroup() { return cGroup; }

		//"property"
		public Keyword getPropertyKeyword_0() { return cPropertyKeyword_0; }

		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=LibTypedRefCS
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//LibTypedRefCS
		public RuleCall getTypeLibTypedRefCSParserRuleCall_3_0() { return cTypeLibTypedRefCSParserRuleCall_3_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_4() { return cEqualsSignGreaterThanSignKeyword_4; }

		//class=SINGLE_QUOTED_STRING
		public Assignment getClassAssignment_5() { return cClassAssignment_5; }

		//SINGLE_QUOTED_STRING
		public RuleCall getClassSINGLE_QUOTED_STRINGTerminalRuleCall_5_0() { return cClassSINGLE_QUOTED_STRINGTerminalRuleCall_5_0; }

		////	'=>' class=[ecore::EJavaClass|DOUBLE_QUOTED_STRING]
		//
		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class LibQualifiedTypeRefCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LibQualifiedTypeRefCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNamespaceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNamespaceNamespaceCSCrossReference_0_0 = (CrossReference)cNamespaceAssignment_0.eContents().get(0);
		private final RuleCall cNamespaceNamespaceCSIdentifierParserRuleCall_0_0_1 = (RuleCall)cNamespaceNamespaceCSCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeArgumentsLibTypeRefCSParserRuleCall_1_1_0 = (RuleCall)cTypeArgumentsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cTypeArgumentsLibTypeRefCSParserRuleCall_1_2_1_0 = (RuleCall)cTypeArgumentsAssignment_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cColonColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementLibTypedRefCSParserRuleCall_3_0 = (RuleCall)cElementAssignment_3.eContents().get(0);
		
		//LibQualifiedTypeRefCS returns base::QualifiedTypeRefCS:
		//	namespace=[base::NamespaceCS|Identifier] ("<" typeArguments+=LibTypeRefCS ("," typeArguments+=LibTypeRefCS)* ">")?
		//	"::" element=LibTypedRefCS;
		public ParserRule getRule() { return rule; }

		//namespace=[base::NamespaceCS|Identifier] ("<" typeArguments+=LibTypeRefCS ("," typeArguments+=LibTypeRefCS)* ">")? "::"
		//element=LibTypedRefCS
		public Group getGroup() { return cGroup; }

		//namespace=[base::NamespaceCS|Identifier]
		public Assignment getNamespaceAssignment_0() { return cNamespaceAssignment_0; }

		//[base::NamespaceCS|Identifier]
		public CrossReference getNamespaceNamespaceCSCrossReference_0_0() { return cNamespaceNamespaceCSCrossReference_0_0; }

		//Identifier
		public RuleCall getNamespaceNamespaceCSIdentifierParserRuleCall_0_0_1() { return cNamespaceNamespaceCSIdentifierParserRuleCall_0_0_1; }

		//("<" typeArguments+=LibTypeRefCS ("," typeArguments+=LibTypeRefCS)* ">")?
		public Group getGroup_1() { return cGroup_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }

		//typeArguments+=LibTypeRefCS
		public Assignment getTypeArgumentsAssignment_1_1() { return cTypeArgumentsAssignment_1_1; }

		//LibTypeRefCS
		public RuleCall getTypeArgumentsLibTypeRefCSParserRuleCall_1_1_0() { return cTypeArgumentsLibTypeRefCSParserRuleCall_1_1_0; }

		//("," typeArguments+=LibTypeRefCS)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//typeArguments+=LibTypeRefCS
		public Assignment getTypeArgumentsAssignment_1_2_1() { return cTypeArgumentsAssignment_1_2_1; }

		//LibTypeRefCS
		public RuleCall getTypeArgumentsLibTypeRefCSParserRuleCall_1_2_1_0() { return cTypeArgumentsLibTypeRefCSParserRuleCall_1_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }

		//"::"
		public Keyword getColonColonKeyword_2() { return cColonColonKeyword_2; }

		//element=LibTypedRefCS
		public Assignment getElementAssignment_3() { return cElementAssignment_3; }

		//LibTypedRefCS
		public RuleCall getElementLibTypedRefCSParserRuleCall_3_0() { return cElementLibTypedRefCSParserRuleCall_3_0; }
	}

	public class LibTypeParameterCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LibTypeParameterCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIdentifierParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cExtendsKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cExtendsAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cExtendsLibTypedRefCSParserRuleCall_1_0_1_0 = (RuleCall)cExtendsAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final Keyword cAmpersandAmpersandKeyword_1_0_2_0 = (Keyword)cGroup_1_0_2.eContents().get(0);
		private final Assignment cExtendsAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cExtendsLibTypedRefCSParserRuleCall_1_0_2_1_0 = (RuleCall)cExtendsAssignment_1_0_2_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cSuperKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cSuperAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cSuperLibTypedRefCSParserRuleCall_1_1_1_0 = (RuleCall)cSuperAssignment_1_1_1.eContents().get(0);
		
		//LibTypeParameterCS returns base::TypeParameterCS:
		//	name=Identifier ("extends" extends+=LibTypedRefCS ("&&" extends+=LibTypedRefCS)* | "super" super=LibTypedRefCS)?;
		public ParserRule getRule() { return rule; }

		//name=Identifier ("extends" extends+=LibTypedRefCS ("&&" extends+=LibTypedRefCS)* | "super" super=LibTypedRefCS)?
		public Group getGroup() { return cGroup; }

		//name=Identifier
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_0_0() { return cNameIdentifierParserRuleCall_0_0; }

		//("extends" extends+=LibTypedRefCS ("&&" extends+=LibTypedRefCS)* | "super" super=LibTypedRefCS)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"extends" extends+=LibTypedRefCS ("&&" extends+=LibTypedRefCS)*
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"extends"
		public Keyword getExtendsKeyword_1_0_0() { return cExtendsKeyword_1_0_0; }

		//extends+=LibTypedRefCS
		public Assignment getExtendsAssignment_1_0_1() { return cExtendsAssignment_1_0_1; }

		//LibTypedRefCS
		public RuleCall getExtendsLibTypedRefCSParserRuleCall_1_0_1_0() { return cExtendsLibTypedRefCSParserRuleCall_1_0_1_0; }

		//("&&" extends+=LibTypedRefCS)*
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_0_2_0() { return cAmpersandAmpersandKeyword_1_0_2_0; }

		//extends+=LibTypedRefCS
		public Assignment getExtendsAssignment_1_0_2_1() { return cExtendsAssignment_1_0_2_1; }

		//LibTypedRefCS
		public RuleCall getExtendsLibTypedRefCSParserRuleCall_1_0_2_1_0() { return cExtendsLibTypedRefCSParserRuleCall_1_0_2_1_0; }

		//"super" super=LibTypedRefCS
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"super"
		public Keyword getSuperKeyword_1_1_0() { return cSuperKeyword_1_1_0; }

		//super=LibTypedRefCS
		public Assignment getSuperAssignment_1_1_1() { return cSuperAssignment_1_1_1; }

		//LibTypedRefCS
		public RuleCall getSuperLibTypedRefCSParserRuleCall_1_1_1_0() { return cSuperLibTypedRefCSParserRuleCall_1_1_1_0; }
	}

	public class LibTypeRefCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LibTypeRefCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLibTypedRefCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLibWildcardTypeRefCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LibTypeRefCS returns base::TypeRefCS:
		//	LibTypedRefCS | LibWildcardTypeRefCS;
		public ParserRule getRule() { return rule; }

		//LibTypedRefCS | LibWildcardTypeRefCS
		public Alternatives getAlternatives() { return cAlternatives; }

		//LibTypedRefCS
		public RuleCall getLibTypedRefCSParserRuleCall_0() { return cLibTypedRefCSParserRuleCall_0; }

		//LibWildcardTypeRefCS
		public RuleCall getLibWildcardTypeRefCSParserRuleCall_1() { return cLibWildcardTypeRefCSParserRuleCall_1; }
	}

	public class LibTypedRefCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LibTypedRefCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLibQualifiedTypeRefCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLibTypedTypeRefCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LibTypedRefCS returns base::TypedRefCS:
		//	LibQualifiedTypeRefCS | LibTypedTypeRefCS;
		public ParserRule getRule() { return rule; }

		//LibQualifiedTypeRefCS | LibTypedTypeRefCS
		public Alternatives getAlternatives() { return cAlternatives; }

		//LibQualifiedTypeRefCS
		public RuleCall getLibQualifiedTypeRefCSParserRuleCall_0() { return cLibQualifiedTypeRefCSParserRuleCall_0; }

		//LibTypedTypeRefCS
		public RuleCall getLibTypedTypeRefCSParserRuleCall_1() { return cLibTypedTypeRefCSParserRuleCall_1; }
	}

	public class LibTypedTypeRefCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LibTypedTypeRefCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeTypeCSCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeTypeCSIdentifierParserRuleCall_0_0_1 = (RuleCall)cTypeTypeCSCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeArgumentsLibTypeRefCSParserRuleCall_1_1_0 = (RuleCall)cTypeArgumentsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cTypeArgumentsLibTypeRefCSParserRuleCall_1_2_1_0 = (RuleCall)cTypeArgumentsAssignment_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//LibTypedTypeRefCS returns base::TypedTypeRefCS:
		//	type=[base::TypeCS|Identifier] ("<" typeArguments+=LibTypeRefCS ("," typeArguments+=LibTypeRefCS)* ">")?;
		public ParserRule getRule() { return rule; }

		//type=[base::TypeCS|Identifier] ("<" typeArguments+=LibTypeRefCS ("," typeArguments+=LibTypeRefCS)* ">")?
		public Group getGroup() { return cGroup; }

		//type=[base::TypeCS|Identifier]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[base::TypeCS|Identifier]
		public CrossReference getTypeTypeCSCrossReference_0_0() { return cTypeTypeCSCrossReference_0_0; }

		//Identifier
		public RuleCall getTypeTypeCSIdentifierParserRuleCall_0_0_1() { return cTypeTypeCSIdentifierParserRuleCall_0_0_1; }

		//("<" typeArguments+=LibTypeRefCS ("," typeArguments+=LibTypeRefCS)* ">")?
		public Group getGroup_1() { return cGroup_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }

		//typeArguments+=LibTypeRefCS
		public Assignment getTypeArgumentsAssignment_1_1() { return cTypeArgumentsAssignment_1_1; }

		//LibTypeRefCS
		public RuleCall getTypeArgumentsLibTypeRefCSParserRuleCall_1_1_0() { return cTypeArgumentsLibTypeRefCSParserRuleCall_1_1_0; }

		//("," typeArguments+=LibTypeRefCS)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//typeArguments+=LibTypeRefCS
		public Assignment getTypeArgumentsAssignment_1_2_1() { return cTypeArgumentsAssignment_1_2_1; }

		//LibTypeRefCS
		public RuleCall getTypeArgumentsLibTypeRefCSParserRuleCall_1_2_1_0() { return cTypeArgumentsLibTypeRefCSParserRuleCall_1_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }
	}

	public class LibWildcardTypeRefCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LibWildcardTypeRefCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWildcardTypeRefCSAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cExtendsKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cExtendsAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cExtendsLibTypedRefCSParserRuleCall_2_0_1_0 = (RuleCall)cExtendsAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cSuperKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cSuperAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cSuperLibTypedRefCSParserRuleCall_2_1_1_0 = (RuleCall)cSuperAssignment_2_1_1.eContents().get(0);
		
		//LibWildcardTypeRefCS returns base::WildcardTypeRefCS:
		//	{base::WildcardTypeRefCS} "?" ("extends" extends=LibTypedRefCS | "super" super=LibTypedRefCS)?;
		public ParserRule getRule() { return rule; }

		//{base::WildcardTypeRefCS} "?" ("extends" extends=LibTypedRefCS | "super" super=LibTypedRefCS)?
		public Group getGroup() { return cGroup; }

		//{base::WildcardTypeRefCS}
		public Action getWildcardTypeRefCSAction_0() { return cWildcardTypeRefCSAction_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_1() { return cQuestionMarkKeyword_1; }

		//("extends" extends=LibTypedRefCS | "super" super=LibTypedRefCS)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"extends" extends=LibTypedRefCS
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"extends"
		public Keyword getExtendsKeyword_2_0_0() { return cExtendsKeyword_2_0_0; }

		//extends=LibTypedRefCS
		public Assignment getExtendsAssignment_2_0_1() { return cExtendsAssignment_2_0_1; }

		//LibTypedRefCS
		public RuleCall getExtendsLibTypedRefCSParserRuleCall_2_0_1_0() { return cExtendsLibTypedRefCSParserRuleCall_2_0_1_0; }

		//"super" super=LibTypedRefCS
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"super"
		public Keyword getSuperKeyword_2_1_0() { return cSuperKeyword_2_1_0; }

		//super=LibTypedRefCS
		public Assignment getSuperAssignment_2_1_1() { return cSuperAssignment_2_1_1; }

		//LibTypedRefCS
		public RuleCall getSuperLibTypedRefCSParserRuleCall_2_1_1_0() { return cSuperLibTypedRefCSParserRuleCall_2_1_1_0; }
	}
	
	
	private LibraryElements pLibrary;
	private TerminalRule tDOUBLE_QUOTED_STRING;
	private TerminalRule tSINGLE_QUOTED_STRING;
	private TerminalRule tID;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tINT;
	private LOWERElements pLOWER;
	private UPPERElements pUPPER;
	private IdentifierElements pIdentifier;
	private RestrictedKeywordsElements pRestrictedKeywords;
	private NameElements pName;
	private LibImportCSElements pLibImportCS;
	private LibClassCSElements pLibClassCS;
	private LibClassifierCSElements pLibClassifierCS;
	private LibIterationCSElements pLibIterationCS;
	private LibOperationCSElements pLibOperationCS;
	private LibPackageCSElements pLibPackageCS;
	private LibParameterCSElements pLibParameterCS;
	private LibPropertyCSElements pLibPropertyCS;
	private LibQualifiedTypeRefCSElements pLibQualifiedTypeRefCS;
	private LibTypeParameterCSElements pLibTypeParameterCS;
	private LibTypeRefCSElements pLibTypeRefCS;
	private LibTypedRefCSElements pLibTypedRefCS;
	private LibTypedTypeRefCSElements pLibTypedTypeRefCS;
	private LibWildcardTypeRefCSElements pLibWildcardTypeRefCS;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public OCLstdlibGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	////generate OCLstdlib "http://www.eclipse.org/ocl/examples/xtext/oclstdlib/OCLstdlibCST"
	//
	//Library returns LibDocumentCS:
	//	"library" name=Identifier imports+=LibImportCS* "{" packages+=LibPackageCS* "}";
	public LibraryElements getLibraryAccess() {
		return (pLibrary != null) ? pLibrary : (pLibrary = new LibraryElements());
	}
	
	public ParserRule getLibraryRule() {
		return getLibraryAccess().getRule();
	}

	//terminal DOUBLE_QUOTED_STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"";
	public TerminalRule getDOUBLE_QUOTED_STRINGRule() {
		return (tDOUBLE_QUOTED_STRING != null) ? tDOUBLE_QUOTED_STRING : (tDOUBLE_QUOTED_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOUBLE_QUOTED_STRING"));
	} 

	//terminal SINGLE_QUOTED_STRING:
	//	"\'" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSINGLE_QUOTED_STRINGRule() {
		return (tSINGLE_QUOTED_STRING != null) ? tSINGLE_QUOTED_STRING : (tSINGLE_QUOTED_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SINGLE_QUOTED_STRING"));
	} 

	//terminal ID:
	//	("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")* | "_" SINGLE_QUOTED_STRING;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"--" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//// String to allow diverse re-use
	//
	//terminal INT:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//LOWER returns ecore::EInt:
	//	INT;
	public LOWERElements getLOWERAccess() {
		return (pLOWER != null) ? pLOWER : (pLOWER = new LOWERElements());
	}
	
	public ParserRule getLOWERRule() {
		return getLOWERAccess().getRule();
	}

	//UPPER returns ecore::EInt:
	//	INT | "*";
	public UPPERElements getUPPERAccess() {
		return (pUPPER != null) ? pUPPER : (pUPPER = new UPPERElements());
	}
	
	public ParserRule getUPPERRule() {
		return getUPPERAccess().getRule();
	}

	//Identifier returns ecore::EString:
	//	ID | RestrictedKeywords;
	public IdentifierElements getIdentifierAccess() {
		return (pIdentifier != null) ? pIdentifier : (pIdentifier = new IdentifierElements());
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}

	//RestrictedKeywords returns ecore::EString:
	//	"conformsTo" | "extends" | "import" | "iteration" | "library" | "operation" | "package" | "property" | "super" |
	//	"type";
	public RestrictedKeywordsElements getRestrictedKeywordsAccess() {
		return (pRestrictedKeywords != null) ? pRestrictedKeywords : (pRestrictedKeywords = new RestrictedKeywordsElements());
	}
	
	public ParserRule getRestrictedKeywordsRule() {
		return getRestrictedKeywordsAccess().getRule();
	}

	//Name returns ecore::EString:
	//	Identifier | DOUBLE_QUOTED_STRING;
	public NameElements getNameAccess() {
		return (pName != null) ? pName : (pName = new NameElements());
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}

	//LibImportCS returns base::ImportCS:
	//	"import" (name=Identifier ":")? namespace=[base::NamespaceCS|SINGLE_QUOTED_STRING];
	public LibImportCSElements getLibImportCSAccess() {
		return (pLibImportCS != null) ? pLibImportCS : (pLibImportCS = new LibImportCSElements());
	}
	
	public ParserRule getLibImportCSRule() {
		return getLibImportCSAccess().getRule();
	}

	//LibClassCS:
	//	"type" name=Identifier ("<" typeParameters+=LibTypeParameterCS ("," typeParameters+=LibTypeParameterCS)* ">")?
	//	("conformsTo" conformsTo+=LibTypedRefCS ("," conformsTo+=LibTypedRefCS)*)? "{" (iterations+=LibIterationCS |
	//	operations+=LibOperationCS | structuralFeatures+=LibPropertyCS)* "}";
	public LibClassCSElements getLibClassCSAccess() {
		return (pLibClassCS != null) ? pLibClassCS : (pLibClassCS = new LibClassCSElements());
	}
	
	public ParserRule getLibClassCSRule() {
		return getLibClassCSAccess().getRule();
	}

	//LibClassifierCS returns base::ClassifierCS:
	//	LibClassCS;
	public LibClassifierCSElements getLibClassifierCSAccess() {
		return (pLibClassifierCS != null) ? pLibClassifierCS : (pLibClassifierCS = new LibClassifierCSElements());
	}
	
	public ParserRule getLibClassifierCSRule() {
		return getLibClassifierCSAccess().getRule();
	}

	//LibIterationCS:
	//	"iteration" name=Name ("<" typeParameters+=LibTypeParameterCS ("," typeParameters+=LibTypeParameterCS)* ">")? "("
	//	parameters+=LibParameterCS ("," parameters+=LibParameterCS)* ")" ":" type=LibTypedRefCS "=>"
	//	class=SINGLE_QUOTED_STRING //	'=>' class=[ecore::EJavaClass|DOUBLE_QUOTED_STRING]
	//
	//	";";
	public LibIterationCSElements getLibIterationCSAccess() {
		return (pLibIterationCS != null) ? pLibIterationCS : (pLibIterationCS = new LibIterationCSElements());
	}
	
	public ParserRule getLibIterationCSRule() {
		return getLibIterationCSAccess().getRule();
	}

	//LibOperationCS:
	//	"operation" name=Name ("<" typeParameters+=LibTypeParameterCS ("," typeParameters+=LibTypeParameterCS)* ">")? "("
	//	(parameters+=LibParameterCS ("," parameters+=LibParameterCS)*)? ")" ":" type=LibTypedRefCS "=>"
	//	class=SINGLE_QUOTED_STRING //	'=>' class=[ecore::EJavaClass|DOUBLE_QUOTED_STRING]
	//
	//	";";
	public LibOperationCSElements getLibOperationCSAccess() {
		return (pLibOperationCS != null) ? pLibOperationCS : (pLibOperationCS = new LibOperationCSElements());
	}
	
	public ParserRule getLibOperationCSRule() {
		return getLibOperationCSAccess().getRule();
	}

	//LibPackageCS:
	//	"package" name=Identifier "{" (subpackages+=LibPackageCS | classifiers+=LibClassifierCS)* "}";
	public LibPackageCSElements getLibPackageCSAccess() {
		return (pLibPackageCS != null) ? pLibPackageCS : (pLibPackageCS = new LibPackageCSElements());
	}
	
	public ParserRule getLibPackageCSRule() {
		return getLibPackageCSAccess().getRule();
	}

	//LibParameterCS returns base::ParameterCS:
	//	name=Identifier ":" type=LibTypedRefCS ("[" (lower=LOWER (".." upper=UPPER)? | multiplicity=("*" | "+" | "?")) "]")?;
	public LibParameterCSElements getLibParameterCSAccess() {
		return (pLibParameterCS != null) ? pLibParameterCS : (pLibParameterCS = new LibParameterCSElements());
	}
	
	public ParserRule getLibParameterCSRule() {
		return getLibParameterCSAccess().getRule();
	}

	//LibPropertyCS:
	//	"property" name=Name ":" type=LibTypedRefCS "=>" class=SINGLE_QUOTED_STRING //	'=>' class=[ecore::EJavaClass|DOUBLE_QUOTED_STRING]
	//
	//	";";
	public LibPropertyCSElements getLibPropertyCSAccess() {
		return (pLibPropertyCS != null) ? pLibPropertyCS : (pLibPropertyCS = new LibPropertyCSElements());
	}
	
	public ParserRule getLibPropertyCSRule() {
		return getLibPropertyCSAccess().getRule();
	}

	//LibQualifiedTypeRefCS returns base::QualifiedTypeRefCS:
	//	namespace=[base::NamespaceCS|Identifier] ("<" typeArguments+=LibTypeRefCS ("," typeArguments+=LibTypeRefCS)* ">")?
	//	"::" element=LibTypedRefCS;
	public LibQualifiedTypeRefCSElements getLibQualifiedTypeRefCSAccess() {
		return (pLibQualifiedTypeRefCS != null) ? pLibQualifiedTypeRefCS : (pLibQualifiedTypeRefCS = new LibQualifiedTypeRefCSElements());
	}
	
	public ParserRule getLibQualifiedTypeRefCSRule() {
		return getLibQualifiedTypeRefCSAccess().getRule();
	}

	//LibTypeParameterCS returns base::TypeParameterCS:
	//	name=Identifier ("extends" extends+=LibTypedRefCS ("&&" extends+=LibTypedRefCS)* | "super" super=LibTypedRefCS)?;
	public LibTypeParameterCSElements getLibTypeParameterCSAccess() {
		return (pLibTypeParameterCS != null) ? pLibTypeParameterCS : (pLibTypeParameterCS = new LibTypeParameterCSElements());
	}
	
	public ParserRule getLibTypeParameterCSRule() {
		return getLibTypeParameterCSAccess().getRule();
	}

	//LibTypeRefCS returns base::TypeRefCS:
	//	LibTypedRefCS | LibWildcardTypeRefCS;
	public LibTypeRefCSElements getLibTypeRefCSAccess() {
		return (pLibTypeRefCS != null) ? pLibTypeRefCS : (pLibTypeRefCS = new LibTypeRefCSElements());
	}
	
	public ParserRule getLibTypeRefCSRule() {
		return getLibTypeRefCSAccess().getRule();
	}

	//LibTypedRefCS returns base::TypedRefCS:
	//	LibQualifiedTypeRefCS | LibTypedTypeRefCS;
	public LibTypedRefCSElements getLibTypedRefCSAccess() {
		return (pLibTypedRefCS != null) ? pLibTypedRefCS : (pLibTypedRefCS = new LibTypedRefCSElements());
	}
	
	public ParserRule getLibTypedRefCSRule() {
		return getLibTypedRefCSAccess().getRule();
	}

	//LibTypedTypeRefCS returns base::TypedTypeRefCS:
	//	type=[base::TypeCS|Identifier] ("<" typeArguments+=LibTypeRefCS ("," typeArguments+=LibTypeRefCS)* ">")?;
	public LibTypedTypeRefCSElements getLibTypedTypeRefCSAccess() {
		return (pLibTypedTypeRefCS != null) ? pLibTypedTypeRefCS : (pLibTypedTypeRefCS = new LibTypedTypeRefCSElements());
	}
	
	public ParserRule getLibTypedTypeRefCSRule() {
		return getLibTypedTypeRefCSAccess().getRule();
	}

	//LibWildcardTypeRefCS returns base::WildcardTypeRefCS:
	//	{base::WildcardTypeRefCS} "?" ("extends" extends=LibTypedRefCS | "super" super=LibTypedRefCS)?;
	public LibWildcardTypeRefCSElements getLibWildcardTypeRefCSAccess() {
		return (pLibWildcardTypeRefCS != null) ? pLibWildcardTypeRefCS : (pLibWildcardTypeRefCS = new LibWildcardTypeRefCSElements());
	}
	
	public ParserRule getLibWildcardTypeRefCSRule() {
		return getLibWildcardTypeRefCSAccess().getRule();
	}
}
