/*
* generated by Xtext
*/
grammar InternalOCLstdlib;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package org.eclipse.ocl.examples.xtext.oclstdlib.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.ocl.examples.xtext.oclstdlib.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.ocl.examples.xtext.oclstdlib.services.OCLstdlibGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private OCLstdlibGrammarAccess grammarAccess;
 	
    public InternalOCLstdlibParser(TokenStream input, IAstFactory factory, OCLstdlibGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/eclipse/ocl/examples/xtext/oclstdlib/parser/antlr/internal/InternalOCLstdlib.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Library";	
   	}
   	
   	@Override
   	protected OCLstdlibGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleLibrary
entryRuleLibrary returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLibraryRule(), currentNode); }
	 iv_ruleLibrary=ruleLibrary 
	 { $current=$iv_ruleLibrary.current; } 
	 EOF 
;

// Rule Library
ruleLibrary returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'library' 
    {
        createLeafNode(grammarAccess.getLibraryAccess().getLibraryKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibraryAccess().getNameIdentifierParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibraryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibraryAccess().getImportsLibImportCSParserRuleCall_2_0(), currentNode); 
	    }
		lv_imports_2_0=ruleLibImportCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibraryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"imports",
	        		lv_imports_2_0, 
	        		"LibImportCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'{' 
    {
        createLeafNode(grammarAccess.getLibraryAccess().getLeftCurlyBracketKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibraryAccess().getPackagesLibPackageCSParserRuleCall_4_0(), currentNode); 
	    }
		lv_packages_4_0=ruleLibPackageCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibraryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"packages",
	        		lv_packages_4_0, 
	        		"LibPackageCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getLibraryAccess().getRightCurlyBracketKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleLOWER
entryRuleLOWER returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLOWERRule(), currentNode); } 
	 iv_ruleLOWER=ruleLOWER 
	 { $current=$iv_ruleLOWER.current.getText(); }  
	 EOF 
;

// Rule LOWER
ruleLOWER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    createLeafNode(grammarAccess.getLOWERAccess().getINTTerminalRuleCall(), null); 
    }

    ;





// Entry rule entryRuleUPPER
entryRuleUPPER returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUPPERRule(), currentNode); } 
	 iv_ruleUPPER=ruleUPPER 
	 { $current=$iv_ruleUPPER.current.getText(); }  
	 EOF 
;

// Rule UPPER
ruleUPPER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    createLeafNode(grammarAccess.getUPPERAccess().getINTTerminalRuleCall_0(), null); 
    }

    |
	kw='*' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUPPERAccess().getAsteriskKeyword_1(), null); 
    }
)
    ;





// Entry rule entryRuleIdentifier
entryRuleIdentifier returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIdentifierRule(), currentNode); } 
	 iv_ruleIdentifier=ruleIdentifier 
	 { $current=$iv_ruleIdentifier.current.getText(); }  
	 EOF 
;

// Rule Identifier
ruleIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_ID_TERMINAL_0=RULE_ID_TERMINAL    {
		$current.merge(this_ID_TERMINAL_0);
    }

    { 
    createLeafNode(grammarAccess.getIdentifierAccess().getID_TERMINALTerminalRuleCall_0(), null); 
    }

    |
	kw='conformsTo' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getIdentifierAccess().getConformsToKeyword_1(), null); 
    }

    |
	kw='extends' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getIdentifierAccess().getExtendsKeyword_2(), null); 
    }

    |
	kw='import' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getIdentifierAccess().getImportKeyword_3(), null); 
    }

    |
	kw='iteration' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getIdentifierAccess().getIterationKeyword_4(), null); 
    }

    |
	kw='library' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getIdentifierAccess().getLibraryKeyword_5(), null); 
    }

    |
	kw='operation' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getIdentifierAccess().getOperationKeyword_6(), null); 
    }

    |
	kw='package' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getIdentifierAccess().getPackageKeyword_7(), null); 
    }

    |
	kw='property' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getIdentifierAccess().getPropertyKeyword_8(), null); 
    }

    |
	kw='super' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getIdentifierAccess().getSuperKeyword_9(), null); 
    }

    |
	kw='type' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getIdentifierAccess().getTypeKeyword_10(), null); 
    }
)
    ;





// Entry rule entryRuleName
entryRuleName returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNameRule(), currentNode); } 
	 iv_ruleName=ruleName 
	 { $current=$iv_ruleName.current.getText(); }  
	 EOF 
;

// Rule Name
ruleName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getNameAccess().getIdentifierParserRuleCall_0(), currentNode); 
    }
    this_Identifier_0=ruleIdentifier    {
		$current.merge(this_Identifier_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    |    this_DOUBLE_QUOTED_STRING_1=RULE_DOUBLE_QUOTED_STRING    {
		$current.merge(this_DOUBLE_QUOTED_STRING_1);
    }

    { 
    createLeafNode(grammarAccess.getNameAccess().getDOUBLE_QUOTED_STRINGTerminalRuleCall_1(), null); 
    }
)
    ;





// Entry rule entryRuleLibImportCS
entryRuleLibImportCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLibImportCSRule(), currentNode); }
	 iv_ruleLibImportCS=ruleLibImportCS 
	 { $current=$iv_ruleLibImportCS.current; } 
	 EOF 
;

// Rule LibImportCS
ruleLibImportCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'import' 
    {
        createLeafNode(grammarAccess.getLibImportCSAccess().getImportKeyword_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibImportCSAccess().getNameIdentifierParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_name_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibImportCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getLibImportCSAccess().getColonKeyword_1_1(), null); 
    }
)?(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getLibImportCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_SINGLE_QUOTED_STRING
	{
		createLeafNode(grammarAccess.getLibImportCSAccess().getNamespaceNamespaceCSCrossReference_2_0(), "namespace"); 
	}

)
))
;





// Entry rule entryRuleLibClassCS
entryRuleLibClassCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLibClassCSRule(), currentNode); }
	 iv_ruleLibClassCS=ruleLibClassCS 
	 { $current=$iv_ruleLibClassCS.current; } 
	 EOF 
;

// Rule LibClassCS
ruleLibClassCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'type' 
    {
        createLeafNode(grammarAccess.getLibClassCSAccess().getTypeKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibClassCSAccess().getNameIdentifierParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibClassCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'<' 
    {
        createLeafNode(grammarAccess.getLibClassCSAccess().getLessThanSignKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibClassCSAccess().getTypeParametersLibTypeParameterCSParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_typeParameters_3_0=ruleLibTypeParameterCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibClassCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"typeParameters",
	        		lv_typeParameters_3_0, 
	        		"LibTypeParameterCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getLibClassCSAccess().getCommaKeyword_2_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibClassCSAccess().getTypeParametersLibTypeParameterCSParserRuleCall_2_2_1_0(), currentNode); 
	    }
		lv_typeParameters_5_0=ruleLibTypeParameterCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibClassCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"typeParameters",
	        		lv_typeParameters_5_0, 
	        		"LibTypeParameterCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'>' 
    {
        createLeafNode(grammarAccess.getLibClassCSAccess().getGreaterThanSignKeyword_2_3(), null); 
    }
)?(	'conformsTo' 
    {
        createLeafNode(grammarAccess.getLibClassCSAccess().getConformsToKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibClassCSAccess().getConformsToLibTypedRefCSParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_conformsTo_8_0=ruleLibTypedRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibClassCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"conformsTo",
	        		lv_conformsTo_8_0, 
	        		"LibTypedRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getLibClassCSAccess().getCommaKeyword_3_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibClassCSAccess().getConformsToLibTypedRefCSParserRuleCall_3_2_1_0(), currentNode); 
	    }
		lv_conformsTo_10_0=ruleLibTypedRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibClassCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"conformsTo",
	        		lv_conformsTo_10_0, 
	        		"LibTypedRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	'{' 
    {
        createLeafNode(grammarAccess.getLibClassCSAccess().getLeftCurlyBracketKeyword_4(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibClassCSAccess().getIterationsLibIterationCSParserRuleCall_5_0_0(), currentNode); 
	    }
		lv_iterations_12_0=ruleLibIterationCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibClassCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"iterations",
	        		lv_iterations_12_0, 
	        		"LibIterationCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibClassCSAccess().getOperationsLibOperationCSParserRuleCall_5_1_0(), currentNode); 
	    }
		lv_operations_13_0=ruleLibOperationCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibClassCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operations",
	        		lv_operations_13_0, 
	        		"LibOperationCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibClassCSAccess().getStructuralFeaturesLibPropertyCSParserRuleCall_5_2_0(), currentNode); 
	    }
		lv_structuralFeatures_14_0=ruleLibPropertyCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibClassCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"structuralFeatures",
	        		lv_structuralFeatures_14_0, 
	        		"LibPropertyCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getLibClassCSAccess().getRightCurlyBracketKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleLibClassifierCS
entryRuleLibClassifierCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLibClassifierCSRule(), currentNode); }
	 iv_ruleLibClassifierCS=ruleLibClassifierCS 
	 { $current=$iv_ruleLibClassifierCS.current; } 
	 EOF 
;

// Rule LibClassifierCS
ruleLibClassifierCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getLibClassifierCSAccess().getLibClassCSParserRuleCall(), currentNode); 
    }
    this_LibClassCS_0=ruleLibClassCS
    { 
        $current = $this_LibClassCS_0.current; 
        currentNode = currentNode.getParent();
    }

;





// Entry rule entryRuleLibIterationCS
entryRuleLibIterationCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLibIterationCSRule(), currentNode); }
	 iv_ruleLibIterationCS=ruleLibIterationCS 
	 { $current=$iv_ruleLibIterationCS.current; } 
	 EOF 
;

// Rule LibIterationCS
ruleLibIterationCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'iteration' 
    {
        createLeafNode(grammarAccess.getLibIterationCSAccess().getIterationKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibIterationCSAccess().getNameNameParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibIterationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"Name", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'<' 
    {
        createLeafNode(grammarAccess.getLibIterationCSAccess().getLessThanSignKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibIterationCSAccess().getTypeParametersLibTypeParameterCSParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_typeParameters_3_0=ruleLibTypeParameterCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibIterationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"typeParameters",
	        		lv_typeParameters_3_0, 
	        		"LibTypeParameterCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getLibIterationCSAccess().getCommaKeyword_2_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibIterationCSAccess().getTypeParametersLibTypeParameterCSParserRuleCall_2_2_1_0(), currentNode); 
	    }
		lv_typeParameters_5_0=ruleLibTypeParameterCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibIterationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"typeParameters",
	        		lv_typeParameters_5_0, 
	        		"LibTypeParameterCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'>' 
    {
        createLeafNode(grammarAccess.getLibIterationCSAccess().getGreaterThanSignKeyword_2_3(), null); 
    }
)?	'(' 
    {
        createLeafNode(grammarAccess.getLibIterationCSAccess().getLeftParenthesisKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibIterationCSAccess().getParametersLibParameterCSParserRuleCall_4_0(), currentNode); 
	    }
		lv_parameters_8_0=ruleLibParameterCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibIterationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_8_0, 
	        		"LibParameterCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getLibIterationCSAccess().getCommaKeyword_5_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibIterationCSAccess().getParametersLibParameterCSParserRuleCall_5_1_0(), currentNode); 
	    }
		lv_parameters_10_0=ruleLibParameterCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibIterationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_10_0, 
	        		"LibParameterCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	')' 
    {
        createLeafNode(grammarAccess.getLibIterationCSAccess().getRightParenthesisKeyword_6(), null); 
    }
	':' 
    {
        createLeafNode(grammarAccess.getLibIterationCSAccess().getColonKeyword_7(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibIterationCSAccess().getTypeLibTypedRefCSParserRuleCall_8_0(), currentNode); 
	    }
		lv_type_13_0=ruleLibTypedRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibIterationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_13_0, 
	        		"LibTypedRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'=>' 
    {
        createLeafNode(grammarAccess.getLibIterationCSAccess().getEqualsSignGreaterThanSignKeyword_9(), null); 
    }
(
(
		lv_class_15_0=RULE_SINGLE_QUOTED_STRING
		{
			createLeafNode(grammarAccess.getLibIterationCSAccess().getClassSINGLE_QUOTED_STRINGTerminalRuleCall_10_0(), "class"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibIterationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"class",
	        		lv_class_15_0, 
	        		"SINGLE_QUOTED_STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getLibIterationCSAccess().getSemicolonKeyword_11(), null); 
    }
)
;





// Entry rule entryRuleLibOperationCS
entryRuleLibOperationCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLibOperationCSRule(), currentNode); }
	 iv_ruleLibOperationCS=ruleLibOperationCS 
	 { $current=$iv_ruleLibOperationCS.current; } 
	 EOF 
;

// Rule LibOperationCS
ruleLibOperationCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'operation' 
    {
        createLeafNode(grammarAccess.getLibOperationCSAccess().getOperationKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibOperationCSAccess().getNameNameParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"Name", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'<' 
    {
        createLeafNode(grammarAccess.getLibOperationCSAccess().getLessThanSignKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibOperationCSAccess().getTypeParametersLibTypeParameterCSParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_typeParameters_3_0=ruleLibTypeParameterCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"typeParameters",
	        		lv_typeParameters_3_0, 
	        		"LibTypeParameterCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getLibOperationCSAccess().getCommaKeyword_2_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibOperationCSAccess().getTypeParametersLibTypeParameterCSParserRuleCall_2_2_1_0(), currentNode); 
	    }
		lv_typeParameters_5_0=ruleLibTypeParameterCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"typeParameters",
	        		lv_typeParameters_5_0, 
	        		"LibTypeParameterCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'>' 
    {
        createLeafNode(grammarAccess.getLibOperationCSAccess().getGreaterThanSignKeyword_2_3(), null); 
    }
)?	'(' 
    {
        createLeafNode(grammarAccess.getLibOperationCSAccess().getLeftParenthesisKeyword_3(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibOperationCSAccess().getParametersLibParameterCSParserRuleCall_4_0_0(), currentNode); 
	    }
		lv_parameters_8_0=ruleLibParameterCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_8_0, 
	        		"LibParameterCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getLibOperationCSAccess().getCommaKeyword_4_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibOperationCSAccess().getParametersLibParameterCSParserRuleCall_4_1_1_0(), currentNode); 
	    }
		lv_parameters_10_0=ruleLibParameterCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_10_0, 
	        		"LibParameterCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	')' 
    {
        createLeafNode(grammarAccess.getLibOperationCSAccess().getRightParenthesisKeyword_5(), null); 
    }
	':' 
    {
        createLeafNode(grammarAccess.getLibOperationCSAccess().getColonKeyword_6(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibOperationCSAccess().getTypeLibTypedRefCSParserRuleCall_7_0(), currentNode); 
	    }
		lv_type_13_0=ruleLibTypedRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_13_0, 
	        		"LibTypedRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'=>' 
    {
        createLeafNode(grammarAccess.getLibOperationCSAccess().getEqualsSignGreaterThanSignKeyword_8(), null); 
    }
(
(
		lv_class_15_0=RULE_SINGLE_QUOTED_STRING
		{
			createLeafNode(grammarAccess.getLibOperationCSAccess().getClassSINGLE_QUOTED_STRINGTerminalRuleCall_9_0(), "class"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"class",
	        		lv_class_15_0, 
	        		"SINGLE_QUOTED_STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getLibOperationCSAccess().getSemicolonKeyword_10(), null); 
    }
)
;





// Entry rule entryRuleLibPackageCS
entryRuleLibPackageCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLibPackageCSRule(), currentNode); }
	 iv_ruleLibPackageCS=ruleLibPackageCS 
	 { $current=$iv_ruleLibPackageCS.current; } 
	 EOF 
;

// Rule LibPackageCS
ruleLibPackageCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'package' 
    {
        createLeafNode(grammarAccess.getLibPackageCSAccess().getPackageKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibPackageCSAccess().getNameIdentifierParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibPackageCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getLibPackageCSAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibPackageCSAccess().getSubpackagesLibPackageCSParserRuleCall_3_0_0(), currentNode); 
	    }
		lv_subpackages_3_0=ruleLibPackageCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibPackageCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"subpackages",
	        		lv_subpackages_3_0, 
	        		"LibPackageCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibPackageCSAccess().getClassifiersLibClassifierCSParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_classifiers_4_0=ruleLibClassifierCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibPackageCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"classifiers",
	        		lv_classifiers_4_0, 
	        		"LibClassifierCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getLibPackageCSAccess().getRightCurlyBracketKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleLibParameterCS
entryRuleLibParameterCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLibParameterCSRule(), currentNode); }
	 iv_ruleLibParameterCS=ruleLibParameterCS 
	 { $current=$iv_ruleLibParameterCS.current; } 
	 EOF 
;

// Rule LibParameterCS
ruleLibParameterCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibParameterCSAccess().getNameIdentifierParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getLibParameterCSAccess().getColonKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibParameterCSAccess().getTypeLibTypedRefCSParserRuleCall_2_0(), currentNode); 
	    }
		lv_type_2_0=ruleLibTypedRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"LibTypedRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'[' 
    {
        createLeafNode(grammarAccess.getLibParameterCSAccess().getLeftSquareBracketKeyword_3_0(), null); 
    }
(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibParameterCSAccess().getLowerLOWERParserRuleCall_3_1_0_0_0(), currentNode); 
	    }
		lv_lower_4_0=ruleLOWER		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"lower",
	        		lv_lower_4_0, 
	        		"LOWER", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'..' 
    {
        createLeafNode(grammarAccess.getLibParameterCSAccess().getFullStopFullStopKeyword_3_1_0_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibParameterCSAccess().getUpperUPPERParserRuleCall_3_1_0_1_1_0(), currentNode); 
	    }
		lv_upper_6_0=ruleUPPER		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"upper",
	        		lv_upper_6_0, 
	        		"UPPER", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
    |(
(
(
		lv_multiplicity_7_1=	'*' 
    {
        createLeafNode(grammarAccess.getLibParameterCSAccess().getMultiplicityAsteriskKeyword_3_1_1_0_0(), "multiplicity"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "multiplicity", lv_multiplicity_7_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_multiplicity_7_2=	'+' 
    {
        createLeafNode(grammarAccess.getLibParameterCSAccess().getMultiplicityPlusSignKeyword_3_1_1_0_1(), "multiplicity"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "multiplicity", lv_multiplicity_7_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_multiplicity_7_3=	'?' 
    {
        createLeafNode(grammarAccess.getLibParameterCSAccess().getMultiplicityQuestionMarkKeyword_3_1_1_0_2(), "multiplicity"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "multiplicity", lv_multiplicity_7_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
))	']' 
    {
        createLeafNode(grammarAccess.getLibParameterCSAccess().getRightSquareBracketKeyword_3_2(), null); 
    }
)?)
;





// Entry rule entryRuleLibPropertyCS
entryRuleLibPropertyCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLibPropertyCSRule(), currentNode); }
	 iv_ruleLibPropertyCS=ruleLibPropertyCS 
	 { $current=$iv_ruleLibPropertyCS.current; } 
	 EOF 
;

// Rule LibPropertyCS
ruleLibPropertyCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'property' 
    {
        createLeafNode(grammarAccess.getLibPropertyCSAccess().getPropertyKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibPropertyCSAccess().getNameNameParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibPropertyCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"Name", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getLibPropertyCSAccess().getColonKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibPropertyCSAccess().getTypeLibTypedRefCSParserRuleCall_3_0(), currentNode); 
	    }
		lv_type_3_0=ruleLibTypedRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibPropertyCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_3_0, 
	        		"LibTypedRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'=>' 
    {
        createLeafNode(grammarAccess.getLibPropertyCSAccess().getEqualsSignGreaterThanSignKeyword_4(), null); 
    }
(
(
		lv_class_5_0=RULE_SINGLE_QUOTED_STRING
		{
			createLeafNode(grammarAccess.getLibPropertyCSAccess().getClassSINGLE_QUOTED_STRINGTerminalRuleCall_5_0(), "class"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibPropertyCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"class",
	        		lv_class_5_0, 
	        		"SINGLE_QUOTED_STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getLibPropertyCSAccess().getSemicolonKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleLibQualifiedTypeRefCS
entryRuleLibQualifiedTypeRefCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLibQualifiedTypeRefCSRule(), currentNode); }
	 iv_ruleLibQualifiedTypeRefCS=ruleLibQualifiedTypeRefCS 
	 { $current=$iv_ruleLibQualifiedTypeRefCS.current; } 
	 EOF 
;

// Rule LibQualifiedTypeRefCS
ruleLibQualifiedTypeRefCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getLibQualifiedTypeRefCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibQualifiedTypeRefCSAccess().getNamespaceNamespaceCSCrossReference_0_0(), currentNode); 
	    }
		ruleIdentifier		{ 
	        currentNode = currentNode.getParent();
	    }

)
)(	'<' 
    {
        createLeafNode(grammarAccess.getLibQualifiedTypeRefCSAccess().getLessThanSignKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibQualifiedTypeRefCSAccess().getTypeArgumentsLibTypeRefCSParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_typeArguments_2_0=ruleLibTypeRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibQualifiedTypeRefCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"typeArguments",
	        		lv_typeArguments_2_0, 
	        		"LibTypeRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getLibQualifiedTypeRefCSAccess().getCommaKeyword_1_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibQualifiedTypeRefCSAccess().getTypeArgumentsLibTypeRefCSParserRuleCall_1_2_1_0(), currentNode); 
	    }
		lv_typeArguments_4_0=ruleLibTypeRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibQualifiedTypeRefCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"typeArguments",
	        		lv_typeArguments_4_0, 
	        		"LibTypeRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'>' 
    {
        createLeafNode(grammarAccess.getLibQualifiedTypeRefCSAccess().getGreaterThanSignKeyword_1_3(), null); 
    }
)?	'::' 
    {
        createLeafNode(grammarAccess.getLibQualifiedTypeRefCSAccess().getColonColonKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibQualifiedTypeRefCSAccess().getElementLibTypedRefCSParserRuleCall_3_0(), currentNode); 
	    }
		lv_element_7_0=ruleLibTypedRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibQualifiedTypeRefCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"element",
	        		lv_element_7_0, 
	        		"LibTypedRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleLibTypeParameterCS
entryRuleLibTypeParameterCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLibTypeParameterCSRule(), currentNode); }
	 iv_ruleLibTypeParameterCS=ruleLibTypeParameterCS 
	 { $current=$iv_ruleLibTypeParameterCS.current; } 
	 EOF 
;

// Rule LibTypeParameterCS
ruleLibTypeParameterCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibTypeParameterCSAccess().getNameIdentifierParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibTypeParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((	'extends' 
    {
        createLeafNode(grammarAccess.getLibTypeParameterCSAccess().getExtendsKeyword_1_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibTypeParameterCSAccess().getExtendsLibTypedRefCSParserRuleCall_1_0_1_0(), currentNode); 
	    }
		lv_extends_2_0=ruleLibTypedRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibTypeParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"extends",
	        		lv_extends_2_0, 
	        		"LibTypedRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'&&' 
    {
        createLeafNode(grammarAccess.getLibTypeParameterCSAccess().getAmpersandAmpersandKeyword_1_0_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibTypeParameterCSAccess().getExtendsLibTypedRefCSParserRuleCall_1_0_2_1_0(), currentNode); 
	    }
		lv_extends_4_0=ruleLibTypedRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibTypeParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"extends",
	        		lv_extends_4_0, 
	        		"LibTypedRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
    |(	'super' 
    {
        createLeafNode(grammarAccess.getLibTypeParameterCSAccess().getSuperKeyword_1_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibTypeParameterCSAccess().getSuperLibTypedRefCSParserRuleCall_1_1_1_0(), currentNode); 
	    }
		lv_super_6_0=ruleLibTypedRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibTypeParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"super",
	        		lv_super_6_0, 
	        		"LibTypedRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))?)
;





// Entry rule entryRuleLibTypeRefCS
entryRuleLibTypeRefCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLibTypeRefCSRule(), currentNode); }
	 iv_ruleLibTypeRefCS=ruleLibTypeRefCS 
	 { $current=$iv_ruleLibTypeRefCS.current; } 
	 EOF 
;

// Rule LibTypeRefCS
ruleLibTypeRefCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getLibTypeRefCSAccess().getLibTypedRefCSParserRuleCall_0(), currentNode); 
    }
    this_LibTypedRefCS_0=ruleLibTypedRefCS
    { 
        $current = $this_LibTypedRefCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getLibTypeRefCSAccess().getLibWildcardTypeRefCSParserRuleCall_1(), currentNode); 
    }
    this_LibWildcardTypeRefCS_1=ruleLibWildcardTypeRefCS
    { 
        $current = $this_LibWildcardTypeRefCS_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleLibTypedRefCS
entryRuleLibTypedRefCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLibTypedRefCSRule(), currentNode); }
	 iv_ruleLibTypedRefCS=ruleLibTypedRefCS 
	 { $current=$iv_ruleLibTypedRefCS.current; } 
	 EOF 
;

// Rule LibTypedRefCS
ruleLibTypedRefCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getLibTypedRefCSAccess().getLibQualifiedTypeRefCSParserRuleCall_0(), currentNode); 
    }
    this_LibQualifiedTypeRefCS_0=ruleLibQualifiedTypeRefCS
    { 
        $current = $this_LibQualifiedTypeRefCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getLibTypedRefCSAccess().getLibTypedTypeRefCSParserRuleCall_1(), currentNode); 
    }
    this_LibTypedTypeRefCS_1=ruleLibTypedTypeRefCS
    { 
        $current = $this_LibTypedTypeRefCS_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleLibTypedTypeRefCS
entryRuleLibTypedTypeRefCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLibTypedTypeRefCSRule(), currentNode); }
	 iv_ruleLibTypedTypeRefCS=ruleLibTypedTypeRefCS 
	 { $current=$iv_ruleLibTypedTypeRefCS.current; } 
	 EOF 
;

// Rule LibTypedTypeRefCS
ruleLibTypedTypeRefCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getLibTypedTypeRefCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibTypedTypeRefCSAccess().getTypeTypeCSCrossReference_0_0(), currentNode); 
	    }
		ruleIdentifier		{ 
	        currentNode = currentNode.getParent();
	    }

)
)(	'<' 
    {
        createLeafNode(grammarAccess.getLibTypedTypeRefCSAccess().getLessThanSignKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibTypedTypeRefCSAccess().getTypeArgumentsLibTypeRefCSParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_typeArguments_2_0=ruleLibTypeRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibTypedTypeRefCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"typeArguments",
	        		lv_typeArguments_2_0, 
	        		"LibTypeRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getLibTypedTypeRefCSAccess().getCommaKeyword_1_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibTypedTypeRefCSAccess().getTypeArgumentsLibTypeRefCSParserRuleCall_1_2_1_0(), currentNode); 
	    }
		lv_typeArguments_4_0=ruleLibTypeRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibTypedTypeRefCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"typeArguments",
	        		lv_typeArguments_4_0, 
	        		"LibTypeRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'>' 
    {
        createLeafNode(grammarAccess.getLibTypedTypeRefCSAccess().getGreaterThanSignKeyword_1_3(), null); 
    }
)?)
;





// Entry rule entryRuleLibWildcardTypeRefCS
entryRuleLibWildcardTypeRefCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLibWildcardTypeRefCSRule(), currentNode); }
	 iv_ruleLibWildcardTypeRefCS=ruleLibWildcardTypeRefCS 
	 { $current=$iv_ruleLibWildcardTypeRefCS.current; } 
	 EOF 
;

// Rule LibWildcardTypeRefCS
ruleLibWildcardTypeRefCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getLibWildcardTypeRefCSAccess().getWildcardTypeRefCSAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getLibWildcardTypeRefCSAccess().getWildcardTypeRefCSAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'?' 
    {
        createLeafNode(grammarAccess.getLibWildcardTypeRefCSAccess().getQuestionMarkKeyword_1(), null); 
    }
((	'extends' 
    {
        createLeafNode(grammarAccess.getLibWildcardTypeRefCSAccess().getExtendsKeyword_2_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibWildcardTypeRefCSAccess().getExtendsLibTypedRefCSParserRuleCall_2_0_1_0(), currentNode); 
	    }
		lv_extends_3_0=ruleLibTypedRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibWildcardTypeRefCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"extends",
	        		lv_extends_3_0, 
	        		"LibTypedRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	'super' 
    {
        createLeafNode(grammarAccess.getLibWildcardTypeRefCSAccess().getSuperKeyword_2_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibWildcardTypeRefCSAccess().getSuperLibTypedRefCSParserRuleCall_2_1_1_0(), currentNode); 
	    }
		lv_super_5_0=ruleLibTypedRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibWildcardTypeRefCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"super",
	        		lv_super_5_0, 
	        		"LibTypedRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))?)
;





RULE_DOUBLE_QUOTED_STRING : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"';

RULE_SINGLE_QUOTED_STRING : '\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'';

RULE_ID_TERMINAL : (('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*|'_' RULE_SINGLE_QUOTED_STRING);

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '--' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_INT : ('0'..'9')+;


