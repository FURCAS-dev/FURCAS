/*
* generated by Xtext
*/
grammar InternalEssentialOCL;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package org.eclipse.ocl.examples.xtext.essentialocl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.ocl.examples.xtext.essentialocl.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.ocl.examples.xtext.essentialocl.services.EssentialOCLGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private EssentialOCLGrammarAccess grammarAccess;
 	
    public InternalEssentialOCLParser(TokenStream input, IAstFactory factory, EssentialOCLGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/eclipse/ocl/examples/xtext/essentialocl/parser/antlr/internal/InternalEssentialOCL.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected EssentialOCLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getModelRule(), currentNode); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getModelAccess().getOclExpressionCSParserRuleCall(), currentNode); 
    }
    this_OclExpressionCS_0=ruleOclExpressionCS
    { 
        $current = $this_OclExpressionCS_0.current; 
        currentNode = currentNode.getParent();
    }

;





// Entry rule entryRuleREAL_LITERAL
entryRuleREAL_LITERAL returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getREAL_LITERALRule(), currentNode); } 
	 iv_ruleREAL_LITERAL=ruleREAL_LITERAL 
	 { $current=$iv_ruleREAL_LITERAL.current.getText(); }  
	 EOF 
;

// Rule REAL_LITERAL
ruleREAL_LITERAL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    createLeafNode(grammarAccess.getREAL_LITERALAccess().getINTTerminalRuleCall_0(), null); 
    }
((
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getREAL_LITERALAccess().getFullStopKeyword_1_0_0(), null); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    createLeafNode(grammarAccess.getREAL_LITERALAccess().getINTTerminalRuleCall_1_0_1(), null); 
    }
)
    |((
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getREAL_LITERALAccess().getFullStopKeyword_1_1_0_0(), null); 
    }
    this_INT_4=RULE_INT    {
		$current.merge(this_INT_4);
    }

    { 
    createLeafNode(grammarAccess.getREAL_LITERALAccess().getINTTerminalRuleCall_1_1_0_1(), null); 
    }
)?(
	kw='e' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getREAL_LITERALAccess().getEKeyword_1_1_1_0(), null); 
    }

    |
	kw='E' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getREAL_LITERALAccess().getEKeyword_1_1_1_1(), null); 
    }
)(
	kw='+' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getREAL_LITERALAccess().getPlusSignKeyword_1_1_2_0(), null); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getREAL_LITERALAccess().getHyphenMinusKeyword_1_1_2_1(), null); 
    }
)?    this_INT_9=RULE_INT    {
		$current.merge(this_INT_9);
    }

    { 
    createLeafNode(grammarAccess.getREAL_LITERALAccess().getINTTerminalRuleCall_1_1_3(), null); 
    }
)))
    ;





// Entry rule entryRuleINTEGER_LITERAL
entryRuleINTEGER_LITERAL returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getINTEGER_LITERALRule(), currentNode); } 
	 iv_ruleINTEGER_LITERAL=ruleINTEGER_LITERAL 
	 { $current=$iv_ruleINTEGER_LITERAL.current.getText(); }  
	 EOF 
;

// Rule INTEGER_LITERAL
ruleINTEGER_LITERAL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    createLeafNode(grammarAccess.getINTEGER_LITERALAccess().getINTTerminalRuleCall(), null); 
    }

    ;







// Entry rule entryRuletupleKeywordCS
entryRuletupleKeywordCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTupleKeywordCSRule(), currentNode); }
	 iv_ruletupleKeywordCS=ruletupleKeywordCS 
	 { $current=$iv_ruletupleKeywordCS.current; } 
	 EOF 
;

// Rule tupleKeywordCS
ruletupleKeywordCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=	'Tuple' 
    {
        createLeafNode(grammarAccess.getTupleKeywordCSAccess().getValueTupleKeyword_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleKeywordCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_0_0, "Tuple", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRulerestrictedKeywordCS
entryRulerestrictedKeywordCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRestrictedKeywordCSRule(), currentNode); }
	 iv_rulerestrictedKeywordCS=rulerestrictedKeywordCS 
	 { $current=$iv_rulerestrictedKeywordCS.current; } 
	 EOF 
;

// Rule restrictedKeywordCS
rulerestrictedKeywordCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getRestrictedKeywordCSAccess().getCollectionTypeIdentifierCSParserRuleCall_0(), currentNode); 
    }
    this_CollectionTypeIdentifierCS_0=ruleCollectionTypeIdentifierCS
    { 
        $current = $this_CollectionTypeIdentifierCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getRestrictedKeywordCSAccess().getPrimitiveTypeCSParserRuleCall_1(), currentNode); 
    }
    this_primitiveTypeCS_1=ruleprimitiveTypeCS
    { 
        $current = $this_primitiveTypeCS_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getRestrictedKeywordCSAccess().getTupleKeywordCSParserRuleCall_2(), currentNode); 
    }
    this_tupleKeywordCS_2=ruletupleKeywordCS
    { 
        $current = $this_tupleKeywordCS_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleselfKeywordCS
entryRuleselfKeywordCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSelfKeywordCSRule(), currentNode); }
	 iv_ruleselfKeywordCS=ruleselfKeywordCS 
	 { $current=$iv_ruleselfKeywordCS.current; } 
	 EOF 
;

// Rule selfKeywordCS
ruleselfKeywordCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=	'self' 
    {
        createLeafNode(grammarAccess.getSelfKeywordCSAccess().getValueSelfKeyword_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelfKeywordCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_0_0, "self", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRulesimpleNameCS
entryRulesimpleNameCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSimpleNameCSRule(), currentNode); }
	 iv_rulesimpleNameCS=rulesimpleNameCS 
	 { $current=$iv_rulesimpleNameCS.current; } 
	 EOF 
;

// Rule simpleNameCS
rulesimpleNameCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getSimpleNameCSAccess().getValueIDTerminalRuleCall_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSimpleNameCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleunreservedSimpleNameCS
entryRuleunreservedSimpleNameCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUnreservedSimpleNameCSRule(), currentNode); }
	 iv_ruleunreservedSimpleNameCS=ruleunreservedSimpleNameCS 
	 { $current=$iv_ruleunreservedSimpleNameCS.current; } 
	 EOF 
;

// Rule unreservedSimpleNameCS
ruleunreservedSimpleNameCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getUnreservedSimpleNameCSAccess().getSimpleNameCSParserRuleCall_0(), currentNode); 
    }
    this_simpleNameCS_0=rulesimpleNameCS
    { 
        $current = $this_simpleNameCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getUnreservedSimpleNameCSAccess().getRestrictedKeywordCSParserRuleCall_1(), currentNode); 
    }
    this_restrictedKeywordCS_1=rulerestrictedKeywordCS
    { 
        $current = $this_restrictedKeywordCS_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRulepathNameCS
entryRulepathNameCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPathNameCSRule(), currentNode); }
	 iv_rulepathNameCS=rulepathNameCS 
	 { $current=$iv_rulepathNameCS.current; } 
	 EOF 
;

// Rule pathNameCS
rulepathNameCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPathNameCSAccess().getSimpleNamesSimpleNameCSParserRuleCall_0_0(), currentNode); 
	    }
		lv_simpleNames_0_0=rulesimpleNameCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPathNameCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"simpleNames",
	        		lv_simpleNames_0_0, 
	        		"simpleNameCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'::' 
    {
        createLeafNode(grammarAccess.getPathNameCSAccess().getColonColonKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPathNameCSAccess().getSimpleNamesUnreservedSimpleNameCSParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_simpleNames_2_0=ruleunreservedSimpleNameCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPathNameCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"simpleNames",
	        		lv_simpleNames_2_0, 
	        		"unreservedSimpleNameCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleprimitiveTypeCS
entryRuleprimitiveTypeCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrimitiveTypeCSRule(), currentNode); }
	 iv_ruleprimitiveTypeCS=ruleprimitiveTypeCS 
	 { $current=$iv_ruleprimitiveTypeCS.current; } 
	 EOF 
;

// Rule primitiveTypeCS
ruleprimitiveTypeCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_value_0_0=	'Boolean' 
    {
        createLeafNode(grammarAccess.getPrimitiveTypeCSAccess().getValueBooleanKeyword_0_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_0_0, "Boolean", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_value_1_0=	'Integer' 
    {
        createLeafNode(grammarAccess.getPrimitiveTypeCSAccess().getValueIntegerKeyword_1_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_1_0, "Integer", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_value_2_0=	'Real' 
    {
        createLeafNode(grammarAccess.getPrimitiveTypeCSAccess().getValueRealKeyword_2_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_2_0, "Real", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_value_3_0=	'String' 
    {
        createLeafNode(grammarAccess.getPrimitiveTypeCSAccess().getValueStringKeyword_3_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_3_0, "String", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_value_4_0=	'UnlimitedNatural' 
    {
        createLeafNode(grammarAccess.getPrimitiveTypeCSAccess().getValueUnlimitedNaturalKeyword_4_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_4_0, "UnlimitedNatural", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_value_5_0=	'OclAny' 
    {
        createLeafNode(grammarAccess.getPrimitiveTypeCSAccess().getValueOclAnyKeyword_5_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_5_0, "OclAny", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_value_6_0=	'OclInvalid' 
    {
        createLeafNode(grammarAccess.getPrimitiveTypeCSAccess().getValueOclInvalidKeyword_6_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_6_0, "OclInvalid", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_value_7_0=	'OclVoid' 
    {
        createLeafNode(grammarAccess.getPrimitiveTypeCSAccess().getValueOclVoidKeyword_7_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_7_0, "OclVoid", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleCollectionTypeIdentifierCS
entryRuleCollectionTypeIdentifierCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCollectionTypeIdentifierCSRule(), currentNode); }
	 iv_ruleCollectionTypeIdentifierCS=ruleCollectionTypeIdentifierCS 
	 { $current=$iv_ruleCollectionTypeIdentifierCS.current; } 
	 EOF 
;

// Rule CollectionTypeIdentifierCS
ruleCollectionTypeIdentifierCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_value_0_0=	'Set' 
    {
        createLeafNode(grammarAccess.getCollectionTypeIdentifierCSAccess().getValueSetKeyword_0_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionTypeIdentifierCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_0_0, "Set", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_value_1_0=	'Bag' 
    {
        createLeafNode(grammarAccess.getCollectionTypeIdentifierCSAccess().getValueBagKeyword_1_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionTypeIdentifierCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_1_0, "Bag", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_value_2_0=	'Sequence' 
    {
        createLeafNode(grammarAccess.getCollectionTypeIdentifierCSAccess().getValueSequenceKeyword_2_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionTypeIdentifierCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_2_0, "Sequence", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_value_3_0=	'Collection' 
    {
        createLeafNode(grammarAccess.getCollectionTypeIdentifierCSAccess().getValueCollectionKeyword_3_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionTypeIdentifierCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_3_0, "Collection", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_value_4_0=	'OrderedSet' 
    {
        createLeafNode(grammarAccess.getCollectionTypeIdentifierCSAccess().getValueOrderedSetKeyword_4_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionTypeIdentifierCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_4_0, "OrderedSet", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuletypeCS
entryRuletypeCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypeCSRule(), currentNode); }
	 iv_ruletypeCS=ruletypeCS 
	 { $current=$iv_ruletypeCS.current; } 
	 EOF 
;

// Rule typeCS
ruletypeCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeCSAccess().getPrimitiveTypeCSParserRuleCall_0(), currentNode); 
    }
    this_primitiveTypeCS_0=ruleprimitiveTypeCS
    { 
        $current = $this_primitiveTypeCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeCSAccess().getPathNameCSParserRuleCall_1(), currentNode); 
    }
    this_pathNameCS_1=rulepathNameCS
    { 
        $current = $this_pathNameCS_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeCSAccess().getCollectionTypeCSParserRuleCall_2(), currentNode); 
    }
    this_collectionTypeCS_2=rulecollectionTypeCS
    { 
        $current = $this_collectionTypeCS_2.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeCSAccess().getTupleTypeCSParserRuleCall_3(), currentNode); 
    }
    this_tupleTypeCS_3=ruletupleTypeCS
    { 
        $current = $this_tupleTypeCS_3.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRulecollectionTypeCS
entryRulecollectionTypeCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCollectionTypeCSRule(), currentNode); }
	 iv_rulecollectionTypeCS=rulecollectionTypeCS 
	 { $current=$iv_rulecollectionTypeCS.current; } 
	 EOF 
;

// Rule collectionTypeCS
rulecollectionTypeCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCollectionTypeCSAccess().getValueCollectionTypeIdentifierCSParserRuleCall_0_0(), currentNode); 
	    }
		lv_value_0_0=ruleCollectionTypeIdentifierCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"CollectionTypeIdentifierCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'(' 
    {
        createLeafNode(grammarAccess.getCollectionTypeCSAccess().getLeftParenthesisKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCollectionTypeCSAccess().getTypeCSTypeCSParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_typeCS_2_0=ruletypeCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"typeCS",
	        		lv_typeCS_2_0, 
	        		"typeCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getCollectionTypeCSAccess().getRightParenthesisKeyword_1_2(), null); 
    }
)?)
;





// Entry rule entryRuletupleTypeCS
entryRuletupleTypeCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTupleTypeCSRule(), currentNode); }
	 iv_ruletupleTypeCS=ruletupleTypeCS 
	 { $current=$iv_ruletupleTypeCS.current; } 
	 EOF 
;

// Rule tupleTypeCS
ruletupleTypeCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_value_0_0=	'Tuple' 
    {
        createLeafNode(grammarAccess.getTupleTypeCSAccess().getValueTupleKeyword_0_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_0_0, "Tuple", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getTupleTypeCSAccess().getLeftParenthesisKeyword_1(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTupleTypeCSAccess().getPartTuplePartCSParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_part_2_0=ruletuplePartCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"part",
	        		lv_part_2_0, 
	        		"tuplePartCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getTupleTypeCSAccess().getCommaKeyword_2_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTupleTypeCSAccess().getPartTuplePartCSParserRuleCall_2_1_1_0(), currentNode); 
	    }
		lv_part_4_0=ruletuplePartCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"part",
	        		lv_part_4_0, 
	        		"tuplePartCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	')' 
    {
        createLeafNode(grammarAccess.getTupleTypeCSAccess().getRightParenthesisKeyword_3(), null); 
    }
)
;





// Entry rule entryRuletuplePartCS
entryRuletuplePartCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTuplePartCSRule(), currentNode); }
	 iv_ruletuplePartCS=ruletuplePartCS 
	 { $current=$iv_ruletuplePartCS.current; } 
	 EOF 
;

// Rule tuplePartCS
ruletuplePartCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTuplePartCSAccess().getNameSimpleNameCSParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=rulesimpleNameCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTuplePartCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"simpleNameCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getTuplePartCSAccess().getColonKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTuplePartCSAccess().getTypeTypeCSParserRuleCall_2_0(), currentNode); 
	    }
		lv_type_2_0=ruletypeCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTuplePartCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"typeCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleLiteralExpCS
entryRuleLiteralExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLiteralExpCSRule(), currentNode); }
	 iv_ruleLiteralExpCS=ruleLiteralExpCS 
	 { $current=$iv_ruleLiteralExpCS.current; } 
	 EOF 
;

// Rule LiteralExpCS
ruleLiteralExpCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralExpCSAccess().getCollectionLiteralExpCSParserRuleCall_0(), currentNode); 
    }
    this_CollectionLiteralExpCS_0=ruleCollectionLiteralExpCS
    { 
        $current = $this_CollectionLiteralExpCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralExpCSAccess().getTupleLiteralExpCSParserRuleCall_1(), currentNode); 
    }
    this_TupleLiteralExpCS_1=ruleTupleLiteralExpCS
    { 
        $current = $this_TupleLiteralExpCS_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralExpCSAccess().getPrimitiveLiteralExpCSParserRuleCall_2(), currentNode); 
    }
    this_PrimitiveLiteralExpCS_2=rulePrimitiveLiteralExpCS
    { 
        $current = $this_PrimitiveLiteralExpCS_2.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralExpCSAccess().getTypeLiteralExpCSParserRuleCall_3(), currentNode); 
    }
    this_TypeLiteralExpCS_3=ruleTypeLiteralExpCS
    { 
        $current = $this_TypeLiteralExpCS_3.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleCollectionLiteralExpCS
entryRuleCollectionLiteralExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCollectionLiteralExpCSRule(), currentNode); }
	 iv_ruleCollectionLiteralExpCS=ruleCollectionLiteralExpCS 
	 { $current=$iv_ruleCollectionLiteralExpCS.current; } 
	 EOF 
;

// Rule CollectionLiteralExpCS
ruleCollectionLiteralExpCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getCollectionLiteralExpCSAccess().getCollectionTypeCSParserRuleCall_0(), currentNode); 
    }
    this_collectionTypeCS_0=rulecollectionTypeCS
    { 
        $current = $this_collectionTypeCS_0.current; 
        currentNode = currentNode.getParent();
    }
(	'{' 
    {
        createLeafNode(grammarAccess.getCollectionLiteralExpCSAccess().getLeftCurlyBracketKeyword_1_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCollectionLiteralExpCSAccess().getCollectionLiteralPartsCollectionLiteralPartCSParserRuleCall_1_1_0_0(), currentNode); 
	    }
		lv_collectionLiteralParts_2_0=ruleCollectionLiteralPartCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionLiteralExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"collectionLiteralParts",
	        		lv_collectionLiteralParts_2_0, 
	        		"CollectionLiteralPartCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getCollectionLiteralExpCSAccess().getCommaKeyword_1_1_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCollectionLiteralExpCSAccess().getCollectionLiteralPartsCollectionLiteralPartCSParserRuleCall_1_1_1_1_0(), currentNode); 
	    }
		lv_collectionLiteralParts_4_0=ruleCollectionLiteralPartCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionLiteralExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"collectionLiteralParts",
	        		lv_collectionLiteralParts_4_0, 
	        		"CollectionLiteralPartCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	'}' 
    {
        createLeafNode(grammarAccess.getCollectionLiteralExpCSAccess().getRightCurlyBracketKeyword_1_2(), null); 
    }
)?)
;





// Entry rule entryRuleCollectionLiteralPartCS
entryRuleCollectionLiteralPartCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCollectionLiteralPartCSRule(), currentNode); }
	 iv_ruleCollectionLiteralPartCS=ruleCollectionLiteralPartCS 
	 { $current=$iv_ruleCollectionLiteralPartCS.current; } 
	 EOF 
;

// Rule CollectionLiteralPartCS
ruleCollectionLiteralPartCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCollectionLiteralPartCSAccess().getExpressionCSOclExpressionCSParserRuleCall_0_0(), currentNode); 
	    }
		lv_expressionCS_0_0=ruleOclExpressionCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionLiteralPartCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expressionCS",
	        		lv_expressionCS_0_0, 
	        		"OclExpressionCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'..' 
    {
        createLeafNode(grammarAccess.getCollectionLiteralPartCSAccess().getFullStopFullStopKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCollectionLiteralPartCSAccess().getLastExpressionCSOclExpressionCSParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_lastExpressionCS_2_0=ruleOclExpressionCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionLiteralPartCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"lastExpressionCS",
	        		lv_lastExpressionCS_2_0, 
	        		"OclExpressionCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRulePrimitiveLiteralExpCS
entryRulePrimitiveLiteralExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrimitiveLiteralExpCSRule(), currentNode); }
	 iv_rulePrimitiveLiteralExpCS=rulePrimitiveLiteralExpCS 
	 { $current=$iv_rulePrimitiveLiteralExpCS.current; } 
	 EOF 
;

// Rule PrimitiveLiteralExpCS
rulePrimitiveLiteralExpCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimitiveLiteralExpCSAccess().getIntegerLiteralExpCSParserRuleCall_0(), currentNode); 
    }
    this_IntegerLiteralExpCS_0=ruleIntegerLiteralExpCS
    { 
        $current = $this_IntegerLiteralExpCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimitiveLiteralExpCSAccess().getRealLiteralExpCSParserRuleCall_1(), currentNode); 
    }
    this_RealLiteralExpCS_1=ruleRealLiteralExpCS
    { 
        $current = $this_RealLiteralExpCS_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimitiveLiteralExpCSAccess().getStringLiteralExpCSParserRuleCall_2(), currentNode); 
    }
    this_StringLiteralExpCS_2=ruleStringLiteralExpCS
    { 
        $current = $this_StringLiteralExpCS_2.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimitiveLiteralExpCSAccess().getBooleanLiteralExpCSParserRuleCall_3(), currentNode); 
    }
    this_BooleanLiteralExpCS_3=ruleBooleanLiteralExpCS
    { 
        $current = $this_BooleanLiteralExpCS_3.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimitiveLiteralExpCSAccess().getUnlimitedNaturalLiteralExpCSParserRuleCall_4(), currentNode); 
    }
    this_UnlimitedNaturalLiteralExpCS_4=ruleUnlimitedNaturalLiteralExpCS
    { 
        $current = $this_UnlimitedNaturalLiteralExpCS_4.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimitiveLiteralExpCSAccess().getInvalidLiteralExpCSParserRuleCall_5(), currentNode); 
    }
    this_InvalidLiteralExpCS_5=ruleInvalidLiteralExpCS
    { 
        $current = $this_InvalidLiteralExpCS_5.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimitiveLiteralExpCSAccess().getNullLiteralExpCSParserRuleCall_6(), currentNode); 
    }
    this_NullLiteralExpCS_6=ruleNullLiteralExpCS
    { 
        $current = $this_NullLiteralExpCS_6.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleTupleLiteralExpCS
entryRuleTupleLiteralExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTupleLiteralExpCSRule(), currentNode); }
	 iv_ruleTupleLiteralExpCS=ruleTupleLiteralExpCS 
	 { $current=$iv_ruleTupleLiteralExpCS.current; } 
	 EOF 
;

// Rule TupleLiteralExpCS
ruleTupleLiteralExpCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getTupleLiteralExpCSAccess().getTupleLiteralExpCSAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTupleLiteralExpCSAccess().getTupleLiteralExpCSAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'Tuple' 
    {
        createLeafNode(grammarAccess.getTupleLiteralExpCSAccess().getTupleKeyword_1(), null); 
    }
(	'{' 
    {
        createLeafNode(grammarAccess.getTupleLiteralExpCSAccess().getLeftCurlyBracketKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTupleLiteralExpCSAccess().getPartTupleLiteralPartCSParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_part_3_0=ruleTupleLiteralPartCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleLiteralExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"part",
	        		lv_part_3_0, 
	        		"TupleLiteralPartCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getTupleLiteralExpCSAccess().getCommaKeyword_2_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTupleLiteralExpCSAccess().getPartTupleLiteralPartCSParserRuleCall_2_2_1_0(), currentNode); 
	    }
		lv_part_5_0=ruleTupleLiteralPartCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleLiteralExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"part",
	        		lv_part_5_0, 
	        		"TupleLiteralPartCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getTupleLiteralExpCSAccess().getRightCurlyBracketKeyword_2_3(), null); 
    }
)?)
;





// Entry rule entryRuleTupleLiteralPartCS
entryRuleTupleLiteralPartCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTupleLiteralPartCSRule(), currentNode); }
	 iv_ruleTupleLiteralPartCS=ruleTupleLiteralPartCS 
	 { $current=$iv_ruleTupleLiteralPartCS.current; } 
	 EOF 
;

// Rule TupleLiteralPartCS
ruleTupleLiteralPartCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTupleLiteralPartCSAccess().getNameSimpleNameCSParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=rulesimpleNameCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleLiteralPartCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"simpleNameCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	':' 
    {
        createLeafNode(grammarAccess.getTupleLiteralPartCSAccess().getColonKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTupleLiteralPartCSAccess().getTypeTypeCSParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_type_2_0=ruletypeCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleLiteralPartCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"typeCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?	'=' 
    {
        createLeafNode(grammarAccess.getTupleLiteralPartCSAccess().getEqualsSignKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTupleLiteralPartCSAccess().getInitExpressionOclExpressionCSParserRuleCall_3_0(), currentNode); 
	    }
		lv_initExpression_4_0=ruleOclExpressionCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleLiteralPartCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"initExpression",
	        		lv_initExpression_4_0, 
	        		"OclExpressionCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleIntegerLiteralExpCS
entryRuleIntegerLiteralExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIntegerLiteralExpCSRule(), currentNode); }
	 iv_ruleIntegerLiteralExpCS=ruleIntegerLiteralExpCS 
	 { $current=$iv_ruleIntegerLiteralExpCS.current; } 
	 EOF 
;

// Rule IntegerLiteralExpCS
ruleIntegerLiteralExpCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIntegerLiteralExpCSAccess().getIntegerSymbolINTEGER_LITERALParserRuleCall_0(), currentNode); 
	    }
		lv_integerSymbol_0_0=ruleINTEGER_LITERAL		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntegerLiteralExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"integerSymbol",
	        		lv_integerSymbol_0_0, 
	        		"INTEGER_LITERAL", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleRealLiteralExpCS
entryRuleRealLiteralExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRealLiteralExpCSRule(), currentNode); }
	 iv_ruleRealLiteralExpCS=ruleRealLiteralExpCS 
	 { $current=$iv_ruleRealLiteralExpCS.current; } 
	 EOF 
;

// Rule RealLiteralExpCS
ruleRealLiteralExpCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRealLiteralExpCSAccess().getRealSymbolREAL_LITERALParserRuleCall_0(), currentNode); 
	    }
		lv_realSymbol_0_0=ruleREAL_LITERAL		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRealLiteralExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"realSymbol",
	        		lv_realSymbol_0_0, 
	        		"REAL_LITERAL", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleStringLiteralExpCS
entryRuleStringLiteralExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStringLiteralExpCSRule(), currentNode); }
	 iv_ruleStringLiteralExpCS=ruleStringLiteralExpCS 
	 { $current=$iv_ruleStringLiteralExpCS.current; } 
	 EOF 
;

// Rule StringLiteralExpCS
ruleStringLiteralExpCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_stringSymbol_0_0=RULE_STRING_LITERAL
		{
			createLeafNode(grammarAccess.getStringLiteralExpCSAccess().getStringSymbolSTRING_LITERALTerminalRuleCall_0(), "stringSymbol"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStringLiteralExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"stringSymbol",
	        		lv_stringSymbol_0_0, 
	        		"STRING_LITERAL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)+
;





// Entry rule entryRuleBooleanLiteralExpCS
entryRuleBooleanLiteralExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBooleanLiteralExpCSRule(), currentNode); }
	 iv_ruleBooleanLiteralExpCS=ruleBooleanLiteralExpCS 
	 { $current=$iv_ruleBooleanLiteralExpCS.current; } 
	 EOF 
;

// Rule BooleanLiteralExpCS
ruleBooleanLiteralExpCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_value_0_0=	'true' 
    {
        createLeafNode(grammarAccess.getBooleanLiteralExpCSAccess().getValueTrueKeyword_0_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanLiteralExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_0_0, "true", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_value_1_0=	'false' 
    {
        createLeafNode(grammarAccess.getBooleanLiteralExpCSAccess().getValueFalseKeyword_1_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanLiteralExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_1_0, "false", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleUnlimitedNaturalLiteralExpCS
entryRuleUnlimitedNaturalLiteralExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUnlimitedNaturalLiteralExpCSRule(), currentNode); }
	 iv_ruleUnlimitedNaturalLiteralExpCS=ruleUnlimitedNaturalLiteralExpCS 
	 { $current=$iv_ruleUnlimitedNaturalLiteralExpCS.current; } 
	 EOF 
;

// Rule UnlimitedNaturalLiteralExpCS
ruleUnlimitedNaturalLiteralExpCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getUnlimitedNaturalLiteralExpCSAccess().getUnlimitedNaturalLiteralExpCSAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getUnlimitedNaturalLiteralExpCSAccess().getUnlimitedNaturalLiteralExpCSAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'*' 
    {
        createLeafNode(grammarAccess.getUnlimitedNaturalLiteralExpCSAccess().getAsteriskKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleInvalidLiteralExpCS
entryRuleInvalidLiteralExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInvalidLiteralExpCSRule(), currentNode); }
	 iv_ruleInvalidLiteralExpCS=ruleInvalidLiteralExpCS 
	 { $current=$iv_ruleInvalidLiteralExpCS.current; } 
	 EOF 
;

// Rule InvalidLiteralExpCS
ruleInvalidLiteralExpCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getInvalidLiteralExpCSAccess().getInvalidLiteralExpCSAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getInvalidLiteralExpCSAccess().getInvalidLiteralExpCSAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'invalid' 
    {
        createLeafNode(grammarAccess.getInvalidLiteralExpCSAccess().getInvalidKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleNullLiteralExpCS
entryRuleNullLiteralExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNullLiteralExpCSRule(), currentNode); }
	 iv_ruleNullLiteralExpCS=ruleNullLiteralExpCS 
	 { $current=$iv_ruleNullLiteralExpCS.current; } 
	 EOF 
;

// Rule NullLiteralExpCS
ruleNullLiteralExpCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getNullLiteralExpCSAccess().getNullLiteralExpCSAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getNullLiteralExpCSAccess().getNullLiteralExpCSAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'null' 
    {
        createLeafNode(grammarAccess.getNullLiteralExpCSAccess().getNullKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleTypeLiteralExpCS
entryRuleTypeLiteralExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypeLiteralExpCSRule(), currentNode); }
	 iv_ruleTypeLiteralExpCS=ruleTypeLiteralExpCS 
	 { $current=$iv_ruleTypeLiteralExpCS.current; } 
	 EOF 
;

// Rule TypeLiteralExpCS
ruleTypeLiteralExpCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeLiteralExpCSAccess().getPathNameCSParserRuleCall_0(), currentNode); 
    }
    this_pathNameCS_0=rulepathNameCS
    { 
        $current = $this_pathNameCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeLiteralExpCSAccess().getPrimitiveTypeCSParserRuleCall_1(), currentNode); 
    }
    this_primitiveTypeCS_1=ruleprimitiveTypeCS
    { 
        $current = $this_primitiveTypeCS_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeLiteralExpCSAccess().getTupleTypeCSParserRuleCall_2(), currentNode); 
    }
    this_tupleTypeCS_2=ruletupleTypeCS
    { 
        $current = $this_tupleTypeCS_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleOclExpressionCS
entryRuleOclExpressionCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOclExpressionCSRule(), currentNode); }
	 iv_ruleOclExpressionCS=ruleOclExpressionCS 
	 { $current=$iv_ruleOclExpressionCS.current; } 
	 EOF 
;

// Rule OclExpressionCS
ruleOclExpressionCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getOclExpressionCSAccess().getImpliesCSParserRuleCall_0(), currentNode); 
    }
    this_impliesCS_0=ruleimpliesCS
    { 
        $current = $this_impliesCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getOclExpressionCSAccess().getLetExpCSParserRuleCall_1(), currentNode); 
    }
    this_LetExpCS_1=ruleLetExpCS
    { 
        $current = $this_LetExpCS_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleimpliesCS
entryRuleimpliesCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getImpliesCSRule(), currentNode); }
	 iv_ruleimpliesCS=ruleimpliesCS 
	 { $current=$iv_ruleimpliesCS.current; } 
	 EOF 
;

// Rule impliesCS
ruleimpliesCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getImpliesCSAccess().getXorCSParserRuleCall_0(), currentNode); 
    }
    this_xorCS_0=rulexorCS
    { 
        $current = $this_xorCS_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getImpliesCSAccess().getBinaryExpressionCSSourceAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "source", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getImpliesCSAccess().getBinaryExpressionCSSourceAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_op_2_0=	'implies' 
    {
        createLeafNode(grammarAccess.getImpliesCSAccess().getOpImpliesKeyword_1_1_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImpliesCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_0, "implies", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getImpliesCSAccess().getArgumentImpliesCSParserRuleCall_1_2_0_0(), currentNode); 
	    }
		lv_argument_3_1=ruleimpliesCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImpliesCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_1, 
	        		"impliesCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getImpliesCSAccess().getArgumentLetExpCSParserRuleCall_1_2_0_1(), currentNode); 
	    }
		lv_argument_3_2=ruleLetExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImpliesCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_2, 
	        		"LetExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))?)
;





// Entry rule entryRulexorCS
entryRulexorCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getXorCSRule(), currentNode); }
	 iv_rulexorCS=rulexorCS 
	 { $current=$iv_rulexorCS.current; } 
	 EOF 
;

// Rule xorCS
rulexorCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getXorCSAccess().getOrCSParserRuleCall_0(), currentNode); 
    }
    this_orCS_0=ruleorCS
    { 
        $current = $this_orCS_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getXorCSAccess().getBinaryExpressionCSSourceAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "source", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getXorCSAccess().getBinaryExpressionCSSourceAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_op_2_0=	'xor' 
    {
        createLeafNode(grammarAccess.getXorCSAccess().getOpXorKeyword_1_1_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXorCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_0, "xor", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getXorCSAccess().getArgumentXorCSParserRuleCall_1_2_0_0(), currentNode); 
	    }
		lv_argument_3_1=rulexorCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXorCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_1, 
	        		"xorCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getXorCSAccess().getArgumentLetExpCSParserRuleCall_1_2_0_1(), currentNode); 
	    }
		lv_argument_3_2=ruleLetExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXorCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_2, 
	        		"LetExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))?)
;





// Entry rule entryRuleorCS
entryRuleorCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOrCSRule(), currentNode); }
	 iv_ruleorCS=ruleorCS 
	 { $current=$iv_ruleorCS.current; } 
	 EOF 
;

// Rule orCS
ruleorCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getOrCSAccess().getAndCSParserRuleCall_0(), currentNode); 
    }
    this_andCS_0=ruleandCS
    { 
        $current = $this_andCS_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getOrCSAccess().getBinaryExpressionCSSourceAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "source", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getOrCSAccess().getBinaryExpressionCSSourceAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_op_2_0=	'or' 
    {
        createLeafNode(grammarAccess.getOrCSAccess().getOpOrKeyword_1_1_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOrCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_0, "or", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOrCSAccess().getArgumentOrCSParserRuleCall_1_2_0_0(), currentNode); 
	    }
		lv_argument_3_1=ruleorCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOrCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_1, 
	        		"orCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getOrCSAccess().getArgumentLetExpCSParserRuleCall_1_2_0_1(), currentNode); 
	    }
		lv_argument_3_2=ruleLetExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOrCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_2, 
	        		"LetExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))?)
;





// Entry rule entryRuleandCS
entryRuleandCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAndCSRule(), currentNode); }
	 iv_ruleandCS=ruleandCS 
	 { $current=$iv_ruleandCS.current; } 
	 EOF 
;

// Rule andCS
ruleandCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAndCSAccess().getEqualityCSParserRuleCall_0(), currentNode); 
    }
    this_equalityCS_0=ruleequalityCS
    { 
        $current = $this_equalityCS_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getAndCSAccess().getBinaryExpressionCSSourceAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "source", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAndCSAccess().getBinaryExpressionCSSourceAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_op_2_0=	'and' 
    {
        createLeafNode(grammarAccess.getAndCSAccess().getOpAndKeyword_1_1_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_0, "and", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAndCSAccess().getArgumentAndCSParserRuleCall_1_2_0_0(), currentNode); 
	    }
		lv_argument_3_1=ruleandCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_1, 
	        		"andCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getAndCSAccess().getArgumentLetExpCSParserRuleCall_1_2_0_1(), currentNode); 
	    }
		lv_argument_3_2=ruleLetExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_2, 
	        		"LetExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))?)
;





// Entry rule entryRuleequalityCS
entryRuleequalityCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEqualityCSRule(), currentNode); }
	 iv_ruleequalityCS=ruleequalityCS 
	 { $current=$iv_ruleequalityCS.current; } 
	 EOF 
;

// Rule equalityCS
ruleequalityCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getEqualityCSAccess().getRelationalCSParserRuleCall_0(), currentNode); 
    }
    this_relationalCS_0=rulerelationalCS
    { 
        $current = $this_relationalCS_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getEqualityCSAccess().getBinaryExpressionCSSourceAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "source", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getEqualityCSAccess().getBinaryExpressionCSSourceAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
(
		lv_op_2_1=	'=' 
    {
        createLeafNode(grammarAccess.getEqualityCSAccess().getOpEqualsSignKeyword_1_1_0_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEqualityCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_2_2=	'<>' 
    {
        createLeafNode(grammarAccess.getEqualityCSAccess().getOpLessThanSignGreaterThanSignKeyword_1_1_0_1(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEqualityCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEqualityCSAccess().getArgumentEqualityCSParserRuleCall_1_2_0_0(), currentNode); 
	    }
		lv_argument_3_1=ruleequalityCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEqualityCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_1, 
	        		"equalityCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getEqualityCSAccess().getArgumentLetExpCSParserRuleCall_1_2_0_1(), currentNode); 
	    }
		lv_argument_3_2=ruleLetExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEqualityCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_2, 
	        		"LetExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))?)
;





// Entry rule entryRulerelationalCS
entryRulerelationalCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRelationalCSRule(), currentNode); }
	 iv_rulerelationalCS=rulerelationalCS 
	 { $current=$iv_rulerelationalCS.current; } 
	 EOF 
;

// Rule relationalCS
rulerelationalCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getRelationalCSAccess().getAdditiveCSParserRuleCall_0(), currentNode); 
    }
    this_additiveCS_0=ruleadditiveCS
    { 
        $current = $this_additiveCS_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getRelationalCSAccess().getBinaryExpressionCSSourceAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "source", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getRelationalCSAccess().getBinaryExpressionCSSourceAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
(
		lv_op_2_1=	'>' 
    {
        createLeafNode(grammarAccess.getRelationalCSAccess().getOpGreaterThanSignKeyword_1_1_0_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_2_2=	'<' 
    {
        createLeafNode(grammarAccess.getRelationalCSAccess().getOpLessThanSignKeyword_1_1_0_1(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_2_3=	'>=' 
    {
        createLeafNode(grammarAccess.getRelationalCSAccess().getOpGreaterThanSignEqualsSignKeyword_1_1_0_2(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_2_4=	'<=' 
    {
        createLeafNode(grammarAccess.getRelationalCSAccess().getOpLessThanSignEqualsSignKeyword_1_1_0_3(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_4, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelationalCSAccess().getArgumentRelationalCSParserRuleCall_1_2_0_0(), currentNode); 
	    }
		lv_argument_3_1=rulerelationalCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_1, 
	        		"relationalCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelationalCSAccess().getArgumentLetExpCSParserRuleCall_1_2_0_1(), currentNode); 
	    }
		lv_argument_3_2=ruleLetExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_2, 
	        		"LetExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))?)
;





// Entry rule entryRuleadditiveCS
entryRuleadditiveCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAdditiveCSRule(), currentNode); }
	 iv_ruleadditiveCS=ruleadditiveCS 
	 { $current=$iv_ruleadditiveCS.current; } 
	 EOF 
;

// Rule additiveCS
ruleadditiveCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAdditiveCSAccess().getMultiplicativeCSParserRuleCall_0(), currentNode); 
    }
    this_multiplicativeCS_0=rulemultiplicativeCS
    { 
        $current = $this_multiplicativeCS_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getAdditiveCSAccess().getBinaryExpressionCSSourceAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "source", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAdditiveCSAccess().getBinaryExpressionCSSourceAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
(
		lv_op_2_1=	'+' 
    {
        createLeafNode(grammarAccess.getAdditiveCSAccess().getOpPlusSignKeyword_1_1_0_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_2_2=	'-' 
    {
        createLeafNode(grammarAccess.getAdditiveCSAccess().getOpHyphenMinusKeyword_1_1_0_1(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAdditiveCSAccess().getArgumentAdditiveCSParserRuleCall_1_2_0_0(), currentNode); 
	    }
		lv_argument_3_1=ruleadditiveCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_1, 
	        		"additiveCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getAdditiveCSAccess().getArgumentLetExpCSParserRuleCall_1_2_0_1(), currentNode); 
	    }
		lv_argument_3_2=ruleLetExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_2, 
	        		"LetExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))?)
;





// Entry rule entryRulemultiplicativeCS
entryRulemultiplicativeCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMultiplicativeCSRule(), currentNode); }
	 iv_rulemultiplicativeCS=rulemultiplicativeCS 
	 { $current=$iv_rulemultiplicativeCS.current; } 
	 EOF 
;

// Rule multiplicativeCS
rulemultiplicativeCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getMultiplicativeCSAccess().getUnaryCSParserRuleCall_0(), currentNode); 
    }
    this_unaryCS_0=ruleunaryCS
    { 
        $current = $this_unaryCS_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getMultiplicativeCSAccess().getBinaryExpressionCSSourceAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "source", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getMultiplicativeCSAccess().getBinaryExpressionCSSourceAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
(
		lv_op_2_1=	'*' 
    {
        createLeafNode(grammarAccess.getMultiplicativeCSAccess().getOpAsteriskKeyword_1_1_0_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_2_2=	'/' 
    {
        createLeafNode(grammarAccess.getMultiplicativeCSAccess().getOpSolidusKeyword_1_1_0_1(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMultiplicativeCSAccess().getArgumentMultiplicativeCSParserRuleCall_1_2_0_0(), currentNode); 
	    }
		lv_argument_3_1=rulemultiplicativeCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_1, 
	        		"multiplicativeCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getMultiplicativeCSAccess().getArgumentLetExpCSParserRuleCall_1_2_0_1(), currentNode); 
	    }
		lv_argument_3_2=ruleLetExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_2, 
	        		"LetExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))?)
;





// Entry rule entryRuleunaryCS
entryRuleunaryCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUnaryCSRule(), currentNode); }
	 iv_ruleunaryCS=ruleunaryCS 
	 { $current=$iv_ruleunaryCS.current; } 
	 EOF 
;

// Rule unaryCS
ruleunaryCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getUnaryCSAccess().getCallingExpCSParserRuleCall_0(), currentNode); 
    }
    this_callingExpCS_0=rulecallingExpCS
    { 
        $current = $this_callingExpCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getUnaryCSAccess().getUnaryExpressionCSAction_1_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getUnaryCSAccess().getUnaryExpressionCSAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
(
		lv_op_2_1=	'-' 
    {
        createLeafNode(grammarAccess.getUnaryCSAccess().getOpHyphenMinusKeyword_1_1_0_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_2_2=	'not' 
    {
        createLeafNode(grammarAccess.getUnaryCSAccess().getOpNotKeyword_1_1_0_1(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnaryCSAccess().getSourceUnaryCSParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_source_3_0=ruleunaryCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"source",
	        		lv_source_3_0, 
	        		"unaryCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRulecallingExpCS
entryRulecallingExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCallingExpCSRule(), currentNode); }
	 iv_rulecallingExpCS=rulecallingExpCS 
	 { $current=$iv_rulecallingExpCS.current; } 
	 EOF 
;

// Rule callingExpCS
rulecallingExpCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getCallingExpCSAccess().getCallExpCSParserRuleCall_0(), currentNode); 
    }
    this_callExpCS_0=rulecallExpCS
    { 
        $current = $this_callExpCS_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getCallingExpCSAccess().getBinaryExpressionCSSourceAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "source", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getCallingExpCSAccess().getBinaryExpressionCSSourceAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
(
		lv_op_2_1=	'.' 
    {
        createLeafNode(grammarAccess.getCallingExpCSAccess().getOpFullStopKeyword_1_1_0_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCallingExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_2_2=	'->' 
    {
        createLeafNode(grammarAccess.getCallingExpCSAccess().getOpHyphenMinusGreaterThanSignKeyword_1_1_0_1(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCallingExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCallingExpCSAccess().getArgumentCallingExpCSParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_argument_3_0=rulecallingExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCallingExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_0, 
	        		"callingExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleiteratorVariableCS
entryRuleiteratorVariableCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIteratorVariableCSRule(), currentNode); }
	 iv_ruleiteratorVariableCS=ruleiteratorVariableCS 
	 { $current=$iv_ruleiteratorVariableCS.current; } 
	 EOF 
;

// Rule iteratorVariableCS
ruleiteratorVariableCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIteratorVariableCSAccess().getNameSimpleNameCSParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=rulesimpleNameCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIteratorVariableCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"simpleNameCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	':' 
    {
        createLeafNode(grammarAccess.getIteratorVariableCSAccess().getColonKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIteratorVariableCSAccess().getTypeTypeCSParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_type_2_0=ruletypeCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIteratorVariableCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"typeCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleiteratorAccumulatorCS
entryRuleiteratorAccumulatorCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIteratorAccumulatorCSRule(), currentNode); }
	 iv_ruleiteratorAccumulatorCS=ruleiteratorAccumulatorCS 
	 { $current=$iv_ruleiteratorAccumulatorCS.current; } 
	 EOF 
;

// Rule iteratorAccumulatorCS
ruleiteratorAccumulatorCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIteratorAccumulatorCSAccess().getNameSimpleNameCSParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=rulesimpleNameCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIteratorAccumulatorCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"simpleNameCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getIteratorAccumulatorCSAccess().getColonKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIteratorAccumulatorCSAccess().getTypeTypeCSParserRuleCall_2_0(), currentNode); 
	    }
		lv_type_2_0=ruletypeCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIteratorAccumulatorCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"typeCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'=' 
    {
        createLeafNode(grammarAccess.getIteratorAccumulatorCSAccess().getEqualsSignKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIteratorAccumulatorCSAccess().getInitExpressionOclExpressionCSParserRuleCall_4_0(), currentNode); 
	    }
		lv_initExpression_4_0=ruleOclExpressionCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIteratorAccumulatorCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"initExpression",
	        		lv_initExpression_4_0, 
	        		"OclExpressionCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulecallExpCS
entryRulecallExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCallExpCSRule(), currentNode); }
	 iv_rulecallExpCS=rulecallExpCS 
	 { $current=$iv_rulecallExpCS.current; } 
	 EOF 
;

// Rule callExpCS
rulecallExpCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getCallExpCSAccess().getPreExpCSParserRuleCall_0(), currentNode); 
    }
    this_preExpCS_0=rulepreExpCS
    { 
        $current = $this_preExpCS_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getCallExpCSAccess().getCallExpCSSourceAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "source", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getCallExpCSAccess().getCallExpCSSourceAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'(' 
    {
        createLeafNode(grammarAccess.getCallExpCSAccess().getLeftParenthesisKeyword_1_1(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCallExpCSAccess().getVariable1IteratorVariableCSParserRuleCall_1_2_0_0(), currentNode); 
	    }
		lv_variable1_3_0=ruleiteratorVariableCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCallExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"variable1",
	        		lv_variable1_3_0, 
	        		"iteratorVariableCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((	',' 
    {
        createLeafNode(grammarAccess.getCallExpCSAccess().getCommaKeyword_1_2_1_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCallExpCSAccess().getVariable2IteratorVariableCSParserRuleCall_1_2_1_0_1_0(), currentNode); 
	    }
		lv_variable2_5_0=ruleiteratorVariableCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCallExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"variable2",
	        		lv_variable2_5_0, 
	        		"iteratorVariableCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	';' 
    {
        createLeafNode(grammarAccess.getCallExpCSAccess().getSemicolonKeyword_1_2_1_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCallExpCSAccess().getVariable2IteratorAccumulatorCSParserRuleCall_1_2_1_1_1_0(), currentNode); 
	    }
		lv_variable2_7_0=ruleiteratorAccumulatorCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCallExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"variable2",
	        		lv_variable2_7_0, 
	        		"iteratorAccumulatorCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))?	'|' 
    {
        createLeafNode(grammarAccess.getCallExpCSAccess().getVerticalLineKeyword_1_2_2(), null); 
    }
)?((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCallExpCSAccess().getArgumentsOclExpressionCSParserRuleCall_1_3_0_0(), currentNode); 
	    }
		lv_arguments_9_0=ruleOclExpressionCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCallExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"arguments",
	        		lv_arguments_9_0, 
	        		"OclExpressionCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getCallExpCSAccess().getCommaKeyword_1_3_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCallExpCSAccess().getArgumentsOclExpressionCSParserRuleCall_1_3_1_1_0(), currentNode); 
	    }
		lv_arguments_11_0=ruleOclExpressionCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCallExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"arguments",
	        		lv_arguments_11_0, 
	        		"OclExpressionCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	')' 
    {
        createLeafNode(grammarAccess.getCallExpCSAccess().getRightParenthesisKeyword_1_4(), null); 
    }
)?)
;





// Entry rule entryRulepreExpCS
entryRulepreExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPreExpCSRule(), currentNode); }
	 iv_rulepreExpCS=rulepreExpCS 
	 { $current=$iv_rulepreExpCS.current; } 
	 EOF 
;

// Rule preExpCS
rulepreExpCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPreExpCSAccess().getIndexExpCSParserRuleCall(), currentNode); 
    }
    this_indexExpCS_0=ruleindexExpCS
    { 
        $current = $this_indexExpCS_0.current; 
        currentNode = currentNode.getParent();
    }

;





// Entry rule entryRuleindexExpCS
entryRuleindexExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIndexExpCSRule(), currentNode); }
	 iv_ruleindexExpCS=ruleindexExpCS 
	 { $current=$iv_ruleindexExpCS.current; } 
	 EOF 
;

// Rule indexExpCS
ruleindexExpCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getIndexExpCSAccess().getMessageExpCSParserRuleCall_0(), currentNode); 
    }
    this_messageExpCS_0=rulemessageExpCS
    { 
        $current = $this_messageExpCS_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getIndexExpCSAccess().getIndexExpCSSourceAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "source", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getIndexExpCSAccess().getIndexExpCSSourceAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'[' 
    {
        createLeafNode(grammarAccess.getIndexExpCSAccess().getLeftSquareBracketKeyword_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIndexExpCSAccess().getIndexesOclExpressionCSParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_indexes_3_0=ruleOclExpressionCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIndexExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"indexes",
	        		lv_indexes_3_0, 
	        		"OclExpressionCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getIndexExpCSAccess().getCommaKeyword_1_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIndexExpCSAccess().getIndexesOclExpressionCSParserRuleCall_1_3_1_0(), currentNode); 
	    }
		lv_indexes_5_0=ruleOclExpressionCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIndexExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"indexes",
	        		lv_indexes_5_0, 
	        		"OclExpressionCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	']' 
    {
        createLeafNode(grammarAccess.getIndexExpCSAccess().getRightSquareBracketKeyword_1_4(), null); 
    }
)?)
;





// Entry rule entryRulemessageExpCS
entryRulemessageExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMessageExpCSRule(), currentNode); }
	 iv_rulemessageExpCS=rulemessageExpCS 
	 { $current=$iv_rulemessageExpCS.current; } 
	 EOF 
;

// Rule messageExpCS
rulemessageExpCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getMessageExpCSAccess().getPrimaryExpCSParserRuleCall(), currentNode); 
    }
    this_primaryExpCS_0=ruleprimaryExpCS
    { 
        $current = $this_primaryExpCS_0.current; 
        currentNode = currentNode.getParent();
    }

;





// Entry rule entryRuleprimaryExpCS
entryRuleprimaryExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrimaryExpCSRule(), currentNode); }
	 iv_ruleprimaryExpCS=ruleprimaryExpCS 
	 { $current=$iv_ruleprimaryExpCS.current; } 
	 EOF 
;

// Rule primaryExpCS
ruleprimaryExpCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpCSAccess().getSelfKeywordCSParserRuleCall_0(), currentNode); 
    }
    this_selfKeywordCS_0=ruleselfKeywordCS
    { 
        $current = $this_selfKeywordCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpCSAccess().getLiteralExpCSParserRuleCall_1(), currentNode); 
    }
    this_LiteralExpCS_1=ruleLiteralExpCS
    { 
        $current = $this_LiteralExpCS_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpCSAccess().getIfExpCSParserRuleCall_2(), currentNode); 
    }
    this_IfExpCS_2=ruleIfExpCS
    { 
        $current = $this_IfExpCS_2.current; 
        currentNode = currentNode.getParent();
    }

    |(	'(' 
    {
        createLeafNode(grammarAccess.getPrimaryExpCSAccess().getLeftParenthesisKeyword_3_0(), null); 
    }

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpCSAccess().getOclExpressionCSParserRuleCall_3_1(), currentNode); 
    }
    this_OclExpressionCS_4=ruleOclExpressionCS
    { 
        $current = $this_OclExpressionCS_4.current; 
        currentNode = currentNode.getParent();
    }
	')' 
    {
        createLeafNode(grammarAccess.getPrimaryExpCSAccess().getRightParenthesisKeyword_3_2(), null); 
    }
))
;





// Entry rule entryRuleIfExpCS
entryRuleIfExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIfExpCSRule(), currentNode); }
	 iv_ruleIfExpCS=ruleIfExpCS 
	 { $current=$iv_ruleIfExpCS.current; } 
	 EOF 
;

// Rule IfExpCS
ruleIfExpCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'if' 
    {
        createLeafNode(grammarAccess.getIfExpCSAccess().getIfKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfExpCSAccess().getConditionOclExpressionCSParserRuleCall_1_0(), currentNode); 
	    }
		lv_condition_1_0=ruleOclExpressionCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"condition",
	        		lv_condition_1_0, 
	        		"OclExpressionCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'then' 
    {
        createLeafNode(grammarAccess.getIfExpCSAccess().getThenKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfExpCSAccess().getThenExpressionOclExpressionCSParserRuleCall_3_0(), currentNode); 
	    }
		lv_thenExpression_3_0=ruleOclExpressionCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"thenExpression",
	        		lv_thenExpression_3_0, 
	        		"OclExpressionCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'else' 
    {
        createLeafNode(grammarAccess.getIfExpCSAccess().getElseKeyword_4(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfExpCSAccess().getElseExpressionOclExpressionCSParserRuleCall_5_0(), currentNode); 
	    }
		lv_elseExpression_5_0=ruleOclExpressionCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"elseExpression",
	        		lv_elseExpression_5_0, 
	        		"OclExpressionCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'endif' 
    {
        createLeafNode(grammarAccess.getIfExpCSAccess().getEndifKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleLetExpCS
entryRuleLetExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLetExpCSRule(), currentNode); }
	 iv_ruleLetExpCS=ruleLetExpCS 
	 { $current=$iv_ruleLetExpCS.current; } 
	 EOF 
;

// Rule LetExpCS
ruleLetExpCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'let' 
    {
        createLeafNode(grammarAccess.getLetExpCSAccess().getLetKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLetExpCSAccess().getVariableLetVariableCSParserRuleCall_1_0(), currentNode); 
	    }
		lv_variable_1_0=ruleLetVariableCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLetExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"variable",
	        		lv_variable_1_0, 
	        		"LetVariableCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getLetExpCSAccess().getCommaKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLetExpCSAccess().getVariableLetVariableCSParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_variable_3_0=ruleLetVariableCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLetExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"variable",
	        		lv_variable_3_0, 
	        		"LetVariableCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'in' 
    {
        createLeafNode(grammarAccess.getLetExpCSAccess().getInKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLetExpCSAccess().getInOclExpressionCSParserRuleCall_4_0(), currentNode); 
	    }
		lv_in_5_0=ruleOclExpressionCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLetExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"in",
	        		lv_in_5_0, 
	        		"OclExpressionCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleLetVariableCS
entryRuleLetVariableCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLetVariableCSRule(), currentNode); }
	 iv_ruleLetVariableCS=ruleLetVariableCS 
	 { $current=$iv_ruleLetVariableCS.current; } 
	 EOF 
;

// Rule LetVariableCS
ruleLetVariableCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLetVariableCSAccess().getNameSimpleNameCSParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=rulesimpleNameCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLetVariableCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"simpleNameCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getLetVariableCSAccess().getColonKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLetVariableCSAccess().getTypeTypeCSParserRuleCall_2_0(), currentNode); 
	    }
		lv_type_2_0=ruletypeCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLetVariableCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"typeCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'=' 
    {
        createLeafNode(grammarAccess.getLetVariableCSAccess().getEqualsSignKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLetVariableCSAccess().getInitExpressionOclExpressionCSParserRuleCall_4_0(), currentNode); 
	    }
		lv_initExpression_4_0=ruleOclExpressionCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLetVariableCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"initExpression",
	        		lv_initExpression_4_0, 
	        		"OclExpressionCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





RULE_STRING_LITERAL : '\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'';

RULE_ID : (('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*|'_' RULE_STRING_LITERAL);

RULE_INT : ('0'..'9')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '--' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


