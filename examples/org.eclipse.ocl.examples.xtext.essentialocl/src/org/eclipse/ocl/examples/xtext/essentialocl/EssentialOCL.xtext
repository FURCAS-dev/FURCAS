/**
 * <copyright>
 *
 * Copyright (c) 2010 E.D.Willink and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     E.D.Willink - initial API and implementation
 *
 * </copyright>
 *
 * $Id: EssentialOCL.xtext,v 1.4 2010/05/03 05:37:57 ewillink Exp $
 */
grammar org.eclipse.ocl.examples.xtext.essentialocl.EssentialOCL hidden(WS, ML_COMMENT, SL_COMMENT) //with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/org.eclipse.ocl.examples.xtext.base/model/BaseCST.ecore" as base
import "platform:/resource/org.eclipse.ocl.examples.xtext.essentialocl/model/EssentialOCLCST.ecore" 
//generate essentialOCLCST "http://www.eclipse.org/ocl/3.0.0/EssentialOCLCST"

Model returns ExpCS:
	ExpCS
;

terminal DOUBLE_QUOTED_STRING:
	'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'"') )* '"'
;

terminal SINGLE_QUOTED_STRING :
	"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
; 
	
terminal ID_TERMINAL :		// NB not "ID" to ensure implicit use of ID is an error
	(('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*)
//| 	("_'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|"'") )* "'")
| 	("_" SINGLE_QUOTED_STRING)
;

terminal INT:											// String to allow diverse re-use
	('0'..'9')+
;

NUMBER_LITERAL returns BigNumber:					// Not terminal to allow parser backtracking to sort out "5..7"
	INT ('.' INT)? (('e'|'E') ('+'|'-')? INT)?
;

terminal ML_COMMENT	: '/*' -> '*/';
terminal SL_COMMENT : '--' !('\n'|'\r')* ('\r'? '\n')?;
terminal WS			: (' '|'\t'|'\r'|'\n')+;

terminal ANY_OTHER: .;

EssentialOCLReservedKeywords: 
	'and'
|	'else'
|	'endif'
|	'if'
|	'implies'
|	'in'
|	'let'
|	'not'
|	'or'
|	'then'
|	'xor'
;

EssentialOCLRestrictedKeywords:
	'e'
|	'E'
;

RestrictedKeywords:					// Intended to be overridden
	EssentialOCLRestrictedKeywords
;

Identifier:
	ID_TERMINAL
|	RestrictedKeywords
;

StringLiteral:
	SINGLE_QUOTED_STRING
;
//---------------------------------------------------------------------
//  Names
//---------------------------------------------------------------------
/*  Temporary backward compatibility support for 7.4.8 conceptual usage 
conceptualOperationName returns SimpleNameCS:
	value='and'
	| value='implies'
	| value='not'
	| value='or'
	| value='xor'
	| value='<'
	| value='<='
	| value='>='
	| value='>'
	| value='='
	| value='<>'
	| value='+'
	| value='-'
	| value='*'
	| value='/';
conceptualOperationNameCS returns SimpleNameCS:
	conceptualOperationName; */

/*tupleKeywordCS returns ecore::EString:
	value='Tuple'; */

/*restrictedKeywordCS returns ecore::EString: 
	CollectionTypeIdentifierCS
//  restrictedKeywordCS -> BooleanLiteralExpCS
//  restrictedKeywordCS -> InvalidLiteralExpCS
//  restrictedKeywordCS -> NullLiteralExpCS
//-  restrictedKeywordCS -> selfKeywordCS
|	primitiveTypeCS
|	tupleKeywordCS; */
    
SimpleName returns ecore::EString:
	Identifier
;

//pathNameCS returns NameExpCS:
//	(namespace=[NamespaceCS|Identifier] '::')* element=[NamedElementCS|Identifier]
//
//	ref=[ModelElementCS|PathName]
//;
        
//---------------------------------------------------------------------
//  Types
//---------------------------------------------------------------------
PrimitiveTypeIdentifier:
	'Boolean'
|	'Integer'
|	'Real'
|	'String'
|	'UnlimitedNatural'
|	'OclAny'
|	'OclInvalid'
|	'OclVoid'
;

PrimitiveTypeCS returns PrimitiveTypeCS:
	name=PrimitiveTypeIdentifier
;
    
CollectionTypeIdentifier returns ecore::EString:
	'Set'
|	'Bag'
|	'Sequence'
|	'Collection'
|	'OrderedSet'
;

TypeExpCS returns TypeExpCS:
	PrimitiveTypeCS
|	NameExpCS
|	CollectionTypeCS
|	TupleTypeCS
;

CollectionTypeCS returns CollectionTypeCS:
	name=CollectionTypeIdentifier ('(' typeCS=TypeExpCS ')')?
;

TupleTypeCS returns TupleTypeCS:
	name='Tuple' '(' (part+=tuplePartCS (',' part+=tuplePartCS)*)? ')'
;
        
tuplePartCS returns VariableCS:
	name=SimpleName ':' type=TypeExpCS
;

//---------------------------------------------------------------------
//  Literals
//---------------------------------------------------------------------
// EnumLiteralExpCS is parsed as a PropertyCallExpCS[C]
//  LiteralExpCS -> EnumLiteralExpCS
//LiteralExpCS returns LiteralExpCS:
//	CollectionLiteralExpCS
//|	TupleLiteralExpCS
//|	PrimitiveLiteralExpCS
//|	primitiveTypeCS
//|	NameExpCS
////|	collectionTypeCS
//|	TupleTypeCS
//;

CollectionLiteralExpCS returns LiteralExpCS:	// or CollectionTypeLiteral
	CollectionTypeCS
	({CollectionLiteralExpCS.typeCS=current} '{' (collectionLiteralParts+=CollectionLiteralPartCS
	 (',' collectionLiteralParts+=CollectionLiteralPartCS)*)?
	 '}')?
;

CollectionLiteralPartCS returns CollectionLiteralPartCS:
	expressionCS=ExpCS ('..' lastExpressionCS=ExpCS)?
;

PrimitiveLiteralExpCS returns PrimitiveLiteralExpCS:
	NumberLiteralExpCS
|	StringLiteralExpCS
|	BooleanLiteralExpCS
|	InvalidLiteralExpCS
|	NullLiteralExpCS
;

TupleLiteralExpCS returns TupleLiteralExpCS: // or TupleTypeLiteral
	{TupleLiteralExpCS} 'Tuple' ('{' part+=TupleLiteralPartCS (',' part+=TupleLiteralPartCS)* '}')?
;
	
TupleLiteralPartCS returns VariableCS:
	name=SimpleName (':' type=TypeExpCS)? '=' initExpression=ExpCS
;

NumberLiteralExpCS returns NumberLiteralExpCS:
	name=NUMBER_LITERAL
;

StringLiteralExpCS returns StringLiteralExpCS:
	name+=StringLiteral+
;

BooleanLiteralExpCS returns BooleanLiteralExpCS:
	name='true'
|	name='false';

InvalidLiteralExpCS returns InvalidLiteralExpCS:
	{InvalidLiteralExpCS} 'invalid'
;

NullLiteralExpCS returns NullLiteralExpCS:
	{NullLiteralExpCS} 'null'
;

//---------------------------------------------------------------------
//  Expressions
//---------------------------------------------------------------------
// An OclExpressionCS comprising one or more LetExpCS is kept separate to ensure
//  that let is right associative, whereas infix operators are left associative.
//   a = 64 / 16 / let b : Integer in 8 / let c : Integer in 4 
// is
//   a = (64 / 16) / (let b : Integer in 8 / (let c : Integer in 4 ))
ExpCS returns ExpCS:
	impliesCS	
|	LetExpCS
;

impliesCS returns ExpCS:
	xorCS
	({InfixExpCS.source=current} op='implies' argument=(xorCS|LetExpCS))*
;

xorCS returns ExpCS:
	orCS
	({InfixExpCS.source=current} op='xor' argument=(orCS|LetExpCS))*
;

orCS returns ExpCS:
	andCS
	({InfixExpCS.source=current} op='or' argument=(andCS|LetExpCS))*
;

andCS returns ExpCS:
	equalityCS
	({InfixExpCS.source=current} op='and' argument=(equalityCS|LetExpCS))*
;

equalityCS returns ExpCS:
	relationalCS
	({InfixExpCS.source=current} op=('='|'<>') argument=(relationalCS|LetExpCS))*
;

relationalCS returns ExpCS:
	additiveCS
	({InfixExpCS.source=current} op=('>'|'<'|'>='|'<=') argument=(additiveCS|LetExpCS))*
;

additiveCS returns ExpCS:
	multiplicativeCS
	({InfixExpCS.source=current} op=('+'|'-') argument=(multiplicativeCS|LetExpCS))*
;

multiplicativeCS returns ExpCS:
	unaryCS
	({InfixExpCS.source=current} op=('*'|'/') argument=(unaryCS|LetExpCS))*
;

unaryCS returns ExpCS:
	NavigationExpCS
|	({PrefixExpCS} op=('-'|'not') source=unaryCS)
;

NavigationExpCS returns ExpCS:
	SubNavigationExpCS
	(
		({DotExpCS.source=current} '.' argument=NavigatingExpCS)
	|	({ArrowExpCS.source=current} '->' argument=NavigatingExpCS)
//	|	({CaretExpCS.source=current} '^' argument=NavigatingExpCS)
//	|	({DoubleCaretExpCS.source=current} '^^' argument=NavigatingExpCS)
	)?
;

// Follows ., ->, ^
NavigatingExpCS returns ExpCS:
	SubNavigatingExpCS
	(
		({DotExpCS.source=current} '.' argument=NavigatingExpCS)
	|	({ArrowExpCS.source=current} '->' argument=NavigatingExpCS)
//	|	({CaretExpCS.source=current} '^' argument=NavigatingExpCS)
//	|	({DoubleCaretExpCS.source=current} '^^' argument=NavigatingExpCS)
	)?
;

// May be be followed by ., ->, ^
SubNavigationExpCS returns ExpCS:
	RoundBracketExpCS
|	SquareBracketExpCS
|	SelfExpCS
|	PrimitiveLiteralExpCS
|	TupleLiteralExpCS
|	CollectionLiteralExpCS
|	TypeExpCS
|	IfExpCS
|	'('{NestedExpCS} source=ExpCS ')'
;

// Follows ., ->, ^, May be be followed by ., ->, ^
SubNavigatingExpCS returns ExpCS:
	RoundBracketExpCS
|	SquareBracketExpCS
|	NameExpCS
;

//callingExpCS returns ExpCS:
//	callExpCS
//	({BinaryExpressionCS.source=current} op=('.'|'->') argument=callingExpCS)?
//;

iteratorVariableCS returns VariableCS:
	name=SimpleName (':' type=TypeExpCS)?
;

iteratorAccumulatorCS returns VariableCS:
	name=SimpleName ':' type=TypeExpCS '=' initExpression=ExpCS
;

//callExpCS returns ExpCS:
//	preExpCS
//	({CallExpCS.source=current} '('
//	(variable1=iteratorVariableCS
//        ((',' variable2=iteratorVariableCS)
//        |(';' variable2=iteratorAccumulatorCS))?
//        '|')?
//    (arguments+=ExpCS (',' arguments+=ExpCS)*)?
//	')')?
//;

//preExpCS returns ExpCS:
//	indexExpCS
////  ({UnaryExpressionCS.source=current} '@' op='pre')? is added by CompleteOCL
//;

//indexExpCS returns ExpCS:
//	messageExpCS
//	({IndexExpCS.source=current} '[' indexes+=ExpCS (',' indexes+=ExpCS)* ']')?
//;
    
//messageExpCS returns ExpCS:
//	primaryExpCS
////|	OclMessageExpCS // ExpCS[E] is added by CompleteOCL
//;


RoundBracketExpCS returns RoundBracketExpCS:
	name=NameExpCS '('
		(variable1=iteratorVariableCS
	        ((',' variable2=iteratorVariableCS)
	        |(';' variable2=iteratorAccumulatorCS))?
	        '|')?
	    (arguments+=ExpCS (',' arguments+=ExpCS)*)?
	')'
;

SquareBracketExpCS returns SquareBracketExpCS:
	name=NameExpCS '[' arguments+=ExpCS (',' arguments+=ExpCS)* ']'
;

//primaryExpCS returns ExpCS:
//	selfKeywordCS
//|	LiteralExpCS    // OclExpressionCS[C]
//|	IfExpCS         // OclExpressionCS[F]
//|	'(' ExpCS ')'
//;
    
SelfExpCS returns SelfExpCS:
	{SelfExpCS} 'self'
;

NameExpCS returns NameExpCS:
	PathNameExpCS | SimpleNameExpCS
;

PathNameExpCS returns PathNameExpCS:
	namespace=[base::NamespaceCS|Identifier] '::' element=NameExpCS
;

SimpleNameExpCS returns SimpleNameExpCS:
	element=[base::NamedElementCS|Identifier]
;

IfExpCS returns IfExpCS:
	'if' condition=ExpCS
	'then' thenExpression=ExpCS
	'else' elseExpression=ExpCS
	'endif'
;

LetExpCS returns LetExpCS:
	'let'
	variable+=LetVariableCS (',' variable+=LetVariableCS)*
	'in' in=ExpCS
;

LetVariableCS returns VariableCS:
	name=SimpleName ':' type=TypeExpCS '=' initExpression=ExpCS
;
		