/*
* generated by Xtext
*/

package org.eclipse.ocl.examples.xtext.completeocl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.ocl.examples.xtext.essentialocl.services.EssentialOCLGrammarAccess;

@Singleton
public class CompleteOCLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class CompleteOCLDocumentCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompleteOCLDocumentCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportCSParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cPackagesAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cPackagesPackageDeclarationCSParserRuleCall_1_0_0 = (RuleCall)cPackagesAssignment_1_0.eContents().get(0);
		private final Assignment cContextsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cContextsContextDeclCSParserRuleCall_1_1_0 = (RuleCall)cContextsAssignment_1_1.eContents().get(0);
		
		////generate completeOCL "http://www.eclipse.org/ocl/examples/xtext/completeocl/CompleteOCL"
		//
		//CompleteOCLDocumentCS:
		//	imports+=ImportCS* (packages+=PackageDeclarationCS | contexts+=ContextDeclCS)*;
		public ParserRule getRule() { return rule; }

		//imports+=ImportCS* (packages+=PackageDeclarationCS | contexts+=ContextDeclCS)*
		public Group getGroup() { return cGroup; }

		//imports+=ImportCS*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//ImportCS
		public RuleCall getImportsImportCSParserRuleCall_0_0() { return cImportsImportCSParserRuleCall_0_0; }

		//(packages+=PackageDeclarationCS | contexts+=ContextDeclCS)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//packages+=PackageDeclarationCS
		public Assignment getPackagesAssignment_1_0() { return cPackagesAssignment_1_0; }

		//PackageDeclarationCS
		public RuleCall getPackagesPackageDeclarationCSParserRuleCall_1_0_0() { return cPackagesPackageDeclarationCSParserRuleCall_1_0_0; }

		//contexts+=ContextDeclCS
		public Assignment getContextsAssignment_1_1() { return cContextsAssignment_1_1; }

		//ContextDeclCS
		public RuleCall getContextsContextDeclCSParserRuleCall_1_1_0() { return cContextsContextDeclCSParserRuleCall_1_1_0; }
	}

	public class RestrictedKeywordsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RestrictedKeywords");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEssentialOCLRestrictedKeywordsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cBodyKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cContextKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDefKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cDeriveKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cImportKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cInitKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cInvKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		////|	'package'
		//
		////|	'post'
		//
		////|	'pre'
		//
		////|	'static'
		//
		//RestrictedKeywords returns ecore::EString:
		//	EssentialOCLRestrictedKeywords //|	'endpackage'
		//
		//	| "body" | "context" | "def" | "derive" | "import" | "init" | "inv";
		public ParserRule getRule() { return rule; }

		//EssentialOCLRestrictedKeywords //|	'endpackage'
		//
		//| "body" | "context" | "def" | "derive" | "import" | "init" | "inv"
		public Alternatives getAlternatives() { return cAlternatives; }

		//EssentialOCLRestrictedKeywords
		public RuleCall getEssentialOCLRestrictedKeywordsParserRuleCall_0() { return cEssentialOCLRestrictedKeywordsParserRuleCall_0; }

		//"body"
		public Keyword getBodyKeyword_1() { return cBodyKeyword_1; }

		//"context"
		public Keyword getContextKeyword_2() { return cContextKeyword_2; }

		//"def"
		public Keyword getDefKeyword_3() { return cDefKeyword_3; }

		//"derive"
		public Keyword getDeriveKeyword_4() { return cDeriveKeyword_4; }

		//"import"
		public Keyword getImportKeyword_5() { return cImportKeyword_5; }

		//"init"
		public Keyword getInitKeyword_6() { return cInitKeyword_6; }

		//"inv"
		public Keyword getInvKeyword_7() { return cInvKeyword_7; }
	}

	public class PrimitiveTypeIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveTypeIdentifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBooleanKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIntegerKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cRealKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cStringKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cUnlimitedNaturalKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cOclAnyKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cOclInvalidKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cOclMessageKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cOclStateKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cOclVoidKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		
		//PrimitiveTypeIdentifier returns ecore::EString:
		//	"Boolean" | "Integer" | "Real" | "String" | "UnlimitedNatural" | "OclAny" | "OclInvalid" | "OclMessage" | "OclState" |
		//	"OclVoid";
		public ParserRule getRule() { return rule; }

		//"Boolean" | "Integer" | "Real" | "String" | "UnlimitedNatural" | "OclAny" | "OclInvalid" | "OclMessage" | "OclState" |
		//"OclVoid"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"Boolean"
		public Keyword getBooleanKeyword_0() { return cBooleanKeyword_0; }

		//"Integer"
		public Keyword getIntegerKeyword_1() { return cIntegerKeyword_1; }

		//"Real"
		public Keyword getRealKeyword_2() { return cRealKeyword_2; }

		//"String"
		public Keyword getStringKeyword_3() { return cStringKeyword_3; }

		//"UnlimitedNatural"
		public Keyword getUnlimitedNaturalKeyword_4() { return cUnlimitedNaturalKeyword_4; }

		//"OclAny"
		public Keyword getOclAnyKeyword_5() { return cOclAnyKeyword_5; }

		//"OclInvalid"
		public Keyword getOclInvalidKeyword_6() { return cOclInvalidKeyword_6; }

		//"OclMessage"
		public Keyword getOclMessageKeyword_7() { return cOclMessageKeyword_7; }

		//"OclState"
		public Keyword getOclStateKeyword_8() { return cOclStateKeyword_8; }

		//"OclVoid"
		public Keyword getOclVoidKeyword_9() { return cOclVoidKeyword_9; }
	}

	public class BodyCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BodyCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBodyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConstraintNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstraintNameSimpleNameParserRuleCall_1_0 = (RuleCall)cConstraintNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpCSParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//BodyCS:
		//	"body" constraintName=SimpleName? ":" expression=ExpCS;
		public ParserRule getRule() { return rule; }

		//"body" constraintName=SimpleName? ":" expression=ExpCS
		public Group getGroup() { return cGroup; }

		//"body"
		public Keyword getBodyKeyword_0() { return cBodyKeyword_0; }

		//constraintName=SimpleName?
		public Assignment getConstraintNameAssignment_1() { return cConstraintNameAssignment_1; }

		//SimpleName
		public RuleCall getConstraintNameSimpleNameParserRuleCall_1_0() { return cConstraintNameSimpleNameParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//expression=ExpCS
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//ExpCS
		public RuleCall getExpressionExpCSParserRuleCall_3_0() { return cExpressionExpCSParserRuleCall_3_0; }
	}

	public class ClassifierContextDeclCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassifierContextDeclCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cSelfNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cSelfNameSimpleNameParserRuleCall_1_0_0 = (RuleCall)cSelfNameAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cClassifierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassifierClassifierRefCSParserRuleCall_2_0 = (RuleCall)cClassifierAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cInvsAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cInvsInvCSParserRuleCall_3_0_0 = (RuleCall)cInvsAssignment_3_0.eContents().get(0);
		private final Assignment cDefsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cDefsDefCSParserRuleCall_3_1_0 = (RuleCall)cDefsAssignment_3_1.eContents().get(0);
		
		//ClassifierContextDeclCS:
		//	"context" (selfName=SimpleName ":")? classifier=ClassifierRefCS (invs+=InvCS | defs+=DefCS)*;
		public ParserRule getRule() { return rule; }

		//"context" (selfName=SimpleName ":")? classifier=ClassifierRefCS (invs+=InvCS | defs+=DefCS)*
		public Group getGroup() { return cGroup; }

		//"context"
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }

		//(selfName=SimpleName ":")?
		public Group getGroup_1() { return cGroup_1; }

		//selfName=SimpleName
		public Assignment getSelfNameAssignment_1_0() { return cSelfNameAssignment_1_0; }

		//SimpleName
		public RuleCall getSelfNameSimpleNameParserRuleCall_1_0_0() { return cSelfNameSimpleNameParserRuleCall_1_0_0; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//classifier=ClassifierRefCS
		public Assignment getClassifierAssignment_2() { return cClassifierAssignment_2; }

		//ClassifierRefCS
		public RuleCall getClassifierClassifierRefCSParserRuleCall_2_0() { return cClassifierClassifierRefCSParserRuleCall_2_0; }

		//(invs+=InvCS | defs+=DefCS)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//invs+=InvCS
		public Assignment getInvsAssignment_3_0() { return cInvsAssignment_3_0; }

		//InvCS
		public RuleCall getInvsInvCSParserRuleCall_3_0_0() { return cInvsInvCSParserRuleCall_3_0_0; }

		//defs+=DefCS
		public Assignment getDefsAssignment_3_1() { return cDefsAssignment_3_1; }

		//DefCS
		public RuleCall getDefsDefCSParserRuleCall_3_1_0() { return cDefsDefCSParserRuleCall_3_1_0; }
	}

	public class ClassifierRefCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassifierRefCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cQualifiedClassifierRefCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSimpleClassifierRefCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ClassifierRefCS returns base::ClassifierRefCS:
		//	QualifiedClassifierRefCS | SimpleClassifierRefCS;
		public ParserRule getRule() { return rule; }

		//QualifiedClassifierRefCS | SimpleClassifierRefCS
		public Alternatives getAlternatives() { return cAlternatives; }

		//QualifiedClassifierRefCS
		public RuleCall getQualifiedClassifierRefCSParserRuleCall_0() { return cQualifiedClassifierRefCSParserRuleCall_0; }

		//SimpleClassifierRefCS
		public RuleCall getSimpleClassifierRefCSParserRuleCall_1() { return cSimpleClassifierRefCSParserRuleCall_1; }
	}

	public class ContextDeclCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContextDeclCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPropertyContextDeclCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClassifierContextDeclCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOperationContextDeclCSParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ContextDeclCS:
		//	PropertyContextDeclCS | ClassifierContextDeclCS | OperationContextDeclCS;
		public ParserRule getRule() { return rule; }

		//PropertyContextDeclCS | ClassifierContextDeclCS | OperationContextDeclCS
		public Alternatives getAlternatives() { return cAlternatives; }

		//PropertyContextDeclCS
		public RuleCall getPropertyContextDeclCSParserRuleCall_0() { return cPropertyContextDeclCSParserRuleCall_0; }

		//ClassifierContextDeclCS
		public RuleCall getClassifierContextDeclCSParserRuleCall_1() { return cClassifierContextDeclCSParserRuleCall_1; }

		//OperationContextDeclCS
		public RuleCall getOperationContextDeclCSParserRuleCall_2() { return cOperationContextDeclCSParserRuleCall_2; }
	}

	public class DefCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStaticAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cStaticStaticKeyword_0_0 = (Keyword)cStaticAssignment_0.eContents().get(0);
		private final Keyword cDefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConstraintNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstraintNameSimpleNameParserRuleCall_2_0 = (RuleCall)cConstraintNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConstrainedNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConstrainedNameSimpleNameParserRuleCall_4_0 = (RuleCall)cConstrainedNameAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Assignment cParametersAssignment_5_1_0 = (Assignment)cGroup_5_1.eContents().get(0);
		private final RuleCall cParametersParameterCSParserRuleCall_5_1_0_0 = (RuleCall)cParametersAssignment_5_1_0.eContents().get(0);
		private final Group cGroup_5_1_1 = (Group)cGroup_5_1.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_1_0 = (Keyword)cGroup_5_1_1.eContents().get(0);
		private final Assignment cParametersAssignment_5_1_1_1 = (Assignment)cGroup_5_1_1.eContents().get(1);
		private final RuleCall cParametersParameterCSParserRuleCall_5_1_1_1_0 = (RuleCall)cParametersAssignment_5_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTypeTypeExpCSParserRuleCall_7_0 = (RuleCall)cTypeAssignment_7.eContents().get(0);
		private final Keyword cEqualsSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cExpressionAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cExpressionExpCSParserRuleCall_9_0 = (RuleCall)cExpressionAssignment_9.eContents().get(0);
		
		//DefCS:
		//	static?="static"? "def" constraintName=SimpleName? ":" constrainedName=SimpleName ("(" (parameters+=ParameterCS (","
		//	parameters+=ParameterCS)*)? ")")? ":" type=TypeExpCS? "=" expression=ExpCS;
		public ParserRule getRule() { return rule; }

		//static?="static"? "def" constraintName=SimpleName? ":" constrainedName=SimpleName ("(" (parameters+=ParameterCS (","
		//parameters+=ParameterCS)*)? ")")? ":" type=TypeExpCS? "=" expression=ExpCS
		public Group getGroup() { return cGroup; }

		//static?="static"?
		public Assignment getStaticAssignment_0() { return cStaticAssignment_0; }

		//"static"
		public Keyword getStaticStaticKeyword_0_0() { return cStaticStaticKeyword_0_0; }

		//"def"
		public Keyword getDefKeyword_1() { return cDefKeyword_1; }

		//constraintName=SimpleName?
		public Assignment getConstraintNameAssignment_2() { return cConstraintNameAssignment_2; }

		//SimpleName
		public RuleCall getConstraintNameSimpleNameParserRuleCall_2_0() { return cConstraintNameSimpleNameParserRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//constrainedName=SimpleName
		public Assignment getConstrainedNameAssignment_4() { return cConstrainedNameAssignment_4; }

		//SimpleName
		public RuleCall getConstrainedNameSimpleNameParserRuleCall_4_0() { return cConstrainedNameSimpleNameParserRuleCall_4_0; }

		//("(" (parameters+=ParameterCS ("," parameters+=ParameterCS)*)? ")")?
		public Group getGroup_5() { return cGroup_5; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }

		//(parameters+=ParameterCS ("," parameters+=ParameterCS)*)?
		public Group getGroup_5_1() { return cGroup_5_1; }

		//parameters+=ParameterCS
		public Assignment getParametersAssignment_5_1_0() { return cParametersAssignment_5_1_0; }

		//ParameterCS
		public RuleCall getParametersParameterCSParserRuleCall_5_1_0_0() { return cParametersParameterCSParserRuleCall_5_1_0_0; }

		//("," parameters+=ParameterCS)*
		public Group getGroup_5_1_1() { return cGroup_5_1_1; }

		//","
		public Keyword getCommaKeyword_5_1_1_0() { return cCommaKeyword_5_1_1_0; }

		//parameters+=ParameterCS
		public Assignment getParametersAssignment_5_1_1_1() { return cParametersAssignment_5_1_1_1; }

		//ParameterCS
		public RuleCall getParametersParameterCSParserRuleCall_5_1_1_1_0() { return cParametersParameterCSParserRuleCall_5_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5_2() { return cRightParenthesisKeyword_5_2; }

		//":"
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }

		//type=TypeExpCS?
		public Assignment getTypeAssignment_7() { return cTypeAssignment_7; }

		//TypeExpCS
		public RuleCall getTypeTypeExpCSParserRuleCall_7_0() { return cTypeTypeExpCSParserRuleCall_7_0; }

		//"="
		public Keyword getEqualsSignKeyword_8() { return cEqualsSignKeyword_8; }

		//expression=ExpCS
		public Assignment getExpressionAssignment_9() { return cExpressionAssignment_9; }

		//ExpCS
		public RuleCall getExpressionExpCSParserRuleCall_9_0() { return cExpressionExpCSParserRuleCall_9_0; }
	}

	public class DerCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DerCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeriveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpCSParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//DerCS:
		//	"derive" ":" expression=ExpCS;
		public ParserRule getRule() { return rule; }

		//"derive" ":" expression=ExpCS
		public Group getGroup() { return cGroup; }

		//"derive"
		public Keyword getDeriveKeyword_0() { return cDeriveKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//expression=ExpCS
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//ExpCS
		public RuleCall getExpressionExpCSParserRuleCall_2_0() { return cExpressionExpCSParserRuleCall_2_0; }
	}

	public class ImportCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIdentifierParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNamespaceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cNamespaceNamespaceCSCrossReference_2_0 = (CrossReference)cNamespaceAssignment_2.eContents().get(0);
		private final RuleCall cNamespaceNamespaceCSSINGLE_QUOTED_STRINGTerminalRuleCall_2_0_1 = (RuleCall)cNamespaceNamespaceCSCrossReference_2_0.eContents().get(1);
		
		//ImportCS returns base::ImportCS:
		//	"import" (name=Identifier ":")? namespace=[base::NamespaceCS|SINGLE_QUOTED_STRING];
		public ParserRule getRule() { return rule; }

		//"import" (name=Identifier ":")? namespace=[base::NamespaceCS|SINGLE_QUOTED_STRING]
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//(name=Identifier ":")?
		public Group getGroup_1() { return cGroup_1; }

		//name=Identifier
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0_0() { return cNameIdentifierParserRuleCall_1_0_0; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//namespace=[base::NamespaceCS|SINGLE_QUOTED_STRING]
		public Assignment getNamespaceAssignment_2() { return cNamespaceAssignment_2; }

		//[base::NamespaceCS|SINGLE_QUOTED_STRING]
		public CrossReference getNamespaceNamespaceCSCrossReference_2_0() { return cNamespaceNamespaceCSCrossReference_2_0; }

		//SINGLE_QUOTED_STRING
		public RuleCall getNamespaceNamespaceCSSINGLE_QUOTED_STRINGTerminalRuleCall_2_0_1() { return cNamespaceNamespaceCSSINGLE_QUOTED_STRINGTerminalRuleCall_2_0_1; }
	}

	public class InitCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InitCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpCSParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//InitCS:
		//	"init" ":" expression=ExpCS;
		public ParserRule getRule() { return rule; }

		//"init" ":" expression=ExpCS
		public Group getGroup() { return cGroup; }

		//"init"
		public Keyword getInitKeyword_0() { return cInitKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//expression=ExpCS
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//ExpCS
		public RuleCall getExpressionExpCSParserRuleCall_2_0() { return cExpressionExpCSParserRuleCall_2_0; }
	}

	public class InvCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InvCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInvKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConstraintNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstraintNameSimpleNameParserRuleCall_1_0 = (RuleCall)cConstraintNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpCSParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//InvCS:
		//	"inv" constraintName=SimpleName? ":" expression=ExpCS;
		public ParserRule getRule() { return rule; }

		//"inv" constraintName=SimpleName? ":" expression=ExpCS
		public Group getGroup() { return cGroup; }

		//"inv"
		public Keyword getInvKeyword_0() { return cInvKeyword_0; }

		//constraintName=SimpleName?
		public Assignment getConstraintNameAssignment_1() { return cConstraintNameAssignment_1; }

		//SimpleName
		public RuleCall getConstraintNameSimpleNameParserRuleCall_1_0() { return cConstraintNameSimpleNameParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//expression=ExpCS
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//ExpCS
		public RuleCall getExpressionExpCSParserRuleCall_3_0() { return cExpressionExpCSParserRuleCall_3_0; }
	}

	public class OperationContextDeclCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperationContextDeclCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperationOperationRefCSParserRuleCall_1_0 = (RuleCall)cOperationAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersParameterCSParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersParameterCSParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTypeTypeExpCSParserRuleCall_6_0 = (RuleCall)cTypeAssignment_6.eContents().get(0);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cPresAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final RuleCall cPresPreCSParserRuleCall_7_0_0 = (RuleCall)cPresAssignment_7_0.eContents().get(0);
		private final Assignment cPostsAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final RuleCall cPostsPostCSParserRuleCall_7_1_0 = (RuleCall)cPostsAssignment_7_1.eContents().get(0);
		private final Assignment cBodiesAssignment_7_2 = (Assignment)cAlternatives_7.eContents().get(2);
		private final RuleCall cBodiesBodyCSParserRuleCall_7_2_0 = (RuleCall)cBodiesAssignment_7_2.eContents().get(0);
		
		//OperationContextDeclCS:
		//	"context" operation=OperationRefCS "(" (parameters+=ParameterCS ("," parameters+=ParameterCS)*)? ")" ":"
		//	type=TypeExpCS? (pres+=PreCS | posts+=PostCS | bodies+=BodyCS)*;
		public ParserRule getRule() { return rule; }

		//"context" operation=OperationRefCS "(" (parameters+=ParameterCS ("," parameters+=ParameterCS)*)? ")" ":" type=TypeExpCS?
		//(pres+=PreCS | posts+=PostCS | bodies+=BodyCS)*
		public Group getGroup() { return cGroup; }

		//"context"
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }

		//operation=OperationRefCS
		public Assignment getOperationAssignment_1() { return cOperationAssignment_1; }

		//OperationRefCS
		public RuleCall getOperationOperationRefCSParserRuleCall_1_0() { return cOperationOperationRefCSParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(parameters+=ParameterCS ("," parameters+=ParameterCS)*)?
		public Group getGroup_3() { return cGroup_3; }

		//parameters+=ParameterCS
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }

		//ParameterCS
		public RuleCall getParametersParameterCSParserRuleCall_3_0_0() { return cParametersParameterCSParserRuleCall_3_0_0; }

		//("," parameters+=ParameterCS)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//parameters+=ParameterCS
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }

		//ParameterCS
		public RuleCall getParametersParameterCSParserRuleCall_3_1_1_0() { return cParametersParameterCSParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//":"
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }

		//type=TypeExpCS?
		public Assignment getTypeAssignment_6() { return cTypeAssignment_6; }

		//TypeExpCS
		public RuleCall getTypeTypeExpCSParserRuleCall_6_0() { return cTypeTypeExpCSParserRuleCall_6_0; }

		//(pres+=PreCS | posts+=PostCS | bodies+=BodyCS)*
		public Alternatives getAlternatives_7() { return cAlternatives_7; }

		//pres+=PreCS
		public Assignment getPresAssignment_7_0() { return cPresAssignment_7_0; }

		//PreCS
		public RuleCall getPresPreCSParserRuleCall_7_0_0() { return cPresPreCSParserRuleCall_7_0_0; }

		//posts+=PostCS
		public Assignment getPostsAssignment_7_1() { return cPostsAssignment_7_1; }

		//PostCS
		public RuleCall getPostsPostCSParserRuleCall_7_1_0() { return cPostsPostCSParserRuleCall_7_1_0; }

		//bodies+=BodyCS
		public Assignment getBodiesAssignment_7_2() { return cBodiesAssignment_7_2; }

		//BodyCS
		public RuleCall getBodiesBodyCSParserRuleCall_7_2_0() { return cBodiesBodyCSParserRuleCall_7_2_0; }
	}

	public class OperationRefCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperationRefCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cQualifiedOperationRefCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSimpleOperationRefCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OperationRefCS returns base::OperationRefCS:
		//	QualifiedOperationRefCS | SimpleOperationRefCS;
		public ParserRule getRule() { return rule; }

		//QualifiedOperationRefCS | SimpleOperationRefCS
		public Alternatives getAlternatives() { return cAlternatives; }

		//QualifiedOperationRefCS
		public RuleCall getQualifiedOperationRefCSParserRuleCall_0() { return cQualifiedOperationRefCSParserRuleCall_0; }

		//SimpleOperationRefCS
		public RuleCall getSimpleOperationRefCSParserRuleCall_1() { return cSimpleOperationRefCSParserRuleCall_1; }
	}

	public class PackageDeclarationCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageDeclarationCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPackageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPackagePackageRefCSParserRuleCall_1_0 = (RuleCall)cPackageAssignment_1.eContents().get(0);
		private final Assignment cContextsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContextsContextDeclCSParserRuleCall_2_0 = (RuleCall)cContextsAssignment_2.eContents().get(0);
		private final Keyword cEndpackageKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PackageDeclarationCS:
		//	"package" package=PackageRefCS contexts+=ContextDeclCS* "endpackage";
		public ParserRule getRule() { return rule; }

		//"package" package=PackageRefCS contexts+=ContextDeclCS* "endpackage"
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//package=PackageRefCS
		public Assignment getPackageAssignment_1() { return cPackageAssignment_1; }

		//PackageRefCS
		public RuleCall getPackagePackageRefCSParserRuleCall_1_0() { return cPackagePackageRefCSParserRuleCall_1_0; }

		//contexts+=ContextDeclCS*
		public Assignment getContextsAssignment_2() { return cContextsAssignment_2; }

		//ContextDeclCS
		public RuleCall getContextsContextDeclCSParserRuleCall_2_0() { return cContextsContextDeclCSParserRuleCall_2_0; }

		//"endpackage"
		public Keyword getEndpackageKeyword_3() { return cEndpackageKeyword_3; }
	}

	public class PackageRefCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageRefCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cQualifiedPackageRefCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSimplePackageRefCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PackageRefCS returns base::PackageRefCS:
		//	QualifiedPackageRefCS | SimplePackageRefCS;
		public ParserRule getRule() { return rule; }

		//QualifiedPackageRefCS | SimplePackageRefCS
		public Alternatives getAlternatives() { return cAlternatives; }

		//QualifiedPackageRefCS
		public RuleCall getQualifiedPackageRefCSParserRuleCall_0() { return cQualifiedPackageRefCSParserRuleCall_0; }

		//SimplePackageRefCS
		public RuleCall getSimplePackageRefCSParserRuleCall_1() { return cSimplePackageRefCSParserRuleCall_1; }
	}

	public class ParameterCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameSimpleNameParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeExpCSParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//ParameterCS returns essentialocl::VariableCS:
		//	(name=SimpleName ":")? type=TypeExpCS;
		public ParserRule getRule() { return rule; }

		//(name=SimpleName ":")? type=TypeExpCS
		public Group getGroup() { return cGroup; }

		//(name=SimpleName ":")?
		public Group getGroup_0() { return cGroup_0; }

		//name=SimpleName
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//SimpleName
		public RuleCall getNameSimpleNameParserRuleCall_0_0_0() { return cNameSimpleNameParserRuleCall_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//type=TypeExpCS
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//TypeExpCS
		public RuleCall getTypeTypeExpCSParserRuleCall_1_0() { return cTypeTypeExpCSParserRuleCall_1_0; }
	}

	public class PostCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PostCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPostKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConstraintNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstraintNameSimpleNameParserRuleCall_1_0 = (RuleCall)cConstraintNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpCSParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//PostCS:
		//	"post" constraintName=SimpleName? ":" expression=ExpCS;
		public ParserRule getRule() { return rule; }

		//"post" constraintName=SimpleName? ":" expression=ExpCS
		public Group getGroup() { return cGroup; }

		//"post"
		public Keyword getPostKeyword_0() { return cPostKeyword_0; }

		//constraintName=SimpleName?
		public Assignment getConstraintNameAssignment_1() { return cConstraintNameAssignment_1; }

		//SimpleName
		public RuleCall getConstraintNameSimpleNameParserRuleCall_1_0() { return cConstraintNameSimpleNameParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//expression=ExpCS
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//ExpCS
		public RuleCall getExpressionExpCSParserRuleCall_3_0() { return cExpressionExpCSParserRuleCall_3_0; }
	}

	public class PreCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PreCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPreKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConstraintNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstraintNameSimpleNameParserRuleCall_1_0 = (RuleCall)cConstraintNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpCSParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//PreCS:
		//	"pre" constraintName=SimpleName? ":" expression=ExpCS;
		public ParserRule getRule() { return rule; }

		//"pre" constraintName=SimpleName? ":" expression=ExpCS
		public Group getGroup() { return cGroup; }

		//"pre"
		public Keyword getPreKeyword_0() { return cPreKeyword_0; }

		//constraintName=SimpleName?
		public Assignment getConstraintNameAssignment_1() { return cConstraintNameAssignment_1; }

		//SimpleName
		public RuleCall getConstraintNameSimpleNameParserRuleCall_1_0() { return cConstraintNameSimpleNameParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//expression=ExpCS
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//ExpCS
		public RuleCall getExpressionExpCSParserRuleCall_3_0() { return cExpressionExpCSParserRuleCall_3_0; }
	}

	public class PropertyContextDeclCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyContextDeclCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPropertyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropertyPropertyRefCSParserRuleCall_1_0 = (RuleCall)cPropertyAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeExpCSParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Assignment cInitAssignment_4_0_0 = (Assignment)cGroup_4_0.eContents().get(0);
		private final RuleCall cInitInitCSParserRuleCall_4_0_0_0 = (RuleCall)cInitAssignment_4_0_0.eContents().get(0);
		private final Assignment cDerAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cDerDerCSParserRuleCall_4_0_1_0 = (RuleCall)cDerAssignment_4_0_1.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Assignment cDerAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cDerDerCSParserRuleCall_4_1_0_0 = (RuleCall)cDerAssignment_4_1_0.eContents().get(0);
		private final Assignment cInitAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cInitInitCSParserRuleCall_4_1_1_0 = (RuleCall)cInitAssignment_4_1_1.eContents().get(0);
		
		//PropertyContextDeclCS:
		//	"context" property=PropertyRefCS ":" type=TypeExpCS ((init=InitCS der=DerCS?)? | der=DerCS init=InitCS?);
		public ParserRule getRule() { return rule; }

		//"context" property=PropertyRefCS ":" type=TypeExpCS ((init=InitCS der=DerCS?)? | der=DerCS init=InitCS?)
		public Group getGroup() { return cGroup; }

		//"context"
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }

		//property=PropertyRefCS
		public Assignment getPropertyAssignment_1() { return cPropertyAssignment_1; }

		//PropertyRefCS
		public RuleCall getPropertyPropertyRefCSParserRuleCall_1_0() { return cPropertyPropertyRefCSParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=TypeExpCS
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//TypeExpCS
		public RuleCall getTypeTypeExpCSParserRuleCall_3_0() { return cTypeTypeExpCSParserRuleCall_3_0; }

		//(init=InitCS der=DerCS?)? | der=DerCS init=InitCS?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//(init=InitCS der=DerCS?)?
		public Group getGroup_4_0() { return cGroup_4_0; }

		//init=InitCS
		public Assignment getInitAssignment_4_0_0() { return cInitAssignment_4_0_0; }

		//InitCS
		public RuleCall getInitInitCSParserRuleCall_4_0_0_0() { return cInitInitCSParserRuleCall_4_0_0_0; }

		//der=DerCS?
		public Assignment getDerAssignment_4_0_1() { return cDerAssignment_4_0_1; }

		//DerCS
		public RuleCall getDerDerCSParserRuleCall_4_0_1_0() { return cDerDerCSParserRuleCall_4_0_1_0; }

		//der=DerCS init=InitCS?
		public Group getGroup_4_1() { return cGroup_4_1; }

		//der=DerCS
		public Assignment getDerAssignment_4_1_0() { return cDerAssignment_4_1_0; }

		//DerCS
		public RuleCall getDerDerCSParserRuleCall_4_1_0_0() { return cDerDerCSParserRuleCall_4_1_0_0; }

		//init=InitCS?
		public Assignment getInitAssignment_4_1_1() { return cInitAssignment_4_1_1; }

		//InitCS
		public RuleCall getInitInitCSParserRuleCall_4_1_1_0() { return cInitInitCSParserRuleCall_4_1_1_0; }
	}

	public class PropertyRefCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyRefCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cQualifiedPropertyRefCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSimplePropertyRefCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PropertyRefCS returns base::StructuralFeatureRefCS:
		//	QualifiedPropertyRefCS | SimplePropertyRefCS;
		public ParserRule getRule() { return rule; }

		//QualifiedPropertyRefCS | SimplePropertyRefCS
		public Alternatives getAlternatives() { return cAlternatives; }

		//QualifiedPropertyRefCS
		public RuleCall getQualifiedPropertyRefCSParserRuleCall_0() { return cQualifiedPropertyRefCSParserRuleCall_0; }

		//SimplePropertyRefCS
		public RuleCall getSimplePropertyRefCSParserRuleCall_1() { return cSimplePropertyRefCSParserRuleCall_1; }
	}

	public class QualifiedClassifierRefCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedClassifierRefCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNamespaceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNamespaceNamespaceCSCrossReference_0_0 = (CrossReference)cNamespaceAssignment_0.eContents().get(0);
		private final RuleCall cNamespaceNamespaceCSIdentifierParserRuleCall_0_0_1 = (RuleCall)cNamespaceNamespaceCSCrossReference_0_0.eContents().get(1);
		private final Keyword cColonColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementClassifierRefCSParserRuleCall_2_0 = (RuleCall)cElementAssignment_2.eContents().get(0);
		
		//QualifiedClassifierRefCS returns base::QualifiedClassifierRefCS:
		//	namespace=[base::NamespaceCS|Identifier] "::" element=ClassifierRefCS;
		public ParserRule getRule() { return rule; }

		//namespace=[base::NamespaceCS|Identifier] "::" element=ClassifierRefCS
		public Group getGroup() { return cGroup; }

		//namespace=[base::NamespaceCS|Identifier]
		public Assignment getNamespaceAssignment_0() { return cNamespaceAssignment_0; }

		//[base::NamespaceCS|Identifier]
		public CrossReference getNamespaceNamespaceCSCrossReference_0_0() { return cNamespaceNamespaceCSCrossReference_0_0; }

		//Identifier
		public RuleCall getNamespaceNamespaceCSIdentifierParserRuleCall_0_0_1() { return cNamespaceNamespaceCSIdentifierParserRuleCall_0_0_1; }

		//"::"
		public Keyword getColonColonKeyword_1() { return cColonColonKeyword_1; }

		//element=ClassifierRefCS
		public Assignment getElementAssignment_2() { return cElementAssignment_2; }

		//ClassifierRefCS
		public RuleCall getElementClassifierRefCSParserRuleCall_2_0() { return cElementClassifierRefCSParserRuleCall_2_0; }
	}

	public class QualifiedOperationRefCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedOperationRefCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNamespaceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNamespaceNamespaceCSCrossReference_0_0 = (CrossReference)cNamespaceAssignment_0.eContents().get(0);
		private final RuleCall cNamespaceNamespaceCSIdentifierParserRuleCall_0_0_1 = (RuleCall)cNamespaceNamespaceCSCrossReference_0_0.eContents().get(1);
		private final Keyword cColonColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementOperationRefCSParserRuleCall_2_0 = (RuleCall)cElementAssignment_2.eContents().get(0);
		
		//QualifiedOperationRefCS returns base::QualifiedOperationRefCS:
		//	namespace=[base::NamespaceCS|Identifier] "::" element=OperationRefCS;
		public ParserRule getRule() { return rule; }

		//namespace=[base::NamespaceCS|Identifier] "::" element=OperationRefCS
		public Group getGroup() { return cGroup; }

		//namespace=[base::NamespaceCS|Identifier]
		public Assignment getNamespaceAssignment_0() { return cNamespaceAssignment_0; }

		//[base::NamespaceCS|Identifier]
		public CrossReference getNamespaceNamespaceCSCrossReference_0_0() { return cNamespaceNamespaceCSCrossReference_0_0; }

		//Identifier
		public RuleCall getNamespaceNamespaceCSIdentifierParserRuleCall_0_0_1() { return cNamespaceNamespaceCSIdentifierParserRuleCall_0_0_1; }

		//"::"
		public Keyword getColonColonKeyword_1() { return cColonColonKeyword_1; }

		//element=OperationRefCS
		public Assignment getElementAssignment_2() { return cElementAssignment_2; }

		//OperationRefCS
		public RuleCall getElementOperationRefCSParserRuleCall_2_0() { return cElementOperationRefCSParserRuleCall_2_0; }
	}

	public class QualifiedPropertyRefCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedPropertyRefCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNamespaceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNamespaceNamespaceCSCrossReference_0_0 = (CrossReference)cNamespaceAssignment_0.eContents().get(0);
		private final RuleCall cNamespaceNamespaceCSIdentifierParserRuleCall_0_0_1 = (RuleCall)cNamespaceNamespaceCSCrossReference_0_0.eContents().get(1);
		private final Keyword cColonColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementPropertyRefCSParserRuleCall_2_0 = (RuleCall)cElementAssignment_2.eContents().get(0);
		
		//QualifiedPropertyRefCS returns base::QualifiedStructuralFeatureRefCS:
		//	namespace=[base::NamespaceCS|Identifier] "::" element=PropertyRefCS;
		public ParserRule getRule() { return rule; }

		//namespace=[base::NamespaceCS|Identifier] "::" element=PropertyRefCS
		public Group getGroup() { return cGroup; }

		//namespace=[base::NamespaceCS|Identifier]
		public Assignment getNamespaceAssignment_0() { return cNamespaceAssignment_0; }

		//[base::NamespaceCS|Identifier]
		public CrossReference getNamespaceNamespaceCSCrossReference_0_0() { return cNamespaceNamespaceCSCrossReference_0_0; }

		//Identifier
		public RuleCall getNamespaceNamespaceCSIdentifierParserRuleCall_0_0_1() { return cNamespaceNamespaceCSIdentifierParserRuleCall_0_0_1; }

		//"::"
		public Keyword getColonColonKeyword_1() { return cColonColonKeyword_1; }

		//element=PropertyRefCS
		public Assignment getElementAssignment_2() { return cElementAssignment_2; }

		//PropertyRefCS
		public RuleCall getElementPropertyRefCSParserRuleCall_2_0() { return cElementPropertyRefCSParserRuleCall_2_0; }
	}

	public class QualifiedPackageRefCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedPackageRefCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNamespaceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNamespaceNamespaceCSCrossReference_0_0 = (CrossReference)cNamespaceAssignment_0.eContents().get(0);
		private final RuleCall cNamespaceNamespaceCSIdentifierParserRuleCall_0_0_1 = (RuleCall)cNamespaceNamespaceCSCrossReference_0_0.eContents().get(1);
		private final Keyword cColonColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementPackageRefCSParserRuleCall_2_0 = (RuleCall)cElementAssignment_2.eContents().get(0);
		
		//QualifiedPackageRefCS returns base::QualifiedPackageRefCS:
		//	namespace=[base::NamespaceCS|Identifier] "::" element=PackageRefCS;
		public ParserRule getRule() { return rule; }

		//namespace=[base::NamespaceCS|Identifier] "::" element=PackageRefCS
		public Group getGroup() { return cGroup; }

		//namespace=[base::NamespaceCS|Identifier]
		public Assignment getNamespaceAssignment_0() { return cNamespaceAssignment_0; }

		//[base::NamespaceCS|Identifier]
		public CrossReference getNamespaceNamespaceCSCrossReference_0_0() { return cNamespaceNamespaceCSCrossReference_0_0; }

		//Identifier
		public RuleCall getNamespaceNamespaceCSIdentifierParserRuleCall_0_0_1() { return cNamespaceNamespaceCSIdentifierParserRuleCall_0_0_1; }

		//"::"
		public Keyword getColonColonKeyword_1() { return cColonColonKeyword_1; }

		//element=PackageRefCS
		public Assignment getElementAssignment_2() { return cElementAssignment_2; }

		//PackageRefCS
		public RuleCall getElementPackageRefCSParserRuleCall_2_0() { return cElementPackageRefCSParserRuleCall_2_0; }
	}

	public class SimpleClassifierRefCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleClassifierRefCS");
		private final Assignment cClassifierAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cClassifierClassifierCSCrossReference_0 = (CrossReference)cClassifierAssignment.eContents().get(0);
		private final RuleCall cClassifierClassifierCSIdentifierParserRuleCall_0_1 = (RuleCall)cClassifierClassifierCSCrossReference_0.eContents().get(1);
		
		//SimpleClassifierRefCS returns base::SimpleClassifierRefCS:
		//	classifier=[base::ClassifierCS|Identifier];
		public ParserRule getRule() { return rule; }

		//classifier=[base::ClassifierCS|Identifier]
		public Assignment getClassifierAssignment() { return cClassifierAssignment; }

		//[base::ClassifierCS|Identifier]
		public CrossReference getClassifierClassifierCSCrossReference_0() { return cClassifierClassifierCSCrossReference_0; }

		//Identifier
		public RuleCall getClassifierClassifierCSIdentifierParserRuleCall_0_1() { return cClassifierClassifierCSIdentifierParserRuleCall_0_1; }
	}

	public class SimpleOperationRefCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleOperationRefCS");
		private final Assignment cOperationAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cOperationOperationCSCrossReference_0 = (CrossReference)cOperationAssignment.eContents().get(0);
		private final RuleCall cOperationOperationCSIdentifierParserRuleCall_0_1 = (RuleCall)cOperationOperationCSCrossReference_0.eContents().get(1);
		
		//SimpleOperationRefCS returns base::SimpleOperationRefCS:
		//	operation=[base::OperationCS|Identifier];
		public ParserRule getRule() { return rule; }

		//operation=[base::OperationCS|Identifier]
		public Assignment getOperationAssignment() { return cOperationAssignment; }

		//[base::OperationCS|Identifier]
		public CrossReference getOperationOperationCSCrossReference_0() { return cOperationOperationCSCrossReference_0; }

		//Identifier
		public RuleCall getOperationOperationCSIdentifierParserRuleCall_0_1() { return cOperationOperationCSIdentifierParserRuleCall_0_1; }
	}

	public class SimplePackageRefCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimplePackageRefCS");
		private final Assignment cPackageAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cPackagePackageCSCrossReference_0 = (CrossReference)cPackageAssignment.eContents().get(0);
		private final RuleCall cPackagePackageCSIdentifierParserRuleCall_0_1 = (RuleCall)cPackagePackageCSCrossReference_0.eContents().get(1);
		
		//SimplePackageRefCS returns base::SimplePackageRefCS:
		//	package=[base::PackageCS|Identifier];
		public ParserRule getRule() { return rule; }

		//package=[base::PackageCS|Identifier]
		public Assignment getPackageAssignment() { return cPackageAssignment; }

		//[base::PackageCS|Identifier]
		public CrossReference getPackagePackageCSCrossReference_0() { return cPackagePackageCSCrossReference_0; }

		//Identifier
		public RuleCall getPackagePackageCSIdentifierParserRuleCall_0_1() { return cPackagePackageCSIdentifierParserRuleCall_0_1; }
	}

	public class SimplePropertyRefCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimplePropertyRefCS");
		private final Assignment cFeatureAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cFeatureStructuralFeatureCSCrossReference_0 = (CrossReference)cFeatureAssignment.eContents().get(0);
		private final RuleCall cFeatureStructuralFeatureCSIdentifierParserRuleCall_0_1 = (RuleCall)cFeatureStructuralFeatureCSCrossReference_0.eContents().get(1);
		
		//SimplePropertyRefCS returns base::SimpleStructuralFeatureRefCS:
		//	feature=[base::StructuralFeatureCS|Identifier];
		public ParserRule getRule() { return rule; }

		//feature=[base::StructuralFeatureCS|Identifier]
		public Assignment getFeatureAssignment() { return cFeatureAssignment; }

		//[base::StructuralFeatureCS|Identifier]
		public CrossReference getFeatureStructuralFeatureCSCrossReference_0() { return cFeatureStructuralFeatureCSCrossReference_0; }

		//Identifier
		public RuleCall getFeatureStructuralFeatureCSIdentifierParserRuleCall_0_1() { return cFeatureStructuralFeatureCSIdentifierParserRuleCall_0_1; }
	}

	public class NavigationExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NavigationExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSubNavigationExpCSParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cInfixExpCSSourceAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_1_0 = (Alternatives)cOpAssignment_1_0_1.eContents().get(0);
		private final Keyword cOpFullStopKeyword_1_0_1_0_0 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusGreaterThanSignKeyword_1_0_1_0_1 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(1);
		private final Assignment cArgumentAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cArgumentNavigatingExpCSParserRuleCall_1_0_2_0 = (RuleCall)cArgumentAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cOclMessageCSSourceAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_1_0 = (Alternatives)cOpAssignment_1_1_1.eContents().get(0);
		private final Keyword cOpCircumflexAccentCircumflexAccentKeyword_1_1_1_0_0 = (Keyword)cOpAlternatives_1_1_1_0.eContents().get(0);
		private final Keyword cOpCircumflexAccentKeyword_1_1_1_0_1 = (Keyword)cOpAlternatives_1_1_1_0.eContents().get(1);
		private final Assignment cMessageNameAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cMessageNameSimpleNameParserRuleCall_1_1_2_0 = (RuleCall)cMessageNameAssignment_1_1_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Group cGroup_1_1_4 = (Group)cGroup_1_1.eContents().get(4);
		private final Assignment cArgumentsAssignment_1_1_4_0 = (Assignment)cGroup_1_1_4.eContents().get(0);
		private final RuleCall cArgumentsOclMessageArgCSParserRuleCall_1_1_4_0_0 = (RuleCall)cArgumentsAssignment_1_1_4_0.eContents().get(0);
		private final Group cGroup_1_1_4_1 = (Group)cGroup_1_1_4.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_4_1_0 = (Keyword)cGroup_1_1_4_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_1_4_1_1 = (Assignment)cGroup_1_1_4_1.eContents().get(1);
		private final RuleCall cArgumentsOclMessageArgCSParserRuleCall_1_1_4_1_1_0 = (RuleCall)cArgumentsAssignment_1_1_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_5 = (Keyword)cGroup_1_1.eContents().get(5);
		
		////---------------------------------------------------------------------------------
		//
		////	EssentialOCL overrides
		//
		////---------------------------------------------------------------------------------
		//
		//NavigationExpCS returns essentialocl::ExpCS:
		//	SubNavigationExpCS ({essentialocl::InfixExpCS.source=current} op=("." | "->") argument=NavigatingExpCS |
		//	{OclMessageCS.source=current} op=("^^" | "^") messageName=SimpleName "(" (arguments+=OclMessageArgCS (","
		//	arguments+=OclMessageArgCS)*)? ")")?;
		public ParserRule getRule() { return rule; }

		//SubNavigationExpCS ({essentialocl::InfixExpCS.source=current} op=("." | "->") argument=NavigatingExpCS |
		//{OclMessageCS.source=current} op=("^^" | "^") messageName=SimpleName "(" (arguments+=OclMessageArgCS (","
		//arguments+=OclMessageArgCS)*)? ")")?
		public Group getGroup() { return cGroup; }

		//SubNavigationExpCS
		public RuleCall getSubNavigationExpCSParserRuleCall_0() { return cSubNavigationExpCSParserRuleCall_0; }

		//({essentialocl::InfixExpCS.source=current} op=("." | "->") argument=NavigatingExpCS | {OclMessageCS.source=current}
		//op=("^^" | "^") messageName=SimpleName "(" (arguments+=OclMessageArgCS ("," arguments+=OclMessageArgCS)*)? ")")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{essentialocl::InfixExpCS.source=current} op=("." | "->") argument=NavigatingExpCS
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{essentialocl::InfixExpCS.source=current}
		public Action getInfixExpCSSourceAction_1_0_0() { return cInfixExpCSSourceAction_1_0_0; }

		//op=("." | "->")
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }

		//"." | "->"
		public Alternatives getOpAlternatives_1_0_1_0() { return cOpAlternatives_1_0_1_0; }

		//"."
		public Keyword getOpFullStopKeyword_1_0_1_0_0() { return cOpFullStopKeyword_1_0_1_0_0; }

		//"->"
		public Keyword getOpHyphenMinusGreaterThanSignKeyword_1_0_1_0_1() { return cOpHyphenMinusGreaterThanSignKeyword_1_0_1_0_1; }

		//argument=NavigatingExpCS
		public Assignment getArgumentAssignment_1_0_2() { return cArgumentAssignment_1_0_2; }

		//NavigatingExpCS
		public RuleCall getArgumentNavigatingExpCSParserRuleCall_1_0_2_0() { return cArgumentNavigatingExpCSParserRuleCall_1_0_2_0; }

		//{OclMessageCS.source=current} op=("^^" | "^") messageName=SimpleName "(" (arguments+=OclMessageArgCS (","
		//arguments+=OclMessageArgCS)*)? ")"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{OclMessageCS.source=current}
		public Action getOclMessageCSSourceAction_1_1_0() { return cOclMessageCSSourceAction_1_1_0; }

		//op=("^^" | "^")
		public Assignment getOpAssignment_1_1_1() { return cOpAssignment_1_1_1; }

		//"^^" | "^"
		public Alternatives getOpAlternatives_1_1_1_0() { return cOpAlternatives_1_1_1_0; }

		//"^^"
		public Keyword getOpCircumflexAccentCircumflexAccentKeyword_1_1_1_0_0() { return cOpCircumflexAccentCircumflexAccentKeyword_1_1_1_0_0; }

		//"^"
		public Keyword getOpCircumflexAccentKeyword_1_1_1_0_1() { return cOpCircumflexAccentKeyword_1_1_1_0_1; }

		//messageName=SimpleName
		public Assignment getMessageNameAssignment_1_1_2() { return cMessageNameAssignment_1_1_2; }

		//SimpleName
		public RuleCall getMessageNameSimpleNameParserRuleCall_1_1_2_0() { return cMessageNameSimpleNameParserRuleCall_1_1_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1_3() { return cLeftParenthesisKeyword_1_1_3; }

		//(arguments+=OclMessageArgCS ("," arguments+=OclMessageArgCS)*)?
		public Group getGroup_1_1_4() { return cGroup_1_1_4; }

		//arguments+=OclMessageArgCS
		public Assignment getArgumentsAssignment_1_1_4_0() { return cArgumentsAssignment_1_1_4_0; }

		//OclMessageArgCS
		public RuleCall getArgumentsOclMessageArgCSParserRuleCall_1_1_4_0_0() { return cArgumentsOclMessageArgCSParserRuleCall_1_1_4_0_0; }

		//("," arguments+=OclMessageArgCS)*
		public Group getGroup_1_1_4_1() { return cGroup_1_1_4_1; }

		//","
		public Keyword getCommaKeyword_1_1_4_1_0() { return cCommaKeyword_1_1_4_1_0; }

		//arguments+=OclMessageArgCS
		public Assignment getArgumentsAssignment_1_1_4_1_1() { return cArgumentsAssignment_1_1_4_1_1; }

		//OclMessageArgCS
		public RuleCall getArgumentsOclMessageArgCSParserRuleCall_1_1_4_1_1_0() { return cArgumentsOclMessageArgCSParserRuleCall_1_1_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_5() { return cRightParenthesisKeyword_1_1_5; }
	}

	public class NavigatingExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NavigatingExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSubNavigatingExpCSParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cInfixExpCSSourceAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_1_0 = (Alternatives)cOpAssignment_1_0_1.eContents().get(0);
		private final Keyword cOpFullStopKeyword_1_0_1_0_0 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusGreaterThanSignKeyword_1_0_1_0_1 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(1);
		private final Assignment cArgumentAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cArgumentNavigatingExpCSParserRuleCall_1_0_2_0 = (RuleCall)cArgumentAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cOclMessageCSSourceAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_1_0 = (Alternatives)cOpAssignment_1_1_1.eContents().get(0);
		private final Keyword cOpCircumflexAccentCircumflexAccentKeyword_1_1_1_0_0 = (Keyword)cOpAlternatives_1_1_1_0.eContents().get(0);
		private final Keyword cOpCircumflexAccentKeyword_1_1_1_0_1 = (Keyword)cOpAlternatives_1_1_1_0.eContents().get(1);
		private final Assignment cMessageNameAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cMessageNameSimpleNameParserRuleCall_1_1_2_0 = (RuleCall)cMessageNameAssignment_1_1_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Group cGroup_1_1_4 = (Group)cGroup_1_1.eContents().get(4);
		private final Assignment cArgumentsAssignment_1_1_4_0 = (Assignment)cGroup_1_1_4.eContents().get(0);
		private final RuleCall cArgumentsOclMessageArgCSParserRuleCall_1_1_4_0_0 = (RuleCall)cArgumentsAssignment_1_1_4_0.eContents().get(0);
		private final Group cGroup_1_1_4_1 = (Group)cGroup_1_1_4.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_4_1_0 = (Keyword)cGroup_1_1_4_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_1_4_1_1 = (Assignment)cGroup_1_1_4_1.eContents().get(1);
		private final RuleCall cArgumentsOclMessageArgCSParserRuleCall_1_1_4_1_1_0 = (RuleCall)cArgumentsAssignment_1_1_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_5 = (Keyword)cGroup_1_1.eContents().get(5);
		
		//// Follows ., ->, ^
		//
		//NavigatingExpCS returns essentialocl::ExpCS:
		//	SubNavigatingExpCS ({essentialocl::InfixExpCS.source=current} op=("." | "->") argument=NavigatingExpCS |
		//	{OclMessageCS.source=current} op=("^^" | "^") messageName=SimpleName "(" (arguments+=OclMessageArgCS (","
		//	arguments+=OclMessageArgCS)*)? ")")?;
		public ParserRule getRule() { return rule; }

		//SubNavigatingExpCS ({essentialocl::InfixExpCS.source=current} op=("." | "->") argument=NavigatingExpCS |
		//{OclMessageCS.source=current} op=("^^" | "^") messageName=SimpleName "(" (arguments+=OclMessageArgCS (","
		//arguments+=OclMessageArgCS)*)? ")")?
		public Group getGroup() { return cGroup; }

		//SubNavigatingExpCS
		public RuleCall getSubNavigatingExpCSParserRuleCall_0() { return cSubNavigatingExpCSParserRuleCall_0; }

		//({essentialocl::InfixExpCS.source=current} op=("." | "->") argument=NavigatingExpCS | {OclMessageCS.source=current}
		//op=("^^" | "^") messageName=SimpleName "(" (arguments+=OclMessageArgCS ("," arguments+=OclMessageArgCS)*)? ")")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{essentialocl::InfixExpCS.source=current} op=("." | "->") argument=NavigatingExpCS
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{essentialocl::InfixExpCS.source=current}
		public Action getInfixExpCSSourceAction_1_0_0() { return cInfixExpCSSourceAction_1_0_0; }

		//op=("." | "->")
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }

		//"." | "->"
		public Alternatives getOpAlternatives_1_0_1_0() { return cOpAlternatives_1_0_1_0; }

		//"."
		public Keyword getOpFullStopKeyword_1_0_1_0_0() { return cOpFullStopKeyword_1_0_1_0_0; }

		//"->"
		public Keyword getOpHyphenMinusGreaterThanSignKeyword_1_0_1_0_1() { return cOpHyphenMinusGreaterThanSignKeyword_1_0_1_0_1; }

		//argument=NavigatingExpCS
		public Assignment getArgumentAssignment_1_0_2() { return cArgumentAssignment_1_0_2; }

		//NavigatingExpCS
		public RuleCall getArgumentNavigatingExpCSParserRuleCall_1_0_2_0() { return cArgumentNavigatingExpCSParserRuleCall_1_0_2_0; }

		//{OclMessageCS.source=current} op=("^^" | "^") messageName=SimpleName "(" (arguments+=OclMessageArgCS (","
		//arguments+=OclMessageArgCS)*)? ")"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{OclMessageCS.source=current}
		public Action getOclMessageCSSourceAction_1_1_0() { return cOclMessageCSSourceAction_1_1_0; }

		//op=("^^" | "^")
		public Assignment getOpAssignment_1_1_1() { return cOpAssignment_1_1_1; }

		//"^^" | "^"
		public Alternatives getOpAlternatives_1_1_1_0() { return cOpAlternatives_1_1_1_0; }

		//"^^"
		public Keyword getOpCircumflexAccentCircumflexAccentKeyword_1_1_1_0_0() { return cOpCircumflexAccentCircumflexAccentKeyword_1_1_1_0_0; }

		//"^"
		public Keyword getOpCircumflexAccentKeyword_1_1_1_0_1() { return cOpCircumflexAccentKeyword_1_1_1_0_1; }

		//messageName=SimpleName
		public Assignment getMessageNameAssignment_1_1_2() { return cMessageNameAssignment_1_1_2; }

		//SimpleName
		public RuleCall getMessageNameSimpleNameParserRuleCall_1_1_2_0() { return cMessageNameSimpleNameParserRuleCall_1_1_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1_3() { return cLeftParenthesisKeyword_1_1_3; }

		//(arguments+=OclMessageArgCS ("," arguments+=OclMessageArgCS)*)?
		public Group getGroup_1_1_4() { return cGroup_1_1_4; }

		//arguments+=OclMessageArgCS
		public Assignment getArgumentsAssignment_1_1_4_0() { return cArgumentsAssignment_1_1_4_0; }

		//OclMessageArgCS
		public RuleCall getArgumentsOclMessageArgCSParserRuleCall_1_1_4_0_0() { return cArgumentsOclMessageArgCSParserRuleCall_1_1_4_0_0; }

		//("," arguments+=OclMessageArgCS)*
		public Group getGroup_1_1_4_1() { return cGroup_1_1_4_1; }

		//","
		public Keyword getCommaKeyword_1_1_4_1_0() { return cCommaKeyword_1_1_4_1_0; }

		//arguments+=OclMessageArgCS
		public Assignment getArgumentsAssignment_1_1_4_1_1() { return cArgumentsAssignment_1_1_4_1_1; }

		//OclMessageArgCS
		public RuleCall getArgumentsOclMessageArgCSParserRuleCall_1_1_4_1_1_0() { return cArgumentsOclMessageArgCSParserRuleCall_1_1_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_5() { return cRightParenthesisKeyword_1_1_5; }
	}

	public class OclMessageArgCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OclMessageArgCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOclMessageArgCSAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cColonKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cTypeAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cTypeTypeExpCSParserRuleCall_0_2_1_0 = (RuleCall)cTypeAssignment_0_2_1.eContents().get(0);
		private final RuleCall cExpCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// FIXME @pre
		//
		//OclMessageArgCS returns essentialocl::ExpCS:
		//	{OclMessageArgCS} "?" (":" type=TypeExpCS)? | ExpCS;
		public ParserRule getRule() { return rule; }

		//{OclMessageArgCS} "?" (":" type=TypeExpCS)? | ExpCS
		public Alternatives getAlternatives() { return cAlternatives; }

		//{OclMessageArgCS} "?" (":" type=TypeExpCS)?
		public Group getGroup_0() { return cGroup_0; }

		//{OclMessageArgCS}
		public Action getOclMessageArgCSAction_0_0() { return cOclMessageArgCSAction_0_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_0_1() { return cQuestionMarkKeyword_0_1; }

		//(":" type=TypeExpCS)?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//":"
		public Keyword getColonKeyword_0_2_0() { return cColonKeyword_0_2_0; }

		//type=TypeExpCS
		public Assignment getTypeAssignment_0_2_1() { return cTypeAssignment_0_2_1; }

		//TypeExpCS
		public RuleCall getTypeTypeExpCSParserRuleCall_0_2_1_0() { return cTypeTypeExpCSParserRuleCall_0_2_1_0; }

		//ExpCS
		public RuleCall getExpCSParserRuleCall_1() { return cExpCSParserRuleCall_1; }
	}
	
	
	private CompleteOCLDocumentCSElements pCompleteOCLDocumentCS;
	private RestrictedKeywordsElements pRestrictedKeywords;
	private PrimitiveTypeIdentifierElements pPrimitiveTypeIdentifier;
	private BodyCSElements pBodyCS;
	private ClassifierContextDeclCSElements pClassifierContextDeclCS;
	private ClassifierRefCSElements pClassifierRefCS;
	private ContextDeclCSElements pContextDeclCS;
	private DefCSElements pDefCS;
	private DerCSElements pDerCS;
	private ImportCSElements pImportCS;
	private InitCSElements pInitCS;
	private InvCSElements pInvCS;
	private OperationContextDeclCSElements pOperationContextDeclCS;
	private OperationRefCSElements pOperationRefCS;
	private PackageDeclarationCSElements pPackageDeclarationCS;
	private PackageRefCSElements pPackageRefCS;
	private ParameterCSElements pParameterCS;
	private PostCSElements pPostCS;
	private PreCSElements pPreCS;
	private PropertyContextDeclCSElements pPropertyContextDeclCS;
	private PropertyRefCSElements pPropertyRefCS;
	private QualifiedClassifierRefCSElements pQualifiedClassifierRefCS;
	private QualifiedOperationRefCSElements pQualifiedOperationRefCS;
	private QualifiedPropertyRefCSElements pQualifiedPropertyRefCS;
	private QualifiedPackageRefCSElements pQualifiedPackageRefCS;
	private SimpleClassifierRefCSElements pSimpleClassifierRefCS;
	private SimpleOperationRefCSElements pSimpleOperationRefCS;
	private SimplePackageRefCSElements pSimplePackageRefCS;
	private SimplePropertyRefCSElements pSimplePropertyRefCS;
	private NavigationExpCSElements pNavigationExpCS;
	private NavigatingExpCSElements pNavigatingExpCS;
	private OclMessageArgCSElements pOclMessageArgCS;
	
	private final GrammarProvider grammarProvider;

	private EssentialOCLGrammarAccess gaEssentialOCL;

	@Inject
	public CompleteOCLGrammarAccess(GrammarProvider grammarProvider,
		EssentialOCLGrammarAccess gaEssentialOCL) {
		this.grammarProvider = grammarProvider;
		this.gaEssentialOCL = gaEssentialOCL;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public EssentialOCLGrammarAccess getEssentialOCLGrammarAccess() {
		return gaEssentialOCL;
	}

	
	////generate completeOCL "http://www.eclipse.org/ocl/examples/xtext/completeocl/CompleteOCL"
	//
	//CompleteOCLDocumentCS:
	//	imports+=ImportCS* (packages+=PackageDeclarationCS | contexts+=ContextDeclCS)*;
	public CompleteOCLDocumentCSElements getCompleteOCLDocumentCSAccess() {
		return (pCompleteOCLDocumentCS != null) ? pCompleteOCLDocumentCS : (pCompleteOCLDocumentCS = new CompleteOCLDocumentCSElements());
	}
	
	public ParserRule getCompleteOCLDocumentCSRule() {
		return getCompleteOCLDocumentCSAccess().getRule();
	}

	////|	'package'
	//
	////|	'post'
	//
	////|	'pre'
	//
	////|	'static'
	//
	//RestrictedKeywords returns ecore::EString:
	//	EssentialOCLRestrictedKeywords //|	'endpackage'
	//
	//	| "body" | "context" | "def" | "derive" | "import" | "init" | "inv";
	public RestrictedKeywordsElements getRestrictedKeywordsAccess() {
		return (pRestrictedKeywords != null) ? pRestrictedKeywords : (pRestrictedKeywords = new RestrictedKeywordsElements());
	}
	
	public ParserRule getRestrictedKeywordsRule() {
		return getRestrictedKeywordsAccess().getRule();
	}

	//PrimitiveTypeIdentifier returns ecore::EString:
	//	"Boolean" | "Integer" | "Real" | "String" | "UnlimitedNatural" | "OclAny" | "OclInvalid" | "OclMessage" | "OclState" |
	//	"OclVoid";
	public PrimitiveTypeIdentifierElements getPrimitiveTypeIdentifierAccess() {
		return (pPrimitiveTypeIdentifier != null) ? pPrimitiveTypeIdentifier : (pPrimitiveTypeIdentifier = new PrimitiveTypeIdentifierElements());
	}
	
	public ParserRule getPrimitiveTypeIdentifierRule() {
		return getPrimitiveTypeIdentifierAccess().getRule();
	}

	//BodyCS:
	//	"body" constraintName=SimpleName? ":" expression=ExpCS;
	public BodyCSElements getBodyCSAccess() {
		return (pBodyCS != null) ? pBodyCS : (pBodyCS = new BodyCSElements());
	}
	
	public ParserRule getBodyCSRule() {
		return getBodyCSAccess().getRule();
	}

	//ClassifierContextDeclCS:
	//	"context" (selfName=SimpleName ":")? classifier=ClassifierRefCS (invs+=InvCS | defs+=DefCS)*;
	public ClassifierContextDeclCSElements getClassifierContextDeclCSAccess() {
		return (pClassifierContextDeclCS != null) ? pClassifierContextDeclCS : (pClassifierContextDeclCS = new ClassifierContextDeclCSElements());
	}
	
	public ParserRule getClassifierContextDeclCSRule() {
		return getClassifierContextDeclCSAccess().getRule();
	}

	//ClassifierRefCS returns base::ClassifierRefCS:
	//	QualifiedClassifierRefCS | SimpleClassifierRefCS;
	public ClassifierRefCSElements getClassifierRefCSAccess() {
		return (pClassifierRefCS != null) ? pClassifierRefCS : (pClassifierRefCS = new ClassifierRefCSElements());
	}
	
	public ParserRule getClassifierRefCSRule() {
		return getClassifierRefCSAccess().getRule();
	}

	//ContextDeclCS:
	//	PropertyContextDeclCS | ClassifierContextDeclCS | OperationContextDeclCS;
	public ContextDeclCSElements getContextDeclCSAccess() {
		return (pContextDeclCS != null) ? pContextDeclCS : (pContextDeclCS = new ContextDeclCSElements());
	}
	
	public ParserRule getContextDeclCSRule() {
		return getContextDeclCSAccess().getRule();
	}

	//DefCS:
	//	static?="static"? "def" constraintName=SimpleName? ":" constrainedName=SimpleName ("(" (parameters+=ParameterCS (","
	//	parameters+=ParameterCS)*)? ")")? ":" type=TypeExpCS? "=" expression=ExpCS;
	public DefCSElements getDefCSAccess() {
		return (pDefCS != null) ? pDefCS : (pDefCS = new DefCSElements());
	}
	
	public ParserRule getDefCSRule() {
		return getDefCSAccess().getRule();
	}

	//DerCS:
	//	"derive" ":" expression=ExpCS;
	public DerCSElements getDerCSAccess() {
		return (pDerCS != null) ? pDerCS : (pDerCS = new DerCSElements());
	}
	
	public ParserRule getDerCSRule() {
		return getDerCSAccess().getRule();
	}

	//ImportCS returns base::ImportCS:
	//	"import" (name=Identifier ":")? namespace=[base::NamespaceCS|SINGLE_QUOTED_STRING];
	public ImportCSElements getImportCSAccess() {
		return (pImportCS != null) ? pImportCS : (pImportCS = new ImportCSElements());
	}
	
	public ParserRule getImportCSRule() {
		return getImportCSAccess().getRule();
	}

	//InitCS:
	//	"init" ":" expression=ExpCS;
	public InitCSElements getInitCSAccess() {
		return (pInitCS != null) ? pInitCS : (pInitCS = new InitCSElements());
	}
	
	public ParserRule getInitCSRule() {
		return getInitCSAccess().getRule();
	}

	//InvCS:
	//	"inv" constraintName=SimpleName? ":" expression=ExpCS;
	public InvCSElements getInvCSAccess() {
		return (pInvCS != null) ? pInvCS : (pInvCS = new InvCSElements());
	}
	
	public ParserRule getInvCSRule() {
		return getInvCSAccess().getRule();
	}

	//OperationContextDeclCS:
	//	"context" operation=OperationRefCS "(" (parameters+=ParameterCS ("," parameters+=ParameterCS)*)? ")" ":"
	//	type=TypeExpCS? (pres+=PreCS | posts+=PostCS | bodies+=BodyCS)*;
	public OperationContextDeclCSElements getOperationContextDeclCSAccess() {
		return (pOperationContextDeclCS != null) ? pOperationContextDeclCS : (pOperationContextDeclCS = new OperationContextDeclCSElements());
	}
	
	public ParserRule getOperationContextDeclCSRule() {
		return getOperationContextDeclCSAccess().getRule();
	}

	//OperationRefCS returns base::OperationRefCS:
	//	QualifiedOperationRefCS | SimpleOperationRefCS;
	public OperationRefCSElements getOperationRefCSAccess() {
		return (pOperationRefCS != null) ? pOperationRefCS : (pOperationRefCS = new OperationRefCSElements());
	}
	
	public ParserRule getOperationRefCSRule() {
		return getOperationRefCSAccess().getRule();
	}

	//PackageDeclarationCS:
	//	"package" package=PackageRefCS contexts+=ContextDeclCS* "endpackage";
	public PackageDeclarationCSElements getPackageDeclarationCSAccess() {
		return (pPackageDeclarationCS != null) ? pPackageDeclarationCS : (pPackageDeclarationCS = new PackageDeclarationCSElements());
	}
	
	public ParserRule getPackageDeclarationCSRule() {
		return getPackageDeclarationCSAccess().getRule();
	}

	//PackageRefCS returns base::PackageRefCS:
	//	QualifiedPackageRefCS | SimplePackageRefCS;
	public PackageRefCSElements getPackageRefCSAccess() {
		return (pPackageRefCS != null) ? pPackageRefCS : (pPackageRefCS = new PackageRefCSElements());
	}
	
	public ParserRule getPackageRefCSRule() {
		return getPackageRefCSAccess().getRule();
	}

	//ParameterCS returns essentialocl::VariableCS:
	//	(name=SimpleName ":")? type=TypeExpCS;
	public ParameterCSElements getParameterCSAccess() {
		return (pParameterCS != null) ? pParameterCS : (pParameterCS = new ParameterCSElements());
	}
	
	public ParserRule getParameterCSRule() {
		return getParameterCSAccess().getRule();
	}

	//PostCS:
	//	"post" constraintName=SimpleName? ":" expression=ExpCS;
	public PostCSElements getPostCSAccess() {
		return (pPostCS != null) ? pPostCS : (pPostCS = new PostCSElements());
	}
	
	public ParserRule getPostCSRule() {
		return getPostCSAccess().getRule();
	}

	//PreCS:
	//	"pre" constraintName=SimpleName? ":" expression=ExpCS;
	public PreCSElements getPreCSAccess() {
		return (pPreCS != null) ? pPreCS : (pPreCS = new PreCSElements());
	}
	
	public ParserRule getPreCSRule() {
		return getPreCSAccess().getRule();
	}

	//PropertyContextDeclCS:
	//	"context" property=PropertyRefCS ":" type=TypeExpCS ((init=InitCS der=DerCS?)? | der=DerCS init=InitCS?);
	public PropertyContextDeclCSElements getPropertyContextDeclCSAccess() {
		return (pPropertyContextDeclCS != null) ? pPropertyContextDeclCS : (pPropertyContextDeclCS = new PropertyContextDeclCSElements());
	}
	
	public ParserRule getPropertyContextDeclCSRule() {
		return getPropertyContextDeclCSAccess().getRule();
	}

	//PropertyRefCS returns base::StructuralFeatureRefCS:
	//	QualifiedPropertyRefCS | SimplePropertyRefCS;
	public PropertyRefCSElements getPropertyRefCSAccess() {
		return (pPropertyRefCS != null) ? pPropertyRefCS : (pPropertyRefCS = new PropertyRefCSElements());
	}
	
	public ParserRule getPropertyRefCSRule() {
		return getPropertyRefCSAccess().getRule();
	}

	//QualifiedClassifierRefCS returns base::QualifiedClassifierRefCS:
	//	namespace=[base::NamespaceCS|Identifier] "::" element=ClassifierRefCS;
	public QualifiedClassifierRefCSElements getQualifiedClassifierRefCSAccess() {
		return (pQualifiedClassifierRefCS != null) ? pQualifiedClassifierRefCS : (pQualifiedClassifierRefCS = new QualifiedClassifierRefCSElements());
	}
	
	public ParserRule getQualifiedClassifierRefCSRule() {
		return getQualifiedClassifierRefCSAccess().getRule();
	}

	//QualifiedOperationRefCS returns base::QualifiedOperationRefCS:
	//	namespace=[base::NamespaceCS|Identifier] "::" element=OperationRefCS;
	public QualifiedOperationRefCSElements getQualifiedOperationRefCSAccess() {
		return (pQualifiedOperationRefCS != null) ? pQualifiedOperationRefCS : (pQualifiedOperationRefCS = new QualifiedOperationRefCSElements());
	}
	
	public ParserRule getQualifiedOperationRefCSRule() {
		return getQualifiedOperationRefCSAccess().getRule();
	}

	//QualifiedPropertyRefCS returns base::QualifiedStructuralFeatureRefCS:
	//	namespace=[base::NamespaceCS|Identifier] "::" element=PropertyRefCS;
	public QualifiedPropertyRefCSElements getQualifiedPropertyRefCSAccess() {
		return (pQualifiedPropertyRefCS != null) ? pQualifiedPropertyRefCS : (pQualifiedPropertyRefCS = new QualifiedPropertyRefCSElements());
	}
	
	public ParserRule getQualifiedPropertyRefCSRule() {
		return getQualifiedPropertyRefCSAccess().getRule();
	}

	//QualifiedPackageRefCS returns base::QualifiedPackageRefCS:
	//	namespace=[base::NamespaceCS|Identifier] "::" element=PackageRefCS;
	public QualifiedPackageRefCSElements getQualifiedPackageRefCSAccess() {
		return (pQualifiedPackageRefCS != null) ? pQualifiedPackageRefCS : (pQualifiedPackageRefCS = new QualifiedPackageRefCSElements());
	}
	
	public ParserRule getQualifiedPackageRefCSRule() {
		return getQualifiedPackageRefCSAccess().getRule();
	}

	//SimpleClassifierRefCS returns base::SimpleClassifierRefCS:
	//	classifier=[base::ClassifierCS|Identifier];
	public SimpleClassifierRefCSElements getSimpleClassifierRefCSAccess() {
		return (pSimpleClassifierRefCS != null) ? pSimpleClassifierRefCS : (pSimpleClassifierRefCS = new SimpleClassifierRefCSElements());
	}
	
	public ParserRule getSimpleClassifierRefCSRule() {
		return getSimpleClassifierRefCSAccess().getRule();
	}

	//SimpleOperationRefCS returns base::SimpleOperationRefCS:
	//	operation=[base::OperationCS|Identifier];
	public SimpleOperationRefCSElements getSimpleOperationRefCSAccess() {
		return (pSimpleOperationRefCS != null) ? pSimpleOperationRefCS : (pSimpleOperationRefCS = new SimpleOperationRefCSElements());
	}
	
	public ParserRule getSimpleOperationRefCSRule() {
		return getSimpleOperationRefCSAccess().getRule();
	}

	//SimplePackageRefCS returns base::SimplePackageRefCS:
	//	package=[base::PackageCS|Identifier];
	public SimplePackageRefCSElements getSimplePackageRefCSAccess() {
		return (pSimplePackageRefCS != null) ? pSimplePackageRefCS : (pSimplePackageRefCS = new SimplePackageRefCSElements());
	}
	
	public ParserRule getSimplePackageRefCSRule() {
		return getSimplePackageRefCSAccess().getRule();
	}

	//SimplePropertyRefCS returns base::SimpleStructuralFeatureRefCS:
	//	feature=[base::StructuralFeatureCS|Identifier];
	public SimplePropertyRefCSElements getSimplePropertyRefCSAccess() {
		return (pSimplePropertyRefCS != null) ? pSimplePropertyRefCS : (pSimplePropertyRefCS = new SimplePropertyRefCSElements());
	}
	
	public ParserRule getSimplePropertyRefCSRule() {
		return getSimplePropertyRefCSAccess().getRule();
	}

	////---------------------------------------------------------------------------------
	//
	////	EssentialOCL overrides
	//
	////---------------------------------------------------------------------------------
	//
	//NavigationExpCS returns essentialocl::ExpCS:
	//	SubNavigationExpCS ({essentialocl::InfixExpCS.source=current} op=("." | "->") argument=NavigatingExpCS |
	//	{OclMessageCS.source=current} op=("^^" | "^") messageName=SimpleName "(" (arguments+=OclMessageArgCS (","
	//	arguments+=OclMessageArgCS)*)? ")")?;
	public NavigationExpCSElements getNavigationExpCSAccess() {
		return (pNavigationExpCS != null) ? pNavigationExpCS : (pNavigationExpCS = new NavigationExpCSElements());
	}
	
	public ParserRule getNavigationExpCSRule() {
		return getNavigationExpCSAccess().getRule();
	}

	//// Follows ., ->, ^
	//
	//NavigatingExpCS returns essentialocl::ExpCS:
	//	SubNavigatingExpCS ({essentialocl::InfixExpCS.source=current} op=("." | "->") argument=NavigatingExpCS |
	//	{OclMessageCS.source=current} op=("^^" | "^") messageName=SimpleName "(" (arguments+=OclMessageArgCS (","
	//	arguments+=OclMessageArgCS)*)? ")")?;
	public NavigatingExpCSElements getNavigatingExpCSAccess() {
		return (pNavigatingExpCS != null) ? pNavigatingExpCS : (pNavigatingExpCS = new NavigatingExpCSElements());
	}
	
	public ParserRule getNavigatingExpCSRule() {
		return getNavigatingExpCSAccess().getRule();
	}

	//// FIXME @pre
	//
	//OclMessageArgCS returns essentialocl::ExpCS:
	//	{OclMessageArgCS} "?" (":" type=TypeExpCS)? | ExpCS;
	public OclMessageArgCSElements getOclMessageArgCSAccess() {
		return (pOclMessageArgCS != null) ? pOclMessageArgCS : (pOclMessageArgCS = new OclMessageArgCSElements());
	}
	
	public ParserRule getOclMessageArgCSRule() {
		return getOclMessageArgCSAccess().getRule();
	}

	////generate essentialOCLCST "http://www.eclipse.org/ocl/3.0.0/EssentialOCLCST"
	//
	//Model returns ExpCS:
	//	ExpCS;
	public EssentialOCLGrammarAccess.ModelElements getModelAccess() {
		return gaEssentialOCL.getModelAccess();
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//terminal DOUBLE_QUOTED_STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"";
	public TerminalRule getDOUBLE_QUOTED_STRINGRule() {
		return gaEssentialOCL.getDOUBLE_QUOTED_STRINGRule();
	} 

	//terminal SINGLE_QUOTED_STRING:
	//	"\'" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSINGLE_QUOTED_STRINGRule() {
		return gaEssentialOCL.getSINGLE_QUOTED_STRINGRule();
	} 

	//terminal ID:
	//	("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")* | "_" SINGLE_QUOTED_STRING;
	public TerminalRule getIDRule() {
		return gaEssentialOCL.getIDRule();
	} 

	//// String to allow diverse re-use
	//
	//terminal INT:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaEssentialOCL.getINTRule();
	} 

	//// Not terminal to allow parser backtracking to sort out "5..7"
	//
	//NUMBER_LITERAL returns BigNumber:
	//	INT ("." INT)? (("e" | "E") ("+" | "-")? INT)?;
	public EssentialOCLGrammarAccess.NUMBER_LITERALElements getNUMBER_LITERALAccess() {
		return gaEssentialOCL.getNUMBER_LITERALAccess();
	}
	
	public ParserRule getNUMBER_LITERALRule() {
		return getNUMBER_LITERALAccess().getRule();
	}

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaEssentialOCL.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"--" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaEssentialOCL.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaEssentialOCL.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaEssentialOCL.getANY_OTHERRule();
	} 

	//EssentialOCLReservedKeywords returns ecore::EString:
	//	"and" | "else" | "endif" | "if" | "implies" | "in" | "let" | "not" | "or" | "then" | "xor";
	public EssentialOCLGrammarAccess.EssentialOCLReservedKeywordsElements getEssentialOCLReservedKeywordsAccess() {
		return gaEssentialOCL.getEssentialOCLReservedKeywordsAccess();
	}
	
	public ParserRule getEssentialOCLReservedKeywordsRule() {
		return getEssentialOCLReservedKeywordsAccess().getRule();
	}

	//EssentialOCLRestrictedKeywords returns ecore::EString:
	//	"e" | "E";
	public EssentialOCLGrammarAccess.EssentialOCLRestrictedKeywordsElements getEssentialOCLRestrictedKeywordsAccess() {
		return gaEssentialOCL.getEssentialOCLRestrictedKeywordsAccess();
	}
	
	public ParserRule getEssentialOCLRestrictedKeywordsRule() {
		return getEssentialOCLRestrictedKeywordsAccess().getRule();
	}

	//Identifier returns ecore::EString:
	//	ID | RestrictedKeywords;
	public EssentialOCLGrammarAccess.IdentifierElements getIdentifierAccess() {
		return gaEssentialOCL.getIdentifierAccess();
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}

	//StringLiteral returns ecore::EString:
	//	SINGLE_QUOTED_STRING;
	public EssentialOCLGrammarAccess.StringLiteralElements getStringLiteralAccess() {
		return gaEssentialOCL.getStringLiteralAccess();
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	////---------------------------------------------------------------------
	//
	////  Names
	//
	////---------------------------------------------------------------------
	//
	/// *  Temporary backward compatibility support for 7.4.8 conceptual usage 
	//
	//conceptualOperationName returns SimpleNameCS:
	//
	//	value='and'
	//
	//	| value='implies'
	//
	//	| value='not'
	//
	//	| value='or'
	//
	//	| value='xor'
	//
	//	| value='<'
	//
	//	| value='<='
	//
	//	| value='>='
	//
	//	| value='>'
	//
	//	| value='='
	//
	//	| value='<>'
	//
	//	| value='+'
	//
	//	| value='-'
	//
	//	| value='*'
	//
	//	| value='/';
	//
	//conceptualOperationNameCS returns SimpleNameCS:
	//
	//	conceptualOperationName; * // *tupleKeywordCS returns ecore::EString:
	//
	//	value='Tuple'; * // *restrictedKeywordCS returns ecore::EString: 
	//
	//	CollectionTypeIdentifierCS
	//
	////  restrictedKeywordCS -> BooleanLiteralExpCS
	//
	////  restrictedKeywordCS -> InvalidLiteralExpCS
	//
	////  restrictedKeywordCS -> NullLiteralExpCS
	//
	////-  restrictedKeywordCS -> selfKeywordCS
	//
	//|	primitiveTypeCS
	//
	//|	tupleKeywordCS; * /SimpleName returns ecore::EString:
	//	Identifier;
	public EssentialOCLGrammarAccess.SimpleNameElements getSimpleNameAccess() {
		return gaEssentialOCL.getSimpleNameAccess();
	}
	
	public ParserRule getSimpleNameRule() {
		return getSimpleNameAccess().getRule();
	}

	//PrimitiveTypeCS:
	//	name=PrimitiveTypeIdentifier;
	public EssentialOCLGrammarAccess.PrimitiveTypeCSElements getPrimitiveTypeCSAccess() {
		return gaEssentialOCL.getPrimitiveTypeCSAccess();
	}
	
	public ParserRule getPrimitiveTypeCSRule() {
		return getPrimitiveTypeCSAccess().getRule();
	}

	//CollectionTypeIdentifier returns ecore::EString:
	//	"Set" | "Bag" | "Sequence" | "Collection" | "OrderedSet";
	public EssentialOCLGrammarAccess.CollectionTypeIdentifierElements getCollectionTypeIdentifierAccess() {
		return gaEssentialOCL.getCollectionTypeIdentifierAccess();
	}
	
	public ParserRule getCollectionTypeIdentifierRule() {
		return getCollectionTypeIdentifierAccess().getRule();
	}

	//TypeExpCS:
	//	PrimitiveTypeCS | NameExpCS | CollectionTypeCS | TupleTypeCS;
	public EssentialOCLGrammarAccess.TypeExpCSElements getTypeExpCSAccess() {
		return gaEssentialOCL.getTypeExpCSAccess();
	}
	
	public ParserRule getTypeExpCSRule() {
		return getTypeExpCSAccess().getRule();
	}

	//CollectionTypeCS:
	//	name=CollectionTypeIdentifier ("(" typeCS=TypeExpCS ")")?;
	public EssentialOCLGrammarAccess.CollectionTypeCSElements getCollectionTypeCSAccess() {
		return gaEssentialOCL.getCollectionTypeCSAccess();
	}
	
	public ParserRule getCollectionTypeCSRule() {
		return getCollectionTypeCSAccess().getRule();
	}

	//TupleTypeCS:
	//	name="Tuple" "(" (part+=tuplePartCS ("," part+=tuplePartCS)*)? ")";
	public EssentialOCLGrammarAccess.TupleTypeCSElements getTupleTypeCSAccess() {
		return gaEssentialOCL.getTupleTypeCSAccess();
	}
	
	public ParserRule getTupleTypeCSRule() {
		return getTupleTypeCSAccess().getRule();
	}

	//tuplePartCS returns VariableCS:
	//	name=SimpleName ":" type=TypeExpCS;
	public EssentialOCLGrammarAccess.TuplePartCSElements getTuplePartCSAccess() {
		return gaEssentialOCL.getTuplePartCSAccess();
	}
	
	public ParserRule getTuplePartCSRule() {
		return getTuplePartCSAccess().getRule();
	}

	////---------------------------------------------------------------------
	//
	////  Literals
	//
	////---------------------------------------------------------------------
	//
	//// EnumLiteralExpCS is parsed as a PropertyCallExpCS[C]
	//
	////  LiteralExpCS -> EnumLiteralExpCS
	//
	////LiteralExpCS returns LiteralExpCS:
	//
	////	CollectionLiteralExpCS
	//
	////|	TupleLiteralExpCS
	//
	////|	PrimitiveLiteralExpCS
	//
	////|	primitiveTypeCS
	//
	////|	NameExpCS
	//
	//////|	collectionTypeCS
	//
	////|	TupleTypeCS
	//
	////;
	//
	//// or CollectionTypeLiteral
	//
	//CollectionLiteralExpCS returns LiteralExpCS:
	//	CollectionTypeCS ({CollectionLiteralExpCS.typeCS=current} "{" (collectionLiteralParts+=CollectionLiteralPartCS (","
	//	collectionLiteralParts+=CollectionLiteralPartCS)*)? "}")?;
	public EssentialOCLGrammarAccess.CollectionLiteralExpCSElements getCollectionLiteralExpCSAccess() {
		return gaEssentialOCL.getCollectionLiteralExpCSAccess();
	}
	
	public ParserRule getCollectionLiteralExpCSRule() {
		return getCollectionLiteralExpCSAccess().getRule();
	}

	//CollectionLiteralPartCS:
	//	expressionCS=ExpCS (".." lastExpressionCS=ExpCS)?;
	public EssentialOCLGrammarAccess.CollectionLiteralPartCSElements getCollectionLiteralPartCSAccess() {
		return gaEssentialOCL.getCollectionLiteralPartCSAccess();
	}
	
	public ParserRule getCollectionLiteralPartCSRule() {
		return getCollectionLiteralPartCSAccess().getRule();
	}

	//PrimitiveLiteralExpCS:
	//	NumberLiteralExpCS | StringLiteralExpCS | BooleanLiteralExpCS | InvalidLiteralExpCS | NullLiteralExpCS;
	public EssentialOCLGrammarAccess.PrimitiveLiteralExpCSElements getPrimitiveLiteralExpCSAccess() {
		return gaEssentialOCL.getPrimitiveLiteralExpCSAccess();
	}
	
	public ParserRule getPrimitiveLiteralExpCSRule() {
		return getPrimitiveLiteralExpCSAccess().getRule();
	}

	//// or TupleTypeLiteral
	//
	//TupleLiteralExpCS:
	//	{TupleLiteralExpCS} "Tuple" ("{" part+=TupleLiteralPartCS ("," part+=TupleLiteralPartCS)* "}")?;
	public EssentialOCLGrammarAccess.TupleLiteralExpCSElements getTupleLiteralExpCSAccess() {
		return gaEssentialOCL.getTupleLiteralExpCSAccess();
	}
	
	public ParserRule getTupleLiteralExpCSRule() {
		return getTupleLiteralExpCSAccess().getRule();
	}

	//TupleLiteralPartCS returns VariableCS:
	//	name=SimpleName (":" type=TypeExpCS)? "=" initExpression=ExpCS;
	public EssentialOCLGrammarAccess.TupleLiteralPartCSElements getTupleLiteralPartCSAccess() {
		return gaEssentialOCL.getTupleLiteralPartCSAccess();
	}
	
	public ParserRule getTupleLiteralPartCSRule() {
		return getTupleLiteralPartCSAccess().getRule();
	}

	//NumberLiteralExpCS:
	//	name=NUMBER_LITERAL;
	public EssentialOCLGrammarAccess.NumberLiteralExpCSElements getNumberLiteralExpCSAccess() {
		return gaEssentialOCL.getNumberLiteralExpCSAccess();
	}
	
	public ParserRule getNumberLiteralExpCSRule() {
		return getNumberLiteralExpCSAccess().getRule();
	}

	//StringLiteralExpCS:
	//	name+=StringLiteral+;
	public EssentialOCLGrammarAccess.StringLiteralExpCSElements getStringLiteralExpCSAccess() {
		return gaEssentialOCL.getStringLiteralExpCSAccess();
	}
	
	public ParserRule getStringLiteralExpCSRule() {
		return getStringLiteralExpCSAccess().getRule();
	}

	//BooleanLiteralExpCS:
	//	name="true" | name="false";
	public EssentialOCLGrammarAccess.BooleanLiteralExpCSElements getBooleanLiteralExpCSAccess() {
		return gaEssentialOCL.getBooleanLiteralExpCSAccess();
	}
	
	public ParserRule getBooleanLiteralExpCSRule() {
		return getBooleanLiteralExpCSAccess().getRule();
	}

	//InvalidLiteralExpCS:
	//	{InvalidLiteralExpCS} "invalid";
	public EssentialOCLGrammarAccess.InvalidLiteralExpCSElements getInvalidLiteralExpCSAccess() {
		return gaEssentialOCL.getInvalidLiteralExpCSAccess();
	}
	
	public ParserRule getInvalidLiteralExpCSRule() {
		return getInvalidLiteralExpCSAccess().getRule();
	}

	//NullLiteralExpCS:
	//	{NullLiteralExpCS} "null";
	public EssentialOCLGrammarAccess.NullLiteralExpCSElements getNullLiteralExpCSAccess() {
		return gaEssentialOCL.getNullLiteralExpCSAccess();
	}
	
	public ParserRule getNullLiteralExpCSRule() {
		return getNullLiteralExpCSAccess().getRule();
	}

	////---------------------------------------------------------------------
	//
	////  Expressions
	//
	////---------------------------------------------------------------------
	//
	//// An OclExpressionCS comprising one or more LetExpCS is kept separate to ensure
	//
	////  that let is right associative, whereas infix operators are left associative.
	//
	////   a = 64 / 16 / let b : Integer in 8 / let c : Integer in 4 
	//
	//// is
	//
	////   a = (64 / 16) / (let b : Integer in 8 / (let c : Integer in 4 ))
	//
	//ExpCS:
	//	impliesCS | LetExpCS;
	public EssentialOCLGrammarAccess.ExpCSElements getExpCSAccess() {
		return gaEssentialOCL.getExpCSAccess();
	}
	
	public ParserRule getExpCSRule() {
		return getExpCSAccess().getRule();
	}

	//impliesCS returns ExpCS:
	//	xorCS ({InfixExpCS.source=current} op="implies" argument=(xorCS | LetExpCS))*;
	public EssentialOCLGrammarAccess.ImpliesCSElements getImpliesCSAccess() {
		return gaEssentialOCL.getImpliesCSAccess();
	}
	
	public ParserRule getImpliesCSRule() {
		return getImpliesCSAccess().getRule();
	}

	//xorCS returns ExpCS:
	//	orCS ({InfixExpCS.source=current} op="xor" argument=(orCS | LetExpCS))*;
	public EssentialOCLGrammarAccess.XorCSElements getXorCSAccess() {
		return gaEssentialOCL.getXorCSAccess();
	}
	
	public ParserRule getXorCSRule() {
		return getXorCSAccess().getRule();
	}

	//orCS returns ExpCS:
	//	andCS ({InfixExpCS.source=current} op="or" argument=(andCS | LetExpCS))*;
	public EssentialOCLGrammarAccess.OrCSElements getOrCSAccess() {
		return gaEssentialOCL.getOrCSAccess();
	}
	
	public ParserRule getOrCSRule() {
		return getOrCSAccess().getRule();
	}

	//andCS returns ExpCS:
	//	equalityCS ({InfixExpCS.source=current} op="and" argument=(equalityCS | LetExpCS))*;
	public EssentialOCLGrammarAccess.AndCSElements getAndCSAccess() {
		return gaEssentialOCL.getAndCSAccess();
	}
	
	public ParserRule getAndCSRule() {
		return getAndCSAccess().getRule();
	}

	//equalityCS returns ExpCS:
	//	relationalCS ({InfixExpCS.source=current} op=("=" | "<>") argument=(relationalCS | LetExpCS))*;
	public EssentialOCLGrammarAccess.EqualityCSElements getEqualityCSAccess() {
		return gaEssentialOCL.getEqualityCSAccess();
	}
	
	public ParserRule getEqualityCSRule() {
		return getEqualityCSAccess().getRule();
	}

	//relationalCS returns ExpCS:
	//	additiveCS ({InfixExpCS.source=current} op=(">" | "<" | ">=" | "<=") argument=(additiveCS | LetExpCS))*;
	public EssentialOCLGrammarAccess.RelationalCSElements getRelationalCSAccess() {
		return gaEssentialOCL.getRelationalCSAccess();
	}
	
	public ParserRule getRelationalCSRule() {
		return getRelationalCSAccess().getRule();
	}

	//additiveCS returns ExpCS:
	//	multiplicativeCS ({InfixExpCS.source=current} op=("+" | "-") argument=(multiplicativeCS | LetExpCS))*;
	public EssentialOCLGrammarAccess.AdditiveCSElements getAdditiveCSAccess() {
		return gaEssentialOCL.getAdditiveCSAccess();
	}
	
	public ParserRule getAdditiveCSRule() {
		return getAdditiveCSAccess().getRule();
	}

	//multiplicativeCS returns ExpCS:
	//	unaryCS ({InfixExpCS.source=current} op=("*" | "/") argument=(unaryCS | LetExpCS))*;
	public EssentialOCLGrammarAccess.MultiplicativeCSElements getMultiplicativeCSAccess() {
		return gaEssentialOCL.getMultiplicativeCSAccess();
	}
	
	public ParserRule getMultiplicativeCSRule() {
		return getMultiplicativeCSAccess().getRule();
	}

	//unaryCS returns ExpCS:
	//	NavigationExpCS | {PrefixExpCS} op=("-" | "not") source=unaryCS;
	public EssentialOCLGrammarAccess.UnaryCSElements getUnaryCSAccess() {
		return gaEssentialOCL.getUnaryCSAccess();
	}
	
	public ParserRule getUnaryCSRule() {
		return getUnaryCSAccess().getRule();
	}

	//// May be be followed by ., ->, ^
	//
	//SubNavigationExpCS returns ExpCS:
	//	RoundBracketExpCS | SquareBracketExpCS | SelfExpCS | PrimitiveLiteralExpCS | TupleLiteralExpCS |
	//	CollectionLiteralExpCS | PreExpCS | TypeExpCS | IfExpCS | "(" {NestedExpCS} source=ExpCS ")";
	public EssentialOCLGrammarAccess.SubNavigationExpCSElements getSubNavigationExpCSAccess() {
		return gaEssentialOCL.getSubNavigationExpCSAccess();
	}
	
	public ParserRule getSubNavigationExpCSRule() {
		return getSubNavigationExpCSAccess().getRule();
	}

	//// Follows ., ->, ^, May be be followed by ., ->, ^
	//
	//SubNavigatingExpCS returns ExpCS:
	//	RoundBracketExpCS | SquareBracketExpCS | PreExpCS | NameExpCS;
	public EssentialOCLGrammarAccess.SubNavigatingExpCSElements getSubNavigatingExpCSAccess() {
		return gaEssentialOCL.getSubNavigatingExpCSAccess();
	}
	
	public ParserRule getSubNavigatingExpCSRule() {
		return getSubNavigatingExpCSAccess().getRule();
	}

	//iteratorVariableCS returns VariableCS:
	//	name=SimpleName (":" type=TypeExpCS)?;
	public EssentialOCLGrammarAccess.IteratorVariableCSElements getIteratorVariableCSAccess() {
		return gaEssentialOCL.getIteratorVariableCSAccess();
	}
	
	public ParserRule getIteratorVariableCSRule() {
		return getIteratorVariableCSAccess().getRule();
	}

	//iteratorAccumulatorCS returns VariableCS:
	//	name=SimpleName ":" type=TypeExpCS "=" initExpression=ExpCS;
	public EssentialOCLGrammarAccess.IteratorAccumulatorCSElements getIteratorAccumulatorCSAccess() {
		return gaEssentialOCL.getIteratorAccumulatorCSAccess();
	}
	
	public ParserRule getIteratorAccumulatorCSRule() {
		return getIteratorAccumulatorCSAccess().getRule();
	}

	//RoundBracketExpCS:
	//	name=NameExpCS ("@" pre?="pre")? "(" (variable1=iteratorVariableCS ("," variable2=iteratorVariableCS | ";"
	//	variable2=iteratorAccumulatorCS)? "|")? (arguments+=ExpCS ("," arguments+=ExpCS)*)? ")";
	public EssentialOCLGrammarAccess.RoundBracketExpCSElements getRoundBracketExpCSAccess() {
		return gaEssentialOCL.getRoundBracketExpCSAccess();
	}
	
	public ParserRule getRoundBracketExpCSRule() {
		return getRoundBracketExpCSAccess().getRule();
	}

	//SquareBracketExpCS:
	//	name=NameExpCS "[" arguments+=ExpCS ("," arguments+=ExpCS)* "]" ("@" pre?="pre")?;
	public EssentialOCLGrammarAccess.SquareBracketExpCSElements getSquareBracketExpCSAccess() {
		return gaEssentialOCL.getSquareBracketExpCSAccess();
	}
	
	public ParserRule getSquareBracketExpCSRule() {
		return getSquareBracketExpCSAccess().getRule();
	}

	//PreExpCS:
	//	name=NameExpCS "@" "pre";
	public EssentialOCLGrammarAccess.PreExpCSElements getPreExpCSAccess() {
		return gaEssentialOCL.getPreExpCSAccess();
	}
	
	public ParserRule getPreExpCSRule() {
		return getPreExpCSAccess().getRule();
	}

	//SelfExpCS:
	//	{SelfExpCS} "self";
	public EssentialOCLGrammarAccess.SelfExpCSElements getSelfExpCSAccess() {
		return gaEssentialOCL.getSelfExpCSAccess();
	}
	
	public ParserRule getSelfExpCSRule() {
		return getSelfExpCSAccess().getRule();
	}

	//NameExpCS:
	//	PathNameExpCS | SimpleNameExpCS;
	public EssentialOCLGrammarAccess.NameExpCSElements getNameExpCSAccess() {
		return gaEssentialOCL.getNameExpCSAccess();
	}
	
	public ParserRule getNameExpCSRule() {
		return getNameExpCSAccess().getRule();
	}

	//PathNameExpCS:
	//	namespace=[base::NamespaceCS|Identifier] "::" element=NameExpCS;
	public EssentialOCLGrammarAccess.PathNameExpCSElements getPathNameExpCSAccess() {
		return gaEssentialOCL.getPathNameExpCSAccess();
	}
	
	public ParserRule getPathNameExpCSRule() {
		return getPathNameExpCSAccess().getRule();
	}

	//SimpleNameExpCS:
	//	element=[base::NamedElementCS|Identifier];
	public EssentialOCLGrammarAccess.SimpleNameExpCSElements getSimpleNameExpCSAccess() {
		return gaEssentialOCL.getSimpleNameExpCSAccess();
	}
	
	public ParserRule getSimpleNameExpCSRule() {
		return getSimpleNameExpCSAccess().getRule();
	}

	//IfExpCS:
	//	"if" condition=ExpCS "then" thenExpression=ExpCS "else" elseExpression=ExpCS "endif";
	public EssentialOCLGrammarAccess.IfExpCSElements getIfExpCSAccess() {
		return gaEssentialOCL.getIfExpCSAccess();
	}
	
	public ParserRule getIfExpCSRule() {
		return getIfExpCSAccess().getRule();
	}

	//LetExpCS:
	//	"let" variable+=LetVariableCS ("," variable+=LetVariableCS)* "in" in=ExpCS;
	public EssentialOCLGrammarAccess.LetExpCSElements getLetExpCSAccess() {
		return gaEssentialOCL.getLetExpCSAccess();
	}
	
	public ParserRule getLetExpCSRule() {
		return getLetExpCSAccess().getRule();
	}

	//LetVariableCS returns VariableCS:
	//	name=SimpleName ":" type=TypeExpCS "=" initExpression=ExpCS;
	public EssentialOCLGrammarAccess.LetVariableCSElements getLetVariableCSAccess() {
		return gaEssentialOCL.getLetVariableCSAccess();
	}
	
	public ParserRule getLetVariableCSRule() {
		return getLetVariableCSAccess().getRule();
	}
}
