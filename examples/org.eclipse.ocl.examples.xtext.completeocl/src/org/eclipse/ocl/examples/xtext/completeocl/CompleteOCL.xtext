/**
 * <copyright>
 *
 * Copyright (c) 2010 E.D.Willink and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     E.D.Willink - initial API and implementation
 *
 * </copyright>
 *
 * $Id: CompleteOCL.xtext,v 1.7 2011/01/24 21:08:26 ewillink Exp $
 */
grammar org.eclipse.ocl.examples.xtext.completeocl.CompleteOCL
with org.eclipse.ocl.examples.xtext.essentialocl.EssentialOCL

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/org.eclipse.ocl.examples.xtext.base/model/BaseCST.ecore" as base
import "platform:/resource/org.eclipse.ocl.examples.xtext.essentialocl/model/EssentialOCLCST.ecore" as essentialocl
import "platform:/resource/org.eclipse.ocl.examples.xtext.oclinecore/model/OCLinEcoreCST.ecore" as oclinecore
import "platform:/resource/org.eclipse.ocl.examples.pivot/model/pivot.ecore" as pivot
import "platform:/resource/org.eclipse.ocl.examples.xtext.completeocl/model/CompleteOCLCST.ecore"
//generate completeOCL "http://www.eclipse.org/ocl/examples/xtext/completeocl/CompleteOCL"
CompleteOCLDocumentCS returns CompleteOCLDocumentCS:
	(ownedImport+=ImportCS)*
	(packages+=PackageDeclarationCS | contexts+=ContextDeclCS)*;

NavigationOperator:						// Intended to be overridden
	EssentialOCLNavigationOperator | '^' | '^^'
;

UnrestrictedName returns ecore::EString:
	EssentialOCLUnrestrictedName
	| 'body'
	| 'context'
	| 'def'
	| 'derive'
	//|	'endpackage'
	| 'import'
	| 'init'
	| 'inv'
	//|	'package'
	//|	'post'
	//|	'pre'
	//|	'static'
;

PrimitiveTypeIdentifier:
	'Boolean'
	| 'Integer'
	| 'Real'
	| 'String'
	| 'UnlimitedNatural'
	| 'OclAny'
	| 'OclInvalid'
	| 'OclMessage'
	| 'OclState'
	| 'OclVoid';

BodyCS returns BodyCS:
	'body' (name=UnrestrictedName)? ':' ownedExpression=ExpCS;

ClassifierContextDeclCS returns ClassifierContextDeclCS:
	'context' (selfName=UnrestrictedName ':')? classifier=ClassifierRefCS (invs+=InvCS | defs+=DefCS)*;

ClassifierRefCS returns base::ClassifierRefCS:
	QualifiedClassifierRefCS | SimpleClassifierRefCS;

ContextDeclCS returns ContextDeclCS:
	PropertyContextDeclCS
	| ClassifierContextDeclCS
	| OperationContextDeclCS;

DefCS returns DefCS:
	(static?='static')? 'def' (name=UnrestrictedName)? ':' constrainedName=UnrestrictedName
	('(' (parameters+=ParameterCS (',' parameters+=ParameterCS)*)? ')')?
	':' (ownedType=TypeExpCS)? '=' ownedExpression=ExpCS;

DerCS returns DerCS:
	stereotype='derive' ':' ownedExpression=ExpCS;

ImportCS returns base::ImportCS:
	'import' (name=Identifier ':')? namespace=[pivot::Namespace|SINGLE_QUOTED_STRING];

InitCS returns InitCS:
	stereotype='init' ':' ownedExpression=ExpCS;

InvCS returns InvCS:
	stereotype='inv' (name=UnrestrictedName ('(' ownedReason=ExpCS ')')?)? ':' ownedExpression=ExpCS;

OperationContextDeclCS returns OperationContextDeclCS:
	'context' operation=OperationRefCS '('
	(parameters+=ParameterCS (',' parameters+=ParameterCS)*)?
	')' ':' (ownedType=TypeExpCS)?
	((pres+=PreCS) | (posts+=PostCS) | (bodies+=BodyCS))*;

OperationRefCS returns base::OperationRefCS:
	QualifiedOperationRefCS | SimpleOperationRefCS;

PackageDeclarationCS returns PackageDeclarationCS:
	'package' package=PackageRefCS (contexts+=ContextDeclCS)* 'endpackage';

PackageRefCS returns base::PackageRefCS:
	QualifiedPackageRefCS | SimplePackageRefCS;

ParameterCS returns essentialocl::VariableCS:
	(name=UnrestrictedName ':')? ownedType=TypeExpCS;

PostCS returns PostCS:
	stereotype='post' (name=UnrestrictedName)? ':' ownedExpression=ExpCS;

PreCS returns PreCS:
	stereotype='pre' (name=UnrestrictedName)? ':' ownedExpression=ExpCS;

PropertyContextDeclCS returns PropertyContextDeclCS:
	'context' property=PropertyRefCS ':' ownedType=TypeExpCS
	((init=InitCS (der=DerCS)?)? | (der=DerCS (init=InitCS)?));

PropertyRefCS returns base::StructuralFeatureRefCS:
	QualifiedPropertyRefCS | SimplePropertyRefCS;

QualifiedClassifierRefCS returns base::QualifiedClassifierRefCS:
	namespace=[pivot::Namespace|Identifier]
	'::' element=ClassifierRefCS;

QualifiedOperationRefCS returns base::QualifiedOperationRefCS:
	namespace=[pivot::Namespace|Identifier]
	'::' element=OperationRefCS;

QualifiedPropertyRefCS returns base::QualifiedStructuralFeatureRefCS:
	namespace=[pivot::Namespace|Identifier]
	'::' element=PropertyRefCS;

QualifiedPackageRefCS returns base::QualifiedPackageRefCS:
	namespace=[pivot::Namespace|Identifier]
	'::' element=PackageRefCS;

SimpleClassifierRefCS returns base::SimpleClassifierRefCS:
	classifier=[base::ClassifierCS|Identifier];

SimpleOperationRefCS returns base::SimpleOperationRefCS:
	operation=[base::OperationCS|Identifier];

SimplePackageRefCS returns base::SimplePackageRefCS:
	package=[base::PackageCS|Identifier];

SimplePropertyRefCS returns base::SimpleStructuralFeatureRefCS:
	feature=[base::StructuralFeatureCS|Identifier];

//---------------------------------------------------------------------------------
//	EssentialOCL overrides
//---------------------------------------------------------------------------------
NavigatingExpCS_Base returns essentialocl::NamedExpCS:
	IndexExpCS
	({PreExpCS.namedExp=current} '@' 'pre')?
;

NavigatingArgExpCS returns essentialocl::ExpCS:
	({OclMessageArgCS} '?')
	| ExpCS
;
