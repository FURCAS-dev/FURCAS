/**
 * <copyright>
 *
 * Copyright (c) 2010 E.D.Willink and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     E.D.Willink - initial API and implementation
 *
 * </copyright>
 *
 * $Id: OCLinEcore.xtext,v 1.8 2011/01/24 22:28:40 ewillink Exp $
 */
grammar org.eclipse.ocl.examples.xtext.oclinecore.OCLinEcore with org.eclipse.ocl.examples.xtext.essentialocl.EssentialOCL

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/org.eclipse.ocl.examples.xtext.base/model/BaseCST.ecore" as base
import "platform:/resource/org.eclipse.ocl.examples.xtext.essentialocl/model/EssentialOCLCST.ecore" as essentialocl
import "platform:/resource/org.eclipse.ocl.examples.pivot/model/pivot.ecore" as pivot
import "platform:/resource/org.eclipse.ocl.examples.xtext.oclinecore/model/OCLinEcoreCST.ecore"
//generate oclinEcore2 "http://www.eclipse.org/ocl/examples/xtext/oclinecore/OCLinEcore"

RootPackageCS returns base::RootPackageCS:
	('module' name=UnrestrictedName)?
	(ownedLibrary+=LibraryCS)*
	(ownedImport+=ImportCS)*
	(ownedNestedPackage+=PackageCS)*
;

terminal UNQUOTED_STRING:	// Never forward parsed; just provides a placeholder
	'£$%^£$%^'				//  for reverse serialisation of embedded OCL 
;

INTEGER returns ecore::EInt:
	INT
;

LOWER returns ecore::EInt:
	INT
;

UPPER returns ecore::EInt:
	INT | '*'
;

UnrestrictedName returns ecore::EString:
	EssentialOCLUnrestrictedName
|	'abstract'
|	'annotation'
|	'attribute'
|	'body'
|	'class'
|	'composes'
|	'datatype'
|	'definition'
|	'derivation'
|	'derived'
|	'documentation'
|	'enum'
|	'extends'
|	'id'
|	'import'
|	'initial'
|	'interface'
|	'invariant'
|	'library'
|	'module'
|	'operation'
|	'ordered'
|	'package'
|	'postcondition'
|	'precondition'
|	'property'
|	'readonly'
|	'resolve'
|	'serializable'
|	'static'
|	'super'
|	'throws'
|	'transient'
|	'unique'
|	'unsettable'
|	'volatile'
;

BodyConstraintCS returns OCLinEcoreConstraintCS:
	stereotype='body' name=UnrestrictedName? ':' (ownedExpression=ExpCS|exprString=UNQUOTED_STRING)? ';'
;

DerivedConstraintCS returns OCLinEcoreConstraintCS:
	stereotype='derivation' ':' (ownedExpression=ExpCS|exprString=UNQUOTED_STRING)? ';'
;

InitialConstraintCS returns OCLinEcoreConstraintCS:
	stereotype='initial' ':' (ownedExpression=ExpCS|exprString=UNQUOTED_STRING)? ';'
;

InvariantConstraintCS returns OCLinEcoreConstraintCS:
	stereotype='invariant' (name=UnrestrictedName ('(' ownedReason=ExpCS ')')?)? ':' (ownedExpression=ExpCS|exprString=UNQUOTED_STRING)? ';'
;

PostconditionConstraintCS returns OCLinEcoreConstraintCS:
	stereotype='postcondition' name=UnrestrictedName? ':' (ownedExpression=ExpCS|exprString=UNQUOTED_STRING)? ';'
;

PreconditionConstraintCS returns OCLinEcoreConstraintCS:
	stereotype='precondition' name=UnrestrictedName? ':' (ownedExpression=ExpCS|exprString=UNQUOTED_STRING)? ';'
;

AnnotationCS returns base::AnnotationCS:
	'annotation' name=(UnrestrictedName|SINGLE_QUOTED_STRING)
	('(' ownedDetail+=DetailCS (',' ownedDetail+=DetailCS)* ')')?
	(('{' (ownedAnnotation+=AnnotationElementCS
	     | ownedContent+=ModelElementCS
	     | reference+=ModelElementCSRef)+
	  '}')
	|';'
	)
;

AnnotationElementCS returns base::AnnotationElementCS:
	AnnotationCS | DocumentationCS
;

AttributeCS returns base::AttributeCS:
	(qualifier+='static' | qualifier+='definition')*
	'attribute' name=UnrestrictedName
	(':' ownedType=TypedRefCS
		('[' ((lower=LOWER ('..' upper=UPPER)?) | (multiplicity=('*'|'+'|'?'))) ']' )?)?
	('=' default=SINGLE_QUOTED_STRING)?
	('{'((qualifier+='derived' | qualifier+='!derived' |
		  qualifier+='id' | qualifier+='!id' |
		  qualifier+='ordered' | qualifier+='!ordered' |
		  qualifier+='readonly' | qualifier+='!readonly' |
		  qualifier+='transient' | qualifier+='!transient' |
		  qualifier+='unique' | qualifier+='!unique' |
		  qualifier+='unsettable' | qualifier+='!unsettable' |
		  qualifier+='volatile' | qualifier+='!volatile'
	    ) ','? )+
	'}')?
	(	('{' (ownedAnnotation+=AnnotationElementCS
	        | ownedConstraint+=(InitialConstraintCS|DerivedConstraintCS))* '}')
	|	';'
	)
;

ClassCS returns base::ClassCS:
	qualifier+='abstract'?
	'class' name=UnrestrictedName
	(ownedTemplateSignature=TemplateSignatureCS)?
	('extends' ownedSuperType+=TypedRefCS (',' ownedSuperType+=TypedRefCS)*)?
	(':' instanceClassName=SINGLE_QUOTED_STRING)?
	('{' qualifier+='interface'
	 '}')?
	(	('{' (ownedAnnotation+=AnnotationElementCS
	        | ownedOperation+=OperationCS
	        | ownedProperty+=StructuralFeatureCS
	        | ownedConstraint+=InvariantConstraintCS)* '}')
	|	';'
	)
;

ClassifierCS returns base::ClassifierCS:
	ClassCS | DataTypeCS | EnumerationCS 
;

//CollectionTypeRefCS returns base::CollectionTypeRefCS:
//	name=CollectionTypeIdentifier
//	('(' (typeArguments=TypeRefCS)? ')')?	
//;

DataTypeCS returns base::DataTypeCS:
	'datatype' name=UnrestrictedName
	(ownedTemplateSignature=TemplateSignatureCS)?
	(':' instanceClassName=SINGLE_QUOTED_STRING)?
	('{' (qualifier+='serializable' | qualifier+='!serializable')? '}')?
	(	('{' (ownedAnnotation+=AnnotationElementCS
	        | ownedConstraint+=InvariantConstraintCS)* '}')
	|	';'
	)
;

DetailCS returns base::DetailCS:
	name=(UnrestrictedName|SINGLE_QUOTED_STRING) '=' value+=SINGLE_QUOTED_STRING*
;

DocumentationCS returns base::DocumentationCS:
	{base::DocumentationCS} 'documentation' value=SINGLE_QUOTED_STRING?
	('(' ownedDetail+=DetailCS (',' ownedDetail+=DetailCS)* ')')?
	 ';'
;

EnumerationCS returns base::EnumerationCS:
	'enum' name=UnrestrictedName
	(ownedTemplateSignature=TemplateSignatureCS)?
	(':' instanceClassName=SINGLE_QUOTED_STRING)?
	('{' (qualifier+='serializable' | qualifier+='!serializable')? '}')?
	(	('{' (ownedAnnotation+=AnnotationElementCS
	        | ownedLiterals+=EnumerationLiteralCS
	        | ownedConstraint+=InvariantConstraintCS)* '}')
	| 	';'
	)
;

EnumerationLiteralCS returns base::EnumerationLiteralCS:
	name=UnrestrictedName ('=' value=INTEGER)?
	(('{' ownedAnnotation+=AnnotationElementCS* '}')
	|';'
	)
;

ImportCS returns base::ImportCS:
	'import' (name=UnrestrictedName ':')? namespace=[pivot::Namespace|SINGLE_QUOTED_STRING] ';'
;

LibraryCS returns base::LibraryCS:
	'library' (name=UnrestrictedName ':')? package=[pivot::Package|SINGLE_QUOTED_STRING] ';'
;

ModelElementCS returns base::ModelElementCS:
	ClassifierCS | EnumerationLiteralCS | OperationCS | PackageCS | StructuralFeatureCS
;

ModelElementCSRef returns base::ModelElementCSRef:
	ref=[base::ModelElementCS|UnrestrictedName]
; 

OperationCS returns base::OperationCS:
	(qualifier+='static' | qualifier+='definition')*
	'operation' name=UnrestrictedName
	(ownedTemplateSignature=TemplateSignatureCS)?
	'(' (ownedParameter+=ParameterCS (',' ownedParameter+=ParameterCS)*)? ')'
	(':' ownedType=TypedRefCS
		('[' ((lower=LOWER ('..' upper=UPPER)?) | (multiplicity=('*'|'+'|'?'))) ']' )?)?
	('throws' ownedException+=TypedRefCS (',' ownedException+=TypedRefCS)*)?
	('{'((qualifier+='derived' | qualifier+='!derived' |
		  qualifier+='ordered' | qualifier+='!ordered' |
		  qualifier+='unique' | qualifier+='!unique'
		) ','? )+
	'}')?
	(	('{' (ownedAnnotation+=AnnotationElementCS
	        | ownedConstraint+=(PreconditionConstraintCS | BodyConstraintCS | PostconditionConstraintCS))* '}')
	|	';'
	)
;

PackageCS returns base::PackageCS:
	'package' name=UnrestrictedName
	(':' nsPrefix=UnrestrictedName '=' nsURI=SINGLE_QUOTED_STRING)?
	(('{'
		(ownedAnnotation+=AnnotationElementCS | ownedNestedPackage+=PackageCS | ownedType+=ClassifierCS)*
		'}')
	|';'
	)
;

ParameterCS returns base::ParameterCS:
	name=UnrestrictedName
	(':' ownedType=TypedRefCS
		('[' ((lower=LOWER ('..' upper=UPPER)?) | (multiplicity=('*'|'+'|'?'))) ']' )?)?
	('{'(( qualifier+='ordered' | qualifier+='!ordered' |
		   qualifier+='unique' | qualifier+='!unique'
		  ) ','?)+
	 '}')?
	('{' ownedAnnotation+=AnnotationElementCS* '}')?
;

PrimitiveTypeRefCS returns base::PrimitiveTypeRefCS:
	name=PrimitiveTypeIdentifier
;

QualifiedTypeRefCS returns base::QualifiedTypeRefCS:
	namespace=[pivot::Namespace|UnrestrictedName]
	(ownedTemplateBinding=TemplateBindingCS)?
	'::' element=TypedRefCS
;

ReferenceCS returns base::ReferenceCS:
	(qualifier+='static' | qualifier+='definition')*
	'property' name=UnrestrictedName
	('#' opposite=ReferenceCSRef)?	
	(':' ownedType=TypedRefCS
		('[' ((lower=LOWER ('..' upper=UPPER)?) | (multiplicity=('*'|'+'|'?'))) ']' )?)?
	('=' default=SINGLE_QUOTED_STRING)?
	('{'((qualifier+='composes' | qualifier+='!composes' |
		  qualifier+='derived' | qualifier+='!derived' |
		  qualifier+='ordered' | qualifier+='!ordered' |
		  qualifier+='readonly' | qualifier+='!readonly' |
		  qualifier+='resolve' | qualifier+='!resolve' |
		  qualifier+='transient' | qualifier+='!transient' |
		  qualifier+='unique' | qualifier+='!unique' |
		  qualifier+='unsettable' | qualifier+='!unsettable' |
		  qualifier+='volatile' | qualifier+='!volatile'
		) ','? )+
	'}')?
	(	('{' (ownedAnnotation+=AnnotationElementCS
	        | ownedConstraint+=(InitialConstraintCS|DerivedConstraintCS))* '}')
	|	';'
	)
;

ReferenceCSRef returns base::ReferenceCSRef:
	ref=[pivot::Property|UnrestrictedName] 
; 

StructuralFeatureCS returns base::StructuralFeatureCS:
	AttributeCS | ReferenceCS
;

TemplateBindingCS returns base::TemplateBindingCS:
	'<' ownedParameterSubstitution+=TemplateParameterSubstitutionCS (',' ownedParameterSubstitution+=TemplateParameterSubstitutionCS)* '>'	
;

TemplateParameterSubstitutionCS returns base::TemplateParameterSubstitutionCS:
	ownedActualParameter=TypeRefCS	
;

TemplateSignatureCS returns base::TemplateSignatureCS:
	'<' ownedTemplateParameter+=TypeParameterCS (',' ownedTemplateParameter+=TypeParameterCS)* '>'
;

TypeIdentifier:
	UnrestrictedName
|	PrimitiveTypeIdentifier
;

TypeParameterCS returns base::TypeParameterCS:
	name=UnrestrictedName
	( ('extends' ownedExtends+=TypedRefCS ('&&' ownedExtends+=TypedRefCS)*)
	| ('super' ownedSuper=TypedRefCS)
	)?
;

TypeRefCS returns base::TypeRefCS:
	TypedRefCS | WildcardTypeRefCS
;

TypedRefCS returns base::TypedRefCS:
	QualifiedTypeRefCS | PrimitiveTypeRefCS /*| CollectionTypeRefCS*/ | TypedTypeRefCS
;

TypedTypeRefCS returns base::TypedTypeRefCS:
	type=[pivot::Type|UnrestrictedName]
	(ownedTemplateBinding=TemplateBindingCS)?
;

WildcardTypeRefCS returns base::WildcardTypeRefCS:
	{base::WildcardTypeRefCS} '?'
	( ('extends' extends=TypedRefCS)
	| ('super' super=TypedRefCS)
	)?
;