/*
* generated by Xtext
*/
grammar InternalOCLinEcore;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package org.eclipse.ocl.examples.xtext.oclinecore.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.ocl.examples.xtext.oclinecore.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.ocl.examples.xtext.oclinecore.services.OCLinEcoreGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private OCLinEcoreGrammarAccess grammarAccess;
 	
    public InternalOCLinEcoreParser(TokenStream input, IAstFactory factory, OCLinEcoreGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/eclipse/ocl/examples/xtext/oclinecore/parser/antlr/internal/InternalOCLinEcore.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "OCLinEcoreDocumentCS";	
   	}
   	
   	@Override
   	protected OCLinEcoreGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleOCLinEcoreDocumentCS
entryRuleOCLinEcoreDocumentCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOCLinEcoreDocumentCSRule(), currentNode); }
	 iv_ruleOCLinEcoreDocumentCS=ruleOCLinEcoreDocumentCS 
	 { $current=$iv_ruleOCLinEcoreDocumentCS.current; } 
	 EOF 
;

// Rule OCLinEcoreDocumentCS
ruleOCLinEcoreDocumentCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOCLinEcoreDocumentCSAccess().getLibrariesLibraryCSParserRuleCall_0_0(), currentNode); 
	    }
		lv_libraries_0_0=ruleLibraryCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOCLinEcoreDocumentCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"libraries",
	        		lv_libraries_0_0, 
	        		"LibraryCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOCLinEcoreDocumentCSAccess().getImportsImportCSParserRuleCall_1_0(), currentNode); 
	    }
		lv_imports_1_0=ruleImportCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOCLinEcoreDocumentCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"imports",
	        		lv_imports_1_0, 
	        		"ImportCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOCLinEcoreDocumentCSAccess().getPackagesPackageCSParserRuleCall_2_0(), currentNode); 
	    }
		lv_packages_2_0=rulePackageCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOCLinEcoreDocumentCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"packages",
	        		lv_packages_2_0, 
	        		"PackageCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleINTEGER
entryRuleINTEGER returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getINTEGERRule(), currentNode); } 
	 iv_ruleINTEGER=ruleINTEGER 
	 { $current=$iv_ruleINTEGER.current.getText(); }  
	 EOF 
;

// Rule INTEGER
ruleINTEGER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    createLeafNode(grammarAccess.getINTEGERAccess().getINTTerminalRuleCall(), null); 
    }

    ;





// Entry rule entryRuleLOWER
entryRuleLOWER returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLOWERRule(), currentNode); } 
	 iv_ruleLOWER=ruleLOWER 
	 { $current=$iv_ruleLOWER.current.getText(); }  
	 EOF 
;

// Rule LOWER
ruleLOWER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    createLeafNode(grammarAccess.getLOWERAccess().getINTTerminalRuleCall(), null); 
    }

    ;





// Entry rule entryRuleUPPER
entryRuleUPPER returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUPPERRule(), currentNode); } 
	 iv_ruleUPPER=ruleUPPER 
	 { $current=$iv_ruleUPPER.current.getText(); }  
	 EOF 
;

// Rule UPPER
ruleUPPER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    createLeafNode(grammarAccess.getUPPERAccess().getINTTerminalRuleCall_0(), null); 
    }

    |
	kw='*' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUPPERAccess().getAsteriskKeyword_1(), null); 
    }
)
    ;





// Entry rule entryRuleRestrictedKeywords
entryRuleRestrictedKeywords returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRestrictedKeywordsRule(), currentNode); } 
	 iv_ruleRestrictedKeywords=ruleRestrictedKeywords 
	 { $current=$iv_ruleRestrictedKeywords.current.getText(); }  
	 EOF 
;

// Rule RestrictedKeywords
ruleRestrictedKeywords returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getRestrictedKeywordsAccess().getEssentialOCLRestrictedKeywordsParserRuleCall_0(), currentNode); 
    }
    this_EssentialOCLRestrictedKeywords_0=ruleEssentialOCLRestrictedKeywords    {
		$current.merge(this_EssentialOCLRestrictedKeywords_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    |
	kw='abstract' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getAbstractKeyword_1(), null); 
    }

    |
	kw='annotation' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getAnnotationKeyword_2(), null); 
    }

    |
	kw='attribute' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getAttributeKeyword_3(), null); 
    }

    |
	kw='body' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getBodyKeyword_4(), null); 
    }

    |
	kw='class' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getClassKeyword_5(), null); 
    }

    |
	kw='composes' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getComposesKeyword_6(), null); 
    }

    |
	kw='datatype' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getDatatypeKeyword_7(), null); 
    }

    |
	kw='derived' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getDerivedKeyword_8(), null); 
    }

    |
	kw='documentation' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getDocumentationKeyword_9(), null); 
    }

    |
	kw='enum' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getEnumKeyword_10(), null); 
    }

    |
	kw='extends' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getExtendsKeyword_11(), null); 
    }

    |
	kw='id' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getIdKeyword_12(), null); 
    }

    |
	kw='import' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getImportKeyword_13(), null); 
    }

    |
	kw='initial' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getInitialKeyword_14(), null); 
    }

    |
	kw='interface' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getInterfaceKeyword_15(), null); 
    }

    |
	kw='invariant' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getInvariantKeyword_16(), null); 
    }

    |
	kw='library' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getLibraryKeyword_17(), null); 
    }

    |
	kw='operation' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getOperationKeyword_18(), null); 
    }

    |
	kw='ordered' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getOrderedKeyword_19(), null); 
    }

    |
	kw='package' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getPackageKeyword_20(), null); 
    }

    |
	kw='property' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getPropertyKeyword_21(), null); 
    }

    |
	kw='readonly' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getReadonlyKeyword_22(), null); 
    }

    |
	kw='resolve' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getResolveKeyword_23(), null); 
    }

    |
	kw='serializable' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getSerializableKeyword_24(), null); 
    }

    |
	kw='static' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getStaticKeyword_25(), null); 
    }

    |
	kw='super' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getSuperKeyword_26(), null); 
    }

    |
	kw='transient' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getTransientKeyword_27(), null); 
    }

    |
	kw='unique' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getUniqueKeyword_28(), null); 
    }

    |
	kw='unsettable' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getUnsettableKeyword_29(), null); 
    }

    |
	kw='volatile' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getVolatileKeyword_30(), null); 
    }
)
    ;





// Entry rule entryRuleBodyConstraintCS
entryRuleBodyConstraintCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBodyConstraintCSRule(), currentNode); }
	 iv_ruleBodyConstraintCS=ruleBodyConstraintCS 
	 { $current=$iv_ruleBodyConstraintCS.current; } 
	 EOF 
;

// Rule BodyConstraintCS
ruleBodyConstraintCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_stereotype_0_0=	'body' 
    {
        createLeafNode(grammarAccess.getBodyConstraintCSAccess().getStereotypeBodyKeyword_0_0(), "stereotype"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBodyConstraintCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "stereotype", lv_stereotype_0_0, "body", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBodyConstraintCSAccess().getNameIdentifierParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBodyConstraintCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	':' 
    {
        createLeafNode(grammarAccess.getBodyConstraintCSAccess().getColonKeyword_2(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBodyConstraintCSAccess().getExprValueExpCSParserRuleCall_3_0_0(), currentNode); 
	    }
		lv_exprValue_3_0=ruleExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBodyConstraintCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exprValue",
	        		lv_exprValue_3_0, 
	        		"ExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		lv_exprString_4_0=RULE_UNQUOTED_STRING
		{
			createLeafNode(grammarAccess.getBodyConstraintCSAccess().getExprStringUNQUOTED_STRINGTerminalRuleCall_3_1_0(), "exprString"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBodyConstraintCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exprString",
	        		lv_exprString_4_0, 
	        		"UNQUOTED_STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?	';' 
    {
        createLeafNode(grammarAccess.getBodyConstraintCSAccess().getSemicolonKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleDerivedConstraintCS
entryRuleDerivedConstraintCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDerivedConstraintCSRule(), currentNode); }
	 iv_ruleDerivedConstraintCS=ruleDerivedConstraintCS 
	 { $current=$iv_ruleDerivedConstraintCS.current; } 
	 EOF 
;

// Rule DerivedConstraintCS
ruleDerivedConstraintCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_stereotype_0_0=	'derivation' 
    {
        createLeafNode(grammarAccess.getDerivedConstraintCSAccess().getStereotypeDerivationKeyword_0_0(), "stereotype"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDerivedConstraintCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "stereotype", lv_stereotype_0_0, "derivation", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getDerivedConstraintCSAccess().getColonKeyword_1(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDerivedConstraintCSAccess().getExprValueExpCSParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_exprValue_2_0=ruleExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDerivedConstraintCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exprValue",
	        		lv_exprValue_2_0, 
	        		"ExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		lv_exprString_3_0=RULE_UNQUOTED_STRING
		{
			createLeafNode(grammarAccess.getDerivedConstraintCSAccess().getExprStringUNQUOTED_STRINGTerminalRuleCall_2_1_0(), "exprString"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDerivedConstraintCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exprString",
	        		lv_exprString_3_0, 
	        		"UNQUOTED_STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?	';' 
    {
        createLeafNode(grammarAccess.getDerivedConstraintCSAccess().getSemicolonKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleInitialConstraintCS
entryRuleInitialConstraintCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInitialConstraintCSRule(), currentNode); }
	 iv_ruleInitialConstraintCS=ruleInitialConstraintCS 
	 { $current=$iv_ruleInitialConstraintCS.current; } 
	 EOF 
;

// Rule InitialConstraintCS
ruleInitialConstraintCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_stereotype_0_0=	'initial' 
    {
        createLeafNode(grammarAccess.getInitialConstraintCSAccess().getStereotypeInitialKeyword_0_0(), "stereotype"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInitialConstraintCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "stereotype", lv_stereotype_0_0, "initial", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getInitialConstraintCSAccess().getColonKeyword_1(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInitialConstraintCSAccess().getExprValueExpCSParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_exprValue_2_0=ruleExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInitialConstraintCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exprValue",
	        		lv_exprValue_2_0, 
	        		"ExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		lv_exprString_3_0=RULE_UNQUOTED_STRING
		{
			createLeafNode(grammarAccess.getInitialConstraintCSAccess().getExprStringUNQUOTED_STRINGTerminalRuleCall_2_1_0(), "exprString"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInitialConstraintCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exprString",
	        		lv_exprString_3_0, 
	        		"UNQUOTED_STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?	';' 
    {
        createLeafNode(grammarAccess.getInitialConstraintCSAccess().getSemicolonKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleInvariantConstraintCS
entryRuleInvariantConstraintCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInvariantConstraintCSRule(), currentNode); }
	 iv_ruleInvariantConstraintCS=ruleInvariantConstraintCS 
	 { $current=$iv_ruleInvariantConstraintCS.current; } 
	 EOF 
;

// Rule InvariantConstraintCS
ruleInvariantConstraintCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_stereotype_0_0=	'invariant' 
    {
        createLeafNode(grammarAccess.getInvariantConstraintCSAccess().getStereotypeInvariantKeyword_0_0(), "stereotype"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInvariantConstraintCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "stereotype", lv_stereotype_0_0, "invariant", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInvariantConstraintCSAccess().getNameIdentifierParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInvariantConstraintCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	':' 
    {
        createLeafNode(grammarAccess.getInvariantConstraintCSAccess().getColonKeyword_2(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInvariantConstraintCSAccess().getExprValueExpCSParserRuleCall_3_0_0(), currentNode); 
	    }
		lv_exprValue_3_0=ruleExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInvariantConstraintCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exprValue",
	        		lv_exprValue_3_0, 
	        		"ExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		lv_exprString_4_0=RULE_UNQUOTED_STRING
		{
			createLeafNode(grammarAccess.getInvariantConstraintCSAccess().getExprStringUNQUOTED_STRINGTerminalRuleCall_3_1_0(), "exprString"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInvariantConstraintCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exprString",
	        		lv_exprString_4_0, 
	        		"UNQUOTED_STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?	';' 
    {
        createLeafNode(grammarAccess.getInvariantConstraintCSAccess().getSemicolonKeyword_4(), null); 
    }
)
;





// Entry rule entryRulePostconditionConstraintCS
entryRulePostconditionConstraintCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPostconditionConstraintCSRule(), currentNode); }
	 iv_rulePostconditionConstraintCS=rulePostconditionConstraintCS 
	 { $current=$iv_rulePostconditionConstraintCS.current; } 
	 EOF 
;

// Rule PostconditionConstraintCS
rulePostconditionConstraintCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_stereotype_0_0=	'postcondition' 
    {
        createLeafNode(grammarAccess.getPostconditionConstraintCSAccess().getStereotypePostconditionKeyword_0_0(), "stereotype"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPostconditionConstraintCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "stereotype", lv_stereotype_0_0, "postcondition", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPostconditionConstraintCSAccess().getNameIdentifierParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPostconditionConstraintCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	':' 
    {
        createLeafNode(grammarAccess.getPostconditionConstraintCSAccess().getColonKeyword_2(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPostconditionConstraintCSAccess().getExprValueExpCSParserRuleCall_3_0_0(), currentNode); 
	    }
		lv_exprValue_3_0=ruleExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPostconditionConstraintCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exprValue",
	        		lv_exprValue_3_0, 
	        		"ExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		lv_exprString_4_0=RULE_UNQUOTED_STRING
		{
			createLeafNode(grammarAccess.getPostconditionConstraintCSAccess().getExprStringUNQUOTED_STRINGTerminalRuleCall_3_1_0(), "exprString"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPostconditionConstraintCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exprString",
	        		lv_exprString_4_0, 
	        		"UNQUOTED_STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?	';' 
    {
        createLeafNode(grammarAccess.getPostconditionConstraintCSAccess().getSemicolonKeyword_4(), null); 
    }
)
;





// Entry rule entryRulePreconditionConstraintCS
entryRulePreconditionConstraintCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPreconditionConstraintCSRule(), currentNode); }
	 iv_rulePreconditionConstraintCS=rulePreconditionConstraintCS 
	 { $current=$iv_rulePreconditionConstraintCS.current; } 
	 EOF 
;

// Rule PreconditionConstraintCS
rulePreconditionConstraintCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_stereotype_0_0=	'precondition' 
    {
        createLeafNode(grammarAccess.getPreconditionConstraintCSAccess().getStereotypePreconditionKeyword_0_0(), "stereotype"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPreconditionConstraintCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "stereotype", lv_stereotype_0_0, "precondition", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPreconditionConstraintCSAccess().getNameIdentifierParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPreconditionConstraintCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	':' 
    {
        createLeafNode(grammarAccess.getPreconditionConstraintCSAccess().getColonKeyword_2(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPreconditionConstraintCSAccess().getExprValueExpCSParserRuleCall_3_0_0(), currentNode); 
	    }
		lv_exprValue_3_0=ruleExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPreconditionConstraintCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exprValue",
	        		lv_exprValue_3_0, 
	        		"ExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		lv_exprString_4_0=RULE_UNQUOTED_STRING
		{
			createLeafNode(grammarAccess.getPreconditionConstraintCSAccess().getExprStringUNQUOTED_STRINGTerminalRuleCall_3_1_0(), "exprString"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPreconditionConstraintCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exprString",
	        		lv_exprString_4_0, 
	        		"UNQUOTED_STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?	';' 
    {
        createLeafNode(grammarAccess.getPreconditionConstraintCSAccess().getSemicolonKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleAnnotationCS
entryRuleAnnotationCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAnnotationCSRule(), currentNode); }
	 iv_ruleAnnotationCS=ruleAnnotationCS 
	 { $current=$iv_ruleAnnotationCS.current; } 
	 EOF 
;

// Rule AnnotationCS
ruleAnnotationCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'annotation' 
    {
        createLeafNode(grammarAccess.getAnnotationCSAccess().getAnnotationKeyword_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAnnotationCSAccess().getIdSourceIdentifierParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_idSource_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnnotationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"idSource",
	        		lv_idSource_1_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		lv_stringSource_2_0=RULE_SINGLE_QUOTED_STRING
		{
			createLeafNode(grammarAccess.getAnnotationCSAccess().getStringSourceSINGLE_QUOTED_STRINGTerminalRuleCall_1_1_0(), "stringSource"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnnotationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"stringSource",
	        		lv_stringSource_2_0, 
	        		"SINGLE_QUOTED_STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))(	'(' 
    {
        createLeafNode(grammarAccess.getAnnotationCSAccess().getLeftParenthesisKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAnnotationCSAccess().getDetailsDetailCSParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_details_4_0=ruleDetailCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnnotationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"details",
	        		lv_details_4_0, 
	        		"DetailCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getAnnotationCSAccess().getCommaKeyword_2_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAnnotationCSAccess().getDetailsDetailCSParserRuleCall_2_2_1_0(), currentNode); 
	    }
		lv_details_6_0=ruleDetailCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnnotationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"details",
	        		lv_details_6_0, 
	        		"DetailCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	')' 
    {
        createLeafNode(grammarAccess.getAnnotationCSAccess().getRightParenthesisKeyword_2_3(), null); 
    }
)?((	'{' 
    {
        createLeafNode(grammarAccess.getAnnotationCSAccess().getLeftCurlyBracketKeyword_3_0_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAnnotationCSAccess().getAnnotationsAnnotationElementCSParserRuleCall_3_0_1_0_0(), currentNode); 
	    }
		lv_annotations_9_0=ruleAnnotationElementCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnnotationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_9_0, 
	        		"AnnotationElementCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAnnotationCSAccess().getContentsModelElementCSParserRuleCall_3_0_1_1_0(), currentNode); 
	    }
		lv_contents_10_0=ruleModelElementCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnnotationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"contents",
	        		lv_contents_10_0, 
	        		"ModelElementCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAnnotationCSAccess().getReferencesModelElementCSRefParserRuleCall_3_0_1_2_0(), currentNode); 
	    }
		lv_references_11_0=ruleModelElementCSRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnnotationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"references",
	        		lv_references_11_0, 
	        		"ModelElementCSRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))+	'}' 
    {
        createLeafNode(grammarAccess.getAnnotationCSAccess().getRightCurlyBracketKeyword_3_0_2(), null); 
    }
)
    |	';' 
    {
        createLeafNode(grammarAccess.getAnnotationCSAccess().getSemicolonKeyword_3_1(), null); 
    }
))
;





// Entry rule entryRuleAnnotationElementCS
entryRuleAnnotationElementCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAnnotationElementCSRule(), currentNode); }
	 iv_ruleAnnotationElementCS=ruleAnnotationElementCS 
	 { $current=$iv_ruleAnnotationElementCS.current; } 
	 EOF 
;

// Rule AnnotationElementCS
ruleAnnotationElementCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAnnotationElementCSAccess().getAnnotationCSParserRuleCall_0(), currentNode); 
    }
    this_AnnotationCS_0=ruleAnnotationCS
    { 
        $current = $this_AnnotationCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAnnotationElementCSAccess().getDocumentationCSParserRuleCall_1(), currentNode); 
    }
    this_DocumentationCS_1=ruleDocumentationCS
    { 
        $current = $this_DocumentationCS_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleAttributeCS
entryRuleAttributeCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAttributeCSRule(), currentNode); }
	 iv_ruleAttributeCS=ruleAttributeCS 
	 { $current=$iv_ruleAttributeCS.current; } 
	 EOF 
;

// Rule AttributeCS
ruleAttributeCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_isStatic_0_0=	'static' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getIsStaticStaticKeyword_0_0(), "isStatic"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isStatic", true, "static", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		lv_isDefinition_1_0=	'definition' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getIsDefinitionDefinitionKeyword_1_0(), "isDefinition"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isDefinition", true, "definition", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?	'attribute' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getAttributeKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAttributeCSAccess().getNameIdentifierParserRuleCall_3_0(), currentNode); 
	    }
		lv_name_3_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_3_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	':' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getColonKeyword_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAttributeCSAccess().getTypeTypedRefCSParserRuleCall_4_1_0(), currentNode); 
	    }
		lv_type_5_0=ruleTypedRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_5_0, 
	        		"TypedRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'[' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getLeftSquareBracketKeyword_4_2_0(), null); 
    }
(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAttributeCSAccess().getLowerLOWERParserRuleCall_4_2_1_0_0_0(), currentNode); 
	    }
		lv_lower_7_0=ruleLOWER		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"lower",
	        		lv_lower_7_0, 
	        		"LOWER", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'..' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getFullStopFullStopKeyword_4_2_1_0_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAttributeCSAccess().getUpperUPPERParserRuleCall_4_2_1_0_1_1_0(), currentNode); 
	    }
		lv_upper_9_0=ruleUPPER		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"upper",
	        		lv_upper_9_0, 
	        		"UPPER", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
    |(
(
(
		lv_multiplicity_10_1=	'*' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getMultiplicityAsteriskKeyword_4_2_1_1_0_0(), "multiplicity"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "multiplicity", lv_multiplicity_10_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_multiplicity_10_2=	'+' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getMultiplicityPlusSignKeyword_4_2_1_1_0_1(), "multiplicity"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "multiplicity", lv_multiplicity_10_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_multiplicity_10_3=	'?' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getMultiplicityQuestionMarkKeyword_4_2_1_1_0_2(), "multiplicity"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "multiplicity", lv_multiplicity_10_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
))	']' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getRightSquareBracketKeyword_4_2_2(), null); 
    }
)?)?(	'=' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getEqualsSignKeyword_5_0(), null); 
    }
(
(
		lv_defaultValueLiteral_13_0=RULE_SINGLE_QUOTED_STRING
		{
			createLeafNode(grammarAccess.getAttributeCSAccess().getDefaultValueLiteralSINGLE_QUOTED_STRINGTerminalRuleCall_5_1_0(), "defaultValueLiteral"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"defaultValueLiteral",
	        		lv_defaultValueLiteral_13_0, 
	        		"SINGLE_QUOTED_STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(	'{' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getLeftCurlyBracketKeyword_6_0(), null); 
    }
(
(
(
		lv_qualifiers_15_1=	'derived' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersDerivedKeyword_6_1_0_0(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_2=	'!derived' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersDerivedKeyword_6_1_0_1(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_3=	'id' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersIdKeyword_6_1_0_2(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_4=	'!id' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersIdKeyword_6_1_0_3(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_4, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_5=	'ordered' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersOrderedKeyword_6_1_0_4(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_5, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_6=	'!ordered' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersOrderedKeyword_6_1_0_5(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_6, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_7=	'readonly' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersReadonlyKeyword_6_1_0_6(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_7, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_8=	'!readonly' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersReadonlyKeyword_6_1_0_7(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_8, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_9=	'transient' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersTransientKeyword_6_1_0_8(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_9, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_10=	'!transient' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersTransientKeyword_6_1_0_9(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_10, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_11=	'unique' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersUniqueKeyword_6_1_0_10(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_11, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_12=	'!unique' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersUniqueKeyword_6_1_0_11(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_12, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_13=	'unsettable' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersUnsettableKeyword_6_1_0_12(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_13, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_14=	'!unsettable' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersUnsettableKeyword_6_1_0_13(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_14, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_15=	'volatile' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersVolatileKeyword_6_1_0_14(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_15, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_16=	'!volatile' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersVolatileKeyword_6_1_0_15(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_16, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(	',' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getCommaKeyword_6_2_0(), null); 
    }
(
(
(
		lv_qualifiers_17_1=	'derived' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersDerivedKeyword_6_2_1_0_0(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_2=	'!derived' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersDerivedKeyword_6_2_1_0_1(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_3=	'id' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersIdKeyword_6_2_1_0_2(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_4=	'!id' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersIdKeyword_6_2_1_0_3(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_4, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_5=	'ordered' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersOrderedKeyword_6_2_1_0_4(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_5, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_6=	'!ordered' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersOrderedKeyword_6_2_1_0_5(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_6, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_7=	'readonly' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersReadonlyKeyword_6_2_1_0_6(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_7, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_8=	'!readonly' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersReadonlyKeyword_6_2_1_0_7(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_8, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_9=	'transient' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersTransientKeyword_6_2_1_0_8(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_9, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_10=	'!transient' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersTransientKeyword_6_2_1_0_9(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_10, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_11=	'unique' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersUniqueKeyword_6_2_1_0_10(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_11, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_12=	'!unique' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersUniqueKeyword_6_2_1_0_11(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_12, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_13=	'unsettable' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersUnsettableKeyword_6_2_1_0_12(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_13, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_14=	'!unsettable' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersUnsettableKeyword_6_2_1_0_13(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_14, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_15=	'volatile' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersVolatileKeyword_6_2_1_0_14(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_15, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_16=	'!volatile' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersVolatileKeyword_6_2_1_0_15(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_16, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getRightCurlyBracketKeyword_6_3(), null); 
    }
)?((	'{' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getLeftCurlyBracketKeyword_7_0_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAttributeCSAccess().getAnnotationsAnnotationElementCSParserRuleCall_7_0_1_0_0(), currentNode); 
	    }
		lv_annotations_20_0=ruleAnnotationElementCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_20_0, 
	        		"AnnotationElementCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAttributeCSAccess().getConstraintsInitialConstraintCSParserRuleCall_7_0_1_1_0_0(), currentNode); 
	    }
		lv_constraints_21_1=ruleInitialConstraintCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"constraints",
	        		lv_constraints_21_1, 
	        		"InitialConstraintCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getAttributeCSAccess().getConstraintsDerivedConstraintCSParserRuleCall_7_0_1_1_0_1(), currentNode); 
	    }
		lv_constraints_21_2=ruleDerivedConstraintCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"constraints",
	        		lv_constraints_21_2, 
	        		"DerivedConstraintCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getRightCurlyBracketKeyword_7_0_2(), null); 
    }
)
    |	';' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getSemicolonKeyword_7_1(), null); 
    }
))
;





// Entry rule entryRuleClassCS
entryRuleClassCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getClassCSRule(), currentNode); }
	 iv_ruleClassCS=ruleClassCS 
	 { $current=$iv_ruleClassCS.current; } 
	 EOF 
;

// Rule ClassCS
ruleClassCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'class' 
    {
        createLeafNode(grammarAccess.getClassCSAccess().getClassKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassCSAccess().getNameIdentifierParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'<' 
    {
        createLeafNode(grammarAccess.getClassCSAccess().getLessThanSignKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassCSAccess().getTypeParametersTypeParameterCSParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_typeParameters_3_0=ruleTypeParameterCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"typeParameters",
	        		lv_typeParameters_3_0, 
	        		"TypeParameterCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getClassCSAccess().getCommaKeyword_2_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassCSAccess().getTypeParametersTypeParameterCSParserRuleCall_2_2_1_0(), currentNode); 
	    }
		lv_typeParameters_5_0=ruleTypeParameterCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"typeParameters",
	        		lv_typeParameters_5_0, 
	        		"TypeParameterCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'>' 
    {
        createLeafNode(grammarAccess.getClassCSAccess().getGreaterThanSignKeyword_2_3(), null); 
    }
)?(	'extends' 
    {
        createLeafNode(grammarAccess.getClassCSAccess().getExtendsKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassCSAccess().getSuperTypesTypedRefCSParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_superTypes_8_0=ruleTypedRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"superTypes",
	        		lv_superTypes_8_0, 
	        		"TypedRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getClassCSAccess().getCommaKeyword_3_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassCSAccess().getSuperTypesTypedRefCSParserRuleCall_3_2_1_0(), currentNode); 
	    }
		lv_superTypes_10_0=ruleTypedRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"superTypes",
	        		lv_superTypes_10_0, 
	        		"TypedRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?(	':' 
    {
        createLeafNode(grammarAccess.getClassCSAccess().getColonKeyword_4_0(), null); 
    }
(
(
		lv_instanceClassName_12_0=RULE_SINGLE_QUOTED_STRING
		{
			createLeafNode(grammarAccess.getClassCSAccess().getInstanceClassNameSINGLE_QUOTED_STRINGTerminalRuleCall_4_1_0(), "instanceClassName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"instanceClassName",
	        		lv_instanceClassName_12_0, 
	        		"SINGLE_QUOTED_STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(	'{' 
    {
        createLeafNode(grammarAccess.getClassCSAccess().getLeftCurlyBracketKeyword_5_0(), null); 
    }
(
(
(
		lv_qualifiers_14_1=	'abstract' 
    {
        createLeafNode(grammarAccess.getClassCSAccess().getQualifiersAbstractKeyword_5_1_0_0(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_14_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_14_2=	'!abstract' 
    {
        createLeafNode(grammarAccess.getClassCSAccess().getQualifiersAbstractKeyword_5_1_0_1(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_14_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_14_3=	'interface' 
    {
        createLeafNode(grammarAccess.getClassCSAccess().getQualifiersInterfaceKeyword_5_1_0_2(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_14_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_14_4=	'!interface' 
    {
        createLeafNode(grammarAccess.getClassCSAccess().getQualifiersInterfaceKeyword_5_1_0_3(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_14_4, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(	',' 
    {
        createLeafNode(grammarAccess.getClassCSAccess().getCommaKeyword_5_2_0(), null); 
    }
(
(
(
		lv_qualifiers_16_1=	'abstract' 
    {
        createLeafNode(grammarAccess.getClassCSAccess().getQualifiersAbstractKeyword_5_2_1_0_0(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_16_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_16_2=	'!abstract' 
    {
        createLeafNode(grammarAccess.getClassCSAccess().getQualifiersAbstractKeyword_5_2_1_0_1(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_16_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_16_3=	'interface' 
    {
        createLeafNode(grammarAccess.getClassCSAccess().getQualifiersInterfaceKeyword_5_2_1_0_2(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_16_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_16_4=	'!interface' 
    {
        createLeafNode(grammarAccess.getClassCSAccess().getQualifiersInterfaceKeyword_5_2_1_0_3(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_16_4, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getClassCSAccess().getRightCurlyBracketKeyword_5_3(), null); 
    }
)?((	'{' 
    {
        createLeafNode(grammarAccess.getClassCSAccess().getLeftCurlyBracketKeyword_6_0_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassCSAccess().getAnnotationsAnnotationElementCSParserRuleCall_6_0_1_0_0(), currentNode); 
	    }
		lv_annotations_19_0=ruleAnnotationElementCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_19_0, 
	        		"AnnotationElementCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassCSAccess().getOperationsOperationCSParserRuleCall_6_0_1_1_0(), currentNode); 
	    }
		lv_operations_20_0=ruleOperationCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operations",
	        		lv_operations_20_0, 
	        		"OperationCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassCSAccess().getStructuralFeaturesStructuralFeatureCSParserRuleCall_6_0_1_2_0(), currentNode); 
	    }
		lv_structuralFeatures_21_0=ruleStructuralFeatureCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"structuralFeatures",
	        		lv_structuralFeatures_21_0, 
	        		"StructuralFeatureCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassCSAccess().getConstraintsInvariantConstraintCSParserRuleCall_6_0_1_3_0(), currentNode); 
	    }
		lv_constraints_22_0=ruleInvariantConstraintCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"constraints",
	        		lv_constraints_22_0, 
	        		"InvariantConstraintCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getClassCSAccess().getRightCurlyBracketKeyword_6_0_2(), null); 
    }
)
    |	';' 
    {
        createLeafNode(grammarAccess.getClassCSAccess().getSemicolonKeyword_6_1(), null); 
    }
))
;





// Entry rule entryRuleClassifierCS
entryRuleClassifierCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getClassifierCSRule(), currentNode); }
	 iv_ruleClassifierCS=ruleClassifierCS 
	 { $current=$iv_ruleClassifierCS.current; } 
	 EOF 
;

// Rule ClassifierCS
ruleClassifierCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getClassifierCSAccess().getClassCSParserRuleCall_0(), currentNode); 
    }
    this_ClassCS_0=ruleClassCS
    { 
        $current = $this_ClassCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getClassifierCSAccess().getDataTypeCSParserRuleCall_1(), currentNode); 
    }
    this_DataTypeCS_1=ruleDataTypeCS
    { 
        $current = $this_DataTypeCS_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getClassifierCSAccess().getEnumCSParserRuleCall_2(), currentNode); 
    }
    this_EnumCS_2=ruleEnumCS
    { 
        $current = $this_EnumCS_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleCollectionTypeRefCS
entryRuleCollectionTypeRefCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCollectionTypeRefCSRule(), currentNode); }
	 iv_ruleCollectionTypeRefCS=ruleCollectionTypeRefCS 
	 { $current=$iv_ruleCollectionTypeRefCS.current; } 
	 EOF 
;

// Rule CollectionTypeRefCS
ruleCollectionTypeRefCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCollectionTypeRefCSAccess().getNameCollectionTypeIdentifierParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=ruleCollectionTypeIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionTypeRefCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"CollectionTypeIdentifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'(' 
    {
        createLeafNode(grammarAccess.getCollectionTypeRefCSAccess().getLeftParenthesisKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCollectionTypeRefCSAccess().getTypeArgumentsTypeRefCSParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_typeArguments_2_0=ruleTypeRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionTypeRefCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"typeArguments",
	        		lv_typeArguments_2_0, 
	        		"TypeRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	')' 
    {
        createLeafNode(grammarAccess.getCollectionTypeRefCSAccess().getRightParenthesisKeyword_1_2(), null); 
    }
)?)
;





// Entry rule entryRuleDataTypeCS
entryRuleDataTypeCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDataTypeCSRule(), currentNode); }
	 iv_ruleDataTypeCS=ruleDataTypeCS 
	 { $current=$iv_ruleDataTypeCS.current; } 
	 EOF 
;

// Rule DataTypeCS
ruleDataTypeCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'datatype' 
    {
        createLeafNode(grammarAccess.getDataTypeCSAccess().getDatatypeKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDataTypeCSAccess().getNameIdentifierParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'<' 
    {
        createLeafNode(grammarAccess.getDataTypeCSAccess().getLessThanSignKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDataTypeCSAccess().getTypeParametersTypeParameterCSParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_typeParameters_3_0=ruleTypeParameterCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"typeParameters",
	        		lv_typeParameters_3_0, 
	        		"TypeParameterCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getDataTypeCSAccess().getCommaKeyword_2_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDataTypeCSAccess().getTypeParametersTypeParameterCSParserRuleCall_2_2_1_0(), currentNode); 
	    }
		lv_typeParameters_5_0=ruleTypeParameterCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"typeParameters",
	        		lv_typeParameters_5_0, 
	        		"TypeParameterCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'>' 
    {
        createLeafNode(grammarAccess.getDataTypeCSAccess().getGreaterThanSignKeyword_2_3(), null); 
    }
)?(	':' 
    {
        createLeafNode(grammarAccess.getDataTypeCSAccess().getColonKeyword_3_0(), null); 
    }
(
(
		lv_instanceClassName_8_0=RULE_SINGLE_QUOTED_STRING
		{
			createLeafNode(grammarAccess.getDataTypeCSAccess().getInstanceClassNameSINGLE_QUOTED_STRINGTerminalRuleCall_3_1_0(), "instanceClassName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"instanceClassName",
	        		lv_instanceClassName_8_0, 
	        		"SINGLE_QUOTED_STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(	'{' 
    {
        createLeafNode(grammarAccess.getDataTypeCSAccess().getLeftCurlyBracketKeyword_4_0(), null); 
    }
(
(
(
		lv_qualifiers_10_1=	'serializable' 
    {
        createLeafNode(grammarAccess.getDataTypeCSAccess().getQualifiersSerializableKeyword_4_1_0_0(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_10_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_10_2=	'!serializable' 
    {
        createLeafNode(grammarAccess.getDataTypeCSAccess().getQualifiersSerializableKeyword_4_1_0_1(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_10_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)	'}' 
    {
        createLeafNode(grammarAccess.getDataTypeCSAccess().getRightCurlyBracketKeyword_4_2(), null); 
    }
)?((	'{' 
    {
        createLeafNode(grammarAccess.getDataTypeCSAccess().getLeftCurlyBracketKeyword_5_0_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDataTypeCSAccess().getAnnotationsAnnotationElementCSParserRuleCall_5_0_1_0_0(), currentNode); 
	    }
		lv_annotations_13_0=ruleAnnotationElementCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_13_0, 
	        		"AnnotationElementCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDataTypeCSAccess().getConstraintsInvariantConstraintCSParserRuleCall_5_0_1_1_0(), currentNode); 
	    }
		lv_constraints_14_0=ruleInvariantConstraintCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"constraints",
	        		lv_constraints_14_0, 
	        		"InvariantConstraintCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getDataTypeCSAccess().getRightCurlyBracketKeyword_5_0_2(), null); 
    }
)
    |	';' 
    {
        createLeafNode(grammarAccess.getDataTypeCSAccess().getSemicolonKeyword_5_1(), null); 
    }
))
;





// Entry rule entryRuleDetailCS
entryRuleDetailCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDetailCSRule(), currentNode); }
	 iv_ruleDetailCS=ruleDetailCS 
	 { $current=$iv_ruleDetailCS.current; } 
	 EOF 
;

// Rule DetailCS
ruleDetailCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDetailCSAccess().getIdNameIdentifierParserRuleCall_0_0_0(), currentNode); 
	    }
		lv_idName_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDetailCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"idName",
	        		lv_idName_0_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		lv_stringName_1_0=RULE_SINGLE_QUOTED_STRING
		{
			createLeafNode(grammarAccess.getDetailCSAccess().getStringNameSINGLE_QUOTED_STRINGTerminalRuleCall_0_1_0(), "stringName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDetailCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"stringName",
	        		lv_stringName_1_0, 
	        		"SINGLE_QUOTED_STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))	'=' 
    {
        createLeafNode(grammarAccess.getDetailCSAccess().getEqualsSignKeyword_1(), null); 
    }
(
(
		lv_value_3_0=RULE_SINGLE_QUOTED_STRING
		{
			createLeafNode(grammarAccess.getDetailCSAccess().getValueSINGLE_QUOTED_STRINGTerminalRuleCall_2_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDetailCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"value",
	        		lv_value_3_0, 
	        		"SINGLE_QUOTED_STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)*)
;





// Entry rule entryRuleDocumentationCS
entryRuleDocumentationCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDocumentationCSRule(), currentNode); }
	 iv_ruleDocumentationCS=ruleDocumentationCS 
	 { $current=$iv_ruleDocumentationCS.current; } 
	 EOF 
;

// Rule DocumentationCS
ruleDocumentationCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getDocumentationCSAccess().getDocumentationCSAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getDocumentationCSAccess().getDocumentationCSAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'documentation' 
    {
        createLeafNode(grammarAccess.getDocumentationCSAccess().getDocumentationKeyword_1(), null); 
    }
(
(
		lv_value_2_0=RULE_SINGLE_QUOTED_STRING
		{
			createLeafNode(grammarAccess.getDocumentationCSAccess().getValueSINGLE_QUOTED_STRINGTerminalRuleCall_2_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDocumentationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_2_0, 
	        		"SINGLE_QUOTED_STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(	'(' 
    {
        createLeafNode(grammarAccess.getDocumentationCSAccess().getLeftParenthesisKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDocumentationCSAccess().getDetailsDetailCSParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_details_4_0=ruleDetailCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDocumentationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"details",
	        		lv_details_4_0, 
	        		"DetailCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getDocumentationCSAccess().getCommaKeyword_3_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDocumentationCSAccess().getDetailsDetailCSParserRuleCall_3_2_1_0(), currentNode); 
	    }
		lv_details_6_0=ruleDetailCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDocumentationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"details",
	        		lv_details_6_0, 
	        		"DetailCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	')' 
    {
        createLeafNode(grammarAccess.getDocumentationCSAccess().getRightParenthesisKeyword_3_3(), null); 
    }
)?	';' 
    {
        createLeafNode(grammarAccess.getDocumentationCSAccess().getSemicolonKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleEnumCS
entryRuleEnumCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEnumCSRule(), currentNode); }
	 iv_ruleEnumCS=ruleEnumCS 
	 { $current=$iv_ruleEnumCS.current; } 
	 EOF 
;

// Rule EnumCS
ruleEnumCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'enum' 
    {
        createLeafNode(grammarAccess.getEnumCSAccess().getEnumKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEnumCSAccess().getNameIdentifierParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'<' 
    {
        createLeafNode(grammarAccess.getEnumCSAccess().getLessThanSignKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEnumCSAccess().getTypeParametersTypeParameterCSParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_typeParameters_3_0=ruleTypeParameterCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"typeParameters",
	        		lv_typeParameters_3_0, 
	        		"TypeParameterCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getEnumCSAccess().getCommaKeyword_2_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEnumCSAccess().getTypeParametersTypeParameterCSParserRuleCall_2_2_1_0(), currentNode); 
	    }
		lv_typeParameters_5_0=ruleTypeParameterCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"typeParameters",
	        		lv_typeParameters_5_0, 
	        		"TypeParameterCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'>' 
    {
        createLeafNode(grammarAccess.getEnumCSAccess().getGreaterThanSignKeyword_2_3(), null); 
    }
)?(	':' 
    {
        createLeafNode(grammarAccess.getEnumCSAccess().getColonKeyword_3_0(), null); 
    }
(
(
		lv_instanceClassName_8_0=RULE_SINGLE_QUOTED_STRING
		{
			createLeafNode(grammarAccess.getEnumCSAccess().getInstanceClassNameSINGLE_QUOTED_STRINGTerminalRuleCall_3_1_0(), "instanceClassName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"instanceClassName",
	        		lv_instanceClassName_8_0, 
	        		"SINGLE_QUOTED_STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?((	'{' 
    {
        createLeafNode(grammarAccess.getEnumCSAccess().getLeftCurlyBracketKeyword_4_0_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEnumCSAccess().getAnnotationsAnnotationElementCSParserRuleCall_4_0_1_0_0(), currentNode); 
	    }
		lv_annotations_10_0=ruleAnnotationElementCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_10_0, 
	        		"AnnotationElementCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEnumCSAccess().getLiteralsEnumLiteralCSParserRuleCall_4_0_1_1_0(), currentNode); 
	    }
		lv_literals_11_0=ruleEnumLiteralCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"literals",
	        		lv_literals_11_0, 
	        		"EnumLiteralCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEnumCSAccess().getConstraintsInvariantConstraintCSParserRuleCall_4_0_1_2_0(), currentNode); 
	    }
		lv_constraints_12_0=ruleInvariantConstraintCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"constraints",
	        		lv_constraints_12_0, 
	        		"InvariantConstraintCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getEnumCSAccess().getRightCurlyBracketKeyword_4_0_2(), null); 
    }
)
    |	';' 
    {
        createLeafNode(grammarAccess.getEnumCSAccess().getSemicolonKeyword_4_1(), null); 
    }
))
;





// Entry rule entryRuleEnumLiteralCS
entryRuleEnumLiteralCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEnumLiteralCSRule(), currentNode); }
	 iv_ruleEnumLiteralCS=ruleEnumLiteralCS 
	 { $current=$iv_ruleEnumLiteralCS.current; } 
	 EOF 
;

// Rule EnumLiteralCS
ruleEnumLiteralCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEnumLiteralCSAccess().getNameIdentifierParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumLiteralCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'=' 
    {
        createLeafNode(grammarAccess.getEnumLiteralCSAccess().getEqualsSignKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEnumLiteralCSAccess().getValueINTEGERParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_value_2_0=ruleINTEGER		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumLiteralCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_2_0, 
	        		"INTEGER", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?((	'{' 
    {
        createLeafNode(grammarAccess.getEnumLiteralCSAccess().getLeftCurlyBracketKeyword_2_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEnumLiteralCSAccess().getAnnotationsAnnotationElementCSParserRuleCall_2_0_1_0(), currentNode); 
	    }
		lv_annotations_4_0=ruleAnnotationElementCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumLiteralCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_4_0, 
	        		"AnnotationElementCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getEnumLiteralCSAccess().getRightCurlyBracketKeyword_2_0_2(), null); 
    }
)
    |	';' 
    {
        createLeafNode(grammarAccess.getEnumLiteralCSAccess().getSemicolonKeyword_2_1(), null); 
    }
))
;





// Entry rule entryRuleImportCS
entryRuleImportCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getImportCSRule(), currentNode); }
	 iv_ruleImportCS=ruleImportCS 
	 { $current=$iv_ruleImportCS.current; } 
	 EOF 
;

// Rule ImportCS
ruleImportCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'import' 
    {
        createLeafNode(grammarAccess.getImportCSAccess().getImportKeyword_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getImportCSAccess().getNameIdentifierParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_name_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImportCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getImportCSAccess().getColonKeyword_1_1(), null); 
    }
)?(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getImportCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_SINGLE_QUOTED_STRING
	{
		createLeafNode(grammarAccess.getImportCSAccess().getNamespaceNamespaceCSCrossReference_2_0(), "namespace"); 
	}

)
)	';' 
    {
        createLeafNode(grammarAccess.getImportCSAccess().getSemicolonKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleLibraryCS
entryRuleLibraryCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLibraryCSRule(), currentNode); }
	 iv_ruleLibraryCS=ruleLibraryCS 
	 { $current=$iv_ruleLibraryCS.current; } 
	 EOF 
;

// Rule LibraryCS
ruleLibraryCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'library' 
    {
        createLeafNode(grammarAccess.getLibraryCSAccess().getLibraryKeyword_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLibraryCSAccess().getNameIdentifierParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_name_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLibraryCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getLibraryCSAccess().getColonKeyword_1_1(), null); 
    }
)?(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getLibraryCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_SINGLE_QUOTED_STRING
	{
		createLeafNode(grammarAccess.getLibraryCSAccess().getPackagePackageCSCrossReference_2_0(), "package"); 
	}

)
)	';' 
    {
        createLeafNode(grammarAccess.getLibraryCSAccess().getSemicolonKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleModelElementCS
entryRuleModelElementCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getModelElementCSRule(), currentNode); }
	 iv_ruleModelElementCS=ruleModelElementCS 
	 { $current=$iv_ruleModelElementCS.current; } 
	 EOF 
;

// Rule ModelElementCS
ruleModelElementCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getModelElementCSAccess().getClassifierCSParserRuleCall_0(), currentNode); 
    }
    this_ClassifierCS_0=ruleClassifierCS
    { 
        $current = $this_ClassifierCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getModelElementCSAccess().getEnumLiteralCSParserRuleCall_1(), currentNode); 
    }
    this_EnumLiteralCS_1=ruleEnumLiteralCS
    { 
        $current = $this_EnumLiteralCS_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getModelElementCSAccess().getOperationCSParserRuleCall_2(), currentNode); 
    }
    this_OperationCS_2=ruleOperationCS
    { 
        $current = $this_OperationCS_2.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getModelElementCSAccess().getPackageCSParserRuleCall_3(), currentNode); 
    }
    this_PackageCS_3=rulePackageCS
    { 
        $current = $this_PackageCS_3.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getModelElementCSAccess().getStructuralFeatureCSParserRuleCall_4(), currentNode); 
    }
    this_StructuralFeatureCS_4=ruleStructuralFeatureCS
    { 
        $current = $this_StructuralFeatureCS_4.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleModelElementCSRef
entryRuleModelElementCSRef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getModelElementCSRefRule(), currentNode); }
	 iv_ruleModelElementCSRef=ruleModelElementCSRef 
	 { $current=$iv_ruleModelElementCSRef.current; } 
	 EOF 
;

// Rule ModelElementCSRef
ruleModelElementCSRef returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getModelElementCSRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModelElementCSRefAccess().getRefModelElementCSCrossReference_0(), currentNode); 
	    }
		ruleIdentifier		{ 
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleOperationCS
entryRuleOperationCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOperationCSRule(), currentNode); }
	 iv_ruleOperationCS=ruleOperationCS 
	 { $current=$iv_ruleOperationCS.current; } 
	 EOF 
;

// Rule OperationCS
ruleOperationCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_isStatic_0_0=	'static' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getIsStaticStaticKeyword_0_0(), "isStatic"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isStatic", true, "static", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		lv_isDefinition_1_0=	'definition' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getIsDefinitionDefinitionKeyword_1_0(), "isDefinition"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isDefinition", true, "definition", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?	'operation' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getOperationKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationCSAccess().getNameIdentifierParserRuleCall_3_0(), currentNode); 
	    }
		lv_name_3_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_3_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'<' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getLessThanSignKeyword_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationCSAccess().getTypeParametersTypeParameterCSParserRuleCall_4_1_0(), currentNode); 
	    }
		lv_typeParameters_5_0=ruleTypeParameterCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"typeParameters",
	        		lv_typeParameters_5_0, 
	        		"TypeParameterCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getCommaKeyword_4_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationCSAccess().getTypeParametersTypeParameterCSParserRuleCall_4_2_1_0(), currentNode); 
	    }
		lv_typeParameters_7_0=ruleTypeParameterCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"typeParameters",
	        		lv_typeParameters_7_0, 
	        		"TypeParameterCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'>' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getGreaterThanSignKeyword_4_3(), null); 
    }
)?	'(' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getLeftParenthesisKeyword_5(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationCSAccess().getParametersParameterCSParserRuleCall_6_0_0(), currentNode); 
	    }
		lv_parameters_10_0=ruleParameterCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_10_0, 
	        		"ParameterCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getCommaKeyword_6_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationCSAccess().getParametersParameterCSParserRuleCall_6_1_1_0(), currentNode); 
	    }
		lv_parameters_12_0=ruleParameterCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_12_0, 
	        		"ParameterCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	')' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getRightParenthesisKeyword_7(), null); 
    }
(	':' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getColonKeyword_8_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationCSAccess().getTypeTypedRefCSParserRuleCall_8_1_0(), currentNode); 
	    }
		lv_type_15_0=ruleTypedRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_15_0, 
	        		"TypedRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(	'[' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getLeftSquareBracketKeyword_8_2_0(), null); 
    }
(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationCSAccess().getLowerLOWERParserRuleCall_8_2_1_0_0_0(), currentNode); 
	    }
		lv_lower_17_0=ruleLOWER		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"lower",
	        		lv_lower_17_0, 
	        		"LOWER", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'..' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getFullStopFullStopKeyword_8_2_1_0_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationCSAccess().getUpperUPPERParserRuleCall_8_2_1_0_1_1_0(), currentNode); 
	    }
		lv_upper_19_0=ruleUPPER		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"upper",
	        		lv_upper_19_0, 
	        		"UPPER", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
    |(
(
(
		lv_multiplicity_20_1=	'*' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getMultiplicityAsteriskKeyword_8_2_1_1_0_0(), "multiplicity"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "multiplicity", lv_multiplicity_20_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_multiplicity_20_2=	'+' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getMultiplicityPlusSignKeyword_8_2_1_1_0_1(), "multiplicity"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "multiplicity", lv_multiplicity_20_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_multiplicity_20_3=	'?' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getMultiplicityQuestionMarkKeyword_8_2_1_1_0_2(), "multiplicity"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "multiplicity", lv_multiplicity_20_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
))	']' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getRightSquareBracketKeyword_8_2_2(), null); 
    }
)?)?(	'throws' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getThrowsKeyword_9_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationCSAccess().getExceptionsTypedRefCSParserRuleCall_9_1_0(), currentNode); 
	    }
		lv_exceptions_23_0=ruleTypedRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"exceptions",
	        		lv_exceptions_23_0, 
	        		"TypedRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getCommaKeyword_9_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationCSAccess().getExceptionsTypedRefCSParserRuleCall_9_2_1_0(), currentNode); 
	    }
		lv_exceptions_25_0=ruleTypedRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"exceptions",
	        		lv_exceptions_25_0, 
	        		"TypedRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?(	'{' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getLeftCurlyBracketKeyword_10_0(), null); 
    }
(
(
(
		lv_qualifiers_27_1=	'derived' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getQualifiersDerivedKeyword_10_1_0_0(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_27_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_27_2=	'!derived' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getQualifiersDerivedKeyword_10_1_0_1(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_27_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_27_3=	'ordered' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getQualifiersOrderedKeyword_10_1_0_2(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_27_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_27_4=	'!ordered' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getQualifiersOrderedKeyword_10_1_0_3(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_27_4, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_27_5=	'unique' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getQualifiersUniqueKeyword_10_1_0_4(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_27_5, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_27_6=	'!unique' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getQualifiersUniqueKeyword_10_1_0_5(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_27_6, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(	',' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getCommaKeyword_10_2_0(), null); 
    }
(
(
(
		lv_qualifiers_29_1=	'derived' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getQualifiersDerivedKeyword_10_2_1_0_0(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_29_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_29_2=	'!derived' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getQualifiersDerivedKeyword_10_2_1_0_1(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_29_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_29_3=	'ordered' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getQualifiersOrderedKeyword_10_2_1_0_2(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_29_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_29_4=	'!ordered' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getQualifiersOrderedKeyword_10_2_1_0_3(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_29_4, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_29_5=	'unique' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getQualifiersUniqueKeyword_10_2_1_0_4(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_29_5, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_29_6=	'!unique' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getQualifiersUniqueKeyword_10_2_1_0_5(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_29_6, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getRightCurlyBracketKeyword_10_3(), null); 
    }
)?((	'{' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getLeftCurlyBracketKeyword_11_0_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationCSAccess().getAnnotationsAnnotationElementCSParserRuleCall_11_0_1_0_0(), currentNode); 
	    }
		lv_annotations_32_0=ruleAnnotationElementCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_32_0, 
	        		"AnnotationElementCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationCSAccess().getConstraintsPreconditionConstraintCSParserRuleCall_11_0_1_1_0_0(), currentNode); 
	    }
		lv_constraints_33_1=rulePreconditionConstraintCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"constraints",
	        		lv_constraints_33_1, 
	        		"PreconditionConstraintCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationCSAccess().getConstraintsBodyConstraintCSParserRuleCall_11_0_1_1_0_1(), currentNode); 
	    }
		lv_constraints_33_2=ruleBodyConstraintCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"constraints",
	        		lv_constraints_33_2, 
	        		"BodyConstraintCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationCSAccess().getConstraintsPostconditionConstraintCSParserRuleCall_11_0_1_1_0_2(), currentNode); 
	    }
		lv_constraints_33_3=rulePostconditionConstraintCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"constraints",
	        		lv_constraints_33_3, 
	        		"PostconditionConstraintCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getRightCurlyBracketKeyword_11_0_2(), null); 
    }
)
    |	';' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getSemicolonKeyword_11_1(), null); 
    }
))
;





// Entry rule entryRulePackageCS
entryRulePackageCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPackageCSRule(), currentNode); }
	 iv_rulePackageCS=rulePackageCS 
	 { $current=$iv_rulePackageCS.current; } 
	 EOF 
;

// Rule PackageCS
rulePackageCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'package' 
    {
        createLeafNode(grammarAccess.getPackageCSAccess().getPackageKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPackageCSAccess().getNameIdentifierParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPackageCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	':' 
    {
        createLeafNode(grammarAccess.getPackageCSAccess().getColonKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPackageCSAccess().getPrefixIdentifierParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_prefix_3_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPackageCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"prefix",
	        		lv_prefix_3_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'=' 
    {
        createLeafNode(grammarAccess.getPackageCSAccess().getEqualsSignKeyword_2_2(), null); 
    }
(
(
		lv_uri_5_0=RULE_SINGLE_QUOTED_STRING
		{
			createLeafNode(grammarAccess.getPackageCSAccess().getUriSINGLE_QUOTED_STRINGTerminalRuleCall_2_3_0(), "uri"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPackageCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"uri",
	        		lv_uri_5_0, 
	        		"SINGLE_QUOTED_STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?((	'{' 
    {
        createLeafNode(grammarAccess.getPackageCSAccess().getLeftCurlyBracketKeyword_3_0_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPackageCSAccess().getAnnotationsAnnotationElementCSParserRuleCall_3_0_1_0_0(), currentNode); 
	    }
		lv_annotations_7_0=ruleAnnotationElementCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPackageCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_7_0, 
	        		"AnnotationElementCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPackageCSAccess().getSubpackagesPackageCSParserRuleCall_3_0_1_1_0(), currentNode); 
	    }
		lv_subpackages_8_0=rulePackageCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPackageCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"subpackages",
	        		lv_subpackages_8_0, 
	        		"PackageCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPackageCSAccess().getClassifiersClassifierCSParserRuleCall_3_0_1_2_0(), currentNode); 
	    }
		lv_classifiers_9_0=ruleClassifierCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPackageCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"classifiers",
	        		lv_classifiers_9_0, 
	        		"ClassifierCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getPackageCSAccess().getRightCurlyBracketKeyword_3_0_2(), null); 
    }
)
    |	';' 
    {
        createLeafNode(grammarAccess.getPackageCSAccess().getSemicolonKeyword_3_1(), null); 
    }
))
;





// Entry rule entryRuleParameterCS
entryRuleParameterCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getParameterCSRule(), currentNode); }
	 iv_ruleParameterCS=ruleParameterCS 
	 { $current=$iv_ruleParameterCS.current; } 
	 EOF 
;

// Rule ParameterCS
ruleParameterCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParameterCSAccess().getNameIdentifierParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	':' 
    {
        createLeafNode(grammarAccess.getParameterCSAccess().getColonKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParameterCSAccess().getTypeTypedRefCSParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_type_2_0=ruleTypedRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"TypedRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'[' 
    {
        createLeafNode(grammarAccess.getParameterCSAccess().getLeftSquareBracketKeyword_1_2_0(), null); 
    }
(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParameterCSAccess().getLowerLOWERParserRuleCall_1_2_1_0_0_0(), currentNode); 
	    }
		lv_lower_4_0=ruleLOWER		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"lower",
	        		lv_lower_4_0, 
	        		"LOWER", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'..' 
    {
        createLeafNode(grammarAccess.getParameterCSAccess().getFullStopFullStopKeyword_1_2_1_0_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParameterCSAccess().getUpperUPPERParserRuleCall_1_2_1_0_1_1_0(), currentNode); 
	    }
		lv_upper_6_0=ruleUPPER		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"upper",
	        		lv_upper_6_0, 
	        		"UPPER", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
    |(
(
(
		lv_multiplicity_7_1=	'*' 
    {
        createLeafNode(grammarAccess.getParameterCSAccess().getMultiplicityAsteriskKeyword_1_2_1_1_0_0(), "multiplicity"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "multiplicity", lv_multiplicity_7_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_multiplicity_7_2=	'+' 
    {
        createLeafNode(grammarAccess.getParameterCSAccess().getMultiplicityPlusSignKeyword_1_2_1_1_0_1(), "multiplicity"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "multiplicity", lv_multiplicity_7_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_multiplicity_7_3=	'?' 
    {
        createLeafNode(grammarAccess.getParameterCSAccess().getMultiplicityQuestionMarkKeyword_1_2_1_1_0_2(), "multiplicity"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "multiplicity", lv_multiplicity_7_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
))	']' 
    {
        createLeafNode(grammarAccess.getParameterCSAccess().getRightSquareBracketKeyword_1_2_2(), null); 
    }
)?)?(	'{' 
    {
        createLeafNode(grammarAccess.getParameterCSAccess().getLeftCurlyBracketKeyword_2_0(), null); 
    }
(
(
(
		lv_qualifiers_10_1=	'ordered' 
    {
        createLeafNode(grammarAccess.getParameterCSAccess().getQualifiersOrderedKeyword_2_1_0_0(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_10_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_10_2=	'!ordered' 
    {
        createLeafNode(grammarAccess.getParameterCSAccess().getQualifiersOrderedKeyword_2_1_0_1(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_10_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_10_3=	'unique' 
    {
        createLeafNode(grammarAccess.getParameterCSAccess().getQualifiersUniqueKeyword_2_1_0_2(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_10_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_10_4=	'!unique' 
    {
        createLeafNode(grammarAccess.getParameterCSAccess().getQualifiersUniqueKeyword_2_1_0_3(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_10_4, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(	',' 
    {
        createLeafNode(grammarAccess.getParameterCSAccess().getCommaKeyword_2_2_0(), null); 
    }
(
(
(
		lv_qualifiers_12_1=	'ordered' 
    {
        createLeafNode(grammarAccess.getParameterCSAccess().getQualifiersOrderedKeyword_2_2_1_0_0(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_12_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_12_2=	'!ordered' 
    {
        createLeafNode(grammarAccess.getParameterCSAccess().getQualifiersOrderedKeyword_2_2_1_0_1(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_12_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_12_3=	'unique' 
    {
        createLeafNode(grammarAccess.getParameterCSAccess().getQualifiersUniqueKeyword_2_2_1_0_2(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_12_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_12_4=	'!unique' 
    {
        createLeafNode(grammarAccess.getParameterCSAccess().getQualifiersUniqueKeyword_2_2_1_0_3(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_12_4, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getParameterCSAccess().getRightCurlyBracketKeyword_2_3(), null); 
    }
)?(	'{' 
    {
        createLeafNode(grammarAccess.getParameterCSAccess().getLeftCurlyBracketKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParameterCSAccess().getAnnotationsAnnotationElementCSParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_annotations_15_0=ruleAnnotationElementCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_15_0, 
	        		"AnnotationElementCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getParameterCSAccess().getRightCurlyBracketKeyword_3_2(), null); 
    }
)?)
;





// Entry rule entryRulePrimitiveTypeRefCS
entryRulePrimitiveTypeRefCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrimitiveTypeRefCSRule(), currentNode); }
	 iv_rulePrimitiveTypeRefCS=rulePrimitiveTypeRefCS 
	 { $current=$iv_rulePrimitiveTypeRefCS.current; } 
	 EOF 
;

// Rule PrimitiveTypeRefCS
rulePrimitiveTypeRefCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimitiveTypeRefCSAccess().getNamePrimitiveTypeIdentifierParserRuleCall_0(), currentNode); 
	    }
		lv_name_0_0=rulePrimitiveTypeIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveTypeRefCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"PrimitiveTypeIdentifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleQualifiedTypeRefCS
entryRuleQualifiedTypeRefCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getQualifiedTypeRefCSRule(), currentNode); }
	 iv_ruleQualifiedTypeRefCS=ruleQualifiedTypeRefCS 
	 { $current=$iv_ruleQualifiedTypeRefCS.current; } 
	 EOF 
;

// Rule QualifiedTypeRefCS
ruleQualifiedTypeRefCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getQualifiedTypeRefCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getQualifiedTypeRefCSAccess().getNamespaceNamespaceCSCrossReference_0_0(), currentNode); 
	    }
		ruleIdentifier		{ 
	        currentNode = currentNode.getParent();
	    }

)
)(	'<' 
    {
        createLeafNode(grammarAccess.getQualifiedTypeRefCSAccess().getLessThanSignKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getQualifiedTypeRefCSAccess().getTypeArgumentsTypeRefCSParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_typeArguments_2_0=ruleTypeRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQualifiedTypeRefCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"typeArguments",
	        		lv_typeArguments_2_0, 
	        		"TypeRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getQualifiedTypeRefCSAccess().getCommaKeyword_1_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getQualifiedTypeRefCSAccess().getTypeArgumentsTypeRefCSParserRuleCall_1_2_1_0(), currentNode); 
	    }
		lv_typeArguments_4_0=ruleTypeRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQualifiedTypeRefCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"typeArguments",
	        		lv_typeArguments_4_0, 
	        		"TypeRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'>' 
    {
        createLeafNode(grammarAccess.getQualifiedTypeRefCSAccess().getGreaterThanSignKeyword_1_3(), null); 
    }
)?	'::' 
    {
        createLeafNode(grammarAccess.getQualifiedTypeRefCSAccess().getColonColonKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getQualifiedTypeRefCSAccess().getElementTypedRefCSParserRuleCall_3_0(), currentNode); 
	    }
		lv_element_7_0=ruleTypedRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQualifiedTypeRefCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"element",
	        		lv_element_7_0, 
	        		"TypedRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleReferenceCS
entryRuleReferenceCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getReferenceCSRule(), currentNode); }
	 iv_ruleReferenceCS=ruleReferenceCS 
	 { $current=$iv_ruleReferenceCS.current; } 
	 EOF 
;

// Rule ReferenceCS
ruleReferenceCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_isStatic_0_0=	'static' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getIsStaticStaticKeyword_0_0(), "isStatic"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isStatic", true, "static", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		lv_isDefinition_1_0=	'definition' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getIsDefinitionDefinitionKeyword_1_0(), "isDefinition"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isDefinition", true, "definition", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?	'property' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getPropertyKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getReferenceCSAccess().getNameIdentifierParserRuleCall_3_0(), currentNode); 
	    }
		lv_name_3_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_3_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'#' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getNumberSignKeyword_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getReferenceCSAccess().getOppositeReferenceCSRefParserRuleCall_4_1_0(), currentNode); 
	    }
		lv_opposite_5_0=ruleReferenceCSRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"opposite",
	        		lv_opposite_5_0, 
	        		"ReferenceCSRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(	':' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getColonKeyword_5_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getReferenceCSAccess().getTypeTypedRefCSParserRuleCall_5_1_0(), currentNode); 
	    }
		lv_type_7_0=ruleTypedRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_7_0, 
	        		"TypedRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'[' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getLeftSquareBracketKeyword_5_2_0(), null); 
    }
(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getReferenceCSAccess().getLowerLOWERParserRuleCall_5_2_1_0_0_0(), currentNode); 
	    }
		lv_lower_9_0=ruleLOWER		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"lower",
	        		lv_lower_9_0, 
	        		"LOWER", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'..' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getFullStopFullStopKeyword_5_2_1_0_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getReferenceCSAccess().getUpperUPPERParserRuleCall_5_2_1_0_1_1_0(), currentNode); 
	    }
		lv_upper_11_0=ruleUPPER		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"upper",
	        		lv_upper_11_0, 
	        		"UPPER", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
    |(
(
(
		lv_multiplicity_12_1=	'*' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getMultiplicityAsteriskKeyword_5_2_1_1_0_0(), "multiplicity"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "multiplicity", lv_multiplicity_12_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_multiplicity_12_2=	'+' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getMultiplicityPlusSignKeyword_5_2_1_1_0_1(), "multiplicity"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "multiplicity", lv_multiplicity_12_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_multiplicity_12_3=	'?' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getMultiplicityQuestionMarkKeyword_5_2_1_1_0_2(), "multiplicity"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "multiplicity", lv_multiplicity_12_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
))	']' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getRightSquareBracketKeyword_5_2_2(), null); 
    }
)?)?(	'=' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getEqualsSignKeyword_6_0(), null); 
    }
(
(
		lv_defaultValueLiteral_15_0=RULE_SINGLE_QUOTED_STRING
		{
			createLeafNode(grammarAccess.getReferenceCSAccess().getDefaultValueLiteralSINGLE_QUOTED_STRINGTerminalRuleCall_6_1_0(), "defaultValueLiteral"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"defaultValueLiteral",
	        		lv_defaultValueLiteral_15_0, 
	        		"SINGLE_QUOTED_STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(	'{' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getLeftCurlyBracketKeyword_7_0(), null); 
    }
(
(
(
		lv_qualifiers_17_1=	'composes' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersComposesKeyword_7_1_0_0(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_2=	'!composes' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersComposesKeyword_7_1_0_1(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_3=	'derived' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersDerivedKeyword_7_1_0_2(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_4=	'!derived' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersDerivedKeyword_7_1_0_3(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_4, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_5=	'ordered' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersOrderedKeyword_7_1_0_4(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_5, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_6=	'!ordered' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersOrderedKeyword_7_1_0_5(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_6, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_7=	'readonly' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersReadonlyKeyword_7_1_0_6(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_7, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_8=	'!readonly' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersReadonlyKeyword_7_1_0_7(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_8, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_9=	'resolve' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersResolveKeyword_7_1_0_8(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_9, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_10=	'!resolve' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersResolveKeyword_7_1_0_9(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_10, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_11=	'transient' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersTransientKeyword_7_1_0_10(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_11, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_12=	'!transient' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersTransientKeyword_7_1_0_11(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_12, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_13=	'unique' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersUniqueKeyword_7_1_0_12(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_13, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_14=	'!unique' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersUniqueKeyword_7_1_0_13(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_14, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_15=	'unsettable' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersUnsettableKeyword_7_1_0_14(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_15, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_16=	'!unsettable' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersUnsettableKeyword_7_1_0_15(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_16, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_17=	'volatile' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersVolatileKeyword_7_1_0_16(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_17, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_18=	'!volatile' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersVolatileKeyword_7_1_0_17(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_18, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(	',' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getCommaKeyword_7_2_0(), null); 
    }
(
(
(
		lv_qualifiers_19_1=	'composes' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersComposesKeyword_7_2_1_0_0(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_19_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_19_2=	'!composes' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersComposesKeyword_7_2_1_0_1(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_19_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_19_3=	'derived' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersDerivedKeyword_7_2_1_0_2(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_19_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_19_4=	'!derived' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersDerivedKeyword_7_2_1_0_3(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_19_4, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_19_5=	'ordered' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersOrderedKeyword_7_2_1_0_4(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_19_5, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_19_6=	'!ordered' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersOrderedKeyword_7_2_1_0_5(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_19_6, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_19_7=	'readonly' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersReadonlyKeyword_7_2_1_0_6(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_19_7, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_19_8=	'!readonly' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersReadonlyKeyword_7_2_1_0_7(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_19_8, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_19_9=	'resolve' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersResolveKeyword_7_2_1_0_8(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_19_9, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_19_10=	'!resolve' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersResolveKeyword_7_2_1_0_9(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_19_10, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_19_11=	'transient' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersTransientKeyword_7_2_1_0_10(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_19_11, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_19_12=	'!transient' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersTransientKeyword_7_2_1_0_11(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_19_12, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_19_13=	'unique' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersUniqueKeyword_7_2_1_0_12(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_19_13, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_19_14=	'!unique' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersUniqueKeyword_7_2_1_0_13(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_19_14, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_19_15=	'unsettable' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersUnsettableKeyword_7_2_1_0_14(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_19_15, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_19_16=	'!unsettable' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersUnsettableKeyword_7_2_1_0_15(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_19_16, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_19_17=	'volatile' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersVolatileKeyword_7_2_1_0_16(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_19_17, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_19_18=	'!volatile' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersVolatileKeyword_7_2_1_0_17(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_19_18, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getRightCurlyBracketKeyword_7_3(), null); 
    }
)?((	'{' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getLeftCurlyBracketKeyword_8_0_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getReferenceCSAccess().getAnnotationsAnnotationElementCSParserRuleCall_8_0_1_0_0(), currentNode); 
	    }
		lv_annotations_22_0=ruleAnnotationElementCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_22_0, 
	        		"AnnotationElementCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getReferenceCSAccess().getConstraintsInitialConstraintCSParserRuleCall_8_0_1_1_0_0(), currentNode); 
	    }
		lv_constraints_23_1=ruleInitialConstraintCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"constraints",
	        		lv_constraints_23_1, 
	        		"InitialConstraintCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getReferenceCSAccess().getConstraintsDerivedConstraintCSParserRuleCall_8_0_1_1_0_1(), currentNode); 
	    }
		lv_constraints_23_2=ruleDerivedConstraintCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"constraints",
	        		lv_constraints_23_2, 
	        		"DerivedConstraintCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getRightCurlyBracketKeyword_8_0_2(), null); 
    }
)
    |	';' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getSemicolonKeyword_8_1(), null); 
    }
))
;





// Entry rule entryRuleReferenceCSRef
entryRuleReferenceCSRef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getReferenceCSRefRule(), currentNode); }
	 iv_ruleReferenceCSRef=ruleReferenceCSRef 
	 { $current=$iv_ruleReferenceCSRef.current; } 
	 EOF 
;

// Rule ReferenceCSRef
ruleReferenceCSRef returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getReferenceCSRefAccess().getRefReferenceCSCrossReference_0(), currentNode); 
	    }
		ruleIdentifier		{ 
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleStructuralFeatureCS
entryRuleStructuralFeatureCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStructuralFeatureCSRule(), currentNode); }
	 iv_ruleStructuralFeatureCS=ruleStructuralFeatureCS 
	 { $current=$iv_ruleStructuralFeatureCS.current; } 
	 EOF 
;

// Rule StructuralFeatureCS
ruleStructuralFeatureCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getStructuralFeatureCSAccess().getAttributeCSParserRuleCall_0(), currentNode); 
    }
    this_AttributeCS_0=ruleAttributeCS
    { 
        $current = $this_AttributeCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getStructuralFeatureCSAccess().getReferenceCSParserRuleCall_1(), currentNode); 
    }
    this_ReferenceCS_1=ruleReferenceCS
    { 
        $current = $this_ReferenceCS_1.current; 
        currentNode = currentNode.getParent();
    }
)
;







// Entry rule entryRuleTypeParameterCS
entryRuleTypeParameterCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypeParameterCSRule(), currentNode); }
	 iv_ruleTypeParameterCS=ruleTypeParameterCS 
	 { $current=$iv_ruleTypeParameterCS.current; } 
	 EOF 
;

// Rule TypeParameterCS
ruleTypeParameterCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTypeParameterCSAccess().getNameIdentifierParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((	'extends' 
    {
        createLeafNode(grammarAccess.getTypeParameterCSAccess().getExtendsKeyword_1_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTypeParameterCSAccess().getExtendsTypedRefCSParserRuleCall_1_0_1_0(), currentNode); 
	    }
		lv_extends_2_0=ruleTypedRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"extends",
	        		lv_extends_2_0, 
	        		"TypedRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'&&' 
    {
        createLeafNode(grammarAccess.getTypeParameterCSAccess().getAmpersandAmpersandKeyword_1_0_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTypeParameterCSAccess().getExtendsTypedRefCSParserRuleCall_1_0_2_1_0(), currentNode); 
	    }
		lv_extends_4_0=ruleTypedRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"extends",
	        		lv_extends_4_0, 
	        		"TypedRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
    |(	'super' 
    {
        createLeafNode(grammarAccess.getTypeParameterCSAccess().getSuperKeyword_1_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTypeParameterCSAccess().getSuperTypedRefCSParserRuleCall_1_1_1_0(), currentNode); 
	    }
		lv_super_6_0=ruleTypedRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"super",
	        		lv_super_6_0, 
	        		"TypedRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))?)
;





// Entry rule entryRuleTypeRefCS
entryRuleTypeRefCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypeRefCSRule(), currentNode); }
	 iv_ruleTypeRefCS=ruleTypeRefCS 
	 { $current=$iv_ruleTypeRefCS.current; } 
	 EOF 
;

// Rule TypeRefCS
ruleTypeRefCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeRefCSAccess().getTypedRefCSParserRuleCall_0(), currentNode); 
    }
    this_TypedRefCS_0=ruleTypedRefCS
    { 
        $current = $this_TypedRefCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeRefCSAccess().getWildcardTypeRefCSParserRuleCall_1(), currentNode); 
    }
    this_WildcardTypeRefCS_1=ruleWildcardTypeRefCS
    { 
        $current = $this_WildcardTypeRefCS_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleTypedRefCS
entryRuleTypedRefCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypedRefCSRule(), currentNode); }
	 iv_ruleTypedRefCS=ruleTypedRefCS 
	 { $current=$iv_ruleTypedRefCS.current; } 
	 EOF 
;

// Rule TypedRefCS
ruleTypedRefCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypedRefCSAccess().getQualifiedTypeRefCSParserRuleCall_0(), currentNode); 
    }
    this_QualifiedTypeRefCS_0=ruleQualifiedTypeRefCS
    { 
        $current = $this_QualifiedTypeRefCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypedRefCSAccess().getPrimitiveTypeRefCSParserRuleCall_1(), currentNode); 
    }
    this_PrimitiveTypeRefCS_1=rulePrimitiveTypeRefCS
    { 
        $current = $this_PrimitiveTypeRefCS_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypedRefCSAccess().getCollectionTypeRefCSParserRuleCall_2(), currentNode); 
    }
    this_CollectionTypeRefCS_2=ruleCollectionTypeRefCS
    { 
        $current = $this_CollectionTypeRefCS_2.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypedRefCSAccess().getTypedTypeRefCSParserRuleCall_3(), currentNode); 
    }
    this_TypedTypeRefCS_3=ruleTypedTypeRefCS
    { 
        $current = $this_TypedTypeRefCS_3.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleTypedTypeRefCS
entryRuleTypedTypeRefCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypedTypeRefCSRule(), currentNode); }
	 iv_ruleTypedTypeRefCS=ruleTypedTypeRefCS 
	 { $current=$iv_ruleTypedTypeRefCS.current; } 
	 EOF 
;

// Rule TypedTypeRefCS
ruleTypedTypeRefCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getTypedTypeRefCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTypedTypeRefCSAccess().getTypeTypeCSCrossReference_0_0(), currentNode); 
	    }
		ruleIdentifier		{ 
	        currentNode = currentNode.getParent();
	    }

)
)(	'<' 
    {
        createLeafNode(grammarAccess.getTypedTypeRefCSAccess().getLessThanSignKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTypedTypeRefCSAccess().getTypeArgumentsTypeRefCSParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_typeArguments_2_0=ruleTypeRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypedTypeRefCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"typeArguments",
	        		lv_typeArguments_2_0, 
	        		"TypeRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getTypedTypeRefCSAccess().getCommaKeyword_1_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTypedTypeRefCSAccess().getTypeArgumentsTypeRefCSParserRuleCall_1_2_1_0(), currentNode); 
	    }
		lv_typeArguments_4_0=ruleTypeRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypedTypeRefCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"typeArguments",
	        		lv_typeArguments_4_0, 
	        		"TypeRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'>' 
    {
        createLeafNode(grammarAccess.getTypedTypeRefCSAccess().getGreaterThanSignKeyword_1_3(), null); 
    }
)?)
;





// Entry rule entryRuleWildcardTypeRefCS
entryRuleWildcardTypeRefCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getWildcardTypeRefCSRule(), currentNode); }
	 iv_ruleWildcardTypeRefCS=ruleWildcardTypeRefCS 
	 { $current=$iv_ruleWildcardTypeRefCS.current; } 
	 EOF 
;

// Rule WildcardTypeRefCS
ruleWildcardTypeRefCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getWildcardTypeRefCSAccess().getWildcardTypeRefCSAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getWildcardTypeRefCSAccess().getWildcardTypeRefCSAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'?' 
    {
        createLeafNode(grammarAccess.getWildcardTypeRefCSAccess().getQuestionMarkKeyword_1(), null); 
    }
((	'extends' 
    {
        createLeafNode(grammarAccess.getWildcardTypeRefCSAccess().getExtendsKeyword_2_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWildcardTypeRefCSAccess().getExtendsTypedRefCSParserRuleCall_2_0_1_0(), currentNode); 
	    }
		lv_extends_3_0=ruleTypedRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWildcardTypeRefCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"extends",
	        		lv_extends_3_0, 
	        		"TypedRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	'super' 
    {
        createLeafNode(grammarAccess.getWildcardTypeRefCSAccess().getSuperKeyword_2_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWildcardTypeRefCSAccess().getSuperTypedRefCSParserRuleCall_2_1_1_0(), currentNode); 
	    }
		lv_super_5_0=ruleTypedRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWildcardTypeRefCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"super",
	        		lv_super_5_0, 
	        		"TypedRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))?)
;







// Entry rule entryRuleNUMBER_LITERAL
entryRuleNUMBER_LITERAL returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNUMBER_LITERALRule(), currentNode); } 
	 iv_ruleNUMBER_LITERAL=ruleNUMBER_LITERAL 
	 { $current=$iv_ruleNUMBER_LITERAL.current.getText(); }  
	 EOF 
;

// Rule NUMBER_LITERAL
ruleNUMBER_LITERAL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    createLeafNode(grammarAccess.getNUMBER_LITERALAccess().getINTTerminalRuleCall_0(), null); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNUMBER_LITERALAccess().getFullStopKeyword_1_0(), null); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    createLeafNode(grammarAccess.getNUMBER_LITERALAccess().getINTTerminalRuleCall_1_1(), null); 
    }
)?((
	kw='e' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNUMBER_LITERALAccess().getEKeyword_2_0_0(), null); 
    }

    |
	kw='E' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNUMBER_LITERALAccess().getEKeyword_2_0_1(), null); 
    }
)(
	kw='+' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNUMBER_LITERALAccess().getPlusSignKeyword_2_1_0(), null); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNUMBER_LITERALAccess().getHyphenMinusKeyword_2_1_1(), null); 
    }
)?    this_INT_7=RULE_INT    {
		$current.merge(this_INT_7);
    }

    { 
    createLeafNode(grammarAccess.getNUMBER_LITERALAccess().getINTTerminalRuleCall_2_2(), null); 
    }
)?)
    ;







// Entry rule entryRuleEssentialOCLRestrictedKeywords
entryRuleEssentialOCLRestrictedKeywords returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEssentialOCLRestrictedKeywordsRule(), currentNode); } 
	 iv_ruleEssentialOCLRestrictedKeywords=ruleEssentialOCLRestrictedKeywords 
	 { $current=$iv_ruleEssentialOCLRestrictedKeywords.current.getText(); }  
	 EOF 
;

// Rule EssentialOCLRestrictedKeywords
ruleEssentialOCLRestrictedKeywords returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='e' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEssentialOCLRestrictedKeywordsAccess().getEKeyword_0(), null); 
    }

    |
	kw='E' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEssentialOCLRestrictedKeywordsAccess().getEKeyword_1(), null); 
    }
)
    ;





// Entry rule entryRuleIdentifier
entryRuleIdentifier returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIdentifierRule(), currentNode); } 
	 iv_ruleIdentifier=ruleIdentifier 
	 { $current=$iv_ruleIdentifier.current.getText(); }  
	 EOF 
;

// Rule Identifier
ruleIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(grammarAccess.getIdentifierAccess().getIDTerminalRuleCall_0(), null); 
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getIdentifierAccess().getRestrictedKeywordsParserRuleCall_1(), currentNode); 
    }
    this_RestrictedKeywords_1=ruleRestrictedKeywords    {
		$current.merge(this_RestrictedKeywords_1);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStringLiteralRule(), currentNode); } 
	 iv_ruleStringLiteral=ruleStringLiteral 
	 { $current=$iv_ruleStringLiteral.current.getText(); }  
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
    this_SINGLE_QUOTED_STRING_0=RULE_SINGLE_QUOTED_STRING    {
		$current.merge(this_SINGLE_QUOTED_STRING_0);
    }

    { 
    createLeafNode(grammarAccess.getStringLiteralAccess().getSINGLE_QUOTED_STRINGTerminalRuleCall(), null); 
    }

    ;





// Entry rule entryRuleSimpleName
entryRuleSimpleName returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSimpleNameRule(), currentNode); } 
	 iv_ruleSimpleName=ruleSimpleName 
	 { $current=$iv_ruleSimpleName.current.getText(); }  
	 EOF 
;

// Rule SimpleName
ruleSimpleName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getSimpleNameAccess().getIdentifierParserRuleCall(), currentNode); 
    }
    this_Identifier_0=ruleIdentifier    {
		$current.merge(this_Identifier_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    ;





// Entry rule entryRulePrimitiveTypeIdentifier
entryRulePrimitiveTypeIdentifier returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrimitiveTypeIdentifierRule(), currentNode); } 
	 iv_rulePrimitiveTypeIdentifier=rulePrimitiveTypeIdentifier 
	 { $current=$iv_rulePrimitiveTypeIdentifier.current.getText(); }  
	 EOF 
;

// Rule PrimitiveTypeIdentifier
rulePrimitiveTypeIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='Boolean' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPrimitiveTypeIdentifierAccess().getBooleanKeyword_0(), null); 
    }

    |
	kw='Integer' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPrimitiveTypeIdentifierAccess().getIntegerKeyword_1(), null); 
    }

    |
	kw='Real' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPrimitiveTypeIdentifierAccess().getRealKeyword_2(), null); 
    }

    |
	kw='String' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPrimitiveTypeIdentifierAccess().getStringKeyword_3(), null); 
    }

    |
	kw='UnlimitedNatural' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPrimitiveTypeIdentifierAccess().getUnlimitedNaturalKeyword_4(), null); 
    }

    |
	kw='OclAny' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPrimitiveTypeIdentifierAccess().getOclAnyKeyword_5(), null); 
    }

    |
	kw='OclInvalid' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPrimitiveTypeIdentifierAccess().getOclInvalidKeyword_6(), null); 
    }

    |
	kw='OclVoid' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPrimitiveTypeIdentifierAccess().getOclVoidKeyword_7(), null); 
    }
)
    ;





// Entry rule entryRulePrimitiveTypeCS
entryRulePrimitiveTypeCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrimitiveTypeCSRule(), currentNode); }
	 iv_rulePrimitiveTypeCS=rulePrimitiveTypeCS 
	 { $current=$iv_rulePrimitiveTypeCS.current; } 
	 EOF 
;

// Rule PrimitiveTypeCS
rulePrimitiveTypeCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimitiveTypeCSAccess().getNamePrimitiveTypeIdentifierParserRuleCall_0(), currentNode); 
	    }
		lv_name_0_0=rulePrimitiveTypeIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"PrimitiveTypeIdentifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleCollectionTypeIdentifier
entryRuleCollectionTypeIdentifier returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCollectionTypeIdentifierRule(), currentNode); } 
	 iv_ruleCollectionTypeIdentifier=ruleCollectionTypeIdentifier 
	 { $current=$iv_ruleCollectionTypeIdentifier.current.getText(); }  
	 EOF 
;

// Rule CollectionTypeIdentifier
ruleCollectionTypeIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='Set' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getCollectionTypeIdentifierAccess().getSetKeyword_0(), null); 
    }

    |
	kw='Bag' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getCollectionTypeIdentifierAccess().getBagKeyword_1(), null); 
    }

    |
	kw='Sequence' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getCollectionTypeIdentifierAccess().getSequenceKeyword_2(), null); 
    }

    |
	kw='Collection' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getCollectionTypeIdentifierAccess().getCollectionKeyword_3(), null); 
    }

    |
	kw='OrderedSet' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getCollectionTypeIdentifierAccess().getOrderedSetKeyword_4(), null); 
    }
)
    ;





// Entry rule entryRuleTypeExpCS
entryRuleTypeExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypeExpCSRule(), currentNode); }
	 iv_ruleTypeExpCS=ruleTypeExpCS 
	 { $current=$iv_ruleTypeExpCS.current; } 
	 EOF 
;

// Rule TypeExpCS
ruleTypeExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeExpCSAccess().getPrimitiveTypeCSParserRuleCall_0(), currentNode); 
    }
    this_PrimitiveTypeCS_0=rulePrimitiveTypeCS
    { 
        $current = $this_PrimitiveTypeCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeExpCSAccess().getNameExpCSParserRuleCall_1(), currentNode); 
    }
    this_NameExpCS_1=ruleNameExpCS
    { 
        $current = $this_NameExpCS_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeExpCSAccess().getCollectionTypeCSParserRuleCall_2(), currentNode); 
    }
    this_CollectionTypeCS_2=ruleCollectionTypeCS
    { 
        $current = $this_CollectionTypeCS_2.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeExpCSAccess().getTupleTypeCSParserRuleCall_3(), currentNode); 
    }
    this_TupleTypeCS_3=ruleTupleTypeCS
    { 
        $current = $this_TupleTypeCS_3.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleCollectionTypeCS
entryRuleCollectionTypeCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCollectionTypeCSRule(), currentNode); }
	 iv_ruleCollectionTypeCS=ruleCollectionTypeCS 
	 { $current=$iv_ruleCollectionTypeCS.current; } 
	 EOF 
;

// Rule CollectionTypeCS
ruleCollectionTypeCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCollectionTypeCSAccess().getNameCollectionTypeIdentifierParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=ruleCollectionTypeIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"CollectionTypeIdentifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'(' 
    {
        createLeafNode(grammarAccess.getCollectionTypeCSAccess().getLeftParenthesisKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCollectionTypeCSAccess().getTypeCSTypeExpCSParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_typeCS_2_0=ruleTypeExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"typeCS",
	        		lv_typeCS_2_0, 
	        		"TypeExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getCollectionTypeCSAccess().getRightParenthesisKeyword_1_2(), null); 
    }
)?)
;





// Entry rule entryRuleTupleTypeCS
entryRuleTupleTypeCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTupleTypeCSRule(), currentNode); }
	 iv_ruleTupleTypeCS=ruleTupleTypeCS 
	 { $current=$iv_ruleTupleTypeCS.current; } 
	 EOF 
;

// Rule TupleTypeCS
ruleTupleTypeCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=	'Tuple' 
    {
        createLeafNode(grammarAccess.getTupleTypeCSAccess().getNameTupleKeyword_0_0(), "name"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0_0, "Tuple", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getTupleTypeCSAccess().getLeftParenthesisKeyword_1(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTupleTypeCSAccess().getPartTuplePartCSParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_part_2_0=ruletuplePartCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"part",
	        		lv_part_2_0, 
	        		"tuplePartCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getTupleTypeCSAccess().getCommaKeyword_2_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTupleTypeCSAccess().getPartTuplePartCSParserRuleCall_2_1_1_0(), currentNode); 
	    }
		lv_part_4_0=ruletuplePartCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"part",
	        		lv_part_4_0, 
	        		"tuplePartCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	')' 
    {
        createLeafNode(grammarAccess.getTupleTypeCSAccess().getRightParenthesisKeyword_3(), null); 
    }
)
;





// Entry rule entryRuletuplePartCS
entryRuletuplePartCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTuplePartCSRule(), currentNode); }
	 iv_ruletuplePartCS=ruletuplePartCS 
	 { $current=$iv_ruletuplePartCS.current; } 
	 EOF 
;

// Rule tuplePartCS
ruletuplePartCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTuplePartCSAccess().getNameSimpleNameParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=ruleSimpleName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTuplePartCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"SimpleName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getTuplePartCSAccess().getColonKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTuplePartCSAccess().getTypeTypeExpCSParserRuleCall_2_0(), currentNode); 
	    }
		lv_type_2_0=ruleTypeExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTuplePartCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"TypeExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleCollectionLiteralExpCS
entryRuleCollectionLiteralExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCollectionLiteralExpCSRule(), currentNode); }
	 iv_ruleCollectionLiteralExpCS=ruleCollectionLiteralExpCS 
	 { $current=$iv_ruleCollectionLiteralExpCS.current; } 
	 EOF 
;

// Rule CollectionLiteralExpCS
ruleCollectionLiteralExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getCollectionLiteralExpCSAccess().getCollectionTypeCSParserRuleCall_0(), currentNode); 
    }
    this_CollectionTypeCS_0=ruleCollectionTypeCS
    { 
        $current = $this_CollectionTypeCS_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getCollectionLiteralExpCSAccess().getCollectionLiteralExpCSTypeCSAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "typeCS", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getCollectionLiteralExpCSAccess().getCollectionLiteralExpCSTypeCSAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'{' 
    {
        createLeafNode(grammarAccess.getCollectionLiteralExpCSAccess().getLeftCurlyBracketKeyword_1_1(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCollectionLiteralExpCSAccess().getCollectionLiteralPartsCollectionLiteralPartCSParserRuleCall_1_2_0_0(), currentNode); 
	    }
		lv_collectionLiteralParts_3_0=ruleCollectionLiteralPartCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionLiteralExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"collectionLiteralParts",
	        		lv_collectionLiteralParts_3_0, 
	        		"CollectionLiteralPartCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getCollectionLiteralExpCSAccess().getCommaKeyword_1_2_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCollectionLiteralExpCSAccess().getCollectionLiteralPartsCollectionLiteralPartCSParserRuleCall_1_2_1_1_0(), currentNode); 
	    }
		lv_collectionLiteralParts_5_0=ruleCollectionLiteralPartCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionLiteralExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"collectionLiteralParts",
	        		lv_collectionLiteralParts_5_0, 
	        		"CollectionLiteralPartCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	'}' 
    {
        createLeafNode(grammarAccess.getCollectionLiteralExpCSAccess().getRightCurlyBracketKeyword_1_3(), null); 
    }
)?)
;





// Entry rule entryRuleCollectionLiteralPartCS
entryRuleCollectionLiteralPartCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCollectionLiteralPartCSRule(), currentNode); }
	 iv_ruleCollectionLiteralPartCS=ruleCollectionLiteralPartCS 
	 { $current=$iv_ruleCollectionLiteralPartCS.current; } 
	 EOF 
;

// Rule CollectionLiteralPartCS
ruleCollectionLiteralPartCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCollectionLiteralPartCSAccess().getExpressionCSExpCSParserRuleCall_0_0(), currentNode); 
	    }
		lv_expressionCS_0_0=ruleExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionLiteralPartCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expressionCS",
	        		lv_expressionCS_0_0, 
	        		"ExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'..' 
    {
        createLeafNode(grammarAccess.getCollectionLiteralPartCSAccess().getFullStopFullStopKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCollectionLiteralPartCSAccess().getLastExpressionCSExpCSParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_lastExpressionCS_2_0=ruleExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionLiteralPartCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"lastExpressionCS",
	        		lv_lastExpressionCS_2_0, 
	        		"ExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRulePrimitiveLiteralExpCS
entryRulePrimitiveLiteralExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrimitiveLiteralExpCSRule(), currentNode); }
	 iv_rulePrimitiveLiteralExpCS=rulePrimitiveLiteralExpCS 
	 { $current=$iv_rulePrimitiveLiteralExpCS.current; } 
	 EOF 
;

// Rule PrimitiveLiteralExpCS
rulePrimitiveLiteralExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimitiveLiteralExpCSAccess().getNumberLiteralExpCSParserRuleCall_0(), currentNode); 
    }
    this_NumberLiteralExpCS_0=ruleNumberLiteralExpCS
    { 
        $current = $this_NumberLiteralExpCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimitiveLiteralExpCSAccess().getStringLiteralExpCSParserRuleCall_1(), currentNode); 
    }
    this_StringLiteralExpCS_1=ruleStringLiteralExpCS
    { 
        $current = $this_StringLiteralExpCS_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimitiveLiteralExpCSAccess().getBooleanLiteralExpCSParserRuleCall_2(), currentNode); 
    }
    this_BooleanLiteralExpCS_2=ruleBooleanLiteralExpCS
    { 
        $current = $this_BooleanLiteralExpCS_2.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimitiveLiteralExpCSAccess().getInvalidLiteralExpCSParserRuleCall_3(), currentNode); 
    }
    this_InvalidLiteralExpCS_3=ruleInvalidLiteralExpCS
    { 
        $current = $this_InvalidLiteralExpCS_3.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimitiveLiteralExpCSAccess().getNullLiteralExpCSParserRuleCall_4(), currentNode); 
    }
    this_NullLiteralExpCS_4=ruleNullLiteralExpCS
    { 
        $current = $this_NullLiteralExpCS_4.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleTupleLiteralExpCS
entryRuleTupleLiteralExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTupleLiteralExpCSRule(), currentNode); }
	 iv_ruleTupleLiteralExpCS=ruleTupleLiteralExpCS 
	 { $current=$iv_ruleTupleLiteralExpCS.current; } 
	 EOF 
;

// Rule TupleLiteralExpCS
ruleTupleLiteralExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getTupleLiteralExpCSAccess().getTupleLiteralExpCSAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTupleLiteralExpCSAccess().getTupleLiteralExpCSAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'Tuple' 
    {
        createLeafNode(grammarAccess.getTupleLiteralExpCSAccess().getTupleKeyword_1(), null); 
    }
(	'{' 
    {
        createLeafNode(grammarAccess.getTupleLiteralExpCSAccess().getLeftCurlyBracketKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTupleLiteralExpCSAccess().getPartTupleLiteralPartCSParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_part_3_0=ruleTupleLiteralPartCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleLiteralExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"part",
	        		lv_part_3_0, 
	        		"TupleLiteralPartCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getTupleLiteralExpCSAccess().getCommaKeyword_2_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTupleLiteralExpCSAccess().getPartTupleLiteralPartCSParserRuleCall_2_2_1_0(), currentNode); 
	    }
		lv_part_5_0=ruleTupleLiteralPartCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleLiteralExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"part",
	        		lv_part_5_0, 
	        		"TupleLiteralPartCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getTupleLiteralExpCSAccess().getRightCurlyBracketKeyword_2_3(), null); 
    }
)?)
;





// Entry rule entryRuleTupleLiteralPartCS
entryRuleTupleLiteralPartCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTupleLiteralPartCSRule(), currentNode); }
	 iv_ruleTupleLiteralPartCS=ruleTupleLiteralPartCS 
	 { $current=$iv_ruleTupleLiteralPartCS.current; } 
	 EOF 
;

// Rule TupleLiteralPartCS
ruleTupleLiteralPartCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTupleLiteralPartCSAccess().getNameSimpleNameParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=ruleSimpleName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleLiteralPartCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"SimpleName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	':' 
    {
        createLeafNode(grammarAccess.getTupleLiteralPartCSAccess().getColonKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTupleLiteralPartCSAccess().getTypeTypeExpCSParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_type_2_0=ruleTypeExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleLiteralPartCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"TypeExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?	'=' 
    {
        createLeafNode(grammarAccess.getTupleLiteralPartCSAccess().getEqualsSignKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTupleLiteralPartCSAccess().getInitExpressionExpCSParserRuleCall_3_0(), currentNode); 
	    }
		lv_initExpression_4_0=ruleExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleLiteralPartCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"initExpression",
	        		lv_initExpression_4_0, 
	        		"ExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleNumberLiteralExpCS
entryRuleNumberLiteralExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNumberLiteralExpCSRule(), currentNode); }
	 iv_ruleNumberLiteralExpCS=ruleNumberLiteralExpCS 
	 { $current=$iv_ruleNumberLiteralExpCS.current; } 
	 EOF 
;

// Rule NumberLiteralExpCS
ruleNumberLiteralExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNumberLiteralExpCSAccess().getNameNUMBER_LITERALParserRuleCall_0(), currentNode); 
	    }
		lv_name_0_0=ruleNUMBER_LITERAL		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNumberLiteralExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"NUMBER_LITERAL", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleStringLiteralExpCS
entryRuleStringLiteralExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStringLiteralExpCSRule(), currentNode); }
	 iv_ruleStringLiteralExpCS=ruleStringLiteralExpCS 
	 { $current=$iv_ruleStringLiteralExpCS.current; } 
	 EOF 
;

// Rule StringLiteralExpCS
ruleStringLiteralExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStringLiteralExpCSAccess().getNameStringLiteralParserRuleCall_0(), currentNode); 
	    }
		lv_name_0_0=ruleStringLiteral		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStringLiteralExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"StringLiteral", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+
;





// Entry rule entryRuleBooleanLiteralExpCS
entryRuleBooleanLiteralExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBooleanLiteralExpCSRule(), currentNode); }
	 iv_ruleBooleanLiteralExpCS=ruleBooleanLiteralExpCS 
	 { $current=$iv_ruleBooleanLiteralExpCS.current; } 
	 EOF 
;

// Rule BooleanLiteralExpCS
ruleBooleanLiteralExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=	'true' 
    {
        createLeafNode(grammarAccess.getBooleanLiteralExpCSAccess().getNameTrueKeyword_0_0(), "name"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanLiteralExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0_0, "true", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_name_1_0=	'false' 
    {
        createLeafNode(grammarAccess.getBooleanLiteralExpCSAccess().getNameFalseKeyword_1_0(), "name"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanLiteralExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1_0, "false", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleInvalidLiteralExpCS
entryRuleInvalidLiteralExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInvalidLiteralExpCSRule(), currentNode); }
	 iv_ruleInvalidLiteralExpCS=ruleInvalidLiteralExpCS 
	 { $current=$iv_ruleInvalidLiteralExpCS.current; } 
	 EOF 
;

// Rule InvalidLiteralExpCS
ruleInvalidLiteralExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getInvalidLiteralExpCSAccess().getInvalidLiteralExpCSAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getInvalidLiteralExpCSAccess().getInvalidLiteralExpCSAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'invalid' 
    {
        createLeafNode(grammarAccess.getInvalidLiteralExpCSAccess().getInvalidKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleNullLiteralExpCS
entryRuleNullLiteralExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNullLiteralExpCSRule(), currentNode); }
	 iv_ruleNullLiteralExpCS=ruleNullLiteralExpCS 
	 { $current=$iv_ruleNullLiteralExpCS.current; } 
	 EOF 
;

// Rule NullLiteralExpCS
ruleNullLiteralExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getNullLiteralExpCSAccess().getNullLiteralExpCSAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getNullLiteralExpCSAccess().getNullLiteralExpCSAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'null' 
    {
        createLeafNode(grammarAccess.getNullLiteralExpCSAccess().getNullKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleExpCS
entryRuleExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExpCSRule(), currentNode); }
	 iv_ruleExpCS=ruleExpCS 
	 { $current=$iv_ruleExpCS.current; } 
	 EOF 
;

// Rule ExpCS
ruleExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getExpCSAccess().getImpliesCSParserRuleCall_0(), currentNode); 
    }
    this_impliesCS_0=ruleimpliesCS
    { 
        $current = $this_impliesCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getExpCSAccess().getLetExpCSParserRuleCall_1(), currentNode); 
    }
    this_LetExpCS_1=ruleLetExpCS
    { 
        $current = $this_LetExpCS_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleimpliesCS
entryRuleimpliesCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getImpliesCSRule(), currentNode); }
	 iv_ruleimpliesCS=ruleimpliesCS 
	 { $current=$iv_ruleimpliesCS.current; } 
	 EOF 
;

// Rule impliesCS
ruleimpliesCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getImpliesCSAccess().getXorCSParserRuleCall_0(), currentNode); 
    }
    this_xorCS_0=rulexorCS
    { 
        $current = $this_xorCS_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getImpliesCSAccess().getInfixExpCSSourceAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "source", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getImpliesCSAccess().getInfixExpCSSourceAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_op_2_0=	'implies' 
    {
        createLeafNode(grammarAccess.getImpliesCSAccess().getOpImpliesKeyword_1_1_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImpliesCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_0, "implies", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getImpliesCSAccess().getArgumentXorCSParserRuleCall_1_2_0_0(), currentNode); 
	    }
		lv_argument_3_1=rulexorCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImpliesCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_1, 
	        		"xorCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getImpliesCSAccess().getArgumentLetExpCSParserRuleCall_1_2_0_1(), currentNode); 
	    }
		lv_argument_3_2=ruleLetExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImpliesCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_2, 
	        		"LetExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))*)
;





// Entry rule entryRulexorCS
entryRulexorCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getXorCSRule(), currentNode); }
	 iv_rulexorCS=rulexorCS 
	 { $current=$iv_rulexorCS.current; } 
	 EOF 
;

// Rule xorCS
rulexorCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getXorCSAccess().getOrCSParserRuleCall_0(), currentNode); 
    }
    this_orCS_0=ruleorCS
    { 
        $current = $this_orCS_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getXorCSAccess().getInfixExpCSSourceAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "source", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getXorCSAccess().getInfixExpCSSourceAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_op_2_0=	'xor' 
    {
        createLeafNode(grammarAccess.getXorCSAccess().getOpXorKeyword_1_1_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXorCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_0, "xor", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getXorCSAccess().getArgumentOrCSParserRuleCall_1_2_0_0(), currentNode); 
	    }
		lv_argument_3_1=ruleorCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXorCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_1, 
	        		"orCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getXorCSAccess().getArgumentLetExpCSParserRuleCall_1_2_0_1(), currentNode); 
	    }
		lv_argument_3_2=ruleLetExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXorCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_2, 
	        		"LetExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))*)
;





// Entry rule entryRuleorCS
entryRuleorCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOrCSRule(), currentNode); }
	 iv_ruleorCS=ruleorCS 
	 { $current=$iv_ruleorCS.current; } 
	 EOF 
;

// Rule orCS
ruleorCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getOrCSAccess().getAndCSParserRuleCall_0(), currentNode); 
    }
    this_andCS_0=ruleandCS
    { 
        $current = $this_andCS_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getOrCSAccess().getInfixExpCSSourceAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "source", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getOrCSAccess().getInfixExpCSSourceAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_op_2_0=	'or' 
    {
        createLeafNode(grammarAccess.getOrCSAccess().getOpOrKeyword_1_1_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOrCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_0, "or", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOrCSAccess().getArgumentAndCSParserRuleCall_1_2_0_0(), currentNode); 
	    }
		lv_argument_3_1=ruleandCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOrCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_1, 
	        		"andCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getOrCSAccess().getArgumentLetExpCSParserRuleCall_1_2_0_1(), currentNode); 
	    }
		lv_argument_3_2=ruleLetExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOrCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_2, 
	        		"LetExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))*)
;





// Entry rule entryRuleandCS
entryRuleandCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAndCSRule(), currentNode); }
	 iv_ruleandCS=ruleandCS 
	 { $current=$iv_ruleandCS.current; } 
	 EOF 
;

// Rule andCS
ruleandCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAndCSAccess().getEqualityCSParserRuleCall_0(), currentNode); 
    }
    this_equalityCS_0=ruleequalityCS
    { 
        $current = $this_equalityCS_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getAndCSAccess().getInfixExpCSSourceAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "source", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAndCSAccess().getInfixExpCSSourceAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_op_2_0=	'and' 
    {
        createLeafNode(grammarAccess.getAndCSAccess().getOpAndKeyword_1_1_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_0, "and", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAndCSAccess().getArgumentEqualityCSParserRuleCall_1_2_0_0(), currentNode); 
	    }
		lv_argument_3_1=ruleequalityCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_1, 
	        		"equalityCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getAndCSAccess().getArgumentLetExpCSParserRuleCall_1_2_0_1(), currentNode); 
	    }
		lv_argument_3_2=ruleLetExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_2, 
	        		"LetExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))*)
;





// Entry rule entryRuleequalityCS
entryRuleequalityCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEqualityCSRule(), currentNode); }
	 iv_ruleequalityCS=ruleequalityCS 
	 { $current=$iv_ruleequalityCS.current; } 
	 EOF 
;

// Rule equalityCS
ruleequalityCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getEqualityCSAccess().getRelationalCSParserRuleCall_0(), currentNode); 
    }
    this_relationalCS_0=rulerelationalCS
    { 
        $current = $this_relationalCS_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getEqualityCSAccess().getInfixExpCSSourceAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "source", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getEqualityCSAccess().getInfixExpCSSourceAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
(
		lv_op_2_1=	'=' 
    {
        createLeafNode(grammarAccess.getEqualityCSAccess().getOpEqualsSignKeyword_1_1_0_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEqualityCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_2_2=	'<>' 
    {
        createLeafNode(grammarAccess.getEqualityCSAccess().getOpLessThanSignGreaterThanSignKeyword_1_1_0_1(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEqualityCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEqualityCSAccess().getArgumentRelationalCSParserRuleCall_1_2_0_0(), currentNode); 
	    }
		lv_argument_3_1=rulerelationalCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEqualityCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_1, 
	        		"relationalCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getEqualityCSAccess().getArgumentLetExpCSParserRuleCall_1_2_0_1(), currentNode); 
	    }
		lv_argument_3_2=ruleLetExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEqualityCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_2, 
	        		"LetExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))*)
;





// Entry rule entryRulerelationalCS
entryRulerelationalCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRelationalCSRule(), currentNode); }
	 iv_rulerelationalCS=rulerelationalCS 
	 { $current=$iv_rulerelationalCS.current; } 
	 EOF 
;

// Rule relationalCS
rulerelationalCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getRelationalCSAccess().getAdditiveCSParserRuleCall_0(), currentNode); 
    }
    this_additiveCS_0=ruleadditiveCS
    { 
        $current = $this_additiveCS_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getRelationalCSAccess().getInfixExpCSSourceAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "source", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getRelationalCSAccess().getInfixExpCSSourceAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
(
		lv_op_2_1=	'>' 
    {
        createLeafNode(grammarAccess.getRelationalCSAccess().getOpGreaterThanSignKeyword_1_1_0_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_2_2=	'<' 
    {
        createLeafNode(grammarAccess.getRelationalCSAccess().getOpLessThanSignKeyword_1_1_0_1(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_2_3=	'>=' 
    {
        createLeafNode(grammarAccess.getRelationalCSAccess().getOpGreaterThanSignEqualsSignKeyword_1_1_0_2(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_2_4=	'<=' 
    {
        createLeafNode(grammarAccess.getRelationalCSAccess().getOpLessThanSignEqualsSignKeyword_1_1_0_3(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_4, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelationalCSAccess().getArgumentAdditiveCSParserRuleCall_1_2_0_0(), currentNode); 
	    }
		lv_argument_3_1=ruleadditiveCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_1, 
	        		"additiveCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelationalCSAccess().getArgumentLetExpCSParserRuleCall_1_2_0_1(), currentNode); 
	    }
		lv_argument_3_2=ruleLetExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_2, 
	        		"LetExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))*)
;





// Entry rule entryRuleadditiveCS
entryRuleadditiveCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAdditiveCSRule(), currentNode); }
	 iv_ruleadditiveCS=ruleadditiveCS 
	 { $current=$iv_ruleadditiveCS.current; } 
	 EOF 
;

// Rule additiveCS
ruleadditiveCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAdditiveCSAccess().getMultiplicativeCSParserRuleCall_0(), currentNode); 
    }
    this_multiplicativeCS_0=rulemultiplicativeCS
    { 
        $current = $this_multiplicativeCS_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getAdditiveCSAccess().getInfixExpCSSourceAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "source", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAdditiveCSAccess().getInfixExpCSSourceAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
(
		lv_op_2_1=	'+' 
    {
        createLeafNode(grammarAccess.getAdditiveCSAccess().getOpPlusSignKeyword_1_1_0_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_2_2=	'-' 
    {
        createLeafNode(grammarAccess.getAdditiveCSAccess().getOpHyphenMinusKeyword_1_1_0_1(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAdditiveCSAccess().getArgumentMultiplicativeCSParserRuleCall_1_2_0_0(), currentNode); 
	    }
		lv_argument_3_1=rulemultiplicativeCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_1, 
	        		"multiplicativeCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getAdditiveCSAccess().getArgumentLetExpCSParserRuleCall_1_2_0_1(), currentNode); 
	    }
		lv_argument_3_2=ruleLetExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_2, 
	        		"LetExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))*)
;





// Entry rule entryRulemultiplicativeCS
entryRulemultiplicativeCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMultiplicativeCSRule(), currentNode); }
	 iv_rulemultiplicativeCS=rulemultiplicativeCS 
	 { $current=$iv_rulemultiplicativeCS.current; } 
	 EOF 
;

// Rule multiplicativeCS
rulemultiplicativeCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getMultiplicativeCSAccess().getUnaryCSParserRuleCall_0(), currentNode); 
    }
    this_unaryCS_0=ruleunaryCS
    { 
        $current = $this_unaryCS_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getMultiplicativeCSAccess().getInfixExpCSSourceAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "source", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getMultiplicativeCSAccess().getInfixExpCSSourceAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
(
		lv_op_2_1=	'*' 
    {
        createLeafNode(grammarAccess.getMultiplicativeCSAccess().getOpAsteriskKeyword_1_1_0_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_2_2=	'/' 
    {
        createLeafNode(grammarAccess.getMultiplicativeCSAccess().getOpSolidusKeyword_1_1_0_1(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMultiplicativeCSAccess().getArgumentUnaryCSParserRuleCall_1_2_0_0(), currentNode); 
	    }
		lv_argument_3_1=ruleunaryCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_1, 
	        		"unaryCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getMultiplicativeCSAccess().getArgumentLetExpCSParserRuleCall_1_2_0_1(), currentNode); 
	    }
		lv_argument_3_2=ruleLetExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_2, 
	        		"LetExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))*)
;





// Entry rule entryRuleunaryCS
entryRuleunaryCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUnaryCSRule(), currentNode); }
	 iv_ruleunaryCS=ruleunaryCS 
	 { $current=$iv_ruleunaryCS.current; } 
	 EOF 
;

// Rule unaryCS
ruleunaryCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getUnaryCSAccess().getNavigationExpCSParserRuleCall_0(), currentNode); 
    }
    this_NavigationExpCS_0=ruleNavigationExpCS
    { 
        $current = $this_NavigationExpCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getUnaryCSAccess().getPrefixExpCSAction_1_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getUnaryCSAccess().getPrefixExpCSAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
(
		lv_op_2_1=	'-' 
    {
        createLeafNode(grammarAccess.getUnaryCSAccess().getOpHyphenMinusKeyword_1_1_0_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_2_2=	'not' 
    {
        createLeafNode(grammarAccess.getUnaryCSAccess().getOpNotKeyword_1_1_0_1(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnaryCSAccess().getSourceUnaryCSParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_source_3_0=ruleunaryCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"source",
	        		lv_source_3_0, 
	        		"unaryCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRuleNavigationExpCS
entryRuleNavigationExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNavigationExpCSRule(), currentNode); }
	 iv_ruleNavigationExpCS=ruleNavigationExpCS 
	 { $current=$iv_ruleNavigationExpCS.current; } 
	 EOF 
;

// Rule NavigationExpCS
ruleNavigationExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getNavigationExpCSAccess().getSubNavigationExpCSParserRuleCall_0(), currentNode); 
    }
    this_SubNavigationExpCS_0=ruleSubNavigationExpCS
    { 
        $current = $this_SubNavigationExpCS_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getNavigationExpCSAccess().getInfixExpCSSourceAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "source", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getNavigationExpCSAccess().getInfixExpCSSourceAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
(
		lv_op_2_1=	'.' 
    {
        createLeafNode(grammarAccess.getNavigationExpCSAccess().getOpFullStopKeyword_1_1_0_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNavigationExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_2_2=	'->' 
    {
        createLeafNode(grammarAccess.getNavigationExpCSAccess().getOpHyphenMinusGreaterThanSignKeyword_1_1_0_1(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNavigationExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNavigationExpCSAccess().getArgumentNavigatingExpCSParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_argument_3_0=ruleNavigatingExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNavigationExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_0, 
	        		"NavigatingExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleNavigatingExpCS
entryRuleNavigatingExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNavigatingExpCSRule(), currentNode); }
	 iv_ruleNavigatingExpCS=ruleNavigatingExpCS 
	 { $current=$iv_ruleNavigatingExpCS.current; } 
	 EOF 
;

// Rule NavigatingExpCS
ruleNavigatingExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getNavigatingExpCSAccess().getSubNavigatingExpCSParserRuleCall_0(), currentNode); 
    }
    this_SubNavigatingExpCS_0=ruleSubNavigatingExpCS
    { 
        $current = $this_SubNavigatingExpCS_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getNavigatingExpCSAccess().getInfixExpCSSourceAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "source", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getNavigatingExpCSAccess().getInfixExpCSSourceAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
(
		lv_op_2_1=	'.' 
    {
        createLeafNode(grammarAccess.getNavigatingExpCSAccess().getOpFullStopKeyword_1_1_0_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNavigatingExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_2_2=	'->' 
    {
        createLeafNode(grammarAccess.getNavigatingExpCSAccess().getOpHyphenMinusGreaterThanSignKeyword_1_1_0_1(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNavigatingExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNavigatingExpCSAccess().getArgumentNavigatingExpCSParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_argument_3_0=ruleNavigatingExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNavigatingExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_0, 
	        		"NavigatingExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleSubNavigationExpCS
entryRuleSubNavigationExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSubNavigationExpCSRule(), currentNode); }
	 iv_ruleSubNavigationExpCS=ruleSubNavigationExpCS 
	 { $current=$iv_ruleSubNavigationExpCS.current; } 
	 EOF 
;

// Rule SubNavigationExpCS
ruleSubNavigationExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSubNavigationExpCSAccess().getRoundBracketExpCSParserRuleCall_0(), currentNode); 
    }
    this_RoundBracketExpCS_0=ruleRoundBracketExpCS
    { 
        $current = $this_RoundBracketExpCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSubNavigationExpCSAccess().getSquareBracketExpCSParserRuleCall_1(), currentNode); 
    }
    this_SquareBracketExpCS_1=ruleSquareBracketExpCS
    { 
        $current = $this_SquareBracketExpCS_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSubNavigationExpCSAccess().getSelfExpCSParserRuleCall_2(), currentNode); 
    }
    this_SelfExpCS_2=ruleSelfExpCS
    { 
        $current = $this_SelfExpCS_2.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSubNavigationExpCSAccess().getPrimitiveLiteralExpCSParserRuleCall_3(), currentNode); 
    }
    this_PrimitiveLiteralExpCS_3=rulePrimitiveLiteralExpCS
    { 
        $current = $this_PrimitiveLiteralExpCS_3.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSubNavigationExpCSAccess().getTupleLiteralExpCSParserRuleCall_4(), currentNode); 
    }
    this_TupleLiteralExpCS_4=ruleTupleLiteralExpCS
    { 
        $current = $this_TupleLiteralExpCS_4.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSubNavigationExpCSAccess().getCollectionLiteralExpCSParserRuleCall_5(), currentNode); 
    }
    this_CollectionLiteralExpCS_5=ruleCollectionLiteralExpCS
    { 
        $current = $this_CollectionLiteralExpCS_5.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSubNavigationExpCSAccess().getPreExpCSParserRuleCall_6(), currentNode); 
    }
    this_PreExpCS_6=rulePreExpCS
    { 
        $current = $this_PreExpCS_6.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSubNavigationExpCSAccess().getTypeExpCSParserRuleCall_7(), currentNode); 
    }
    this_TypeExpCS_7=ruleTypeExpCS
    { 
        $current = $this_TypeExpCS_7.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSubNavigationExpCSAccess().getIfExpCSParserRuleCall_8(), currentNode); 
    }
    this_IfExpCS_8=ruleIfExpCS
    { 
        $current = $this_IfExpCS_8.current; 
        currentNode = currentNode.getParent();
    }

    |(	'(' 
    {
        createLeafNode(grammarAccess.getSubNavigationExpCSAccess().getLeftParenthesisKeyword_9_0(), null); 
    }
(
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getSubNavigationExpCSAccess().getNestedExpCSAction_9_1().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getSubNavigationExpCSAccess().getNestedExpCSAction_9_1(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSubNavigationExpCSAccess().getSourceExpCSParserRuleCall_9_2_0(), currentNode); 
	    }
		lv_source_11_0=ruleExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSubNavigationExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"source",
	        		lv_source_11_0, 
	        		"ExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getSubNavigationExpCSAccess().getRightParenthesisKeyword_9_3(), null); 
    }
))
;





// Entry rule entryRuleSubNavigatingExpCS
entryRuleSubNavigatingExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSubNavigatingExpCSRule(), currentNode); }
	 iv_ruleSubNavigatingExpCS=ruleSubNavigatingExpCS 
	 { $current=$iv_ruleSubNavigatingExpCS.current; } 
	 EOF 
;

// Rule SubNavigatingExpCS
ruleSubNavigatingExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSubNavigatingExpCSAccess().getRoundBracketExpCSParserRuleCall_0(), currentNode); 
    }
    this_RoundBracketExpCS_0=ruleRoundBracketExpCS
    { 
        $current = $this_RoundBracketExpCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSubNavigatingExpCSAccess().getSquareBracketExpCSParserRuleCall_1(), currentNode); 
    }
    this_SquareBracketExpCS_1=ruleSquareBracketExpCS
    { 
        $current = $this_SquareBracketExpCS_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSubNavigatingExpCSAccess().getPreExpCSParserRuleCall_2(), currentNode); 
    }
    this_PreExpCS_2=rulePreExpCS
    { 
        $current = $this_PreExpCS_2.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSubNavigatingExpCSAccess().getNameExpCSParserRuleCall_3(), currentNode); 
    }
    this_NameExpCS_3=ruleNameExpCS
    { 
        $current = $this_NameExpCS_3.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleiteratorVariableCS
entryRuleiteratorVariableCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIteratorVariableCSRule(), currentNode); }
	 iv_ruleiteratorVariableCS=ruleiteratorVariableCS 
	 { $current=$iv_ruleiteratorVariableCS.current; } 
	 EOF 
;

// Rule iteratorVariableCS
ruleiteratorVariableCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIteratorVariableCSAccess().getNameSimpleNameParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=ruleSimpleName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIteratorVariableCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"SimpleName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	':' 
    {
        createLeafNode(grammarAccess.getIteratorVariableCSAccess().getColonKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIteratorVariableCSAccess().getTypeTypeExpCSParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_type_2_0=ruleTypeExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIteratorVariableCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"TypeExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleiteratorAccumulatorCS
entryRuleiteratorAccumulatorCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIteratorAccumulatorCSRule(), currentNode); }
	 iv_ruleiteratorAccumulatorCS=ruleiteratorAccumulatorCS 
	 { $current=$iv_ruleiteratorAccumulatorCS.current; } 
	 EOF 
;

// Rule iteratorAccumulatorCS
ruleiteratorAccumulatorCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIteratorAccumulatorCSAccess().getNameSimpleNameParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=ruleSimpleName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIteratorAccumulatorCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"SimpleName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getIteratorAccumulatorCSAccess().getColonKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIteratorAccumulatorCSAccess().getTypeTypeExpCSParserRuleCall_2_0(), currentNode); 
	    }
		lv_type_2_0=ruleTypeExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIteratorAccumulatorCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"TypeExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'=' 
    {
        createLeafNode(grammarAccess.getIteratorAccumulatorCSAccess().getEqualsSignKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIteratorAccumulatorCSAccess().getInitExpressionExpCSParserRuleCall_4_0(), currentNode); 
	    }
		lv_initExpression_4_0=ruleExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIteratorAccumulatorCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"initExpression",
	        		lv_initExpression_4_0, 
	        		"ExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleRoundBracketExpCS
entryRuleRoundBracketExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRoundBracketExpCSRule(), currentNode); }
	 iv_ruleRoundBracketExpCS=ruleRoundBracketExpCS 
	 { $current=$iv_ruleRoundBracketExpCS.current; } 
	 EOF 
;

// Rule RoundBracketExpCS
ruleRoundBracketExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRoundBracketExpCSAccess().getNameNameExpCSParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=ruleNameExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRoundBracketExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"NameExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'@' 
    {
        createLeafNode(grammarAccess.getRoundBracketExpCSAccess().getCommercialAtKeyword_1_0(), null); 
    }
(
(
		lv_pre_2_0=	'pre' 
    {
        createLeafNode(grammarAccess.getRoundBracketExpCSAccess().getPrePreKeyword_1_1_0(), "pre"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRoundBracketExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "pre", true, "pre", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?	'(' 
    {
        createLeafNode(grammarAccess.getRoundBracketExpCSAccess().getLeftParenthesisKeyword_2(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRoundBracketExpCSAccess().getVariable1IteratorVariableCSParserRuleCall_3_0_0(), currentNode); 
	    }
		lv_variable1_4_0=ruleiteratorVariableCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRoundBracketExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"variable1",
	        		lv_variable1_4_0, 
	        		"iteratorVariableCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((	',' 
    {
        createLeafNode(grammarAccess.getRoundBracketExpCSAccess().getCommaKeyword_3_1_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRoundBracketExpCSAccess().getVariable2IteratorVariableCSParserRuleCall_3_1_0_1_0(), currentNode); 
	    }
		lv_variable2_6_0=ruleiteratorVariableCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRoundBracketExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"variable2",
	        		lv_variable2_6_0, 
	        		"iteratorVariableCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	';' 
    {
        createLeafNode(grammarAccess.getRoundBracketExpCSAccess().getSemicolonKeyword_3_1_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRoundBracketExpCSAccess().getVariable2IteratorAccumulatorCSParserRuleCall_3_1_1_1_0(), currentNode); 
	    }
		lv_variable2_8_0=ruleiteratorAccumulatorCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRoundBracketExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"variable2",
	        		lv_variable2_8_0, 
	        		"iteratorAccumulatorCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))?	'|' 
    {
        createLeafNode(grammarAccess.getRoundBracketExpCSAccess().getVerticalLineKeyword_3_2(), null); 
    }
)?((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRoundBracketExpCSAccess().getArgumentsExpCSParserRuleCall_4_0_0(), currentNode); 
	    }
		lv_arguments_10_0=ruleExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRoundBracketExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"arguments",
	        		lv_arguments_10_0, 
	        		"ExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getRoundBracketExpCSAccess().getCommaKeyword_4_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRoundBracketExpCSAccess().getArgumentsExpCSParserRuleCall_4_1_1_0(), currentNode); 
	    }
		lv_arguments_12_0=ruleExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRoundBracketExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"arguments",
	        		lv_arguments_12_0, 
	        		"ExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	')' 
    {
        createLeafNode(grammarAccess.getRoundBracketExpCSAccess().getRightParenthesisKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleSquareBracketExpCS
entryRuleSquareBracketExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSquareBracketExpCSRule(), currentNode); }
	 iv_ruleSquareBracketExpCS=ruleSquareBracketExpCS 
	 { $current=$iv_ruleSquareBracketExpCS.current; } 
	 EOF 
;

// Rule SquareBracketExpCS
ruleSquareBracketExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSquareBracketExpCSAccess().getNameNameExpCSParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=ruleNameExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSquareBracketExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"NameExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'[' 
    {
        createLeafNode(grammarAccess.getSquareBracketExpCSAccess().getLeftSquareBracketKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSquareBracketExpCSAccess().getArgumentsExpCSParserRuleCall_2_0(), currentNode); 
	    }
		lv_arguments_2_0=ruleExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSquareBracketExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"arguments",
	        		lv_arguments_2_0, 
	        		"ExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getSquareBracketExpCSAccess().getCommaKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSquareBracketExpCSAccess().getArgumentsExpCSParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_arguments_4_0=ruleExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSquareBracketExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"arguments",
	        		lv_arguments_4_0, 
	        		"ExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	']' 
    {
        createLeafNode(grammarAccess.getSquareBracketExpCSAccess().getRightSquareBracketKeyword_4(), null); 
    }
(	'@' 
    {
        createLeafNode(grammarAccess.getSquareBracketExpCSAccess().getCommercialAtKeyword_5_0(), null); 
    }
(
(
		lv_pre_7_0=	'pre' 
    {
        createLeafNode(grammarAccess.getSquareBracketExpCSAccess().getPrePreKeyword_5_1_0(), "pre"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSquareBracketExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "pre", true, "pre", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?)
;





// Entry rule entryRulePreExpCS
entryRulePreExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPreExpCSRule(), currentNode); }
	 iv_rulePreExpCS=rulePreExpCS 
	 { $current=$iv_rulePreExpCS.current; } 
	 EOF 
;

// Rule PreExpCS
rulePreExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPreExpCSAccess().getNameNameExpCSParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=ruleNameExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPreExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"NameExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'@' 
    {
        createLeafNode(grammarAccess.getPreExpCSAccess().getCommercialAtKeyword_1(), null); 
    }
	'pre' 
    {
        createLeafNode(grammarAccess.getPreExpCSAccess().getPreKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleSelfExpCS
entryRuleSelfExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSelfExpCSRule(), currentNode); }
	 iv_ruleSelfExpCS=ruleSelfExpCS 
	 { $current=$iv_ruleSelfExpCS.current; } 
	 EOF 
;

// Rule SelfExpCS
ruleSelfExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getSelfExpCSAccess().getSelfExpCSAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getSelfExpCSAccess().getSelfExpCSAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'self' 
    {
        createLeafNode(grammarAccess.getSelfExpCSAccess().getSelfKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleNameExpCS
entryRuleNameExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNameExpCSRule(), currentNode); }
	 iv_ruleNameExpCS=ruleNameExpCS 
	 { $current=$iv_ruleNameExpCS.current; } 
	 EOF 
;

// Rule NameExpCS
ruleNameExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getNameExpCSAccess().getPathNameExpCSParserRuleCall_0(), currentNode); 
    }
    this_PathNameExpCS_0=rulePathNameExpCS
    { 
        $current = $this_PathNameExpCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getNameExpCSAccess().getSimpleNameExpCSParserRuleCall_1(), currentNode); 
    }
    this_SimpleNameExpCS_1=ruleSimpleNameExpCS
    { 
        $current = $this_SimpleNameExpCS_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRulePathNameExpCS
entryRulePathNameExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPathNameExpCSRule(), currentNode); }
	 iv_rulePathNameExpCS=rulePathNameExpCS 
	 { $current=$iv_rulePathNameExpCS.current; } 
	 EOF 
;

// Rule PathNameExpCS
rulePathNameExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getPathNameExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPathNameExpCSAccess().getNamespaceNamespaceCSCrossReference_0_0(), currentNode); 
	    }
		ruleIdentifier		{ 
	        currentNode = currentNode.getParent();
	    }

)
)	'::' 
    {
        createLeafNode(grammarAccess.getPathNameExpCSAccess().getColonColonKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPathNameExpCSAccess().getElementNameExpCSParserRuleCall_2_0(), currentNode); 
	    }
		lv_element_2_0=ruleNameExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPathNameExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"element",
	        		lv_element_2_0, 
	        		"NameExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleSimpleNameExpCS
entryRuleSimpleNameExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSimpleNameExpCSRule(), currentNode); }
	 iv_ruleSimpleNameExpCS=ruleSimpleNameExpCS 
	 { $current=$iv_ruleSimpleNameExpCS.current; } 
	 EOF 
;

// Rule SimpleNameExpCS
ruleSimpleNameExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getSimpleNameExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSimpleNameExpCSAccess().getElementNamedElementCSCrossReference_0(), currentNode); 
	    }
		ruleIdentifier		{ 
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleIfExpCS
entryRuleIfExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIfExpCSRule(), currentNode); }
	 iv_ruleIfExpCS=ruleIfExpCS 
	 { $current=$iv_ruleIfExpCS.current; } 
	 EOF 
;

// Rule IfExpCS
ruleIfExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'if' 
    {
        createLeafNode(grammarAccess.getIfExpCSAccess().getIfKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfExpCSAccess().getConditionExpCSParserRuleCall_1_0(), currentNode); 
	    }
		lv_condition_1_0=ruleExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"condition",
	        		lv_condition_1_0, 
	        		"ExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'then' 
    {
        createLeafNode(grammarAccess.getIfExpCSAccess().getThenKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfExpCSAccess().getThenExpressionExpCSParserRuleCall_3_0(), currentNode); 
	    }
		lv_thenExpression_3_0=ruleExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"thenExpression",
	        		lv_thenExpression_3_0, 
	        		"ExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'else' 
    {
        createLeafNode(grammarAccess.getIfExpCSAccess().getElseKeyword_4(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfExpCSAccess().getElseExpressionExpCSParserRuleCall_5_0(), currentNode); 
	    }
		lv_elseExpression_5_0=ruleExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"elseExpression",
	        		lv_elseExpression_5_0, 
	        		"ExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'endif' 
    {
        createLeafNode(grammarAccess.getIfExpCSAccess().getEndifKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleLetExpCS
entryRuleLetExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLetExpCSRule(), currentNode); }
	 iv_ruleLetExpCS=ruleLetExpCS 
	 { $current=$iv_ruleLetExpCS.current; } 
	 EOF 
;

// Rule LetExpCS
ruleLetExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'let' 
    {
        createLeafNode(grammarAccess.getLetExpCSAccess().getLetKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLetExpCSAccess().getVariableLetVariableCSParserRuleCall_1_0(), currentNode); 
	    }
		lv_variable_1_0=ruleLetVariableCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLetExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"variable",
	        		lv_variable_1_0, 
	        		"LetVariableCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getLetExpCSAccess().getCommaKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLetExpCSAccess().getVariableLetVariableCSParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_variable_3_0=ruleLetVariableCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLetExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"variable",
	        		lv_variable_3_0, 
	        		"LetVariableCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'in' 
    {
        createLeafNode(grammarAccess.getLetExpCSAccess().getInKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLetExpCSAccess().getInExpCSParserRuleCall_4_0(), currentNode); 
	    }
		lv_in_5_0=ruleExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLetExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"in",
	        		lv_in_5_0, 
	        		"ExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleLetVariableCS
entryRuleLetVariableCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLetVariableCSRule(), currentNode); }
	 iv_ruleLetVariableCS=ruleLetVariableCS 
	 { $current=$iv_ruleLetVariableCS.current; } 
	 EOF 
;

// Rule LetVariableCS
ruleLetVariableCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLetVariableCSAccess().getNameSimpleNameParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=ruleSimpleName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLetVariableCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"SimpleName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getLetVariableCSAccess().getColonKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLetVariableCSAccess().getTypeTypeExpCSParserRuleCall_2_0(), currentNode); 
	    }
		lv_type_2_0=ruleTypeExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLetVariableCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"TypeExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'=' 
    {
        createLeafNode(grammarAccess.getLetVariableCSAccess().getEqualsSignKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLetVariableCSAccess().getInitExpressionExpCSParserRuleCall_4_0(), currentNode); 
	    }
		lv_initExpression_4_0=ruleExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLetVariableCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"initExpression",
	        		lv_initExpression_4_0, 
	        		"ExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





RULE_UNQUOTED_STRING : '\u00A3$%^\u00A3$%^';

RULE_DOUBLE_QUOTED_STRING : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"';

RULE_SINGLE_QUOTED_STRING : '\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'';

RULE_ID : (('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*|'_' RULE_SINGLE_QUOTED_STRING);

RULE_INT : ('0'..'9')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '--' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


