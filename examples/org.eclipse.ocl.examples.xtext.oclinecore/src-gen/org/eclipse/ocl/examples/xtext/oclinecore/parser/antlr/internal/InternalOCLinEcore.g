/*
* generated by Xtext
*/
grammar InternalOCLinEcore;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package org.eclipse.ocl.examples.xtext.oclinecore.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.ocl.examples.xtext.oclinecore.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.ocl.examples.xtext.oclinecore.services.OCLinEcoreGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private OCLinEcoreGrammarAccess grammarAccess;
 	
    public InternalOCLinEcoreParser(TokenStream input, IAstFactory factory, OCLinEcoreGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/eclipse/ocl/examples/xtext/oclinecore/parser/antlr/internal/InternalOCLinEcore.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "DocumentCS";	
   	}
   	
   	@Override
   	protected OCLinEcoreGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleDocumentCS
entryRuleDocumentCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDocumentCSRule(), currentNode); }
	 iv_ruleDocumentCS=ruleDocumentCS 
	 { $current=$iv_ruleDocumentCS.current; } 
	 EOF 
;

// Rule DocumentCS
ruleDocumentCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDocumentCSAccess().getImportsImportCSParserRuleCall_0_0(), currentNode); 
	    }
		lv_imports_0_0=ruleImportCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDocumentCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"imports",
	        		lv_imports_0_0, 
	        		"ImportCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDocumentCSAccess().getPackagesPackageCSParserRuleCall_1_0(), currentNode); 
	    }
		lv_packages_1_0=rulePackageCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDocumentCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"packages",
	        		lv_packages_1_0, 
	        		"PackageCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;







// Entry rule entryRuleINTEGER
entryRuleINTEGER returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getINTEGERRule(), currentNode); } 
	 iv_ruleINTEGER=ruleINTEGER 
	 { $current=$iv_ruleINTEGER.current.getText(); }  
	 EOF 
;

// Rule INTEGER
ruleINTEGER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    createLeafNode(grammarAccess.getINTEGERAccess().getINTTerminalRuleCall(), null); 
    }

    ;





// Entry rule entryRuleLOWER
entryRuleLOWER returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLOWERRule(), currentNode); } 
	 iv_ruleLOWER=ruleLOWER 
	 { $current=$iv_ruleLOWER.current.getText(); }  
	 EOF 
;

// Rule LOWER
ruleLOWER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    createLeafNode(grammarAccess.getLOWERAccess().getINTTerminalRuleCall(), null); 
    }

    ;





// Entry rule entryRuleUPPER
entryRuleUPPER returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUPPERRule(), currentNode); } 
	 iv_ruleUPPER=ruleUPPER 
	 { $current=$iv_ruleUPPER.current.getText(); }  
	 EOF 
;

// Rule UPPER
ruleUPPER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    createLeafNode(grammarAccess.getUPPERAccess().getINTTerminalRuleCall_0(), null); 
    }

    |
	kw='*' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUPPERAccess().getAsteriskKeyword_1(), null); 
    }
)
    ;





// Entry rule entryRuleRestrictedKeywords
entryRuleRestrictedKeywords returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRestrictedKeywordsRule(), currentNode); } 
	 iv_ruleRestrictedKeywords=ruleRestrictedKeywords 
	 { $current=$iv_ruleRestrictedKeywords.current.getText(); }  
	 EOF 
;

// Rule RestrictedKeywords
ruleRestrictedKeywords returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='abstract' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getAbstractKeyword_0(), null); 
    }

    |
	kw='attribute' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getAttributeKeyword_1(), null); 
    }

    |
	kw='body' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getBodyKeyword_2(), null); 
    }

    |
	kw='class' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getClassKeyword_3(), null); 
    }

    |
	kw='enum' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getEnumKeyword_4(), null); 
    }

    |
	kw='extends' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getExtendsKeyword_5(), null); 
    }

    |
	kw='id' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getIdKeyword_6(), null); 
    }

    |
	kw='import' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getImportKeyword_7(), null); 
    }

    |
	kw='interface' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getInterfaceKeyword_8(), null); 
    }

    |
	kw='invariant' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getInvariantKeyword_9(), null); 
    }

    |
	kw='operation' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getOperationKeyword_10(), null); 
    }

    |
	kw='ordered' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getOrderedKeyword_11(), null); 
    }

    |
	kw='package' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getPackageKeyword_12(), null); 
    }

    |
	kw='property' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getPropertyKeyword_13(), null); 
    }

    |
	kw='serializable' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getSerializableKeyword_14(), null); 
    }

    |
	kw='transient' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getTransientKeyword_15(), null); 
    }

    |
	kw='unique' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getUniqueKeyword_16(), null); 
    }

    |
	kw='volatile' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRestrictedKeywordsAccess().getVolatileKeyword_17(), null); 
    }
)
    ;





// Entry rule entryRuleIdentifier
entryRuleIdentifier returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIdentifierRule(), currentNode); } 
	 iv_ruleIdentifier=ruleIdentifier 
	 { $current=$iv_ruleIdentifier.current.getText(); }  
	 EOF 
;

// Rule Identifier
ruleIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_ID_TERMINAL_0=RULE_ID_TERMINAL    {
		$current.merge(this_ID_TERMINAL_0);
    }

    { 
    createLeafNode(grammarAccess.getIdentifierAccess().getID_TERMINALTerminalRuleCall_0(), null); 
    }

    |
	kw='e' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getIdentifierAccess().getEKeyword_1(), null); 
    }

    |
	kw='E' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getIdentifierAccess().getEKeyword_2(), null); 
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getIdentifierAccess().getRestrictedKeywordsParserRuleCall_3(), currentNode); 
    }
    this_RestrictedKeywords_3=ruleRestrictedKeywords    {
		$current.merge(this_RestrictedKeywords_3);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRuleBodyConstraintCS
entryRuleBodyConstraintCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBodyConstraintCSRule(), currentNode); }
	 iv_ruleBodyConstraintCS=ruleBodyConstraintCS 
	 { $current=$iv_ruleBodyConstraintCS.current; } 
	 EOF 
;

// Rule BodyConstraintCS
ruleBodyConstraintCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_stereotype_0_0=	'body' 
    {
        createLeafNode(grammarAccess.getBodyConstraintCSAccess().getStereotypeBodyKeyword_0_0(), "stereotype"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBodyConstraintCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "stereotype", lv_stereotype_0_0, "body", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBodyConstraintCSAccess().getNameIdentifierParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBodyConstraintCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	':' 
    {
        createLeafNode(grammarAccess.getBodyConstraintCSAccess().getColonKeyword_2(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBodyConstraintCSAccess().getExprValueOclExpressionCSParserRuleCall_3_0_0(), currentNode); 
	    }
		lv_exprValue_3_0=ruleOclExpressionCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBodyConstraintCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exprValue",
	        		lv_exprValue_3_0, 
	        		"OclExpressionCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		lv_exprString_4_0=RULE_URL
		{
			createLeafNode(grammarAccess.getBodyConstraintCSAccess().getExprStringURLTerminalRuleCall_3_1_0(), "exprString"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBodyConstraintCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exprString",
	        		lv_exprString_4_0, 
	        		"URL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?	';' 
    {
        createLeafNode(grammarAccess.getBodyConstraintCSAccess().getSemicolonKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleDerivedConstraintCS
entryRuleDerivedConstraintCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDerivedConstraintCSRule(), currentNode); }
	 iv_ruleDerivedConstraintCS=ruleDerivedConstraintCS 
	 { $current=$iv_ruleDerivedConstraintCS.current; } 
	 EOF 
;

// Rule DerivedConstraintCS
ruleDerivedConstraintCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_stereotype_0_0=	'derivation' 
    {
        createLeafNode(grammarAccess.getDerivedConstraintCSAccess().getStereotypeDerivationKeyword_0_0(), "stereotype"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDerivedConstraintCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "stereotype", lv_stereotype_0_0, "derivation", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getDerivedConstraintCSAccess().getColonKeyword_1(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDerivedConstraintCSAccess().getExprValueOclExpressionCSParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_exprValue_2_0=ruleOclExpressionCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDerivedConstraintCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exprValue",
	        		lv_exprValue_2_0, 
	        		"OclExpressionCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		lv_exprString_3_0=RULE_URL
		{
			createLeafNode(grammarAccess.getDerivedConstraintCSAccess().getExprStringURLTerminalRuleCall_2_1_0(), "exprString"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDerivedConstraintCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exprString",
	        		lv_exprString_3_0, 
	        		"URL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?	';' 
    {
        createLeafNode(grammarAccess.getDerivedConstraintCSAccess().getSemicolonKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleInitialConstraintCS
entryRuleInitialConstraintCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInitialConstraintCSRule(), currentNode); }
	 iv_ruleInitialConstraintCS=ruleInitialConstraintCS 
	 { $current=$iv_ruleInitialConstraintCS.current; } 
	 EOF 
;

// Rule InitialConstraintCS
ruleInitialConstraintCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_stereotype_0_0=	'initial' 
    {
        createLeafNode(grammarAccess.getInitialConstraintCSAccess().getStereotypeInitialKeyword_0_0(), "stereotype"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInitialConstraintCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "stereotype", lv_stereotype_0_0, "initial", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getInitialConstraintCSAccess().getColonKeyword_1(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInitialConstraintCSAccess().getExprValueOclExpressionCSParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_exprValue_2_0=ruleOclExpressionCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInitialConstraintCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exprValue",
	        		lv_exprValue_2_0, 
	        		"OclExpressionCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		lv_exprString_3_0=RULE_URL
		{
			createLeafNode(grammarAccess.getInitialConstraintCSAccess().getExprStringURLTerminalRuleCall_2_1_0(), "exprString"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInitialConstraintCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exprString",
	        		lv_exprString_3_0, 
	        		"URL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?	';' 
    {
        createLeafNode(grammarAccess.getInitialConstraintCSAccess().getSemicolonKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleInvariantConstraintCS
entryRuleInvariantConstraintCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInvariantConstraintCSRule(), currentNode); }
	 iv_ruleInvariantConstraintCS=ruleInvariantConstraintCS 
	 { $current=$iv_ruleInvariantConstraintCS.current; } 
	 EOF 
;

// Rule InvariantConstraintCS
ruleInvariantConstraintCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_stereotype_0_0=	'invariant' 
    {
        createLeafNode(grammarAccess.getInvariantConstraintCSAccess().getStereotypeInvariantKeyword_0_0(), "stereotype"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInvariantConstraintCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "stereotype", lv_stereotype_0_0, "invariant", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInvariantConstraintCSAccess().getNameIdentifierParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInvariantConstraintCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	':' 
    {
        createLeafNode(grammarAccess.getInvariantConstraintCSAccess().getColonKeyword_2(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInvariantConstraintCSAccess().getExprValueOclExpressionCSParserRuleCall_3_0_0(), currentNode); 
	    }
		lv_exprValue_3_0=ruleOclExpressionCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInvariantConstraintCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exprValue",
	        		lv_exprValue_3_0, 
	        		"OclExpressionCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		lv_exprString_4_0=RULE_URL
		{
			createLeafNode(grammarAccess.getInvariantConstraintCSAccess().getExprStringURLTerminalRuleCall_3_1_0(), "exprString"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInvariantConstraintCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exprString",
	        		lv_exprString_4_0, 
	        		"URL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?	';' 
    {
        createLeafNode(grammarAccess.getInvariantConstraintCSAccess().getSemicolonKeyword_4(), null); 
    }
)
;





// Entry rule entryRulePostconditionConstraintCS
entryRulePostconditionConstraintCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPostconditionConstraintCSRule(), currentNode); }
	 iv_rulePostconditionConstraintCS=rulePostconditionConstraintCS 
	 { $current=$iv_rulePostconditionConstraintCS.current; } 
	 EOF 
;

// Rule PostconditionConstraintCS
rulePostconditionConstraintCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_stereotype_0_0=	'postcondition' 
    {
        createLeafNode(grammarAccess.getPostconditionConstraintCSAccess().getStereotypePostconditionKeyword_0_0(), "stereotype"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPostconditionConstraintCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "stereotype", lv_stereotype_0_0, "postcondition", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPostconditionConstraintCSAccess().getNameIdentifierParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPostconditionConstraintCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	':' 
    {
        createLeafNode(grammarAccess.getPostconditionConstraintCSAccess().getColonKeyword_2(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPostconditionConstraintCSAccess().getExprValueOclExpressionCSParserRuleCall_3_0_0(), currentNode); 
	    }
		lv_exprValue_3_0=ruleOclExpressionCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPostconditionConstraintCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exprValue",
	        		lv_exprValue_3_0, 
	        		"OclExpressionCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		lv_exprString_4_0=RULE_URL
		{
			createLeafNode(grammarAccess.getPostconditionConstraintCSAccess().getExprStringURLTerminalRuleCall_3_1_0(), "exprString"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPostconditionConstraintCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exprString",
	        		lv_exprString_4_0, 
	        		"URL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?	';' 
    {
        createLeafNode(grammarAccess.getPostconditionConstraintCSAccess().getSemicolonKeyword_4(), null); 
    }
)
;





// Entry rule entryRulePreconditionConstraintCS
entryRulePreconditionConstraintCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPreconditionConstraintCSRule(), currentNode); }
	 iv_rulePreconditionConstraintCS=rulePreconditionConstraintCS 
	 { $current=$iv_rulePreconditionConstraintCS.current; } 
	 EOF 
;

// Rule PreconditionConstraintCS
rulePreconditionConstraintCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_stereotype_0_0=	'precondition' 
    {
        createLeafNode(grammarAccess.getPreconditionConstraintCSAccess().getStereotypePreconditionKeyword_0_0(), "stereotype"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPreconditionConstraintCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "stereotype", lv_stereotype_0_0, "precondition", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPreconditionConstraintCSAccess().getNameIdentifierParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPreconditionConstraintCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	':' 
    {
        createLeafNode(grammarAccess.getPreconditionConstraintCSAccess().getColonKeyword_2(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPreconditionConstraintCSAccess().getExprValueOclExpressionCSParserRuleCall_3_0_0(), currentNode); 
	    }
		lv_exprValue_3_0=ruleOclExpressionCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPreconditionConstraintCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exprValue",
	        		lv_exprValue_3_0, 
	        		"OclExpressionCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		lv_exprString_4_0=RULE_URL
		{
			createLeafNode(grammarAccess.getPreconditionConstraintCSAccess().getExprStringURLTerminalRuleCall_3_1_0(), "exprString"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPreconditionConstraintCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exprString",
	        		lv_exprString_4_0, 
	        		"URL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?	';' 
    {
        createLeafNode(grammarAccess.getPreconditionConstraintCSAccess().getSemicolonKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleEClassRef
entryRuleEClassRef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEClassRefRule(), currentNode); }
	 iv_ruleEClassRef=ruleEClassRef 
	 { $current=$iv_ruleEClassRef.current; } 
	 EOF 
;

// Rule EClassRef
ruleEClassRef returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getEClassRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEClassRefAccess().getRefEClassCrossReference_0(), currentNode); 
	    }
		ruleIdentifier		{ 
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleEClassifierRef
entryRuleEClassifierRef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEClassifierRefRule(), currentNode); }
	 iv_ruleEClassifierRef=ruleEClassifierRef 
	 { $current=$iv_ruleEClassifierRef.current; } 
	 EOF 
;

// Rule EClassifierRef
ruleEClassifierRef returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getEClassifierRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEClassifierRefAccess().getRefEClassifierCrossReference_0(), currentNode); 
	    }
		ruleIdentifier		{ 
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleEDataTypeRef
entryRuleEDataTypeRef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEDataTypeRefRule(), currentNode); }
	 iv_ruleEDataTypeRef=ruleEDataTypeRef 
	 { $current=$iv_ruleEDataTypeRef.current; } 
	 EOF 
;

// Rule EDataTypeRef
ruleEDataTypeRef returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getEDataTypeRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEDataTypeRefAccess().getRefEDataTypeCrossReference_0(), currentNode); 
	    }
		ruleIdentifier		{ 
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleEReferenceRef
entryRuleEReferenceRef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEReferenceRefRule(), currentNode); }
	 iv_ruleEReferenceRef=ruleEReferenceRef 
	 { $current=$iv_ruleEReferenceRef.current; } 
	 EOF 
;

// Rule EReferenceRef
ruleEReferenceRef returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getEReferenceRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEReferenceRefAccess().getRefEReferenceCrossReference_0(), currentNode); 
	    }
		ruleIdentifier		{ 
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleAnnotationCS
entryRuleAnnotationCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAnnotationCSRule(), currentNode); }
	 iv_ruleAnnotationCS=ruleAnnotationCS 
	 { $current=$iv_ruleAnnotationCS.current; } 
	 EOF 
;

// Rule AnnotationCS
ruleAnnotationCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'annotation' 
    {
        createLeafNode(grammarAccess.getAnnotationCSAccess().getAnnotationKeyword_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAnnotationCSAccess().getIdSourceIdentifierParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_idSource_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnnotationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"idSource",
	        		lv_idSource_1_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		lv_stringSource_2_0=RULE_URL
		{
			createLeafNode(grammarAccess.getAnnotationCSAccess().getStringSourceURLTerminalRuleCall_1_1_0(), "stringSource"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnnotationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"stringSource",
	        		lv_stringSource_2_0, 
	        		"URL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))(	'(' 
    {
        createLeafNode(grammarAccess.getAnnotationCSAccess().getLeftParenthesisKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAnnotationCSAccess().getDetailsDetailCSParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_details_4_0=ruleDetailCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnnotationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"details",
	        		lv_details_4_0, 
	        		"DetailCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getAnnotationCSAccess().getCommaKeyword_2_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAnnotationCSAccess().getDetailsDetailCSParserRuleCall_2_2_1_0(), currentNode); 
	    }
		lv_details_6_0=ruleDetailCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnnotationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"details",
	        		lv_details_6_0, 
	        		"DetailCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	')' 
    {
        createLeafNode(grammarAccess.getAnnotationCSAccess().getRightParenthesisKeyword_2_3(), null); 
    }
)?((	'{' 
    {
        createLeafNode(grammarAccess.getAnnotationCSAccess().getLeftCurlyBracketKeyword_3_0_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAnnotationCSAccess().getAnnotationsAnnotationElementCSParserRuleCall_3_0_1_0_0(), currentNode); 
	    }
		lv_annotations_9_0=ruleAnnotationElementCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnnotationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_9_0, 
	        		"AnnotationElementCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAnnotationCSAccess().getContentsModelElementCSParserRuleCall_3_0_1_1_0(), currentNode); 
	    }
		lv_contents_10_0=ruleModelElementCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnnotationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"contents",
	        		lv_contents_10_0, 
	        		"ModelElementCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAnnotationCSAccess().getReferencesObjectRefParserRuleCall_3_0_1_2_0(), currentNode); 
	    }
		lv_references_11_0=ruleObjectRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnnotationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"references",
	        		lv_references_11_0, 
	        		"ObjectRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))+	'}' 
    {
        createLeafNode(grammarAccess.getAnnotationCSAccess().getRightCurlyBracketKeyword_3_0_2(), null); 
    }
)
    |	';' 
    {
        createLeafNode(grammarAccess.getAnnotationCSAccess().getSemicolonKeyword_3_1(), null); 
    }
))
;





// Entry rule entryRuleAnnotationElementCS
entryRuleAnnotationElementCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAnnotationElementCSRule(), currentNode); }
	 iv_ruleAnnotationElementCS=ruleAnnotationElementCS 
	 { $current=$iv_ruleAnnotationElementCS.current; } 
	 EOF 
;

// Rule AnnotationElementCS
ruleAnnotationElementCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAnnotationElementCSAccess().getAnnotationCSParserRuleCall_0(), currentNode); 
    }
    this_AnnotationCS_0=ruleAnnotationCS
    { 
        $current = $this_AnnotationCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAnnotationElementCSAccess().getDocumentationCSParserRuleCall_1(), currentNode); 
    }
    this_DocumentationCS_1=ruleDocumentationCS
    { 
        $current = $this_DocumentationCS_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleAttributeCS
entryRuleAttributeCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAttributeCSRule(), currentNode); }
	 iv_ruleAttributeCS=ruleAttributeCS 
	 { $current=$iv_ruleAttributeCS.current; } 
	 EOF 
;

// Rule AttributeCS
ruleAttributeCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'attribute' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getAttributeKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAttributeCSAccess().getNameIdentifierParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	':' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getColonKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAttributeCSAccess().getTypeTypeRefCSParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_type_3_0=ruleTypeRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_3_0, 
	        		"TypeRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'[' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getLeftSquareBracketKeyword_2_2_0(), null); 
    }
(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAttributeCSAccess().getLowerLOWERParserRuleCall_2_2_1_0_0_0(), currentNode); 
	    }
		lv_lower_5_0=ruleLOWER		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"lower",
	        		lv_lower_5_0, 
	        		"LOWER", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'..' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getFullStopFullStopKeyword_2_2_1_0_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAttributeCSAccess().getUpperUPPERParserRuleCall_2_2_1_0_1_1_0(), currentNode); 
	    }
		lv_upper_7_0=ruleUPPER		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"upper",
	        		lv_upper_7_0, 
	        		"UPPER", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
    |(
(
(
		lv_multiplicity_8_1=	'*' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getMultiplicityAsteriskKeyword_2_2_1_1_0_0(), "multiplicity"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "multiplicity", lv_multiplicity_8_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_multiplicity_8_2=	'+' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getMultiplicityPlusSignKeyword_2_2_1_1_0_1(), "multiplicity"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "multiplicity", lv_multiplicity_8_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_multiplicity_8_3=	'?' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getMultiplicityQuestionMarkKeyword_2_2_1_1_0_2(), "multiplicity"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "multiplicity", lv_multiplicity_8_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
))	']' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getRightSquareBracketKeyword_2_2_2(), null); 
    }
)?)?(	'=' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getEqualsSignKeyword_3_0(), null); 
    }
(
(
		lv_defaultValueLiteral_11_0=RULE_URL
		{
			createLeafNode(grammarAccess.getAttributeCSAccess().getDefaultValueLiteralURLTerminalRuleCall_3_1_0(), "defaultValueLiteral"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"defaultValueLiteral",
	        		lv_defaultValueLiteral_11_0, 
	        		"URL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(	'{' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getLeftCurlyBracketKeyword_4_0(), null); 
    }
(
(
(
		lv_qualifiers_13_1=	'api' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersApiKeyword_4_1_0_0(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_13_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_13_2=	'!api' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersApiKeyword_4_1_0_1(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_13_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_13_3=	'derived' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersDerivedKeyword_4_1_0_2(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_13_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_13_4=	'!derived' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersDerivedKeyword_4_1_0_3(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_13_4, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_13_5=	'id' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersIdKeyword_4_1_0_4(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_13_5, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_13_6=	'!id' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersIdKeyword_4_1_0_5(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_13_6, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_13_7=	'ordered' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersOrderedKeyword_4_1_0_6(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_13_7, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_13_8=	'!ordered' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersOrderedKeyword_4_1_0_7(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_13_8, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_13_9=	'readonly' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersReadonlyKeyword_4_1_0_8(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_13_9, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_13_10=	'!readonly' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersReadonlyKeyword_4_1_0_9(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_13_10, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_13_11=	'transient' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersTransientKeyword_4_1_0_10(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_13_11, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_13_12=	'!transient' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersTransientKeyword_4_1_0_11(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_13_12, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_13_13=	'unique' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersUniqueKeyword_4_1_0_12(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_13_13, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_13_14=	'!unique' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersUniqueKeyword_4_1_0_13(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_13_14, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_13_15=	'unsettable' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersUnsettableKeyword_4_1_0_14(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_13_15, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_13_16=	'!unsettable' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersUnsettableKeyword_4_1_0_15(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_13_16, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_13_17=	'volatile' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersVolatileKeyword_4_1_0_16(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_13_17, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_13_18=	'!volatile' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersVolatileKeyword_4_1_0_17(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_13_18, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(	',' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getCommaKeyword_4_2_0(), null); 
    }
(
(
(
		lv_qualifiers_15_1=	'api' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersApiKeyword_4_2_1_0_0(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_2=	'!api' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersApiKeyword_4_2_1_0_1(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_3=	'derived' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersDerivedKeyword_4_2_1_0_2(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_4=	'!derived' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersDerivedKeyword_4_2_1_0_3(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_4, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_5=	'id' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersIdKeyword_4_2_1_0_4(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_5, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_6=	'!id' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersIdKeyword_4_2_1_0_5(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_6, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_7=	'ordered' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersOrderedKeyword_4_2_1_0_6(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_7, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_8=	'!ordered' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersOrderedKeyword_4_2_1_0_7(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_8, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_9=	'readonly' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersReadonlyKeyword_4_2_1_0_8(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_9, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_10=	'!readonly' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersReadonlyKeyword_4_2_1_0_9(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_10, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_11=	'transient' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersTransientKeyword_4_2_1_0_10(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_11, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_12=	'!transient' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersTransientKeyword_4_2_1_0_11(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_12, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_13=	'unique' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersUniqueKeyword_4_2_1_0_12(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_13, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_14=	'!unique' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersUniqueKeyword_4_2_1_0_13(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_14, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_15=	'unsettable' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersUnsettableKeyword_4_2_1_0_14(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_15, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_16=	'!unsettable' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersUnsettableKeyword_4_2_1_0_15(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_16, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_17=	'volatile' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersVolatileKeyword_4_2_1_0_16(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_17, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_18=	'!volatile' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getQualifiersVolatileKeyword_4_2_1_0_17(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_18, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getRightCurlyBracketKeyword_4_3(), null); 
    }
)?((	'{' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getLeftCurlyBracketKeyword_5_0_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAttributeCSAccess().getAnnotationsAnnotationElementCSParserRuleCall_5_0_1_0_0(), currentNode); 
	    }
		lv_annotations_18_0=ruleAnnotationElementCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_18_0, 
	        		"AnnotationElementCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAttributeCSAccess().getConstraintsInitialConstraintCSParserRuleCall_5_0_1_1_0_0(), currentNode); 
	    }
		lv_constraints_19_1=ruleInitialConstraintCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"constraints",
	        		lv_constraints_19_1, 
	        		"InitialConstraintCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getAttributeCSAccess().getConstraintsDerivedConstraintCSParserRuleCall_5_0_1_1_0_1(), currentNode); 
	    }
		lv_constraints_19_2=ruleDerivedConstraintCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"constraints",
	        		lv_constraints_19_2, 
	        		"DerivedConstraintCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getRightCurlyBracketKeyword_5_0_2(), null); 
    }
)
    |	';' 
    {
        createLeafNode(grammarAccess.getAttributeCSAccess().getSemicolonKeyword_5_1(), null); 
    }
))
;





// Entry rule entryRuleClassCS
entryRuleClassCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getClassCSRule(), currentNode); }
	 iv_ruleClassCS=ruleClassCS 
	 { $current=$iv_ruleClassCS.current; } 
	 EOF 
;

// Rule ClassCS
ruleClassCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'class' 
    {
        createLeafNode(grammarAccess.getClassCSAccess().getClassKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassCSAccess().getNameIdentifierParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'<' 
    {
        createLeafNode(grammarAccess.getClassCSAccess().getLessThanSignKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassCSAccess().getTypeParametersTypeParameterCSParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_typeParameters_3_0=ruleTypeParameterCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"typeParameters",
	        		lv_typeParameters_3_0, 
	        		"TypeParameterCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getClassCSAccess().getCommaKeyword_2_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassCSAccess().getTypeParametersTypeParameterCSParserRuleCall_2_2_1_0(), currentNode); 
	    }
		lv_typeParameters_5_0=ruleTypeParameterCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"typeParameters",
	        		lv_typeParameters_5_0, 
	        		"TypeParameterCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'>' 
    {
        createLeafNode(grammarAccess.getClassCSAccess().getGreaterThanSignKeyword_2_3(), null); 
    }
)?(	'extends' 
    {
        createLeafNode(grammarAccess.getClassCSAccess().getExtendsKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassCSAccess().getSuperTypesTypeRefCSParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_superTypes_8_0=ruleTypeRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"superTypes",
	        		lv_superTypes_8_0, 
	        		"TypeRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getClassCSAccess().getCommaKeyword_3_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassCSAccess().getSuperTypesTypeRefCSParserRuleCall_3_2_1_0(), currentNode); 
	    }
		lv_superTypes_10_0=ruleTypeRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"superTypes",
	        		lv_superTypes_10_0, 
	        		"TypeRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?(	':' 
    {
        createLeafNode(grammarAccess.getClassCSAccess().getColonKeyword_4_0(), null); 
    }
(
(
		lv_instanceClassName_12_0=RULE_URL
		{
			createLeafNode(grammarAccess.getClassCSAccess().getInstanceClassNameURLTerminalRuleCall_4_1_0(), "instanceClassName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"instanceClassName",
	        		lv_instanceClassName_12_0, 
	        		"URL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(	'{' 
    {
        createLeafNode(grammarAccess.getClassCSAccess().getLeftCurlyBracketKeyword_5_0(), null); 
    }
(
(
(
		lv_qualifiers_14_1=	'abstract' 
    {
        createLeafNode(grammarAccess.getClassCSAccess().getQualifiersAbstractKeyword_5_1_0_0(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_14_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_14_2=	'!abstract' 
    {
        createLeafNode(grammarAccess.getClassCSAccess().getQualifiersAbstractKeyword_5_1_0_1(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_14_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_14_3=	'interface' 
    {
        createLeafNode(grammarAccess.getClassCSAccess().getQualifiersInterfaceKeyword_5_1_0_2(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_14_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_14_4=	'!interface' 
    {
        createLeafNode(grammarAccess.getClassCSAccess().getQualifiersInterfaceKeyword_5_1_0_3(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_14_4, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(	',' 
    {
        createLeafNode(grammarAccess.getClassCSAccess().getCommaKeyword_5_2_0(), null); 
    }
(
(
(
		lv_qualifiers_16_1=	'abstract' 
    {
        createLeafNode(grammarAccess.getClassCSAccess().getQualifiersAbstractKeyword_5_2_1_0_0(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_16_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_16_2=	'!abstract' 
    {
        createLeafNode(grammarAccess.getClassCSAccess().getQualifiersAbstractKeyword_5_2_1_0_1(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_16_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_16_3=	'interface' 
    {
        createLeafNode(grammarAccess.getClassCSAccess().getQualifiersInterfaceKeyword_5_2_1_0_2(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_16_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_16_4=	'!interface' 
    {
        createLeafNode(grammarAccess.getClassCSAccess().getQualifiersInterfaceKeyword_5_2_1_0_3(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_16_4, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getClassCSAccess().getRightCurlyBracketKeyword_5_3(), null); 
    }
)?((	'{' 
    {
        createLeafNode(grammarAccess.getClassCSAccess().getLeftCurlyBracketKeyword_6_0_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassCSAccess().getAnnotationsAnnotationElementCSParserRuleCall_6_0_1_0_0(), currentNode); 
	    }
		lv_annotations_19_0=ruleAnnotationElementCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_19_0, 
	        		"AnnotationElementCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassCSAccess().getOperationsOperationCSParserRuleCall_6_0_1_1_0(), currentNode); 
	    }
		lv_operations_20_0=ruleOperationCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operations",
	        		lv_operations_20_0, 
	        		"OperationCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassCSAccess().getStructuralFeaturesStructuralFeatureCSParserRuleCall_6_0_1_2_0(), currentNode); 
	    }
		lv_structuralFeatures_21_0=ruleStructuralFeatureCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"structuralFeatures",
	        		lv_structuralFeatures_21_0, 
	        		"StructuralFeatureCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassCSAccess().getConstraintsInvariantConstraintCSParserRuleCall_6_0_1_3_0(), currentNode); 
	    }
		lv_constraints_22_0=ruleInvariantConstraintCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"constraints",
	        		lv_constraints_22_0, 
	        		"InvariantConstraintCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getClassCSAccess().getRightCurlyBracketKeyword_6_0_2(), null); 
    }
)
    |	';' 
    {
        createLeafNode(grammarAccess.getClassCSAccess().getSemicolonKeyword_6_1(), null); 
    }
))
;







// Entry rule entryRuleClassCSRef
entryRuleClassCSRef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getClassCSRefRule(), currentNode); }
	 iv_ruleClassCSRef=ruleClassCSRef 
	 { $current=$iv_ruleClassCSRef.current; } 
	 EOF 
;

// Rule ClassCSRef
ruleClassCSRef returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getClassCSRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassCSRefAccess().getRefClassCSCrossReference_0(), currentNode); 
	    }
		ruleIdentifier		{ 
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleClassifierCS
entryRuleClassifierCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getClassifierCSRule(), currentNode); }
	 iv_ruleClassifierCS=ruleClassifierCS 
	 { $current=$iv_ruleClassifierCS.current; } 
	 EOF 
;

// Rule ClassifierCS
ruleClassifierCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getClassifierCSAccess().getClassCSParserRuleCall_0(), currentNode); 
    }
    this_ClassCS_0=ruleClassCS
    { 
        $current = $this_ClassCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getClassifierCSAccess().getDataTypeCSParserRuleCall_1(), currentNode); 
    }
    this_DataTypeCS_1=ruleDataTypeCS
    { 
        $current = $this_DataTypeCS_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getClassifierCSAccess().getEnumCSParserRuleCall_2(), currentNode); 
    }
    this_EnumCS_2=ruleEnumCS
    { 
        $current = $this_EnumCS_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleDataTypeCS
entryRuleDataTypeCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDataTypeCSRule(), currentNode); }
	 iv_ruleDataTypeCS=ruleDataTypeCS 
	 { $current=$iv_ruleDataTypeCS.current; } 
	 EOF 
;

// Rule DataTypeCS
ruleDataTypeCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'datatype' 
    {
        createLeafNode(grammarAccess.getDataTypeCSAccess().getDatatypeKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDataTypeCSAccess().getNameIdentifierParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'<' 
    {
        createLeafNode(grammarAccess.getDataTypeCSAccess().getLessThanSignKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDataTypeCSAccess().getTypeParametersTypeParameterCSParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_typeParameters_3_0=ruleTypeParameterCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"typeParameters",
	        		lv_typeParameters_3_0, 
	        		"TypeParameterCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getDataTypeCSAccess().getCommaKeyword_2_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDataTypeCSAccess().getTypeParametersTypeParameterCSParserRuleCall_2_2_1_0(), currentNode); 
	    }
		lv_typeParameters_5_0=ruleTypeParameterCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"typeParameters",
	        		lv_typeParameters_5_0, 
	        		"TypeParameterCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'>' 
    {
        createLeafNode(grammarAccess.getDataTypeCSAccess().getGreaterThanSignKeyword_2_3(), null); 
    }
)?(	':' 
    {
        createLeafNode(grammarAccess.getDataTypeCSAccess().getColonKeyword_3_0(), null); 
    }
(
(
		lv_instanceClassName_8_0=RULE_URL
		{
			createLeafNode(grammarAccess.getDataTypeCSAccess().getInstanceClassNameURLTerminalRuleCall_3_1_0(), "instanceClassName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"instanceClassName",
	        		lv_instanceClassName_8_0, 
	        		"URL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(	'{' 
    {
        createLeafNode(grammarAccess.getDataTypeCSAccess().getLeftCurlyBracketKeyword_4_0(), null); 
    }
(
(
(
		lv_qualifiers_10_1=	'serializable' 
    {
        createLeafNode(grammarAccess.getDataTypeCSAccess().getQualifiersSerializableKeyword_4_1_0_0(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_10_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_10_2=	'!serializable' 
    {
        createLeafNode(grammarAccess.getDataTypeCSAccess().getQualifiersSerializableKeyword_4_1_0_1(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_10_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)	'}' 
    {
        createLeafNode(grammarAccess.getDataTypeCSAccess().getRightCurlyBracketKeyword_4_2(), null); 
    }
)?((	'{' 
    {
        createLeafNode(grammarAccess.getDataTypeCSAccess().getLeftCurlyBracketKeyword_5_0_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDataTypeCSAccess().getAnnotationsAnnotationElementCSParserRuleCall_5_0_1_0_0(), currentNode); 
	    }
		lv_annotations_13_0=ruleAnnotationElementCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_13_0, 
	        		"AnnotationElementCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDataTypeCSAccess().getConstraintsInvariantConstraintCSParserRuleCall_5_0_1_1_0(), currentNode); 
	    }
		lv_constraints_14_0=ruleInvariantConstraintCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"constraints",
	        		lv_constraints_14_0, 
	        		"InvariantConstraintCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getDataTypeCSAccess().getRightCurlyBracketKeyword_5_0_2(), null); 
    }
)
    |	';' 
    {
        createLeafNode(grammarAccess.getDataTypeCSAccess().getSemicolonKeyword_5_1(), null); 
    }
))
;







// Entry rule entryRuleDataTypeCSRef
entryRuleDataTypeCSRef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDataTypeCSRefRule(), currentNode); }
	 iv_ruleDataTypeCSRef=ruleDataTypeCSRef 
	 { $current=$iv_ruleDataTypeCSRef.current; } 
	 EOF 
;

// Rule DataTypeCSRef
ruleDataTypeCSRef returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getDataTypeCSRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDataTypeCSRefAccess().getRefDataTypeOrEnumCSCrossReference_0(), currentNode); 
	    }
		ruleIdentifier		{ 
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleDetailCS
entryRuleDetailCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDetailCSRule(), currentNode); }
	 iv_ruleDetailCS=ruleDetailCS 
	 { $current=$iv_ruleDetailCS.current; } 
	 EOF 
;

// Rule DetailCS
ruleDetailCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDetailCSAccess().getIdNameIdentifierParserRuleCall_0_0_0(), currentNode); 
	    }
		lv_idName_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDetailCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"idName",
	        		lv_idName_0_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		lv_stringName_1_0=RULE_URL
		{
			createLeafNode(grammarAccess.getDetailCSAccess().getStringNameURLTerminalRuleCall_0_1_0(), "stringName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDetailCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"stringName",
	        		lv_stringName_1_0, 
	        		"URL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))	'=' 
    {
        createLeafNode(grammarAccess.getDetailCSAccess().getEqualsSignKeyword_1(), null); 
    }
(
(
		lv_value_3_0=RULE_STRING_LITERAL
		{
			createLeafNode(grammarAccess.getDetailCSAccess().getValueSTRING_LITERALTerminalRuleCall_2_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDetailCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_3_0, 
	        		"STRING_LITERAL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleDocumentationCS
entryRuleDocumentationCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDocumentationCSRule(), currentNode); }
	 iv_ruleDocumentationCS=ruleDocumentationCS 
	 { $current=$iv_ruleDocumentationCS.current; } 
	 EOF 
;

// Rule DocumentationCS
ruleDocumentationCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getDocumentationCSAccess().getDocumentationCSAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getDocumentationCSAccess().getDocumentationCSAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'documentation' 
    {
        createLeafNode(grammarAccess.getDocumentationCSAccess().getDocumentationKeyword_1(), null); 
    }
(
(
		lv_value_2_0=RULE_URL
		{
			createLeafNode(grammarAccess.getDocumentationCSAccess().getValueURLTerminalRuleCall_2_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDocumentationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_2_0, 
	        		"URL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(	'(' 
    {
        createLeafNode(grammarAccess.getDocumentationCSAccess().getLeftParenthesisKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDocumentationCSAccess().getDetailsDetailCSParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_details_4_0=ruleDetailCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDocumentationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"details",
	        		lv_details_4_0, 
	        		"DetailCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getDocumentationCSAccess().getCommaKeyword_3_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDocumentationCSAccess().getDetailsDetailCSParserRuleCall_3_2_1_0(), currentNode); 
	    }
		lv_details_6_0=ruleDetailCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDocumentationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"details",
	        		lv_details_6_0, 
	        		"DetailCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	')' 
    {
        createLeafNode(grammarAccess.getDocumentationCSAccess().getRightParenthesisKeyword_3_3(), null); 
    }
)?	';' 
    {
        createLeafNode(grammarAccess.getDocumentationCSAccess().getSemicolonKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleEClassifierCSRef
entryRuleEClassifierCSRef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEClassifierCSRefRule(), currentNode); }
	 iv_ruleEClassifierCSRef=ruleEClassifierCSRef 
	 { $current=$iv_ruleEClassifierCSRef.current; } 
	 EOF 
;

// Rule EClassifierCSRef
ruleEClassifierCSRef returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEClassifierCSRefAccess().getModelNameIdentifierParserRuleCall_0_0(), currentNode); 
	    }
		lv_modelName_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEClassifierCSRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"modelName",
	        		lv_modelName_0_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'::' 
    {
        createLeafNode(grammarAccess.getEClassifierCSRefAccess().getColonColonKeyword_1(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getEClassifierCSRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEClassifierCSRefAccess().getRefEClassifierCrossReference_2_0(), currentNode); 
	    }
		ruleIdentifier		{ 
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleEnumCS
entryRuleEnumCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEnumCSRule(), currentNode); }
	 iv_ruleEnumCS=ruleEnumCS 
	 { $current=$iv_ruleEnumCS.current; } 
	 EOF 
;

// Rule EnumCS
ruleEnumCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'enum' 
    {
        createLeafNode(grammarAccess.getEnumCSAccess().getEnumKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEnumCSAccess().getNameIdentifierParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'<' 
    {
        createLeafNode(grammarAccess.getEnumCSAccess().getLessThanSignKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEnumCSAccess().getTypeParametersTypeParameterCSParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_typeParameters_3_0=ruleTypeParameterCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"typeParameters",
	        		lv_typeParameters_3_0, 
	        		"TypeParameterCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getEnumCSAccess().getCommaKeyword_2_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEnumCSAccess().getTypeParametersTypeParameterCSParserRuleCall_2_2_1_0(), currentNode); 
	    }
		lv_typeParameters_5_0=ruleTypeParameterCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"typeParameters",
	        		lv_typeParameters_5_0, 
	        		"TypeParameterCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'>' 
    {
        createLeafNode(grammarAccess.getEnumCSAccess().getGreaterThanSignKeyword_2_3(), null); 
    }
)?(	':' 
    {
        createLeafNode(grammarAccess.getEnumCSAccess().getColonKeyword_3_0(), null); 
    }
(
(
		lv_instanceClassName_8_0=RULE_URL
		{
			createLeafNode(grammarAccess.getEnumCSAccess().getInstanceClassNameURLTerminalRuleCall_3_1_0(), "instanceClassName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"instanceClassName",
	        		lv_instanceClassName_8_0, 
	        		"URL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?((	'{' 
    {
        createLeafNode(grammarAccess.getEnumCSAccess().getLeftCurlyBracketKeyword_4_0_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEnumCSAccess().getAnnotationsAnnotationElementCSParserRuleCall_4_0_1_0_0(), currentNode); 
	    }
		lv_annotations_10_0=ruleAnnotationElementCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_10_0, 
	        		"AnnotationElementCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEnumCSAccess().getLiteralsEnumLiteralCSParserRuleCall_4_0_1_1_0(), currentNode); 
	    }
		lv_literals_11_0=ruleEnumLiteralCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"literals",
	        		lv_literals_11_0, 
	        		"EnumLiteralCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEnumCSAccess().getConstraintsInvariantConstraintCSParserRuleCall_4_0_1_2_0(), currentNode); 
	    }
		lv_constraints_12_0=ruleInvariantConstraintCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"constraints",
	        		lv_constraints_12_0, 
	        		"InvariantConstraintCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getEnumCSAccess().getRightCurlyBracketKeyword_4_0_2(), null); 
    }
)
    |	';' 
    {
        createLeafNode(grammarAccess.getEnumCSAccess().getSemicolonKeyword_4_1(), null); 
    }
))
;





// Entry rule entryRuleEnumLiteralCS
entryRuleEnumLiteralCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEnumLiteralCSRule(), currentNode); }
	 iv_ruleEnumLiteralCS=ruleEnumLiteralCS 
	 { $current=$iv_ruleEnumLiteralCS.current; } 
	 EOF 
;

// Rule EnumLiteralCS
ruleEnumLiteralCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEnumLiteralCSAccess().getNameIdentifierParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumLiteralCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'=' 
    {
        createLeafNode(grammarAccess.getEnumLiteralCSAccess().getEqualsSignKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEnumLiteralCSAccess().getValueINTEGERParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_value_2_0=ruleINTEGER		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumLiteralCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_2_0, 
	        		"INTEGER", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?((	'{' 
    {
        createLeafNode(grammarAccess.getEnumLiteralCSAccess().getLeftCurlyBracketKeyword_2_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEnumLiteralCSAccess().getAnnotationsAnnotationElementCSParserRuleCall_2_0_1_0(), currentNode); 
	    }
		lv_annotations_4_0=ruleAnnotationElementCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumLiteralCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_4_0, 
	        		"AnnotationElementCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getEnumLiteralCSAccess().getRightCurlyBracketKeyword_2_0_2(), null); 
    }
)
    |	';' 
    {
        createLeafNode(grammarAccess.getEnumLiteralCSAccess().getSemicolonKeyword_2_1(), null); 
    }
))
;





// Entry rule entryRuleImportCS
entryRuleImportCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getImportCSRule(), currentNode); }
	 iv_ruleImportCS=ruleImportCS 
	 { $current=$iv_ruleImportCS.current; } 
	 EOF 
;

// Rule ImportCS
ruleImportCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'import' 
    {
        createLeafNode(grammarAccess.getImportCSAccess().getImportKeyword_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getImportCSAccess().getAliasIdentifierParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_alias_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImportCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"alias",
	        		lv_alias_1_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getImportCSAccess().getColonKeyword_1_1(), null); 
    }
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getImportCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_URL
	{
		createLeafNode(grammarAccess.getImportCSAccess().getEPackageEPackageCrossReference_2_0(), "ePackage"); 
	}

)
)	';' 
    {
        createLeafNode(grammarAccess.getImportCSAccess().getSemicolonKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleModelElementCS
entryRuleModelElementCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getModelElementCSRule(), currentNode); }
	 iv_ruleModelElementCS=ruleModelElementCS 
	 { $current=$iv_ruleModelElementCS.current; } 
	 EOF 
;

// Rule ModelElementCS
ruleModelElementCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getModelElementCSAccess().getClassifierCSParserRuleCall_0(), currentNode); 
    }
    this_ClassifierCS_0=ruleClassifierCS
    { 
        $current = $this_ClassifierCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getModelElementCSAccess().getEnumLiteralCSParserRuleCall_1(), currentNode); 
    }
    this_EnumLiteralCS_1=ruleEnumLiteralCS
    { 
        $current = $this_EnumLiteralCS_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getModelElementCSAccess().getOperationCSParserRuleCall_2(), currentNode); 
    }
    this_OperationCS_2=ruleOperationCS
    { 
        $current = $this_OperationCS_2.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getModelElementCSAccess().getPackageCSParserRuleCall_3(), currentNode); 
    }
    this_PackageCS_3=rulePackageCS
    { 
        $current = $this_PackageCS_3.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getModelElementCSAccess().getStructuralFeatureCSParserRuleCall_4(), currentNode); 
    }
    this_StructuralFeatureCS_4=ruleStructuralFeatureCS
    { 
        $current = $this_StructuralFeatureCS_4.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleModelElementCSRef
entryRuleModelElementCSRef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getModelElementCSRefRule(), currentNode); }
	 iv_ruleModelElementCSRef=ruleModelElementCSRef 
	 { $current=$iv_ruleModelElementCSRef.current; } 
	 EOF 
;

// Rule ModelElementCSRef
ruleModelElementCSRef returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getModelElementCSRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModelElementCSRefAccess().getRefModelElementCSCrossReference_0(), currentNode); 
	    }
		ruleIdentifier		{ 
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleObjectRef
entryRuleObjectRef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getObjectRefRule(), currentNode); }
	 iv_ruleObjectRef=ruleObjectRef 
	 { $current=$iv_ruleObjectRef.current; } 
	 EOF 
;

// Rule ObjectRef
ruleObjectRef returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getObjectRefAccess().getModelElementCSRefParserRuleCall(), currentNode); 
    }
    this_ModelElementCSRef_0=ruleModelElementCSRef
    { 
        $current = $this_ModelElementCSRef_0.current; 
        currentNode = currentNode.getParent();
    }

;





// Entry rule entryRuleOperationCS
entryRuleOperationCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOperationCSRule(), currentNode); }
	 iv_ruleOperationCS=ruleOperationCS 
	 { $current=$iv_ruleOperationCS.current; } 
	 EOF 
;

// Rule OperationCS
ruleOperationCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'operation' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getOperationKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationCSAccess().getNameIdentifierParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'<' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getLessThanSignKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationCSAccess().getTypeParametersTypeParameterCSParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_typeParameters_3_0=ruleTypeParameterCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"typeParameters",
	        		lv_typeParameters_3_0, 
	        		"TypeParameterCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getCommaKeyword_2_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationCSAccess().getTypeParametersTypeParameterCSParserRuleCall_2_2_1_0(), currentNode); 
	    }
		lv_typeParameters_5_0=ruleTypeParameterCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"typeParameters",
	        		lv_typeParameters_5_0, 
	        		"TypeParameterCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'>' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getGreaterThanSignKeyword_2_3(), null); 
    }
)?	'(' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getLeftParenthesisKeyword_3(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationCSAccess().getParametersParameterCSParserRuleCall_4_0_0(), currentNode); 
	    }
		lv_parameters_8_0=ruleParameterCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_8_0, 
	        		"ParameterCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getCommaKeyword_4_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationCSAccess().getParametersParameterCSParserRuleCall_4_1_1_0(), currentNode); 
	    }
		lv_parameters_10_0=ruleParameterCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_10_0, 
	        		"ParameterCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	')' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getRightParenthesisKeyword_5(), null); 
    }
(	':' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getColonKeyword_6_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationCSAccess().getTypeTypeRefCSParserRuleCall_6_1_0(), currentNode); 
	    }
		lv_type_13_0=ruleTypeRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_13_0, 
	        		"TypeRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(	'[' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getLeftSquareBracketKeyword_6_2_0(), null); 
    }
(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationCSAccess().getLowerLOWERParserRuleCall_6_2_1_0_0_0(), currentNode); 
	    }
		lv_lower_15_0=ruleLOWER		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"lower",
	        		lv_lower_15_0, 
	        		"LOWER", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'..' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getFullStopFullStopKeyword_6_2_1_0_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationCSAccess().getUpperUPPERParserRuleCall_6_2_1_0_1_1_0(), currentNode); 
	    }
		lv_upper_17_0=ruleUPPER		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"upper",
	        		lv_upper_17_0, 
	        		"UPPER", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
    |(
(
(
		lv_multiplicity_18_1=	'*' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getMultiplicityAsteriskKeyword_6_2_1_1_0_0(), "multiplicity"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "multiplicity", lv_multiplicity_18_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_multiplicity_18_2=	'+' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getMultiplicityPlusSignKeyword_6_2_1_1_0_1(), "multiplicity"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "multiplicity", lv_multiplicity_18_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_multiplicity_18_3=	'?' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getMultiplicityQuestionMarkKeyword_6_2_1_1_0_2(), "multiplicity"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "multiplicity", lv_multiplicity_18_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
))	']' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getRightSquareBracketKeyword_6_2_2(), null); 
    }
)?)?(	'throws' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getThrowsKeyword_7_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationCSAccess().getExceptionsTypeRefCSParserRuleCall_7_1_0(), currentNode); 
	    }
		lv_exceptions_21_0=ruleTypeRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"exceptions",
	        		lv_exceptions_21_0, 
	        		"TypeRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getCommaKeyword_7_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationCSAccess().getExceptionsTypeRefCSParserRuleCall_7_2_1_0(), currentNode); 
	    }
		lv_exceptions_23_0=ruleTypeRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"exceptions",
	        		lv_exceptions_23_0, 
	        		"TypeRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?(	'{' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getLeftCurlyBracketKeyword_8_0(), null); 
    }
(
(
(
		lv_qualifiers_25_1=	'api' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getQualifiersApiKeyword_8_1_0_0(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_25_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_25_2=	'!api' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getQualifiersApiKeyword_8_1_0_1(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_25_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_25_3=	'derived' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getQualifiersDerivedKeyword_8_1_0_2(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_25_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_25_4=	'!derived' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getQualifiersDerivedKeyword_8_1_0_3(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_25_4, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_25_5=	'ordered' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getQualifiersOrderedKeyword_8_1_0_4(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_25_5, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_25_6=	'!ordered' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getQualifiersOrderedKeyword_8_1_0_5(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_25_6, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_25_7=	'unique' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getQualifiersUniqueKeyword_8_1_0_6(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_25_7, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_25_8=	'!unique' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getQualifiersUniqueKeyword_8_1_0_7(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_25_8, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(	',' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getCommaKeyword_8_2_0(), null); 
    }
(
(
(
		lv_qualifiers_27_1=	'api' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getQualifiersApiKeyword_8_2_1_0_0(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_27_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_27_2=	'!api' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getQualifiersApiKeyword_8_2_1_0_1(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_27_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_27_3=	'derived' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getQualifiersDerivedKeyword_8_2_1_0_2(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_27_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_27_4=	'!derived' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getQualifiersDerivedKeyword_8_2_1_0_3(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_27_4, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_27_5=	'ordered' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getQualifiersOrderedKeyword_8_2_1_0_4(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_27_5, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_27_6=	'!ordered' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getQualifiersOrderedKeyword_8_2_1_0_5(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_27_6, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_27_7=	'unique' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getQualifiersUniqueKeyword_8_2_1_0_6(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_27_7, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_27_8=	'!unique' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getQualifiersUniqueKeyword_8_2_1_0_7(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_27_8, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getRightCurlyBracketKeyword_8_3(), null); 
    }
)?((	'{' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getLeftCurlyBracketKeyword_9_0_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationCSAccess().getAnnotationsAnnotationElementCSParserRuleCall_9_0_1_0_0(), currentNode); 
	    }
		lv_annotations_30_0=ruleAnnotationElementCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_30_0, 
	        		"AnnotationElementCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationCSAccess().getConstraintsPreconditionConstraintCSParserRuleCall_9_0_1_1_0_0(), currentNode); 
	    }
		lv_constraints_31_1=rulePreconditionConstraintCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"constraints",
	        		lv_constraints_31_1, 
	        		"PreconditionConstraintCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationCSAccess().getConstraintsBodyConstraintCSParserRuleCall_9_0_1_1_0_1(), currentNode); 
	    }
		lv_constraints_31_2=ruleBodyConstraintCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"constraints",
	        		lv_constraints_31_2, 
	        		"BodyConstraintCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationCSAccess().getConstraintsPostconditionConstraintCSParserRuleCall_9_0_1_1_0_2(), currentNode); 
	    }
		lv_constraints_31_3=rulePostconditionConstraintCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"constraints",
	        		lv_constraints_31_3, 
	        		"PostconditionConstraintCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getRightCurlyBracketKeyword_9_0_2(), null); 
    }
)
    |	';' 
    {
        createLeafNode(grammarAccess.getOperationCSAccess().getSemicolonKeyword_9_1(), null); 
    }
))
;





// Entry rule entryRulePackageCS
entryRulePackageCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPackageCSRule(), currentNode); }
	 iv_rulePackageCS=rulePackageCS 
	 { $current=$iv_rulePackageCS.current; } 
	 EOF 
;

// Rule PackageCS
rulePackageCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'package' 
    {
        createLeafNode(grammarAccess.getPackageCSAccess().getPackageKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPackageCSAccess().getNameIdentifierParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPackageCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	':' 
    {
        createLeafNode(grammarAccess.getPackageCSAccess().getColonKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPackageCSAccess().getPrefixIdentifierParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_prefix_3_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPackageCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"prefix",
	        		lv_prefix_3_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'=' 
    {
        createLeafNode(grammarAccess.getPackageCSAccess().getEqualsSignKeyword_2_2(), null); 
    }
(
(
		lv_uri_5_0=RULE_URL
		{
			createLeafNode(grammarAccess.getPackageCSAccess().getUriURLTerminalRuleCall_2_3_0(), "uri"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPackageCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"uri",
	        		lv_uri_5_0, 
	        		"URL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?((	'{' 
    {
        createLeafNode(grammarAccess.getPackageCSAccess().getLeftCurlyBracketKeyword_3_0_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPackageCSAccess().getAnnotationsAnnotationElementCSParserRuleCall_3_0_1_0_0(), currentNode); 
	    }
		lv_annotations_7_0=ruleAnnotationElementCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPackageCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_7_0, 
	        		"AnnotationElementCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPackageCSAccess().getSubpackagesPackageCSParserRuleCall_3_0_1_1_0(), currentNode); 
	    }
		lv_subpackages_8_0=rulePackageCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPackageCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"subpackages",
	        		lv_subpackages_8_0, 
	        		"PackageCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPackageCSAccess().getClassifiersClassifierCSParserRuleCall_3_0_1_2_0(), currentNode); 
	    }
		lv_classifiers_9_0=ruleClassifierCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPackageCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"classifiers",
	        		lv_classifiers_9_0, 
	        		"ClassifierCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getPackageCSAccess().getRightCurlyBracketKeyword_3_0_2(), null); 
    }
)
    |	';' 
    {
        createLeafNode(grammarAccess.getPackageCSAccess().getSemicolonKeyword_3_1(), null); 
    }
))
;





// Entry rule entryRuleParameterCS
entryRuleParameterCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getParameterCSRule(), currentNode); }
	 iv_ruleParameterCS=ruleParameterCS 
	 { $current=$iv_ruleParameterCS.current; } 
	 EOF 
;

// Rule ParameterCS
ruleParameterCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParameterCSAccess().getNameIdentifierParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	':' 
    {
        createLeafNode(grammarAccess.getParameterCSAccess().getColonKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParameterCSAccess().getTypeTypeRefCSParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_type_2_0=ruleTypeRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"TypeRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'[' 
    {
        createLeafNode(grammarAccess.getParameterCSAccess().getLeftSquareBracketKeyword_1_2_0(), null); 
    }
(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParameterCSAccess().getLowerLOWERParserRuleCall_1_2_1_0_0_0(), currentNode); 
	    }
		lv_lower_4_0=ruleLOWER		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"lower",
	        		lv_lower_4_0, 
	        		"LOWER", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'..' 
    {
        createLeafNode(grammarAccess.getParameterCSAccess().getFullStopFullStopKeyword_1_2_1_0_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParameterCSAccess().getUpperUPPERParserRuleCall_1_2_1_0_1_1_0(), currentNode); 
	    }
		lv_upper_6_0=ruleUPPER		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"upper",
	        		lv_upper_6_0, 
	        		"UPPER", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
    |(
(
(
		lv_multiplicity_7_1=	'*' 
    {
        createLeafNode(grammarAccess.getParameterCSAccess().getMultiplicityAsteriskKeyword_1_2_1_1_0_0(), "multiplicity"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "multiplicity", lv_multiplicity_7_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_multiplicity_7_2=	'+' 
    {
        createLeafNode(grammarAccess.getParameterCSAccess().getMultiplicityPlusSignKeyword_1_2_1_1_0_1(), "multiplicity"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "multiplicity", lv_multiplicity_7_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_multiplicity_7_3=	'?' 
    {
        createLeafNode(grammarAccess.getParameterCSAccess().getMultiplicityQuestionMarkKeyword_1_2_1_1_0_2(), "multiplicity"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "multiplicity", lv_multiplicity_7_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
))	']' 
    {
        createLeafNode(grammarAccess.getParameterCSAccess().getRightSquareBracketKeyword_1_2_2(), null); 
    }
)?)?(	'{' 
    {
        createLeafNode(grammarAccess.getParameterCSAccess().getLeftCurlyBracketKeyword_2_0(), null); 
    }
(
(
(
		lv_qualifiers_10_1=	'ordered' 
    {
        createLeafNode(grammarAccess.getParameterCSAccess().getQualifiersOrderedKeyword_2_1_0_0(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_10_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_10_2=	'!ordered' 
    {
        createLeafNode(grammarAccess.getParameterCSAccess().getQualifiersOrderedKeyword_2_1_0_1(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_10_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_10_3=	'unique' 
    {
        createLeafNode(grammarAccess.getParameterCSAccess().getQualifiersUniqueKeyword_2_1_0_2(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_10_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_10_4=	'!unique' 
    {
        createLeafNode(grammarAccess.getParameterCSAccess().getQualifiersUniqueKeyword_2_1_0_3(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_10_4, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(	',' 
    {
        createLeafNode(grammarAccess.getParameterCSAccess().getCommaKeyword_2_2_0(), null); 
    }
(
(
(
		lv_qualifiers_12_1=	'ordered' 
    {
        createLeafNode(grammarAccess.getParameterCSAccess().getQualifiersOrderedKeyword_2_2_1_0_0(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_12_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_12_2=	'!ordered' 
    {
        createLeafNode(grammarAccess.getParameterCSAccess().getQualifiersOrderedKeyword_2_2_1_0_1(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_12_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_12_3=	'unique' 
    {
        createLeafNode(grammarAccess.getParameterCSAccess().getQualifiersUniqueKeyword_2_2_1_0_2(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_12_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_12_4=	'!unique' 
    {
        createLeafNode(grammarAccess.getParameterCSAccess().getQualifiersUniqueKeyword_2_2_1_0_3(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_12_4, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getParameterCSAccess().getRightCurlyBracketKeyword_2_3(), null); 
    }
)?(	'{' 
    {
        createLeafNode(grammarAccess.getParameterCSAccess().getLeftCurlyBracketKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParameterCSAccess().getAnnotationsAnnotationElementCSParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_annotations_15_0=ruleAnnotationElementCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_15_0, 
	        		"AnnotationElementCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getParameterCSAccess().getRightCurlyBracketKeyword_3_2(), null); 
    }
)?)
;





// Entry rule entryRuleReferenceCS
entryRuleReferenceCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getReferenceCSRule(), currentNode); }
	 iv_ruleReferenceCS=ruleReferenceCS 
	 { $current=$iv_ruleReferenceCS.current; } 
	 EOF 
;

// Rule ReferenceCS
ruleReferenceCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'property' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getPropertyKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getReferenceCSAccess().getNameIdentifierParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'#' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getNumberSignKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getReferenceCSAccess().getOppositeReferenceRefParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_opposite_3_0=ruleReferenceRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"opposite",
	        		lv_opposite_3_0, 
	        		"ReferenceRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(	':' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getColonKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getReferenceCSAccess().getTypeTypeRefCSParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_type_5_0=ruleTypeRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_5_0, 
	        		"TypeRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'[' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getLeftSquareBracketKeyword_3_2_0(), null); 
    }
(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getReferenceCSAccess().getLowerLOWERParserRuleCall_3_2_1_0_0_0(), currentNode); 
	    }
		lv_lower_7_0=ruleLOWER		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"lower",
	        		lv_lower_7_0, 
	        		"LOWER", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'..' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getFullStopFullStopKeyword_3_2_1_0_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getReferenceCSAccess().getUpperUPPERParserRuleCall_3_2_1_0_1_1_0(), currentNode); 
	    }
		lv_upper_9_0=ruleUPPER		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"upper",
	        		lv_upper_9_0, 
	        		"UPPER", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
    |(
(
(
		lv_multiplicity_10_1=	'*' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getMultiplicityAsteriskKeyword_3_2_1_1_0_0(), "multiplicity"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "multiplicity", lv_multiplicity_10_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_multiplicity_10_2=	'+' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getMultiplicityPlusSignKeyword_3_2_1_1_0_1(), "multiplicity"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "multiplicity", lv_multiplicity_10_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_multiplicity_10_3=	'?' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getMultiplicityQuestionMarkKeyword_3_2_1_1_0_2(), "multiplicity"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "multiplicity", lv_multiplicity_10_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
))	']' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getRightSquareBracketKeyword_3_2_2(), null); 
    }
)?)?(	'=' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getEqualsSignKeyword_4_0(), null); 
    }
(
(
		lv_defaultValueLiteral_13_0=RULE_URL
		{
			createLeafNode(grammarAccess.getReferenceCSAccess().getDefaultValueLiteralURLTerminalRuleCall_4_1_0(), "defaultValueLiteral"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"defaultValueLiteral",
	        		lv_defaultValueLiteral_13_0, 
	        		"URL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(	'{' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getLeftCurlyBracketKeyword_5_0(), null); 
    }
(
(
(
		lv_qualifiers_15_1=	'api' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersApiKeyword_5_1_0_0(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_2=	'!api' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersApiKeyword_5_1_0_1(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_3=	'composes' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersComposesKeyword_5_1_0_2(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_4=	'!composes' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersComposesKeyword_5_1_0_3(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_4, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_5=	'derived' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersDerivedKeyword_5_1_0_4(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_5, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_6=	'!derived' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersDerivedKeyword_5_1_0_5(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_6, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_7=	'ordered' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersOrderedKeyword_5_1_0_6(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_7, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_8=	'!ordered' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersOrderedKeyword_5_1_0_7(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_8, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_9=	'readonly' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersReadonlyKeyword_5_1_0_8(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_9, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_10=	'!readonly' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersReadonlyKeyword_5_1_0_9(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_10, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_11=	'resolve' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersResolveKeyword_5_1_0_10(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_11, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_12=	'!resolve' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersResolveKeyword_5_1_0_11(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_12, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_13=	'transient' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersTransientKeyword_5_1_0_12(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_13, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_14=	'!transient' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersTransientKeyword_5_1_0_13(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_14, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_15=	'unique' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersUniqueKeyword_5_1_0_14(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_15, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_16=	'!unique' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersUniqueKeyword_5_1_0_15(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_16, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_17=	'unsettable' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersUnsettableKeyword_5_1_0_16(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_17, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_18=	'!unsettable' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersUnsettableKeyword_5_1_0_17(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_18, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_19=	'volatile' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersVolatileKeyword_5_1_0_18(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_19, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_15_20=	'!volatile' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersVolatileKeyword_5_1_0_19(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_15_20, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(	',' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getCommaKeyword_5_2_0(), null); 
    }
(
(
(
		lv_qualifiers_17_1=	'api' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersApiKeyword_5_2_1_0_0(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_2=	'!api' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersApiKeyword_5_2_1_0_1(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_3=	'composes' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersComposesKeyword_5_2_1_0_2(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_4=	'!composes' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersComposesKeyword_5_2_1_0_3(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_4, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_5=	'derived' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersDerivedKeyword_5_2_1_0_4(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_5, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_6=	'!derived' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersDerivedKeyword_5_2_1_0_5(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_6, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_7=	'ordered' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersOrderedKeyword_5_2_1_0_6(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_7, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_8=	'!ordered' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersOrderedKeyword_5_2_1_0_7(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_8, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_9=	'readonly' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersReadonlyKeyword_5_2_1_0_8(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_9, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_10=	'!readonly' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersReadonlyKeyword_5_2_1_0_9(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_10, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_11=	'resolve' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersResolveKeyword_5_2_1_0_10(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_11, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_12=	'!resolve' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersResolveKeyword_5_2_1_0_11(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_12, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_13=	'transient' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersTransientKeyword_5_2_1_0_12(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_13, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_14=	'!transient' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersTransientKeyword_5_2_1_0_13(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_14, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_15=	'unique' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersUniqueKeyword_5_2_1_0_14(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_15, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_16=	'!unique' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersUniqueKeyword_5_2_1_0_15(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_16, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_17=	'unsettable' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersUnsettableKeyword_5_2_1_0_16(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_17, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_18=	'!unsettable' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersUnsettableKeyword_5_2_1_0_17(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_18, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_19=	'volatile' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersVolatileKeyword_5_2_1_0_18(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_19, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_qualifiers_17_20=	'!volatile' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getQualifiersVolatileKeyword_5_2_1_0_19(), "qualifiers"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "qualifiers", lv_qualifiers_17_20, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getRightCurlyBracketKeyword_5_3(), null); 
    }
)?((	'{' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getLeftCurlyBracketKeyword_6_0_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getReferenceCSAccess().getAnnotationsAnnotationElementCSParserRuleCall_6_0_1_0_0(), currentNode); 
	    }
		lv_annotations_20_0=ruleAnnotationElementCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_20_0, 
	        		"AnnotationElementCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getReferenceCSAccess().getConstraintsInitialConstraintCSParserRuleCall_6_0_1_1_0_0(), currentNode); 
	    }
		lv_constraints_21_1=ruleInitialConstraintCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"constraints",
	        		lv_constraints_21_1, 
	        		"InitialConstraintCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getReferenceCSAccess().getConstraintsDerivedConstraintCSParserRuleCall_6_0_1_1_0_1(), currentNode); 
	    }
		lv_constraints_21_2=ruleDerivedConstraintCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"constraints",
	        		lv_constraints_21_2, 
	        		"DerivedConstraintCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getRightCurlyBracketKeyword_6_0_2(), null); 
    }
)
    |	';' 
    {
        createLeafNode(grammarAccess.getReferenceCSAccess().getSemicolonKeyword_6_1(), null); 
    }
))
;





// Entry rule entryRuleReferenceRef
entryRuleReferenceRef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getReferenceRefRule(), currentNode); }
	 iv_ruleReferenceRef=ruleReferenceRef 
	 { $current=$iv_ruleReferenceRef.current; } 
	 EOF 
;

// Rule ReferenceRef
ruleReferenceRef returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getReferenceRefAccess().getReferenceCSRefParserRuleCall_0(), currentNode); 
    }
    this_ReferenceCSRef_0=ruleReferenceCSRef
    { 
        $current = $this_ReferenceCSRef_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getReferenceRefAccess().getEReferenceRefParserRuleCall_1(), currentNode); 
    }
    this_EReferenceRef_1=ruleEReferenceRef
    { 
        $current = $this_EReferenceRef_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleReferenceCSRef
entryRuleReferenceCSRef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getReferenceCSRefRule(), currentNode); }
	 iv_ruleReferenceCSRef=ruleReferenceCSRef 
	 { $current=$iv_ruleReferenceCSRef.current; } 
	 EOF 
;

// Rule ReferenceCSRef
ruleReferenceCSRef returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceCSRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getReferenceCSRefAccess().getRefReferenceCSCrossReference_0(), currentNode); 
	    }
		ruleIdentifier		{ 
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleStructuralFeatureCS
entryRuleStructuralFeatureCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStructuralFeatureCSRule(), currentNode); }
	 iv_ruleStructuralFeatureCS=ruleStructuralFeatureCS 
	 { $current=$iv_ruleStructuralFeatureCS.current; } 
	 EOF 
;

// Rule StructuralFeatureCS
ruleStructuralFeatureCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getStructuralFeatureCSAccess().getAttributeCSParserRuleCall_0(), currentNode); 
    }
    this_AttributeCS_0=ruleAttributeCS
    { 
        $current = $this_AttributeCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getStructuralFeatureCSAccess().getReferenceCSParserRuleCall_1(), currentNode); 
    }
    this_ReferenceCS_1=ruleReferenceCS
    { 
        $current = $this_ReferenceCS_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleTypeCSRef
entryRuleTypeCSRef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypeCSRefRule(), currentNode); }
	 iv_ruleTypeCSRef=ruleTypeCSRef 
	 { $current=$iv_ruleTypeCSRef.current; } 
	 EOF 
;

// Rule TypeCSRef
ruleTypeCSRef returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeCSRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTypeCSRefAccess().getRefTypeCSCrossReference_0(), currentNode); 
	    }
		ruleIdentifier		{ 
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleTypeParameterCS
entryRuleTypeParameterCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypeParameterCSRule(), currentNode); }
	 iv_ruleTypeParameterCS=ruleTypeParameterCS 
	 { $current=$iv_ruleTypeParameterCS.current; } 
	 EOF 
;

// Rule TypeParameterCS
ruleTypeParameterCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTypeParameterCSAccess().getNameIdentifierParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((	'extends' 
    {
        createLeafNode(grammarAccess.getTypeParameterCSAccess().getExtendsKeyword_1_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTypeParameterCSAccess().getExtendsTypeRefCSParserRuleCall_1_0_1_0(), currentNode); 
	    }
		lv_extends_2_0=ruleTypeRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"extends",
	        		lv_extends_2_0, 
	        		"TypeRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'&&' 
    {
        createLeafNode(grammarAccess.getTypeParameterCSAccess().getAmpersandAmpersandKeyword_1_0_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTypeParameterCSAccess().getExtendsTypeRefCSParserRuleCall_1_0_2_1_0(), currentNode); 
	    }
		lv_extends_4_0=ruleTypeRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"extends",
	        		lv_extends_4_0, 
	        		"TypeRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
    |(	'super' 
    {
        createLeafNode(grammarAccess.getTypeParameterCSAccess().getSuperKeyword_1_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTypeParameterCSAccess().getSuperTypeRefCSParserRuleCall_1_1_1_0(), currentNode); 
	    }
		lv_super_6_0=ruleTypeRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"super",
	        		lv_super_6_0, 
	        		"TypeRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))?)
;





// Entry rule entryRuleTypeRef
entryRuleTypeRef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypeRefRule(), currentNode); }
	 iv_ruleTypeRef=ruleTypeRef 
	 { $current=$iv_ruleTypeRef.current; } 
	 EOF 
;

// Rule TypeRef
ruleTypeRef returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeRefAccess().getTypeCSRefParserRuleCall_0(), currentNode); 
    }
    this_TypeCSRef_0=ruleTypeCSRef
    { 
        $current = $this_TypeCSRef_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeRefAccess().getEClassifierRefParserRuleCall_1(), currentNode); 
    }
    this_EClassifierRef_1=ruleEClassifierRef
    { 
        $current = $this_EClassifierRef_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeRefAccess().getEClassifierCSRefParserRuleCall_2(), currentNode); 
    }
    this_EClassifierCSRef_2=ruleEClassifierCSRef
    { 
        $current = $this_EClassifierCSRef_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleTypeRefCS
entryRuleTypeRefCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypeRefCSRule(), currentNode); }
	 iv_ruleTypeRefCS=ruleTypeRefCS 
	 { $current=$iv_ruleTypeRefCS.current; } 
	 EOF 
;

// Rule TypeRefCS
ruleTypeRefCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeRefCSAccess().getTypedTypeRefCSParserRuleCall_0(), currentNode); 
    }
    this_TypedTypeRefCS_0=ruleTypedTypeRefCS
    { 
        $current = $this_TypedTypeRefCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeRefCSAccess().getWildcardTypeRefCSParserRuleCall_1(), currentNode); 
    }
    this_WildcardTypeRefCS_1=ruleWildcardTypeRefCS
    { 
        $current = $this_WildcardTypeRefCS_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleTypedTypeRefCS
entryRuleTypedTypeRefCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypedTypeRefCSRule(), currentNode); }
	 iv_ruleTypedTypeRefCS=ruleTypedTypeRefCS 
	 { $current=$iv_ruleTypedTypeRefCS.current; } 
	 EOF 
;

// Rule TypedTypeRefCS
ruleTypedTypeRefCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTypedTypeRefCSAccess().getTypeTypeRefParserRuleCall_0_0(), currentNode); 
	    }
		lv_type_0_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypedTypeRefCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_0_0, 
	        		"TypeRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'<' 
    {
        createLeafNode(grammarAccess.getTypedTypeRefCSAccess().getLessThanSignKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTypedTypeRefCSAccess().getTypeArgumentsTypeRefCSParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_typeArguments_2_0=ruleTypeRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypedTypeRefCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"typeArguments",
	        		lv_typeArguments_2_0, 
	        		"TypeRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getTypedTypeRefCSAccess().getCommaKeyword_1_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTypedTypeRefCSAccess().getTypeArgumentsTypeRefCSParserRuleCall_1_2_1_0(), currentNode); 
	    }
		lv_typeArguments_4_0=ruleTypeRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypedTypeRefCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"typeArguments",
	        		lv_typeArguments_4_0, 
	        		"TypeRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'>' 
    {
        createLeafNode(grammarAccess.getTypedTypeRefCSAccess().getGreaterThanSignKeyword_1_3(), null); 
    }
)?)
;





// Entry rule entryRuleWildcardTypeRefCS
entryRuleWildcardTypeRefCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getWildcardTypeRefCSRule(), currentNode); }
	 iv_ruleWildcardTypeRefCS=ruleWildcardTypeRefCS 
	 { $current=$iv_ruleWildcardTypeRefCS.current; } 
	 EOF 
;

// Rule WildcardTypeRefCS
ruleWildcardTypeRefCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getWildcardTypeRefCSAccess().getWildcardTypeRefCSAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getWildcardTypeRefCSAccess().getWildcardTypeRefCSAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'?' 
    {
        createLeafNode(grammarAccess.getWildcardTypeRefCSAccess().getQuestionMarkKeyword_1(), null); 
    }
((	'extends' 
    {
        createLeafNode(grammarAccess.getWildcardTypeRefCSAccess().getExtendsKeyword_2_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWildcardTypeRefCSAccess().getExtendsTypeRefCSParserRuleCall_2_0_1_0(), currentNode); 
	    }
		lv_extends_3_0=ruleTypeRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWildcardTypeRefCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"extends",
	        		lv_extends_3_0, 
	        		"TypeRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	'super' 
    {
        createLeafNode(grammarAccess.getWildcardTypeRefCSAccess().getSuperKeyword_2_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWildcardTypeRefCSAccess().getSuperTypeRefCSParserRuleCall_2_1_1_0(), currentNode); 
	    }
		lv_super_5_0=ruleTypeRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWildcardTypeRefCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"super",
	        		lv_super_5_0, 
	        		"TypeRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))?)
;







// Entry rule entryRuleREAL_LITERAL
entryRuleREAL_LITERAL returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getREAL_LITERALRule(), currentNode); } 
	 iv_ruleREAL_LITERAL=ruleREAL_LITERAL 
	 { $current=$iv_ruleREAL_LITERAL.current.getText(); }  
	 EOF 
;

// Rule REAL_LITERAL
ruleREAL_LITERAL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    createLeafNode(grammarAccess.getREAL_LITERALAccess().getINTTerminalRuleCall_0(), null); 
    }
((
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getREAL_LITERALAccess().getFullStopKeyword_1_0_0(), null); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    createLeafNode(grammarAccess.getREAL_LITERALAccess().getINTTerminalRuleCall_1_0_1(), null); 
    }
)
    |((
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getREAL_LITERALAccess().getFullStopKeyword_1_1_0_0(), null); 
    }
    this_INT_4=RULE_INT    {
		$current.merge(this_INT_4);
    }

    { 
    createLeafNode(grammarAccess.getREAL_LITERALAccess().getINTTerminalRuleCall_1_1_0_1(), null); 
    }
)?(
	kw='e' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getREAL_LITERALAccess().getEKeyword_1_1_1_0(), null); 
    }

    |
	kw='E' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getREAL_LITERALAccess().getEKeyword_1_1_1_1(), null); 
    }
)(
	kw='+' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getREAL_LITERALAccess().getPlusSignKeyword_1_1_2_0(), null); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getREAL_LITERALAccess().getHyphenMinusKeyword_1_1_2_1(), null); 
    }
)?    this_INT_9=RULE_INT    {
		$current.merge(this_INT_9);
    }

    { 
    createLeafNode(grammarAccess.getREAL_LITERALAccess().getINTTerminalRuleCall_1_1_3(), null); 
    }
)))
    ;





// Entry rule entryRuleINTEGER_LITERAL
entryRuleINTEGER_LITERAL returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getINTEGER_LITERALRule(), currentNode); } 
	 iv_ruleINTEGER_LITERAL=ruleINTEGER_LITERAL 
	 { $current=$iv_ruleINTEGER_LITERAL.current.getText(); }  
	 EOF 
;

// Rule INTEGER_LITERAL
ruleINTEGER_LITERAL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    createLeafNode(grammarAccess.getINTEGER_LITERALAccess().getINTTerminalRuleCall(), null); 
    }

    ;







// Entry rule entryRuletupleKeywordCS
entryRuletupleKeywordCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTupleKeywordCSRule(), currentNode); }
	 iv_ruletupleKeywordCS=ruletupleKeywordCS 
	 { $current=$iv_ruletupleKeywordCS.current; } 
	 EOF 
;

// Rule tupleKeywordCS
ruletupleKeywordCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=	'Tuple' 
    {
        createLeafNode(grammarAccess.getTupleKeywordCSAccess().getValueTupleKeyword_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleKeywordCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_0_0, "Tuple", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRulerestrictedKeywordCS
entryRulerestrictedKeywordCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRestrictedKeywordCSRule(), currentNode); }
	 iv_rulerestrictedKeywordCS=rulerestrictedKeywordCS 
	 { $current=$iv_rulerestrictedKeywordCS.current; } 
	 EOF 
;

// Rule restrictedKeywordCS
rulerestrictedKeywordCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getRestrictedKeywordCSAccess().getCollectionTypeIdentifierCSParserRuleCall_0(), currentNode); 
    }
    this_CollectionTypeIdentifierCS_0=ruleCollectionTypeIdentifierCS
    { 
        $current = $this_CollectionTypeIdentifierCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getRestrictedKeywordCSAccess().getPrimitiveTypeCSParserRuleCall_1(), currentNode); 
    }
    this_primitiveTypeCS_1=ruleprimitiveTypeCS
    { 
        $current = $this_primitiveTypeCS_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getRestrictedKeywordCSAccess().getTupleKeywordCSParserRuleCall_2(), currentNode); 
    }
    this_tupleKeywordCS_2=ruletupleKeywordCS
    { 
        $current = $this_tupleKeywordCS_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleselfKeywordCS
entryRuleselfKeywordCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSelfKeywordCSRule(), currentNode); }
	 iv_ruleselfKeywordCS=ruleselfKeywordCS 
	 { $current=$iv_ruleselfKeywordCS.current; } 
	 EOF 
;

// Rule selfKeywordCS
ruleselfKeywordCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=	'self' 
    {
        createLeafNode(grammarAccess.getSelfKeywordCSAccess().getValueSelfKeyword_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelfKeywordCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_0_0, "self", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRulesimpleNameCS
entryRulesimpleNameCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSimpleNameCSRule(), currentNode); }
	 iv_rulesimpleNameCS=rulesimpleNameCS 
	 { $current=$iv_rulesimpleNameCS.current; } 
	 EOF 
;

// Rule simpleNameCS
rulesimpleNameCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSimpleNameCSAccess().getValueIdentifierParserRuleCall_0(), currentNode); 
	    }
		lv_value_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSimpleNameCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleunreservedSimpleNameCS
entryRuleunreservedSimpleNameCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUnreservedSimpleNameCSRule(), currentNode); }
	 iv_ruleunreservedSimpleNameCS=ruleunreservedSimpleNameCS 
	 { $current=$iv_ruleunreservedSimpleNameCS.current; } 
	 EOF 
;

// Rule unreservedSimpleNameCS
ruleunreservedSimpleNameCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getUnreservedSimpleNameCSAccess().getSimpleNameCSParserRuleCall_0(), currentNode); 
    }
    this_simpleNameCS_0=rulesimpleNameCS
    { 
        $current = $this_simpleNameCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getUnreservedSimpleNameCSAccess().getRestrictedKeywordCSParserRuleCall_1(), currentNode); 
    }
    this_restrictedKeywordCS_1=rulerestrictedKeywordCS
    { 
        $current = $this_restrictedKeywordCS_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRulepathNameCS
entryRulepathNameCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPathNameCSRule(), currentNode); }
	 iv_rulepathNameCS=rulepathNameCS 
	 { $current=$iv_rulepathNameCS.current; } 
	 EOF 
;

// Rule pathNameCS
rulepathNameCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPathNameCSAccess().getSimpleNamesSimpleNameCSParserRuleCall_0_0(), currentNode); 
	    }
		lv_simpleNames_0_0=rulesimpleNameCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPathNameCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"simpleNames",
	        		lv_simpleNames_0_0, 
	        		"simpleNameCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'::' 
    {
        createLeafNode(grammarAccess.getPathNameCSAccess().getColonColonKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPathNameCSAccess().getSimpleNamesUnreservedSimpleNameCSParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_simpleNames_2_0=ruleunreservedSimpleNameCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPathNameCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"simpleNames",
	        		lv_simpleNames_2_0, 
	        		"unreservedSimpleNameCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleprimitiveTypeCS
entryRuleprimitiveTypeCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrimitiveTypeCSRule(), currentNode); }
	 iv_ruleprimitiveTypeCS=ruleprimitiveTypeCS 
	 { $current=$iv_ruleprimitiveTypeCS.current; } 
	 EOF 
;

// Rule primitiveTypeCS
ruleprimitiveTypeCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_value_0_0=	'Boolean' 
    {
        createLeafNode(grammarAccess.getPrimitiveTypeCSAccess().getValueBooleanKeyword_0_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_0_0, "Boolean", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_value_1_0=	'Integer' 
    {
        createLeafNode(grammarAccess.getPrimitiveTypeCSAccess().getValueIntegerKeyword_1_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_1_0, "Integer", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_value_2_0=	'Real' 
    {
        createLeafNode(grammarAccess.getPrimitiveTypeCSAccess().getValueRealKeyword_2_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_2_0, "Real", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_value_3_0=	'String' 
    {
        createLeafNode(grammarAccess.getPrimitiveTypeCSAccess().getValueStringKeyword_3_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_3_0, "String", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_value_4_0=	'UnlimitedNatural' 
    {
        createLeafNode(grammarAccess.getPrimitiveTypeCSAccess().getValueUnlimitedNaturalKeyword_4_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_4_0, "UnlimitedNatural", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_value_5_0=	'OclAny' 
    {
        createLeafNode(grammarAccess.getPrimitiveTypeCSAccess().getValueOclAnyKeyword_5_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_5_0, "OclAny", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_value_6_0=	'OclInvalid' 
    {
        createLeafNode(grammarAccess.getPrimitiveTypeCSAccess().getValueOclInvalidKeyword_6_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_6_0, "OclInvalid", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_value_7_0=	'OclVoid' 
    {
        createLeafNode(grammarAccess.getPrimitiveTypeCSAccess().getValueOclVoidKeyword_7_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_7_0, "OclVoid", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleCollectionTypeIdentifierCS
entryRuleCollectionTypeIdentifierCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCollectionTypeIdentifierCSRule(), currentNode); }
	 iv_ruleCollectionTypeIdentifierCS=ruleCollectionTypeIdentifierCS 
	 { $current=$iv_ruleCollectionTypeIdentifierCS.current; } 
	 EOF 
;

// Rule CollectionTypeIdentifierCS
ruleCollectionTypeIdentifierCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_value_0_0=	'Set' 
    {
        createLeafNode(grammarAccess.getCollectionTypeIdentifierCSAccess().getValueSetKeyword_0_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionTypeIdentifierCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_0_0, "Set", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_value_1_0=	'Bag' 
    {
        createLeafNode(grammarAccess.getCollectionTypeIdentifierCSAccess().getValueBagKeyword_1_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionTypeIdentifierCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_1_0, "Bag", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_value_2_0=	'Sequence' 
    {
        createLeafNode(grammarAccess.getCollectionTypeIdentifierCSAccess().getValueSequenceKeyword_2_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionTypeIdentifierCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_2_0, "Sequence", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_value_3_0=	'Collection' 
    {
        createLeafNode(grammarAccess.getCollectionTypeIdentifierCSAccess().getValueCollectionKeyword_3_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionTypeIdentifierCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_3_0, "Collection", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_value_4_0=	'OrderedSet' 
    {
        createLeafNode(grammarAccess.getCollectionTypeIdentifierCSAccess().getValueOrderedSetKeyword_4_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionTypeIdentifierCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_4_0, "OrderedSet", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuletypeCS
entryRuletypeCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypeCSRule(), currentNode); }
	 iv_ruletypeCS=ruletypeCS 
	 { $current=$iv_ruletypeCS.current; } 
	 EOF 
;

// Rule typeCS
ruletypeCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeCSAccess().getPrimitiveTypeCSParserRuleCall_0(), currentNode); 
    }
    this_primitiveTypeCS_0=ruleprimitiveTypeCS
    { 
        $current = $this_primitiveTypeCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeCSAccess().getPathNameCSParserRuleCall_1(), currentNode); 
    }
    this_pathNameCS_1=rulepathNameCS
    { 
        $current = $this_pathNameCS_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeCSAccess().getCollectionTypeCSParserRuleCall_2(), currentNode); 
    }
    this_collectionTypeCS_2=rulecollectionTypeCS
    { 
        $current = $this_collectionTypeCS_2.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeCSAccess().getTupleTypeCSParserRuleCall_3(), currentNode); 
    }
    this_tupleTypeCS_3=ruletupleTypeCS
    { 
        $current = $this_tupleTypeCS_3.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRulecollectionTypeCS
entryRulecollectionTypeCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCollectionTypeCSRule(), currentNode); }
	 iv_rulecollectionTypeCS=rulecollectionTypeCS 
	 { $current=$iv_rulecollectionTypeCS.current; } 
	 EOF 
;

// Rule collectionTypeCS
rulecollectionTypeCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCollectionTypeCSAccess().getValueCollectionTypeIdentifierCSParserRuleCall_0_0(), currentNode); 
	    }
		lv_value_0_0=ruleCollectionTypeIdentifierCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"CollectionTypeIdentifierCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'(' 
    {
        createLeafNode(grammarAccess.getCollectionTypeCSAccess().getLeftParenthesisKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCollectionTypeCSAccess().getTypeCSTypeCSParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_typeCS_2_0=ruletypeCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"typeCS",
	        		lv_typeCS_2_0, 
	        		"typeCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getCollectionTypeCSAccess().getRightParenthesisKeyword_1_2(), null); 
    }
)?)
;





// Entry rule entryRuletupleTypeCS
entryRuletupleTypeCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTupleTypeCSRule(), currentNode); }
	 iv_ruletupleTypeCS=ruletupleTypeCS 
	 { $current=$iv_ruletupleTypeCS.current; } 
	 EOF 
;

// Rule tupleTypeCS
ruletupleTypeCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_value_0_0=	'Tuple' 
    {
        createLeafNode(grammarAccess.getTupleTypeCSAccess().getValueTupleKeyword_0_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_0_0, "Tuple", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getTupleTypeCSAccess().getLeftParenthesisKeyword_1(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTupleTypeCSAccess().getPartTuplePartCSParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_part_2_0=ruletuplePartCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"part",
	        		lv_part_2_0, 
	        		"tuplePartCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getTupleTypeCSAccess().getCommaKeyword_2_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTupleTypeCSAccess().getPartTuplePartCSParserRuleCall_2_1_1_0(), currentNode); 
	    }
		lv_part_4_0=ruletuplePartCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"part",
	        		lv_part_4_0, 
	        		"tuplePartCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	')' 
    {
        createLeafNode(grammarAccess.getTupleTypeCSAccess().getRightParenthesisKeyword_3(), null); 
    }
)
;





// Entry rule entryRuletuplePartCS
entryRuletuplePartCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTuplePartCSRule(), currentNode); }
	 iv_ruletuplePartCS=ruletuplePartCS 
	 { $current=$iv_ruletuplePartCS.current; } 
	 EOF 
;

// Rule tuplePartCS
ruletuplePartCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTuplePartCSAccess().getNameSimpleNameCSParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=rulesimpleNameCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTuplePartCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"simpleNameCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getTuplePartCSAccess().getColonKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTuplePartCSAccess().getTypeTypeCSParserRuleCall_2_0(), currentNode); 
	    }
		lv_type_2_0=ruletypeCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTuplePartCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"typeCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleLiteralExpCS
entryRuleLiteralExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLiteralExpCSRule(), currentNode); }
	 iv_ruleLiteralExpCS=ruleLiteralExpCS 
	 { $current=$iv_ruleLiteralExpCS.current; } 
	 EOF 
;

// Rule LiteralExpCS
ruleLiteralExpCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralExpCSAccess().getCollectionLiteralExpCSParserRuleCall_0(), currentNode); 
    }
    this_CollectionLiteralExpCS_0=ruleCollectionLiteralExpCS
    { 
        $current = $this_CollectionLiteralExpCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralExpCSAccess().getTupleLiteralExpCSParserRuleCall_1(), currentNode); 
    }
    this_TupleLiteralExpCS_1=ruleTupleLiteralExpCS
    { 
        $current = $this_TupleLiteralExpCS_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralExpCSAccess().getPrimitiveLiteralExpCSParserRuleCall_2(), currentNode); 
    }
    this_PrimitiveLiteralExpCS_2=rulePrimitiveLiteralExpCS
    { 
        $current = $this_PrimitiveLiteralExpCS_2.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralExpCSAccess().getTypeLiteralExpCSParserRuleCall_3(), currentNode); 
    }
    this_TypeLiteralExpCS_3=ruleTypeLiteralExpCS
    { 
        $current = $this_TypeLiteralExpCS_3.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleCollectionLiteralExpCS
entryRuleCollectionLiteralExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCollectionLiteralExpCSRule(), currentNode); }
	 iv_ruleCollectionLiteralExpCS=ruleCollectionLiteralExpCS 
	 { $current=$iv_ruleCollectionLiteralExpCS.current; } 
	 EOF 
;

// Rule CollectionLiteralExpCS
ruleCollectionLiteralExpCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getCollectionLiteralExpCSAccess().getCollectionTypeCSParserRuleCall_0(), currentNode); 
    }
    this_collectionTypeCS_0=rulecollectionTypeCS
    { 
        $current = $this_collectionTypeCS_0.current; 
        currentNode = currentNode.getParent();
    }
(	'{' 
    {
        createLeafNode(grammarAccess.getCollectionLiteralExpCSAccess().getLeftCurlyBracketKeyword_1_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCollectionLiteralExpCSAccess().getCollectionLiteralPartsCollectionLiteralPartCSParserRuleCall_1_1_0_0(), currentNode); 
	    }
		lv_collectionLiteralParts_2_0=ruleCollectionLiteralPartCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionLiteralExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"collectionLiteralParts",
	        		lv_collectionLiteralParts_2_0, 
	        		"CollectionLiteralPartCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getCollectionLiteralExpCSAccess().getCommaKeyword_1_1_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCollectionLiteralExpCSAccess().getCollectionLiteralPartsCollectionLiteralPartCSParserRuleCall_1_1_1_1_0(), currentNode); 
	    }
		lv_collectionLiteralParts_4_0=ruleCollectionLiteralPartCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionLiteralExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"collectionLiteralParts",
	        		lv_collectionLiteralParts_4_0, 
	        		"CollectionLiteralPartCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	'}' 
    {
        createLeafNode(grammarAccess.getCollectionLiteralExpCSAccess().getRightCurlyBracketKeyword_1_2(), null); 
    }
)?)
;





// Entry rule entryRuleCollectionLiteralPartCS
entryRuleCollectionLiteralPartCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCollectionLiteralPartCSRule(), currentNode); }
	 iv_ruleCollectionLiteralPartCS=ruleCollectionLiteralPartCS 
	 { $current=$iv_ruleCollectionLiteralPartCS.current; } 
	 EOF 
;

// Rule CollectionLiteralPartCS
ruleCollectionLiteralPartCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCollectionLiteralPartCSAccess().getExpressionCSOclExpressionCSParserRuleCall_0_0(), currentNode); 
	    }
		lv_expressionCS_0_0=ruleOclExpressionCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionLiteralPartCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expressionCS",
	        		lv_expressionCS_0_0, 
	        		"OclExpressionCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'..' 
    {
        createLeafNode(grammarAccess.getCollectionLiteralPartCSAccess().getFullStopFullStopKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCollectionLiteralPartCSAccess().getLastExpressionCSOclExpressionCSParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_lastExpressionCS_2_0=ruleOclExpressionCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionLiteralPartCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"lastExpressionCS",
	        		lv_lastExpressionCS_2_0, 
	        		"OclExpressionCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRulePrimitiveLiteralExpCS
entryRulePrimitiveLiteralExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrimitiveLiteralExpCSRule(), currentNode); }
	 iv_rulePrimitiveLiteralExpCS=rulePrimitiveLiteralExpCS 
	 { $current=$iv_rulePrimitiveLiteralExpCS.current; } 
	 EOF 
;

// Rule PrimitiveLiteralExpCS
rulePrimitiveLiteralExpCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimitiveLiteralExpCSAccess().getIntegerLiteralExpCSParserRuleCall_0(), currentNode); 
    }
    this_IntegerLiteralExpCS_0=ruleIntegerLiteralExpCS
    { 
        $current = $this_IntegerLiteralExpCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimitiveLiteralExpCSAccess().getRealLiteralExpCSParserRuleCall_1(), currentNode); 
    }
    this_RealLiteralExpCS_1=ruleRealLiteralExpCS
    { 
        $current = $this_RealLiteralExpCS_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimitiveLiteralExpCSAccess().getStringLiteralExpCSParserRuleCall_2(), currentNode); 
    }
    this_StringLiteralExpCS_2=ruleStringLiteralExpCS
    { 
        $current = $this_StringLiteralExpCS_2.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimitiveLiteralExpCSAccess().getBooleanLiteralExpCSParserRuleCall_3(), currentNode); 
    }
    this_BooleanLiteralExpCS_3=ruleBooleanLiteralExpCS
    { 
        $current = $this_BooleanLiteralExpCS_3.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimitiveLiteralExpCSAccess().getUnlimitedNaturalLiteralExpCSParserRuleCall_4(), currentNode); 
    }
    this_UnlimitedNaturalLiteralExpCS_4=ruleUnlimitedNaturalLiteralExpCS
    { 
        $current = $this_UnlimitedNaturalLiteralExpCS_4.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimitiveLiteralExpCSAccess().getInvalidLiteralExpCSParserRuleCall_5(), currentNode); 
    }
    this_InvalidLiteralExpCS_5=ruleInvalidLiteralExpCS
    { 
        $current = $this_InvalidLiteralExpCS_5.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimitiveLiteralExpCSAccess().getNullLiteralExpCSParserRuleCall_6(), currentNode); 
    }
    this_NullLiteralExpCS_6=ruleNullLiteralExpCS
    { 
        $current = $this_NullLiteralExpCS_6.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleTupleLiteralExpCS
entryRuleTupleLiteralExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTupleLiteralExpCSRule(), currentNode); }
	 iv_ruleTupleLiteralExpCS=ruleTupleLiteralExpCS 
	 { $current=$iv_ruleTupleLiteralExpCS.current; } 
	 EOF 
;

// Rule TupleLiteralExpCS
ruleTupleLiteralExpCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getTupleLiteralExpCSAccess().getTupleLiteralExpCSAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTupleLiteralExpCSAccess().getTupleLiteralExpCSAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'Tuple' 
    {
        createLeafNode(grammarAccess.getTupleLiteralExpCSAccess().getTupleKeyword_1(), null); 
    }
(	'{' 
    {
        createLeafNode(grammarAccess.getTupleLiteralExpCSAccess().getLeftCurlyBracketKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTupleLiteralExpCSAccess().getPartTupleLiteralPartCSParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_part_3_0=ruleTupleLiteralPartCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleLiteralExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"part",
	        		lv_part_3_0, 
	        		"TupleLiteralPartCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getTupleLiteralExpCSAccess().getCommaKeyword_2_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTupleLiteralExpCSAccess().getPartTupleLiteralPartCSParserRuleCall_2_2_1_0(), currentNode); 
	    }
		lv_part_5_0=ruleTupleLiteralPartCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleLiteralExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"part",
	        		lv_part_5_0, 
	        		"TupleLiteralPartCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getTupleLiteralExpCSAccess().getRightCurlyBracketKeyword_2_3(), null); 
    }
)?)
;





// Entry rule entryRuleTupleLiteralPartCS
entryRuleTupleLiteralPartCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTupleLiteralPartCSRule(), currentNode); }
	 iv_ruleTupleLiteralPartCS=ruleTupleLiteralPartCS 
	 { $current=$iv_ruleTupleLiteralPartCS.current; } 
	 EOF 
;

// Rule TupleLiteralPartCS
ruleTupleLiteralPartCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTupleLiteralPartCSAccess().getNameSimpleNameCSParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=rulesimpleNameCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleLiteralPartCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"simpleNameCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	':' 
    {
        createLeafNode(grammarAccess.getTupleLiteralPartCSAccess().getColonKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTupleLiteralPartCSAccess().getTypeTypeCSParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_type_2_0=ruletypeCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleLiteralPartCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"typeCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?	'=' 
    {
        createLeafNode(grammarAccess.getTupleLiteralPartCSAccess().getEqualsSignKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTupleLiteralPartCSAccess().getInitExpressionOclExpressionCSParserRuleCall_3_0(), currentNode); 
	    }
		lv_initExpression_4_0=ruleOclExpressionCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleLiteralPartCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"initExpression",
	        		lv_initExpression_4_0, 
	        		"OclExpressionCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleIntegerLiteralExpCS
entryRuleIntegerLiteralExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIntegerLiteralExpCSRule(), currentNode); }
	 iv_ruleIntegerLiteralExpCS=ruleIntegerLiteralExpCS 
	 { $current=$iv_ruleIntegerLiteralExpCS.current; } 
	 EOF 
;

// Rule IntegerLiteralExpCS
ruleIntegerLiteralExpCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIntegerLiteralExpCSAccess().getIntegerSymbolINTEGER_LITERALParserRuleCall_0(), currentNode); 
	    }
		lv_integerSymbol_0_0=ruleINTEGER_LITERAL		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntegerLiteralExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"integerSymbol",
	        		lv_integerSymbol_0_0, 
	        		"INTEGER_LITERAL", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleRealLiteralExpCS
entryRuleRealLiteralExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRealLiteralExpCSRule(), currentNode); }
	 iv_ruleRealLiteralExpCS=ruleRealLiteralExpCS 
	 { $current=$iv_ruleRealLiteralExpCS.current; } 
	 EOF 
;

// Rule RealLiteralExpCS
ruleRealLiteralExpCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRealLiteralExpCSAccess().getRealSymbolREAL_LITERALParserRuleCall_0(), currentNode); 
	    }
		lv_realSymbol_0_0=ruleREAL_LITERAL		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRealLiteralExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"realSymbol",
	        		lv_realSymbol_0_0, 
	        		"REAL_LITERAL", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleStringLiteralExpCS
entryRuleStringLiteralExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStringLiteralExpCSRule(), currentNode); }
	 iv_ruleStringLiteralExpCS=ruleStringLiteralExpCS 
	 { $current=$iv_ruleStringLiteralExpCS.current; } 
	 EOF 
;

// Rule StringLiteralExpCS
ruleStringLiteralExpCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_stringSymbol_0_0=RULE_STRING_LITERAL
		{
			createLeafNode(grammarAccess.getStringLiteralExpCSAccess().getStringSymbolSTRING_LITERALTerminalRuleCall_0(), "stringSymbol"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStringLiteralExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"stringSymbol",
	        		lv_stringSymbol_0_0, 
	        		"STRING_LITERAL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)+
;





// Entry rule entryRuleBooleanLiteralExpCS
entryRuleBooleanLiteralExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBooleanLiteralExpCSRule(), currentNode); }
	 iv_ruleBooleanLiteralExpCS=ruleBooleanLiteralExpCS 
	 { $current=$iv_ruleBooleanLiteralExpCS.current; } 
	 EOF 
;

// Rule BooleanLiteralExpCS
ruleBooleanLiteralExpCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_value_0_0=	'true' 
    {
        createLeafNode(grammarAccess.getBooleanLiteralExpCSAccess().getValueTrueKeyword_0_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanLiteralExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_0_0, "true", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_value_1_0=	'false' 
    {
        createLeafNode(grammarAccess.getBooleanLiteralExpCSAccess().getValueFalseKeyword_1_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanLiteralExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_1_0, "false", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleUnlimitedNaturalLiteralExpCS
entryRuleUnlimitedNaturalLiteralExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUnlimitedNaturalLiteralExpCSRule(), currentNode); }
	 iv_ruleUnlimitedNaturalLiteralExpCS=ruleUnlimitedNaturalLiteralExpCS 
	 { $current=$iv_ruleUnlimitedNaturalLiteralExpCS.current; } 
	 EOF 
;

// Rule UnlimitedNaturalLiteralExpCS
ruleUnlimitedNaturalLiteralExpCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getUnlimitedNaturalLiteralExpCSAccess().getUnlimitedNaturalLiteralExpCSAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getUnlimitedNaturalLiteralExpCSAccess().getUnlimitedNaturalLiteralExpCSAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'*' 
    {
        createLeafNode(grammarAccess.getUnlimitedNaturalLiteralExpCSAccess().getAsteriskKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleInvalidLiteralExpCS
entryRuleInvalidLiteralExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInvalidLiteralExpCSRule(), currentNode); }
	 iv_ruleInvalidLiteralExpCS=ruleInvalidLiteralExpCS 
	 { $current=$iv_ruleInvalidLiteralExpCS.current; } 
	 EOF 
;

// Rule InvalidLiteralExpCS
ruleInvalidLiteralExpCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getInvalidLiteralExpCSAccess().getInvalidLiteralExpCSAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getInvalidLiteralExpCSAccess().getInvalidLiteralExpCSAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'invalid' 
    {
        createLeafNode(grammarAccess.getInvalidLiteralExpCSAccess().getInvalidKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleNullLiteralExpCS
entryRuleNullLiteralExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNullLiteralExpCSRule(), currentNode); }
	 iv_ruleNullLiteralExpCS=ruleNullLiteralExpCS 
	 { $current=$iv_ruleNullLiteralExpCS.current; } 
	 EOF 
;

// Rule NullLiteralExpCS
ruleNullLiteralExpCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getNullLiteralExpCSAccess().getNullLiteralExpCSAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getNullLiteralExpCSAccess().getNullLiteralExpCSAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'null' 
    {
        createLeafNode(grammarAccess.getNullLiteralExpCSAccess().getNullKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleTypeLiteralExpCS
entryRuleTypeLiteralExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypeLiteralExpCSRule(), currentNode); }
	 iv_ruleTypeLiteralExpCS=ruleTypeLiteralExpCS 
	 { $current=$iv_ruleTypeLiteralExpCS.current; } 
	 EOF 
;

// Rule TypeLiteralExpCS
ruleTypeLiteralExpCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeLiteralExpCSAccess().getPathNameCSParserRuleCall_0(), currentNode); 
    }
    this_pathNameCS_0=rulepathNameCS
    { 
        $current = $this_pathNameCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeLiteralExpCSAccess().getPrimitiveTypeCSParserRuleCall_1(), currentNode); 
    }
    this_primitiveTypeCS_1=ruleprimitiveTypeCS
    { 
        $current = $this_primitiveTypeCS_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeLiteralExpCSAccess().getTupleTypeCSParserRuleCall_2(), currentNode); 
    }
    this_tupleTypeCS_2=ruletupleTypeCS
    { 
        $current = $this_tupleTypeCS_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleOclExpressionCS
entryRuleOclExpressionCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOclExpressionCSRule(), currentNode); }
	 iv_ruleOclExpressionCS=ruleOclExpressionCS 
	 { $current=$iv_ruleOclExpressionCS.current; } 
	 EOF 
;

// Rule OclExpressionCS
ruleOclExpressionCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getOclExpressionCSAccess().getImpliesCSParserRuleCall_0(), currentNode); 
    }
    this_impliesCS_0=ruleimpliesCS
    { 
        $current = $this_impliesCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getOclExpressionCSAccess().getLetExpCSParserRuleCall_1(), currentNode); 
    }
    this_LetExpCS_1=ruleLetExpCS
    { 
        $current = $this_LetExpCS_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleimpliesCS
entryRuleimpliesCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getImpliesCSRule(), currentNode); }
	 iv_ruleimpliesCS=ruleimpliesCS 
	 { $current=$iv_ruleimpliesCS.current; } 
	 EOF 
;

// Rule impliesCS
ruleimpliesCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getImpliesCSAccess().getXorCSParserRuleCall_0(), currentNode); 
    }
    this_xorCS_0=rulexorCS
    { 
        $current = $this_xorCS_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getImpliesCSAccess().getBinaryExpressionCSSourceAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "source", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getImpliesCSAccess().getBinaryExpressionCSSourceAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_op_2_0=	'implies' 
    {
        createLeafNode(grammarAccess.getImpliesCSAccess().getOpImpliesKeyword_1_1_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImpliesCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_0, "implies", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getImpliesCSAccess().getArgumentImpliesCSParserRuleCall_1_2_0_0(), currentNode); 
	    }
		lv_argument_3_1=ruleimpliesCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImpliesCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_1, 
	        		"impliesCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getImpliesCSAccess().getArgumentLetExpCSParserRuleCall_1_2_0_1(), currentNode); 
	    }
		lv_argument_3_2=ruleLetExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImpliesCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_2, 
	        		"LetExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))?)
;





// Entry rule entryRulexorCS
entryRulexorCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getXorCSRule(), currentNode); }
	 iv_rulexorCS=rulexorCS 
	 { $current=$iv_rulexorCS.current; } 
	 EOF 
;

// Rule xorCS
rulexorCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getXorCSAccess().getOrCSParserRuleCall_0(), currentNode); 
    }
    this_orCS_0=ruleorCS
    { 
        $current = $this_orCS_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getXorCSAccess().getBinaryExpressionCSSourceAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "source", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getXorCSAccess().getBinaryExpressionCSSourceAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_op_2_0=	'xor' 
    {
        createLeafNode(grammarAccess.getXorCSAccess().getOpXorKeyword_1_1_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXorCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_0, "xor", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getXorCSAccess().getArgumentXorCSParserRuleCall_1_2_0_0(), currentNode); 
	    }
		lv_argument_3_1=rulexorCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXorCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_1, 
	        		"xorCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getXorCSAccess().getArgumentLetExpCSParserRuleCall_1_2_0_1(), currentNode); 
	    }
		lv_argument_3_2=ruleLetExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXorCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_2, 
	        		"LetExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))?)
;





// Entry rule entryRuleorCS
entryRuleorCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOrCSRule(), currentNode); }
	 iv_ruleorCS=ruleorCS 
	 { $current=$iv_ruleorCS.current; } 
	 EOF 
;

// Rule orCS
ruleorCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getOrCSAccess().getAndCSParserRuleCall_0(), currentNode); 
    }
    this_andCS_0=ruleandCS
    { 
        $current = $this_andCS_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getOrCSAccess().getBinaryExpressionCSSourceAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "source", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getOrCSAccess().getBinaryExpressionCSSourceAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_op_2_0=	'or' 
    {
        createLeafNode(grammarAccess.getOrCSAccess().getOpOrKeyword_1_1_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOrCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_0, "or", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOrCSAccess().getArgumentOrCSParserRuleCall_1_2_0_0(), currentNode); 
	    }
		lv_argument_3_1=ruleorCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOrCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_1, 
	        		"orCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getOrCSAccess().getArgumentLetExpCSParserRuleCall_1_2_0_1(), currentNode); 
	    }
		lv_argument_3_2=ruleLetExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOrCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_2, 
	        		"LetExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))?)
;





// Entry rule entryRuleandCS
entryRuleandCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAndCSRule(), currentNode); }
	 iv_ruleandCS=ruleandCS 
	 { $current=$iv_ruleandCS.current; } 
	 EOF 
;

// Rule andCS
ruleandCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAndCSAccess().getEqualityCSParserRuleCall_0(), currentNode); 
    }
    this_equalityCS_0=ruleequalityCS
    { 
        $current = $this_equalityCS_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getAndCSAccess().getBinaryExpressionCSSourceAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "source", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAndCSAccess().getBinaryExpressionCSSourceAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_op_2_0=	'and' 
    {
        createLeafNode(grammarAccess.getAndCSAccess().getOpAndKeyword_1_1_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_0, "and", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAndCSAccess().getArgumentAndCSParserRuleCall_1_2_0_0(), currentNode); 
	    }
		lv_argument_3_1=ruleandCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_1, 
	        		"andCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getAndCSAccess().getArgumentLetExpCSParserRuleCall_1_2_0_1(), currentNode); 
	    }
		lv_argument_3_2=ruleLetExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_2, 
	        		"LetExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))?)
;





// Entry rule entryRuleequalityCS
entryRuleequalityCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEqualityCSRule(), currentNode); }
	 iv_ruleequalityCS=ruleequalityCS 
	 { $current=$iv_ruleequalityCS.current; } 
	 EOF 
;

// Rule equalityCS
ruleequalityCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getEqualityCSAccess().getRelationalCSParserRuleCall_0(), currentNode); 
    }
    this_relationalCS_0=rulerelationalCS
    { 
        $current = $this_relationalCS_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getEqualityCSAccess().getBinaryExpressionCSSourceAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "source", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getEqualityCSAccess().getBinaryExpressionCSSourceAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
(
		lv_op_2_1=	'=' 
    {
        createLeafNode(grammarAccess.getEqualityCSAccess().getOpEqualsSignKeyword_1_1_0_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEqualityCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_2_2=	'<>' 
    {
        createLeafNode(grammarAccess.getEqualityCSAccess().getOpLessThanSignGreaterThanSignKeyword_1_1_0_1(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEqualityCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEqualityCSAccess().getArgumentEqualityCSParserRuleCall_1_2_0_0(), currentNode); 
	    }
		lv_argument_3_1=ruleequalityCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEqualityCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_1, 
	        		"equalityCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getEqualityCSAccess().getArgumentLetExpCSParserRuleCall_1_2_0_1(), currentNode); 
	    }
		lv_argument_3_2=ruleLetExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEqualityCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_2, 
	        		"LetExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))?)
;





// Entry rule entryRulerelationalCS
entryRulerelationalCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRelationalCSRule(), currentNode); }
	 iv_rulerelationalCS=rulerelationalCS 
	 { $current=$iv_rulerelationalCS.current; } 
	 EOF 
;

// Rule relationalCS
rulerelationalCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getRelationalCSAccess().getAdditiveCSParserRuleCall_0(), currentNode); 
    }
    this_additiveCS_0=ruleadditiveCS
    { 
        $current = $this_additiveCS_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getRelationalCSAccess().getBinaryExpressionCSSourceAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "source", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getRelationalCSAccess().getBinaryExpressionCSSourceAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
(
		lv_op_2_1=	'>' 
    {
        createLeafNode(grammarAccess.getRelationalCSAccess().getOpGreaterThanSignKeyword_1_1_0_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_2_2=	'<' 
    {
        createLeafNode(grammarAccess.getRelationalCSAccess().getOpLessThanSignKeyword_1_1_0_1(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_2_3=	'>=' 
    {
        createLeafNode(grammarAccess.getRelationalCSAccess().getOpGreaterThanSignEqualsSignKeyword_1_1_0_2(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_2_4=	'<=' 
    {
        createLeafNode(grammarAccess.getRelationalCSAccess().getOpLessThanSignEqualsSignKeyword_1_1_0_3(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_4, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelationalCSAccess().getArgumentRelationalCSParserRuleCall_1_2_0_0(), currentNode); 
	    }
		lv_argument_3_1=rulerelationalCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_1, 
	        		"relationalCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelationalCSAccess().getArgumentLetExpCSParserRuleCall_1_2_0_1(), currentNode); 
	    }
		lv_argument_3_2=ruleLetExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_2, 
	        		"LetExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))?)
;





// Entry rule entryRuleadditiveCS
entryRuleadditiveCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAdditiveCSRule(), currentNode); }
	 iv_ruleadditiveCS=ruleadditiveCS 
	 { $current=$iv_ruleadditiveCS.current; } 
	 EOF 
;

// Rule additiveCS
ruleadditiveCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAdditiveCSAccess().getMultiplicativeCSParserRuleCall_0(), currentNode); 
    }
    this_multiplicativeCS_0=rulemultiplicativeCS
    { 
        $current = $this_multiplicativeCS_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getAdditiveCSAccess().getBinaryExpressionCSSourceAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "source", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAdditiveCSAccess().getBinaryExpressionCSSourceAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
(
		lv_op_2_1=	'+' 
    {
        createLeafNode(grammarAccess.getAdditiveCSAccess().getOpPlusSignKeyword_1_1_0_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_2_2=	'-' 
    {
        createLeafNode(grammarAccess.getAdditiveCSAccess().getOpHyphenMinusKeyword_1_1_0_1(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAdditiveCSAccess().getArgumentAdditiveCSParserRuleCall_1_2_0_0(), currentNode); 
	    }
		lv_argument_3_1=ruleadditiveCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_1, 
	        		"additiveCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getAdditiveCSAccess().getArgumentLetExpCSParserRuleCall_1_2_0_1(), currentNode); 
	    }
		lv_argument_3_2=ruleLetExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_2, 
	        		"LetExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))?)
;





// Entry rule entryRulemultiplicativeCS
entryRulemultiplicativeCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMultiplicativeCSRule(), currentNode); }
	 iv_rulemultiplicativeCS=rulemultiplicativeCS 
	 { $current=$iv_rulemultiplicativeCS.current; } 
	 EOF 
;

// Rule multiplicativeCS
rulemultiplicativeCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getMultiplicativeCSAccess().getUnaryCSParserRuleCall_0(), currentNode); 
    }
    this_unaryCS_0=ruleunaryCS
    { 
        $current = $this_unaryCS_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getMultiplicativeCSAccess().getBinaryExpressionCSSourceAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "source", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getMultiplicativeCSAccess().getBinaryExpressionCSSourceAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
(
		lv_op_2_1=	'*' 
    {
        createLeafNode(grammarAccess.getMultiplicativeCSAccess().getOpAsteriskKeyword_1_1_0_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_2_2=	'/' 
    {
        createLeafNode(grammarAccess.getMultiplicativeCSAccess().getOpSolidusKeyword_1_1_0_1(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMultiplicativeCSAccess().getArgumentMultiplicativeCSParserRuleCall_1_2_0_0(), currentNode); 
	    }
		lv_argument_3_1=rulemultiplicativeCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_1, 
	        		"multiplicativeCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getMultiplicativeCSAccess().getArgumentLetExpCSParserRuleCall_1_2_0_1(), currentNode); 
	    }
		lv_argument_3_2=ruleLetExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_2, 
	        		"LetExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))?)
;





// Entry rule entryRuleunaryCS
entryRuleunaryCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUnaryCSRule(), currentNode); }
	 iv_ruleunaryCS=ruleunaryCS 
	 { $current=$iv_ruleunaryCS.current; } 
	 EOF 
;

// Rule unaryCS
ruleunaryCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getUnaryCSAccess().getCallingExpCSParserRuleCall_0(), currentNode); 
    }
    this_callingExpCS_0=rulecallingExpCS
    { 
        $current = $this_callingExpCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getUnaryCSAccess().getUnaryExpressionCSAction_1_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getUnaryCSAccess().getUnaryExpressionCSAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
(
		lv_op_2_1=	'-' 
    {
        createLeafNode(grammarAccess.getUnaryCSAccess().getOpHyphenMinusKeyword_1_1_0_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_2_2=	'not' 
    {
        createLeafNode(grammarAccess.getUnaryCSAccess().getOpNotKeyword_1_1_0_1(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnaryCSAccess().getSourceUnaryCSParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_source_3_0=ruleunaryCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"source",
	        		lv_source_3_0, 
	        		"unaryCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRulecallingExpCS
entryRulecallingExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCallingExpCSRule(), currentNode); }
	 iv_rulecallingExpCS=rulecallingExpCS 
	 { $current=$iv_rulecallingExpCS.current; } 
	 EOF 
;

// Rule callingExpCS
rulecallingExpCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getCallingExpCSAccess().getCallExpCSParserRuleCall_0(), currentNode); 
    }
    this_callExpCS_0=rulecallExpCS
    { 
        $current = $this_callExpCS_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getCallingExpCSAccess().getBinaryExpressionCSSourceAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "source", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getCallingExpCSAccess().getBinaryExpressionCSSourceAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
(
		lv_op_2_1=	'.' 
    {
        createLeafNode(grammarAccess.getCallingExpCSAccess().getOpFullStopKeyword_1_1_0_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCallingExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_2_2=	'->' 
    {
        createLeafNode(grammarAccess.getCallingExpCSAccess().getOpHyphenMinusGreaterThanSignKeyword_1_1_0_1(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCallingExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCallingExpCSAccess().getArgumentCallingExpCSParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_argument_3_0=rulecallingExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCallingExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_3_0, 
	        		"callingExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleiteratorVariableCS
entryRuleiteratorVariableCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIteratorVariableCSRule(), currentNode); }
	 iv_ruleiteratorVariableCS=ruleiteratorVariableCS 
	 { $current=$iv_ruleiteratorVariableCS.current; } 
	 EOF 
;

// Rule iteratorVariableCS
ruleiteratorVariableCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIteratorVariableCSAccess().getNameSimpleNameCSParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=rulesimpleNameCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIteratorVariableCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"simpleNameCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	':' 
    {
        createLeafNode(grammarAccess.getIteratorVariableCSAccess().getColonKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIteratorVariableCSAccess().getTypeTypeCSParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_type_2_0=ruletypeCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIteratorVariableCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"typeCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleiteratorAccumulatorCS
entryRuleiteratorAccumulatorCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIteratorAccumulatorCSRule(), currentNode); }
	 iv_ruleiteratorAccumulatorCS=ruleiteratorAccumulatorCS 
	 { $current=$iv_ruleiteratorAccumulatorCS.current; } 
	 EOF 
;

// Rule iteratorAccumulatorCS
ruleiteratorAccumulatorCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIteratorAccumulatorCSAccess().getNameSimpleNameCSParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=rulesimpleNameCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIteratorAccumulatorCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"simpleNameCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getIteratorAccumulatorCSAccess().getColonKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIteratorAccumulatorCSAccess().getTypeTypeCSParserRuleCall_2_0(), currentNode); 
	    }
		lv_type_2_0=ruletypeCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIteratorAccumulatorCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"typeCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'=' 
    {
        createLeafNode(grammarAccess.getIteratorAccumulatorCSAccess().getEqualsSignKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIteratorAccumulatorCSAccess().getInitExpressionOclExpressionCSParserRuleCall_4_0(), currentNode); 
	    }
		lv_initExpression_4_0=ruleOclExpressionCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIteratorAccumulatorCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"initExpression",
	        		lv_initExpression_4_0, 
	        		"OclExpressionCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulecallExpCS
entryRulecallExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCallExpCSRule(), currentNode); }
	 iv_rulecallExpCS=rulecallExpCS 
	 { $current=$iv_rulecallExpCS.current; } 
	 EOF 
;

// Rule callExpCS
rulecallExpCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getCallExpCSAccess().getPreExpCSParserRuleCall_0(), currentNode); 
    }
    this_preExpCS_0=rulepreExpCS
    { 
        $current = $this_preExpCS_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getCallExpCSAccess().getCallExpCSSourceAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "source", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getCallExpCSAccess().getCallExpCSSourceAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'(' 
    {
        createLeafNode(grammarAccess.getCallExpCSAccess().getLeftParenthesisKeyword_1_1(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCallExpCSAccess().getVariable1IteratorVariableCSParserRuleCall_1_2_0_0(), currentNode); 
	    }
		lv_variable1_3_0=ruleiteratorVariableCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCallExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"variable1",
	        		lv_variable1_3_0, 
	        		"iteratorVariableCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((	',' 
    {
        createLeafNode(grammarAccess.getCallExpCSAccess().getCommaKeyword_1_2_1_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCallExpCSAccess().getVariable2IteratorVariableCSParserRuleCall_1_2_1_0_1_0(), currentNode); 
	    }
		lv_variable2_5_0=ruleiteratorVariableCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCallExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"variable2",
	        		lv_variable2_5_0, 
	        		"iteratorVariableCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	';' 
    {
        createLeafNode(grammarAccess.getCallExpCSAccess().getSemicolonKeyword_1_2_1_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCallExpCSAccess().getVariable2IteratorAccumulatorCSParserRuleCall_1_2_1_1_1_0(), currentNode); 
	    }
		lv_variable2_7_0=ruleiteratorAccumulatorCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCallExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"variable2",
	        		lv_variable2_7_0, 
	        		"iteratorAccumulatorCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))?	'|' 
    {
        createLeafNode(grammarAccess.getCallExpCSAccess().getVerticalLineKeyword_1_2_2(), null); 
    }
)?((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCallExpCSAccess().getArgumentsOclExpressionCSParserRuleCall_1_3_0_0(), currentNode); 
	    }
		lv_arguments_9_0=ruleOclExpressionCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCallExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"arguments",
	        		lv_arguments_9_0, 
	        		"OclExpressionCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getCallExpCSAccess().getCommaKeyword_1_3_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCallExpCSAccess().getArgumentsOclExpressionCSParserRuleCall_1_3_1_1_0(), currentNode); 
	    }
		lv_arguments_11_0=ruleOclExpressionCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCallExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"arguments",
	        		lv_arguments_11_0, 
	        		"OclExpressionCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	')' 
    {
        createLeafNode(grammarAccess.getCallExpCSAccess().getRightParenthesisKeyword_1_4(), null); 
    }
)?)
;





// Entry rule entryRulepreExpCS
entryRulepreExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPreExpCSRule(), currentNode); }
	 iv_rulepreExpCS=rulepreExpCS 
	 { $current=$iv_rulepreExpCS.current; } 
	 EOF 
;

// Rule preExpCS
rulepreExpCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPreExpCSAccess().getIndexExpCSParserRuleCall(), currentNode); 
    }
    this_indexExpCS_0=ruleindexExpCS
    { 
        $current = $this_indexExpCS_0.current; 
        currentNode = currentNode.getParent();
    }

;





// Entry rule entryRuleindexExpCS
entryRuleindexExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIndexExpCSRule(), currentNode); }
	 iv_ruleindexExpCS=ruleindexExpCS 
	 { $current=$iv_ruleindexExpCS.current; } 
	 EOF 
;

// Rule indexExpCS
ruleindexExpCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getIndexExpCSAccess().getMessageExpCSParserRuleCall_0(), currentNode); 
    }
    this_messageExpCS_0=rulemessageExpCS
    { 
        $current = $this_messageExpCS_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getIndexExpCSAccess().getIndexExpCSSourceAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "source", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getIndexExpCSAccess().getIndexExpCSSourceAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'[' 
    {
        createLeafNode(grammarAccess.getIndexExpCSAccess().getLeftSquareBracketKeyword_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIndexExpCSAccess().getIndexesOclExpressionCSParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_indexes_3_0=ruleOclExpressionCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIndexExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"indexes",
	        		lv_indexes_3_0, 
	        		"OclExpressionCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getIndexExpCSAccess().getCommaKeyword_1_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIndexExpCSAccess().getIndexesOclExpressionCSParserRuleCall_1_3_1_0(), currentNode); 
	    }
		lv_indexes_5_0=ruleOclExpressionCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIndexExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"indexes",
	        		lv_indexes_5_0, 
	        		"OclExpressionCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	']' 
    {
        createLeafNode(grammarAccess.getIndexExpCSAccess().getRightSquareBracketKeyword_1_4(), null); 
    }
)?)
;





// Entry rule entryRulemessageExpCS
entryRulemessageExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMessageExpCSRule(), currentNode); }
	 iv_rulemessageExpCS=rulemessageExpCS 
	 { $current=$iv_rulemessageExpCS.current; } 
	 EOF 
;

// Rule messageExpCS
rulemessageExpCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getMessageExpCSAccess().getPrimaryExpCSParserRuleCall(), currentNode); 
    }
    this_primaryExpCS_0=ruleprimaryExpCS
    { 
        $current = $this_primaryExpCS_0.current; 
        currentNode = currentNode.getParent();
    }

;





// Entry rule entryRuleprimaryExpCS
entryRuleprimaryExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrimaryExpCSRule(), currentNode); }
	 iv_ruleprimaryExpCS=ruleprimaryExpCS 
	 { $current=$iv_ruleprimaryExpCS.current; } 
	 EOF 
;

// Rule primaryExpCS
ruleprimaryExpCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpCSAccess().getSelfKeywordCSParserRuleCall_0(), currentNode); 
    }
    this_selfKeywordCS_0=ruleselfKeywordCS
    { 
        $current = $this_selfKeywordCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpCSAccess().getLiteralExpCSParserRuleCall_1(), currentNode); 
    }
    this_LiteralExpCS_1=ruleLiteralExpCS
    { 
        $current = $this_LiteralExpCS_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpCSAccess().getIfExpCSParserRuleCall_2(), currentNode); 
    }
    this_IfExpCS_2=ruleIfExpCS
    { 
        $current = $this_IfExpCS_2.current; 
        currentNode = currentNode.getParent();
    }

    |(	'(' 
    {
        createLeafNode(grammarAccess.getPrimaryExpCSAccess().getLeftParenthesisKeyword_3_0(), null); 
    }

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpCSAccess().getOclExpressionCSParserRuleCall_3_1(), currentNode); 
    }
    this_OclExpressionCS_4=ruleOclExpressionCS
    { 
        $current = $this_OclExpressionCS_4.current; 
        currentNode = currentNode.getParent();
    }
	')' 
    {
        createLeafNode(grammarAccess.getPrimaryExpCSAccess().getRightParenthesisKeyword_3_2(), null); 
    }
))
;





// Entry rule entryRuleIfExpCS
entryRuleIfExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIfExpCSRule(), currentNode); }
	 iv_ruleIfExpCS=ruleIfExpCS 
	 { $current=$iv_ruleIfExpCS.current; } 
	 EOF 
;

// Rule IfExpCS
ruleIfExpCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'if' 
    {
        createLeafNode(grammarAccess.getIfExpCSAccess().getIfKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfExpCSAccess().getConditionOclExpressionCSParserRuleCall_1_0(), currentNode); 
	    }
		lv_condition_1_0=ruleOclExpressionCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"condition",
	        		lv_condition_1_0, 
	        		"OclExpressionCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'then' 
    {
        createLeafNode(grammarAccess.getIfExpCSAccess().getThenKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfExpCSAccess().getThenExpressionOclExpressionCSParserRuleCall_3_0(), currentNode); 
	    }
		lv_thenExpression_3_0=ruleOclExpressionCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"thenExpression",
	        		lv_thenExpression_3_0, 
	        		"OclExpressionCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'else' 
    {
        createLeafNode(grammarAccess.getIfExpCSAccess().getElseKeyword_4(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfExpCSAccess().getElseExpressionOclExpressionCSParserRuleCall_5_0(), currentNode); 
	    }
		lv_elseExpression_5_0=ruleOclExpressionCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"elseExpression",
	        		lv_elseExpression_5_0, 
	        		"OclExpressionCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'endif' 
    {
        createLeafNode(grammarAccess.getIfExpCSAccess().getEndifKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleLetExpCS
entryRuleLetExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLetExpCSRule(), currentNode); }
	 iv_ruleLetExpCS=ruleLetExpCS 
	 { $current=$iv_ruleLetExpCS.current; } 
	 EOF 
;

// Rule LetExpCS
ruleLetExpCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'let' 
    {
        createLeafNode(grammarAccess.getLetExpCSAccess().getLetKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLetExpCSAccess().getVariableLetVariableCSParserRuleCall_1_0(), currentNode); 
	    }
		lv_variable_1_0=ruleLetVariableCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLetExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"variable",
	        		lv_variable_1_0, 
	        		"LetVariableCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getLetExpCSAccess().getCommaKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLetExpCSAccess().getVariableLetVariableCSParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_variable_3_0=ruleLetVariableCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLetExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"variable",
	        		lv_variable_3_0, 
	        		"LetVariableCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'in' 
    {
        createLeafNode(grammarAccess.getLetExpCSAccess().getInKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLetExpCSAccess().getInOclExpressionCSParserRuleCall_4_0(), currentNode); 
	    }
		lv_in_5_0=ruleOclExpressionCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLetExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"in",
	        		lv_in_5_0, 
	        		"OclExpressionCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleLetVariableCS
entryRuleLetVariableCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLetVariableCSRule(), currentNode); }
	 iv_ruleLetVariableCS=ruleLetVariableCS 
	 { $current=$iv_ruleLetVariableCS.current; } 
	 EOF 
;

// Rule LetVariableCS
ruleLetVariableCS returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLetVariableCSAccess().getNameSimpleNameCSParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=rulesimpleNameCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLetVariableCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"simpleNameCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getLetVariableCSAccess().getColonKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLetVariableCSAccess().getTypeTypeCSParserRuleCall_2_0(), currentNode); 
	    }
		lv_type_2_0=ruletypeCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLetVariableCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"typeCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'=' 
    {
        createLeafNode(grammarAccess.getLetVariableCSAccess().getEqualsSignKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLetVariableCSAccess().getInitExpressionOclExpressionCSParserRuleCall_4_0(), currentNode); 
	    }
		lv_initExpression_4_0=ruleOclExpressionCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLetVariableCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"initExpression",
	        		lv_initExpression_4_0, 
	        		"OclExpressionCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





RULE_URL : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"';

RULE_STRING_LITERAL : '\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'';

RULE_ID_TERMINAL : (('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*|'_' RULE_STRING_LITERAL);

RULE_INT : ('0'..'9')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '--' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


