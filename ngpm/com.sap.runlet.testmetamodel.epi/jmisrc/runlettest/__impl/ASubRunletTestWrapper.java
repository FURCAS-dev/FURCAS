/**
 * Generated by the MOIN Generator Version 3.0
 **/

package runlettest.__impl;

public class ASubRunletTestWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<runlettest.ASubRunletTest> implements runlettest.ASubRunletTest,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The ASubRunletTest wrapper
     */
    public ASubRunletTestWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, runlettest.__impl.ASubRunletTestImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private runlettest.__impl.ASubRunletTestImpl getCastWrappedObject() {
        return (runlettest.__impl.ASubRunletTestImpl) getWrappedObject();
    }

    public runlettest.ASubRunletTest unwrap() {
        return (runlettest.ASubRunletTest) getWrappedObject();
    }
    
    public boolean exists(runlettest.Subcomponent _Sub, runlettest.RunletTest _RunletTest) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Sub), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _RunletTest));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Sub), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _RunletTest)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getSub(runlettest.RunletTest _RunletTest) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getSub(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _RunletTest)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getSub(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _RunletTest))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public runlettest.RunletTest getRunletTest(runlettest.Subcomponent _Sub) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (runlettest.RunletTest) wrapResult(getCastWrappedObject().getRunletTest(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Sub)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (runlettest.RunletTest) wrapResult(getCastWrappedObject().getRunletTest(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Sub))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(runlettest.Subcomponent _Sub, runlettest.RunletTest _RunletTest) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Sub), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _RunletTest));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Sub), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _RunletTest)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(runlettest.Subcomponent _Sub, runlettest.RunletTest _RunletTest) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Sub), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _RunletTest));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Sub), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _RunletTest)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<runlettest.ASubRunletTest> get___JmiInterface() {
        return runlettest.ASubRunletTest.class;
    }

    protected String metaObjectToString() {
        return "runlettest.ASubRunletTest (Java Type)\nrunlettest.A_sub_runletTest (MOF Type)"; //$NON-NLS-1$
    }    
}