/**
 * Generated by the MOIN Generator Version 3.0
 **/

package runlettest.__impl;

public class RunlettestPackageWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefPackageWrapperImpl<runlettest.__impl.RunlettestPackageImpl> implements runlettest.RunlettestPackage,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The RunlettestPackage wrapper
     */
    public RunlettestPackageWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, runlettest.__impl.RunlettestPackageImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    private runlettest.__impl.RunlettestPackageImpl getCastWrappedObject() {
        return (runlettest.__impl.RunlettestPackageImpl) getWrappedObject();
    }
    
    public runlettest.__impl.RunlettestPackageImpl unwrap() {
        return (runlettest.__impl.RunlettestPackageImpl) getWrappedObject();
    }
    
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getRunletTest()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getRunletTest(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getRunletTest(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getNamed()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getNamed(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getNamed(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getSubcomponent()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getSubcomponent(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getSubcomponent(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public runlettest.ASubRunletTest getASubRunletTest()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (runlettest.ASubRunletTest) wrapResult(getCastWrappedObject().getASubRunletTest(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (runlettest.ASubRunletTest) wrapResult(getCastWrappedObject().getASubRunletTest(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    // methods for structure type creators
    
    @SuppressWarnings("unchecked")
    public java.lang.Class<runlettest.RunlettestPackage> get___JmiInterface() {
        return runlettest.RunlettestPackage.class;
    }
    
    protected String metaObjectToString() {
        return "runlettest.RunlettestPackage (Java Type)\nrunlettest (MOF Type)"; //$NON-NLS-1$
    }
}