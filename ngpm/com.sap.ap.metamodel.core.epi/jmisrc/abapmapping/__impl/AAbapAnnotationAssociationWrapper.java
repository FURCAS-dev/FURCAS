/**
 * Generated by the MOIN Generator Version 3.0
 **/

package abapmapping.__impl;

public class AAbapAnnotationAssociationWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<abapmapping.AAbapAnnotationAssociation> implements abapmapping.AAbapAnnotationAssociation,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AAbapAnnotationAssociation wrapper
     */
    public AAbapAnnotationAssociationWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, abapmapping.__impl.AAbapAnnotationAssociationImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private abapmapping.__impl.AAbapAnnotationAssociationImpl getCastWrappedObject() {
        return (abapmapping.__impl.AAbapAnnotationAssociationImpl) getWrappedObject();
    }

    public abapmapping.AAbapAnnotationAssociation unwrap() {
        return (abapmapping.AAbapAnnotationAssociation) getWrappedObject();
    }
    
    public boolean exists(abapmapping.AbapAssociationImplementationAnnotation _AbapAnnotation, data.classes.Association _Association) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AbapAnnotation), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Association));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AbapAnnotation), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Association)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public abapmapping.AbapAssociationImplementationAnnotation getAbapAnnotation(data.classes.Association _Association) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (abapmapping.AbapAssociationImplementationAnnotation) wrapResult(getCastWrappedObject().getAbapAnnotation(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Association)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (abapmapping.AbapAssociationImplementationAnnotation) wrapResult(getCastWrappedObject().getAbapAnnotation(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Association))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public data.classes.Association getAssociation(abapmapping.AbapAssociationImplementationAnnotation _AbapAnnotation) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (data.classes.Association) wrapResult(getCastWrappedObject().getAssociation(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AbapAnnotation)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (data.classes.Association) wrapResult(getCastWrappedObject().getAssociation(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AbapAnnotation))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(abapmapping.AbapAssociationImplementationAnnotation _AbapAnnotation, data.classes.Association _Association) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AbapAnnotation), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Association));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AbapAnnotation), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Association)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(abapmapping.AbapAssociationImplementationAnnotation _AbapAnnotation, data.classes.Association _Association) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AbapAnnotation), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Association));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AbapAnnotation), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Association)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<abapmapping.AAbapAnnotationAssociation> get___JmiInterface() {
        return abapmapping.AAbapAnnotationAssociation.class;
    }

    protected String metaObjectToString() {
        return "abapmapping.AAbapAnnotationAssociation (Java Type)\nabapMapping.A_abapAnnotation_association (MOF Type)"; //$NON-NLS-1$
    }    
}