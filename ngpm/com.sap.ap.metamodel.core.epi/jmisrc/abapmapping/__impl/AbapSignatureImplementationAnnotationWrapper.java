/**
 * Generated by the MOIN Generator Version 3.0
 **/

package abapmapping.__impl;

public class AbapSignatureImplementationAnnotationWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefObjectWrapperImpl<abapmapping.__impl.AbapSignatureImplementationAnnotationImpl> implements abapmapping.AbapSignatureImplementationAnnotation,com.sap.tc.moin.repository.Partitionable {

    
    static {
    }

    public AbapSignatureImplementationAnnotationWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, abapmapping.__impl.AbapSignatureImplementationAnnotationImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    private abapmapping.__impl.AbapSignatureImplementationAnnotationImpl getCastWrappedObject() {
        return (abapmapping.__impl.AbapSignatureImplementationAnnotationImpl) getWrappedObject();
    }
    
    private abapmapping.__impl.AbapSignatureImplementationAnnotationImpl getCastWrappedObject(com.sap.tc.moin.repository.core.CorePartitionable resolved) {
        return (abapmapping.__impl.AbapSignatureImplementationAnnotationImpl) resolved;
    }
    
    public abapmapping.__impl.AbapSignatureImplementationAnnotationImpl unwrap() {
        return (abapmapping.__impl.AbapSignatureImplementationAnnotationImpl) getWrappedObject();
    }
        
    // methods for attributes
    public abapmapping.AbapSignatureKind getKind() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        com.sap.tc.moin.repository.core.CorePartitionable resolved = mriReference.getIfResolved();
        if (resolved != null) {
            return getCastWrappedObject(resolved).getKind();
        }
            try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().getKind();
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().getKind(); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public void setKind(abapmapping.AbapSignatureKind newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setKind(connection, newValue);
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setKind(connection, newValue);
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

     
    // methods for references
   
    // methods for modeled operations
    
    // methods for internal modeled operations

    // reflective methods
    

    // get the JMI interface
    public java.lang.Class<abapmapping.AbapSignatureImplementationAnnotation> get___JmiInterface() {
        return abapmapping.AbapSignatureImplementationAnnotation.class;
    }

    // to String
    protected String metaObjectToString() {
        return "abapmapping.AbapSignatureImplementationAnnotation (Java Type)\nabapMapping.AbapSignatureImplementationAnnotation (MOF Type)"; //$NON-NLS-1$
    }    
}