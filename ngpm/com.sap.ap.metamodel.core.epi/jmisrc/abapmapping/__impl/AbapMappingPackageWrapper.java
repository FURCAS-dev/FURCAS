/**
 * Generated by the MOIN Generator Version 3.0
 **/

package abapmapping.__impl;

public class AbapMappingPackageWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefPackageWrapperImpl<abapmapping.__impl.AbapMappingPackageImpl> implements abapmapping.AbapMappingPackage,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AbapMappingPackage wrapper
     */
    public AbapMappingPackageWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, abapmapping.__impl.AbapMappingPackageImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    private abapmapping.__impl.AbapMappingPackageImpl getCastWrappedObject() {
        return (abapmapping.__impl.AbapMappingPackageImpl) getWrappedObject();
    }
    
    public abapmapping.__impl.AbapMappingPackageImpl unwrap() {
        return (abapmapping.__impl.AbapMappingPackageImpl) getWrappedObject();
    }
    
    public abapmapping.abapdictionary.AbapDictionaryPackage getAbapDictionary()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (abapmapping.abapdictionary.AbapDictionaryPackage) wrapResult(getCastWrappedObject().getAbapDictionary(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (abapmapping.abapdictionary.AbapDictionaryPackage) wrapResult(getCastWrappedObject().getAbapDictionary(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getAbapClassImplementationAnnotation()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getAbapClassImplementationAnnotation(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getAbapClassImplementationAnnotation(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getAbapAssociationImplementationAnnotation()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getAbapAssociationImplementationAnnotation(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getAbapAssociationImplementationAnnotation(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getAbapAssociationEndImplementationAnnotation()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getAbapAssociationEndImplementationAnnotation(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getAbapAssociationEndImplementationAnnotation(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getAbapSignatureImplementationAnnotation()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getAbapSignatureImplementationAnnotation(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getAbapSignatureImplementationAnnotation(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public abapmapping.AAbapAnnotationSapClass getAAbapAnnotationSapClass()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (abapmapping.AAbapAnnotationSapClass) wrapResult(getCastWrappedObject().getAAbapAnnotationSapClass(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (abapmapping.AAbapAnnotationSapClass) wrapResult(getCastWrappedObject().getAAbapAnnotationSapClass(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public abapmapping.AAbapAnnotationAssociation getAAbapAnnotationAssociation()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (abapmapping.AAbapAnnotationAssociation) wrapResult(getCastWrappedObject().getAAbapAnnotationAssociation(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (abapmapping.AAbapAnnotationAssociation) wrapResult(getCastWrappedObject().getAAbapAnnotationAssociation(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public abapmapping.AAbapAnnotationAssociationEnd getAAbapAnnotationAssociationEnd()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (abapmapping.AAbapAnnotationAssociationEnd) wrapResult(getCastWrappedObject().getAAbapAnnotationAssociationEnd(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (abapmapping.AAbapAnnotationAssociationEnd) wrapResult(getCastWrappedObject().getAAbapAnnotationAssociationEnd(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public abapmapping.AAbapAnnotationSignature getAAbapAnnotationSignature()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (abapmapping.AAbapAnnotationSignature) wrapResult(getCastWrappedObject().getAAbapAnnotationSignature(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (abapmapping.AAbapAnnotationSignature) wrapResult(getCastWrappedObject().getAAbapAnnotationSignature(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public abapmapping.AAbapTypeAbapClassImplementationAnnotation getAAbapTypeAbapClassImplementationAnnotation()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (abapmapping.AAbapTypeAbapClassImplementationAnnotation) wrapResult(getCastWrappedObject().getAAbapTypeAbapClassImplementationAnnotation(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (abapmapping.AAbapTypeAbapClassImplementationAnnotation) wrapResult(getCastWrappedObject().getAAbapTypeAbapClassImplementationAnnotation(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    // methods for structure type creators
    
    @SuppressWarnings("unchecked")
    public java.lang.Class<abapmapping.AbapMappingPackage> get___JmiInterface() {
        return abapmapping.AbapMappingPackage.class;
    }
    
    protected String metaObjectToString() {
        return "abapmapping.AbapMappingPackage (Java Type)\nabapMapping (MOF Type)"; //$NON-NLS-1$
    }
}