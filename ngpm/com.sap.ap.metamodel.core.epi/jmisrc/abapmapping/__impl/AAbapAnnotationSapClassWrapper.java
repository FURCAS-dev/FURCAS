/**
 * Generated by the MOIN Generator Version 3.0
 **/

package abapmapping.__impl;

public class AAbapAnnotationSapClassWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<abapmapping.AAbapAnnotationSapClass> implements abapmapping.AAbapAnnotationSapClass,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AAbapAnnotationSapClass wrapper
     */
    public AAbapAnnotationSapClassWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, abapmapping.__impl.AAbapAnnotationSapClassImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private abapmapping.__impl.AAbapAnnotationSapClassImpl getCastWrappedObject() {
        return (abapmapping.__impl.AAbapAnnotationSapClassImpl) getWrappedObject();
    }

    public abapmapping.AAbapAnnotationSapClass unwrap() {
        return (abapmapping.AAbapAnnotationSapClass) getWrappedObject();
    }
    
    public boolean exists(abapmapping.AbapClassImplementationAnnotation _AbapAnnotation, data.classes.SapClass _SapClass) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AbapAnnotation), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SapClass));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AbapAnnotation), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SapClass)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public abapmapping.AbapClassImplementationAnnotation getAbapAnnotation(data.classes.SapClass _SapClass) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (abapmapping.AbapClassImplementationAnnotation) wrapResult(getCastWrappedObject().getAbapAnnotation(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SapClass)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (abapmapping.AbapClassImplementationAnnotation) wrapResult(getCastWrappedObject().getAbapAnnotation(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SapClass))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public data.classes.SapClass getSapClass(abapmapping.AbapClassImplementationAnnotation _AbapAnnotation) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (data.classes.SapClass) wrapResult(getCastWrappedObject().getSapClass(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AbapAnnotation)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (data.classes.SapClass) wrapResult(getCastWrappedObject().getSapClass(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AbapAnnotation))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(abapmapping.AbapClassImplementationAnnotation _AbapAnnotation, data.classes.SapClass _SapClass) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AbapAnnotation), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SapClass));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AbapAnnotation), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SapClass)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(abapmapping.AbapClassImplementationAnnotation _AbapAnnotation, data.classes.SapClass _SapClass) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AbapAnnotation), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SapClass));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AbapAnnotation), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SapClass)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<abapmapping.AAbapAnnotationSapClass> get___JmiInterface() {
        return abapmapping.AAbapAnnotationSapClass.class;
    }

    protected String metaObjectToString() {
        return "abapmapping.AAbapAnnotationSapClass (Java Type)\nabapMapping.A_abapAnnotation_sapClass (MOF Type)"; //$NON-NLS-1$
    }    
}