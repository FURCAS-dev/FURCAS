/**
 * Generated by the MOIN Generator Version 3.0
 **/

package abapmapping.abapdictionary.__impl;

public final class AbapDictionaryPackageImpl extends com.sap.tc.moin.repository.core.jmi.reflect.RefPackageImpl
{
        
    public static final java.util.Map<java.lang.String, java.lang.Integer> FEATURE_IDS;
    
    static {
        
        FEATURE_IDS = new java.util.HashMap<java.lang.String, java.lang.Integer>(20);
        FEATURE_IDS.put("XsdType", Integer.valueOf(0)); //$NON-NLS-1$
        FEATURE_IDS.put("UnstructuredAbapType", Integer.valueOf(1)); //$NON-NLS-1$
        FEATURE_IDS.put("CodeValue", Integer.valueOf(2)); //$NON-NLS-1$
        FEATURE_IDS.put("Code", Integer.valueOf(3)); //$NON-NLS-1$
        FEATURE_IDS.put("DataElement", Integer.valueOf(4)); //$NON-NLS-1$
        FEATURE_IDS.put("AbapType", Integer.valueOf(5)); //$NON-NLS-1$
        FEATURE_IDS.put("AbapStructureType", Integer.valueOf(6)); //$NON-NLS-1$
        FEATURE_IDS.put("AbapStructureField", Integer.valueOf(7)); //$NON-NLS-1$
        FEATURE_IDS.put("AbapPrimtiveType", Integer.valueOf(8)); //$NON-NLS-1$
        FEATURE_IDS.put("AbapStructureFields", Integer.valueOf(9)); //$NON-NLS-1$
        FEATURE_IDS.put("AbapStructureFieldType", Integer.valueOf(10)); //$NON-NLS-1$
        FEATURE_IDS.put("AbapTypeXsdType", Integer.valueOf(11)); //$NON-NLS-1$
        FEATURE_IDS.put("CodeValues", Integer.valueOf(12)); //$NON-NLS-1$
        FEATURE_IDS.put("DataElementAbapType", Integer.valueOf(13)); //$NON-NLS-1$
        FEATURE_IDS.put("CodeValueType", Integer.valueOf(14)); //$NON-NLS-1$
    }

    // constructors    
    public AbapDictionaryPackageImpl()
    {
        super();
    }
    public AbapDictionaryPackageImpl(java.lang.Object workspace, java.lang.String mofId, com.sap.tc.moin.repository.mmi.reflect.RefPackage immediatePackage, com.sap.tc.moin.repository.mmi.reflect.RefObject metaObject)
    {
        super(workspace, mofId, immediatePackage, metaObject);
    }
    // internal enumeration creators
    // internal structure type creators
    // nested packages
    // classes
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getXsdType(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "XsdType"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getUnstructuredAbapType(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "UnstructuredAbapType"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getCodeValue(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "CodeValue"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getCode(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Code"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getDataElement(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "DataElement"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getAbapType(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "AbapType"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getAbapStructureType(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "AbapStructureType"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getAbapStructureField(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "AbapStructureField"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getAbapPrimtiveType(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "AbapPrimtiveType"); //$NON-NLS-1$
    }
    // associations
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getAbapStructureFields(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "AbapStructureFields"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getAbapStructureFieldType(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "AbapStructureFieldType"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getAbapTypeXsdType(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "AbapTypeXsdType"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getCodeValues(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "CodeValues"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getDataElementAbapType(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "DataElementAbapType"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getCodeValueType(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "CodeValueType"); //$NON-NLS-1$
    }
    // structure type creators

    protected java.lang.Object create___Extent(java.lang.Object workspace, java.lang.String mofId, com.sap.tc.moin.repository.mmi.reflect.RefPackage immediatePackage, com.sap.tc.moin.repository.mmi.reflect.RefObject metaObject) {
        java.lang.String name = ((com.sap.tc.moin.repository.mmi.model.ModelElement) metaObject).getName();
        com.sap.tc.moin.repository.mmi.reflect.RefBaseObject result = null;
        try {
            switch (FEATURE_IDS.get(name)) {
                case 0:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("abapmapping.abapdictionary.__impl.XsdTypeImpl")); //$NON-NLS-1$
                case 1:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("abapmapping.abapdictionary.__impl.UnstructuredAbapTypeImpl")); //$NON-NLS-1$
                case 2:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("abapmapping.abapdictionary.__impl.CodeValueImpl")); //$NON-NLS-1$
                case 3:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("abapmapping.abapdictionary.__impl.CodeImpl")); //$NON-NLS-1$
                case 4:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("abapmapping.abapdictionary.__impl.DataElementImpl")); //$NON-NLS-1$
                case 5:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("abapmapping.abapdictionary.__impl.AbapTypeImpl")); //$NON-NLS-1$
                case 6:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("abapmapping.abapdictionary.__impl.AbapStructureTypeImpl")); //$NON-NLS-1$
                case 7:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("abapmapping.abapdictionary.__impl.AbapStructureFieldImpl")); //$NON-NLS-1$
                case 8:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("abapmapping.abapdictionary.__impl.AbapPrimtiveTypeImpl")); //$NON-NLS-1$
                case 9:
                    return new abapmapping.abapdictionary.__impl.AbapStructureFieldsImpl(workspace, mofId, immediatePackage, metaObject);
                case 10:
                    return new abapmapping.abapdictionary.__impl.AbapStructureFieldTypeImpl(workspace, mofId, immediatePackage, metaObject);
                case 11:
                    return new abapmapping.abapdictionary.__impl.AbapTypeXsdTypeImpl(workspace, mofId, immediatePackage, metaObject);
                case 12:
                    return new abapmapping.abapdictionary.__impl.CodeValuesImpl(workspace, mofId, immediatePackage, metaObject);
                case 13:
                    return new abapmapping.abapdictionary.__impl.DataElementAbapTypeImpl(workspace, mofId, immediatePackage, metaObject);
                case 14:
                    return new abapmapping.abapdictionary.__impl.CodeValueTypeImpl(workspace, mofId, immediatePackage, metaObject);
                default:
                    throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException(name, null, "create___Extent()"); //$NON-NLS-1$
        }
        }
        catch(com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            throw ex;
        }
        catch(java.lang.Exception ex) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }        
    }

    public java.lang.Class<abapmapping.abapdictionary.AbapDictionaryPackage> get___JmiInterface() {
        return abapmapping.abapdictionary.AbapDictionaryPackage.class;
    }
    
    protected void initialize() {
        if (___refPackages == null) {
            ___refPackages = new java.util.ArrayList<RefPackageAndName>(0);
            ___refPackagesByName = new java.util.HashMap<String, RefPackageAndName>();
            java.lang.String name = ""; //$NON-NLS-1$
            RefPackageAndName rpan = null;
        }
  
        if (___refClasses == null) {
            ___refClasses = new java.util.ArrayList<RefClassAndName>(9);
            ___refClassesByName = new java.util.HashMap<String, RefClassAndName>();
            java.lang.String name = ""; //$NON-NLS-1$
            RefClassAndName rcan = null;
            name = "XsdType"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "abapmapping.abapdictionary.XsdType"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "UnstructuredAbapType"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "abapmapping.abapdictionary.UnstructuredAbapType"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "CodeValue"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "abapmapping.abapdictionary.CodeValue"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Code"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "abapmapping.abapdictionary.Code"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "DataElement"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "abapmapping.abapdictionary.DataElement"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "AbapType"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "abapmapping.abapdictionary.AbapType"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "AbapStructureType"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "abapmapping.abapdictionary.AbapStructureType"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "AbapStructureField"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "abapmapping.abapdictionary.AbapStructureField"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "AbapPrimtiveType"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "abapmapping.abapdictionary.AbapPrimtiveType"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
        }
  
        if (___refAssociations == null) {
            ___refAssociations = new java.util.ArrayList<RefAssociationAndName>(6);
            ___refAssociationsByName = new java.util.HashMap<String, RefAssociationAndName>();
            java.lang.String name = ""; //$NON-NLS-1$
            RefAssociationAndName raan = null;
            name = "AbapStructureFields"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "abapmapping.abapdictionary.AbapStructureFields"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "AbapStructureFieldType"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "abapmapping.abapdictionary.AbapStructureFieldType"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "AbapTypeXsdType"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "abapmapping.abapdictionary.AbapTypeXsdType"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "CodeValues"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "abapmapping.abapdictionary.CodeValues"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "DataElementAbapType"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "abapmapping.abapdictionary.DataElementAbapType"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "CodeValueType"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "abapmapping.abapdictionary.CodeValueType"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
        }
    }
    
    @Override
    public com.sap.tc.moin.repository.spi.core.Wrapper<abapmapping.abapdictionary.__impl.AbapDictionaryPackageImpl> createWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, boolean synchronize) {
        return new abapmapping.abapdictionary.__impl.AbapDictionaryPackageWrapper(conn, this, synchronize);
    }

}