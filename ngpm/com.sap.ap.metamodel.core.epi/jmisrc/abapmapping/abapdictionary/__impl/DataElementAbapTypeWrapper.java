/**
 * Generated by the MOIN Generator Version 3.0
 **/

package abapmapping.abapdictionary.__impl;

public class DataElementAbapTypeWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<abapmapping.abapdictionary.DataElementAbapType> implements abapmapping.abapdictionary.DataElementAbapType,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The DataElementAbapType wrapper
     */
    public DataElementAbapTypeWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, abapmapping.abapdictionary.__impl.DataElementAbapTypeImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private abapmapping.abapdictionary.__impl.DataElementAbapTypeImpl getCastWrappedObject() {
        return (abapmapping.abapdictionary.__impl.DataElementAbapTypeImpl) getWrappedObject();
    }

    public abapmapping.abapdictionary.DataElementAbapType unwrap() {
        return (abapmapping.abapdictionary.DataElementAbapType) getWrappedObject();
    }
    
    public boolean exists(abapmapping.abapdictionary.AbapPrimtiveType _AbapType, abapmapping.abapdictionary.DataElement _DataElement) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AbapType), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _DataElement));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AbapType), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _DataElement)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public abapmapping.abapdictionary.AbapPrimtiveType getAbapType(abapmapping.abapdictionary.DataElement _DataElement) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (abapmapping.abapdictionary.AbapPrimtiveType) wrapResult(getCastWrappedObject().getAbapType(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _DataElement)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (abapmapping.abapdictionary.AbapPrimtiveType) wrapResult(getCastWrappedObject().getAbapType(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _DataElement))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getDataElement(abapmapping.abapdictionary.AbapPrimtiveType _AbapType) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getDataElement(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AbapType)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getDataElement(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AbapType))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(abapmapping.abapdictionary.AbapPrimtiveType _AbapType, abapmapping.abapdictionary.DataElement _DataElement) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AbapType), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _DataElement));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AbapType), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _DataElement)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(abapmapping.abapdictionary.AbapPrimtiveType _AbapType, abapmapping.abapdictionary.DataElement _DataElement) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AbapType), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _DataElement));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AbapType), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _DataElement)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<abapmapping.abapdictionary.DataElementAbapType> get___JmiInterface() {
        return abapmapping.abapdictionary.DataElementAbapType.class;
    }

    protected String metaObjectToString() {
        return "abapmapping.abapdictionary.DataElementAbapType (Java Type)\nabapMapping.AbapDictionary.DataElementAbapType (MOF Type)"; //$NON-NLS-1$
    }    
}