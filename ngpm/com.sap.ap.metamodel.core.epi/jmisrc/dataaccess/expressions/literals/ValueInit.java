/**
 * Generated by the MOIN Generator Version 3.0
 **/

package dataaccess.expressions.literals;

/**
 * Provides an initialization value for an association end whose other end is attached to a value class. The expression's type must conform to the association end's type.
 * This interface is not intended to be implemented by clients.
 */
public interface ValueInit extends com.sap.tc.moin.repository.mmi.reflect.RefObject {

    /**
     * Descriptors for all features of this MofClass and its supertypes.
     */
    public static final Descriptors DESCRIPTORS = new Descriptors( );

    // class extent descriptor
    /**
     * Extent descriptor
     */
    public final com.sap.tc.moin.repository.mmi.descriptors.ClassDescriptor<com.sap.tc.moin.repository.mmi.reflect.RefClass, dataaccess.expressions.literals.ValueInit> CLASS_DESCRIPTOR = new com.sap.tc.moin.repository.mmi.descriptors.ClassDescriptor<com.sap.tc.moin.repository.mmi.reflect.RefClass, dataaccess.expressions.literals.ValueInit>("E075D95551F05DF53E4B11DECB730018DE1146FF", "sap.com/moin/mm/ap/core", "dataaccess", "expressions", "literals", "ValueInit"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 

    
    // references
    public data.classes.AssociationEnd getForEnd() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public void setForEnd(data.classes.AssociationEnd newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public dataaccess.expressions.Expression getValue() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public void setValue(dataaccess.expressions.Expression newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;


    public static final class Descriptors {
        Descriptors( ) { 
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,dataaccess.expressions.literals.ValueInit,data.classes.AssociationEnd> __forEnd;
        /**
         * Returns the descriptor for the <code>forEnd</code> reference.
         * @return  the descriptor for the <code>forEnd</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,dataaccess.expressions.literals.ValueInit,data.classes.AssociationEnd> FOR_END( ) {
            if ( __forEnd == null ) {
                __forEnd = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,dataaccess.expressions.literals.ValueInit,data.classes.AssociationEnd>( "E075D95551F05DF33E4B11DE835B0018DE1146FF", "sap.com/moin/mm/ap/core", new java.lang.String[] { "dataaccess", "expressions", "literals", "ValueInit", "forEnd" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ //$NON-NLS-7$ 
            }
            return __forEnd;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,dataaccess.expressions.literals.ValueInit,dataaccess.expressions.Expression> __value;
        /**
         * Returns the descriptor for the <code>value</code> reference.
         * @return  the descriptor for the <code>value</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,dataaccess.expressions.literals.ValueInit,dataaccess.expressions.Expression> VALUE( ) {
            if ( __value == null ) {
                __value = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,dataaccess.expressions.literals.ValueInit,dataaccess.expressions.Expression>( "E075D95551F05DF43E4B11DECED20018DE1146FF", "sap.com/moin/mm/ap/core", new java.lang.String[] { "dataaccess", "expressions", "literals", "ValueInit", "value" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ //$NON-NLS-7$ 
            }
            return __value;
        }
    }
}    