/**
 * Generated by the MOIN Generator Version 3.0
 **/

package dataaccess.expressions.literals.__impl;

public class APropertyValuesObjectLiteralWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<dataaccess.expressions.literals.APropertyValuesObjectLiteral> implements dataaccess.expressions.literals.APropertyValuesObjectLiteral,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The APropertyValuesObjectLiteral wrapper
     */
    public APropertyValuesObjectLiteralWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, dataaccess.expressions.literals.__impl.APropertyValuesObjectLiteralImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private dataaccess.expressions.literals.__impl.APropertyValuesObjectLiteralImpl getCastWrappedObject() {
        return (dataaccess.expressions.literals.__impl.APropertyValuesObjectLiteralImpl) getWrappedObject();
    }

    public dataaccess.expressions.literals.APropertyValuesObjectLiteral unwrap() {
        return (dataaccess.expressions.literals.APropertyValuesObjectLiteral) getWrappedObject();
    }
    
    public boolean exists(dataaccess.expressions.literals.ValueInit _PropertyValues, dataaccess.expressions.literals.ObjectLiteral _ObjectLiteral) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _PropertyValues), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ObjectLiteral));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _PropertyValues), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ObjectLiteral)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getPropertyValues(dataaccess.expressions.literals.ObjectLiteral _ObjectLiteral) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getPropertyValues(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ObjectLiteral)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getPropertyValues(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ObjectLiteral))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public dataaccess.expressions.literals.ObjectLiteral getObjectLiteral(dataaccess.expressions.literals.ValueInit _PropertyValues) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (dataaccess.expressions.literals.ObjectLiteral) wrapResult(getCastWrappedObject().getObjectLiteral(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _PropertyValues)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (dataaccess.expressions.literals.ObjectLiteral) wrapResult(getCastWrappedObject().getObjectLiteral(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _PropertyValues))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(dataaccess.expressions.literals.ValueInit _PropertyValues, dataaccess.expressions.literals.ObjectLiteral _ObjectLiteral) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _PropertyValues), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ObjectLiteral));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _PropertyValues), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ObjectLiteral)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(dataaccess.expressions.literals.ValueInit _PropertyValues, dataaccess.expressions.literals.ObjectLiteral _ObjectLiteral) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _PropertyValues), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ObjectLiteral));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _PropertyValues), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ObjectLiteral)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<dataaccess.expressions.literals.APropertyValuesObjectLiteral> get___JmiInterface() {
        return dataaccess.expressions.literals.APropertyValuesObjectLiteral.class;
    }

    protected String metaObjectToString() {
        return "dataaccess.expressions.literals.APropertyValuesObjectLiteral (Java Type)\ndataaccess.expressions.literals.A_propertyValues_objectLiteral (MOF Type)"; //$NON-NLS-1$
    }    
}