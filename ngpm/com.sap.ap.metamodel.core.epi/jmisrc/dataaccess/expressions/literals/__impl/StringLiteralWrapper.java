/**
 * Generated by the MOIN Generator Version 3.0
 **/

package dataaccess.expressions.literals.__impl;

public class StringLiteralWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefObjectWrapperImpl<dataaccess.expressions.literals.__impl.StringLiteralImpl> implements dataaccess.expressions.literals.StringLiteral,com.sap.tc.moin.repository.Partitionable {

        
    private static final java.util.Map<java.lang.String, java.lang.Integer> OPERATION_IDS;

    static {
        
        OPERATION_IDS = new java.util.HashMap<java.lang.String, java.lang.Integer>();
        OPERATION_IDS.put("conformsTo", Integer.valueOf(0)); //$NON-NLS-1$
        OPERATION_IDS.put("getType", Integer.valueOf(1)); //$NON-NLS-1$
        OPERATION_IDS.put("isSideEffectFree", Integer.valueOf(2)); //$NON-NLS-1$
        OPERATION_IDS.put("evaluatesToEqualAs", Integer.valueOf(3)); //$NON-NLS-1$
        OPERATION_IDS.put("getUsedAliases", Integer.valueOf(4)); //$NON-NLS-1$
    }

    public StringLiteralWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, dataaccess.expressions.literals.__impl.StringLiteralImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    @SuppressWarnings("unused")
    private dataaccess.expressions.literals.__impl.StringLiteralImpl getCastWrappedObject() {
        return (dataaccess.expressions.literals.__impl.StringLiteralImpl) getWrappedObject();
    }
    
    private dataaccess.expressions.literals.__impl.StringLiteralImpl getCastWrappedObject(com.sap.tc.moin.repository.core.CorePartitionable resolved) {
        return (dataaccess.expressions.literals.__impl.StringLiteralImpl) resolved;
    }
    
    public dataaccess.expressions.literals.__impl.StringLiteralImpl unwrap() {
        return (dataaccess.expressions.literals.__impl.StringLiteralImpl) getWrappedObject();
    }
        
    // methods for attributes
    public java.lang.String getLiteral() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        com.sap.tc.moin.repository.core.CorePartitionable resolved = mriReference.getIfResolved();
        if (resolved != null) {
            return getCastWrappedObject(resolved).getLiteral();
        }
            try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().getLiteral();
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().getLiteral(); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public void setLiteral(java.lang.String newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setLiteral(connection, newValue);
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setLiteral(connection, newValue);
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

     
    // methods for references
    public data.classes.TypeDefinition getOwnedTypeDefinition() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (data.classes.TypeDefinition) wrapResult(getCastWrappedObject().getOwnedTypeDefinition(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (data.classes.TypeDefinition) wrapResult(getCastWrappedObject().getOwnedTypeDefinition(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setOwnedTypeDefinition(data.classes.TypeDefinition newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setOwnedTypeDefinition(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setOwnedTypeDefinition(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

   
    // methods for modeled operations
    public boolean conformsTo(data.classes.TypedElement typedElement) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(1);
        try {
            parameterList.add(typedElement);
            return (java.lang.Boolean)___invokeOperation(connection, 0, "E0234C8C51E6C0CF3E4B11DEBC9F0018DE1146FF", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public data.classes.TypeDefinition getType() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (data.classes.TypeDefinition)___invokeOperation(connection, 1, "E0234C8C51E6C0D13E4B11DE9FD60018DE1146FF", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public boolean isSideEffectFree() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.lang.Boolean)___invokeOperation(connection, 2, "E075D95551F2A7C93E4B11DEB0AF0018DE1146FF", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public boolean evaluatesToEqualAs(dataaccess.expressions.Expression e) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(1);
        try {
            parameterList.add(e);
            return (java.lang.Boolean)___invokeOperation(connection, 3, "E075D95551F2A7CC3E4B11DE809E0018DE1146FF", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public java.util.Collection<behavioral.actions.Iterator> getUsedAliases() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.util.Collection<behavioral.actions.Iterator>)___invokeOperation(connection, 4, "E075D955691D7570E97411DEAD8DF6740A140E7A", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    
    // methods for internal modeled operations
    private boolean invoke__conformsTo(com.sap.tc.moin.repository.core.CoreConnection connection, data.classes.TypedElement typedElement) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            operationParameters.put("typedElement", unwrapArg(typedElement));
            return ((java.lang.Boolean)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "conformsTo", getCastWrappedObject( ), operationParameters))).booleanValue();
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }
    private data.classes.TypeDefinition invoke__getType(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            return (data.classes.TypeDefinition)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "getType", getCastWrappedObject( ), operationParameters));
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }
    private boolean invoke__isSideEffectFree(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            return ((java.lang.Boolean)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "isSideEffectFree", getCastWrappedObject( ), operationParameters))).booleanValue();
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }
    private boolean invoke__evaluatesToEqualAs(com.sap.tc.moin.repository.core.CoreConnection connection, dataaccess.expressions.Expression e) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            operationParameters.put("e", unwrapArg(e));
            return ((java.lang.Boolean)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "evaluatesToEqualAs", getCastWrappedObject( ), operationParameters))).booleanValue();
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }
    private java.util.Collection<behavioral.actions.Iterator> invoke__getUsedAliases(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            return (java.util.Collection)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "getUsedAliases", getCastWrappedObject( ), operationParameters));
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }

    // reflective methods
    @Override
    public Object refInvokeOperation(com.sap.tc.moin.repository.core.CoreConnection connection, java.lang.String requestedOperation, java.util.List<? extends Object> args) throws com.sap.tc.moin.repository.mmi.reflect.RefException {
        if (requestedOperation == null) {
            throw new com.sap.tc.moin.repository.mmi.reflect.InvalidNameException(requestedOperation);
        }
        java.lang.Integer operationId = OPERATION_IDS.get(requestedOperation);
        if (operationId == null) {
            throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException(requestedOperation, refMetaObject(), "refInvokeOperation(String)"); //$NON-NLS-1$
        }
        switch (operationId) {
                
            case 0:
                return ___invokeOperation( connection, operationId, "E0234C8C51E6C0CF3E4B11DEBC9F0018DE1146FF", args ); //$NON-NLS-1$    
                
            case 1:
                return ___invokeOperation( connection, operationId, "E0234C8C51E6C0D13E4B11DE9FD60018DE1146FF", args ); //$NON-NLS-1$    
                
            case 2:
                return ___invokeOperation( connection, operationId, "E075D95551F2A7C93E4B11DEB0AF0018DE1146FF", args ); //$NON-NLS-1$    
                
            case 3:
                return ___invokeOperation( connection, operationId, "E075D95551F2A7CC3E4B11DE809E0018DE1146FF", args ); //$NON-NLS-1$    
                
            case 4:
                return ___invokeOperation( connection, operationId, "E075D955691D7570E97411DEAD8DF6740A140E7A", args ); //$NON-NLS-1$    
            default:
                throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException(requestedOperation, refMetaObject(), "refInvokeOperation(String)"); //$NON-NLS-1$
        }
    }

    @Override
    public Object invoke___Operation(com.sap.tc.moin.repository.core.CoreConnection connection, int operationId, java.util.List<? extends Object> args) throws com.sap.tc.moin.repository.mmi.reflect.RefException {
        switch (operationId) {
                
            case 0:
                return invoke__conformsTo(connection, (data.classes.TypedElement) args.get(0));    
                
            case 1:
                return invoke__getType(connection);    
                
            case 2:
                return invoke__isSideEffectFree(connection);    
                
            case 3:
                return invoke__evaluatesToEqualAs(connection, (dataaccess.expressions.Expression) args.get(0));    
                
            case 4:
                return invoke__getUsedAliases(connection);    
            default:
                throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException( operationId, refMetaObject( ), "invoke___Operation(int)"); //$NON-NLS-1$
        }

    }    

    // get the JMI interface
    @SuppressWarnings("unchecked")
    public java.lang.Class<dataaccess.expressions.literals.StringLiteral> get___JmiInterface() {
        return dataaccess.expressions.literals.StringLiteral.class;
    }

    // to String
    protected String metaObjectToString() {
        return "dataaccess.expressions.literals.StringLiteral (Java Type)\ndataaccess.expressions.literals.StringLiteral (MOF Type)"; //$NON-NLS-1$
    }    
}