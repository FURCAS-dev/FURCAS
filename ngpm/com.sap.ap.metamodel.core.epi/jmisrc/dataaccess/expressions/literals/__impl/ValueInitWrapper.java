/**
 * Generated by the MOIN Generator Version 3.0
 **/

package dataaccess.expressions.literals.__impl;

public class ValueInitWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefObjectWrapperImpl<dataaccess.expressions.literals.__impl.ValueInitImpl> implements dataaccess.expressions.literals.ValueInit,com.sap.tc.moin.repository.Partitionable {


    static {
    }

    public ValueInitWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, dataaccess.expressions.literals.__impl.ValueInitImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    @SuppressWarnings("unused")
    private dataaccess.expressions.literals.__impl.ValueInitImpl getCastWrappedObject() {
        return (dataaccess.expressions.literals.__impl.ValueInitImpl) getWrappedObject();
    }
    
    public dataaccess.expressions.literals.__impl.ValueInitImpl unwrap() {
        return (dataaccess.expressions.literals.__impl.ValueInitImpl) getWrappedObject();
    }
        
    // methods for attributes
     
    // methods for references
    public data.classes.AssociationEnd getForEnd() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (data.classes.AssociationEnd) wrapResult(getCastWrappedObject().getForEnd(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (data.classes.AssociationEnd) wrapResult(getCastWrappedObject().getForEnd(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setForEnd(data.classes.AssociationEnd newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setForEnd(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setForEnd(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public dataaccess.expressions.Expression getValue() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (dataaccess.expressions.Expression) wrapResult(getCastWrappedObject().getValue(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (dataaccess.expressions.Expression) wrapResult(getCastWrappedObject().getValue(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setValue(dataaccess.expressions.Expression newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setValue(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setValue(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

   
    // methods for modeled operations
    
    // methods for internal modeled operations

    // reflective methods
    

    // get the JMI interface
    @SuppressWarnings("unchecked")
    public java.lang.Class<dataaccess.expressions.literals.ValueInit> get___JmiInterface() {
        return dataaccess.expressions.literals.ValueInit.class;
    }

    // to String
    protected String metaObjectToString() {
        return "dataaccess.expressions.literals.ValueInit (Java Type)\ndataaccess.expressions.literals.ValueInit (MOF Type)"; //$NON-NLS-1$
    }    
}