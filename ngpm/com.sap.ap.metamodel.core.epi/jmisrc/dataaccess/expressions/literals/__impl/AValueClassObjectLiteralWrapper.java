/**
 * Generated by the MOIN Generator Version 3.0
 **/

package dataaccess.expressions.literals.__impl;

public class AValueClassObjectLiteralWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<dataaccess.expressions.literals.AValueClassObjectLiteral> implements dataaccess.expressions.literals.AValueClassObjectLiteral,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AValueClassObjectLiteral wrapper
     */
    public AValueClassObjectLiteralWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, dataaccess.expressions.literals.__impl.AValueClassObjectLiteralImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private dataaccess.expressions.literals.__impl.AValueClassObjectLiteralImpl getCastWrappedObject() {
        return (dataaccess.expressions.literals.__impl.AValueClassObjectLiteralImpl) getWrappedObject();
    }

    public dataaccess.expressions.literals.AValueClassObjectLiteral unwrap() {
        return (dataaccess.expressions.literals.AValueClassObjectLiteral) getWrappedObject();
    }
    
    public boolean exists(data.classes.SapClass _ValueClass, dataaccess.expressions.literals.ObjectLiteral _ObjectLiteral) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ValueClass), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ObjectLiteral));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ValueClass), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ObjectLiteral)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public data.classes.SapClass getValueClass(dataaccess.expressions.literals.ObjectLiteral _ObjectLiteral) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (data.classes.SapClass) wrapResult(getCastWrappedObject().getValueClass(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ObjectLiteral)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (data.classes.SapClass) wrapResult(getCastWrappedObject().getValueClass(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ObjectLiteral))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getObjectLiteral(data.classes.SapClass _ValueClass) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getObjectLiteral(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ValueClass)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getObjectLiteral(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ValueClass))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(data.classes.SapClass _ValueClass, dataaccess.expressions.literals.ObjectLiteral _ObjectLiteral) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ValueClass), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ObjectLiteral));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ValueClass), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ObjectLiteral)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(data.classes.SapClass _ValueClass, dataaccess.expressions.literals.ObjectLiteral _ObjectLiteral) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ValueClass), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ObjectLiteral));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ValueClass), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ObjectLiteral)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<dataaccess.expressions.literals.AValueClassObjectLiteral> get___JmiInterface() {
        return dataaccess.expressions.literals.AValueClassObjectLiteral.class;
    }

    protected String metaObjectToString() {
        return "dataaccess.expressions.literals.AValueClassObjectLiteral (Java Type)\ndataaccess.expressions.literals.A_valueClass_objectLiteral (MOF Type)"; //$NON-NLS-1$
    }    
}