/**
 * Generated by the MOIN Generator Version 3.0
 **/

package dataaccess.expressions.literals.__impl;

public final class LiteralsPackageImpl extends com.sap.tc.moin.repository.core.jmi.reflect.RefPackageImpl
{
        
    public static final java.util.Map<java.lang.String, java.lang.Integer> FEATURE_IDS;
    
    static {
        
        FEATURE_IDS = new java.util.HashMap<java.lang.String, java.lang.Integer>(16);
        FEATURE_IDS.put("Literal", Integer.valueOf(0)); //$NON-NLS-1$
        FEATURE_IDS.put("BinaryLiteral", Integer.valueOf(1)); //$NON-NLS-1$
        FEATURE_IDS.put("StringLiteral", Integer.valueOf(2)); //$NON-NLS-1$
        FEATURE_IDS.put("NumberLiteral", Integer.valueOf(3)); //$NON-NLS-1$
        FEATURE_IDS.put("TimePointLiteral", Integer.valueOf(4)); //$NON-NLS-1$
        FEATURE_IDS.put("BooleanLiteral", Integer.valueOf(5)); //$NON-NLS-1$
        FEATURE_IDS.put("ObjectLiteral", Integer.valueOf(6)); //$NON-NLS-1$
        FEATURE_IDS.put("ValueInit", Integer.valueOf(7)); //$NON-NLS-1$
        FEATURE_IDS.put("A_valueClass_objectLiteral", Integer.valueOf(8)); //$NON-NLS-1$
        FEATURE_IDS.put("A_propertyValues_objectLiteral", Integer.valueOf(9)); //$NON-NLS-1$
        FEATURE_IDS.put("A_forEnd_valueInit", Integer.valueOf(10)); //$NON-NLS-1$
        FEATURE_IDS.put("A_value_valueInit", Integer.valueOf(11)); //$NON-NLS-1$
    }

    // constructors    
    public LiteralsPackageImpl()
    {
        super();
    }
    public LiteralsPackageImpl(java.lang.Object workspace, java.lang.String mofId, com.sap.tc.moin.repository.mmi.reflect.RefPackage immediatePackage, com.sap.tc.moin.repository.mmi.reflect.RefObject metaObject)
    {
        super(workspace, mofId, immediatePackage, metaObject);
    }
    // internal enumeration creators
    // internal structure type creators
    // nested packages
    // classes
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getLiteral(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Literal"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getBinaryLiteral(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "BinaryLiteral"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getStringLiteral(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "StringLiteral"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getNumberLiteral(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "NumberLiteral"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getTimePointLiteral(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "TimePointLiteral"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getBooleanLiteral(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "BooleanLiteral"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getObjectLiteral(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "ObjectLiteral"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getValueInit(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "ValueInit"); //$NON-NLS-1$
    }
    // associations
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getAValueClassObjectLiteral(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "A_valueClass_objectLiteral"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getAPropertyValuesObjectLiteral(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "A_propertyValues_objectLiteral"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getAForEndValueInit(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "A_forEnd_valueInit"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getAValueValueInit(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "A_value_valueInit"); //$NON-NLS-1$
    }
    // structure type creators

    protected java.lang.Object create___Extent(java.lang.Object workspace, java.lang.String mofId, com.sap.tc.moin.repository.mmi.reflect.RefPackage immediatePackage, com.sap.tc.moin.repository.mmi.reflect.RefObject metaObject) {
        java.lang.String name = ((com.sap.tc.moin.repository.mmi.model.ModelElement) metaObject).getName();
        com.sap.tc.moin.repository.mmi.reflect.RefBaseObject result = null;
        try {
            switch (FEATURE_IDS.get(name)) {
                case 0:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("dataaccess.expressions.literals.__impl.LiteralImpl")); //$NON-NLS-1$
                case 1:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("dataaccess.expressions.literals.__impl.BinaryLiteralImpl")); //$NON-NLS-1$
                case 2:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("dataaccess.expressions.literals.__impl.StringLiteralImpl")); //$NON-NLS-1$
                case 3:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("dataaccess.expressions.literals.__impl.NumberLiteralImpl")); //$NON-NLS-1$
                case 4:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("dataaccess.expressions.literals.__impl.TimePointLiteralImpl")); //$NON-NLS-1$
                case 5:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("dataaccess.expressions.literals.__impl.BooleanLiteralImpl")); //$NON-NLS-1$
                case 6:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("dataaccess.expressions.literals.__impl.ObjectLiteralImpl")); //$NON-NLS-1$
                case 7:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("dataaccess.expressions.literals.__impl.ValueInitImpl")); //$NON-NLS-1$
                case 8:
                    return new dataaccess.expressions.literals.__impl.AValueClassObjectLiteralImpl(workspace, mofId, immediatePackage, metaObject);
                case 9:
                    return new dataaccess.expressions.literals.__impl.APropertyValuesObjectLiteralImpl(workspace, mofId, immediatePackage, metaObject);
                case 10:
                    return new dataaccess.expressions.literals.__impl.AForEndValueInitImpl(workspace, mofId, immediatePackage, metaObject);
                case 11:
                    return new dataaccess.expressions.literals.__impl.AValueValueInitImpl(workspace, mofId, immediatePackage, metaObject);
                default:
                    throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException(name, null, "create___Extent()"); //$NON-NLS-1$
        }
        }
        catch(com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            throw ex;
        }
        catch(java.lang.Exception ex) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }        
    }

    public java.lang.Class<dataaccess.expressions.literals.LiteralsPackage> get___JmiInterface() {
        return dataaccess.expressions.literals.LiteralsPackage.class;
    }
    
    protected void initialize() {
        if (___refPackages == null) {
            ___refPackages = new java.util.ArrayList<RefPackageAndName>(0);
            ___refPackagesByName = new java.util.HashMap<String, RefPackageAndName>();
            java.lang.String name = ""; //$NON-NLS-1$
            RefPackageAndName rpan = null;
        }
  
        if (___refClasses == null) {
            ___refClasses = new java.util.ArrayList<RefClassAndName>(8);
            ___refClassesByName = new java.util.HashMap<String, RefClassAndName>();
            java.lang.String name = ""; //$NON-NLS-1$
            RefClassAndName rcan = null;
            name = "Literal"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "dataaccess.expressions.literals.Literal"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "BinaryLiteral"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "dataaccess.expressions.literals.BinaryLiteral"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "StringLiteral"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "dataaccess.expressions.literals.StringLiteral"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "NumberLiteral"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "dataaccess.expressions.literals.NumberLiteral"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "TimePointLiteral"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "dataaccess.expressions.literals.TimePointLiteral"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "BooleanLiteral"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "dataaccess.expressions.literals.BooleanLiteral"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "ObjectLiteral"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "dataaccess.expressions.literals.ObjectLiteral"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "ValueInit"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "dataaccess.expressions.literals.ValueInit"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
        }
  
        if (___refAssociations == null) {
            ___refAssociations = new java.util.ArrayList<RefAssociationAndName>(4);
            ___refAssociationsByName = new java.util.HashMap<String, RefAssociationAndName>();
            java.lang.String name = ""; //$NON-NLS-1$
            RefAssociationAndName raan = null;
            name = "A_valueClass_objectLiteral"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "dataaccess.expressions.literals.AValueClassObjectLiteral"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "A_propertyValues_objectLiteral"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "dataaccess.expressions.literals.APropertyValuesObjectLiteral"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "A_forEnd_valueInit"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "dataaccess.expressions.literals.AForEndValueInit"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "A_value_valueInit"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "dataaccess.expressions.literals.AValueValueInit"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
        }
    }
    
    @Override
    public com.sap.tc.moin.repository.spi.core.Wrapper<dataaccess.expressions.literals.__impl.LiteralsPackageImpl> createWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, boolean synchronize) {
        return new dataaccess.expressions.literals.__impl.LiteralsPackageWrapper(conn, this, synchronize);
    }

}