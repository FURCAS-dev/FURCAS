/**
 * Generated by the MOIN Generator Version 3.0
 **/

package dataaccess.expressions.literals;

/**
 * This interface is not intended to be implemented by clients.
 */
public interface ObjectLiteral extends dataaccess.expressions.Expression {

    /**
     * Descriptors for all features of this MofClass and its supertypes.
     */
    public static final Descriptors DESCRIPTORS = new Descriptors( );

    // class extent descriptor
    /**
     * Extent descriptor
     */
    public final com.sap.tc.moin.repository.mmi.descriptors.ClassDescriptor<com.sap.tc.moin.repository.mmi.reflect.RefClass, dataaccess.expressions.literals.ObjectLiteral> CLASS_DESCRIPTOR = new com.sap.tc.moin.repository.mmi.descriptors.ClassDescriptor<com.sap.tc.moin.repository.mmi.reflect.RefClass, dataaccess.expressions.literals.ObjectLiteral>("E075D95551F05DF23E4B11DECA410018DE1146FF", "sap.com/moin/mm/ap/core", "dataaccess", "expressions", "literals", "ObjectLiteral"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 

    
    // references
    public data.classes.SapClass getValueClass() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public void setValueClass(data.classes.SapClass newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public java.util.Collection<dataaccess.expressions.literals.ValueInit> getPropertyValues() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;

    // operations
    public boolean isEqualTo(dataaccess.expressions.literals.ObjectLiteral o) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;


    public static final class Descriptors {
        Descriptors( ) { 
        }
        /**
         * Returns the descriptor for the <code>ownedTypeDefinition</code> reference.
         * @return  the descriptor for the <code>ownedTypeDefinition</code> reference
         */
        public com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.TypedElement,data.classes.TypeDefinition> OWNED_TYPE_DEFINITION( ) {
            return data.classes.TypedElement.DESCRIPTORS.OWNED_TYPE_DEFINITION( );
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,dataaccess.expressions.literals.ObjectLiteral,data.classes.SapClass> __valueClass;
        /**
         * Returns the descriptor for the <code>valueClass</code> reference.
         * @return  the descriptor for the <code>valueClass</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,dataaccess.expressions.literals.ObjectLiteral,data.classes.SapClass> VALUE_CLASS( ) {
            if ( __valueClass == null ) {
                __valueClass = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,dataaccess.expressions.literals.ObjectLiteral,data.classes.SapClass>( "E075D95551F05DF03E4B11DEC0A30018DE1146FF", "sap.com/moin/mm/ap/core", new java.lang.String[] { "dataaccess", "expressions", "literals", "ObjectLiteral", "valueClass" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ //$NON-NLS-7$ 
            }
            return __valueClass;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,dataaccess.expressions.literals.ObjectLiteral,java.util.Collection<dataaccess.expressions.literals.ValueInit>> __propertyValues;
        /**
         * Returns the descriptor for the <code>propertyValues</code> reference.
         * @return  the descriptor for the <code>propertyValues</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,dataaccess.expressions.literals.ObjectLiteral,java.util.Collection<dataaccess.expressions.literals.ValueInit>> PROPERTY_VALUES( ) {
            if ( __propertyValues == null ) {
                __propertyValues = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,dataaccess.expressions.literals.ObjectLiteral,java.util.Collection<dataaccess.expressions.literals.ValueInit>>( "E075D95551F05DF13E4B11DEA60E0018DE1146FF", "sap.com/moin/mm/ap/core", new java.lang.String[] { "dataaccess", "expressions", "literals", "ObjectLiteral", "propertyValues" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ //$NON-NLS-7$ 
            }
            return __propertyValues;
        }
        /**
         * Returns the descriptor for the <code>conformsTo</code> operation.
         * @return  the descriptor for the <code>conformsTo</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypedElement,java.lang.Boolean> CONFORMS_TO( ) {
            return data.classes.TypedElement.DESCRIPTORS.CONFORMS_TO( );
        }
        /**
         * Returns the descriptor for the <code>getType</code> operation.
         * @return  the descriptor for the <code>getType</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypedElement,data.classes.TypeDefinition> GET_TYPE( ) {
            return data.classes.TypedElement.DESCRIPTORS.GET_TYPE( );
        }
        /**
         * Returns the descriptor for the <code>isSideEffectFree</code> operation.
         * @return  the descriptor for the <code>isSideEffectFree</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,dataaccess.expressions.Expression,java.lang.Boolean> IS_SIDE_EFFECT_FREE( ) {
            return dataaccess.expressions.Expression.DESCRIPTORS.IS_SIDE_EFFECT_FREE( );
        }
        /**
         * Returns the descriptor for the <code>evaluatesToEqualAs</code> operation.
         * @return  the descriptor for the <code>evaluatesToEqualAs</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,dataaccess.expressions.Expression,java.lang.Boolean> EVALUATES_TO_EQUAL_AS( ) {
            return dataaccess.expressions.Expression.DESCRIPTORS.EVALUATES_TO_EQUAL_AS( );
        }
        /**
         * Returns the descriptor for the <code>getUsedAliases</code> operation.
         * @return  the descriptor for the <code>getUsedAliases</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,dataaccess.expressions.Expression,java.util.Collection<behavioral.actions.Iterator>> GET_USED_ALIASES( ) {
            return dataaccess.expressions.Expression.DESCRIPTORS.GET_USED_ALIASES( );
        }
        private com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,dataaccess.expressions.literals.ObjectLiteral,java.lang.Boolean> __isEqualTo;
        /**
         * Returns the descriptor for the <code>isEqualTo</code> operation.
         * @return  the descriptor for the <code>isEqualTo</code> operation
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,dataaccess.expressions.literals.ObjectLiteral,java.lang.Boolean> IS_EQUAL_TO( ) {
            if ( __isEqualTo == null ) {
                __isEqualTo = new com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,dataaccess.expressions.literals.ObjectLiteral,java.lang.Boolean>( "E075D955CB4A2DA2413211DEACB500155883529C", "sap.com/moin/mm/ap/core", new java.lang.String[] { "dataaccess", "expressions", "literals", "ObjectLiteral", "isEqualTo" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ //$NON-NLS-7$ 
            }
            return __isEqualTo;
        }
    }
}    