/**
 * Generated by the MOIN Generator Version 3.0
 **/

package dataaccess.expressions.literals;

/**
 * A literal of any primitive type, such as "This is a string" or 123 or an enumeration literal or a literal denoting a value of an implicit anonymous class, or a block, or a literal that denotes a (potentially anonymous) class.
 * <p>
 * The exact type of a literal may not always be possible to decide completely, particularly when it comes to constrained types over primitive types. This can only come in through "post types" and type inference, e.g., in an assignment statement where the type of the lvalue is known.
 * This interface is not intended to be implemented by clients.
 */
public interface Literal extends dataaccess.expressions.Expression {

    /**
     * Descriptors for all features of this MofClass and its supertypes.
     */
    public static final Descriptors DESCRIPTORS = new Descriptors( );

    // class extent descriptor
    /**
     * Extent descriptor
     */
    public final com.sap.tc.moin.repository.mmi.descriptors.ClassDescriptor<com.sap.tc.moin.repository.mmi.reflect.RefClass, dataaccess.expressions.literals.Literal> CLASS_DESCRIPTOR = new com.sap.tc.moin.repository.mmi.descriptors.ClassDescriptor<com.sap.tc.moin.repository.mmi.reflect.RefClass, dataaccess.expressions.literals.Literal>("E075D95551F05DEA3E4B11DEC1B20018DE1146FF", "sap.com/moin/mm/ap/core", "dataaccess", "expressions", "literals", "Literal"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 

    
    // attributes
    /**
     * Represents the value of this literal as a string. Final interpretation has to happen by the type of the literal expression. For string literals this is particularly straightforward. For numbers and dates, specific formats as defined by the respective types may apply.
     */
    public java.lang.String getLiteral() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    /**
     * Represents the value of this literal as a string. Final interpretation has to happen by the type of the literal expression. For string literals this is particularly straightforward. For numbers and dates, specific formats as defined by the respective types may apply.
     */
    public void setLiteral(java.lang.String newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;


    public static final class Descriptors {
        Descriptors( ) { 
        }
        private com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,dataaccess.expressions.literals.Literal,java.lang.String> __literal;
        /**
         * Returns the descriptor for the <code>literal</code> attribute.
         * @return  the descriptor for the <code>literal</code> attribute
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,dataaccess.expressions.literals.Literal,java.lang.String> LITERAL( ) {
            if ( __literal == null ) {
                __literal = new com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,dataaccess.expressions.literals.Literal,java.lang.String>( "E075D95551F05DE93E4B11DE8F940018DE1146FF", "sap.com/moin/mm/ap/core", new java.lang.String[] { "dataaccess", "expressions", "literals", "Literal", "literal" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ //$NON-NLS-7$ 
            }
            return __literal;
        }
        /**
         * Returns the descriptor for the <code>ownedTypeDefinition</code> reference.
         * @return  the descriptor for the <code>ownedTypeDefinition</code> reference
         */
        public com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.TypedElement,data.classes.TypeDefinition> OWNED_TYPE_DEFINITION( ) {
            return data.classes.TypedElement.DESCRIPTORS.OWNED_TYPE_DEFINITION( );
        }
        /**
         * Returns the descriptor for the <code>conformsTo</code> operation.
         * @return  the descriptor for the <code>conformsTo</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypedElement,java.lang.Boolean> CONFORMS_TO( ) {
            return data.classes.TypedElement.DESCRIPTORS.CONFORMS_TO( );
        }
        /**
         * Returns the descriptor for the <code>getType</code> operation.
         * @return  the descriptor for the <code>getType</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypedElement,data.classes.TypeDefinition> GET_TYPE( ) {
            return data.classes.TypedElement.DESCRIPTORS.GET_TYPE( );
        }
        /**
         * Returns the descriptor for the <code>isSideEffectFree</code> operation.
         * @return  the descriptor for the <code>isSideEffectFree</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,dataaccess.expressions.Expression,java.lang.Boolean> IS_SIDE_EFFECT_FREE( ) {
            return dataaccess.expressions.Expression.DESCRIPTORS.IS_SIDE_EFFECT_FREE( );
        }
        /**
         * Returns the descriptor for the <code>evaluatesToEqualAs</code> operation.
         * @return  the descriptor for the <code>evaluatesToEqualAs</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,dataaccess.expressions.Expression,java.lang.Boolean> EVALUATES_TO_EQUAL_AS( ) {
            return dataaccess.expressions.Expression.DESCRIPTORS.EVALUATES_TO_EQUAL_AS( );
        }
        /**
         * Returns the descriptor for the <code>getUsedAliases</code> operation.
         * @return  the descriptor for the <code>getUsedAliases</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,dataaccess.expressions.Expression,java.util.Collection<behavioral.actions.Iterator>> GET_USED_ALIASES( ) {
            return dataaccess.expressions.Expression.DESCRIPTORS.GET_USED_ALIASES( );
        }
    }
}    