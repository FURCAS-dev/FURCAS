/**
 * Generated by the MOIN Generator Version 3.0
 **/

package dataaccess.expressions;

/**
 * An expression that is computed by first evaluating "calledBlock" and invoking the resulting block passing the "argument" expression. The value returned by the block constitutes the value of this expression. If the block terminates with a fault, the evaluation of this expression terminates with this fault.
 * <p>
 * The type of the object computed by the "parameters" expression must conform to the input parameter types of the signature called.
 * <p>
 * If the calledBock evaluates to more than one callable function, all functions will be called. Invocation ordering depends on the side effect-freeness of the signatures called.
 * This interface is not intended to be implemented by clients.
 */
public interface FunctionCallExpression extends dataaccess.expressions.SignatureCallExpression {

    /**
     * Descriptors for all features of this MofClass and its supertypes.
     */
    public static final Descriptors DESCRIPTORS = new Descriptors( );

    // class extent descriptor
    /**
     * Extent descriptor
     */
    public final com.sap.tc.moin.repository.mmi.descriptors.ClassDescriptor<com.sap.tc.moin.repository.mmi.reflect.RefClass, dataaccess.expressions.FunctionCallExpression> CLASS_DESCRIPTOR = new com.sap.tc.moin.repository.mmi.descriptors.ClassDescriptor<com.sap.tc.moin.repository.mmi.reflect.RefClass, dataaccess.expressions.FunctionCallExpression>("E075D95551F2A7DA3E4B11DEAA800018DE1146FF", "sap.com/moin/mm/ap/core", "dataaccess", "expressions", "FunctionCallExpression"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ 

    
    // references
    public dataaccess.expressions.Expression getCalledBlock() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public void setCalledBlock(dataaccess.expressions.Expression newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;


    public static final class Descriptors {
        Descriptors( ) { 
        }
        /**
         * Returns the descriptor for the <code>ownedTypeDefinition</code> reference.
         * @return  the descriptor for the <code>ownedTypeDefinition</code> reference
         */
        public com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.TypedElement,data.classes.TypeDefinition> OWNED_TYPE_DEFINITION( ) {
            return data.classes.TypedElement.DESCRIPTORS.OWNED_TYPE_DEFINITION( );
        }
        /**
         * Returns the descriptor for the <code>parameters</code> reference.
         * @return  the descriptor for the <code>parameters</code> reference
         */
        public com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,dataaccess.expressions.SignatureCallExpression,java.util.List<dataaccess.expressions.Expression>> PARAMETERS( ) {
            return dataaccess.expressions.SignatureCallExpression.DESCRIPTORS.PARAMETERS( );
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,dataaccess.expressions.FunctionCallExpression,dataaccess.expressions.Expression> __calledBlock;
        /**
         * Returns the descriptor for the <code>calledBlock</code> reference.
         * @return  the descriptor for the <code>calledBlock</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,dataaccess.expressions.FunctionCallExpression,dataaccess.expressions.Expression> CALLED_BLOCK( ) {
            if ( __calledBlock == null ) {
                __calledBlock = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,dataaccess.expressions.FunctionCallExpression,dataaccess.expressions.Expression>( "E075D95551F2A7D93E4B11DE80F50018DE1146FF", "sap.com/moin/mm/ap/core", new java.lang.String[] { "dataaccess", "expressions", "FunctionCallExpression", "calledBlock" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __calledBlock;
        }
        /**
         * Returns the descriptor for the <code>conformsTo</code> operation.
         * @return  the descriptor for the <code>conformsTo</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypedElement,java.lang.Boolean> CONFORMS_TO( ) {
            return data.classes.TypedElement.DESCRIPTORS.CONFORMS_TO( );
        }
        /**
         * Returns the descriptor for the <code>getType</code> operation.
         * @return  the descriptor for the <code>getType</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypedElement,data.classes.TypeDefinition> GET_TYPE( ) {
            return data.classes.TypedElement.DESCRIPTORS.GET_TYPE( );
        }
        /**
         * Returns the descriptor for the <code>isSideEffectFree</code> operation.
         * @return  the descriptor for the <code>isSideEffectFree</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,dataaccess.expressions.Expression,java.lang.Boolean> IS_SIDE_EFFECT_FREE( ) {
            return dataaccess.expressions.Expression.DESCRIPTORS.IS_SIDE_EFFECT_FREE( );
        }
        /**
         * Returns the descriptor for the <code>evaluatesToEqualAs</code> operation.
         * @return  the descriptor for the <code>evaluatesToEqualAs</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,dataaccess.expressions.Expression,java.lang.Boolean> EVALUATES_TO_EQUAL_AS( ) {
            return dataaccess.expressions.Expression.DESCRIPTORS.EVALUATES_TO_EQUAL_AS( );
        }
        /**
         * Returns the descriptor for the <code>getUsedAliases</code> operation.
         * @return  the descriptor for the <code>getUsedAliases</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,dataaccess.expressions.Expression,java.util.Collection<behavioral.actions.Iterator>> GET_USED_ALIASES( ) {
            return dataaccess.expressions.Expression.DESCRIPTORS.GET_USED_ALIASES( );
        }
        /**
         * Returns the descriptor for the <code>getSignature</code> operation.
         * @return  the descriptor for the <code>getSignature</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,dataaccess.expressions.SignatureCallExpression,data.classes.Signature> GET_SIGNATURE( ) {
            return dataaccess.expressions.SignatureCallExpression.DESCRIPTORS.GET_SIGNATURE( );
        }
        /**
         * Returns the descriptor for the <code>getMultiplicityOfCallTarget</code> operation.
         * @return  the descriptor for the <code>getMultiplicityOfCallTarget</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,dataaccess.expressions.SignatureCallExpression,data.classes.Multiplicity> GET_MULTIPLICITY_OF_CALL_TARGET( ) {
            return dataaccess.expressions.SignatureCallExpression.DESCRIPTORS.GET_MULTIPLICITY_OF_CALL_TARGET( );
        }
    }
}    