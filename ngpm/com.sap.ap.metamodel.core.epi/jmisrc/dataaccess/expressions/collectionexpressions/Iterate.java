/**
 * Generated by the MOIN Generator Version 3.0
 **/

package dataaccess.expressions.collectionexpressions;

/**
 * Given the number of iterators variables, assigns all possible tuples of values from the source expression to the iterators (combinatorial product). In particular, if only only one iterator variable is provided, this variable will "loop" through the values in the source expression. If the source expression has an ordered multiplicity, the iteration order corresponds with that order. Otherwise, iteration order is arbitrary and undefined.
 * <p>
 * For each combination of iterator variable values, the iteratorExpression will be evaluated. The result of each evaluation is assigned to the accumulator variable.
 * <p>
 * The iteratorExpression can use all iterators variables as well as the accumulator if one is declared, and of course all other variables in scope as well (block variables, etc.). If an accumulator is declared, an initial value must be provided for it.
 * <p>
 * The result of the Iterate expression is the value that the accumulator has when the iteration terminates or the value of the last iteratorExpression evaluation if no accumulator has been provided. By this rationale, the type of the Iterate expression equals the type of the iteratorExpression.
 * This interface is not intended to be implemented by clients.
 */
public interface Iterate extends dataaccess.expressions.collectionexpressions.CollectionExpression {

    /**
     * Descriptors for all features of this MofClass and its supertypes.
     */
    public static final Descriptors DESCRIPTORS = new Descriptors( );

    // class extent descriptor
    /**
     * Extent descriptor
     */
    public final com.sap.tc.moin.repository.mmi.descriptors.ClassDescriptor<com.sap.tc.moin.repository.mmi.reflect.RefClass, dataaccess.expressions.collectionexpressions.Iterate> CLASS_DESCRIPTOR = new com.sap.tc.moin.repository.mmi.descriptors.ClassDescriptor<com.sap.tc.moin.repository.mmi.reflect.RefClass, dataaccess.expressions.collectionexpressions.Iterate>("E075D95551F2A7AA3E4B11DEA4070018DE1146FF", "sap.com/moin/mm/ap/core", "dataaccess", "expressions", "collectionExpressions", "Iterate"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 

    
    // references
    public java.util.Collection<behavioral.actions.Iterator> getIterators() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public behavioral.actions.Constant getAccumulator() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public void setAccumulator(behavioral.actions.Constant newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public dataaccess.expressions.Expression getIteratorExpression() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public void setIteratorExpression(dataaccess.expressions.Expression newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;


    public static final class Descriptors {
        Descriptors( ) { 
        }
        /**
         * Returns the descriptor for the <code>ownedTypeDefinition</code> reference.
         * @return  the descriptor for the <code>ownedTypeDefinition</code> reference
         */
        public com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.TypedElement,data.classes.TypeDefinition> OWNED_TYPE_DEFINITION( ) {
            return data.classes.TypedElement.DESCRIPTORS.OWNED_TYPE_DEFINITION( );
        }
        /**
         * Returns the descriptor for the <code>source</code> reference.
         * @return  the descriptor for the <code>source</code> reference
         */
        public com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,dataaccess.expressions.collectionexpressions.CollectionExpression,dataaccess.expressions.Expression> SOURCE( ) {
            return dataaccess.expressions.collectionexpressions.CollectionExpression.DESCRIPTORS.SOURCE( );
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,dataaccess.expressions.collectionexpressions.Iterate,java.util.Collection<behavioral.actions.Iterator>> __iterators;
        /**
         * Returns the descriptor for the <code>iterators</code> reference.
         * @return  the descriptor for the <code>iterators</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,dataaccess.expressions.collectionexpressions.Iterate,java.util.Collection<behavioral.actions.Iterator>> ITERATORS( ) {
            if ( __iterators == null ) {
                __iterators = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,dataaccess.expressions.collectionexpressions.Iterate,java.util.Collection<behavioral.actions.Iterator>>( "E075D95551F2A7A73E4B11DECDE30018DE1146FF", "sap.com/moin/mm/ap/core", new java.lang.String[] { "dataaccess", "expressions", "collectionExpressions", "Iterate", "iterators" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ //$NON-NLS-7$ 
            }
            return __iterators;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,dataaccess.expressions.collectionexpressions.Iterate,behavioral.actions.Constant> __accumulator;
        /**
         * Returns the descriptor for the <code>accumulator</code> reference.
         * @return  the descriptor for the <code>accumulator</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,dataaccess.expressions.collectionexpressions.Iterate,behavioral.actions.Constant> ACCUMULATOR( ) {
            if ( __accumulator == null ) {
                __accumulator = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,dataaccess.expressions.collectionexpressions.Iterate,behavioral.actions.Constant>( "E075D95551F2A7A83E4B11DE8EBC0018DE1146FF", "sap.com/moin/mm/ap/core", new java.lang.String[] { "dataaccess", "expressions", "collectionExpressions", "Iterate", "accumulator" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ //$NON-NLS-7$ 
            }
            return __accumulator;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,dataaccess.expressions.collectionexpressions.Iterate,dataaccess.expressions.Expression> __iteratorExpression;
        /**
         * Returns the descriptor for the <code>iteratorExpression</code> reference.
         * @return  the descriptor for the <code>iteratorExpression</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,dataaccess.expressions.collectionexpressions.Iterate,dataaccess.expressions.Expression> ITERATOR_EXPRESSION( ) {
            if ( __iteratorExpression == null ) {
                __iteratorExpression = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,dataaccess.expressions.collectionexpressions.Iterate,dataaccess.expressions.Expression>( "E075D95551F2A7A93E4B11DEC8550018DE1146FF", "sap.com/moin/mm/ap/core", new java.lang.String[] { "dataaccess", "expressions", "collectionExpressions", "Iterate", "iteratorExpression" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ //$NON-NLS-7$ 
            }
            return __iteratorExpression;
        }
        /**
         * Returns the descriptor for the <code>conformsTo</code> operation.
         * @return  the descriptor for the <code>conformsTo</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypedElement,java.lang.Boolean> CONFORMS_TO( ) {
            return data.classes.TypedElement.DESCRIPTORS.CONFORMS_TO( );
        }
        /**
         * Returns the descriptor for the <code>getType</code> operation.
         * @return  the descriptor for the <code>getType</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypedElement,data.classes.TypeDefinition> GET_TYPE( ) {
            return data.classes.TypedElement.DESCRIPTORS.GET_TYPE( );
        }
        /**
         * Returns the descriptor for the <code>isSideEffectFree</code> operation.
         * @return  the descriptor for the <code>isSideEffectFree</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,dataaccess.expressions.Expression,java.lang.Boolean> IS_SIDE_EFFECT_FREE( ) {
            return dataaccess.expressions.Expression.DESCRIPTORS.IS_SIDE_EFFECT_FREE( );
        }
        /**
         * Returns the descriptor for the <code>evaluatesToEqualAs</code> operation.
         * @return  the descriptor for the <code>evaluatesToEqualAs</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,dataaccess.expressions.Expression,java.lang.Boolean> EVALUATES_TO_EQUAL_AS( ) {
            return dataaccess.expressions.Expression.DESCRIPTORS.EVALUATES_TO_EQUAL_AS( );
        }
        /**
         * Returns the descriptor for the <code>getUsedAliases</code> operation.
         * @return  the descriptor for the <code>getUsedAliases</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,dataaccess.expressions.Expression,java.util.Collection<behavioral.actions.Iterator>> GET_USED_ALIASES( ) {
            return dataaccess.expressions.Expression.DESCRIPTORS.GET_USED_ALIASES( );
        }
    }
}    