/**
 * Generated by the MOIN Generator Version 3.0
 **/

package dataaccess.expressions.collectionexpressions.__impl;

public class IterateIteratorWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<dataaccess.expressions.collectionexpressions.IterateIterator> implements dataaccess.expressions.collectionexpressions.IterateIterator,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The IterateIterator wrapper
     */
    public IterateIteratorWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, dataaccess.expressions.collectionexpressions.__impl.IterateIteratorImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private dataaccess.expressions.collectionexpressions.__impl.IterateIteratorImpl getCastWrappedObject() {
        return (dataaccess.expressions.collectionexpressions.__impl.IterateIteratorImpl) getWrappedObject();
    }

    public dataaccess.expressions.collectionexpressions.IterateIterator unwrap() {
        return (dataaccess.expressions.collectionexpressions.IterateIterator) getWrappedObject();
    }
    
    public boolean exists(behavioral.actions.Iterator _Iterators, dataaccess.expressions.collectionexpressions.Iterate _Iterate) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Iterators), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Iterate));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Iterators), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Iterate)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getIterators(dataaccess.expressions.collectionexpressions.Iterate _Iterate) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getIterators(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Iterate)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getIterators(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Iterate))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public dataaccess.expressions.collectionexpressions.Iterate getIterate(behavioral.actions.Iterator _Iterators) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (dataaccess.expressions.collectionexpressions.Iterate) wrapResult(getCastWrappedObject().getIterate(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Iterators)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (dataaccess.expressions.collectionexpressions.Iterate) wrapResult(getCastWrappedObject().getIterate(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Iterators))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(behavioral.actions.Iterator _Iterators, dataaccess.expressions.collectionexpressions.Iterate _Iterate) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Iterators), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Iterate));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Iterators), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Iterate)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(behavioral.actions.Iterator _Iterators, dataaccess.expressions.collectionexpressions.Iterate _Iterate) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Iterators), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Iterate));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Iterators), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Iterate)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<dataaccess.expressions.collectionexpressions.IterateIterator> get___JmiInterface() {
        return dataaccess.expressions.collectionexpressions.IterateIterator.class;
    }

    protected String metaObjectToString() {
        return "dataaccess.expressions.collectionexpressions.IterateIterator (Java Type)\ndataaccess.expressions.collectionExpressions.IterateIterator (MOF Type)"; //$NON-NLS-1$
    }    
}