/**
 * Generated by the MOIN Generator Version 3.0
 **/

package dataaccess.expressions.collectionexpressions.__impl;

public class SourceOfCollectionExpressionWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<dataaccess.expressions.collectionexpressions.SourceOfCollectionExpression> implements dataaccess.expressions.collectionexpressions.SourceOfCollectionExpression,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The SourceOfCollectionExpression wrapper
     */
    public SourceOfCollectionExpressionWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, dataaccess.expressions.collectionexpressions.__impl.SourceOfCollectionExpressionImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private dataaccess.expressions.collectionexpressions.__impl.SourceOfCollectionExpressionImpl getCastWrappedObject() {
        return (dataaccess.expressions.collectionexpressions.__impl.SourceOfCollectionExpressionImpl) getWrappedObject();
    }

    public dataaccess.expressions.collectionexpressions.SourceOfCollectionExpression unwrap() {
        return (dataaccess.expressions.collectionexpressions.SourceOfCollectionExpression) getWrappedObject();
    }
    
    public boolean exists(dataaccess.expressions.Expression _Source, dataaccess.expressions.collectionexpressions.CollectionExpression _CollectionExpression) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Source), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _CollectionExpression));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Source), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _CollectionExpression)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public dataaccess.expressions.Expression getSource(dataaccess.expressions.collectionexpressions.CollectionExpression _CollectionExpression) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (dataaccess.expressions.Expression) wrapResult(getCastWrappedObject().getSource(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _CollectionExpression)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (dataaccess.expressions.Expression) wrapResult(getCastWrappedObject().getSource(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _CollectionExpression))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public dataaccess.expressions.collectionexpressions.CollectionExpression getCollectionExpression(dataaccess.expressions.Expression _Source) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (dataaccess.expressions.collectionexpressions.CollectionExpression) wrapResult(getCastWrappedObject().getCollectionExpression(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Source)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (dataaccess.expressions.collectionexpressions.CollectionExpression) wrapResult(getCastWrappedObject().getCollectionExpression(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Source))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(dataaccess.expressions.Expression _Source, dataaccess.expressions.collectionexpressions.CollectionExpression _CollectionExpression) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Source), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _CollectionExpression));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Source), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _CollectionExpression)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(dataaccess.expressions.Expression _Source, dataaccess.expressions.collectionexpressions.CollectionExpression _CollectionExpression) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Source), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _CollectionExpression));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Source), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _CollectionExpression)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<dataaccess.expressions.collectionexpressions.SourceOfCollectionExpression> get___JmiInterface() {
        return dataaccess.expressions.collectionexpressions.SourceOfCollectionExpression.class;
    }

    protected String metaObjectToString() {
        return "dataaccess.expressions.collectionexpressions.SourceOfCollectionExpression (Java Type)\ndataaccess.expressions.collectionExpressions.SourceOfCollectionExpression (MOF Type)"; //$NON-NLS-1$
    }    
}