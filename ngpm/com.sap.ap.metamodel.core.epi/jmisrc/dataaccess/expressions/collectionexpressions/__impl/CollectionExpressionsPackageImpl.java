/**
 * Generated by the MOIN Generator Version 3.0
 **/

package dataaccess.expressions.collectionexpressions.__impl;

public final class CollectionExpressionsPackageImpl extends com.sap.tc.moin.repository.core.jmi.reflect.RefPackageImpl
{
        
    public static final java.util.Map<java.lang.String, java.lang.Integer> FEATURE_IDS;

    static {
        
        FEATURE_IDS = new java.util.HashMap<java.lang.String, java.lang.Integer>(16);
        FEATURE_IDS.put("Including", Integer.valueOf(0)); //$NON-NLS-1$
        FEATURE_IDS.put("Excluding", Integer.valueOf(1)); //$NON-NLS-1$
        FEATURE_IDS.put("IncludingAt", Integer.valueOf(2)); //$NON-NLS-1$
        FEATURE_IDS.put("Iterate", Integer.valueOf(3)); //$NON-NLS-1$
        FEATURE_IDS.put("CollectionExpression", Integer.valueOf(4)); //$NON-NLS-1$
        FEATURE_IDS.put("ExcludingAt", Integer.valueOf(5)); //$NON-NLS-1$
        FEATURE_IDS.put("WithPosition", Integer.valueOf(6)); //$NON-NLS-1$
        FEATURE_IDS.put("CollectionExpressionWithArgument", Integer.valueOf(7)); //$NON-NLS-1$
        FEATURE_IDS.put("SourceOfCollectionExpression", Integer.valueOf(8)); //$NON-NLS-1$
        FEATURE_IDS.put("IterateIterator", Integer.valueOf(9)); //$NON-NLS-1$
        FEATURE_IDS.put("IterateAccumulator", Integer.valueOf(10)); //$NON-NLS-1$
        FEATURE_IDS.put("A_iteratorExpression_inIterator", Integer.valueOf(11)); //$NON-NLS-1$
    }

    // constructors    
    public CollectionExpressionsPackageImpl()
    {
        super();
    }
    public CollectionExpressionsPackageImpl(java.lang.Object workspace, java.lang.String mofId, com.sap.tc.moin.repository.mmi.reflect.RefPackage immediatePackage, com.sap.tc.moin.repository.mmi.reflect.RefObject metaObject)
    {
        super(workspace, mofId, immediatePackage, metaObject);
    }
    // internal enumeration creators
    // internal structure type creators
    // nested packages
    // classes
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getIncluding(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Including"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getExcluding(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Excluding"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getIncludingAt(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "IncludingAt"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getIterate(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Iterate"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getCollectionExpression(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "CollectionExpression"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getExcludingAt(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "ExcludingAt"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getWithPosition(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "WithPosition"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getCollectionExpressionWithArgument(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "CollectionExpressionWithArgument"); //$NON-NLS-1$
    }
    // associations
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getSourceOfCollectionExpression(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "SourceOfCollectionExpression"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getIterateIterator(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "IterateIterator"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getIterateAccumulator(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "IterateAccumulator"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getAIteratorExpressionInIterator(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "A_iteratorExpression_inIterator"); //$NON-NLS-1$
    }
    // structure type creators

    protected java.lang.Object create___Extent(java.lang.Object workspace, java.lang.String mofId, com.sap.tc.moin.repository.mmi.reflect.RefPackage immediatePackage, com.sap.tc.moin.repository.mmi.reflect.RefObject metaObject) {
        java.lang.String name = ((com.sap.tc.moin.repository.mmi.model.ModelElement) metaObject).getName();
        com.sap.tc.moin.repository.mmi.reflect.RefBaseObject result = null;
        try {
            switch (FEATURE_IDS.get(name)) {
                case 0:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("dataaccess.expressions.collectionexpressions.__impl.IncludingImpl")); //$NON-NLS-1$
                case 1:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("dataaccess.expressions.collectionexpressions.__impl.ExcludingImpl")); //$NON-NLS-1$
                case 2:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("dataaccess.expressions.collectionexpressions.__impl.IncludingAtImpl")); //$NON-NLS-1$
                case 3:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("dataaccess.expressions.collectionexpressions.__impl.IterateImpl")); //$NON-NLS-1$
                case 4:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
                case 5:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("dataaccess.expressions.collectionexpressions.__impl.ExcludingAtImpl")); //$NON-NLS-1$
                case 6:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
                case 7:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
                case 8:
                    return new dataaccess.expressions.collectionexpressions.__impl.SourceOfCollectionExpressionImpl(workspace, mofId, immediatePackage, metaObject);
                case 9:
                    return new dataaccess.expressions.collectionexpressions.__impl.IterateIteratorImpl(workspace, mofId, immediatePackage, metaObject);
                case 10:
                    return new dataaccess.expressions.collectionexpressions.__impl.IterateAccumulatorImpl(workspace, mofId, immediatePackage, metaObject);
                case 11:
                    return new dataaccess.expressions.collectionexpressions.__impl.AIteratorExpressionInIteratorImpl(workspace, mofId, immediatePackage, metaObject);
                default:
                    throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException(name, null, "create___Extent()"); //$NON-NLS-1$
        }
        }
        catch(com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            throw ex;
        }
        catch(java.lang.Exception ex) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }        
    }

    @SuppressWarnings("unchecked")
    public java.lang.Class<dataaccess.expressions.collectionexpressions.CollectionExpressionsPackage> get___JmiInterface() {
        return dataaccess.expressions.collectionexpressions.CollectionExpressionsPackage.class;
    }
    
    protected void initialize() {
        if (___refPackages == null) {
            ___refPackages = new java.util.ArrayList<RefPackageAndName>(0);
            ___refPackagesByName = new java.util.HashMap<String, RefPackageAndName>();
            @SuppressWarnings("unused")
            java.lang.String name = ""; //$NON-NLS-1$
            @SuppressWarnings("unused")
            RefPackageAndName rpan = null;
        }
  
        if (___refClasses == null) {
            ___refClasses = new java.util.ArrayList<RefClassAndName>(8);
            ___refClassesByName = new java.util.HashMap<String, RefClassAndName>();
            java.lang.String name = ""; //$NON-NLS-1$
            RefClassAndName rcan = null;
            name = "Including"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "dataaccess.expressions.collectionexpressions.Including"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Excluding"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "dataaccess.expressions.collectionexpressions.Excluding"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "IncludingAt"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "dataaccess.expressions.collectionexpressions.IncludingAt"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Iterate"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "dataaccess.expressions.collectionexpressions.Iterate"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "CollectionExpression"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "dataaccess.expressions.collectionexpressions.CollectionExpression"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "ExcludingAt"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "dataaccess.expressions.collectionexpressions.ExcludingAt"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "WithPosition"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "dataaccess.expressions.collectionexpressions.WithPosition"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "CollectionExpressionWithArgument"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "dataaccess.expressions.collectionexpressions.CollectionExpressionWithArgument"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
        }
  
        if (___refAssociations == null) {
            ___refAssociations = new java.util.ArrayList<RefAssociationAndName>(4);
            ___refAssociationsByName = new java.util.HashMap<String, RefAssociationAndName>();
            @SuppressWarnings("unused")
            java.lang.String name = ""; //$NON-NLS-1$
            @SuppressWarnings("unused")
            RefAssociationAndName raan = null;
            name = "SourceOfCollectionExpression"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "dataaccess.expressions.collectionexpressions.SourceOfCollectionExpression"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "IterateIterator"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "dataaccess.expressions.collectionexpressions.IterateIterator"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "IterateAccumulator"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "dataaccess.expressions.collectionexpressions.IterateAccumulator"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "A_iteratorExpression_inIterator"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "dataaccess.expressions.collectionexpressions.AIteratorExpressionInIterator"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
        }
    }
    
    @Override
    public com.sap.tc.moin.repository.spi.core.Wrapper<dataaccess.expressions.collectionexpressions.__impl.CollectionExpressionsPackageImpl> createWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, boolean synchronize) {
        return new dataaccess.expressions.collectionexpressions.__impl.CollectionExpressionsPackageWrapper(conn, this, synchronize);
    }

}