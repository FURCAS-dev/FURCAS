/**
 * Generated by the MOIN Generator Version 3.0
 **/

package dataaccess.expressions.fp.__impl;

public class FpPackageWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefPackageWrapperImpl<dataaccess.expressions.fp.__impl.FpPackageImpl> implements dataaccess.expressions.fp.FpPackage,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The FpPackage wrapper
     */
    public FpPackageWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, dataaccess.expressions.fp.__impl.FpPackageImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    private dataaccess.expressions.fp.__impl.FpPackageImpl getCastWrappedObject() {
        return (dataaccess.expressions.fp.__impl.FpPackageImpl) getWrappedObject();
    }
    
    public dataaccess.expressions.fp.__impl.FpPackageImpl unwrap() {
        return (dataaccess.expressions.fp.__impl.FpPackageImpl) getWrappedObject();
    }
    
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getAnonymousFunctionExpr()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getAnonymousFunctionExpr(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getAnonymousFunctionExpr(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getFunctionFromMethodExpr()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getFunctionFromMethodExpr(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getFunctionFromMethodExpr(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public dataaccess.expressions.fp.AMethodFunctionFromMethodExpr getAMethodFunctionFromMethodExpr()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (dataaccess.expressions.fp.AMethodFunctionFromMethodExpr) wrapResult(getCastWrappedObject().getAMethodFunctionFromMethodExpr(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (dataaccess.expressions.fp.AMethodFunctionFromMethodExpr) wrapResult(getCastWrappedObject().getAMethodFunctionFromMethodExpr(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    // methods for structure type creators
    
    public java.lang.Class<dataaccess.expressions.fp.FpPackage> get___JmiInterface() {
        return dataaccess.expressions.fp.FpPackage.class;
    }
    
    protected String metaObjectToString() {
        return "dataaccess.expressions.fp.FpPackage (Java Type)\ndataaccess.expressions.fp (MOF Type)"; //$NON-NLS-1$
    }
}