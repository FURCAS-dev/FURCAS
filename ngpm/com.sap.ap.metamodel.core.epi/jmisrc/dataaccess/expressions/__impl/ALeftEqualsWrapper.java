/**
 * Generated by the MOIN Generator Version 3.0
 **/

package dataaccess.expressions.__impl;

public class ALeftEqualsWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<dataaccess.expressions.ALeftEquals> implements dataaccess.expressions.ALeftEquals,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The ALeftEquals wrapper
     */
    public ALeftEqualsWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, dataaccess.expressions.__impl.ALeftEqualsImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private dataaccess.expressions.__impl.ALeftEqualsImpl getCastWrappedObject() {
        return (dataaccess.expressions.__impl.ALeftEqualsImpl) getWrappedObject();
    }

    public dataaccess.expressions.ALeftEquals unwrap() {
        return (dataaccess.expressions.ALeftEquals) getWrappedObject();
    }
    
    public boolean exists(dataaccess.expressions.Expression _Left, dataaccess.expressions.Equals _Equals) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Left), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Equals));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Left), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Equals)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public dataaccess.expressions.Expression getLeft(dataaccess.expressions.Equals _Equals) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (dataaccess.expressions.Expression) wrapResult(getCastWrappedObject().getLeft(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Equals)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (dataaccess.expressions.Expression) wrapResult(getCastWrappedObject().getLeft(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Equals))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public dataaccess.expressions.Equals getEquals(dataaccess.expressions.Expression _Left) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (dataaccess.expressions.Equals) wrapResult(getCastWrappedObject().getEquals(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Left)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (dataaccess.expressions.Equals) wrapResult(getCastWrappedObject().getEquals(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Left))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(dataaccess.expressions.Expression _Left, dataaccess.expressions.Equals _Equals) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Left), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Equals));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Left), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Equals)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(dataaccess.expressions.Expression _Left, dataaccess.expressions.Equals _Equals) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Left), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Equals));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Left), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Equals)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<dataaccess.expressions.ALeftEquals> get___JmiInterface() {
        return dataaccess.expressions.ALeftEquals.class;
    }

    protected String metaObjectToString() {
        return "dataaccess.expressions.ALeftEquals (Java Type)\ndataaccess.expressions.A_left_equals (MOF Type)"; //$NON-NLS-1$
    }    
}