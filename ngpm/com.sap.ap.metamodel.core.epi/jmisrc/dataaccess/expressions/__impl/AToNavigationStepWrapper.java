/**
 * Generated by the MOIN Generator Version 3.0
 **/

package dataaccess.expressions.__impl;

public class AToNavigationStepWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<dataaccess.expressions.AToNavigationStep> implements dataaccess.expressions.AToNavigationStep,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AToNavigationStep wrapper
     */
    public AToNavigationStepWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, dataaccess.expressions.__impl.AToNavigationStepImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private dataaccess.expressions.__impl.AToNavigationStepImpl getCastWrappedObject() {
        return (dataaccess.expressions.__impl.AToNavigationStepImpl) getWrappedObject();
    }

    public dataaccess.expressions.AToNavigationStep unwrap() {
        return (dataaccess.expressions.AToNavigationStep) getWrappedObject();
    }
    
    public boolean exists(data.classes.AssociationEnd _To, dataaccess.expressions.NavigationStep _NavigationStep) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _To), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _NavigationStep));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _To), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _NavigationStep)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public data.classes.AssociationEnd getTo(dataaccess.expressions.NavigationStep _NavigationStep) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (data.classes.AssociationEnd) wrapResult(getCastWrappedObject().getTo(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _NavigationStep)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (data.classes.AssociationEnd) wrapResult(getCastWrappedObject().getTo(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _NavigationStep))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getNavigationStep(data.classes.AssociationEnd _To) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getNavigationStep(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _To)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getNavigationStep(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _To))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(data.classes.AssociationEnd _To, dataaccess.expressions.NavigationStep _NavigationStep) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _To), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _NavigationStep));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _To), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _NavigationStep)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(data.classes.AssociationEnd _To, dataaccess.expressions.NavigationStep _NavigationStep) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _To), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _NavigationStep));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _To), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _NavigationStep)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<dataaccess.expressions.AToNavigationStep> get___JmiInterface() {
        return dataaccess.expressions.AToNavigationStep.class;
    }

    protected String metaObjectToString() {
        return "dataaccess.expressions.AToNavigationStep (Java Type)\ndataaccess.expressions.A_to_navigationStep (MOF Type)"; //$NON-NLS-1$
    }    
}