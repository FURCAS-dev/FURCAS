/**
 * Generated by the MOIN Generator Version 3.0
 **/

package dataaccess.expressions.__impl;

public class AConditionConditionalWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<dataaccess.expressions.AConditionConditional> implements dataaccess.expressions.AConditionConditional,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AConditionConditional wrapper
     */
    public AConditionConditionalWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, dataaccess.expressions.__impl.AConditionConditionalImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private dataaccess.expressions.__impl.AConditionConditionalImpl getCastWrappedObject() {
        return (dataaccess.expressions.__impl.AConditionConditionalImpl) getWrappedObject();
    }

    public dataaccess.expressions.AConditionConditional unwrap() {
        return (dataaccess.expressions.AConditionConditional) getWrappedObject();
    }
    
    public boolean exists(dataaccess.expressions.Expression _Condition, dataaccess.expressions.Conditional _Conditional) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Condition), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Conditional));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Condition), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Conditional)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public dataaccess.expressions.Expression getCondition(dataaccess.expressions.Conditional _Conditional) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (dataaccess.expressions.Expression) wrapResult(getCastWrappedObject().getCondition(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Conditional)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (dataaccess.expressions.Expression) wrapResult(getCastWrappedObject().getCondition(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Conditional))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public dataaccess.expressions.Conditional getConditional(dataaccess.expressions.Expression _Condition) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (dataaccess.expressions.Conditional) wrapResult(getCastWrappedObject().getConditional(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Condition)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (dataaccess.expressions.Conditional) wrapResult(getCastWrappedObject().getConditional(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Condition))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(dataaccess.expressions.Expression _Condition, dataaccess.expressions.Conditional _Conditional) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Condition), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Conditional));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Condition), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Conditional)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(dataaccess.expressions.Expression _Condition, dataaccess.expressions.Conditional _Conditional) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Condition), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Conditional));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Condition), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Conditional)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<dataaccess.expressions.AConditionConditional> get___JmiInterface() {
        return dataaccess.expressions.AConditionConditional.class;
    }

    protected String metaObjectToString() {
        return "dataaccess.expressions.AConditionConditional (Java Type)\ndataaccess.expressions.A_condition_conditional (MOF Type)"; //$NON-NLS-1$
    }    
}