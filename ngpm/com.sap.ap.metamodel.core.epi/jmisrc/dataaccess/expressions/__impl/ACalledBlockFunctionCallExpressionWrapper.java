/**
 * Generated by the MOIN Generator Version 3.0
 **/

package dataaccess.expressions.__impl;

public class ACalledBlockFunctionCallExpressionWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<dataaccess.expressions.ACalledBlockFunctionCallExpression> implements dataaccess.expressions.ACalledBlockFunctionCallExpression,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The ACalledBlockFunctionCallExpression wrapper
     */
    public ACalledBlockFunctionCallExpressionWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, dataaccess.expressions.__impl.ACalledBlockFunctionCallExpressionImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private dataaccess.expressions.__impl.ACalledBlockFunctionCallExpressionImpl getCastWrappedObject() {
        return (dataaccess.expressions.__impl.ACalledBlockFunctionCallExpressionImpl) getWrappedObject();
    }

    public dataaccess.expressions.ACalledBlockFunctionCallExpression unwrap() {
        return (dataaccess.expressions.ACalledBlockFunctionCallExpression) getWrappedObject();
    }
    
    public boolean exists(dataaccess.expressions.Expression _CalledBlock, dataaccess.expressions.FunctionCallExpression _FunctionCallExpression) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _CalledBlock), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FunctionCallExpression));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _CalledBlock), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FunctionCallExpression)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public dataaccess.expressions.Expression getCalledBlock(dataaccess.expressions.FunctionCallExpression _FunctionCallExpression) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (dataaccess.expressions.Expression) wrapResult(getCastWrappedObject().getCalledBlock(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FunctionCallExpression)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (dataaccess.expressions.Expression) wrapResult(getCastWrappedObject().getCalledBlock(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FunctionCallExpression))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public dataaccess.expressions.FunctionCallExpression getFunctionCallExpression(dataaccess.expressions.Expression _CalledBlock) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (dataaccess.expressions.FunctionCallExpression) wrapResult(getCastWrappedObject().getFunctionCallExpression(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _CalledBlock)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (dataaccess.expressions.FunctionCallExpression) wrapResult(getCastWrappedObject().getFunctionCallExpression(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _CalledBlock))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(dataaccess.expressions.Expression _CalledBlock, dataaccess.expressions.FunctionCallExpression _FunctionCallExpression) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _CalledBlock), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FunctionCallExpression));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _CalledBlock), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FunctionCallExpression)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(dataaccess.expressions.Expression _CalledBlock, dataaccess.expressions.FunctionCallExpression _FunctionCallExpression) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _CalledBlock), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FunctionCallExpression));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _CalledBlock), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FunctionCallExpression)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<dataaccess.expressions.ACalledBlockFunctionCallExpression> get___JmiInterface() {
        return dataaccess.expressions.ACalledBlockFunctionCallExpression.class;
    }

    protected String metaObjectToString() {
        return "dataaccess.expressions.ACalledBlockFunctionCallExpression (Java Type)\ndataaccess.expressions.A_calledBlock_functionCallExpression (MOF Type)"; //$NON-NLS-1$
    }    
}