/**
 * Generated by the MOIN Generator Version 3.0
 **/

package dataaccess.expressions.__impl;

public final class ExpressionsPackageImpl extends com.sap.tc.moin.repository.core.jmi.reflect.RefPackageImpl
{
        
    public static final java.util.Map<java.lang.String, java.lang.Integer> FEATURE_IDS;
    
    static {
        
        FEATURE_IDS = new java.util.HashMap<java.lang.String, java.lang.Integer>(52);
        FEATURE_IDS.put("literals", Integer.valueOf(0)); //$NON-NLS-1$
        FEATURE_IDS.put("collectionExpressions", Integer.valueOf(1)); //$NON-NLS-1$
        FEATURE_IDS.put("fp", Integer.valueOf(2)); //$NON-NLS-1$
        FEATURE_IDS.put("Expression", Integer.valueOf(3)); //$NON-NLS-1$
        FEATURE_IDS.put("VariableExpression", Integer.valueOf(4)); //$NON-NLS-1$
        FEATURE_IDS.put("MethodCallExpression", Integer.valueOf(5)); //$NON-NLS-1$
        FEATURE_IDS.put("ObjectBasedExpression", Integer.valueOf(6)); //$NON-NLS-1$
        FEATURE_IDS.put("ObjectCreationExpression", Integer.valueOf(7)); //$NON-NLS-1$
        FEATURE_IDS.put("FunctionCallExpression", Integer.valueOf(8)); //$NON-NLS-1$
        FEATURE_IDS.put("WithArgument", Integer.valueOf(9)); //$NON-NLS-1$
        FEATURE_IDS.put("This", Integer.valueOf(10)); //$NON-NLS-1$
        FEATURE_IDS.put("Equals", Integer.valueOf(11)); //$NON-NLS-1$
        FEATURE_IDS.put("AssociationEndNavigationExpression", Integer.valueOf(12)); //$NON-NLS-1$
        FEATURE_IDS.put("SignatureCallExpression", Integer.valueOf(13)); //$NON-NLS-1$
        FEATURE_IDS.put("ObjectCount", Integer.valueOf(14)); //$NON-NLS-1$
        FEATURE_IDS.put("Replace", Integer.valueOf(15)); //$NON-NLS-1$
        FEATURE_IDS.put("NavigationStep", Integer.valueOf(16)); //$NON-NLS-1$
        FEATURE_IDS.put("Head", Integer.valueOf(17)); //$NON-NLS-1$
        FEATURE_IDS.put("Tail", Integer.valueOf(18)); //$NON-NLS-1$
        FEATURE_IDS.put("AsList", Integer.valueOf(19)); //$NON-NLS-1$
        FEATURE_IDS.put("Conditional", Integer.valueOf(20)); //$NON-NLS-1$
        FEATURE_IDS.put("Ternary", Integer.valueOf(21)); //$NON-NLS-1$
        FEATURE_IDS.put("A_variable_variableExpression", Integer.valueOf(22)); //$NON-NLS-1$
        FEATURE_IDS.put("A_object_objectBasedExpression", Integer.valueOf(23)); //$NON-NLS-1$
        FEATURE_IDS.put("A_classToInstantiate_objectCreationExpression", Integer.valueOf(24)); //$NON-NLS-1$
        FEATURE_IDS.put("A_withArgument_argument", Integer.valueOf(25)); //$NON-NLS-1$
        FEATURE_IDS.put("A_calledBlock_functionCallExpression", Integer.valueOf(26)); //$NON-NLS-1$
        FEATURE_IDS.put("A_left_equals", Integer.valueOf(27)); //$NON-NLS-1$
        FEATURE_IDS.put("A_toEnd_associationEndNavigationExpression", Integer.valueOf(28)); //$NON-NLS-1$
        FEATURE_IDS.put("SignatureCallParameters", Integer.valueOf(29)); //$NON-NLS-1$
        FEATURE_IDS.put("SignatureCallToSignature", Integer.valueOf(30)); //$NON-NLS-1$
        FEATURE_IDS.put("A_right_equals", Integer.valueOf(31)); //$NON-NLS-1$
        FEATURE_IDS.put("A_steps_replace", Integer.valueOf(32)); //$NON-NLS-1$
        FEATURE_IDS.put("A_to_navigationStep", Integer.valueOf(33)); //$NON-NLS-1$
        FEATURE_IDS.put("A_filterFunction_navigationStep", Integer.valueOf(34)); //$NON-NLS-1$
        FEATURE_IDS.put("A_with_replace", Integer.valueOf(35)); //$NON-NLS-1$
        FEATURE_IDS.put("A_falseExpr_ternary", Integer.valueOf(36)); //$NON-NLS-1$
        FEATURE_IDS.put("A_trueExpr_ternary", Integer.valueOf(37)); //$NON-NLS-1$
        FEATURE_IDS.put("A_condition_conditional", Integer.valueOf(38)); //$NON-NLS-1$
    }

    // constructors    
    public ExpressionsPackageImpl()
    {
        super();
    }
    public ExpressionsPackageImpl(java.lang.Object workspace, java.lang.String mofId, com.sap.tc.moin.repository.mmi.reflect.RefPackage immediatePackage, com.sap.tc.moin.repository.mmi.reflect.RefObject metaObject)
    {
        super(workspace, mofId, immediatePackage, metaObject);
    }
    // internal enumeration creators
    // internal structure type creators
    // nested packages
    public com.sap.tc.moin.repository.mmi.reflect.RefPackage getLiterals(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refPackage(connection, "literals"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefPackage getCollectionExpressions(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refPackage(connection, "collectionExpressions"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefPackage getFp(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refPackage(connection, "fp"); //$NON-NLS-1$
    }
    // classes
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getExpression(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Expression"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getVariableExpression(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "VariableExpression"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getMethodCallExpression(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "MethodCallExpression"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getObjectBasedExpression(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "ObjectBasedExpression"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getObjectCreationExpression(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "ObjectCreationExpression"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getFunctionCallExpression(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "FunctionCallExpression"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getWithArgument(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "WithArgument"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getThis(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "This"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getEquals(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Equals"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getAssociationEndNavigationExpression(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "AssociationEndNavigationExpression"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getSignatureCallExpression(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "SignatureCallExpression"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getObjectCount(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "ObjectCount"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getReplace(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Replace"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getNavigationStep(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "NavigationStep"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getHead(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Head"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getTail(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Tail"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getAsList(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "AsList"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getConditional(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Conditional"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getTernary(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Ternary"); //$NON-NLS-1$
    }
    // associations
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getAVariableVariableExpression(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "A_variable_variableExpression"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getAObjectObjectBasedExpression(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "A_object_objectBasedExpression"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getAClassToInstantiateObjectCreationExpression(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "A_classToInstantiate_objectCreationExpression"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getAWithArgumentArgument(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "A_withArgument_argument"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getACalledBlockFunctionCallExpression(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "A_calledBlock_functionCallExpression"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getALeftEquals(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "A_left_equals"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getAToEndAssociationEndNavigationExpression(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "A_toEnd_associationEndNavigationExpression"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getSignatureCallParameters(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "SignatureCallParameters"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getSignatureCallToSignature(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "SignatureCallToSignature"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getARightEquals(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "A_right_equals"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getAStepsReplace(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "A_steps_replace"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getAToNavigationStep(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "A_to_navigationStep"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getAFilterFunctionNavigationStep(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "A_filterFunction_navigationStep"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getAWithReplace(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "A_with_replace"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getAFalseExprTernary(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "A_falseExpr_ternary"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getATrueExprTernary(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "A_trueExpr_ternary"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getAConditionConditional(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "A_condition_conditional"); //$NON-NLS-1$
    }
    // structure type creators

    protected java.lang.Object create___Extent(java.lang.Object workspace, java.lang.String mofId, com.sap.tc.moin.repository.mmi.reflect.RefPackage immediatePackage, com.sap.tc.moin.repository.mmi.reflect.RefObject metaObject) {
        java.lang.String name = ((com.sap.tc.moin.repository.mmi.model.ModelElement) metaObject).getName();
        com.sap.tc.moin.repository.mmi.reflect.RefBaseObject result = null;
        try {
            switch (FEATURE_IDS.get(name)) {
                case 0:
                    return new dataaccess.expressions.literals.__impl.LiteralsPackageImpl(workspace, mofId, immediatePackage, metaObject);
                case 1:
                    return new dataaccess.expressions.collectionexpressions.__impl.CollectionExpressionsPackageImpl(workspace, mofId, immediatePackage, metaObject);
                case 2:
                    return new dataaccess.expressions.fp.__impl.FpPackageImpl(workspace, mofId, immediatePackage, metaObject);
                case 3:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
                case 4:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("dataaccess.expressions.__impl.VariableExpressionImpl")); //$NON-NLS-1$
                case 5:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("dataaccess.expressions.__impl.MethodCallExpressionImpl")); //$NON-NLS-1$
                case 6:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
                case 7:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("dataaccess.expressions.__impl.ObjectCreationExpressionImpl")); //$NON-NLS-1$
                case 8:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("dataaccess.expressions.__impl.FunctionCallExpressionImpl")); //$NON-NLS-1$
                case 9:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
                case 10:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("dataaccess.expressions.__impl.ThisImpl")); //$NON-NLS-1$
                case 11:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("dataaccess.expressions.__impl.EqualsImpl")); //$NON-NLS-1$
                case 12:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("dataaccess.expressions.__impl.AssociationEndNavigationExpressionImpl")); //$NON-NLS-1$
                case 13:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
                case 14:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("dataaccess.expressions.__impl.ObjectCountImpl")); //$NON-NLS-1$
                case 15:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("dataaccess.expressions.__impl.ReplaceImpl")); //$NON-NLS-1$
                case 16:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("dataaccess.expressions.__impl.NavigationStepImpl")); //$NON-NLS-1$
                case 17:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("dataaccess.expressions.__impl.HeadImpl")); //$NON-NLS-1$
                case 18:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("dataaccess.expressions.__impl.TailImpl")); //$NON-NLS-1$
                case 19:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("dataaccess.expressions.__impl.AsListImpl")); //$NON-NLS-1$
                case 20:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
                case 21:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("dataaccess.expressions.__impl.TernaryImpl")); //$NON-NLS-1$
                case 22:
                    return new dataaccess.expressions.__impl.AVariableVariableExpressionImpl(workspace, mofId, immediatePackage, metaObject);
                case 23:
                    return new dataaccess.expressions.__impl.AObjectObjectBasedExpressionImpl(workspace, mofId, immediatePackage, metaObject);
                case 24:
                    return new dataaccess.expressions.__impl.AClassToInstantiateObjectCreationExpressionImpl(workspace, mofId, immediatePackage, metaObject);
                case 25:
                    return new dataaccess.expressions.__impl.AWithArgumentArgumentImpl(workspace, mofId, immediatePackage, metaObject);
                case 26:
                    return new dataaccess.expressions.__impl.ACalledBlockFunctionCallExpressionImpl(workspace, mofId, immediatePackage, metaObject);
                case 27:
                    return new dataaccess.expressions.__impl.ALeftEqualsImpl(workspace, mofId, immediatePackage, metaObject);
                case 28:
                    return new dataaccess.expressions.__impl.AToEndAssociationEndNavigationExpressionImpl(workspace, mofId, immediatePackage, metaObject);
                case 29:
                    return new dataaccess.expressions.__impl.SignatureCallParametersImpl(workspace, mofId, immediatePackage, metaObject);
                case 30:
                    return new dataaccess.expressions.__impl.SignatureCallToSignatureImpl(workspace, mofId, immediatePackage, metaObject);
                case 31:
                    return new dataaccess.expressions.__impl.ARightEqualsImpl(workspace, mofId, immediatePackage, metaObject);
                case 32:
                    return new dataaccess.expressions.__impl.AStepsReplaceImpl(workspace, mofId, immediatePackage, metaObject);
                case 33:
                    return new dataaccess.expressions.__impl.AToNavigationStepImpl(workspace, mofId, immediatePackage, metaObject);
                case 34:
                    return new dataaccess.expressions.__impl.AFilterFunctionNavigationStepImpl(workspace, mofId, immediatePackage, metaObject);
                case 35:
                    return new dataaccess.expressions.__impl.AWithReplaceImpl(workspace, mofId, immediatePackage, metaObject);
                case 36:
                    return new dataaccess.expressions.__impl.AFalseExprTernaryImpl(workspace, mofId, immediatePackage, metaObject);
                case 37:
                    return new dataaccess.expressions.__impl.ATrueExprTernaryImpl(workspace, mofId, immediatePackage, metaObject);
                case 38:
                    return new dataaccess.expressions.__impl.AConditionConditionalImpl(workspace, mofId, immediatePackage, metaObject);
                default:
                    throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException(name, null, "create___Extent()"); //$NON-NLS-1$
        }
        }
        catch(com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            throw ex;
        }
        catch(java.lang.Exception ex) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }        
    }

    public java.lang.Class<dataaccess.expressions.ExpressionsPackage> get___JmiInterface() {
        return dataaccess.expressions.ExpressionsPackage.class;
    }
    
    protected void initialize() {
        if (___refPackages == null) {
            ___refPackages = new java.util.ArrayList<RefPackageAndName>(3);
            ___refPackagesByName = new java.util.HashMap<String, RefPackageAndName>();
            java.lang.String name = ""; //$NON-NLS-1$
            RefPackageAndName rpan = null;
            name = "literals"; //$NON-NLS-1$
            rpan = new RefPackageAndName(name, "dataaccess.expressions.literals.LiteralsPackage", false); //$NON-NLS-1$
            ___refPackages.add(rpan);
            ___refPackagesByName.put(name, rpan);
            name = "collectionExpressions"; //$NON-NLS-1$
            rpan = new RefPackageAndName(name, "dataaccess.expressions.collectionexpressions.CollectionExpressionsPackage", false); //$NON-NLS-1$
            ___refPackages.add(rpan);
            ___refPackagesByName.put(name, rpan);
            name = "fp"; //$NON-NLS-1$
            rpan = new RefPackageAndName(name, "dataaccess.expressions.fp.FpPackage", false); //$NON-NLS-1$
            ___refPackages.add(rpan);
            ___refPackagesByName.put(name, rpan);
        }
  
        if (___refClasses == null) {
            ___refClasses = new java.util.ArrayList<RefClassAndName>(19);
            ___refClassesByName = new java.util.HashMap<String, RefClassAndName>();
            java.lang.String name = ""; //$NON-NLS-1$
            RefClassAndName rcan = null;
            name = "Expression"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "dataaccess.expressions.Expression"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "VariableExpression"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "dataaccess.expressions.VariableExpression"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "MethodCallExpression"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "dataaccess.expressions.MethodCallExpression"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "ObjectBasedExpression"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "dataaccess.expressions.ObjectBasedExpression"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "ObjectCreationExpression"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "dataaccess.expressions.ObjectCreationExpression"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "FunctionCallExpression"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "dataaccess.expressions.FunctionCallExpression"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "WithArgument"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "dataaccess.expressions.WithArgument"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "This"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "dataaccess.expressions.This"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Equals"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "dataaccess.expressions.Equals"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "AssociationEndNavigationExpression"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "dataaccess.expressions.AssociationEndNavigationExpression"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "SignatureCallExpression"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "dataaccess.expressions.SignatureCallExpression"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "ObjectCount"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "dataaccess.expressions.ObjectCount"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Replace"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "dataaccess.expressions.Replace"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "NavigationStep"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "dataaccess.expressions.NavigationStep"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Head"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "dataaccess.expressions.Head"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Tail"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "dataaccess.expressions.Tail"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "AsList"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "dataaccess.expressions.AsList"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Conditional"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "dataaccess.expressions.Conditional"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Ternary"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "dataaccess.expressions.Ternary"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
        }
  
        if (___refAssociations == null) {
            ___refAssociations = new java.util.ArrayList<RefAssociationAndName>(17);
            ___refAssociationsByName = new java.util.HashMap<String, RefAssociationAndName>();
            java.lang.String name = ""; //$NON-NLS-1$
            RefAssociationAndName raan = null;
            name = "A_variable_variableExpression"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "dataaccess.expressions.AVariableVariableExpression"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "A_object_objectBasedExpression"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "dataaccess.expressions.AObjectObjectBasedExpression"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "A_classToInstantiate_objectCreationExpression"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "dataaccess.expressions.AClassToInstantiateObjectCreationExpression"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "A_withArgument_argument"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "dataaccess.expressions.AWithArgumentArgument"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "A_calledBlock_functionCallExpression"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "dataaccess.expressions.ACalledBlockFunctionCallExpression"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "A_left_equals"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "dataaccess.expressions.ALeftEquals"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "A_toEnd_associationEndNavigationExpression"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "dataaccess.expressions.AToEndAssociationEndNavigationExpression"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "SignatureCallParameters"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "dataaccess.expressions.SignatureCallParameters"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "SignatureCallToSignature"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "dataaccess.expressions.SignatureCallToSignature"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "A_right_equals"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "dataaccess.expressions.ARightEquals"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "A_steps_replace"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "dataaccess.expressions.AStepsReplace"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "A_to_navigationStep"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "dataaccess.expressions.AToNavigationStep"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "A_filterFunction_navigationStep"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "dataaccess.expressions.AFilterFunctionNavigationStep"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "A_with_replace"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "dataaccess.expressions.AWithReplace"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "A_falseExpr_ternary"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "dataaccess.expressions.AFalseExprTernary"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "A_trueExpr_ternary"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "dataaccess.expressions.ATrueExprTernary"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "A_condition_conditional"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "dataaccess.expressions.AConditionConditional"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
        }
    }
    
    @Override
    public com.sap.tc.moin.repository.spi.core.Wrapper<dataaccess.expressions.__impl.ExpressionsPackageImpl> createWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, boolean synchronize) {
        return new dataaccess.expressions.__impl.ExpressionsPackageWrapper(conn, this, synchronize);
    }

}