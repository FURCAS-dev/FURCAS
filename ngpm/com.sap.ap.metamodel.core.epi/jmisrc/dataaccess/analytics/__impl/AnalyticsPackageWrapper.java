/**
 * Generated by the MOIN Generator Version 3.0
 **/

package dataaccess.analytics.__impl;

public class AnalyticsPackageWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefPackageWrapperImpl<dataaccess.analytics.__impl.AnalyticsPackageImpl> implements dataaccess.analytics.AnalyticsPackage,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AnalyticsPackage wrapper
     */
    public AnalyticsPackageWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, dataaccess.analytics.__impl.AnalyticsPackageImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    private dataaccess.analytics.__impl.AnalyticsPackageImpl getCastWrappedObject() {
        return (dataaccess.analytics.__impl.AnalyticsPackageImpl) getWrappedObject();
    }
    
    public dataaccess.analytics.__impl.AnalyticsPackageImpl unwrap() {
        return (dataaccess.analytics.__impl.AnalyticsPackageImpl) getWrappedObject();
    }
    
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getDimension()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getDimension(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getDimension(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getCellSet()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getCellSet(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getCellSet(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getDimensionExpression()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getDimensionExpression(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getDimensionExpression(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public dataaccess.analytics.ADimensionsCellSet getADimensionsCellSet()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (dataaccess.analytics.ADimensionsCellSet) wrapResult(getCastWrappedObject().getADimensionsCellSet(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (dataaccess.analytics.ADimensionsCellSet) wrapResult(getCastWrappedObject().getADimensionsCellSet(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public dataaccess.analytics.ACharacteristicFunctionDimension getACharacteristicFunctionDimension()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (dataaccess.analytics.ACharacteristicFunctionDimension) wrapResult(getCastWrappedObject().getACharacteristicFunctionDimension(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (dataaccess.analytics.ACharacteristicFunctionDimension) wrapResult(getCastWrappedObject().getACharacteristicFunctionDimension(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public dataaccess.analytics.AValueFunctionCellSetForValueFunction getAValueFunctionCellSetForValueFunction()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (dataaccess.analytics.AValueFunctionCellSetForValueFunction) wrapResult(getCastWrappedObject().getAValueFunctionCellSetForValueFunction(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (dataaccess.analytics.AValueFunctionCellSetForValueFunction) wrapResult(getCastWrappedObject().getAValueFunctionCellSetForValueFunction(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public dataaccess.analytics.AAggregationFunctionCellSetForAggregationFunction getAAggregationFunctionCellSetForAggregationFunction()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (dataaccess.analytics.AAggregationFunctionCellSetForAggregationFunction) wrapResult(getCastWrappedObject().getAAggregationFunctionCellSetForAggregationFunction(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (dataaccess.analytics.AAggregationFunctionCellSetForAggregationFunction) wrapResult(getCastWrappedObject().getAAggregationFunctionCellSetForAggregationFunction(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public dataaccess.analytics.ACellSetDimensionExpression getACellSetDimensionExpression()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (dataaccess.analytics.ACellSetDimensionExpression) wrapResult(getCastWrappedObject().getACellSetDimensionExpression(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (dataaccess.analytics.ACellSetDimensionExpression) wrapResult(getCastWrappedObject().getACellSetDimensionExpression(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public dataaccess.analytics.ADimensionDimensionExpression getADimensionDimensionExpression()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (dataaccess.analytics.ADimensionDimensionExpression) wrapResult(getCastWrappedObject().getADimensionDimensionExpression(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (dataaccess.analytics.ADimensionDimensionExpression) wrapResult(getCastWrappedObject().getADimensionDimensionExpression(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public dataaccess.analytics.AFactsTypeCellSet getAFactsTypeCellSet()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (dataaccess.analytics.AFactsTypeCellSet) wrapResult(getCastWrappedObject().getAFactsTypeCellSet(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (dataaccess.analytics.AFactsTypeCellSet) wrapResult(getCastWrappedObject().getAFactsTypeCellSet(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public dataaccess.analytics.AFactsDimensionExpression getAFactsDimensionExpression()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (dataaccess.analytics.AFactsDimensionExpression) wrapResult(getCastWrappedObject().getAFactsDimensionExpression(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (dataaccess.analytics.AFactsDimensionExpression) wrapResult(getCastWrappedObject().getAFactsDimensionExpression(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    // methods for structure type creators
    
    public java.lang.Class<dataaccess.analytics.AnalyticsPackage> get___JmiInterface() {
        return dataaccess.analytics.AnalyticsPackage.class;
    }
    
    protected String metaObjectToString() {
        return "dataaccess.analytics.AnalyticsPackage (Java Type)\ndataaccess.analytics (MOF Type)"; //$NON-NLS-1$
    }
}