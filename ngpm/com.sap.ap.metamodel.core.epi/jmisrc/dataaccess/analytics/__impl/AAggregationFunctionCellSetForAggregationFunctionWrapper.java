/**
 * Generated by the MOIN Generator Version 3.0
 **/

package dataaccess.analytics.__impl;

public class AAggregationFunctionCellSetForAggregationFunctionWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<dataaccess.analytics.AAggregationFunctionCellSetForAggregationFunction> implements dataaccess.analytics.AAggregationFunctionCellSetForAggregationFunction,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AAggregationFunctionCellSetForAggregationFunction wrapper
     */
    public AAggregationFunctionCellSetForAggregationFunctionWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, dataaccess.analytics.__impl.AAggregationFunctionCellSetForAggregationFunctionImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private dataaccess.analytics.__impl.AAggregationFunctionCellSetForAggregationFunctionImpl getCastWrappedObject() {
        return (dataaccess.analytics.__impl.AAggregationFunctionCellSetForAggregationFunctionImpl) getWrappedObject();
    }

    public dataaccess.analytics.AAggregationFunctionCellSetForAggregationFunction unwrap() {
        return (dataaccess.analytics.AAggregationFunctionCellSetForAggregationFunction) getWrappedObject();
    }
    
    public boolean exists(data.classes.FunctionSignature _AggregationFunction, dataaccess.analytics.CellSet _CellSetForAggregationFunction) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AggregationFunction), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _CellSetForAggregationFunction));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AggregationFunction), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _CellSetForAggregationFunction)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public data.classes.FunctionSignature getAggregationFunction(dataaccess.analytics.CellSet _CellSetForAggregationFunction) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (data.classes.FunctionSignature) wrapResult(getCastWrappedObject().getAggregationFunction(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _CellSetForAggregationFunction)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (data.classes.FunctionSignature) wrapResult(getCastWrappedObject().getAggregationFunction(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _CellSetForAggregationFunction))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public dataaccess.analytics.CellSet getCellSetForAggregationFunction(data.classes.FunctionSignature _AggregationFunction) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (dataaccess.analytics.CellSet) wrapResult(getCastWrappedObject().getCellSetForAggregationFunction(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AggregationFunction)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (dataaccess.analytics.CellSet) wrapResult(getCastWrappedObject().getCellSetForAggregationFunction(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AggregationFunction))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(data.classes.FunctionSignature _AggregationFunction, dataaccess.analytics.CellSet _CellSetForAggregationFunction) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AggregationFunction), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _CellSetForAggregationFunction));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AggregationFunction), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _CellSetForAggregationFunction)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(data.classes.FunctionSignature _AggregationFunction, dataaccess.analytics.CellSet _CellSetForAggregationFunction) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AggregationFunction), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _CellSetForAggregationFunction));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AggregationFunction), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _CellSetForAggregationFunction)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<dataaccess.analytics.AAggregationFunctionCellSetForAggregationFunction> get___JmiInterface() {
        return dataaccess.analytics.AAggregationFunctionCellSetForAggregationFunction.class;
    }

    protected String metaObjectToString() {
        return "dataaccess.analytics.AAggregationFunctionCellSetForAggregationFunction (Java Type)\ndataaccess.analytics.A_aggregationFunction_cellSetForAggregationFunction (MOF Type)"; //$NON-NLS-1$
    }    
}