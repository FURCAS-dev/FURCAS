/**
 * Generated by the MOIN Generator Version 3.0
 **/

package dataaccess.__impl;

public class DataaccessPackageWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefPackageWrapperImpl<dataaccess.__impl.DataaccessPackageImpl> implements dataaccess.DataaccessPackage,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The DataaccessPackage wrapper
     */
    public DataaccessPackageWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, dataaccess.__impl.DataaccessPackageImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    private dataaccess.__impl.DataaccessPackageImpl getCastWrappedObject() {
        return (dataaccess.__impl.DataaccessPackageImpl) getWrappedObject();
    }
    
    public dataaccess.__impl.DataaccessPackageImpl unwrap() {
        return (dataaccess.__impl.DataaccessPackageImpl) getWrappedObject();
    }
    
    public dataaccess.expressions.ExpressionsPackage getExpressions()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (dataaccess.expressions.ExpressionsPackage) wrapResult(getCastWrappedObject().getExpressions(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (dataaccess.expressions.ExpressionsPackage) wrapResult(getCastWrappedObject().getExpressions(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public dataaccess.query.QueryPackage getQuery()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (dataaccess.query.QueryPackage) wrapResult(getCastWrappedObject().getQuery(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (dataaccess.query.QueryPackage) wrapResult(getCastWrappedObject().getQuery(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public dataaccess.analytics.AnalyticsPackage getAnalytics()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (dataaccess.analytics.AnalyticsPackage) wrapResult(getCastWrappedObject().getAnalytics(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (dataaccess.analytics.AnalyticsPackage) wrapResult(getCastWrappedObject().getAnalytics(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    // methods for structure type creators
    
    public java.lang.Class<dataaccess.DataaccessPackage> get___JmiInterface() {
        return dataaccess.DataaccessPackage.class;
    }
    
    protected String metaObjectToString() {
        return "dataaccess.DataaccessPackage (Java Type)\ndataaccess (MOF Type)"; //$NON-NLS-1$
    }
}