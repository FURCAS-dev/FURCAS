/**
 * Generated by the MOIN Generator Version 3.0
 **/

package dataaccess.query.__impl;

public class QueryPackageWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefPackageWrapperImpl<dataaccess.query.__impl.QueryPackageImpl> implements dataaccess.query.QueryPackage,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The QueryPackage wrapper
     */
    public QueryPackageWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, dataaccess.query.__impl.QueryPackageImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    private dataaccess.query.__impl.QueryPackageImpl getCastWrappedObject() {
        return (dataaccess.query.__impl.QueryPackageImpl) getWrappedObject();
    }
    
    public dataaccess.query.__impl.QueryPackageImpl unwrap() {
        return (dataaccess.query.__impl.QueryPackageImpl) getWrappedObject();
    }
    
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getSelection()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getSelection(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getSelection(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public dataaccess.query.AIteratorSelection getAIteratorSelection()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (dataaccess.query.AIteratorSelection) wrapResult(getCastWrappedObject().getAIteratorSelection(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (dataaccess.query.AIteratorSelection) wrapResult(getCastWrappedObject().getAIteratorSelection(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public dataaccess.query.ASelectionExprSelection getASelectionExprSelection()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (dataaccess.query.ASelectionExprSelection) wrapResult(getCastWrappedObject().getASelectionExprSelection(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (dataaccess.query.ASelectionExprSelection) wrapResult(getCastWrappedObject().getASelectionExprSelection(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    // methods for structure type creators
    
    @SuppressWarnings("unchecked")
    public java.lang.Class<dataaccess.query.QueryPackage> get___JmiInterface() {
        return dataaccess.query.QueryPackage.class;
    }
    
    protected String metaObjectToString() {
        return "dataaccess.query.QueryPackage (Java Type)\ndataaccess.query (MOF Type)"; //$NON-NLS-1$
    }
}