/**
 * Generated by the MOIN Generator Version 3.0
 **/

package dataaccess.query.__impl;

public class AIteratorSelectionWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<dataaccess.query.AIteratorSelection> implements dataaccess.query.AIteratorSelection,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AIteratorSelection wrapper
     */
    public AIteratorSelectionWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, dataaccess.query.__impl.AIteratorSelectionImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private dataaccess.query.__impl.AIteratorSelectionImpl getCastWrappedObject() {
        return (dataaccess.query.__impl.AIteratorSelectionImpl) getWrappedObject();
    }

    public dataaccess.query.AIteratorSelection unwrap() {
        return (dataaccess.query.AIteratorSelection) getWrappedObject();
    }
    
    public boolean exists(behavioral.actions.Iterator _Iterator, dataaccess.query.Selection _Selection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Iterator), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Selection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Iterator), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Selection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public behavioral.actions.Iterator getIterator(dataaccess.query.Selection _Selection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (behavioral.actions.Iterator) wrapResult(getCastWrappedObject().getIterator(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Selection)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (behavioral.actions.Iterator) wrapResult(getCastWrappedObject().getIterator(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Selection))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public dataaccess.query.Selection getSelection(behavioral.actions.Iterator _Iterator) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (dataaccess.query.Selection) wrapResult(getCastWrappedObject().getSelection(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Iterator)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (dataaccess.query.Selection) wrapResult(getCastWrappedObject().getSelection(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Iterator))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(behavioral.actions.Iterator _Iterator, dataaccess.query.Selection _Selection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Iterator), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Selection));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Iterator), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Selection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(behavioral.actions.Iterator _Iterator, dataaccess.query.Selection _Selection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Iterator), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Selection));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Iterator), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Selection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<dataaccess.query.AIteratorSelection> get___JmiInterface() {
        return dataaccess.query.AIteratorSelection.class;
    }

    protected String metaObjectToString() {
        return "dataaccess.query.AIteratorSelection (Java Type)\ndataaccess.query.A_iterator_selection (MOF Type)"; //$NON-NLS-1$
    }    
}