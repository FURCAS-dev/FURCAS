/**
 * Generated by the MOIN Generator Version 3.0
 **/

package dataaccess.query.__impl;

public class ASelectionExprSelectionWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<dataaccess.query.ASelectionExprSelection> implements dataaccess.query.ASelectionExprSelection,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The ASelectionExprSelection wrapper
     */
    public ASelectionExprSelectionWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, dataaccess.query.__impl.ASelectionExprSelectionImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private dataaccess.query.__impl.ASelectionExprSelectionImpl getCastWrappedObject() {
        return (dataaccess.query.__impl.ASelectionExprSelectionImpl) getWrappedObject();
    }

    public dataaccess.query.ASelectionExprSelection unwrap() {
        return (dataaccess.query.ASelectionExprSelection) getWrappedObject();
    }
    
    public boolean exists(dataaccess.expressions.Expression _SelectionExpr, dataaccess.query.Selection _Selection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SelectionExpr), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Selection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SelectionExpr), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Selection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public dataaccess.expressions.Expression getSelectionExpr(dataaccess.query.Selection _Selection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (dataaccess.expressions.Expression) wrapResult(getCastWrappedObject().getSelectionExpr(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Selection)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (dataaccess.expressions.Expression) wrapResult(getCastWrappedObject().getSelectionExpr(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Selection))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public dataaccess.query.Selection getSelection(dataaccess.expressions.Expression _SelectionExpr) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (dataaccess.query.Selection) wrapResult(getCastWrappedObject().getSelection(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SelectionExpr)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (dataaccess.query.Selection) wrapResult(getCastWrappedObject().getSelection(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SelectionExpr))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(dataaccess.expressions.Expression _SelectionExpr, dataaccess.query.Selection _Selection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SelectionExpr), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Selection));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SelectionExpr), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Selection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(dataaccess.expressions.Expression _SelectionExpr, dataaccess.query.Selection _Selection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SelectionExpr), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Selection));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SelectionExpr), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Selection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<dataaccess.query.ASelectionExprSelection> get___JmiInterface() {
        return dataaccess.query.ASelectionExprSelection.class;
    }

    protected String metaObjectToString() {
        return "dataaccess.query.ASelectionExprSelection (Java Type)\ndataaccess.query.A_selectionExpr_selection (MOF Type)"; //$NON-NLS-1$
    }    
}