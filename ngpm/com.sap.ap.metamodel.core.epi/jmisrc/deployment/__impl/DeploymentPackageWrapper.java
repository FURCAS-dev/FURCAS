/**
 * Generated by the MOIN Generator Version 3.0
 **/

package deployment.__impl;

public class DeploymentPackageWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefPackageWrapperImpl<deployment.__impl.DeploymentPackageImpl> implements deployment.DeploymentPackage,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The DeploymentPackage wrapper
     */
    public DeploymentPackageWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, deployment.__impl.DeploymentPackageImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    private deployment.__impl.DeploymentPackageImpl getCastWrappedObject() {
        return (deployment.__impl.DeploymentPackageImpl) getWrappedObject();
    }
    
    public deployment.__impl.DeploymentPackageImpl unwrap() {
        return (deployment.__impl.DeploymentPackageImpl) getWrappedObject();
    }
    
    public deployment.landscape.LandscapePackage getLandscape()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (deployment.landscape.LandscapePackage) wrapResult(getCastWrappedObject().getLandscape(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (deployment.landscape.LandscapePackage) wrapResult(getCastWrappedObject().getLandscape(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public deployment.cachingandreplication.CachingandreplicationPackage getCachingandreplication()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (deployment.cachingandreplication.CachingandreplicationPackage) wrapResult(getCastWrappedObject().getCachingandreplication(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (deployment.cachingandreplication.CachingandreplicationPackage) wrapResult(getCastWrappedObject().getCachingandreplication(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    // methods for structure type creators
    
    @SuppressWarnings("unchecked")
    public java.lang.Class<deployment.DeploymentPackage> get___JmiInterface() {
        return deployment.DeploymentPackage.class;
    }
    
    protected String metaObjectToString() {
        return "deployment.DeploymentPackage (Java Type)\ndeployment (MOF Type)"; //$NON-NLS-1$
    }
}