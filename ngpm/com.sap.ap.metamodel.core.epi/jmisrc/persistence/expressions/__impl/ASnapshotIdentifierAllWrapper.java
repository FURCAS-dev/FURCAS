/**
 * Generated by the MOIN Generator Version 3.0
 **/

package persistence.expressions.__impl;

public class ASnapshotIdentifierAllWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<persistence.expressions.ASnapshotIdentifierAll> implements persistence.expressions.ASnapshotIdentifierAll,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The ASnapshotIdentifierAll wrapper
     */
    public ASnapshotIdentifierAllWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, persistence.expressions.__impl.ASnapshotIdentifierAllImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private persistence.expressions.__impl.ASnapshotIdentifierAllImpl getCastWrappedObject() {
        return (persistence.expressions.__impl.ASnapshotIdentifierAllImpl) getWrappedObject();
    }

    public persistence.expressions.ASnapshotIdentifierAll unwrap() {
        return (persistence.expressions.ASnapshotIdentifierAll) getWrappedObject();
    }
    
    public boolean exists(dataaccess.expressions.Expression _SnapshotIdentifier, persistence.expressions.All _All) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SnapshotIdentifier), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _All));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SnapshotIdentifier), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _All)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public dataaccess.expressions.Expression getSnapshotIdentifier(persistence.expressions.All _All) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (dataaccess.expressions.Expression) wrapResult(getCastWrappedObject().getSnapshotIdentifier(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _All)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (dataaccess.expressions.Expression) wrapResult(getCastWrappedObject().getSnapshotIdentifier(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _All))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getAll(dataaccess.expressions.Expression _SnapshotIdentifier) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getAll(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SnapshotIdentifier)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getAll(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SnapshotIdentifier))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(dataaccess.expressions.Expression _SnapshotIdentifier, persistence.expressions.All _All) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SnapshotIdentifier), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _All));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SnapshotIdentifier), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _All)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(dataaccess.expressions.Expression _SnapshotIdentifier, persistence.expressions.All _All) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SnapshotIdentifier), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _All));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SnapshotIdentifier), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _All)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<persistence.expressions.ASnapshotIdentifierAll> get___JmiInterface() {
        return persistence.expressions.ASnapshotIdentifierAll.class;
    }

    protected String metaObjectToString() {
        return "persistence.expressions.ASnapshotIdentifierAll (Java Type)\npersistence.expressions.A_snapshotIdentifier_all (MOF Type)"; //$NON-NLS-1$
    }    
}