/**
 * Generated by the MOIN Generator Version 3.0
 **/

package persistence.expressions.__impl;

public class ExpressionsPackageWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefPackageWrapperImpl<persistence.expressions.__impl.ExpressionsPackageImpl> implements persistence.expressions.ExpressionsPackage,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The ExpressionsPackage wrapper
     */
    public ExpressionsPackageWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, persistence.expressions.__impl.ExpressionsPackageImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    private persistence.expressions.__impl.ExpressionsPackageImpl getCastWrappedObject() {
        return (persistence.expressions.__impl.ExpressionsPackageImpl) getWrappedObject();
    }
    
    public persistence.expressions.__impl.ExpressionsPackageImpl unwrap() {
        return (persistence.expressions.__impl.ExpressionsPackageImpl) getWrappedObject();
    }
    
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getAll()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getAll(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getAll(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getCommit()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getCommit(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getCommit(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getSnapshot()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getSnapshot(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getSnapshot(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public persistence.expressions.AOfClassAll getAOfClassAll()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (persistence.expressions.AOfClassAll) wrapResult(getCastWrappedObject().getAOfClassAll(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (persistence.expressions.AOfClassAll) wrapResult(getCastWrappedObject().getAOfClassAll(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public persistence.expressions.ASnapshotIdentifierAll getASnapshotIdentifierAll()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (persistence.expressions.ASnapshotIdentifierAll) wrapResult(getCastWrappedObject().getASnapshotIdentifierAll(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (persistence.expressions.ASnapshotIdentifierAll) wrapResult(getCastWrappedObject().getASnapshotIdentifierAll(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    // methods for structure type creators
    
    @SuppressWarnings("unchecked")
    public java.lang.Class<persistence.expressions.ExpressionsPackage> get___JmiInterface() {
        return persistence.expressions.ExpressionsPackage.class;
    }
    
    protected String metaObjectToString() {
        return "persistence.expressions.ExpressionsPackage (Java Type)\npersistence.expressions (MOF Type)"; //$NON-NLS-1$
    }
}