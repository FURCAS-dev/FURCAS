/**
 * Generated by the MOIN Generator Version 3.0
 **/

package persistence.expressions;

/**
 * This interface is not intended to be implemented by clients.
 */
public interface All extends dataaccess.expressions.Expression {

    /**
     * Descriptors for all features of this MofClass and its supertypes.
     */
    public static final Descriptors DESCRIPTORS = new Descriptors( );

    // class extent descriptor
    /**
     * Extent descriptor
     */
    public final com.sap.tc.moin.repository.mmi.descriptors.ClassDescriptor<com.sap.tc.moin.repository.mmi.reflect.RefClass, persistence.expressions.All> CLASS_DESCRIPTOR = new com.sap.tc.moin.repository.mmi.descriptors.ClassDescriptor<com.sap.tc.moin.repository.mmi.reflect.RefClass, persistence.expressions.All>("E00C881E520349A33E4B11DEB9F70018DE1146FF", "sap.com/moin/mm/ap/core", "persistence", "expressions", "All"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ 

    
    // attributes
    /**
     * A selector for the snapshot to read. If DEFAULT, the entities will be read from the current session's default snapshot. If ALL is specified, all copies of instances in all snapshots is returned. If DATE, the lastSnapshotBeforeIsoTimestamp has to be set and all snapshots before that date are selected for which no successor exists that still lies before the timestamp specified. This means that the entity will be returned from all snapshots on concurrent branches that existed at the given point in time.
     */
    public persistence.expressions.SnapshotSelection getSnapshot() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    /**
     * A selector for the snapshot to read. If DEFAULT, the entities will be read from the current session's default snapshot. If ALL is specified, all copies of instances in all snapshots is returned. If DATE, the lastSnapshotBeforeIsoTimestamp has to be set and all snapshots before that date are selected for which no successor exists that still lies before the timestamp specified. This means that the entity will be returned from all snapshots on concurrent branches that existed at the given point in time.
     */
    public void setSnapshot(persistence.expressions.SnapshotSelection newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;

    // references
    public data.classes.SapClass getOfClass() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public void setOfClass(data.classes.SapClass newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public dataaccess.expressions.Expression getSnapshotIdentifier() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public void setSnapshotIdentifier(dataaccess.expressions.Expression newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;


    public static final class Descriptors {
        Descriptors( ) { 
        }
        private com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,persistence.expressions.All,persistence.expressions.SnapshotSelection> __snapshot;
        /**
         * Returns the descriptor for the <code>snapshot</code> attribute.
         * @return  the descriptor for the <code>snapshot</code> attribute
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,persistence.expressions.All,persistence.expressions.SnapshotSelection> SNAPSHOT( ) {
            if ( __snapshot == null ) {
                __snapshot = new com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,persistence.expressions.All,persistence.expressions.SnapshotSelection>( "E00C881E520349A23E4B11DEBA1A0018DE1146FF", "sap.com/moin/mm/ap/core", new java.lang.String[] { "persistence", "expressions", "All", "snapshot" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __snapshot;
        }
        /**
         * Returns the descriptor for the <code>ownedTypeDefinition</code> reference.
         * @return  the descriptor for the <code>ownedTypeDefinition</code> reference
         */
        public com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.TypedElement,data.classes.TypeDefinition> OWNED_TYPE_DEFINITION( ) {
            return data.classes.TypedElement.DESCRIPTORS.OWNED_TYPE_DEFINITION( );
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,persistence.expressions.All,data.classes.SapClass> __ofClass;
        /**
         * Returns the descriptor for the <code>ofClass</code> reference.
         * @return  the descriptor for the <code>ofClass</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,persistence.expressions.All,data.classes.SapClass> OF_CLASS( ) {
            if ( __ofClass == null ) {
                __ofClass = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,persistence.expressions.All,data.classes.SapClass>( "E00C881E520349A03E4B11DEAF1A0018DE1146FF", "sap.com/moin/mm/ap/core", new java.lang.String[] { "persistence", "expressions", "All", "ofClass" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __ofClass;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,persistence.expressions.All,dataaccess.expressions.Expression> __snapshotIdentifier;
        /**
         * Returns the descriptor for the <code>snapshotIdentifier</code> reference.
         * @return  the descriptor for the <code>snapshotIdentifier</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,persistence.expressions.All,dataaccess.expressions.Expression> SNAPSHOT_IDENTIFIER( ) {
            if ( __snapshotIdentifier == null ) {
                __snapshotIdentifier = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,persistence.expressions.All,dataaccess.expressions.Expression>( "E00C881E520349A13E4B11DEA2230018DE1146FF", "sap.com/moin/mm/ap/core", new java.lang.String[] { "persistence", "expressions", "All", "snapshotIdentifier" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __snapshotIdentifier;
        }
        /**
         * Returns the descriptor for the <code>conformsTo</code> operation.
         * @return  the descriptor for the <code>conformsTo</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypedElement,java.lang.Boolean> CONFORMS_TO( ) {
            return data.classes.TypedElement.DESCRIPTORS.CONFORMS_TO( );
        }
        /**
         * Returns the descriptor for the <code>getType</code> operation.
         * @return  the descriptor for the <code>getType</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypedElement,data.classes.TypeDefinition> GET_TYPE( ) {
            return data.classes.TypedElement.DESCRIPTORS.GET_TYPE( );
        }
        /**
         * Returns the descriptor for the <code>isSideEffectFree</code> operation.
         * @return  the descriptor for the <code>isSideEffectFree</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,dataaccess.expressions.Expression,java.lang.Boolean> IS_SIDE_EFFECT_FREE( ) {
            return dataaccess.expressions.Expression.DESCRIPTORS.IS_SIDE_EFFECT_FREE( );
        }
        /**
         * Returns the descriptor for the <code>evaluatesToEqualAs</code> operation.
         * @return  the descriptor for the <code>evaluatesToEqualAs</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,dataaccess.expressions.Expression,java.lang.Boolean> EVALUATES_TO_EQUAL_AS( ) {
            return dataaccess.expressions.Expression.DESCRIPTORS.EVALUATES_TO_EQUAL_AS( );
        }
        /**
         * Returns the descriptor for the <code>getUsedAliases</code> operation.
         * @return  the descriptor for the <code>getUsedAliases</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,dataaccess.expressions.Expression,java.util.Collection<behavioral.actions.Iterator>> GET_USED_ALIASES( ) {
            return dataaccess.expressions.Expression.DESCRIPTORS.GET_USED_ALIASES( );
        }
    }
}    