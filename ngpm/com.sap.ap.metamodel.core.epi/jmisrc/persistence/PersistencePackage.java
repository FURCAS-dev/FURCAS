/**
 * Generated by the MOIN Generator Version 3.0
 **/

package persistence;

/**
 * Persistence modeling cronstructs. This can primarily be used to tell whether an entity class shall have persistence support or not. Specific mark-up may be provided for associations.
 * <p>
 * The package also will allow developers to specify concurrency control aspects, such as the locking style to use for a transaction or an entity class. Developers also need to be able to specify how persistent data is to be "partitioned" in the sense of defining the granularity for locking and fetching data.
 * <p>
 * Furthermore, this package may contribute specific actions to make entity objects persistent and delete persistent objects.
 * <p>
 * The package also has to define the semantics of persistence in the first place, such as how persistence affects the semantics of queries.
 * <p>
 * TODO Does marking an entity class as persistent mean that there is this kind of "virtual" top-level "collection" of instances of this class which then can be queried and referred to by name? Is it like the topmost container that guarantees reachability and therefore allows for a garbage collection semantics "by reachability?"
 * <p>
 * TODO Perhaps this package should be separated out into an own top-level metamodel package because it has dependencies on behavioral/actions and dataaccess/expressions.
 * This interface is not intended to be implemented by clients.
 */
public interface PersistencePackage extends com.sap.tc.moin.repository.mmi.reflect.RefPackage
{
    /**
     * Extent descriptor
     */
    public final com.sap.tc.moin.repository.mmi.descriptors.PackageDescriptor<persistence.PersistencePackage> PACKAGE_DESCRIPTOR = new com.sap.tc.moin.repository.mmi.descriptors.PackageDescriptor<persistence.PersistencePackage>("E00C881E520349B13E4B11DE83970018DE1146FF", "sap.com/moin/mm/ap/core", "persistence"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ 
    // packages
    public persistence.actions.ActionsPackage getActions();
    public persistence.expressions.ExpressionsPackage getExpressions();
}