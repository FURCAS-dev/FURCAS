/**
 * Generated by the MOIN Generator Version 3.0
 **/

package modelmanagement.deploymentunits.__impl;

public class DeploymentUnitWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefObjectWrapperImpl<modelmanagement.deploymentunits.__impl.DeploymentUnitImpl> implements modelmanagement.deploymentunits.DeploymentUnit,com.sap.tc.moin.repository.Partitionable {

    
    static {
    }

    public DeploymentUnitWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, modelmanagement.deploymentunits.__impl.DeploymentUnitImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    private modelmanagement.deploymentunits.__impl.DeploymentUnitImpl getCastWrappedObject() {
        return (modelmanagement.deploymentunits.__impl.DeploymentUnitImpl) getWrappedObject();
    }
    
    private modelmanagement.deploymentunits.__impl.DeploymentUnitImpl getCastWrappedObject(com.sap.tc.moin.repository.core.CorePartitionable resolved) {
        return (modelmanagement.deploymentunits.__impl.DeploymentUnitImpl) resolved;
    }
    
    public modelmanagement.deploymentunits.__impl.DeploymentUnitImpl unwrap() {
        return (modelmanagement.deploymentunits.__impl.DeploymentUnitImpl) getWrappedObject();
    }
        
    // methods for attributes
    public java.lang.String getName() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        com.sap.tc.moin.repository.core.CorePartitionable resolved = mriReference.getIfResolved();
        if (resolved != null) {
            return getCastWrappedObject(resolved).getName();
        }
            try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().getName();
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().getName(); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public void setName(java.lang.String newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setName(connection, newValue);
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setName(connection, newValue);
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public localization.TranslatableText getDescription() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (localization.TranslatableText) wrapResult(getCastWrappedObject().getDescription(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (localization.TranslatableText) wrapResult(getCastWrappedObject().getDescription(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setDescription(localization.TranslatableText newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setDescription(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setDescription(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

     
    // methods for references
    public java.util.Collection<modelmanagement.Package> getOwnedPackages() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection<modelmanagement.Package>) wrapResult(getCastWrappedObject().getOwnedPackages(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection<modelmanagement.Package>) wrapResult(getCastWrappedObject().getOwnedPackages(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public java.util.Collection<modelmanagement.processcomponents.ProcessComponent> getPcsInsideCompany() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection<modelmanagement.processcomponents.ProcessComponent>) wrapResult(getCastWrappedObject().getPcsInsideCompany(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection<modelmanagement.processcomponents.ProcessComponent>) wrapResult(getCastWrappedObject().getPcsInsideCompany(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



   
    // methods for modeled operations
    
    // methods for internal modeled operations

    // reflective methods
    

    // get the JMI interface
    public java.lang.Class<modelmanagement.deploymentunits.DeploymentUnit> get___JmiInterface() {
        return modelmanagement.deploymentunits.DeploymentUnit.class;
    }

    // to String
    protected String metaObjectToString() {
        return "modelmanagement.deploymentunits.DeploymentUnit (Java Type)\nmodelmanagement.deploymentunits.DeploymentUnit (MOF Type)"; //$NON-NLS-1$
    }    
}