/**
 * Generated by the MOIN Generator Version 3.0
 **/

package modelmanagement.deploymentunits.__impl;

public class ADeploymentUnitsApplicationWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<modelmanagement.deploymentunits.ADeploymentUnitsApplication> implements modelmanagement.deploymentunits.ADeploymentUnitsApplication,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The ADeploymentUnitsApplication wrapper
     */
    public ADeploymentUnitsApplicationWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, modelmanagement.deploymentunits.__impl.ADeploymentUnitsApplicationImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private modelmanagement.deploymentunits.__impl.ADeploymentUnitsApplicationImpl getCastWrappedObject() {
        return (modelmanagement.deploymentunits.__impl.ADeploymentUnitsApplicationImpl) getWrappedObject();
    }

    public modelmanagement.deploymentunits.ADeploymentUnitsApplication unwrap() {
        return (modelmanagement.deploymentunits.ADeploymentUnitsApplication) getWrappedObject();
    }
    
    public boolean exists(modelmanagement.deploymentunits.DeploymentUnit _DeploymentUnits, modelmanagement.Application _Application) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _DeploymentUnits), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Application));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _DeploymentUnits), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Application)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getDeploymentUnits(modelmanagement.Application _Application) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getDeploymentUnits(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Application)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getDeploymentUnits(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Application))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public modelmanagement.Application getApplication(modelmanagement.deploymentunits.DeploymentUnit _DeploymentUnits) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (modelmanagement.Application) wrapResult(getCastWrappedObject().getApplication(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _DeploymentUnits)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (modelmanagement.Application) wrapResult(getCastWrappedObject().getApplication(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _DeploymentUnits))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(modelmanagement.deploymentunits.DeploymentUnit _DeploymentUnits, modelmanagement.Application _Application) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _DeploymentUnits), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Application));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _DeploymentUnits), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Application)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(modelmanagement.deploymentunits.DeploymentUnit _DeploymentUnits, modelmanagement.Application _Application) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _DeploymentUnits), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Application));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _DeploymentUnits), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Application)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<modelmanagement.deploymentunits.ADeploymentUnitsApplication> get___JmiInterface() {
        return modelmanagement.deploymentunits.ADeploymentUnitsApplication.class;
    }

    protected String metaObjectToString() {
        return "modelmanagement.deploymentunits.ADeploymentUnitsApplication (Java Type)\nmodelmanagement.deploymentunits.A_deploymentUnits_application (MOF Type)"; //$NON-NLS-1$
    }    
}