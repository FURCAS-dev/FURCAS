/**
 * Generated by the MOIN Generator Version 3.0
 **/

package modelmanagement.deploymentunits.__impl;

public class APcsInsideCompanyDeploymentUnitWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<modelmanagement.deploymentunits.APcsInsideCompanyDeploymentUnit> implements modelmanagement.deploymentunits.APcsInsideCompanyDeploymentUnit,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The APcsInsideCompanyDeploymentUnit wrapper
     */
    public APcsInsideCompanyDeploymentUnitWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, modelmanagement.deploymentunits.__impl.APcsInsideCompanyDeploymentUnitImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private modelmanagement.deploymentunits.__impl.APcsInsideCompanyDeploymentUnitImpl getCastWrappedObject() {
        return (modelmanagement.deploymentunits.__impl.APcsInsideCompanyDeploymentUnitImpl) getWrappedObject();
    }

    public modelmanagement.deploymentunits.APcsInsideCompanyDeploymentUnit unwrap() {
        return (modelmanagement.deploymentunits.APcsInsideCompanyDeploymentUnit) getWrappedObject();
    }
    
    public boolean exists(modelmanagement.processcomponents.ProcessComponent _PcsInsideCompany, modelmanagement.deploymentunits.DeploymentUnit _DeploymentUnit) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _PcsInsideCompany), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _DeploymentUnit));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _PcsInsideCompany), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _DeploymentUnit)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getPcsInsideCompany(modelmanagement.deploymentunits.DeploymentUnit _DeploymentUnit) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getPcsInsideCompany(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _DeploymentUnit)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getPcsInsideCompany(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _DeploymentUnit))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public modelmanagement.deploymentunits.DeploymentUnit getDeploymentUnit(modelmanagement.processcomponents.ProcessComponent _PcsInsideCompany) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (modelmanagement.deploymentunits.DeploymentUnit) wrapResult(getCastWrappedObject().getDeploymentUnit(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _PcsInsideCompany)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (modelmanagement.deploymentunits.DeploymentUnit) wrapResult(getCastWrappedObject().getDeploymentUnit(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _PcsInsideCompany))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(modelmanagement.processcomponents.ProcessComponent _PcsInsideCompany, modelmanagement.deploymentunits.DeploymentUnit _DeploymentUnit) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _PcsInsideCompany), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _DeploymentUnit));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _PcsInsideCompany), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _DeploymentUnit)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(modelmanagement.processcomponents.ProcessComponent _PcsInsideCompany, modelmanagement.deploymentunits.DeploymentUnit _DeploymentUnit) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _PcsInsideCompany), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _DeploymentUnit));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _PcsInsideCompany), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _DeploymentUnit)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<modelmanagement.deploymentunits.APcsInsideCompanyDeploymentUnit> get___JmiInterface() {
        return modelmanagement.deploymentunits.APcsInsideCompanyDeploymentUnit.class;
    }

    protected String metaObjectToString() {
        return "modelmanagement.deploymentunits.APcsInsideCompanyDeploymentUnit (Java Type)\nmodelmanagement.deploymentunits.A_pcsInsideCompany_deploymentUnit (MOF Type)"; //$NON-NLS-1$
    }    
}