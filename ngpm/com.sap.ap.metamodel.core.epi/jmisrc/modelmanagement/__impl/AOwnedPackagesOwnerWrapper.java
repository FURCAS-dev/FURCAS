/**
 * Generated by the MOIN Generator Version 3.0
 **/

package modelmanagement.__impl;

public class AOwnedPackagesOwnerWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<modelmanagement.AOwnedPackagesOwner> implements modelmanagement.AOwnedPackagesOwner,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AOwnedPackagesOwner wrapper
     */
    public AOwnedPackagesOwnerWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, modelmanagement.__impl.AOwnedPackagesOwnerImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private modelmanagement.__impl.AOwnedPackagesOwnerImpl getCastWrappedObject() {
        return (modelmanagement.__impl.AOwnedPackagesOwnerImpl) getWrappedObject();
    }

    public modelmanagement.AOwnedPackagesOwner unwrap() {
        return (modelmanagement.AOwnedPackagesOwner) getWrappedObject();
    }
    
    public boolean exists(modelmanagement.Package _OwnedPackages, modelmanagement.PackageOwner _Owner) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _OwnedPackages), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Owner));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _OwnedPackages), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Owner)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getOwnedPackages(modelmanagement.PackageOwner _Owner) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getOwnedPackages(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Owner)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getOwnedPackages(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Owner))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public modelmanagement.PackageOwner getOwner(modelmanagement.Package _OwnedPackages) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (modelmanagement.PackageOwner) wrapResult(getCastWrappedObject().getOwner(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _OwnedPackages)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (modelmanagement.PackageOwner) wrapResult(getCastWrappedObject().getOwner(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _OwnedPackages))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(modelmanagement.Package _OwnedPackages, modelmanagement.PackageOwner _Owner) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _OwnedPackages), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Owner));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _OwnedPackages), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Owner)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(modelmanagement.Package _OwnedPackages, modelmanagement.PackageOwner _Owner) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _OwnedPackages), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Owner));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _OwnedPackages), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Owner)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<modelmanagement.AOwnedPackagesOwner> get___JmiInterface() {
        return modelmanagement.AOwnedPackagesOwner.class;
    }

    protected String metaObjectToString() {
        return "modelmanagement.AOwnedPackagesOwner (Java Type)\nmodelmanagement.A_ownedPackages_owner (MOF Type)"; //$NON-NLS-1$
    }    
}