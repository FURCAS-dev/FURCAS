/**
 * Generated by the MOIN Generator Version 3.0
 **/

package modelmanagement.processcomponents.__impl;

public class ProcesscomponentsPackageWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefPackageWrapperImpl<modelmanagement.processcomponents.__impl.ProcesscomponentsPackageImpl> implements modelmanagement.processcomponents.ProcesscomponentsPackage,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The ProcesscomponentsPackage wrapper
     */
    public ProcesscomponentsPackageWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, modelmanagement.processcomponents.__impl.ProcesscomponentsPackageImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    private modelmanagement.processcomponents.__impl.ProcesscomponentsPackageImpl getCastWrappedObject() {
        return (modelmanagement.processcomponents.__impl.ProcesscomponentsPackageImpl) getWrappedObject();
    }
    
    public modelmanagement.processcomponents.__impl.ProcesscomponentsPackageImpl unwrap() {
        return (modelmanagement.processcomponents.__impl.ProcesscomponentsPackageImpl) getWrappedObject();
    }
    
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getProcessComponent()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getProcessComponent(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getProcessComponent(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getProcessComponentInsideCompany()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getProcessComponentInsideCompany(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getProcessComponentInsideCompany(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getProcessComponentOutsideCompany()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getProcessComponentOutsideCompany(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getProcessComponentOutsideCompany(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public modelmanagement.processcomponents.AProvidedInterfacesProcessComponent getAProvidedInterfacesProcessComponent()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (modelmanagement.processcomponents.AProvidedInterfacesProcessComponent) wrapResult(getCastWrappedObject().getAProvidedInterfacesProcessComponent(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (modelmanagement.processcomponents.AProvidedInterfacesProcessComponent) wrapResult(getCastWrappedObject().getAProvidedInterfacesProcessComponent(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public modelmanagement.processcomponents.AEventProducersProcessComponent getAEventProducersProcessComponent()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (modelmanagement.processcomponents.AEventProducersProcessComponent) wrapResult(getCastWrappedObject().getAEventProducersProcessComponent(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (modelmanagement.processcomponents.AEventProducersProcessComponent) wrapResult(getCastWrappedObject().getAEventProducersProcessComponent(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    // methods for structure type creators
    
    public java.lang.Class<modelmanagement.processcomponents.ProcesscomponentsPackage> get___JmiInterface() {
        return modelmanagement.processcomponents.ProcesscomponentsPackage.class;
    }
    
    protected String metaObjectToString() {
        return "modelmanagement.processcomponents.ProcesscomponentsPackage (Java Type)\nmodelmanagement.processcomponents (MOF Type)"; //$NON-NLS-1$
    }
}