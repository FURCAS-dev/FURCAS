/**
 * Generated by the MOIN Generator Version 3.0
 **/

package modelmanagement.processcomponents.__impl;

public class AEventProducersProcessComponentWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<modelmanagement.processcomponents.AEventProducersProcessComponent> implements modelmanagement.processcomponents.AEventProducersProcessComponent,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AEventProducersProcessComponent wrapper
     */
    public AEventProducersProcessComponentWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, modelmanagement.processcomponents.__impl.AEventProducersProcessComponentImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private modelmanagement.processcomponents.__impl.AEventProducersProcessComponentImpl getCastWrappedObject() {
        return (modelmanagement.processcomponents.__impl.AEventProducersProcessComponentImpl) getWrappedObject();
    }

    public modelmanagement.processcomponents.AEventProducersProcessComponent unwrap() {
        return (modelmanagement.processcomponents.AEventProducersProcessComponent) getWrappedObject();
    }
    
    public boolean exists(behavioral.events.EventProducer _EventProducers, modelmanagement.processcomponents.ProcessComponent _ProcessComponent) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _EventProducers), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ProcessComponent));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _EventProducers), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ProcessComponent)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getEventProducers(modelmanagement.processcomponents.ProcessComponent _ProcessComponent) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getEventProducers(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ProcessComponent)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getEventProducers(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ProcessComponent))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getProcessComponent(behavioral.events.EventProducer _EventProducers) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getProcessComponent(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _EventProducers)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getProcessComponent(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _EventProducers))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(behavioral.events.EventProducer _EventProducers, modelmanagement.processcomponents.ProcessComponent _ProcessComponent) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _EventProducers), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ProcessComponent));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _EventProducers), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ProcessComponent)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(behavioral.events.EventProducer _EventProducers, modelmanagement.processcomponents.ProcessComponent _ProcessComponent) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _EventProducers), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ProcessComponent));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _EventProducers), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ProcessComponent)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<modelmanagement.processcomponents.AEventProducersProcessComponent> get___JmiInterface() {
        return modelmanagement.processcomponents.AEventProducersProcessComponent.class;
    }

    protected String metaObjectToString() {
        return "modelmanagement.processcomponents.AEventProducersProcessComponent (Java Type)\nmodelmanagement.processcomponents.A_eventProducers_processComponent (MOF Type)"; //$NON-NLS-1$
    }    
}