/**
 * Generated by the MOIN Generator Version 3.0
 **/

package ui.templates.__impl;

public class AExpressionsTemplateWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<ui.templates.AExpressionsTemplate> implements ui.templates.AExpressionsTemplate,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AExpressionsTemplate wrapper
     */
    public AExpressionsTemplateWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, ui.templates.__impl.AExpressionsTemplateImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private ui.templates.__impl.AExpressionsTemplateImpl getCastWrappedObject() {
        return (ui.templates.__impl.AExpressionsTemplateImpl) getWrappedObject();
    }

    public ui.templates.AExpressionsTemplate unwrap() {
        return (ui.templates.AExpressionsTemplate) getWrappedObject();
    }
    
    public boolean exists(dataaccess.expressions.Expression _Expressions, ui.templates.StringTemplate _Template) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Expressions), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Template));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Expressions), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Template)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.List getExpressions(ui.templates.StringTemplate _Template) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.List) wrapResult(getCastWrappedObject().getExpressions(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Template)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.List) wrapResult(getCastWrappedObject().getExpressions(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Template))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public ui.templates.StringTemplate getTemplate(dataaccess.expressions.Expression _Expressions) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (ui.templates.StringTemplate) wrapResult(getCastWrappedObject().getTemplate(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Expressions)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (ui.templates.StringTemplate) wrapResult(getCastWrappedObject().getTemplate(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Expressions))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(dataaccess.expressions.Expression _Expressions, ui.templates.StringTemplate _Template) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Expressions), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Template));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Expressions), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Template)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(dataaccess.expressions.Expression _Expressions, ui.templates.StringTemplate _Template) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Expressions), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Template));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Expressions), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Template)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<ui.templates.AExpressionsTemplate> get___JmiInterface() {
        return ui.templates.AExpressionsTemplate.class;
    }

    protected String metaObjectToString() {
        return "ui.templates.AExpressionsTemplate (Java Type)\nui.templates.A_expressions_template (MOF Type)"; //$NON-NLS-1$
    }    
}