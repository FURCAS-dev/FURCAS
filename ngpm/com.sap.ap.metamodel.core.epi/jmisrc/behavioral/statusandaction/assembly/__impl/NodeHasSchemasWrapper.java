/**
 * Generated by the MOIN Generator Version 3.0
 **/

package behavioral.statusandaction.assembly.__impl;

public class NodeHasSchemasWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<behavioral.statusandaction.assembly.NodeHasSchemas> implements behavioral.statusandaction.assembly.NodeHasSchemas,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The NodeHasSchemas wrapper
     */
    public NodeHasSchemasWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, behavioral.statusandaction.assembly.__impl.NodeHasSchemasImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private behavioral.statusandaction.assembly.__impl.NodeHasSchemasImpl getCastWrappedObject() {
        return (behavioral.statusandaction.assembly.__impl.NodeHasSchemasImpl) getWrappedObject();
    }

    public behavioral.statusandaction.assembly.NodeHasSchemas unwrap() {
        return (behavioral.statusandaction.assembly.NodeHasSchemas) getWrappedObject();
    }
    
    public boolean exists(data.classes.SapClass _Node, behavioral.statusandaction.assembly.StatusSchema _BehaviouralModel) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Node), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _BehaviouralModel));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Node), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _BehaviouralModel)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public data.classes.SapClass getNode(behavioral.statusandaction.assembly.StatusSchema _BehaviouralModel) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (data.classes.SapClass) wrapResult(getCastWrappedObject().getNode(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _BehaviouralModel)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (data.classes.SapClass) wrapResult(getCastWrappedObject().getNode(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _BehaviouralModel))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getBehaviouralModel(data.classes.SapClass _Node) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getBehaviouralModel(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Node)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getBehaviouralModel(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Node))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(data.classes.SapClass _Node, behavioral.statusandaction.assembly.StatusSchema _BehaviouralModel) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Node), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _BehaviouralModel));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Node), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _BehaviouralModel)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(data.classes.SapClass _Node, behavioral.statusandaction.assembly.StatusSchema _BehaviouralModel) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Node), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _BehaviouralModel));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Node), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _BehaviouralModel)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<behavioral.statusandaction.assembly.NodeHasSchemas> get___JmiInterface() {
        return behavioral.statusandaction.assembly.NodeHasSchemas.class;
    }

    protected String metaObjectToString() {
        return "behavioral.statusandaction.assembly.NodeHasSchemas (Java Type)\nbehavioral.status_and_action.assembly.NodeHasSchemas (MOF Type)"; //$NON-NLS-1$
    }    
}