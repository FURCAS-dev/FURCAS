/**
 * Generated by the MOIN Generator Version 3.0
 **/

package behavioral.statusandaction.assembly.__impl;

public final class AssemblyPackageImpl extends com.sap.tc.moin.repository.core.jmi.reflect.RefPackageImpl
{
        
    public static final java.util.Map<java.lang.String, java.lang.Integer> FEATURE_IDS;
    
    static {
        
        FEATURE_IDS = new java.util.HashMap<java.lang.String, java.lang.Integer>(35);
        FEATURE_IDS.put("StatusSchema", Integer.valueOf(0)); //$NON-NLS-1$
        FEATURE_IDS.put("Connector", Integer.valueOf(1)); //$NON-NLS-1$
        FEATURE_IDS.put("Operator", Integer.valueOf(2)); //$NON-NLS-1$
        FEATURE_IDS.put("ConnectableElement", Integer.valueOf(3)); //$NON-NLS-1$
        FEATURE_IDS.put("ActionProxy", Integer.valueOf(4)); //$NON-NLS-1$
        FEATURE_IDS.put("StatusValueProxy", Integer.valueOf(5)); //$NON-NLS-1$
        FEATURE_IDS.put("Transition", Integer.valueOf(6)); //$NON-NLS-1$
        FEATURE_IDS.put("Synchroniser", Integer.valueOf(7)); //$NON-NLS-1$
        FEATURE_IDS.put("Precondition", Integer.valueOf(8)); //$NON-NLS-1$
        FEATURE_IDS.put("StatusVariableProxy", Integer.valueOf(9)); //$NON-NLS-1$
        FEATURE_IDS.put("AndOperator", Integer.valueOf(10)); //$NON-NLS-1$
        FEATURE_IDS.put("OrOperator", Integer.valueOf(11)); //$NON-NLS-1$
        FEATURE_IDS.put("RequiredStrategy", Integer.valueOf(12)); //$NON-NLS-1$
        FEATURE_IDS.put("NeutralStrategy", Integer.valueOf(13)); //$NON-NLS-1$
        FEATURE_IDS.put("EnablingStrategy", Integer.valueOf(14)); //$NON-NLS-1$
        FEATURE_IDS.put("InhibitingStrategy", Integer.valueOf(15)); //$NON-NLS-1$
        FEATURE_IDS.put("Strategy", Integer.valueOf(16)); //$NON-NLS-1$
        FEATURE_IDS.put("SchemaElement", Integer.valueOf(17)); //$NON-NLS-1$
        FEATURE_IDS.put("ProxyRepresentsAction", Integer.valueOf(18)); //$NON-NLS-1$
        FEATURE_IDS.put("ProxyRepresentsValue", Integer.valueOf(19)); //$NON-NLS-1$
        FEATURE_IDS.put("ProxyRepresentsVariable", Integer.valueOf(20)); //$NON-NLS-1$
        FEATURE_IDS.put("NodeHasSchemas", Integer.valueOf(21)); //$NON-NLS-1$
        FEATURE_IDS.put("ConnectorHasSource", Integer.valueOf(22)); //$NON-NLS-1$
        FEATURE_IDS.put("ConnectorHasTarget", Integer.valueOf(23)); //$NON-NLS-1$
        FEATURE_IDS.put("PreconditionHasStrategy", Integer.valueOf(24)); //$NON-NLS-1$
        FEATURE_IDS.put("SchemaOwnsElements", Integer.valueOf(25)); //$NON-NLS-1$
    }

    // constructors    
    public AssemblyPackageImpl()
    {
        super();
    }
    public AssemblyPackageImpl(java.lang.Object workspace, java.lang.String mofId, com.sap.tc.moin.repository.mmi.reflect.RefPackage immediatePackage, com.sap.tc.moin.repository.mmi.reflect.RefObject metaObject)
    {
        super(workspace, mofId, immediatePackage, metaObject);
    }
    // internal enumeration creators
    // internal structure type creators
    // nested packages
    // classes
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getStatusSchema(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "StatusSchema"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getConnector(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Connector"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getOperator(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Operator"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getConnectableElement(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "ConnectableElement"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getActionProxy(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "ActionProxy"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getStatusValueProxy(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "StatusValueProxy"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getTransition(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Transition"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getSynchroniser(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Synchroniser"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getPrecondition(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Precondition"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getStatusVariableProxy(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "StatusVariableProxy"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getAndOperator(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "AndOperator"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getOrOperator(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "OrOperator"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getRequiredStrategy(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "RequiredStrategy"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getNeutralStrategy(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "NeutralStrategy"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getEnablingStrategy(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "EnablingStrategy"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getInhibitingStrategy(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "InhibitingStrategy"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getStrategy(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Strategy"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getSchemaElement(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "SchemaElement"); //$NON-NLS-1$
    }
    // associations
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getProxyRepresentsAction(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "ProxyRepresentsAction"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getProxyRepresentsValue(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "ProxyRepresentsValue"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getProxyRepresentsVariable(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "ProxyRepresentsVariable"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getNodeHasSchemas(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "NodeHasSchemas"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getConnectorHasSource(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "ConnectorHasSource"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getConnectorHasTarget(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "ConnectorHasTarget"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getPreconditionHasStrategy(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "PreconditionHasStrategy"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getSchemaOwnsElements(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "SchemaOwnsElements"); //$NON-NLS-1$
    }
    // structure type creators

    protected java.lang.Object create___Extent(java.lang.Object workspace, java.lang.String mofId, com.sap.tc.moin.repository.mmi.reflect.RefPackage immediatePackage, com.sap.tc.moin.repository.mmi.reflect.RefObject metaObject) {
        java.lang.String name = ((com.sap.tc.moin.repository.mmi.model.ModelElement) metaObject).getName();
        com.sap.tc.moin.repository.mmi.reflect.RefBaseObject result = null;
        try {
            switch (FEATURE_IDS.get(name)) {
                case 0:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavioral.statusandaction.assembly.__impl.StatusSchemaImpl")); //$NON-NLS-1$
                case 1:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
                case 2:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavioral.statusandaction.assembly.__impl.OperatorImpl")); //$NON-NLS-1$
                case 3:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
                case 4:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavioral.statusandaction.assembly.__impl.ActionProxyImpl")); //$NON-NLS-1$
                case 5:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavioral.statusandaction.assembly.__impl.StatusValueProxyImpl")); //$NON-NLS-1$
                case 6:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavioral.statusandaction.assembly.__impl.TransitionImpl")); //$NON-NLS-1$
                case 7:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavioral.statusandaction.assembly.__impl.SynchroniserImpl")); //$NON-NLS-1$
                case 8:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavioral.statusandaction.assembly.__impl.PreconditionImpl")); //$NON-NLS-1$
                case 9:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavioral.statusandaction.assembly.__impl.StatusVariableProxyImpl")); //$NON-NLS-1$
                case 10:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavioral.statusandaction.assembly.__impl.AndOperatorImpl")); //$NON-NLS-1$
                case 11:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavioral.statusandaction.assembly.__impl.OrOperatorImpl")); //$NON-NLS-1$
                case 12:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavioral.statusandaction.assembly.__impl.RequiredStrategyImpl")); //$NON-NLS-1$
                case 13:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavioral.statusandaction.assembly.__impl.NeutralStrategyImpl")); //$NON-NLS-1$
                case 14:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavioral.statusandaction.assembly.__impl.EnablingStrategyImpl")); //$NON-NLS-1$
                case 15:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavioral.statusandaction.assembly.__impl.InhibitingStrategyImpl")); //$NON-NLS-1$
                case 16:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
                case 17:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
                case 18:
                    return new behavioral.statusandaction.assembly.__impl.ProxyRepresentsActionImpl(workspace, mofId, immediatePackage, metaObject);
                case 19:
                    return new behavioral.statusandaction.assembly.__impl.ProxyRepresentsValueImpl(workspace, mofId, immediatePackage, metaObject);
                case 20:
                    return new behavioral.statusandaction.assembly.__impl.ProxyRepresentsVariableImpl(workspace, mofId, immediatePackage, metaObject);
                case 21:
                    return new behavioral.statusandaction.assembly.__impl.NodeHasSchemasImpl(workspace, mofId, immediatePackage, metaObject);
                case 22:
                    return new behavioral.statusandaction.assembly.__impl.ConnectorHasSourceImpl(workspace, mofId, immediatePackage, metaObject);
                case 23:
                    return new behavioral.statusandaction.assembly.__impl.ConnectorHasTargetImpl(workspace, mofId, immediatePackage, metaObject);
                case 24:
                    return new behavioral.statusandaction.assembly.__impl.PreconditionHasStrategyImpl(workspace, mofId, immediatePackage, metaObject);
                case 25:
                    return new behavioral.statusandaction.assembly.__impl.SchemaOwnsElementsImpl(workspace, mofId, immediatePackage, metaObject);
                default:
                    throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException(name, null, "create___Extent()"); //$NON-NLS-1$
        }
        }
        catch(com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            throw ex;
        }
        catch(java.lang.Exception ex) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }        
    }

    public java.lang.Class<behavioral.statusandaction.assembly.AssemblyPackage> get___JmiInterface() {
        return behavioral.statusandaction.assembly.AssemblyPackage.class;
    }
    
    protected void initialize() {
        if (___refPackages == null) {
            ___refPackages = new java.util.ArrayList<RefPackageAndName>(0);
            ___refPackagesByName = new java.util.HashMap<String, RefPackageAndName>();
            java.lang.String name = ""; //$NON-NLS-1$
            RefPackageAndName rpan = null;
        }
  
        if (___refClasses == null) {
            ___refClasses = new java.util.ArrayList<RefClassAndName>(18);
            ___refClassesByName = new java.util.HashMap<String, RefClassAndName>();
            java.lang.String name = ""; //$NON-NLS-1$
            RefClassAndName rcan = null;
            name = "StatusSchema"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavioral.statusandaction.assembly.StatusSchema"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Connector"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavioral.statusandaction.assembly.Connector"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Operator"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavioral.statusandaction.assembly.Operator"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "ConnectableElement"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavioral.statusandaction.assembly.ConnectableElement"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "ActionProxy"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavioral.statusandaction.assembly.ActionProxy"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "StatusValueProxy"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavioral.statusandaction.assembly.StatusValueProxy"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Transition"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavioral.statusandaction.assembly.Transition"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Synchroniser"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavioral.statusandaction.assembly.Synchroniser"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Precondition"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavioral.statusandaction.assembly.Precondition"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "StatusVariableProxy"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavioral.statusandaction.assembly.StatusVariableProxy"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "AndOperator"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavioral.statusandaction.assembly.AndOperator"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "OrOperator"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavioral.statusandaction.assembly.OrOperator"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "RequiredStrategy"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavioral.statusandaction.assembly.RequiredStrategy"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "NeutralStrategy"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavioral.statusandaction.assembly.NeutralStrategy"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "EnablingStrategy"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavioral.statusandaction.assembly.EnablingStrategy"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "InhibitingStrategy"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavioral.statusandaction.assembly.InhibitingStrategy"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Strategy"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavioral.statusandaction.assembly.Strategy"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "SchemaElement"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavioral.statusandaction.assembly.SchemaElement"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
        }
  
        if (___refAssociations == null) {
            ___refAssociations = new java.util.ArrayList<RefAssociationAndName>(8);
            ___refAssociationsByName = new java.util.HashMap<String, RefAssociationAndName>();
            java.lang.String name = ""; //$NON-NLS-1$
            RefAssociationAndName raan = null;
            name = "ProxyRepresentsAction"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "behavioral.statusandaction.assembly.ProxyRepresentsAction"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "ProxyRepresentsValue"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "behavioral.statusandaction.assembly.ProxyRepresentsValue"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "ProxyRepresentsVariable"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "behavioral.statusandaction.assembly.ProxyRepresentsVariable"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "NodeHasSchemas"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "behavioral.statusandaction.assembly.NodeHasSchemas"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "ConnectorHasSource"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "behavioral.statusandaction.assembly.ConnectorHasSource"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "ConnectorHasTarget"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "behavioral.statusandaction.assembly.ConnectorHasTarget"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "PreconditionHasStrategy"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "behavioral.statusandaction.assembly.PreconditionHasStrategy"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "SchemaOwnsElements"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "behavioral.statusandaction.assembly.SchemaOwnsElements"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
        }
    }
    
    @Override
    public com.sap.tc.moin.repository.spi.core.Wrapper<behavioral.statusandaction.assembly.__impl.AssemblyPackageImpl> createWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, boolean synchronize) {
        return new behavioral.statusandaction.assembly.__impl.AssemblyPackageWrapper(conn, this, synchronize);
    }

}