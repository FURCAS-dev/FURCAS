/**
 * Generated by the MOIN Generator Version 3.0
 **/

package behavioral.statusandaction;

/**
 * S&AM is mostly about pre- and post-conditions for invocation of signatures. The abstraction that S&AM adds over simple pre/post constraints is that it groups parts of an object's state into what is called a status variable. Status variables furthermore are expected to have a finite set of possible values.
 * <p>
 * Synchronizers are used to set the status of a status variable. This means that for those status variables (if they are implemented only by a signature) there must be a writing signature that allows for setting the value. Conceptually, synchronizers seem a bit like an event subscription with the condition that a status variable assumes a certain value, and the event listener sets the value of another status variable to a given value.
 * <p>
 * Status population also does a setting of status variables. Viewn from the other side, this looks like a status variable is derived from the values of other status variables. Again, this could be expressed as a signature with a corresponding implementation that acts as a status variable signature. Impact analysis could be performed for the implementation to determine when the value changes.
 * <p>
 * Given a full-blown boolean expression algebra, only a subset of the expressions can be modeled in S&AM. Also, if the type of a status variable has an infinite (or very large) value set, modeling with the S&AM notation gets unwieldy.
 * <p>
 * From a distance, it seems that S&AM is a graphical notation for a specific subset of pre/post constraints over "status functions" and invocable signatures.
 * <p>
 * S&AM could be regarded a view on other constraint and event registration metadata, but that would be difficult to bring, e.g., into a graphical notation.
 * This interface is not intended to be implemented by clients.
 */
public interface StatusAndActionPackage extends com.sap.tc.moin.repository.mmi.reflect.RefPackage
{
    /**
     * Extent descriptor
     */
    public final com.sap.tc.moin.repository.mmi.descriptors.PackageDescriptor<behavioral.statusandaction.StatusAndActionPackage> PACKAGE_DESCRIPTOR = new com.sap.tc.moin.repository.mmi.descriptors.PackageDescriptor<behavioral.statusandaction.StatusAndActionPackage>("E0BC871351E205F83E4B11DE80E40018DE1146FF", "sap.com/moin/mm/ap/core", "behavioral", "status_and_action"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ 
    // packages
    public behavioral.statusandaction.design.DesignPackage getDesign();
    public behavioral.statusandaction.assembly.AssemblyPackage getAssembly();
}