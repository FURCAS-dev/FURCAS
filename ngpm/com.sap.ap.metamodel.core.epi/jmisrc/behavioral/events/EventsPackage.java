/**
 * Generated by the MOIN Generator Version 3.0
 **/

package behavioral.events;

/**
 * Talks about types of (business) events that may occur, may need to be communicated / signalled and which can be consumed by event listeners (which most likely should be an action with suitable signature). Rules (see rules package) may be used to filter for relevant events.
 * <p>
 * From Holger's slides:
 * <p>
 * Business Event:
 * A meaningful change of the state of the enterprise (inside or outside)
 * A key source of business events are business objects; there are other sources like unstructured documents, analytical sources, RSS feeds, embedded software etc.
 * The term ?business event? is often used interchangeably to refer to both the specification (type) of the event, and each individual occurrence (instance) of the event
 * Characterized by its type, modeled in Enterprise Repository*:
 * Name and/or significance
 * The data that is provided with each occurrence (aka attributes or context)
 * Modeled as data type
 * Relationship to other event types (to be clarified)
 * Like causality or aggregation
 * Can carry additional pre-defined data at execution time
 * Like unique occurance ID, timestamp, identification of event producer
 * Must be interpretable outside the ?local processing context? that produced it
 * Logically self-contained in representing all the information pertinent to the situation causing the event
 * May either directly contain relevant details or may enable consumers to access the relevant details (via links or subsequent service calls or other means)
 * Even if it contains relevant details that doesn?t rule out the need for accessing additional data, business rules, etc. for the purposes of processing and acting upon the event
 * This interface is not intended to be implemented by clients.
 */
public interface EventsPackage extends com.sap.tc.moin.repository.mmi.reflect.RefPackage
{
    /**
     * Extent descriptor
     */
    public final com.sap.tc.moin.repository.mmi.descriptors.PackageDescriptor<behavioral.events.EventsPackage> PACKAGE_DESCRIPTOR = new com.sap.tc.moin.repository.mmi.descriptors.PackageDescriptor<behavioral.events.EventsPackage>("E0BC871351CC82013E4B11DEC07D0018DE1146FF", "sap.com/moin/mm/ap/core", "behavioral", "events"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ 
    // classes
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getSubscription();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getEventProducer();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getEventFilter();
    // associations
    public behavioral.events.Producer getProducer();
    public behavioral.events.AFiltersSubscription getAFiltersSubscription();
    public behavioral.events.Subscriptions getSubscriptions();
    public behavioral.events.ATestFilter getATestFilter();
    public behavioral.events.NotificationSignatures getNotificationSignatures();
}