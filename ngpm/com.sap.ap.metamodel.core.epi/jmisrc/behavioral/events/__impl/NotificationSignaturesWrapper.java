/**
 * Generated by the MOIN Generator Version 3.0
 **/

package behavioral.events.__impl;

public class NotificationSignaturesWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<behavioral.events.NotificationSignatures> implements behavioral.events.NotificationSignatures,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The NotificationSignatures wrapper
     */
    public NotificationSignaturesWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, behavioral.events.__impl.NotificationSignaturesImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private behavioral.events.__impl.NotificationSignaturesImpl getCastWrappedObject() {
        return (behavioral.events.__impl.NotificationSignaturesImpl) getWrappedObject();
    }

    public behavioral.events.NotificationSignatures unwrap() {
        return (behavioral.events.NotificationSignatures) getWrappedObject();
    }
    
    public boolean exists(behavioral.events.EventProducer _Producer, data.classes.MethodSignature _NotificationSignatures) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Producer), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _NotificationSignatures));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Producer), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _NotificationSignatures)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public behavioral.events.EventProducer getProducer(data.classes.MethodSignature _NotificationSignatures) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (behavioral.events.EventProducer) wrapResult(getCastWrappedObject().getProducer(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _NotificationSignatures)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (behavioral.events.EventProducer) wrapResult(getCastWrappedObject().getProducer(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _NotificationSignatures))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getNotificationSignatures(behavioral.events.EventProducer _Producer) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getNotificationSignatures(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Producer)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getNotificationSignatures(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Producer))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(behavioral.events.EventProducer _Producer, data.classes.MethodSignature _NotificationSignatures) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Producer), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _NotificationSignatures));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Producer), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _NotificationSignatures)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(behavioral.events.EventProducer _Producer, data.classes.MethodSignature _NotificationSignatures) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Producer), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _NotificationSignatures));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Producer), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _NotificationSignatures)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<behavioral.events.NotificationSignatures> get___JmiInterface() {
        return behavioral.events.NotificationSignatures.class;
    }

    protected String metaObjectToString() {
        return "behavioral.events.NotificationSignatures (Java Type)\nbehavioral.events.NotificationSignatures (MOF Type)"; //$NON-NLS-1$
    }    
}