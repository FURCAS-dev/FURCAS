/**
 * Generated by the MOIN Generator Version 3.0
 **/

package behavioral.events.__impl;

public class EventFilterWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefObjectWrapperImpl<behavioral.events.__impl.EventFilterImpl> implements behavioral.events.EventFilter,com.sap.tc.moin.repository.Partitionable {


    static {
    }

    public EventFilterWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, behavioral.events.__impl.EventFilterImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    @SuppressWarnings("unused")
    private behavioral.events.__impl.EventFilterImpl getCastWrappedObject() {
        return (behavioral.events.__impl.EventFilterImpl) getWrappedObject();
    }
    
    public behavioral.events.__impl.EventFilterImpl unwrap() {
        return (behavioral.events.__impl.EventFilterImpl) getWrappedObject();
    }
        
    // methods for attributes
     
    // methods for references
    public behavioral.events.Subscription getSubscription() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (behavioral.events.Subscription) wrapResult(getCastWrappedObject().getSubscription(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (behavioral.events.Subscription) wrapResult(getCastWrappedObject().getSubscription(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setSubscription(behavioral.events.Subscription newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setSubscription(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setSubscription(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public behavioral.actions.Block getTest() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (behavioral.actions.Block) wrapResult(getCastWrappedObject().getTest(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (behavioral.actions.Block) wrapResult(getCastWrappedObject().getTest(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setTest(behavioral.actions.Block newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setTest(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setTest(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

   
    // methods for modeled operations
    
    // methods for internal modeled operations

    // reflective methods
    

    // get the JMI interface
    @SuppressWarnings("unchecked")
    public java.lang.Class<behavioral.events.EventFilter> get___JmiInterface() {
        return behavioral.events.EventFilter.class;
    }

    // to String
    protected String metaObjectToString() {
        return "behavioral.events.EventFilter (Java Type)\nbehavioral.events.EventFilter (MOF Type)"; //$NON-NLS-1$
    }    
}