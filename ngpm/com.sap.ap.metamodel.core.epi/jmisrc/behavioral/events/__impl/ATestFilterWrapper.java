/**
 * Generated by the MOIN Generator Version 3.0
 **/

package behavioral.events.__impl;

public class ATestFilterWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<behavioral.events.ATestFilter> implements behavioral.events.ATestFilter,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The ATestFilter wrapper
     */
    public ATestFilterWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, behavioral.events.__impl.ATestFilterImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private behavioral.events.__impl.ATestFilterImpl getCastWrappedObject() {
        return (behavioral.events.__impl.ATestFilterImpl) getWrappedObject();
    }

    public behavioral.events.ATestFilter unwrap() {
        return (behavioral.events.ATestFilter) getWrappedObject();
    }
    
    public boolean exists(behavioral.actions.Block _Test, behavioral.events.EventFilter _Filter) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Test), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Filter));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Test), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Filter)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public behavioral.actions.Block getTest(behavioral.events.EventFilter _Filter) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (behavioral.actions.Block) wrapResult(getCastWrappedObject().getTest(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Filter)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (behavioral.actions.Block) wrapResult(getCastWrappedObject().getTest(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Filter))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public behavioral.events.EventFilter getFilter(behavioral.actions.Block _Test) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (behavioral.events.EventFilter) wrapResult(getCastWrappedObject().getFilter(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Test)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (behavioral.events.EventFilter) wrapResult(getCastWrappedObject().getFilter(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Test))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(behavioral.actions.Block _Test, behavioral.events.EventFilter _Filter) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Test), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Filter));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Test), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Filter)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(behavioral.actions.Block _Test, behavioral.events.EventFilter _Filter) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Test), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Filter));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Test), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Filter)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<behavioral.events.ATestFilter> get___JmiInterface() {
        return behavioral.events.ATestFilter.class;
    }

    protected String metaObjectToString() {
        return "behavioral.events.ATestFilter (Java Type)\nbehavioral.events.A_test_filter (MOF Type)"; //$NON-NLS-1$
    }    
}