/**
 * Generated by the MOIN Generator Version 3.0
 **/

package behavioral.events.__impl;

public class SubscriptionsWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<behavioral.events.Subscriptions> implements behavioral.events.Subscriptions,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The Subscriptions wrapper
     */
    public SubscriptionsWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, behavioral.events.__impl.SubscriptionsImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private behavioral.events.__impl.SubscriptionsImpl getCastWrappedObject() {
        return (behavioral.events.__impl.SubscriptionsImpl) getWrappedObject();
    }

    public behavioral.events.Subscriptions unwrap() {
        return (behavioral.events.Subscriptions) getWrappedObject();
    }
    
    public boolean exists(behavioral.events.Subscription _Subscription, data.classes.SapClass _SubscribingClass) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Subscription), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SubscribingClass));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Subscription), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SubscribingClass)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getSubscription(data.classes.SapClass _SubscribingClass) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getSubscription(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SubscribingClass)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getSubscription(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SubscribingClass))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public data.classes.SapClass getSubscribingClass(behavioral.events.Subscription _Subscription) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (data.classes.SapClass) wrapResult(getCastWrappedObject().getSubscribingClass(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Subscription)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (data.classes.SapClass) wrapResult(getCastWrappedObject().getSubscribingClass(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Subscription))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(behavioral.events.Subscription _Subscription, data.classes.SapClass _SubscribingClass) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Subscription), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SubscribingClass));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Subscription), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SubscribingClass)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(behavioral.events.Subscription _Subscription, data.classes.SapClass _SubscribingClass) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Subscription), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SubscribingClass));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Subscription), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SubscribingClass)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<behavioral.events.Subscriptions> get___JmiInterface() {
        return behavioral.events.Subscriptions.class;
    }

    protected String metaObjectToString() {
        return "behavioral.events.Subscriptions (Java Type)\nbehavioral.events.Subscriptions (MOF Type)"; //$NON-NLS-1$
    }    
}