/**
 * Generated by the MOIN Generator Version 3.0
 **/

package behavioral.statusandactionold.__impl;

public class SamoperatorWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefObjectWrapperImpl<behavioral.statusandactionold.__impl.SamoperatorImpl> implements behavioral.statusandactionold.Samoperator,com.sap.tc.moin.repository.Partitionable {


    static {
    }

    public SamoperatorWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, behavioral.statusandactionold.__impl.SamoperatorImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    @SuppressWarnings("unused")
    private behavioral.statusandactionold.__impl.SamoperatorImpl getCastWrappedObject() {
        return (behavioral.statusandactionold.__impl.SamoperatorImpl) getWrappedObject();
    }
    
    private behavioral.statusandactionold.__impl.SamoperatorImpl getCastWrappedObject(com.sap.tc.moin.repository.core.CorePartitionable resolved) {
        return (behavioral.statusandactionold.__impl.SamoperatorImpl) resolved;
    }
    
    public behavioral.statusandactionold.__impl.SamoperatorImpl unwrap() {
        return (behavioral.statusandactionold.__impl.SamoperatorImpl) getWrappedObject();
    }
        
    // methods for attributes
    public behavioral.statusandactionold.SamoperatorKindEnum getKind() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        com.sap.tc.moin.repository.core.CorePartitionable resolved = mriReference.getIfResolved();
        if (resolved != null) {
            return getCastWrappedObject(resolved).getKind();
        }
            try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().getKind();
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().getKind(); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public void setKind(behavioral.statusandactionold.SamoperatorKindEnum newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setKind(connection, newValue);
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setKind(connection, newValue);
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

     
    // methods for references
    public behavioral.statusandactionold.SamstatusSchema getSamStatusSchema() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (behavioral.statusandactionold.SamstatusSchema) wrapResult(getCastWrappedObject().getSamStatusSchema(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (behavioral.statusandactionold.SamstatusSchema) wrapResult(getCastWrappedObject().getSamStatusSchema(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setSamStatusSchema(behavioral.statusandactionold.SamstatusSchema newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setSamStatusSchema(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setSamStatusSchema(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public java.util.Collection<behavioral.statusandactionold.SamschemaValue> getSamSchemaValues() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection<behavioral.statusandactionold.SamschemaValue>) wrapResult(getCastWrappedObject().getSamSchemaValues(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection<behavioral.statusandactionold.SamschemaValue>) wrapResult(getCastWrappedObject().getSamSchemaValues(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public java.util.Collection<behavioral.statusandactionold.Samoperator> getSamTargetOperators() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection<behavioral.statusandactionold.Samoperator>) wrapResult(getCastWrappedObject().getSamTargetOperators(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection<behavioral.statusandactionold.Samoperator>) wrapResult(getCastWrappedObject().getSamTargetOperators(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public java.util.Collection<behavioral.statusandactionold.Samoperator> getSamSourceOperators() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection<behavioral.statusandactionold.Samoperator>) wrapResult(getCastWrappedObject().getSamSourceOperators(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection<behavioral.statusandactionold.Samoperator>) wrapResult(getCastWrappedObject().getSamSourceOperators(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public java.util.Collection<behavioral.statusandactionold.SamschemaAction> getSamSchemaActions() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection<behavioral.statusandactionold.SamschemaAction>) wrapResult(getCastWrappedObject().getSamSchemaActions(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection<behavioral.statusandactionold.SamschemaAction>) wrapResult(getCastWrappedObject().getSamSchemaActions(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



   
    // methods for modeled operations
    
    // methods for internal modeled operations

    // reflective methods
    

    // get the JMI interface
    @SuppressWarnings("unchecked")
    public java.lang.Class<behavioral.statusandactionold.Samoperator> get___JmiInterface() {
        return behavioral.statusandactionold.Samoperator.class;
    }

    // to String
    protected String metaObjectToString() {
        return "behavioral.statusandactionold.Samoperator (Java Type)\nbehavioral.status_and_action_old.SAMOperator (MOF Type)"; //$NON-NLS-1$
    }    
}