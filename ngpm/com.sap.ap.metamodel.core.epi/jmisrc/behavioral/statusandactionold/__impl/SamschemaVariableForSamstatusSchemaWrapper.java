/**
 * Generated by the MOIN Generator Version 3.0
 **/

package behavioral.statusandactionold.__impl;

public class SamschemaVariableForSamstatusSchemaWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<behavioral.statusandactionold.SamschemaVariableForSamstatusSchema> implements behavioral.statusandactionold.SamschemaVariableForSamstatusSchema,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The SamschemaVariableForSamstatusSchema wrapper
     */
    public SamschemaVariableForSamstatusSchemaWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, behavioral.statusandactionold.__impl.SamschemaVariableForSamstatusSchemaImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private behavioral.statusandactionold.__impl.SamschemaVariableForSamstatusSchemaImpl getCastWrappedObject() {
        return (behavioral.statusandactionold.__impl.SamschemaVariableForSamstatusSchemaImpl) getWrappedObject();
    }

    public behavioral.statusandactionold.SamschemaVariableForSamstatusSchema unwrap() {
        return (behavioral.statusandactionold.SamschemaVariableForSamstatusSchema) getWrappedObject();
    }
    
    public boolean exists(behavioral.statusandactionold.SamschemaVariable _SamSchemaVariables, behavioral.statusandactionold.SamstatusSchema _SamStatusSchema) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SamSchemaVariables), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SamStatusSchema));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SamSchemaVariables), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SamStatusSchema)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getSamSchemaVariables(behavioral.statusandactionold.SamstatusSchema _SamStatusSchema) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getSamSchemaVariables(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SamStatusSchema)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getSamSchemaVariables(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SamStatusSchema))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public behavioral.statusandactionold.SamstatusSchema getSamStatusSchema(behavioral.statusandactionold.SamschemaVariable _SamSchemaVariables) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (behavioral.statusandactionold.SamstatusSchema) wrapResult(getCastWrappedObject().getSamStatusSchema(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SamSchemaVariables)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (behavioral.statusandactionold.SamstatusSchema) wrapResult(getCastWrappedObject().getSamStatusSchema(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SamSchemaVariables))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(behavioral.statusandactionold.SamschemaVariable _SamSchemaVariables, behavioral.statusandactionold.SamstatusSchema _SamStatusSchema) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SamSchemaVariables), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SamStatusSchema));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SamSchemaVariables), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SamStatusSchema)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(behavioral.statusandactionold.SamschemaVariable _SamSchemaVariables, behavioral.statusandactionold.SamstatusSchema _SamStatusSchema) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SamSchemaVariables), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SamStatusSchema));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SamSchemaVariables), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SamStatusSchema)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<behavioral.statusandactionold.SamschemaVariableForSamstatusSchema> get___JmiInterface() {
        return behavioral.statusandactionold.SamschemaVariableForSamstatusSchema.class;
    }

    protected String metaObjectToString() {
        return "behavioral.statusandactionold.SamschemaVariableForSamstatusSchema (Java Type)\nbehavioral.status_and_action_old.SAMSchemaVariableForSAMStatusSchema (MOF Type)"; //$NON-NLS-1$
    }    
}