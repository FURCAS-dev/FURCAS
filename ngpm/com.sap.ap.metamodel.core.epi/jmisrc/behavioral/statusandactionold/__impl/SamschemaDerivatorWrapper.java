/**
 * Generated by the MOIN Generator Version 3.0
 **/

package behavioral.statusandactionold.__impl;

public class SamschemaDerivatorWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefObjectWrapperImpl<behavioral.statusandactionold.__impl.SamschemaDerivatorImpl> implements behavioral.statusandactionold.SamschemaDerivator,com.sap.tc.moin.repository.Partitionable {


    static {
    }

    public SamschemaDerivatorWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, behavioral.statusandactionold.__impl.SamschemaDerivatorImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    @SuppressWarnings("unused")
    private behavioral.statusandactionold.__impl.SamschemaDerivatorImpl getCastWrappedObject() {
        return (behavioral.statusandactionold.__impl.SamschemaDerivatorImpl) getWrappedObject();
    }
    
    public behavioral.statusandactionold.__impl.SamschemaDerivatorImpl unwrap() {
        return (behavioral.statusandactionold.__impl.SamschemaDerivatorImpl) getWrappedObject();
    }
        
    // methods for attributes
     
    // methods for references
    public behavioral.statusandactionold.Samderivator getSamDerivator() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (behavioral.statusandactionold.Samderivator) wrapResult(getCastWrappedObject().getSamDerivator(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (behavioral.statusandactionold.Samderivator) wrapResult(getCastWrappedObject().getSamDerivator(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setSamDerivator(behavioral.statusandactionold.Samderivator newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setSamDerivator(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setSamDerivator(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public behavioral.statusandactionold.SamstatusSchema getSamStatusSchema() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (behavioral.statusandactionold.SamstatusSchema) wrapResult(getCastWrappedObject().getSamStatusSchema(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (behavioral.statusandactionold.SamstatusSchema) wrapResult(getCastWrappedObject().getSamStatusSchema(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setSamStatusSchema(behavioral.statusandactionold.SamstatusSchema newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setSamStatusSchema(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setSamStatusSchema(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public java.util.Collection<behavioral.statusandactionold.SamschemaVariable> getSamSourceSchemaVariables() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection<behavioral.statusandactionold.SamschemaVariable>) wrapResult(getCastWrappedObject().getSamSourceSchemaVariables(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection<behavioral.statusandactionold.SamschemaVariable>) wrapResult(getCastWrappedObject().getSamSourceSchemaVariables(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public java.util.Collection<behavioral.statusandactionold.SamschemaVariable> getSamTargetSchemaVariable() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection<behavioral.statusandactionold.SamschemaVariable>) wrapResult(getCastWrappedObject().getSamTargetSchemaVariable(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection<behavioral.statusandactionold.SamschemaVariable>) wrapResult(getCastWrappedObject().getSamTargetSchemaVariable(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



   
    // methods for modeled operations
    
    // methods for internal modeled operations

    // reflective methods
    

    // get the JMI interface
    @SuppressWarnings("unchecked")
    public java.lang.Class<behavioral.statusandactionold.SamschemaDerivator> get___JmiInterface() {
        return behavioral.statusandactionold.SamschemaDerivator.class;
    }

    // to String
    protected String metaObjectToString() {
        return "behavioral.statusandactionold.SamschemaDerivator (Java Type)\nbehavioral.status_and_action_old.SAMSchemaDerivator (MOF Type)"; //$NON-NLS-1$
    }    
}