/**
 * Generated by the MOIN Generator Version 3.0
 **/

package behavioral.statusandactionold.__impl;

public class SamderivatorWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefObjectWrapperImpl<behavioral.statusandactionold.__impl.SamderivatorImpl> implements behavioral.statusandactionold.Samderivator,com.sap.tc.moin.repository.Partitionable {

    
    static {
    }

    public SamderivatorWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, behavioral.statusandactionold.__impl.SamderivatorImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    private behavioral.statusandactionold.__impl.SamderivatorImpl getCastWrappedObject() {
        return (behavioral.statusandactionold.__impl.SamderivatorImpl) getWrappedObject();
    }
    
    private behavioral.statusandactionold.__impl.SamderivatorImpl getCastWrappedObject(com.sap.tc.moin.repository.core.CorePartitionable resolved) {
        return (behavioral.statusandactionold.__impl.SamderivatorImpl) resolved;
    }
    
    public behavioral.statusandactionold.__impl.SamderivatorImpl unwrap() {
        return (behavioral.statusandactionold.__impl.SamderivatorImpl) getWrappedObject();
    }
        
    // methods for attributes
    public behavioral.statusandactionold.SamderivatorKindEnum getKind() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        com.sap.tc.moin.repository.core.CorePartitionable resolved = mriReference.getIfResolved();
        if (resolved != null) {
            return getCastWrappedObject(resolved).getKind();
        }
            try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().getKind();
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().getKind(); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public void setKind(behavioral.statusandactionold.SamderivatorKindEnum newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setKind(connection, newValue);
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setKind(connection, newValue);
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

     
    // methods for references
    public data.classes.SapClass getBusinessObject() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (data.classes.SapClass) wrapResult(getCastWrappedObject().getBusinessObject(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (data.classes.SapClass) wrapResult(getCastWrappedObject().getBusinessObject(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setBusinessObject(data.classes.SapClass newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setBusinessObject(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setBusinessObject(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public java.util.Collection<behavioral.statusandactionold.SamschemaDerivator> getSamSchemaDerivators() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection<behavioral.statusandactionold.SamschemaDerivator>) wrapResult(getCastWrappedObject().getSamSchemaDerivators(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection<behavioral.statusandactionold.SamschemaDerivator>) wrapResult(getCastWrappedObject().getSamSchemaDerivators(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



   
    // methods for modeled operations
    
    // methods for internal modeled operations

    // reflective methods
    

    // get the JMI interface
    public java.lang.Class<behavioral.statusandactionold.Samderivator> get___JmiInterface() {
        return behavioral.statusandactionold.Samderivator.class;
    }

    // to String
    protected String metaObjectToString() {
        return "behavioral.statusandactionold.Samderivator (Java Type)\nbehavioral.status_and_action_old.SAMDerivator (MOF Type)"; //$NON-NLS-1$
    }    
}