/**
 * Generated by the MOIN Generator Version 3.0
 **/

package behavioral.actions;

/**
 * We may not need a Foreach statement if we use internal iterators in collections together with blocks. However, how would a collection class implement the internal iterator without a for statement? Could this work with a WhileLoop only?
 * This interface is not intended to be implemented by clients.
 */
public interface Foreach extends behavioral.actions.SingleBlockStatement {

    /**
     * Descriptors for all features of this MofClass and its supertypes.
     */
    public static final Descriptors DESCRIPTORS = new Descriptors( );

    // class extent descriptor
    /**
     * Extent descriptor
     */
    public final com.sap.tc.moin.repository.mmi.descriptors.ClassDescriptor<com.sap.tc.moin.repository.mmi.reflect.RefClass, behavioral.actions.Foreach> CLASS_DESCRIPTOR = new com.sap.tc.moin.repository.mmi.descriptors.ClassDescriptor<com.sap.tc.moin.repository.mmi.reflect.RefClass, behavioral.actions.Foreach>("E0BC871351C30C2C3E4B11DE9D400018DE1146FF", "sap.com/moin/mm/ap/core", "behavioral", "actions", "Foreach"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ 

    
    // attributes
    public boolean isParallel() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public void setParallel(boolean newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;

    // references
    public dataaccess.expressions.Expression getCollection() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public void setCollection(dataaccess.expressions.Expression newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public behavioral.actions.Iterator getForVariable() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public void setForVariable(behavioral.actions.Iterator newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;


    public static final class Descriptors {
        Descriptors( ) { 
        }
        private com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,behavioral.actions.Foreach,java.lang.Boolean> __parallel;
        /**
         * Returns the descriptor for the <code>parallel</code> attribute.
         * @return  the descriptor for the <code>parallel</code> attribute
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,behavioral.actions.Foreach,java.lang.Boolean> PARALLEL( ) {
            if ( __parallel == null ) {
                __parallel = new com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,behavioral.actions.Foreach,java.lang.Boolean>( "E0BC871351C30C2B3E4B11DE8BC00018DE1146FF", "sap.com/moin/mm/ap/core", new java.lang.String[] { "behavioral", "actions", "Foreach", "parallel" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __parallel;
        }
        /**
         * Returns the descriptor for the <code>block</code> reference.
         * @return  the descriptor for the <code>block</code> reference
         */
        public com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,behavioral.actions.Statement,behavioral.actions.Block> BLOCK( ) {
            return behavioral.actions.Statement.DESCRIPTORS.BLOCK( );
        }
        /**
         * Returns the descriptor for the <code>nestedBlocks</code> reference.
         * @return  the descriptor for the <code>nestedBlocks</code> reference
         */
        public com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,behavioral.actions.StatementWithNestedBlocks,java.util.List<behavioral.actions.Block>> NESTED_BLOCKS( ) {
            return behavioral.actions.StatementWithNestedBlocks.DESCRIPTORS.NESTED_BLOCKS( );
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,behavioral.actions.Foreach,dataaccess.expressions.Expression> __collection;
        /**
         * Returns the descriptor for the <code>collection</code> reference.
         * @return  the descriptor for the <code>collection</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,behavioral.actions.Foreach,dataaccess.expressions.Expression> COLLECTION( ) {
            if ( __collection == null ) {
                __collection = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,behavioral.actions.Foreach,dataaccess.expressions.Expression>( "E0BC871351C30C293E4B11DEC51B0018DE1146FF", "sap.com/moin/mm/ap/core", new java.lang.String[] { "behavioral", "actions", "Foreach", "collection" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __collection;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,behavioral.actions.Foreach,behavioral.actions.Iterator> __forVariable;
        /**
         * Returns the descriptor for the <code>forVariable</code> reference.
         * @return  the descriptor for the <code>forVariable</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,behavioral.actions.Foreach,behavioral.actions.Iterator> FOR_VARIABLE( ) {
            if ( __forVariable == null ) {
                __forVariable = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,behavioral.actions.Foreach,behavioral.actions.Iterator>( "E0BC871351C30C2A3E4B11DE8E320018DE1146FF", "sap.com/moin/mm/ap/core", new java.lang.String[] { "behavioral", "actions", "Foreach", "forVariable" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __forVariable;
        }
        /**
         * Returns the descriptor for the <code>getOutermostBlock</code> operation.
         * @return  the descriptor for the <code>getOutermostBlock</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,behavioral.actions.Statement,behavioral.actions.Block> GET_OUTERMOST_BLOCK( ) {
            return behavioral.actions.Statement.DESCRIPTORS.GET_OUTERMOST_BLOCK( );
        }
        /**
         * Returns the descriptor for the <code>isSideEffectFree</code> operation.
         * @return  the descriptor for the <code>isSideEffectFree</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,behavioral.actions.Statement,java.lang.Boolean> IS_SIDE_EFFECT_FREE( ) {
            return behavioral.actions.Statement.DESCRIPTORS.IS_SIDE_EFFECT_FREE( );
        }
        /**
         * Returns the descriptor for the <code>isSideEffectFreeForBlock</code> operation.
         * @return  the descriptor for the <code>isSideEffectFreeForBlock</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,behavioral.actions.Statement,java.lang.Boolean> IS_SIDE_EFFECT_FREE_FOR_BLOCK( ) {
            return behavioral.actions.Statement.DESCRIPTORS.IS_SIDE_EFFECT_FREE_FOR_BLOCK( );
        }
    }
}    