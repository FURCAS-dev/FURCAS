/**
 * Generated by the MOIN Generator Version 3.0
 **/

package behavioral.actions.__impl;

public class AObjectsLinkManipulationStatementWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<behavioral.actions.AObjectsLinkManipulationStatement> implements behavioral.actions.AObjectsLinkManipulationStatement,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AObjectsLinkManipulationStatement wrapper
     */
    public AObjectsLinkManipulationStatementWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, behavioral.actions.__impl.AObjectsLinkManipulationStatementImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private behavioral.actions.__impl.AObjectsLinkManipulationStatementImpl getCastWrappedObject() {
        return (behavioral.actions.__impl.AObjectsLinkManipulationStatementImpl) getWrappedObject();
    }

    public behavioral.actions.AObjectsLinkManipulationStatement unwrap() {
        return (behavioral.actions.AObjectsLinkManipulationStatement) getWrappedObject();
    }
    
    public boolean exists(dataaccess.expressions.Expression _Objects, behavioral.actions.LinkManipulationStatement _LinkManipulationStatement) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Objects), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _LinkManipulationStatement));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Objects), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _LinkManipulationStatement)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.List getObjects(behavioral.actions.LinkManipulationStatement _LinkManipulationStatement) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.List) wrapResult(getCastWrappedObject().getObjects(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _LinkManipulationStatement)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.List) wrapResult(getCastWrappedObject().getObjects(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _LinkManipulationStatement))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public behavioral.actions.LinkManipulationStatement getLinkManipulationStatement(dataaccess.expressions.Expression _Objects) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (behavioral.actions.LinkManipulationStatement) wrapResult(getCastWrappedObject().getLinkManipulationStatement(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Objects)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (behavioral.actions.LinkManipulationStatement) wrapResult(getCastWrappedObject().getLinkManipulationStatement(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Objects))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(dataaccess.expressions.Expression _Objects, behavioral.actions.LinkManipulationStatement _LinkManipulationStatement) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Objects), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _LinkManipulationStatement));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Objects), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _LinkManipulationStatement)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(dataaccess.expressions.Expression _Objects, behavioral.actions.LinkManipulationStatement _LinkManipulationStatement) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Objects), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _LinkManipulationStatement));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Objects), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _LinkManipulationStatement)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<behavioral.actions.AObjectsLinkManipulationStatement> get___JmiInterface() {
        return behavioral.actions.AObjectsLinkManipulationStatement.class;
    }

    protected String metaObjectToString() {
        return "behavioral.actions.AObjectsLinkManipulationStatement (Java Type)\nbehavioral.actions.A_objects_linkManipulationStatement (MOF Type)"; //$NON-NLS-1$
    }    
}