/**
 * Generated by the MOIN Generator Version 3.0
 **/

package behavioral.actions.__impl;

public final class ActionsPackageImpl extends com.sap.tc.moin.repository.core.jmi.reflect.RefPackageImpl
{
        
    public static final java.util.Map<java.lang.String, java.lang.Integer> FEATURE_IDS;

    static {
        
        FEATURE_IDS = new java.util.HashMap<java.lang.String, java.lang.Integer>(43);
        FEATURE_IDS.put("Assignment", Integer.valueOf(0)); //$NON-NLS-1$
        FEATURE_IDS.put("Statement", Integer.valueOf(1)); //$NON-NLS-1$
        FEATURE_IDS.put("Block", Integer.valueOf(2)); //$NON-NLS-1$
        FEATURE_IDS.put("IfElse", Integer.valueOf(3)); //$NON-NLS-1$
        FEATURE_IDS.put("WhileLoop", Integer.valueOf(4)); //$NON-NLS-1$
        FEATURE_IDS.put("Foreach", Integer.valueOf(5)); //$NON-NLS-1$
        FEATURE_IDS.put("Return", Integer.valueOf(6)); //$NON-NLS-1$
        FEATURE_IDS.put("AddLink", Integer.valueOf(7)); //$NON-NLS-1$
        FEATURE_IDS.put("RemoveLink", Integer.valueOf(8)); //$NON-NLS-1$
        FEATURE_IDS.put("LinkManipulationStatement", Integer.valueOf(9)); //$NON-NLS-1$
        FEATURE_IDS.put("ExpressionStatement", Integer.valueOf(10)); //$NON-NLS-1$
        FEATURE_IDS.put("Sort", Integer.valueOf(11)); //$NON-NLS-1$
        FEATURE_IDS.put("QueryInvocation", Integer.valueOf(12)); //$NON-NLS-1$
        FEATURE_IDS.put("Constant", Integer.valueOf(13)); //$NON-NLS-1$
        FEATURE_IDS.put("Variable", Integer.valueOf(14)); //$NON-NLS-1$
        FEATURE_IDS.put("Iterator", Integer.valueOf(15)); //$NON-NLS-1$
        FEATURE_IDS.put("NamedValueDeclaration", Integer.valueOf(16)); //$NON-NLS-1$
        FEATURE_IDS.put("StatementWithNestedBlocks", Integer.valueOf(17)); //$NON-NLS-1$
        FEATURE_IDS.put("SingleBlockStatement", Integer.valueOf(18)); //$NON-NLS-1$
        FEATURE_IDS.put("StatementWithArgument", Integer.valueOf(19)); //$NON-NLS-1$
        FEATURE_IDS.put("NamedValueWithOptionalInitExpression", Integer.valueOf(20)); //$NON-NLS-1$
        FEATURE_IDS.put("A_assignTo_assignments", Integer.valueOf(21)); //$NON-NLS-1$
        FEATURE_IDS.put("A_statements_block", Integer.valueOf(22)); //$NON-NLS-1$
        FEATURE_IDS.put("A_variables_owner", Integer.valueOf(23)); //$NON-NLS-1$
        FEATURE_IDS.put("A_collection_foreach", Integer.valueOf(24)); //$NON-NLS-1$
        FEATURE_IDS.put("A_association_linkManipulationStatement", Integer.valueOf(25)); //$NON-NLS-1$
        FEATURE_IDS.put("A_objects_linkManipulationStatement", Integer.valueOf(26)); //$NON-NLS-1$
        FEATURE_IDS.put("A_expression_expressionStatement", Integer.valueOf(27)); //$NON-NLS-1$
        FEATURE_IDS.put("A_forVariable_boundToFor", Integer.valueOf(28)); //$NON-NLS-1$
        FEATURE_IDS.put("A_initExpression_namedValueWithOptionalInitExpression", Integer.valueOf(29)); //$NON-NLS-1$
        FEATURE_IDS.put("A_owningStatement_nestedBlocks", Integer.valueOf(30)); //$NON-NLS-1$
        FEATURE_IDS.put("A_namedValue_namedValueDeclaration", Integer.valueOf(31)); //$NON-NLS-1$
    }

    // constructors    
    public ActionsPackageImpl()
    {
        super();
    }
    public ActionsPackageImpl(java.lang.Object workspace, java.lang.String mofId, com.sap.tc.moin.repository.mmi.reflect.RefPackage immediatePackage, com.sap.tc.moin.repository.mmi.reflect.RefObject metaObject)
    {
        super(workspace, mofId, immediatePackage, metaObject);
    }
    // internal enumeration creators
    // internal structure type creators
    // nested packages
    // classes
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getAssignment(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Assignment"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getStatement(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Statement"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getBlock(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Block"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getIfElse(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "IfElse"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getWhileLoop(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "WhileLoop"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getForeach(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Foreach"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getReturn(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Return"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getAddLink(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "AddLink"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getRemoveLink(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "RemoveLink"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getLinkManipulationStatement(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "LinkManipulationStatement"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getExpressionStatement(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "ExpressionStatement"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getSort(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Sort"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getQueryInvocation(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "QueryInvocation"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getConstant(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Constant"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getVariable(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Variable"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getIterator(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Iterator"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getNamedValueDeclaration(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "NamedValueDeclaration"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getStatementWithNestedBlocks(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "StatementWithNestedBlocks"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getSingleBlockStatement(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "SingleBlockStatement"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getStatementWithArgument(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "StatementWithArgument"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getNamedValueWithOptionalInitExpression(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "NamedValueWithOptionalInitExpression"); //$NON-NLS-1$
    }
    // associations
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getAAssignToAssignments(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "A_assignTo_assignments"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getAStatementsBlock(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "A_statements_block"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getAVariablesOwner(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "A_variables_owner"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getACollectionForeach(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "A_collection_foreach"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getAAssociationLinkManipulationStatement(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "A_association_linkManipulationStatement"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getAObjectsLinkManipulationStatement(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "A_objects_linkManipulationStatement"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getAExpressionExpressionStatement(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "A_expression_expressionStatement"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getAForVariableBoundToFor(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "A_forVariable_boundToFor"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getAInitExpressionNamedValueWithOptionalInitExpression(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "A_initExpression_namedValueWithOptionalInitExpression"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getAOwningStatementNestedBlocks(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "A_owningStatement_nestedBlocks"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getANamedValueNamedValueDeclaration(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "A_namedValue_namedValueDeclaration"); //$NON-NLS-1$
    }
    // structure type creators

    protected java.lang.Object create___Extent(java.lang.Object workspace, java.lang.String mofId, com.sap.tc.moin.repository.mmi.reflect.RefPackage immediatePackage, com.sap.tc.moin.repository.mmi.reflect.RefObject metaObject) {
        java.lang.String name = ((com.sap.tc.moin.repository.mmi.model.ModelElement) metaObject).getName();
        com.sap.tc.moin.repository.mmi.reflect.RefBaseObject result = null;
        try {
            switch (FEATURE_IDS.get(name)) {
                case 0:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavioral.actions.__impl.AssignmentImpl")); //$NON-NLS-1$
                case 1:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
                case 2:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavioral.actions.__impl.BlockImpl")); //$NON-NLS-1$
                case 3:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavioral.actions.__impl.IfElseImpl")); //$NON-NLS-1$
                case 4:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavioral.actions.__impl.WhileLoopImpl")); //$NON-NLS-1$
                case 5:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavioral.actions.__impl.ForeachImpl")); //$NON-NLS-1$
                case 6:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavioral.actions.__impl.ReturnImpl")); //$NON-NLS-1$
                case 7:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavioral.actions.__impl.AddLinkImpl")); //$NON-NLS-1$
                case 8:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavioral.actions.__impl.RemoveLinkImpl")); //$NON-NLS-1$
                case 9:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
                case 10:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavioral.actions.__impl.ExpressionStatementImpl")); //$NON-NLS-1$
                case 11:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavioral.actions.__impl.SortImpl")); //$NON-NLS-1$
                case 12:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavioral.actions.__impl.QueryInvocationImpl")); //$NON-NLS-1$
                case 13:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavioral.actions.__impl.ConstantImpl")); //$NON-NLS-1$
                case 14:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavioral.actions.__impl.VariableImpl")); //$NON-NLS-1$
                case 15:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavioral.actions.__impl.IteratorImpl")); //$NON-NLS-1$
                case 16:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavioral.actions.__impl.NamedValueDeclarationImpl")); //$NON-NLS-1$
                case 17:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavioral.actions.__impl.StatementWithNestedBlocksImpl")); //$NON-NLS-1$
                case 18:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavioral.actions.__impl.SingleBlockStatementImpl")); //$NON-NLS-1$
                case 19:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
                case 20:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
                case 21:
                    return new behavioral.actions.__impl.AAssignToAssignmentsImpl(workspace, mofId, immediatePackage, metaObject);
                case 22:
                    return new behavioral.actions.__impl.AStatementsBlockImpl(workspace, mofId, immediatePackage, metaObject);
                case 23:
                    return new behavioral.actions.__impl.AVariablesOwnerImpl(workspace, mofId, immediatePackage, metaObject);
                case 24:
                    return new behavioral.actions.__impl.ACollectionForeachImpl(workspace, mofId, immediatePackage, metaObject);
                case 25:
                    return new behavioral.actions.__impl.AAssociationLinkManipulationStatementImpl(workspace, mofId, immediatePackage, metaObject);
                case 26:
                    return new behavioral.actions.__impl.AObjectsLinkManipulationStatementImpl(workspace, mofId, immediatePackage, metaObject);
                case 27:
                    return new behavioral.actions.__impl.AExpressionExpressionStatementImpl(workspace, mofId, immediatePackage, metaObject);
                case 28:
                    return new behavioral.actions.__impl.AForVariableBoundToForImpl(workspace, mofId, immediatePackage, metaObject);
                case 29:
                    return new behavioral.actions.__impl.AInitExpressionNamedValueWithOptionalInitExpressionImpl(workspace, mofId, immediatePackage, metaObject);
                case 30:
                    return new behavioral.actions.__impl.AOwningStatementNestedBlocksImpl(workspace, mofId, immediatePackage, metaObject);
                case 31:
                    return new behavioral.actions.__impl.ANamedValueNamedValueDeclarationImpl(workspace, mofId, immediatePackage, metaObject);
                default:
                    throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException(name, null, "create___Extent()"); //$NON-NLS-1$
        }
        }
        catch(com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            throw ex;
        }
        catch(java.lang.Exception ex) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }        
    }

    @SuppressWarnings("unchecked")
    public java.lang.Class<behavioral.actions.ActionsPackage> get___JmiInterface() {
        return behavioral.actions.ActionsPackage.class;
    }
    
    protected void initialize() {
        if (___refPackages == null) {
            ___refPackages = new java.util.ArrayList<RefPackageAndName>(0);
            ___refPackagesByName = new java.util.HashMap<String, RefPackageAndName>();
            @SuppressWarnings("unused")
            java.lang.String name = ""; //$NON-NLS-1$
            @SuppressWarnings("unused")
            RefPackageAndName rpan = null;
        }
  
        if (___refClasses == null) {
            ___refClasses = new java.util.ArrayList<RefClassAndName>(21);
            ___refClassesByName = new java.util.HashMap<String, RefClassAndName>();
            java.lang.String name = ""; //$NON-NLS-1$
            RefClassAndName rcan = null;
            name = "Assignment"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavioral.actions.Assignment"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Statement"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavioral.actions.Statement"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Block"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavioral.actions.Block"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "IfElse"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavioral.actions.IfElse"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "WhileLoop"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavioral.actions.WhileLoop"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Foreach"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavioral.actions.Foreach"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Return"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavioral.actions.Return"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "AddLink"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavioral.actions.AddLink"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "RemoveLink"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavioral.actions.RemoveLink"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "LinkManipulationStatement"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavioral.actions.LinkManipulationStatement"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "ExpressionStatement"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavioral.actions.ExpressionStatement"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Sort"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavioral.actions.Sort"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "QueryInvocation"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavioral.actions.QueryInvocation"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Constant"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavioral.actions.Constant"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Variable"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavioral.actions.Variable"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Iterator"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavioral.actions.Iterator"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "NamedValueDeclaration"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavioral.actions.NamedValueDeclaration"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "StatementWithNestedBlocks"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavioral.actions.StatementWithNestedBlocks"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "SingleBlockStatement"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavioral.actions.SingleBlockStatement"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "StatementWithArgument"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavioral.actions.StatementWithArgument"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "NamedValueWithOptionalInitExpression"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavioral.actions.NamedValueWithOptionalInitExpression"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
        }
  
        if (___refAssociations == null) {
            ___refAssociations = new java.util.ArrayList<RefAssociationAndName>(11);
            ___refAssociationsByName = new java.util.HashMap<String, RefAssociationAndName>();
            @SuppressWarnings("unused")
            java.lang.String name = ""; //$NON-NLS-1$
            @SuppressWarnings("unused")
            RefAssociationAndName raan = null;
            name = "A_assignTo_assignments"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "behavioral.actions.AAssignToAssignments"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "A_statements_block"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "behavioral.actions.AStatementsBlock"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "A_variables_owner"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "behavioral.actions.AVariablesOwner"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "A_collection_foreach"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "behavioral.actions.ACollectionForeach"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "A_association_linkManipulationStatement"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "behavioral.actions.AAssociationLinkManipulationStatement"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "A_objects_linkManipulationStatement"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "behavioral.actions.AObjectsLinkManipulationStatement"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "A_expression_expressionStatement"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "behavioral.actions.AExpressionExpressionStatement"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "A_forVariable_boundToFor"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "behavioral.actions.AForVariableBoundToFor"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "A_initExpression_namedValueWithOptionalInitExpression"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "behavioral.actions.AInitExpressionNamedValueWithOptionalInitExpression"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "A_owningStatement_nestedBlocks"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "behavioral.actions.AOwningStatementNestedBlocks"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "A_namedValue_namedValueDeclaration"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "behavioral.actions.ANamedValueNamedValueDeclaration"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
        }
    }
    
    @Override
    public com.sap.tc.moin.repository.spi.core.Wrapper<behavioral.actions.__impl.ActionsPackageImpl> createWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, boolean synchronize) {
        return new behavioral.actions.__impl.ActionsPackageWrapper(conn, this, synchronize);
    }

}