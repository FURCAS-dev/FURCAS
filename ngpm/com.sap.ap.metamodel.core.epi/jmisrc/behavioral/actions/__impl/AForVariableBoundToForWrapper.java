/**
 * Generated by the MOIN Generator Version 3.0
 **/

package behavioral.actions.__impl;

public class AForVariableBoundToForWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<behavioral.actions.AForVariableBoundToFor> implements behavioral.actions.AForVariableBoundToFor,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AForVariableBoundToFor wrapper
     */
    public AForVariableBoundToForWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, behavioral.actions.__impl.AForVariableBoundToForImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private behavioral.actions.__impl.AForVariableBoundToForImpl getCastWrappedObject() {
        return (behavioral.actions.__impl.AForVariableBoundToForImpl) getWrappedObject();
    }

    public behavioral.actions.AForVariableBoundToFor unwrap() {
        return (behavioral.actions.AForVariableBoundToFor) getWrappedObject();
    }
    
    public boolean exists(behavioral.actions.Iterator _ForVariable, behavioral.actions.Foreach _BoundToFor) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ForVariable), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _BoundToFor));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ForVariable), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _BoundToFor)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public behavioral.actions.Iterator getForVariable(behavioral.actions.Foreach _BoundToFor) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (behavioral.actions.Iterator) wrapResult(getCastWrappedObject().getForVariable(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _BoundToFor)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (behavioral.actions.Iterator) wrapResult(getCastWrappedObject().getForVariable(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _BoundToFor))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public behavioral.actions.Foreach getBoundToFor(behavioral.actions.Iterator _ForVariable) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (behavioral.actions.Foreach) wrapResult(getCastWrappedObject().getBoundToFor(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ForVariable)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (behavioral.actions.Foreach) wrapResult(getCastWrappedObject().getBoundToFor(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ForVariable))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(behavioral.actions.Iterator _ForVariable, behavioral.actions.Foreach _BoundToFor) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ForVariable), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _BoundToFor));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ForVariable), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _BoundToFor)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(behavioral.actions.Iterator _ForVariable, behavioral.actions.Foreach _BoundToFor) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ForVariable), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _BoundToFor));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ForVariable), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _BoundToFor)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<behavioral.actions.AForVariableBoundToFor> get___JmiInterface() {
        return behavioral.actions.AForVariableBoundToFor.class;
    }

    protected String metaObjectToString() {
        return "behavioral.actions.AForVariableBoundToFor (Java Type)\nbehavioral.actions.A_forVariable_boundToFor (MOF Type)"; //$NON-NLS-1$
    }    
}