/**
 * Generated by the MOIN Generator Version 3.0
 **/

package integration.__impl;

public class IntegrationPackageWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefPackageWrapperImpl<integration.__impl.IntegrationPackageImpl> implements integration.IntegrationPackage,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The IntegrationPackage wrapper
     */
    public IntegrationPackageWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, integration.__impl.IntegrationPackageImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    private integration.__impl.IntegrationPackageImpl getCastWrappedObject() {
        return (integration.__impl.IntegrationPackageImpl) getWrappedObject();
    }
    
    public integration.__impl.IntegrationPackageImpl unwrap() {
        return (integration.__impl.IntegrationPackageImpl) getWrappedObject();
    }
    
    public integration.mapping.MappingPackage getMapping()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (integration.mapping.MappingPackage) wrapResult(getCastWrappedObject().getMapping(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (integration.mapping.MappingPackage) wrapResult(getCastWrappedObject().getMapping(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public integration.processintegration.ProcessintegrationPackage getProcessintegration()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (integration.processintegration.ProcessintegrationPackage) wrapResult(getCastWrappedObject().getProcessintegration(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (integration.processintegration.ProcessintegrationPackage) wrapResult(getCastWrappedObject().getProcessintegration(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public integration.wsdl.WsdlPackage getWsdl()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (integration.wsdl.WsdlPackage) wrapResult(getCastWrappedObject().getWsdl(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (integration.wsdl.WsdlPackage) wrapResult(getCastWrappedObject().getWsdl(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public integration.xsd.XsdPackage getXsd()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (integration.xsd.XsdPackage) wrapResult(getCastWrappedObject().getXsd(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (integration.xsd.XsdPackage) wrapResult(getCastWrappedObject().getXsd(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public integration.binding.BindingPackage getBinding()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (integration.binding.BindingPackage) wrapResult(getCastWrappedObject().getBinding(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (integration.binding.BindingPackage) wrapResult(getCastWrappedObject().getBinding(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    // methods for structure type creators
    
    @SuppressWarnings("unchecked")
    public java.lang.Class<integration.IntegrationPackage> get___JmiInterface() {
        return integration.IntegrationPackage.class;
    }
    
    protected String metaObjectToString() {
        return "integration.IntegrationPackage (Java Type)\nintegration (MOF Type)"; //$NON-NLS-1$
    }
}