/**
 * Generated by the MOIN Generator Version 3.0
 **/

package integration.processintegration.__impl;

public class ProcessComponentInteractionWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefObjectWrapperImpl<integration.processintegration.__impl.ProcessComponentInteractionImpl> implements integration.processintegration.ProcessComponentInteraction,com.sap.tc.moin.repository.Partitionable {


    static {
    }

    public ProcessComponentInteractionWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, integration.processintegration.__impl.ProcessComponentInteractionImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    @SuppressWarnings("unused")
    private integration.processintegration.__impl.ProcessComponentInteractionImpl getCastWrappedObject() {
        return (integration.processintegration.__impl.ProcessComponentInteractionImpl) getWrappedObject();
    }
    
    public integration.processintegration.__impl.ProcessComponentInteractionImpl unwrap() {
        return (integration.processintegration.__impl.ProcessComponentInteractionImpl) getWrappedObject();
    }
        
    // methods for attributes
     
    // methods for references
    public modelmanagement.processcomponents.ProcessComponent getInitiatorProcessComponent() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (modelmanagement.processcomponents.ProcessComponent) wrapResult(getCastWrappedObject().getInitiatorProcessComponent(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (modelmanagement.processcomponents.ProcessComponent) wrapResult(getCastWrappedObject().getInitiatorProcessComponent(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setInitiatorProcessComponent(modelmanagement.processcomponents.ProcessComponent newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setInitiatorProcessComponent(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setInitiatorProcessComponent(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public modelmanagement.processcomponents.ProcessComponent getProcessComponent() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (modelmanagement.processcomponents.ProcessComponent) wrapResult(getCastWrappedObject().getProcessComponent(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (modelmanagement.processcomponents.ProcessComponent) wrapResult(getCastWrappedObject().getProcessComponent(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setProcessComponent(modelmanagement.processcomponents.ProcessComponent newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setProcessComponent(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setProcessComponent(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public integration.processintegration.IntegrationScenario getUses() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (integration.processintegration.IntegrationScenario) wrapResult(getCastWrappedObject().getUses(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (integration.processintegration.IntegrationScenario) wrapResult(getCastWrappedObject().getUses(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setUses(integration.processintegration.IntegrationScenario newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setUses(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setUses(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public java.util.Collection<dataaccess.expressions.MethodCallExpression> getMethodCalls() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection<dataaccess.expressions.MethodCallExpression>) wrapResult(getCastWrappedObject().getMethodCalls(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection<dataaccess.expressions.MethodCallExpression>) wrapResult(getCastWrappedObject().getMethodCalls(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public java.util.Collection<behavioral.events.Subscription> getSubscriptions() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection<behavioral.events.Subscription>) wrapResult(getCastWrappedObject().getSubscriptions(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection<behavioral.events.Subscription>) wrapResult(getCastWrappedObject().getSubscriptions(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



   
    // methods for modeled operations
    
    // methods for internal modeled operations

    // reflective methods
    

    // get the JMI interface
    @SuppressWarnings("unchecked")
    public java.lang.Class<integration.processintegration.ProcessComponentInteraction> get___JmiInterface() {
        return integration.processintegration.ProcessComponentInteraction.class;
    }

    // to String
    protected String metaObjectToString() {
        return "integration.processintegration.ProcessComponentInteraction (Java Type)\nintegration.processintegration.ProcessComponentInteraction (MOF Type)"; //$NON-NLS-1$
    }    
}