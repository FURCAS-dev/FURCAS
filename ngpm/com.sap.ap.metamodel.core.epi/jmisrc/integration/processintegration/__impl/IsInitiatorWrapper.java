/**
 * Generated by the MOIN Generator Version 3.0
 **/

package integration.processintegration.__impl;

public class IsInitiatorWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<integration.processintegration.IsInitiator> implements integration.processintegration.IsInitiator,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The IsInitiator wrapper
     */
    public IsInitiatorWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, integration.processintegration.__impl.IsInitiatorImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private integration.processintegration.__impl.IsInitiatorImpl getCastWrappedObject() {
        return (integration.processintegration.__impl.IsInitiatorImpl) getWrappedObject();
    }

    public integration.processintegration.IsInitiator unwrap() {
        return (integration.processintegration.IsInitiator) getWrappedObject();
    }
    
    public boolean exists(integration.processintegration.ProcessComponentInteraction _InitiatedInteractions, modelmanagement.processcomponents.ProcessComponent _InitiatorProcessComponent) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _InitiatedInteractions), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _InitiatorProcessComponent));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _InitiatedInteractions), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _InitiatorProcessComponent)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getInitiatedInteractions(modelmanagement.processcomponents.ProcessComponent _InitiatorProcessComponent) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getInitiatedInteractions(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _InitiatorProcessComponent)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getInitiatedInteractions(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _InitiatorProcessComponent))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public modelmanagement.processcomponents.ProcessComponent getInitiatorProcessComponent(integration.processintegration.ProcessComponentInteraction _InitiatedInteractions) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (modelmanagement.processcomponents.ProcessComponent) wrapResult(getCastWrappedObject().getInitiatorProcessComponent(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _InitiatedInteractions)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (modelmanagement.processcomponents.ProcessComponent) wrapResult(getCastWrappedObject().getInitiatorProcessComponent(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _InitiatedInteractions))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(integration.processintegration.ProcessComponentInteraction _InitiatedInteractions, modelmanagement.processcomponents.ProcessComponent _InitiatorProcessComponent) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _InitiatedInteractions), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _InitiatorProcessComponent));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _InitiatedInteractions), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _InitiatorProcessComponent)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(integration.processintegration.ProcessComponentInteraction _InitiatedInteractions, modelmanagement.processcomponents.ProcessComponent _InitiatorProcessComponent) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _InitiatedInteractions), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _InitiatorProcessComponent));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _InitiatedInteractions), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _InitiatorProcessComponent)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<integration.processintegration.IsInitiator> get___JmiInterface() {
        return integration.processintegration.IsInitiator.class;
    }

    protected String metaObjectToString() {
        return "integration.processintegration.IsInitiator (Java Type)\nintegration.processintegration.IsInitiator (MOF Type)"; //$NON-NLS-1$
    }    
}