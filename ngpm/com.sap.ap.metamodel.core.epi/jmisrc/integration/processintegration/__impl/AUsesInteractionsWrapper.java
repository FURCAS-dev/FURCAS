/**
 * Generated by the MOIN Generator Version 3.0
 **/

package integration.processintegration.__impl;

public class AUsesInteractionsWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<integration.processintegration.AUsesInteractions> implements integration.processintegration.AUsesInteractions,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AUsesInteractions wrapper
     */
    public AUsesInteractionsWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, integration.processintegration.__impl.AUsesInteractionsImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private integration.processintegration.__impl.AUsesInteractionsImpl getCastWrappedObject() {
        return (integration.processintegration.__impl.AUsesInteractionsImpl) getWrappedObject();
    }

    public integration.processintegration.AUsesInteractions unwrap() {
        return (integration.processintegration.AUsesInteractions) getWrappedObject();
    }
    
    public boolean exists(integration.processintegration.IntegrationScenario _Uses, integration.processintegration.ProcessComponentInteraction _Interactions) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Uses), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Interactions));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Uses), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Interactions)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public integration.processintegration.IntegrationScenario getUses(integration.processintegration.ProcessComponentInteraction _Interactions) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (integration.processintegration.IntegrationScenario) wrapResult(getCastWrappedObject().getUses(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Interactions)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (integration.processintegration.IntegrationScenario) wrapResult(getCastWrappedObject().getUses(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Interactions))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getInteractions(integration.processintegration.IntegrationScenario _Uses) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getInteractions(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Uses)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getInteractions(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Uses))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(integration.processintegration.IntegrationScenario _Uses, integration.processintegration.ProcessComponentInteraction _Interactions) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Uses), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Interactions));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Uses), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Interactions)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(integration.processintegration.IntegrationScenario _Uses, integration.processintegration.ProcessComponentInteraction _Interactions) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Uses), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Interactions));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Uses), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Interactions)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<integration.processintegration.AUsesInteractions> get___JmiInterface() {
        return integration.processintegration.AUsesInteractions.class;
    }

    protected String metaObjectToString() {
        return "integration.processintegration.AUsesInteractions (Java Type)\nintegration.processintegration.A_uses_interactions (MOF Type)"; //$NON-NLS-1$
    }    
}