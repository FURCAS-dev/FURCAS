/**
 * Generated by the MOIN Generator Version 3.0
 **/

package integration.processintegration.__impl;

public class ProcessintegrationPackageWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefPackageWrapperImpl<integration.processintegration.__impl.ProcessintegrationPackageImpl> implements integration.processintegration.ProcessintegrationPackage,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The ProcessintegrationPackage wrapper
     */
    public ProcessintegrationPackageWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, integration.processintegration.__impl.ProcessintegrationPackageImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    private integration.processintegration.__impl.ProcessintegrationPackageImpl getCastWrappedObject() {
        return (integration.processintegration.__impl.ProcessintegrationPackageImpl) getWrappedObject();
    }
    
    public integration.processintegration.__impl.ProcessintegrationPackageImpl unwrap() {
        return (integration.processintegration.__impl.ProcessintegrationPackageImpl) getWrappedObject();
    }
    
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getIntegrationScenario()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getIntegrationScenario(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getIntegrationScenario(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getProcessComponentInteraction()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getProcessComponentInteraction(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getProcessComponentInteraction(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public integration.processintegration.IsInitiator getIsInitiator()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (integration.processintegration.IsInitiator) wrapResult(getCastWrappedObject().getIsInitiator(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (integration.processintegration.IsInitiator) wrapResult(getCastWrappedObject().getIsInitiator(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public integration.processintegration.IsActor getIsActor()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (integration.processintegration.IsActor) wrapResult(getCastWrappedObject().getIsActor(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (integration.processintegration.IsActor) wrapResult(getCastWrappedObject().getIsActor(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public integration.processintegration.AUsesInteractions getAUsesInteractions()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (integration.processintegration.AUsesInteractions) wrapResult(getCastWrappedObject().getAUsesInteractions(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (integration.processintegration.AUsesInteractions) wrapResult(getCastWrappedObject().getAUsesInteractions(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public integration.processintegration.AIntegrationScenariosApplication getAIntegrationScenariosApplication()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (integration.processintegration.AIntegrationScenariosApplication) wrapResult(getCastWrappedObject().getAIntegrationScenariosApplication(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (integration.processintegration.AIntegrationScenariosApplication) wrapResult(getCastWrappedObject().getAIntegrationScenariosApplication(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public integration.processintegration.AMethodCallsProcessComponentInteraction getAMethodCallsProcessComponentInteraction()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (integration.processintegration.AMethodCallsProcessComponentInteraction) wrapResult(getCastWrappedObject().getAMethodCallsProcessComponentInteraction(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (integration.processintegration.AMethodCallsProcessComponentInteraction) wrapResult(getCastWrappedObject().getAMethodCallsProcessComponentInteraction(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public integration.processintegration.ASubscriptionsProcessComponentInteraction getASubscriptionsProcessComponentInteraction()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (integration.processintegration.ASubscriptionsProcessComponentInteraction) wrapResult(getCastWrappedObject().getASubscriptionsProcessComponentInteraction(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (integration.processintegration.ASubscriptionsProcessComponentInteraction) wrapResult(getCastWrappedObject().getASubscriptionsProcessComponentInteraction(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    // methods for structure type creators
    
    public java.lang.Class<integration.processintegration.ProcessintegrationPackage> get___JmiInterface() {
        return integration.processintegration.ProcessintegrationPackage.class;
    }
    
    protected String metaObjectToString() {
        return "integration.processintegration.ProcessintegrationPackage (Java Type)\nintegration.processintegration (MOF Type)"; //$NON-NLS-1$
    }
}