/**
 * Generated by the MOIN Generator Version 3.0
 **/

package integration.xsd.__impl;

public final class XsdPackageImpl extends com.sap.tc.moin.repository.core.jmi.reflect.RefPackageImpl
{
        
    public static final java.util.Map<java.lang.String, java.lang.Integer> FEATURE_IDS;

    static {
        
        FEATURE_IDS = new java.util.HashMap<java.lang.String, java.lang.Integer>(36);
        FEATURE_IDS.put("Sequence", Integer.valueOf(0)); //$NON-NLS-1$
        FEATURE_IDS.put("Choice", Integer.valueOf(1)); //$NON-NLS-1$
        FEATURE_IDS.put("ComplexType", Integer.valueOf(2)); //$NON-NLS-1$
        FEATURE_IDS.put("ElementDefinition", Integer.valueOf(3)); //$NON-NLS-1$
        FEATURE_IDS.put("NamedElement", Integer.valueOf(4)); //$NON-NLS-1$
        FEATURE_IDS.put("AbstractType", Integer.valueOf(5)); //$NON-NLS-1$
        FEATURE_IDS.put("Containable", Integer.valueOf(6)); //$NON-NLS-1$
        FEATURE_IDS.put("Attribute", Integer.valueOf(7)); //$NON-NLS-1$
        FEATURE_IDS.put("Any", Integer.valueOf(8)); //$NON-NLS-1$
        FEATURE_IDS.put("Root", Integer.valueOf(9)); //$NON-NLS-1$
        FEATURE_IDS.put("Group", Integer.valueOf(10)); //$NON-NLS-1$
        FEATURE_IDS.put("Annotation", Integer.valueOf(11)); //$NON-NLS-1$
        FEATURE_IDS.put("Notation", Integer.valueOf(12)); //$NON-NLS-1$
        FEATURE_IDS.put("SimpleType", Integer.valueOf(13)); //$NON-NLS-1$
        FEATURE_IDS.put("ElementReference", Integer.valueOf(14)); //$NON-NLS-1$
        FEATURE_IDS.put("AbstractContent", Integer.valueOf(15)); //$NON-NLS-1$
        FEATURE_IDS.put("SimpleContent", Integer.valueOf(16)); //$NON-NLS-1$
        FEATURE_IDS.put("ComplexContent", Integer.valueOf(17)); //$NON-NLS-1$
        FEATURE_IDS.put("hasElemType", Integer.valueOf(18)); //$NON-NLS-1$
        FEATURE_IDS.put("containAtts", Integer.valueOf(19)); //$NON-NLS-1$
        FEATURE_IDS.put("hasChoices", Integer.valueOf(20)); //$NON-NLS-1$
        FEATURE_IDS.put("inSeq", Integer.valueOf(21)); //$NON-NLS-1$
        FEATURE_IDS.put("hasAnnotation", Integer.valueOf(22)); //$NON-NLS-1$
        FEATURE_IDS.put("hasAttType", Integer.valueOf(23)); //$NON-NLS-1$
        FEATURE_IDS.put("hasComplexTypeContent", Integer.valueOf(24)); //$NON-NLS-1$
        FEATURE_IDS.put("hasSimpleTypeContent", Integer.valueOf(25)); //$NON-NLS-1$
        FEATURE_IDS.put("hasContentModel", Integer.valueOf(26)); //$NON-NLS-1$
    }

    // constructors    
    public XsdPackageImpl()
    {
        super();
    }
    public XsdPackageImpl(java.lang.Object workspace, java.lang.String mofId, com.sap.tc.moin.repository.mmi.reflect.RefPackage immediatePackage, com.sap.tc.moin.repository.mmi.reflect.RefObject metaObject)
    {
        super(workspace, mofId, immediatePackage, metaObject);
    }
    // internal enumeration creators
    public com.sap.tc.moin.repository.mmi.reflect.RefEnum create___RefEnum(com.sap.tc.moin.repository.mmi.model.EnumerationType enumType, String name) {
        com.sap.tc.moin.repository.mmi.reflect.RefEnum result = null;
        java.lang.String enumName = enumType.getName();
          if (enumName.equals("AttUseType")) { //$NON-NLS-1$
            result = integration.xsd.AttUseTypeEnum.forName(name);
          }
        return result;
    }
    // internal structure type creators
    // nested packages
    // classes
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getSequence(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Sequence"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getChoice(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Choice"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getComplexType(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "ComplexType"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getElementDefinition(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "ElementDefinition"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getNamedElement(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "NamedElement"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getAbstractType(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "AbstractType"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getContainable(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Containable"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getAttribute(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Attribute"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getAny(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Any"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getRoot(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Root"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getGroup(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Group"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getAnnotation(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Annotation"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getNotation(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Notation"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getSimpleType(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "SimpleType"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getElementReference(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "ElementReference"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getAbstractContent(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "AbstractContent"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getSimpleContent(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "SimpleContent"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getComplexContent(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "ComplexContent"); //$NON-NLS-1$
    }
    // associations
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getHasElemType(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "hasElemType"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getContainAtts(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "containAtts"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getHasChoices(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "hasChoices"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getInSeq(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "inSeq"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getHasAnnotation(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "hasAnnotation"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getHasAttType(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "hasAttType"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getHasComplexTypeContent(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "hasComplexTypeContent"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getHasSimpleTypeContent(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "hasSimpleTypeContent"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getHasContentModel(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "hasContentModel"); //$NON-NLS-1$
    }
    // structure type creators

    protected java.lang.Object create___Extent(java.lang.Object workspace, java.lang.String mofId, com.sap.tc.moin.repository.mmi.reflect.RefPackage immediatePackage, com.sap.tc.moin.repository.mmi.reflect.RefObject metaObject) {
        java.lang.String name = ((com.sap.tc.moin.repository.mmi.model.ModelElement) metaObject).getName();
        com.sap.tc.moin.repository.mmi.reflect.RefBaseObject result = null;
        try {
            switch (FEATURE_IDS.get(name)) {
                case 0:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("integration.xsd.__impl.SequenceImpl")); //$NON-NLS-1$
                case 1:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("integration.xsd.__impl.ChoiceImpl")); //$NON-NLS-1$
                case 2:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("integration.xsd.__impl.ComplexTypeImpl")); //$NON-NLS-1$
                case 3:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("integration.xsd.__impl.ElementDefinitionImpl")); //$NON-NLS-1$
                case 4:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
                case 5:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
                case 6:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
                case 7:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("integration.xsd.__impl.AttributeImpl")); //$NON-NLS-1$
                case 8:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("integration.xsd.__impl.AnyImpl")); //$NON-NLS-1$
                case 9:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
                case 10:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("integration.xsd.__impl.GroupImpl")); //$NON-NLS-1$
                case 11:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("integration.xsd.__impl.AnnotationImpl")); //$NON-NLS-1$
                case 12:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("integration.xsd.__impl.NotationImpl")); //$NON-NLS-1$
                case 13:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("integration.xsd.__impl.SimpleTypeImpl")); //$NON-NLS-1$
                case 14:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("integration.xsd.__impl.ElementReferenceImpl")); //$NON-NLS-1$
                case 15:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
                case 16:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("integration.xsd.__impl.SimpleContentImpl")); //$NON-NLS-1$
                case 17:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("integration.xsd.__impl.ComplexContentImpl")); //$NON-NLS-1$
                case 18:
                    return new integration.xsd.__impl.HasElemTypeImpl(workspace, mofId, immediatePackage, metaObject);
                case 19:
                    return new integration.xsd.__impl.ContainAttsImpl(workspace, mofId, immediatePackage, metaObject);
                case 20:
                    return new integration.xsd.__impl.HasChoicesImpl(workspace, mofId, immediatePackage, metaObject);
                case 21:
                    return new integration.xsd.__impl.InSeqImpl(workspace, mofId, immediatePackage, metaObject);
                case 22:
                    return new integration.xsd.__impl.HasAnnotationImpl(workspace, mofId, immediatePackage, metaObject);
                case 23:
                    return new integration.xsd.__impl.HasAttTypeImpl(workspace, mofId, immediatePackage, metaObject);
                case 24:
                    return new integration.xsd.__impl.HasComplexTypeContentImpl(workspace, mofId, immediatePackage, metaObject);
                case 25:
                    return new integration.xsd.__impl.HasSimpleTypeContentImpl(workspace, mofId, immediatePackage, metaObject);
                case 26:
                    return new integration.xsd.__impl.HasContentModelImpl(workspace, mofId, immediatePackage, metaObject);
                default:
                    throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException(name, null, "create___Extent()"); //$NON-NLS-1$
        }
        }
        catch(com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            throw ex;
        }
        catch(java.lang.Exception ex) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }        
    }

    @SuppressWarnings("unchecked")
    public java.lang.Class<integration.xsd.XsdPackage> get___JmiInterface() {
        return integration.xsd.XsdPackage.class;
    }
    
    protected void initialize() {
        if (___refPackages == null) {
            ___refPackages = new java.util.ArrayList<RefPackageAndName>(0);
            ___refPackagesByName = new java.util.HashMap<String, RefPackageAndName>();
            @SuppressWarnings("unused")
            java.lang.String name = ""; //$NON-NLS-1$
            @SuppressWarnings("unused")
            RefPackageAndName rpan = null;
        }
  
        if (___refClasses == null) {
            ___refClasses = new java.util.ArrayList<RefClassAndName>(18);
            ___refClassesByName = new java.util.HashMap<String, RefClassAndName>();
            java.lang.String name = ""; //$NON-NLS-1$
            RefClassAndName rcan = null;
            name = "Sequence"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "integration.xsd.Sequence"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Choice"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "integration.xsd.Choice"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "ComplexType"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "integration.xsd.ComplexType"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "ElementDefinition"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "integration.xsd.ElementDefinition"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "NamedElement"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "integration.xsd.NamedElement"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "AbstractType"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "integration.xsd.AbstractType"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Containable"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "integration.xsd.Containable"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Attribute"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "integration.xsd.Attribute"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Any"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "integration.xsd.Any"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Root"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "integration.xsd.Root"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Group"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "integration.xsd.Group"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Annotation"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "integration.xsd.Annotation"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Notation"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "integration.xsd.Notation"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "SimpleType"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "integration.xsd.SimpleType"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "ElementReference"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "integration.xsd.ElementReference"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "AbstractContent"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "integration.xsd.AbstractContent"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "SimpleContent"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "integration.xsd.SimpleContent"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "ComplexContent"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "integration.xsd.ComplexContent"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
        }
  
        if (___refAssociations == null) {
            ___refAssociations = new java.util.ArrayList<RefAssociationAndName>(9);
            ___refAssociationsByName = new java.util.HashMap<String, RefAssociationAndName>();
            @SuppressWarnings("unused")
            java.lang.String name = ""; //$NON-NLS-1$
            @SuppressWarnings("unused")
            RefAssociationAndName raan = null;
            name = "hasElemType"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "integration.xsd.HasElemType"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "containAtts"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "integration.xsd.ContainAtts"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "hasChoices"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "integration.xsd.HasChoices"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "inSeq"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "integration.xsd.InSeq"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "hasAnnotation"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "integration.xsd.HasAnnotation"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "hasAttType"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "integration.xsd.HasAttType"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "hasComplexTypeContent"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "integration.xsd.HasComplexTypeContent"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "hasSimpleTypeContent"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "integration.xsd.HasSimpleTypeContent"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "hasContentModel"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "integration.xsd.HasContentModel"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
        }
    }
    
    @Override
    public com.sap.tc.moin.repository.spi.core.Wrapper<integration.xsd.__impl.XsdPackageImpl> createWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, boolean synchronize) {
        return new integration.xsd.__impl.XsdPackageWrapper(conn, this, synchronize);
    }

}