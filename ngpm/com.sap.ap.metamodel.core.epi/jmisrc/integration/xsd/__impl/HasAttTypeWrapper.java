/**
 * Generated by the MOIN Generator Version 3.0
 **/

package integration.xsd.__impl;

public class HasAttTypeWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<integration.xsd.HasAttType> implements integration.xsd.HasAttType,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The HasAttType wrapper
     */
    public HasAttTypeWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, integration.xsd.__impl.HasAttTypeImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private integration.xsd.__impl.HasAttTypeImpl getCastWrappedObject() {
        return (integration.xsd.__impl.HasAttTypeImpl) getWrappedObject();
    }

    public integration.xsd.HasAttType unwrap() {
        return (integration.xsd.HasAttType) getWrappedObject();
    }
    
    public boolean exists(integration.xsd.SimpleType _Type, integration.xsd.Attribute _Attribute) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Type), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Attribute));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Type), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Attribute)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public integration.xsd.SimpleType getType(integration.xsd.Attribute _Attribute) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (integration.xsd.SimpleType) wrapResult(getCastWrappedObject().getType(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Attribute)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (integration.xsd.SimpleType) wrapResult(getCastWrappedObject().getType(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Attribute))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getAttribute(integration.xsd.SimpleType _Type) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getAttribute(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Type)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getAttribute(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Type))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(integration.xsd.SimpleType _Type, integration.xsd.Attribute _Attribute) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Type), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Attribute));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Type), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Attribute)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(integration.xsd.SimpleType _Type, integration.xsd.Attribute _Attribute) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Type), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Attribute));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Type), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Attribute)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<integration.xsd.HasAttType> get___JmiInterface() {
        return integration.xsd.HasAttType.class;
    }

    protected String metaObjectToString() {
        return "integration.xsd.HasAttType (Java Type)\nintegration.xsd.hasAttType (MOF Type)"; //$NON-NLS-1$
    }    
}