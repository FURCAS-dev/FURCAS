/**
 * Generated by the MOIN Generator Version 3.0
 **/

package integration.xsd.__impl;

public class HasComplexTypeContentWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<integration.xsd.HasComplexTypeContent> implements integration.xsd.HasComplexTypeContent,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The HasComplexTypeContent wrapper
     */
    public HasComplexTypeContentWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, integration.xsd.__impl.HasComplexTypeContentImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private integration.xsd.__impl.HasComplexTypeContentImpl getCastWrappedObject() {
        return (integration.xsd.__impl.HasComplexTypeContentImpl) getWrappedObject();
    }

    public integration.xsd.HasComplexTypeContent unwrap() {
        return (integration.xsd.HasComplexTypeContent) getWrappedObject();
    }
    
    public boolean exists(integration.xsd.AbstractContent _Content, integration.xsd.ComplexType _ComplexType) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Content), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ComplexType));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Content), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ComplexType)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public integration.xsd.AbstractContent getContent(integration.xsd.ComplexType _ComplexType) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (integration.xsd.AbstractContent) wrapResult(getCastWrappedObject().getContent(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ComplexType)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (integration.xsd.AbstractContent) wrapResult(getCastWrappedObject().getContent(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ComplexType))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getComplexType(integration.xsd.AbstractContent _Content) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getComplexType(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Content)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getComplexType(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Content))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(integration.xsd.AbstractContent _Content, integration.xsd.ComplexType _ComplexType) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Content), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ComplexType));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Content), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ComplexType)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(integration.xsd.AbstractContent _Content, integration.xsd.ComplexType _ComplexType) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Content), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ComplexType));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Content), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ComplexType)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<integration.xsd.HasComplexTypeContent> get___JmiInterface() {
        return integration.xsd.HasComplexTypeContent.class;
    }

    protected String metaObjectToString() {
        return "integration.xsd.HasComplexTypeContent (Java Type)\nintegration.xsd.hasComplexTypeContent (MOF Type)"; //$NON-NLS-1$
    }    
}