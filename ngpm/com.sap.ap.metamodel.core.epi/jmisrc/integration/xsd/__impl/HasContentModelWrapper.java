/**
 * Generated by the MOIN Generator Version 3.0
 **/

package integration.xsd.__impl;

public class HasContentModelWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<integration.xsd.HasContentModel> implements integration.xsd.HasContentModel,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The HasContentModel wrapper
     */
    public HasContentModelWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, integration.xsd.__impl.HasContentModelImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private integration.xsd.__impl.HasContentModelImpl getCastWrappedObject() {
        return (integration.xsd.__impl.HasContentModelImpl) getWrappedObject();
    }

    public integration.xsd.HasContentModel unwrap() {
        return (integration.xsd.HasContentModel) getWrappedObject();
    }
    
    public boolean exists(integration.xsd.Containable _ContentModel, integration.xsd.ComplexContent _ComplexContent) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ContentModel), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ComplexContent));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ContentModel), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ComplexContent)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public integration.xsd.Containable getContentModel(integration.xsd.ComplexContent _ComplexContent) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (integration.xsd.Containable) wrapResult(getCastWrappedObject().getContentModel(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ComplexContent)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (integration.xsd.Containable) wrapResult(getCastWrappedObject().getContentModel(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ComplexContent))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getComplexContent(integration.xsd.Containable _ContentModel) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getComplexContent(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ContentModel)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getComplexContent(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ContentModel))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(integration.xsd.Containable _ContentModel, integration.xsd.ComplexContent _ComplexContent) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ContentModel), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ComplexContent));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ContentModel), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ComplexContent)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(integration.xsd.Containable _ContentModel, integration.xsd.ComplexContent _ComplexContent) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ContentModel), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ComplexContent));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ContentModel), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ComplexContent)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<integration.xsd.HasContentModel> get___JmiInterface() {
        return integration.xsd.HasContentModel.class;
    }

    protected String metaObjectToString() {
        return "integration.xsd.HasContentModel (Java Type)\nintegration.xsd.hasContentModel (MOF Type)"; //$NON-NLS-1$
    }    
}