/**
 * Generated by the MOIN Generator Version 3.0
 **/

package integration.binding.__impl;

public class AUrlPatternHttpBindingWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<integration.binding.AUrlPatternHttpBinding> implements integration.binding.AUrlPatternHttpBinding,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AUrlPatternHttpBinding wrapper
     */
    public AUrlPatternHttpBindingWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, integration.binding.__impl.AUrlPatternHttpBindingImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private integration.binding.__impl.AUrlPatternHttpBindingImpl getCastWrappedObject() {
        return (integration.binding.__impl.AUrlPatternHttpBindingImpl) getWrappedObject();
    }

    public integration.binding.AUrlPatternHttpBinding unwrap() {
        return (integration.binding.AUrlPatternHttpBinding) getWrappedObject();
    }
    
    public boolean exists(integration.binding.UrlPattern _UrlPattern, integration.binding.HttpBinding _HttpBinding) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _UrlPattern), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _HttpBinding));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _UrlPattern), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _HttpBinding)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public integration.binding.UrlPattern getUrlPattern(integration.binding.HttpBinding _HttpBinding) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (integration.binding.UrlPattern) wrapResult(getCastWrappedObject().getUrlPattern(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _HttpBinding)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (integration.binding.UrlPattern) wrapResult(getCastWrappedObject().getUrlPattern(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _HttpBinding))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public integration.binding.HttpBinding getHttpBinding(integration.binding.UrlPattern _UrlPattern) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (integration.binding.HttpBinding) wrapResult(getCastWrappedObject().getHttpBinding(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _UrlPattern)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (integration.binding.HttpBinding) wrapResult(getCastWrappedObject().getHttpBinding(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _UrlPattern))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(integration.binding.UrlPattern _UrlPattern, integration.binding.HttpBinding _HttpBinding) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _UrlPattern), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _HttpBinding));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _UrlPattern), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _HttpBinding)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(integration.binding.UrlPattern _UrlPattern, integration.binding.HttpBinding _HttpBinding) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _UrlPattern), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _HttpBinding));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _UrlPattern), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _HttpBinding)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<integration.binding.AUrlPatternHttpBinding> get___JmiInterface() {
        return integration.binding.AUrlPatternHttpBinding.class;
    }

    protected String metaObjectToString() {
        return "integration.binding.AUrlPatternHttpBinding (Java Type)\nintegration.binding.A_urlPattern_httpBinding (MOF Type)"; //$NON-NLS-1$
    }    
}