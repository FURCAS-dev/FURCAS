/**
 * Generated by the MOIN Generator Version 3.0
 **/

package integration.binding.__impl;

public class AFunctionBindingWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<integration.binding.AFunctionBinding> implements integration.binding.AFunctionBinding,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AFunctionBinding wrapper
     */
    public AFunctionBindingWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, integration.binding.__impl.AFunctionBindingImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private integration.binding.__impl.AFunctionBindingImpl getCastWrappedObject() {
        return (integration.binding.__impl.AFunctionBindingImpl) getWrappedObject();
    }

    public integration.binding.AFunctionBinding unwrap() {
        return (integration.binding.AFunctionBinding) getWrappedObject();
    }
    
    public boolean exists(dataaccess.expressions.Expression _Function, integration.binding.Binding _Binding) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Function), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Binding));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Function), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Binding)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public dataaccess.expressions.Expression getFunction(integration.binding.Binding _Binding) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (dataaccess.expressions.Expression) wrapResult(getCastWrappedObject().getFunction(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Binding)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (dataaccess.expressions.Expression) wrapResult(getCastWrappedObject().getFunction(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Binding))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public integration.binding.Binding getBinding(dataaccess.expressions.Expression _Function) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (integration.binding.Binding) wrapResult(getCastWrappedObject().getBinding(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Function)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (integration.binding.Binding) wrapResult(getCastWrappedObject().getBinding(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Function))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(dataaccess.expressions.Expression _Function, integration.binding.Binding _Binding) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Function), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Binding));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Function), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Binding)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(dataaccess.expressions.Expression _Function, integration.binding.Binding _Binding) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Function), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Binding));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Function), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Binding)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<integration.binding.AFunctionBinding> get___JmiInterface() {
        return integration.binding.AFunctionBinding.class;
    }

    protected String metaObjectToString() {
        return "integration.binding.AFunctionBinding (Java Type)\nintegration.binding.A_function_binding (MOF Type)"; //$NON-NLS-1$
    }    
}