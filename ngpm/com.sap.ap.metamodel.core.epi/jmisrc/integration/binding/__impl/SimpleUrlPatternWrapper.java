/**
 * Generated by the MOIN Generator Version 3.0
 **/

package integration.binding.__impl;

public class SimpleUrlPatternWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefObjectWrapperImpl<integration.binding.__impl.SimpleUrlPatternImpl> implements integration.binding.SimpleUrlPattern,com.sap.tc.moin.repository.Partitionable {

    
    static {
    }

    public SimpleUrlPatternWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, integration.binding.__impl.SimpleUrlPatternImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    private integration.binding.__impl.SimpleUrlPatternImpl getCastWrappedObject() {
        return (integration.binding.__impl.SimpleUrlPatternImpl) getWrappedObject();
    }
    
    private integration.binding.__impl.SimpleUrlPatternImpl getCastWrappedObject(com.sap.tc.moin.repository.core.CorePartitionable resolved) {
        return (integration.binding.__impl.SimpleUrlPatternImpl) resolved;
    }
    
    public integration.binding.__impl.SimpleUrlPatternImpl unwrap() {
        return (integration.binding.__impl.SimpleUrlPatternImpl) getWrappedObject();
    }
        
    // methods for attributes
    public java.lang.String getBaseUrl() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        com.sap.tc.moin.repository.core.CorePartitionable resolved = mriReference.getIfResolved();
        if (resolved != null) {
            return getCastWrappedObject(resolved).getBaseUrl();
        }
            try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().getBaseUrl();
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().getBaseUrl(); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public void setBaseUrl(java.lang.String newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setBaseUrl(connection, newValue);
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setBaseUrl(connection, newValue);
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

     
    // methods for references
   
    // methods for modeled operations
    
    // methods for internal modeled operations

    // reflective methods
    

    // get the JMI interface
    public java.lang.Class<integration.binding.SimpleUrlPattern> get___JmiInterface() {
        return integration.binding.SimpleUrlPattern.class;
    }

    // to String
    protected String metaObjectToString() {
        return "integration.binding.SimpleUrlPattern (Java Type)\nintegration.binding.SimpleUrlPattern (MOF Type)"; //$NON-NLS-1$
    }    
}