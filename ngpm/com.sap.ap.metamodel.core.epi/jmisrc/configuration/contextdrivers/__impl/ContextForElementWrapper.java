/**
 * Generated by the MOIN Generator Version 3.0
 **/

package configuration.contextdrivers.__impl;

public class ContextForElementWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<configuration.contextdrivers.ContextForElement> implements configuration.contextdrivers.ContextForElement,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The ContextForElement wrapper
     */
    public ContextForElementWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, configuration.contextdrivers.__impl.ContextForElementImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private configuration.contextdrivers.__impl.ContextForElementImpl getCastWrappedObject() {
        return (configuration.contextdrivers.__impl.ContextForElementImpl) getWrappedObject();
    }

    public configuration.contextdrivers.ContextForElement unwrap() {
        return (configuration.contextdrivers.ContextForElement) getWrappedObject();
    }
    
    public boolean exists(configuration.contextdrivers.ContextualElement _ConfiguredElement, configuration.contextdrivers.ContexConfiguration _ContextualElementConfiguration) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConfiguredElement), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ContextualElementConfiguration));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConfiguredElement), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ContextualElementConfiguration)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public configuration.contextdrivers.ContextualElement getConfiguredElement(configuration.contextdrivers.ContexConfiguration _ContextualElementConfiguration) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (configuration.contextdrivers.ContextualElement) wrapResult(getCastWrappedObject().getConfiguredElement(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ContextualElementConfiguration)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (configuration.contextdrivers.ContextualElement) wrapResult(getCastWrappedObject().getConfiguredElement(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ContextualElementConfiguration))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getContextualElementConfiguration(configuration.contextdrivers.ContextualElement _ConfiguredElement) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getContextualElementConfiguration(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConfiguredElement)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getContextualElementConfiguration(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConfiguredElement))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(configuration.contextdrivers.ContextualElement _ConfiguredElement, configuration.contextdrivers.ContexConfiguration _ContextualElementConfiguration) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConfiguredElement), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ContextualElementConfiguration));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConfiguredElement), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ContextualElementConfiguration)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(configuration.contextdrivers.ContextualElement _ConfiguredElement, configuration.contextdrivers.ContexConfiguration _ContextualElementConfiguration) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConfiguredElement), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ContextualElementConfiguration));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConfiguredElement), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ContextualElementConfiguration)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<configuration.contextdrivers.ContextForElement> get___JmiInterface() {
        return configuration.contextdrivers.ContextForElement.class;
    }

    protected String metaObjectToString() {
        return "configuration.contextdrivers.ContextForElement (Java Type)\nconfiguration.context_drivers.ContextForElement (MOF Type)"; //$NON-NLS-1$
    }    
}