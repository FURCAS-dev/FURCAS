/**
 * Generated by the MOIN Generator Version 3.0
 **/

package configuration.contextdrivers.__impl;

public class ValuesOfBusinessContextWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<configuration.contextdrivers.ValuesOfBusinessContext> implements configuration.contextdrivers.ValuesOfBusinessContext,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The ValuesOfBusinessContext wrapper
     */
    public ValuesOfBusinessContextWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, configuration.contextdrivers.__impl.ValuesOfBusinessContextImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private configuration.contextdrivers.__impl.ValuesOfBusinessContextImpl getCastWrappedObject() {
        return (configuration.contextdrivers.__impl.ValuesOfBusinessContextImpl) getWrappedObject();
    }

    public configuration.contextdrivers.ValuesOfBusinessContext unwrap() {
        return (configuration.contextdrivers.ValuesOfBusinessContext) getWrappedObject();
    }
    
    public boolean exists(configuration.contextdrivers.ContextCategoryValue _RootValue, configuration.contextdrivers.ContextCategory _Context) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _RootValue), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Context));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _RootValue), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Context)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public configuration.contextdrivers.ContextCategoryValue getRootValue(configuration.contextdrivers.ContextCategory _Context) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (configuration.contextdrivers.ContextCategoryValue) wrapResult(getCastWrappedObject().getRootValue(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Context)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (configuration.contextdrivers.ContextCategoryValue) wrapResult(getCastWrappedObject().getRootValue(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Context))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public configuration.contextdrivers.ContextCategory getContext(configuration.contextdrivers.ContextCategoryValue _RootValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (configuration.contextdrivers.ContextCategory) wrapResult(getCastWrappedObject().getContext(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _RootValue)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (configuration.contextdrivers.ContextCategory) wrapResult(getCastWrappedObject().getContext(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _RootValue))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(configuration.contextdrivers.ContextCategoryValue _RootValue, configuration.contextdrivers.ContextCategory _Context) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _RootValue), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Context));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _RootValue), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Context)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(configuration.contextdrivers.ContextCategoryValue _RootValue, configuration.contextdrivers.ContextCategory _Context) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _RootValue), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Context));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _RootValue), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Context)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<configuration.contextdrivers.ValuesOfBusinessContext> get___JmiInterface() {
        return configuration.contextdrivers.ValuesOfBusinessContext.class;
    }

    protected String metaObjectToString() {
        return "configuration.contextdrivers.ValuesOfBusinessContext (Java Type)\nconfiguration.context_drivers.ValuesOfBusinessContext (MOF Type)"; //$NON-NLS-1$
    }    
}