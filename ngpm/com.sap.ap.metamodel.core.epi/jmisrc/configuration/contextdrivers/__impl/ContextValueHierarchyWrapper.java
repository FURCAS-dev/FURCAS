/**
 * Generated by the MOIN Generator Version 3.0
 **/

package configuration.contextdrivers.__impl;

public class ContextValueHierarchyWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<configuration.contextdrivers.ContextValueHierarchy> implements configuration.contextdrivers.ContextValueHierarchy,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The ContextValueHierarchy wrapper
     */
    public ContextValueHierarchyWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, configuration.contextdrivers.__impl.ContextValueHierarchyImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private configuration.contextdrivers.__impl.ContextValueHierarchyImpl getCastWrappedObject() {
        return (configuration.contextdrivers.__impl.ContextValueHierarchyImpl) getWrappedObject();
    }

    public configuration.contextdrivers.ContextValueHierarchy unwrap() {
        return (configuration.contextdrivers.ContextValueHierarchy) getWrappedObject();
    }
    
    public boolean exists(configuration.contextdrivers.ContextCategoryValue _Children, configuration.contextdrivers.ContextCategoryValue _Parent) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Children), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Parent));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Children), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Parent)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getChildren(configuration.contextdrivers.ContextCategoryValue _Parent) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getChildren(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Parent)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getChildren(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Parent))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public configuration.contextdrivers.ContextCategoryValue getParent(configuration.contextdrivers.ContextCategoryValue _Children) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (configuration.contextdrivers.ContextCategoryValue) wrapResult(getCastWrappedObject().getParent(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Children)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (configuration.contextdrivers.ContextCategoryValue) wrapResult(getCastWrappedObject().getParent(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Children))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(configuration.contextdrivers.ContextCategoryValue _Children, configuration.contextdrivers.ContextCategoryValue _Parent) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Children), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Parent));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Children), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Parent)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(configuration.contextdrivers.ContextCategoryValue _Children, configuration.contextdrivers.ContextCategoryValue _Parent) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Children), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Parent));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Children), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Parent)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<configuration.contextdrivers.ContextValueHierarchy> get___JmiInterface() {
        return configuration.contextdrivers.ContextValueHierarchy.class;
    }

    protected String metaObjectToString() {
        return "configuration.contextdrivers.ContextValueHierarchy (Java Type)\nconfiguration.context_drivers.ContextValueHierarchy (MOF Type)"; //$NON-NLS-1$
    }    
}