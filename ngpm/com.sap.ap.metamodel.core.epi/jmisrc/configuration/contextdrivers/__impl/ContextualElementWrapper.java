/**
 * Generated by the MOIN Generator Version 3.0
 **/

package configuration.contextdrivers.__impl;

public class ContextualElementWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefObjectWrapperImpl<configuration.contextdrivers.__impl.ContextualElementImpl> implements configuration.contextdrivers.ContextualElement,com.sap.tc.moin.repository.Partitionable {


    static {
    }

    public ContextualElementWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, configuration.contextdrivers.__impl.ContextualElementImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    @SuppressWarnings("unused")
    private configuration.contextdrivers.__impl.ContextualElementImpl getCastWrappedObject() {
        return (configuration.contextdrivers.__impl.ContextualElementImpl) getWrappedObject();
    }
    
    public configuration.contextdrivers.__impl.ContextualElementImpl unwrap() {
        return (configuration.contextdrivers.__impl.ContextualElementImpl) getWrappedObject();
    }
        
    // methods for attributes
     
    // methods for references
    public java.util.Collection<configuration.contextdrivers.ContexConfiguration> getContextualElementConfiguration() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection<configuration.contextdrivers.ContexConfiguration>) wrapResult(getCastWrappedObject().getContextualElementConfiguration(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection<configuration.contextdrivers.ContexConfiguration>) wrapResult(getCastWrappedObject().getContextualElementConfiguration(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



   
    // methods for modeled operations
    
    // methods for internal modeled operations

    // reflective methods
    

    // get the JMI interface
    @SuppressWarnings("unchecked")
    public java.lang.Class<configuration.contextdrivers.ContextualElement> get___JmiInterface() {
        return configuration.contextdrivers.ContextualElement.class;
    }

    // to String
    protected String metaObjectToString() {
        return "configuration.contextdrivers.ContextualElement (Java Type)\nconfiguration.context_drivers.ContextualElement (MOF Type)"; //$NON-NLS-1$
    }    
}