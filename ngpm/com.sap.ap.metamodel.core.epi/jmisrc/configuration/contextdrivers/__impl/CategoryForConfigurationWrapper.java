/**
 * Generated by the MOIN Generator Version 3.0
 **/

package configuration.contextdrivers.__impl;

public class CategoryForConfigurationWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<configuration.contextdrivers.CategoryForConfiguration> implements configuration.contextdrivers.CategoryForConfiguration,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The CategoryForConfiguration wrapper
     */
    public CategoryForConfigurationWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, configuration.contextdrivers.__impl.CategoryForConfigurationImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private configuration.contextdrivers.__impl.CategoryForConfigurationImpl getCastWrappedObject() {
        return (configuration.contextdrivers.__impl.CategoryForConfigurationImpl) getWrappedObject();
    }

    public configuration.contextdrivers.CategoryForConfiguration unwrap() {
        return (configuration.contextdrivers.CategoryForConfiguration) getWrappedObject();
    }
    
    public boolean exists(configuration.contextdrivers.ContextCategory _Category, configuration.contextdrivers.ContexConfiguration _CategoryConfiguration) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Category), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _CategoryConfiguration));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Category), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _CategoryConfiguration)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public configuration.contextdrivers.ContextCategory getCategory(configuration.contextdrivers.ContexConfiguration _CategoryConfiguration) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (configuration.contextdrivers.ContextCategory) wrapResult(getCastWrappedObject().getCategory(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _CategoryConfiguration)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (configuration.contextdrivers.ContextCategory) wrapResult(getCastWrappedObject().getCategory(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _CategoryConfiguration))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getCategoryConfiguration(configuration.contextdrivers.ContextCategory _Category) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getCategoryConfiguration(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Category)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getCategoryConfiguration(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Category))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(configuration.contextdrivers.ContextCategory _Category, configuration.contextdrivers.ContexConfiguration _CategoryConfiguration) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Category), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _CategoryConfiguration));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Category), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _CategoryConfiguration)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(configuration.contextdrivers.ContextCategory _Category, configuration.contextdrivers.ContexConfiguration _CategoryConfiguration) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Category), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _CategoryConfiguration));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Category), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _CategoryConfiguration)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<configuration.contextdrivers.CategoryForConfiguration> get___JmiInterface() {
        return configuration.contextdrivers.CategoryForConfiguration.class;
    }

    protected String metaObjectToString() {
        return "configuration.contextdrivers.CategoryForConfiguration (Java Type)\nconfiguration.context_drivers.CategoryForConfiguration (MOF Type)"; //$NON-NLS-1$
    }    
}