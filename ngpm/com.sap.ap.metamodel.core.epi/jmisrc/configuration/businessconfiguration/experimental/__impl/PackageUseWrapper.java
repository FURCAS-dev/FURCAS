/**
 * Generated by the MOIN Generator Version 3.0
 **/

package configuration.businessconfiguration.experimental.__impl;

public class PackageUseWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefObjectWrapperImpl<configuration.businessconfiguration.experimental.__impl.PackageUseImpl> implements configuration.businessconfiguration.experimental.PackageUse,com.sap.tc.moin.repository.Partitionable {

    
    static {
    }

    public PackageUseWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, configuration.businessconfiguration.experimental.__impl.PackageUseImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    private configuration.businessconfiguration.experimental.__impl.PackageUseImpl getCastWrappedObject() {
        return (configuration.businessconfiguration.experimental.__impl.PackageUseImpl) getWrappedObject();
    }
    
    public configuration.businessconfiguration.experimental.__impl.PackageUseImpl unwrap() {
        return (configuration.businessconfiguration.experimental.__impl.PackageUseImpl) getWrappedObject();
    }
        
    // methods for attributes
     
    // methods for references
    public modelmanagement.Package getPackage() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (modelmanagement.Package) wrapResult(getCastWrappedObject().getPackage(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (modelmanagement.Package) wrapResult(getCastWrappedObject().getPackage(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setPackage(modelmanagement.Package newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setPackage(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setPackage(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public java.util.Collection<configuration.businessconfiguration.experimental.ConfigurationSetting> getSetting() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection<configuration.businessconfiguration.experimental.ConfigurationSetting>) wrapResult(getCastWrappedObject().getSetting(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection<configuration.businessconfiguration.experimental.ConfigurationSetting>) wrapResult(getCastWrappedObject().getSetting(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



   
    // methods for modeled operations
    
    // methods for internal modeled operations

    // reflective methods
    

    // get the JMI interface
    public java.lang.Class<configuration.businessconfiguration.experimental.PackageUse> get___JmiInterface() {
        return configuration.businessconfiguration.experimental.PackageUse.class;
    }

    // to String
    protected String metaObjectToString() {
        return "configuration.businessconfiguration.experimental.PackageUse (Java Type)\nconfiguration.businessconfiguration.experimental.PackageUse (MOF Type)"; //$NON-NLS-1$
    }    
}