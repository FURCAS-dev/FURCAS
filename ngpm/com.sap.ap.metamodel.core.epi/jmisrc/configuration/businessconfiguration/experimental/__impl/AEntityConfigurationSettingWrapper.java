/**
 * Generated by the MOIN Generator Version 3.0
 **/

package configuration.businessconfiguration.experimental.__impl;

public class AEntityConfigurationSettingWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<configuration.businessconfiguration.experimental.AEntityConfigurationSetting> implements configuration.businessconfiguration.experimental.AEntityConfigurationSetting,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AEntityConfigurationSetting wrapper
     */
    public AEntityConfigurationSettingWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, configuration.businessconfiguration.experimental.__impl.AEntityConfigurationSettingImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private configuration.businessconfiguration.experimental.__impl.AEntityConfigurationSettingImpl getCastWrappedObject() {
        return (configuration.businessconfiguration.experimental.__impl.AEntityConfigurationSettingImpl) getWrappedObject();
    }

    public configuration.businessconfiguration.experimental.AEntityConfigurationSetting unwrap() {
        return (configuration.businessconfiguration.experimental.AEntityConfigurationSetting) getWrappedObject();
    }
    
    public boolean exists(configuration.businessconfiguration.experimental.ConfigurationEntity _Entity, configuration.businessconfiguration.experimental.ConfigurationSetting _ConfigurationSetting) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Entity), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConfigurationSetting));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Entity), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConfigurationSetting)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public configuration.businessconfiguration.experimental.ConfigurationEntity getEntity(configuration.businessconfiguration.experimental.ConfigurationSetting _ConfigurationSetting) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (configuration.businessconfiguration.experimental.ConfigurationEntity) wrapResult(getCastWrappedObject().getEntity(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConfigurationSetting)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (configuration.businessconfiguration.experimental.ConfigurationEntity) wrapResult(getCastWrappedObject().getEntity(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConfigurationSetting))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getConfigurationSetting(configuration.businessconfiguration.experimental.ConfigurationEntity _Entity) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getConfigurationSetting(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Entity)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getConfigurationSetting(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Entity))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(configuration.businessconfiguration.experimental.ConfigurationEntity _Entity, configuration.businessconfiguration.experimental.ConfigurationSetting _ConfigurationSetting) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Entity), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConfigurationSetting));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Entity), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConfigurationSetting)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(configuration.businessconfiguration.experimental.ConfigurationEntity _Entity, configuration.businessconfiguration.experimental.ConfigurationSetting _ConfigurationSetting) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Entity), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConfigurationSetting));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Entity), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConfigurationSetting)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<configuration.businessconfiguration.experimental.AEntityConfigurationSetting> get___JmiInterface() {
        return configuration.businessconfiguration.experimental.AEntityConfigurationSetting.class;
    }

    protected String metaObjectToString() {
        return "configuration.businessconfiguration.experimental.AEntityConfigurationSetting (Java Type)\nconfiguration.businessconfiguration.experimental.A_entity_configurationSetting (MOF Type)"; //$NON-NLS-1$
    }    
}