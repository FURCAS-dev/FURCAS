/**
 * Generated by the MOIN Generator Version 3.0
 **/

package configuration.businessconfiguration.experimental.__impl;

public class AConfigurabilityPackageWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<configuration.businessconfiguration.experimental.AConfigurabilityPackage> implements configuration.businessconfiguration.experimental.AConfigurabilityPackage,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AConfigurabilityPackage wrapper
     */
    public AConfigurabilityPackageWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, configuration.businessconfiguration.experimental.__impl.AConfigurabilityPackageImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private configuration.businessconfiguration.experimental.__impl.AConfigurabilityPackageImpl getCastWrappedObject() {
        return (configuration.businessconfiguration.experimental.__impl.AConfigurabilityPackageImpl) getWrappedObject();
    }

    public configuration.businessconfiguration.experimental.AConfigurabilityPackage unwrap() {
        return (configuration.businessconfiguration.experimental.AConfigurabilityPackage) getWrappedObject();
    }
    
    public boolean exists(configuration.businessconfiguration.experimental.ConfigurationEntity _Configurability, modelmanagement.Package _Package) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Configurability), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Package));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Configurability), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Package)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getConfigurability(modelmanagement.Package _Package) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getConfigurability(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Package)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getConfigurability(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Package))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public modelmanagement.Package getPackage(configuration.businessconfiguration.experimental.ConfigurationEntity _Configurability) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (modelmanagement.Package) wrapResult(getCastWrappedObject().getPackage(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Configurability)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (modelmanagement.Package) wrapResult(getCastWrappedObject().getPackage(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Configurability))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(configuration.businessconfiguration.experimental.ConfigurationEntity _Configurability, modelmanagement.Package _Package) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Configurability), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Package));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Configurability), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Package)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(configuration.businessconfiguration.experimental.ConfigurationEntity _Configurability, modelmanagement.Package _Package) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Configurability), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Package));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Configurability), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Package)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<configuration.businessconfiguration.experimental.AConfigurabilityPackage> get___JmiInterface() {
        return configuration.businessconfiguration.experimental.AConfigurabilityPackage.class;
    }

    protected String metaObjectToString() {
        return "configuration.businessconfiguration.experimental.AConfigurabilityPackage (Java Type)\nconfiguration.businessconfiguration.experimental.A_configurability_package_ (MOF Type)"; //$NON-NLS-1$
    }    
}