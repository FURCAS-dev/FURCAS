/**
 * Generated by the MOIN Generator Version 3.0
 **/

package configuration.businessconfiguration.experimental.__impl;

public class AConfigurableItemConfigurationEntityWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<configuration.businessconfiguration.experimental.AConfigurableItemConfigurationEntity> implements configuration.businessconfiguration.experimental.AConfigurableItemConfigurationEntity,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AConfigurableItemConfigurationEntity wrapper
     */
    public AConfigurableItemConfigurationEntityWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, configuration.businessconfiguration.experimental.__impl.AConfigurableItemConfigurationEntityImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private configuration.businessconfiguration.experimental.__impl.AConfigurableItemConfigurationEntityImpl getCastWrappedObject() {
        return (configuration.businessconfiguration.experimental.__impl.AConfigurableItemConfigurationEntityImpl) getWrappedObject();
    }

    public configuration.businessconfiguration.experimental.AConfigurableItemConfigurationEntity unwrap() {
        return (configuration.businessconfiguration.experimental.AConfigurableItemConfigurationEntity) getWrappedObject();
    }
    
    public boolean exists(data.classes.AssociationEnd _ConfigurableItem, configuration.businessconfiguration.experimental.ConfigurationEntity _ConfigurationEntity) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConfigurableItem), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConfigurationEntity));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConfigurableItem), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConfigurationEntity)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public data.classes.AssociationEnd getConfigurableItem(configuration.businessconfiguration.experimental.ConfigurationEntity _ConfigurationEntity) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (data.classes.AssociationEnd) wrapResult(getCastWrappedObject().getConfigurableItem(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConfigurationEntity)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (data.classes.AssociationEnd) wrapResult(getCastWrappedObject().getConfigurableItem(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConfigurationEntity))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getConfigurationEntity(data.classes.AssociationEnd _ConfigurableItem) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getConfigurationEntity(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConfigurableItem)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getConfigurationEntity(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConfigurableItem))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(data.classes.AssociationEnd _ConfigurableItem, configuration.businessconfiguration.experimental.ConfigurationEntity _ConfigurationEntity) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConfigurableItem), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConfigurationEntity));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConfigurableItem), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConfigurationEntity)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(data.classes.AssociationEnd _ConfigurableItem, configuration.businessconfiguration.experimental.ConfigurationEntity _ConfigurationEntity) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConfigurableItem), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConfigurationEntity));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConfigurableItem), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConfigurationEntity)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<configuration.businessconfiguration.experimental.AConfigurableItemConfigurationEntity> get___JmiInterface() {
        return configuration.businessconfiguration.experimental.AConfigurableItemConfigurationEntity.class;
    }

    protected String metaObjectToString() {
        return "configuration.businessconfiguration.experimental.AConfigurableItemConfigurationEntity (Java Type)\nconfiguration.businessconfiguration.experimental.A_configurableItem_configurationEntity (MOF Type)"; //$NON-NLS-1$
    }    
}