/**
 * Generated by the MOIN Generator Version 3.0
 **/

package configuration.businessconfiguration.__impl;

public class AApplicableInContextConfigurationElementWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<configuration.businessconfiguration.AApplicableInContextConfigurationElement> implements configuration.businessconfiguration.AApplicableInContextConfigurationElement,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AApplicableInContextConfigurationElement wrapper
     */
    public AApplicableInContextConfigurationElementWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, configuration.businessconfiguration.__impl.AApplicableInContextConfigurationElementImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private configuration.businessconfiguration.__impl.AApplicableInContextConfigurationElementImpl getCastWrappedObject() {
        return (configuration.businessconfiguration.__impl.AApplicableInContextConfigurationElementImpl) getWrappedObject();
    }

    public configuration.businessconfiguration.AApplicableInContextConfigurationElement unwrap() {
        return (configuration.businessconfiguration.AApplicableInContextConfigurationElement) getWrappedObject();
    }
    
    public boolean exists(configuration.businessconfiguration.ScopingContext _ApplicableInContext, configuration.businessconfiguration.ConfigurationElement _ConfigurationElement) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ApplicableInContext), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConfigurationElement));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ApplicableInContext), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConfigurationElement)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getApplicableInContext(configuration.businessconfiguration.ConfigurationElement _ConfigurationElement) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getApplicableInContext(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConfigurationElement)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getApplicableInContext(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConfigurationElement))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getConfigurationElement(configuration.businessconfiguration.ScopingContext _ApplicableInContext) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getConfigurationElement(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ApplicableInContext)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getConfigurationElement(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ApplicableInContext))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(configuration.businessconfiguration.ScopingContext _ApplicableInContext, configuration.businessconfiguration.ConfigurationElement _ConfigurationElement) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ApplicableInContext), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConfigurationElement));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ApplicableInContext), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConfigurationElement)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(configuration.businessconfiguration.ScopingContext _ApplicableInContext, configuration.businessconfiguration.ConfigurationElement _ConfigurationElement) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ApplicableInContext), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConfigurationElement));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ApplicableInContext), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConfigurationElement)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<configuration.businessconfiguration.AApplicableInContextConfigurationElement> get___JmiInterface() {
        return configuration.businessconfiguration.AApplicableInContextConfigurationElement.class;
    }

    protected String metaObjectToString() {
        return "configuration.businessconfiguration.AApplicableInContextConfigurationElement (Java Type)\nconfiguration.businessconfiguration.A_applicableInContext_configurationElement (MOF Type)"; //$NON-NLS-1$
    }    
}