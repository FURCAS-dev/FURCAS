/**
 * Generated by the MOIN Generator Version 3.0
 **/

package data.classes;

/**
 * This interface is not intended to be implemented by clients.
 */
public interface NestedTypeDefinition extends data.classes.TypeDefinition {

    /**
     * Descriptors for all features of this MofClass and its supertypes.
     */
    public static final Descriptors DESCRIPTORS = new Descriptors( );

    // class extent descriptor
    /**
     * Extent descriptor
     */
    public final com.sap.tc.moin.repository.mmi.descriptors.ClassDescriptor<com.sap.tc.moin.repository.mmi.reflect.RefClass, data.classes.NestedTypeDefinition> CLASS_DESCRIPTOR = new com.sap.tc.moin.repository.mmi.descriptors.ClassDescriptor<com.sap.tc.moin.repository.mmi.reflect.RefClass, data.classes.NestedTypeDefinition>("E0234C8C51E931CE3E4B11DECB060018DE1146FF", "sap.com/moin/mm/ap/core", "data", "classes", "NestedTypeDefinition"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ 

    
    // attributes
    /**
     * Only for syntax mapping issues, hopefully disappearing again in the future. It holds the operator that syntactically introduced this nested type definition, such as "[" or "*".
     */
    public java.lang.String getOp() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    /**
     * Only for syntax mapping issues, hopefully disappearing again in the future. It holds the operator that syntactically introduced this nested type definition, such as "[" or "*".
     */
    public void setOp(java.lang.String newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;

    // references
    public data.classes.TypeDefinition getType() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public void setType(data.classes.TypeDefinition newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public data.classes.TypeDefinition getOwnedTypeDefinition() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public void setOwnedTypeDefinition(data.classes.TypeDefinition newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;


    public static final class Descriptors {
        Descriptors( ) { 
        }
        /**
         * Returns the descriptor for the <code>lowerMultiplicity</code> attribute.
         * @return  the descriptor for the <code>lowerMultiplicity</code> attribute
         */
        public com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,data.classes.Multiplicity,java.lang.Integer> LOWER_MULTIPLICITY( ) {
            return data.classes.Multiplicity.DESCRIPTORS.LOWER_MULTIPLICITY( );
        }
        /**
         * Returns the descriptor for the <code>upperMultiplicity</code> attribute.
         * @return  the descriptor for the <code>upperMultiplicity</code> attribute
         */
        public com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,data.classes.Multiplicity,java.lang.Integer> UPPER_MULTIPLICITY( ) {
            return data.classes.Multiplicity.DESCRIPTORS.UPPER_MULTIPLICITY( );
        }
        /**
         * Returns the descriptor for the <code>ordered</code> attribute.
         * @return  the descriptor for the <code>ordered</code> attribute
         */
        public com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,data.classes.Multiplicity,java.lang.Boolean> ORDERED( ) {
            return data.classes.Multiplicity.DESCRIPTORS.ORDERED( );
        }
        /**
         * Returns the descriptor for the <code>unique</code> attribute.
         * @return  the descriptor for the <code>unique</code> attribute
         */
        public com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,data.classes.Multiplicity,java.lang.Boolean> UNIQUE( ) {
            return data.classes.Multiplicity.DESCRIPTORS.UNIQUE( );
        }
        private com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,data.classes.NestedTypeDefinition,java.lang.String> __op;
        /**
         * Returns the descriptor for the <code>op</code> attribute.
         * @return  the descriptor for the <code>op</code> attribute
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,data.classes.NestedTypeDefinition,java.lang.String> OP( ) {
            if ( __op == null ) {
                __op = new com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,data.classes.NestedTypeDefinition,java.lang.String>( "E0234C8C51E931CD3E4B11DE8DB50018DE1146FF", "sap.com/moin/mm/ap/core", new java.lang.String[] { "data", "classes", "NestedTypeDefinition", "op" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __op;
        }
        /**
         * Returns the descriptor for the <code>signaturesWithOutput</code> reference.
         * @return  the descriptor for the <code>signaturesWithOutput</code> reference
         */
        public com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.TypeDefinition,java.util.Collection<data.classes.Signature>> SIGNATURES_WITH_OUTPUT( ) {
            return data.classes.TypeDefinition.DESCRIPTORS.SIGNATURES_WITH_OUTPUT( );
        }
        /**
         * Returns the descriptor for the <code>ownerTypedElement</code> reference.
         * @return  the descriptor for the <code>ownerTypedElement</code> reference
         */
        public com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.TypeDefinition,data.classes.TypedElement> OWNER_TYPED_ELEMENT( ) {
            return data.classes.TypeDefinition.DESCRIPTORS.OWNER_TYPED_ELEMENT( );
        }
        /**
         * Returns the descriptor for the <code>ownerSignature</code> reference.
         * @return  the descriptor for the <code>ownerSignature</code> reference
         */
        public com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.TypeDefinition,data.classes.Signature> OWNER_SIGNATURE( ) {
            return data.classes.TypeDefinition.DESCRIPTORS.OWNER_SIGNATURE( );
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.NestedTypeDefinition,data.classes.TypeDefinition> __type;
        /**
         * Returns the descriptor for the <code>type</code> reference.
         * @return  the descriptor for the <code>type</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.NestedTypeDefinition,data.classes.TypeDefinition> TYPE( ) {
            if ( __type == null ) {
                __type = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.NestedTypeDefinition,data.classes.TypeDefinition>( "E0234C8C51E931CB3E4B11DE8F1D0018DE1146FF", "sap.com/moin/mm/ap/core", new java.lang.String[] { "data", "classes", "NestedTypeDefinition", "type" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __type;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.NestedTypeDefinition,data.classes.TypeDefinition> __ownedTypeDefinition;
        /**
         * Returns the descriptor for the <code>ownedTypeDefinition</code> reference.
         * @return  the descriptor for the <code>ownedTypeDefinition</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.NestedTypeDefinition,data.classes.TypeDefinition> OWNED_TYPE_DEFINITION( ) {
            if ( __ownedTypeDefinition == null ) {
                __ownedTypeDefinition = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.NestedTypeDefinition,data.classes.TypeDefinition>( "E0234C8C51E931CC3E4B11DE88960018DE1146FF", "sap.com/moin/mm/ap/core", new java.lang.String[] { "data", "classes", "NestedTypeDefinition", "ownedTypeDefinition" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __ownedTypeDefinition;
        }
        /**
         * Returns the descriptor for the <code>isMany</code> operation.
         * @return  the descriptor for the <code>isMany</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.Multiplicity,java.lang.Boolean> IS_MANY( ) {
            return data.classes.Multiplicity.DESCRIPTORS.IS_MANY( );
        }
        /**
         * Returns the descriptor for the <code>conformsTo</code> operation.
         * @return  the descriptor for the <code>conformsTo</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypeDefinition,java.lang.Boolean> CONFORMS_TO( ) {
            return data.classes.TypeDefinition.DESCRIPTORS.CONFORMS_TO( );
        }
        /**
         * Returns the descriptor for the <code>conformsToExcluding</code> operation.
         * @return  the descriptor for the <code>conformsToExcluding</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypeDefinition,java.lang.Boolean> CONFORMS_TO_EXCLUDING( ) {
            return data.classes.TypeDefinition.DESCRIPTORS.CONFORMS_TO_EXCLUDING( );
        }
        /**
         * Returns the descriptor for the <code>multiplicityConformsTo</code> operation.
         * @return  the descriptor for the <code>multiplicityConformsTo</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypeDefinition,java.lang.Boolean> MULTIPLICITY_CONFORMS_TO( ) {
            return data.classes.TypeDefinition.DESCRIPTORS.MULTIPLICITY_CONFORMS_TO( );
        }
        /**
         * Returns the descriptor for the <code>conformsToIgnoringMultiplicityExcluding</code> operation.
         * @return  the descriptor for the <code>conformsToIgnoringMultiplicityExcluding</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypeDefinition,java.lang.Boolean> CONFORMS_TO_IGNORING_MULTIPLICITY_EXCLUDING( ) {
            return data.classes.TypeDefinition.DESCRIPTORS.CONFORMS_TO_IGNORING_MULTIPLICITY_EXCLUDING( );
        }
        /**
         * Returns the descriptor for the <code>conformsToIgnoringMultiplicity</code> operation.
         * @return  the descriptor for the <code>conformsToIgnoringMultiplicity</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypeDefinition,java.lang.Boolean> CONFORMS_TO_IGNORING_MULTIPLICITY( ) {
            return data.classes.TypeDefinition.DESCRIPTORS.CONFORMS_TO_IGNORING_MULTIPLICITY( );
        }
        /**
         * Returns the descriptor for the <code>getTypeUsage</code> operation.
         * @return  the descriptor for the <code>getTypeUsage</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypeDefinition,java.util.Collection<data.classes.TypedElement>> GET_TYPE_USAGE( ) {
            return data.classes.TypeDefinition.DESCRIPTORS.GET_TYPE_USAGE( );
        }
        /**
         * Returns the descriptor for the <code>getInnermost</code> operation.
         * @return  the descriptor for the <code>getInnermost</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypeDefinition,data.classes.TypeDefinition> GET_INNERMOST( ) {
            return data.classes.TypeDefinition.DESCRIPTORS.GET_INNERMOST( );
        }
        /**
         * Returns the descriptor for the <code>getNestingLevel</code> operation.
         * @return  the descriptor for the <code>getNestingLevel</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypeDefinition,java.lang.Integer> GET_NESTING_LEVEL( ) {
            return data.classes.TypeDefinition.DESCRIPTORS.GET_NESTING_LEVEL( );
        }
    }
}    