/**
 * Generated by the MOIN Generator Version 3.0
 **/

package data.classes;

/**
 * This interface is not intended to be implemented by clients.
 */
public interface AssociationEnd extends modelmanagement.NamedElement {

    /**
     * Descriptors for all features of this MofClass and its supertypes.
     */
    public static final Descriptors DESCRIPTORS = new Descriptors( );

    // class extent descriptor
    /**
     * Extent descriptor
     */
    public final com.sap.tc.moin.repository.mmi.descriptors.ClassDescriptor<com.sap.tc.moin.repository.mmi.reflect.RefClass, data.classes.AssociationEnd> CLASS_DESCRIPTOR = new com.sap.tc.moin.repository.mmi.descriptors.ClassDescriptor<com.sap.tc.moin.repository.mmi.reflect.RefClass, data.classes.AssociationEnd>("E0234C8C51E476D13E4B11DEBFA90018DE1146FF", "sap.com/moin/mm/ap/core", "data", "classes", "AssociationEnd"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ 

    
    // attributes
    /**
     * Means that the association can be navigated in that direction towards this end. Note that non-navigability does not serve as a security-related feature. If all objects of the type at the other end can be enumerated and because the association has to be navigable in at least one direction, it will be possible to find out those objects on the other end that are linked to an instance which semantically implements navigation again, only potentially very slowly if the extent to enumerate is large.
     */
    public boolean isNavigable() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    /**
     * Means that the association can be navigated in that direction towards this end. Note that non-navigability does not serve as a security-related feature. If all objects of the type at the other end can be enumerated and because the association has to be navigable in at least one direction, it will be possible to find out those objects on the other end that are linked to an instance which semantically implements navigation again, only potentially very slowly if the extent to enumerate is large.
     */
    public void setNavigable(boolean newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    /**
     * Expresses ownership that for entity-to-entity associations also implies delete propagation. Only one of the two association ends can be marked as composite. The end marked in this way attaches to the "owning" class whereas the otherEnd() attaches to the "owned" class.
     * <p>
     * Composition cannot be used for value classes. Values cannot be owned, and values cannot own anything.
     */
    public boolean isComposite() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    /**
     * Expresses ownership that for entity-to-entity associations also implies delete propagation. Only one of the two association ends can be marked as composite. The end marked in this way attaches to the "owning" class whereas the otherEnd() attaches to the "owned" class.
     * <p>
     * Composition cannot be used for value classes. Values cannot be owned, and values cannot own anything.
     */
    public void setComposite(boolean newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    /**
     * If true, this association end contributes to the equality of the exposing class. An equality-contributing association end must be exposed (maybe with private visibility) because it is relevant for the contract of that class.
     * <p>
     * It is a questionable construct to have both ends contribute to equality if both classes are value classes because it would mean that values of either of the classes can be identified only in pairs. The equality definition would be recursive, and an implementation would have to understand this and cut short the recursion, comparing only all other equality-related association end values.
     */
    public boolean isContributesToEquality() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    /**
     * If true, this association end contributes to the equality of the exposing class. An equality-contributing association end must be exposed (maybe with private visibility) because it is relevant for the contract of that class.
     * <p>
     * It is a questionable construct to have both ends contribute to equality if both classes are value classes because it would mean that values of either of the classes can be identified only in pairs. The equality definition would be recursive, and an implementation would have to understand this and cut short the recursion, comparing only all other equality-related association end values.
     */
    public void setContributesToEquality(boolean newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;

    // references
    public data.classes.Association getAssociation() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public void setAssociation(data.classes.Association newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public data.classes.Delegation getDelegation() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public void setDelegation(data.classes.Delegation newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public java.util.Collection<data.classes.AssociationEndSignatureImplementation> getSignatureImplementations() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public data.classes.ClassTypeDefinition getType() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public void setType(data.classes.ClassTypeDefinition newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;

    // operations
    public data.classes.AssociationEnd otherEnd() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;


    public static final class Descriptors {
        Descriptors( ) { 
        }
        /**
         * Returns the descriptor for the <code>name</code> attribute.
         * @return  the descriptor for the <code>name</code> attribute
         */
        public com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,modelmanagement.NamedElement,java.lang.String> NAME( ) {
            return modelmanagement.NamedElement.DESCRIPTORS.NAME( );
        }
        /**
         * Returns the descriptor for the <code>description</code> attribute.
         * @return  the descriptor for the <code>description</code> attribute
         */
        public com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,modelmanagement.NamedElement,localization.TranslatableText> DESCRIPTION( ) {
            return modelmanagement.NamedElement.DESCRIPTORS.DESCRIPTION( );
        }
        private com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,data.classes.AssociationEnd,java.lang.Boolean> __navigable;
        /**
         * Returns the descriptor for the <code>navigable</code> attribute.
         * @return  the descriptor for the <code>navigable</code> attribute
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,data.classes.AssociationEnd,java.lang.Boolean> NAVIGABLE( ) {
            if ( __navigable == null ) {
                __navigable = new com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,data.classes.AssociationEnd,java.lang.Boolean>( "E0234C8C51E206153E4B11DE80730018DE1146FF", "sap.com/moin/mm/ap/core", new java.lang.String[] { "data", "classes", "AssociationEnd", "navigable" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __navigable;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,data.classes.AssociationEnd,java.lang.Boolean> __composite;
        /**
         * Returns the descriptor for the <code>composite</code> attribute.
         * @return  the descriptor for the <code>composite</code> attribute
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,data.classes.AssociationEnd,java.lang.Boolean> COMPOSITE( ) {
            if ( __composite == null ) {
                __composite = new com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,data.classes.AssociationEnd,java.lang.Boolean>( "E0234C8C51E206163E4B11DECE190018DE1146FF", "sap.com/moin/mm/ap/core", new java.lang.String[] { "data", "classes", "AssociationEnd", "composite" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __composite;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,data.classes.AssociationEnd,java.lang.Boolean> __contributesToEquality;
        /**
         * Returns the descriptor for the <code>contributesToEquality</code> attribute.
         * @return  the descriptor for the <code>contributesToEquality</code> attribute
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,data.classes.AssociationEnd,java.lang.Boolean> CONTRIBUTES_TO_EQUALITY( ) {
            if ( __contributesToEquality == null ) {
                __contributesToEquality = new com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,data.classes.AssociationEnd,java.lang.Boolean>( "E0234C8C51E206173E4B11DE80F70018DE1146FF", "sap.com/moin/mm/ap/core", new java.lang.String[] { "data", "classes", "AssociationEnd", "contributesToEquality" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __contributesToEquality;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.AssociationEnd,data.classes.Association> __association;
        /**
         * Returns the descriptor for the <code>association</code> reference.
         * @return  the descriptor for the <code>association</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.AssociationEnd,data.classes.Association> ASSOCIATION( ) {
            if ( __association == null ) {
                __association = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.AssociationEnd,data.classes.Association>( "E0234C8C51E206113E4B11DEC3400018DE1146FF", "sap.com/moin/mm/ap/core", new java.lang.String[] { "data", "classes", "AssociationEnd", "association" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __association;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.AssociationEnd,data.classes.Delegation> __delegation;
        /**
         * Returns the descriptor for the <code>delegation</code> reference.
         * @return  the descriptor for the <code>delegation</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.AssociationEnd,data.classes.Delegation> DELEGATION( ) {
            if ( __delegation == null ) {
                __delegation = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.AssociationEnd,data.classes.Delegation>( "E0234C8C51E206123E4B11DEC2900018DE1146FF", "sap.com/moin/mm/ap/core", new java.lang.String[] { "data", "classes", "AssociationEnd", "delegation" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __delegation;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.AssociationEnd,java.util.Collection<data.classes.AssociationEndSignatureImplementation>> __signatureImplementations;
        /**
         * Returns the descriptor for the <code>signatureImplementations</code> reference.
         * @return  the descriptor for the <code>signatureImplementations</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.AssociationEnd,java.util.Collection<data.classes.AssociationEndSignatureImplementation>> SIGNATURE_IMPLEMENTATIONS( ) {
            if ( __signatureImplementations == null ) {
                __signatureImplementations = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.AssociationEnd,java.util.Collection<data.classes.AssociationEndSignatureImplementation>>( "E0234C8C51E206133E4B11DE89810018DE1146FF", "sap.com/moin/mm/ap/core", new java.lang.String[] { "data", "classes", "AssociationEnd", "signatureImplementations" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __signatureImplementations;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.AssociationEnd,data.classes.ClassTypeDefinition> __type;
        /**
         * Returns the descriptor for the <code>type</code> reference.
         * @return  the descriptor for the <code>type</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.AssociationEnd,data.classes.ClassTypeDefinition> TYPE( ) {
            if ( __type == null ) {
                __type = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.AssociationEnd,data.classes.ClassTypeDefinition>( "E0234C8C51E206143E4B11DEA3230018DE1146FF", "sap.com/moin/mm/ap/core", new java.lang.String[] { "data", "classes", "AssociationEnd", "type" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __type;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.AssociationEnd,data.classes.AssociationEnd> __otherEnd;
        /**
         * Returns the descriptor for the <code>otherEnd</code> operation.
         * @return  the descriptor for the <code>otherEnd</code> operation
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.AssociationEnd,data.classes.AssociationEnd> OTHER_END( ) {
            if ( __otherEnd == null ) {
                __otherEnd = new com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.AssociationEnd,data.classes.AssociationEnd>( "E0234C8C51E476D03E4B11DE89A30018DE1146FF", "sap.com/moin/mm/ap/core", new java.lang.String[] { "data", "classes", "AssociationEnd", "otherEnd" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __otherEnd;
        }
    }
}    