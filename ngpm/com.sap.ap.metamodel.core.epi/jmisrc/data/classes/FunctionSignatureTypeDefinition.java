/**
 * Generated by the MOIN Generator Version 3.0
 **/

package data.classes;

/**
 * This interface is not intended to be implemented by clients.
 */
public interface FunctionSignatureTypeDefinition extends data.classes.TypeDefinition {

    /**
     * Descriptors for all features of this MofClass and its supertypes.
     */
    public static final Descriptors DESCRIPTORS = new Descriptors( );

    // class extent descriptor
    /**
     * Extent descriptor
     */
    public final com.sap.tc.moin.repository.mmi.descriptors.ClassDescriptor<com.sap.tc.moin.repository.mmi.reflect.RefClass, data.classes.FunctionSignatureTypeDefinition> CLASS_DESCRIPTOR = new com.sap.tc.moin.repository.mmi.descriptors.ClassDescriptor<com.sap.tc.moin.repository.mmi.reflect.RefClass, data.classes.FunctionSignatureTypeDefinition>("E0234C8C51E931D13E4B11DEC68A0018DE1146FF", "sap.com/moin/mm/ap/core", "data", "classes", "FunctionSignatureTypeDefinition"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ 

    
    // references
    public data.classes.Signature getSignature() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public void setSignature(data.classes.Signature newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public data.classes.Signature getOwnedSignature() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public void setOwnedSignature(data.classes.Signature newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;


    public static final class Descriptors {
        Descriptors( ) { 
        }
        /**
         * Returns the descriptor for the <code>lowerMultiplicity</code> attribute.
         * @return  the descriptor for the <code>lowerMultiplicity</code> attribute
         */
        public com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,data.classes.Multiplicity,java.lang.Integer> LOWER_MULTIPLICITY( ) {
            return data.classes.Multiplicity.DESCRIPTORS.LOWER_MULTIPLICITY( );
        }
        /**
         * Returns the descriptor for the <code>upperMultiplicity</code> attribute.
         * @return  the descriptor for the <code>upperMultiplicity</code> attribute
         */
        public com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,data.classes.Multiplicity,java.lang.Integer> UPPER_MULTIPLICITY( ) {
            return data.classes.Multiplicity.DESCRIPTORS.UPPER_MULTIPLICITY( );
        }
        /**
         * Returns the descriptor for the <code>ordered</code> attribute.
         * @return  the descriptor for the <code>ordered</code> attribute
         */
        public com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,data.classes.Multiplicity,java.lang.Boolean> ORDERED( ) {
            return data.classes.Multiplicity.DESCRIPTORS.ORDERED( );
        }
        /**
         * Returns the descriptor for the <code>unique</code> attribute.
         * @return  the descriptor for the <code>unique</code> attribute
         */
        public com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,data.classes.Multiplicity,java.lang.Boolean> UNIQUE( ) {
            return data.classes.Multiplicity.DESCRIPTORS.UNIQUE( );
        }
        /**
         * Returns the descriptor for the <code>signaturesWithOutput</code> reference.
         * @return  the descriptor for the <code>signaturesWithOutput</code> reference
         */
        public com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.TypeDefinition,java.util.Collection<data.classes.Signature>> SIGNATURES_WITH_OUTPUT( ) {
            return data.classes.TypeDefinition.DESCRIPTORS.SIGNATURES_WITH_OUTPUT( );
        }
        /**
         * Returns the descriptor for the <code>ownerTypedElement</code> reference.
         * @return  the descriptor for the <code>ownerTypedElement</code> reference
         */
        public com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.TypeDefinition,data.classes.TypedElement> OWNER_TYPED_ELEMENT( ) {
            return data.classes.TypeDefinition.DESCRIPTORS.OWNER_TYPED_ELEMENT( );
        }
        /**
         * Returns the descriptor for the <code>ownerSignature</code> reference.
         * @return  the descriptor for the <code>ownerSignature</code> reference
         */
        public com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.TypeDefinition,data.classes.Signature> OWNER_SIGNATURE( ) {
            return data.classes.TypeDefinition.DESCRIPTORS.OWNER_SIGNATURE( );
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.FunctionSignatureTypeDefinition,data.classes.Signature> __signature;
        /**
         * Returns the descriptor for the <code>signature</code> reference.
         * @return  the descriptor for the <code>signature</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.FunctionSignatureTypeDefinition,data.classes.Signature> SIGNATURE( ) {
            if ( __signature == null ) {
                __signature = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.FunctionSignatureTypeDefinition,data.classes.Signature>( "E0234C8C51E931CF3E4B11DE802F0018DE1146FF", "sap.com/moin/mm/ap/core", new java.lang.String[] { "data", "classes", "FunctionSignatureTypeDefinition", "signature" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __signature;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.FunctionSignatureTypeDefinition,data.classes.Signature> __ownedSignature;
        /**
         * Returns the descriptor for the <code>ownedSignature</code> reference.
         * @return  the descriptor for the <code>ownedSignature</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.FunctionSignatureTypeDefinition,data.classes.Signature> OWNED_SIGNATURE( ) {
            if ( __ownedSignature == null ) {
                __ownedSignature = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.FunctionSignatureTypeDefinition,data.classes.Signature>( "E0234C8C51E931D03E4B11DEB1FA0018DE1146FF", "sap.com/moin/mm/ap/core", new java.lang.String[] { "data", "classes", "FunctionSignatureTypeDefinition", "ownedSignature" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __ownedSignature;
        }
        /**
         * Returns the descriptor for the <code>isMany</code> operation.
         * @return  the descriptor for the <code>isMany</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.Multiplicity,java.lang.Boolean> IS_MANY( ) {
            return data.classes.Multiplicity.DESCRIPTORS.IS_MANY( );
        }
        /**
         * Returns the descriptor for the <code>conformsTo</code> operation.
         * @return  the descriptor for the <code>conformsTo</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypeDefinition,java.lang.Boolean> CONFORMS_TO( ) {
            return data.classes.TypeDefinition.DESCRIPTORS.CONFORMS_TO( );
        }
        /**
         * Returns the descriptor for the <code>conformsToExcluding</code> operation.
         * @return  the descriptor for the <code>conformsToExcluding</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypeDefinition,java.lang.Boolean> CONFORMS_TO_EXCLUDING( ) {
            return data.classes.TypeDefinition.DESCRIPTORS.CONFORMS_TO_EXCLUDING( );
        }
        /**
         * Returns the descriptor for the <code>multiplicityConformsTo</code> operation.
         * @return  the descriptor for the <code>multiplicityConformsTo</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypeDefinition,java.lang.Boolean> MULTIPLICITY_CONFORMS_TO( ) {
            return data.classes.TypeDefinition.DESCRIPTORS.MULTIPLICITY_CONFORMS_TO( );
        }
        /**
         * Returns the descriptor for the <code>conformsToIgnoringMultiplicityExcluding</code> operation.
         * @return  the descriptor for the <code>conformsToIgnoringMultiplicityExcluding</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypeDefinition,java.lang.Boolean> CONFORMS_TO_IGNORING_MULTIPLICITY_EXCLUDING( ) {
            return data.classes.TypeDefinition.DESCRIPTORS.CONFORMS_TO_IGNORING_MULTIPLICITY_EXCLUDING( );
        }
        /**
         * Returns the descriptor for the <code>conformsToIgnoringMultiplicity</code> operation.
         * @return  the descriptor for the <code>conformsToIgnoringMultiplicity</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypeDefinition,java.lang.Boolean> CONFORMS_TO_IGNORING_MULTIPLICITY( ) {
            return data.classes.TypeDefinition.DESCRIPTORS.CONFORMS_TO_IGNORING_MULTIPLICITY( );
        }
        /**
         * Returns the descriptor for the <code>getTypeUsage</code> operation.
         * @return  the descriptor for the <code>getTypeUsage</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypeDefinition,java.util.Collection<data.classes.TypedElement>> GET_TYPE_USAGE( ) {
            return data.classes.TypeDefinition.DESCRIPTORS.GET_TYPE_USAGE( );
        }
        /**
         * Returns the descriptor for the <code>getInnermost</code> operation.
         * @return  the descriptor for the <code>getInnermost</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypeDefinition,data.classes.TypeDefinition> GET_INNERMOST( ) {
            return data.classes.TypeDefinition.DESCRIPTORS.GET_INNERMOST( );
        }
        /**
         * Returns the descriptor for the <code>getNestingLevel</code> operation.
         * @return  the descriptor for the <code>getNestingLevel</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypeDefinition,java.lang.Integer> GET_NESTING_LEVEL( ) {
            return data.classes.TypeDefinition.DESCRIPTORS.GET_NESTING_LEVEL( );
        }
    }
}    