/**
 * Generated by the MOIN Generator Version 3.0
 **/

package data.classes.__impl;

public class AElementsOfTypeClazzWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<data.classes.AElementsOfTypeClazz> implements data.classes.AElementsOfTypeClazz,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AElementsOfTypeClazz wrapper
     */
    public AElementsOfTypeClazzWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, data.classes.__impl.AElementsOfTypeClazzImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private data.classes.__impl.AElementsOfTypeClazzImpl getCastWrappedObject() {
        return (data.classes.__impl.AElementsOfTypeClazzImpl) getWrappedObject();
    }

    public data.classes.AElementsOfTypeClazz unwrap() {
        return (data.classes.AElementsOfTypeClazz) getWrappedObject();
    }
    
    public boolean exists(data.classes.ClassTypeDefinition _ElementsOfType, data.classes.SapClass _Clazz) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ElementsOfType), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Clazz));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ElementsOfType), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Clazz)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getElementsOfType(data.classes.SapClass _Clazz) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getElementsOfType(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Clazz)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getElementsOfType(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Clazz))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public data.classes.SapClass getClazz(data.classes.ClassTypeDefinition _ElementsOfType) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (data.classes.SapClass) wrapResult(getCastWrappedObject().getClazz(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ElementsOfType)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (data.classes.SapClass) wrapResult(getCastWrappedObject().getClazz(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ElementsOfType))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(data.classes.ClassTypeDefinition _ElementsOfType, data.classes.SapClass _Clazz) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ElementsOfType), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Clazz));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ElementsOfType), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Clazz)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(data.classes.ClassTypeDefinition _ElementsOfType, data.classes.SapClass _Clazz) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ElementsOfType), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Clazz));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ElementsOfType), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Clazz)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<data.classes.AElementsOfTypeClazz> get___JmiInterface() {
        return data.classes.AElementsOfTypeClazz.class;
    }

    protected String metaObjectToString() {
        return "data.classes.AElementsOfTypeClazz (Java Type)\ndata.classes.A_elementsOfType_clazz (MOF Type)"; //$NON-NLS-1$
    }    
}