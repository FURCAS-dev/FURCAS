/**
 * Generated by the MOIN Generator Version 3.0
 **/

package data.classes.__impl;

public class ClassTypeDefinitionWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefObjectWrapperImpl<data.classes.__impl.ClassTypeDefinitionImpl> implements data.classes.ClassTypeDefinition,com.sap.tc.moin.repository.Partitionable {

        
    private static final java.util.Map<java.lang.String, java.lang.Integer> OPERATION_IDS;
    
    static {
        
        OPERATION_IDS = new java.util.HashMap<java.lang.String, java.lang.Integer>();
        OPERATION_IDS.put("isMany", Integer.valueOf(0)); //$NON-NLS-1$
        OPERATION_IDS.put("conformsTo", Integer.valueOf(1)); //$NON-NLS-1$
        OPERATION_IDS.put("conformsToExcluding", Integer.valueOf(2)); //$NON-NLS-1$
        OPERATION_IDS.put("multiplicityConformsTo", Integer.valueOf(3)); //$NON-NLS-1$
        OPERATION_IDS.put("conformsToIgnoringMultiplicityExcluding", Integer.valueOf(4)); //$NON-NLS-1$
        OPERATION_IDS.put("conformsToIgnoringMultiplicity", Integer.valueOf(5)); //$NON-NLS-1$
        OPERATION_IDS.put("getTypeUsage", Integer.valueOf(6)); //$NON-NLS-1$
        OPERATION_IDS.put("getInnermost", Integer.valueOf(7)); //$NON-NLS-1$
        OPERATION_IDS.put("getNestingLevel", Integer.valueOf(8)); //$NON-NLS-1$
        OPERATION_IDS.put("objectParametersConformTo", Integer.valueOf(9)); //$NON-NLS-1$
        OPERATION_IDS.put("effectiveObjectParameters", Integer.valueOf(10)); //$NON-NLS-1$
    }

    public ClassTypeDefinitionWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, data.classes.__impl.ClassTypeDefinitionImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    private data.classes.__impl.ClassTypeDefinitionImpl getCastWrappedObject() {
        return (data.classes.__impl.ClassTypeDefinitionImpl) getWrappedObject();
    }
    
    private data.classes.__impl.ClassTypeDefinitionImpl getCastWrappedObject(com.sap.tc.moin.repository.core.CorePartitionable resolved) {
        return (data.classes.__impl.ClassTypeDefinitionImpl) resolved;
    }
    
    public data.classes.__impl.ClassTypeDefinitionImpl unwrap() {
        return (data.classes.__impl.ClassTypeDefinitionImpl) getWrappedObject();
    }
        
    // methods for attributes
    public int getLowerMultiplicity() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        com.sap.tc.moin.repository.core.CorePartitionable resolved = mriReference.getIfResolved();
        if (resolved != null) {
            return getCastWrappedObject(resolved).getLowerMultiplicity();
        }
            try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().getLowerMultiplicity();
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().getLowerMultiplicity(); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public void setLowerMultiplicity(int newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setLowerMultiplicity(connection, newValue);
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setLowerMultiplicity(connection, newValue);
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public int getUpperMultiplicity() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        com.sap.tc.moin.repository.core.CorePartitionable resolved = mriReference.getIfResolved();
        if (resolved != null) {
            return getCastWrappedObject(resolved).getUpperMultiplicity();
        }
            try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().getUpperMultiplicity();
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().getUpperMultiplicity(); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public void setUpperMultiplicity(int newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setUpperMultiplicity(connection, newValue);
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setUpperMultiplicity(connection, newValue);
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public boolean isOrdered() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        com.sap.tc.moin.repository.core.CorePartitionable resolved = mriReference.getIfResolved();
        if (resolved != null) {
            return getCastWrappedObject(resolved).isOrdered();
        }
            try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().isOrdered();
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().isOrdered(); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public void setOrdered(boolean newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setOrdered(connection, newValue);
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setOrdered(connection, newValue);
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public boolean isUnique() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        com.sap.tc.moin.repository.core.CorePartitionable resolved = mriReference.getIfResolved();
        if (resolved != null) {
            return getCastWrappedObject(resolved).isUnique();
        }
            try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().isUnique();
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().isUnique(); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public void setUnique(boolean newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setUnique(connection, newValue);
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setUnique(connection, newValue);
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

     
    // methods for references
    public java.util.Collection<data.classes.Signature> getSignaturesWithOutput() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection<data.classes.Signature>) wrapResult(getCastWrappedObject().getSignaturesWithOutput(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection<data.classes.Signature>) wrapResult(getCastWrappedObject().getSignaturesWithOutput(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public data.classes.TypedElement getOwnerTypedElement() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (data.classes.TypedElement) wrapResult(getCastWrappedObject().getOwnerTypedElement(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (data.classes.TypedElement) wrapResult(getCastWrappedObject().getOwnerTypedElement(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setOwnerTypedElement(data.classes.TypedElement newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setOwnerTypedElement(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setOwnerTypedElement(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public data.classes.Signature getOwnerSignature() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (data.classes.Signature) wrapResult(getCastWrappedObject().getOwnerSignature(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (data.classes.Signature) wrapResult(getCastWrappedObject().getOwnerSignature(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setOwnerSignature(data.classes.Signature newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setOwnerSignature(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setOwnerSignature(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public data.classes.SapClass getClazz() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (data.classes.SapClass) wrapResult(getCastWrappedObject().getClazz(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (data.classes.SapClass) wrapResult(getCastWrappedObject().getClazz(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setClazz(data.classes.SapClass newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setClazz(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setClazz(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public data.classes.AssociationEnd getAssociationEnd() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (data.classes.AssociationEnd) wrapResult(getCastWrappedObject().getAssociationEnd(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (data.classes.AssociationEnd) wrapResult(getCastWrappedObject().getAssociationEnd(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setAssociationEnd(data.classes.AssociationEnd newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setAssociationEnd(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setAssociationEnd(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public java.util.List<data.classes.ActualObjectParameter> getObjectParameters() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.List<data.classes.ActualObjectParameter>) wrapResult(getCastWrappedObject().getObjectParameters(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.List<data.classes.ActualObjectParameter>) wrapResult(getCastWrappedObject().getObjectParameters(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public java.util.List<data.classes.ActualObjectParameter> getOwnedObjectParameters() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.List<data.classes.ActualObjectParameter>) wrapResult(getCastWrappedObject().getOwnedObjectParameters(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.List<data.classes.ActualObjectParameter>) wrapResult(getCastWrappedObject().getOwnedObjectParameters(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



   
    // methods for modeled operations
    public boolean isMany() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.lang.Boolean)___invokeOperation(connection, 0, "E0234C8C51E6C0DF3E4B11DE91020018DE1146FF", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public boolean conformsTo(data.classes.TypeDefinition typeDef) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(1);
        try {
            parameterList.add(typeDef);
            return (java.lang.Boolean)___invokeOperation(connection, 1, "E0234C8C51E6C0FF3E4B11DEBAAB0018DE1146FF", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public boolean conformsToExcluding(data.classes.TypeDefinition td, java.util.List<? extends data.classes.SapClass> excludingConforming, java.util.List<? extends data.classes.SapClass> excludingTo) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(3);
        try {
            parameterList.add(td);
            parameterList.add(excludingConforming);
            parameterList.add(excludingTo);
            return (java.lang.Boolean)___invokeOperation(connection, 2, "E0234C8C51E6C1043E4B11DE9B460018DE1146FF", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public boolean multiplicityConformsTo(data.classes.TypeDefinition td) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(1);
        try {
            parameterList.add(td);
            return (java.lang.Boolean)___invokeOperation(connection, 3, "E0234C8C51E6C1073E4B11DEAEE30018DE1146FF", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public boolean conformsToIgnoringMultiplicityExcluding(data.classes.TypeDefinition td, java.util.List<? extends data.classes.SapClass> excludingConforming, java.util.List<? extends data.classes.SapClass> excludingTo) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(3);
        try {
            parameterList.add(td);
            parameterList.add(excludingConforming);
            parameterList.add(excludingTo);
            return (java.lang.Boolean)___invokeOperation(connection, 4, "E0234C8C51E6C10C3E4B11DE92D60018DE1146FF", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public boolean conformsToIgnoringMultiplicity(data.classes.TypeDefinition typeDef) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(1);
        try {
            parameterList.add(typeDef);
            return (java.lang.Boolean)___invokeOperation(connection, 5, "E0234C8C51E931C13E4B11DEB8750018DE1146FF", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public java.util.Collection<data.classes.TypedElement> getTypeUsage() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.util.Collection<data.classes.TypedElement>)___invokeOperation(connection, 6, "E0234C8C51E931C33E4B11DEC0BB0018DE1146FF", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public data.classes.TypeDefinition getInnermost() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (data.classes.TypeDefinition)___invokeOperation(connection, 7, "E0234C8C6F041731BAF011DE8CE10019D29902CC", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public int getNestingLevel() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.lang.Integer)___invokeOperation(connection, 8, "E0234C8CB5A671F0BE5711DEC399001A6BCDC3B3", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public boolean objectParametersConformTo(data.classes.ClassTypeDefinition ctd) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(1);
        try {
            parameterList.add(ctd);
            return (java.lang.Boolean)___invokeOperation(connection, 9, "E0234C8C51E6C0F43E4B11DEA7B20018DE1146FF", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public java.util.List<dataaccess.expressions.Expression> effectiveObjectParameters() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.util.List<dataaccess.expressions.Expression>)___invokeOperation(connection, 10, "E0234C8C51E6C0F63E4B11DEAA5D0018DE1146FF", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    
    // methods for internal modeled operations
    private boolean invoke__isMany(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            return ((java.lang.Boolean)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "isMany", getCastWrappedObject( ), operationParameters))).booleanValue();
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }
    private boolean invoke__conformsTo(com.sap.tc.moin.repository.core.CoreConnection connection, data.classes.TypeDefinition typeDef) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            operationParameters.put("typeDef", unwrapArg(typeDef));
            return ((java.lang.Boolean)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "conformsTo", getCastWrappedObject( ), operationParameters))).booleanValue();
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }
    private boolean invoke__conformsToExcluding(com.sap.tc.moin.repository.core.CoreConnection connection, data.classes.TypeDefinition td, java.util.List<? extends data.classes.SapClass> excludingConforming, java.util.List<? extends data.classes.SapClass> excludingTo) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            operationParameters.put("td", unwrapArg(td));
            operationParameters.put("excludingConforming", unwrapArg(excludingConforming));
            operationParameters.put("excludingTo", unwrapArg(excludingTo));
            return ((java.lang.Boolean)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "conformsToExcluding", getCastWrappedObject( ), operationParameters))).booleanValue();
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }
    private boolean invoke__multiplicityConformsTo(com.sap.tc.moin.repository.core.CoreConnection connection, data.classes.TypeDefinition td) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            operationParameters.put("td", unwrapArg(td));
            return ((java.lang.Boolean)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "multiplicityConformsTo", getCastWrappedObject( ), operationParameters))).booleanValue();
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }
    private boolean invoke__conformsToIgnoringMultiplicityExcluding(com.sap.tc.moin.repository.core.CoreConnection connection, data.classes.TypeDefinition td, java.util.List<? extends data.classes.SapClass> excludingConforming, java.util.List<? extends data.classes.SapClass> excludingTo) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            operationParameters.put("td", unwrapArg(td));
            operationParameters.put("excludingConforming", unwrapArg(excludingConforming));
            operationParameters.put("excludingTo", unwrapArg(excludingTo));
            return ((java.lang.Boolean)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "conformsToIgnoringMultiplicityExcluding", getCastWrappedObject( ), operationParameters))).booleanValue();
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }
    private boolean invoke__conformsToIgnoringMultiplicity(com.sap.tc.moin.repository.core.CoreConnection connection, data.classes.TypeDefinition typeDef) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            operationParameters.put("typeDef", unwrapArg(typeDef));
            return ((java.lang.Boolean)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "conformsToIgnoringMultiplicity", getCastWrappedObject( ), operationParameters))).booleanValue();
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }
    private java.util.Collection<data.classes.TypedElement> invoke__getTypeUsage(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            return (java.util.Collection)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "getTypeUsage", getCastWrappedObject( ), operationParameters));
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }
    private data.classes.TypeDefinition invoke__getInnermost(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            return (data.classes.TypeDefinition)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "getInnermost", getCastWrappedObject( ), operationParameters));
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }
    private int invoke__getNestingLevel(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            return ((java.lang.Integer)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "getNestingLevel", getCastWrappedObject( ), operationParameters))).intValue();
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }
    private boolean invoke__objectParametersConformTo(com.sap.tc.moin.repository.core.CoreConnection connection, data.classes.ClassTypeDefinition ctd) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            operationParameters.put("ctd", unwrapArg(ctd));
            return ((java.lang.Boolean)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "objectParametersConformTo", getCastWrappedObject( ), operationParameters))).booleanValue();
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }
    private java.util.List<dataaccess.expressions.Expression> invoke__effectiveObjectParameters(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            return (java.util.List)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "effectiveObjectParameters", getCastWrappedObject( ), operationParameters));
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }

    // reflective methods
    @Override
    public Object refInvokeOperation(com.sap.tc.moin.repository.core.CoreConnection connection, java.lang.String requestedOperation, java.util.List<? extends Object> args) throws com.sap.tc.moin.repository.mmi.reflect.RefException {
        if (requestedOperation == null) {
            throw new com.sap.tc.moin.repository.mmi.reflect.InvalidNameException(requestedOperation);
        }
        java.lang.Integer operationId = OPERATION_IDS.get(requestedOperation);
        if (operationId == null) {
            throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException(requestedOperation, refMetaObject(), "refInvokeOperation(String)"); //$NON-NLS-1$
        }
        switch (operationId) {
                
            case 0:
                return ___invokeOperation( connection, operationId, "E0234C8C51E6C0DF3E4B11DE91020018DE1146FF", args ); //$NON-NLS-1$    
                
            case 1:
                return ___invokeOperation( connection, operationId, "E0234C8C51E6C0FF3E4B11DEBAAB0018DE1146FF", args ); //$NON-NLS-1$    
                
            case 2:
                return ___invokeOperation( connection, operationId, "E0234C8C51E6C1043E4B11DE9B460018DE1146FF", args ); //$NON-NLS-1$    
                
            case 3:
                return ___invokeOperation( connection, operationId, "E0234C8C51E6C1073E4B11DEAEE30018DE1146FF", args ); //$NON-NLS-1$    
                
            case 4:
                return ___invokeOperation( connection, operationId, "E0234C8C51E6C10C3E4B11DE92D60018DE1146FF", args ); //$NON-NLS-1$    
                
            case 5:
                return ___invokeOperation( connection, operationId, "E0234C8C51E931C13E4B11DEB8750018DE1146FF", args ); //$NON-NLS-1$    
                
            case 6:
                return ___invokeOperation( connection, operationId, "E0234C8C51E931C33E4B11DEC0BB0018DE1146FF", args ); //$NON-NLS-1$    
                
            case 7:
                return ___invokeOperation( connection, operationId, "E0234C8C6F041731BAF011DE8CE10019D29902CC", args ); //$NON-NLS-1$    
                
            case 8:
                return ___invokeOperation( connection, operationId, "E0234C8CB5A671F0BE5711DEC399001A6BCDC3B3", args ); //$NON-NLS-1$    
                
            case 9:
                return ___invokeOperation( connection, operationId, "E0234C8C51E6C0F43E4B11DEA7B20018DE1146FF", args ); //$NON-NLS-1$    
                
            case 10:
                return ___invokeOperation( connection, operationId, "E0234C8C51E6C0F63E4B11DEAA5D0018DE1146FF", args ); //$NON-NLS-1$    
            default:
                throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException(requestedOperation, refMetaObject(), "refInvokeOperation(String)"); //$NON-NLS-1$
        }
    }
    
    @Override
    public Object invoke___Operation(com.sap.tc.moin.repository.core.CoreConnection connection, int operationId, java.util.List<? extends Object> args) throws com.sap.tc.moin.repository.mmi.reflect.RefException {
        switch (operationId) {
                
            case 0:
                return invoke__isMany(connection);    
                
            case 1:
                return invoke__conformsTo(connection, (data.classes.TypeDefinition) args.get(0));    
                
            case 2:
                return invoke__conformsToExcluding(connection, (data.classes.TypeDefinition) args.get(0), (java.util.List) args.get(1), (java.util.List) args.get(2));    
                
            case 3:
                return invoke__multiplicityConformsTo(connection, (data.classes.TypeDefinition) args.get(0));    
                
            case 4:
                return invoke__conformsToIgnoringMultiplicityExcluding(connection, (data.classes.TypeDefinition) args.get(0), (java.util.List) args.get(1), (java.util.List) args.get(2));    
                
            case 5:
                return invoke__conformsToIgnoringMultiplicity(connection, (data.classes.TypeDefinition) args.get(0));    
                
            case 6:
                return invoke__getTypeUsage(connection);    
                
            case 7:
                return invoke__getInnermost(connection);    
                
            case 8:
                return invoke__getNestingLevel(connection);    
                
            case 9:
                return invoke__objectParametersConformTo(connection, (data.classes.ClassTypeDefinition) args.get(0));    
                
            case 10:
                return invoke__effectiveObjectParameters(connection);    
            default:
                throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException( operationId, refMetaObject( ), "invoke___Operation(int)"); //$NON-NLS-1$
        }
    
    }    

    // get the JMI interface
    public java.lang.Class<data.classes.ClassTypeDefinition> get___JmiInterface() {
        return data.classes.ClassTypeDefinition.class;
    }

    // to String
    protected String metaObjectToString() {
        return "data.classes.ClassTypeDefinition (Java Type)\ndata.classes.ClassTypeDefinition (MOF Type)"; //$NON-NLS-1$
    }    
}