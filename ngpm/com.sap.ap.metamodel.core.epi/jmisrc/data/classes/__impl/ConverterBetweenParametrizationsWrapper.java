/**
 * Generated by the MOIN Generator Version 3.0
 **/

package data.classes.__impl;

public class ConverterBetweenParametrizationsWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefObjectWrapperImpl<data.classes.__impl.ConverterBetweenParametrizationsImpl> implements data.classes.ConverterBetweenParametrizations,com.sap.tc.moin.repository.Partitionable {

    
    static {
    }

    public ConverterBetweenParametrizationsWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, data.classes.__impl.ConverterBetweenParametrizationsImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    private data.classes.__impl.ConverterBetweenParametrizationsImpl getCastWrappedObject() {
        return (data.classes.__impl.ConverterBetweenParametrizationsImpl) getWrappedObject();
    }
    
    public data.classes.__impl.ConverterBetweenParametrizationsImpl unwrap() {
        return (data.classes.__impl.ConverterBetweenParametrizationsImpl) getWrappedObject();
    }
        
    // methods for attributes
     
    // methods for references
    public data.classes.SapClass getClazz() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (data.classes.SapClass) wrapResult(getCastWrappedObject().getClazz(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (data.classes.SapClass) wrapResult(getCastWrappedObject().getClazz(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setClazz(data.classes.SapClass newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setClazz(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setClazz(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public data.classes.MethodSignature getConversionMethod() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (data.classes.MethodSignature) wrapResult(getCastWrappedObject().getConversionMethod(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (data.classes.MethodSignature) wrapResult(getCastWrappedObject().getConversionMethod(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setConversionMethod(data.classes.MethodSignature newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setConversionMethod(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setConversionMethod(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

   
    // methods for modeled operations
    
    // methods for internal modeled operations

    // reflective methods
    

    // get the JMI interface
    public java.lang.Class<data.classes.ConverterBetweenParametrizations> get___JmiInterface() {
        return data.classes.ConverterBetweenParametrizations.class;
    }

    // to String
    protected String metaObjectToString() {
        return "data.classes.ConverterBetweenParametrizations (Java Type)\ndata.classes.ConverterBetweenParametrizations (MOF Type)"; //$NON-NLS-1$
    }    
}