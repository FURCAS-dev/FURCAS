/**
 * Generated by the MOIN Generator Version 3.0
 **/

package data.classes.__impl;

public class SapClassWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefObjectWrapperImpl<data.classes.__impl.SapClassImpl> implements data.classes.SapClass,com.sap.tc.moin.repository.Partitionable {

        
    private static final java.util.Map<java.lang.String, java.lang.Integer> OPERATION_IDS;

    static {
        
        OPERATION_IDS = new java.util.HashMap<java.lang.String, java.lang.Integer>();
        OPERATION_IDS.put("isAbstract", Integer.valueOf(0)); //$NON-NLS-1$
        OPERATION_IDS.put("isParameterizedClassDefinition", Integer.valueOf(1)); //$NON-NLS-1$
        OPERATION_IDS.put("conformsTo", Integer.valueOf(2)); //$NON-NLS-1$
        OPERATION_IDS.put("allSignatures", Integer.valueOf(3)); //$NON-NLS-1$
        OPERATION_IDS.put("delegatesTo", Integer.valueOf(4)); //$NON-NLS-1$
        OPERATION_IDS.put("conformsToExcluding", Integer.valueOf(5)); //$NON-NLS-1$
        OPERATION_IDS.put("signaturesWithDelegation", Integer.valueOf(6)); //$NON-NLS-1$
        OPERATION_IDS.put("delegatedSignatures", Integer.valueOf(7)); //$NON-NLS-1$
        OPERATION_IDS.put("adaptedSignatures", Integer.valueOf(8)); //$NON-NLS-1$
        OPERATION_IDS.put("adaptedSignaturesExcluding", Integer.valueOf(9)); //$NON-NLS-1$
        OPERATION_IDS.put("allSignaturesExcluding", Integer.valueOf(10)); //$NON-NLS-1$
        OPERATION_IDS.put("signaturesWithDelegationExcluding", Integer.valueOf(11)); //$NON-NLS-1$
        OPERATION_IDS.put("delegatedSignaturesExcluding", Integer.valueOf(12)); //$NON-NLS-1$
        OPERATION_IDS.put("getConformingClasses", Integer.valueOf(13)); //$NON-NLS-1$
        OPERATION_IDS.put("getAssociationEnds", Integer.valueOf(14)); //$NON-NLS-1$
        OPERATION_IDS.put("getEqualityRelevantAssociationEnds", Integer.valueOf(15)); //$NON-NLS-1$
        OPERATION_IDS.put("getConformsToClasses", Integer.valueOf(16)); //$NON-NLS-1$
        OPERATION_IDS.put("getConformsToAssociationEnds", Integer.valueOf(17)); //$NON-NLS-1$
        OPERATION_IDS.put("getConformsToCompositeParentAssociationEnds", Integer.valueOf(18)); //$NON-NLS-1$
        OPERATION_IDS.put("getConformsToCompositeChildAssociationEnds", Integer.valueOf(19)); //$NON-NLS-1$
    }

    public SapClassWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, data.classes.__impl.SapClassImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    @SuppressWarnings("unused")
    private data.classes.__impl.SapClassImpl getCastWrappedObject() {
        return (data.classes.__impl.SapClassImpl) getWrappedObject();
    }
    
    private data.classes.__impl.SapClassImpl getCastWrappedObject(com.sap.tc.moin.repository.core.CorePartitionable resolved) {
        return (data.classes.__impl.SapClassImpl) resolved;
    }
    
    public data.classes.__impl.SapClassImpl unwrap() {
        return (data.classes.__impl.SapClassImpl) getWrappedObject();
    }
        
    // methods for attributes
    public java.lang.String getName() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        com.sap.tc.moin.repository.core.CorePartitionable resolved = mriReference.getIfResolved();
        if (resolved != null) {
            return getCastWrappedObject(resolved).getName();
        }
            try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().getName();
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().getName(); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public void setName(java.lang.String newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setName(connection, newValue);
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setName(connection, newValue);
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public localization.TranslatableText getDescription() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (localization.TranslatableText) wrapResult(getCastWrappedObject().getDescription(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (localization.TranslatableText) wrapResult(getCastWrappedObject().getDescription(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setDescription(localization.TranslatableText newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setDescription(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setDescription(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public boolean isValueType() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        com.sap.tc.moin.repository.core.CorePartitionable resolved = mriReference.getIfResolved();
        if (resolved != null) {
            return getCastWrappedObject(resolved).isValueType();
        }
            try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().isValueType();
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().isValueType(); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public void setValueType(boolean newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setValueType(connection, newValue);
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setValueType(connection, newValue);
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

     
    // methods for references
    public java.util.Collection<behavioral.events.Subscription> getSubscriptions() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection<behavioral.events.Subscription>) wrapResult(getCastWrappedObject().getSubscriptions(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection<behavioral.events.Subscription>) wrapResult(getCastWrappedObject().getSubscriptions(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public java.util.Collection<data.classes.MethodSignature> getNotificationSignatures() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection<data.classes.MethodSignature>) wrapResult(getCastWrappedObject().getNotificationSignatures(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection<data.classes.MethodSignature>) wrapResult(getCastWrappedObject().getNotificationSignatures(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public java.util.Collection<data.classes.MethodSignature> getOwnedSignatures() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection<data.classes.MethodSignature>) wrapResult(getCastWrappedObject().getOwnedSignatures(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection<data.classes.MethodSignature>) wrapResult(getCastWrappedObject().getOwnedSignatures(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public java.util.Collection<data.classes.Signature> getSignaturesWithFault() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection<data.classes.Signature>) wrapResult(getCastWrappedObject().getSignaturesWithFault(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection<data.classes.Signature>) wrapResult(getCastWrappedObject().getSignaturesWithFault(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public java.util.Collection<data.classes.ClassTypeDefinition> getElementsOfType() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection<data.classes.ClassTypeDefinition>) wrapResult(getCastWrappedObject().getElementsOfType(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection<data.classes.ClassTypeDefinition>) wrapResult(getCastWrappedObject().getElementsOfType(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public modelmanagement.Package getPackage() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (modelmanagement.Package) wrapResult(getCastWrappedObject().getPackage(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (modelmanagement.Package) wrapResult(getCastWrappedObject().getPackage(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setPackage(modelmanagement.Package newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setPackage(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setPackage(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public java.util.Collection<data.classes.TypeAdapter> getAdaptedBy() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection<data.classes.TypeAdapter>) wrapResult(getCastWrappedObject().getAdaptedBy(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection<data.classes.TypeAdapter>) wrapResult(getCastWrappedObject().getAdaptedBy(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public java.util.Collection<data.classes.TypeAdapter> getAdapters() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection<data.classes.TypeAdapter>) wrapResult(getCastWrappedObject().getAdapters(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection<data.classes.TypeAdapter>) wrapResult(getCastWrappedObject().getAdapters(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public java.util.List<data.classes.Parameter> getFormalObjectParameters() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.List<data.classes.Parameter>) wrapResult(getCastWrappedObject().getFormalObjectParameters(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.List<data.classes.Parameter>) wrapResult(getCastWrappedObject().getFormalObjectParameters(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public data.classes.ConverterBetweenParametrizations getConverterBetweenParametrizations() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (data.classes.ConverterBetweenParametrizations) wrapResult(getCastWrappedObject().getConverterBetweenParametrizations(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (data.classes.ConverterBetweenParametrizations) wrapResult(getCastWrappedObject().getConverterBetweenParametrizations(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setConverterBetweenParametrizations(data.classes.ConverterBetweenParametrizations newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setConverterBetweenParametrizations(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setConverterBetweenParametrizations(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

   
    // methods for modeled operations
    public boolean isAbstract() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.lang.Boolean)___invokeOperation(connection, 0, "E0234C8C51E476DF3E4B11DE8F6A0018DE1146FF", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public boolean isParameterizedClassDefinition() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.lang.Boolean)___invokeOperation(connection, 1, "E0234C8C51E476E13E4B11DE922C0018DE1146FF", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public boolean conformsTo(data.classes.SapClass type) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(1);
        try {
            parameterList.add(type);
            return (java.lang.Boolean)___invokeOperation(connection, 2, "E0234C8C51E476E43E4B11DEB1500018DE1146FF", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public java.util.Collection<data.classes.MethodSignature> allSignatures() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.util.Collection<data.classes.MethodSignature>)___invokeOperation(connection, 3, "E0234C8C51E476E63E4B11DEC61F0018DE1146FF", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public java.util.Collection<data.classes.SapClass> delegatesTo() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.util.Collection<data.classes.SapClass>)___invokeOperation(connection, 4, "E0234C8C51E476E83E4B11DEA4CA0018DE1146FF", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public boolean conformsToExcluding(data.classes.SapClass type, java.util.List<? extends data.classes.SapClass> excludingConforming, java.util.List<? extends data.classes.SapClass> excludingTo) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(3);
        try {
            parameterList.add(type);
            parameterList.add(excludingConforming);
            parameterList.add(excludingTo);
            return (java.lang.Boolean)___invokeOperation(connection, 5, "E0234C8C51E476ED3E4B11DEC5130018DE1146FF", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public java.util.Collection<data.classes.MethodSignature> signaturesWithDelegation() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.util.Collection<data.classes.MethodSignature>)___invokeOperation(connection, 6, "E0234C8C51E476EF3E4B11DEAE650018DE1146FF", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public java.util.Collection<data.classes.MethodSignature> delegatedSignatures() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.util.Collection<data.classes.MethodSignature>)___invokeOperation(connection, 7, "E0234C8C51E476F13E4B11DEB5620018DE1146FF", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public java.util.Collection<data.classes.MethodSignature> adaptedSignatures() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.util.Collection<data.classes.MethodSignature>)___invokeOperation(connection, 8, "E0234C8C51E476F33E4B11DEAB8D0018DE1146FF", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public java.util.Collection<data.classes.MethodSignature> adaptedSignaturesExcluding(java.util.Collection<? extends data.classes.SapClass> excluding) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(1);
        try {
            parameterList.add(excluding);
            return (java.util.Collection<data.classes.MethodSignature>)___invokeOperation(connection, 9, "E0234C8C51E476F63E4B11DECBE50018DE1146FF", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public java.util.Collection<data.classes.MethodSignature> allSignaturesExcluding(java.util.Collection<? extends data.classes.SapClass> excluding) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(1);
        try {
            parameterList.add(excluding);
            return (java.util.Collection<data.classes.MethodSignature>)___invokeOperation(connection, 10, "E0234C8C51E476F93E4B11DEBFAC0018DE1146FF", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public java.util.Collection<data.classes.MethodSignature> signaturesWithDelegationExcluding(java.util.Collection<? extends data.classes.SapClass> excluding) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(1);
        try {
            parameterList.add(excluding);
            return (java.util.Collection<data.classes.MethodSignature>)___invokeOperation(connection, 11, "E0234C8C51E476FC3E4B11DE93840018DE1146FF", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public java.util.Collection<data.classes.MethodSignature> delegatedSignaturesExcluding(java.util.Collection<? extends data.classes.SapClass> excluding) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(1);
        try {
            parameterList.add(excluding);
            return (java.util.Collection<data.classes.MethodSignature>)___invokeOperation(connection, 12, "E0234C8C51E476FF3E4B11DEC94F0018DE1146FF", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public java.util.Collection<data.classes.SapClass> getConformingClasses() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.util.Collection<data.classes.SapClass>)___invokeOperation(connection, 13, "E0234C8C51E477013E4B11DEACF40018DE1146FF", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public java.util.Collection<data.classes.AssociationEnd> getAssociationEnds() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.util.Collection<data.classes.AssociationEnd>)___invokeOperation(connection, 14, "E0234C8C51E477033E4B11DE899F0018DE1146FF", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public java.util.Collection<data.classes.AssociationEnd> getEqualityRelevantAssociationEnds() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.util.Collection<data.classes.AssociationEnd>)___invokeOperation(connection, 15, "E0234C8C51E477053E4B11DEA3580018DE1146FF", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public java.util.Collection<data.classes.SapClass> getConformsToClasses() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.util.Collection<data.classes.SapClass>)___invokeOperation(connection, 16, "E0234C8C51E477073E4B11DECF430018DE1146FF", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public java.util.Collection<data.classes.AssociationEnd> getConformsToAssociationEnds() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.util.Collection<data.classes.AssociationEnd>)___invokeOperation(connection, 17, "E0234C8C51E477093E4B11DECF280018DE1146FF", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public java.util.Collection<data.classes.AssociationEnd> getConformsToCompositeParentAssociationEnds() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.util.Collection<data.classes.AssociationEnd>)___invokeOperation(connection, 18, "E0234C8C51E4770B3E4B11DE81710018DE1146FF", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public java.util.Collection<data.classes.AssociationEnd> getConformsToCompositeChildAssociationEnds() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.util.Collection<data.classes.AssociationEnd>)___invokeOperation(connection, 19, "E0234C8C51E4770D3E4B11DEAA2A0018DE1146FF", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    
    // methods for internal modeled operations
    private boolean invoke__isAbstract(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            return ((java.lang.Boolean)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "isAbstract", getCastWrappedObject( ), operationParameters))).booleanValue();
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }
    private boolean invoke__isParameterizedClassDefinition(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            return ((java.lang.Boolean)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "isParameterizedClassDefinition", getCastWrappedObject( ), operationParameters))).booleanValue();
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }
    private boolean invoke__conformsTo(com.sap.tc.moin.repository.core.CoreConnection connection, data.classes.SapClass type) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            operationParameters.put("type", unwrapArg(type));
            return ((java.lang.Boolean)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "conformsTo", getCastWrappedObject( ), operationParameters))).booleanValue();
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }
    private java.util.Collection<data.classes.MethodSignature> invoke__allSignatures(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            return (java.util.Collection)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "allSignatures", getCastWrappedObject( ), operationParameters));
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }
    private java.util.Collection<data.classes.SapClass> invoke__delegatesTo(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            return (java.util.Collection)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "delegatesTo", getCastWrappedObject( ), operationParameters));
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }
    private boolean invoke__conformsToExcluding(com.sap.tc.moin.repository.core.CoreConnection connection, data.classes.SapClass type, java.util.List<? extends data.classes.SapClass> excludingConforming, java.util.List<? extends data.classes.SapClass> excludingTo) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            operationParameters.put("type", unwrapArg(type));
            operationParameters.put("excludingConforming", unwrapArg(excludingConforming));
            operationParameters.put("excludingTo", unwrapArg(excludingTo));
            return ((java.lang.Boolean)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "conformsToExcluding", getCastWrappedObject( ), operationParameters))).booleanValue();
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }
    private java.util.Collection<data.classes.MethodSignature> invoke__signaturesWithDelegation(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            return (java.util.Collection)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "signaturesWithDelegation", getCastWrappedObject( ), operationParameters));
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }
    private java.util.Collection<data.classes.MethodSignature> invoke__delegatedSignatures(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            return (java.util.Collection)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "delegatedSignatures", getCastWrappedObject( ), operationParameters));
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }
    private java.util.Collection<data.classes.MethodSignature> invoke__adaptedSignatures(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            return (java.util.Collection)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "adaptedSignatures", getCastWrappedObject( ), operationParameters));
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }
    private java.util.Collection<data.classes.MethodSignature> invoke__adaptedSignaturesExcluding(com.sap.tc.moin.repository.core.CoreConnection connection, java.util.Collection<? extends data.classes.SapClass> excluding) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            operationParameters.put("excluding", unwrapArg(excluding));
            return (java.util.Collection)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "adaptedSignaturesExcluding", getCastWrappedObject( ), operationParameters));
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }
    private java.util.Collection<data.classes.MethodSignature> invoke__allSignaturesExcluding(com.sap.tc.moin.repository.core.CoreConnection connection, java.util.Collection<? extends data.classes.SapClass> excluding) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            operationParameters.put("excluding", unwrapArg(excluding));
            return (java.util.Collection)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "allSignaturesExcluding", getCastWrappedObject( ), operationParameters));
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }
    private java.util.Collection<data.classes.MethodSignature> invoke__signaturesWithDelegationExcluding(com.sap.tc.moin.repository.core.CoreConnection connection, java.util.Collection<? extends data.classes.SapClass> excluding) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            operationParameters.put("excluding", unwrapArg(excluding));
            return (java.util.Collection)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "signaturesWithDelegationExcluding", getCastWrappedObject( ), operationParameters));
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }
    private java.util.Collection<data.classes.MethodSignature> invoke__delegatedSignaturesExcluding(com.sap.tc.moin.repository.core.CoreConnection connection, java.util.Collection<? extends data.classes.SapClass> excluding) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            operationParameters.put("excluding", unwrapArg(excluding));
            return (java.util.Collection)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "delegatedSignaturesExcluding", getCastWrappedObject( ), operationParameters));
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }
    private java.util.Collection<data.classes.SapClass> invoke__getConformingClasses(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            return (java.util.Collection)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "getConformingClasses", getCastWrappedObject( ), operationParameters));
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }
    private java.util.Collection<data.classes.AssociationEnd> invoke__getAssociationEnds(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            return (java.util.Collection)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "getAssociationEnds", getCastWrappedObject( ), operationParameters));
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }
    private java.util.Collection<data.classes.AssociationEnd> invoke__getEqualityRelevantAssociationEnds(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            return (java.util.Collection)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "getEqualityRelevantAssociationEnds", getCastWrappedObject( ), operationParameters));
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }
    private java.util.Collection<data.classes.SapClass> invoke__getConformsToClasses(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            return (java.util.Collection)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "getConformsToClasses", getCastWrappedObject( ), operationParameters));
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }
    private java.util.Collection<data.classes.AssociationEnd> invoke__getConformsToAssociationEnds(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            return (java.util.Collection)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "getConformsToAssociationEnds", getCastWrappedObject( ), operationParameters));
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }
    private java.util.Collection<data.classes.AssociationEnd> invoke__getConformsToCompositeParentAssociationEnds(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            return (java.util.Collection)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "getConformsToCompositeParentAssociationEnds", getCastWrappedObject( ), operationParameters));
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }
    private java.util.Collection<data.classes.AssociationEnd> invoke__getConformsToCompositeChildAssociationEnds(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            return (java.util.Collection)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "getConformsToCompositeChildAssociationEnds", getCastWrappedObject( ), operationParameters));
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }

    // reflective methods
    @Override
    public Object refInvokeOperation(com.sap.tc.moin.repository.core.CoreConnection connection, java.lang.String requestedOperation, java.util.List<? extends Object> args) throws com.sap.tc.moin.repository.mmi.reflect.RefException {
        if (requestedOperation == null) {
            throw new com.sap.tc.moin.repository.mmi.reflect.InvalidNameException(requestedOperation);
        }
        java.lang.Integer operationId = OPERATION_IDS.get(requestedOperation);
        if (operationId == null) {
            throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException(requestedOperation, refMetaObject(), "refInvokeOperation(String)"); //$NON-NLS-1$
        }
        switch (operationId) {
                
            case 0:
                return ___invokeOperation( connection, operationId, "E0234C8C51E476DF3E4B11DE8F6A0018DE1146FF", args ); //$NON-NLS-1$    
                
            case 1:
                return ___invokeOperation( connection, operationId, "E0234C8C51E476E13E4B11DE922C0018DE1146FF", args ); //$NON-NLS-1$    
                
            case 2:
                return ___invokeOperation( connection, operationId, "E0234C8C51E476E43E4B11DEB1500018DE1146FF", args ); //$NON-NLS-1$    
                
            case 3:
                return ___invokeOperation( connection, operationId, "E0234C8C51E476E63E4B11DEC61F0018DE1146FF", args ); //$NON-NLS-1$    
                
            case 4:
                return ___invokeOperation( connection, operationId, "E0234C8C51E476E83E4B11DEA4CA0018DE1146FF", args ); //$NON-NLS-1$    
                
            case 5:
                return ___invokeOperation( connection, operationId, "E0234C8C51E476ED3E4B11DEC5130018DE1146FF", args ); //$NON-NLS-1$    
                
            case 6:
                return ___invokeOperation( connection, operationId, "E0234C8C51E476EF3E4B11DEAE650018DE1146FF", args ); //$NON-NLS-1$    
                
            case 7:
                return ___invokeOperation( connection, operationId, "E0234C8C51E476F13E4B11DEB5620018DE1146FF", args ); //$NON-NLS-1$    
                
            case 8:
                return ___invokeOperation( connection, operationId, "E0234C8C51E476F33E4B11DEAB8D0018DE1146FF", args ); //$NON-NLS-1$    
                
            case 9:
                return ___invokeOperation( connection, operationId, "E0234C8C51E476F63E4B11DECBE50018DE1146FF", args ); //$NON-NLS-1$    
                
            case 10:
                return ___invokeOperation( connection, operationId, "E0234C8C51E476F93E4B11DEBFAC0018DE1146FF", args ); //$NON-NLS-1$    
                
            case 11:
                return ___invokeOperation( connection, operationId, "E0234C8C51E476FC3E4B11DE93840018DE1146FF", args ); //$NON-NLS-1$    
                
            case 12:
                return ___invokeOperation( connection, operationId, "E0234C8C51E476FF3E4B11DEC94F0018DE1146FF", args ); //$NON-NLS-1$    
                
            case 13:
                return ___invokeOperation( connection, operationId, "E0234C8C51E477013E4B11DEACF40018DE1146FF", args ); //$NON-NLS-1$    
                
            case 14:
                return ___invokeOperation( connection, operationId, "E0234C8C51E477033E4B11DE899F0018DE1146FF", args ); //$NON-NLS-1$    
                
            case 15:
                return ___invokeOperation( connection, operationId, "E0234C8C51E477053E4B11DEA3580018DE1146FF", args ); //$NON-NLS-1$    
                
            case 16:
                return ___invokeOperation( connection, operationId, "E0234C8C51E477073E4B11DECF430018DE1146FF", args ); //$NON-NLS-1$    
                
            case 17:
                return ___invokeOperation( connection, operationId, "E0234C8C51E477093E4B11DECF280018DE1146FF", args ); //$NON-NLS-1$    
                
            case 18:
                return ___invokeOperation( connection, operationId, "E0234C8C51E4770B3E4B11DE81710018DE1146FF", args ); //$NON-NLS-1$    
                
            case 19:
                return ___invokeOperation( connection, operationId, "E0234C8C51E4770D3E4B11DEAA2A0018DE1146FF", args ); //$NON-NLS-1$    
            default:
                throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException(requestedOperation, refMetaObject(), "refInvokeOperation(String)"); //$NON-NLS-1$
        }
    }

    @Override
    public Object invoke___Operation(com.sap.tc.moin.repository.core.CoreConnection connection, int operationId, java.util.List<? extends Object> args) throws com.sap.tc.moin.repository.mmi.reflect.RefException {
        switch (operationId) {
                
            case 0:
                return invoke__isAbstract(connection);    
                
            case 1:
                return invoke__isParameterizedClassDefinition(connection);    
                
            case 2:
                return invoke__conformsTo(connection, (data.classes.SapClass) args.get(0));    
                
            case 3:
                return invoke__allSignatures(connection);    
                
            case 4:
                return invoke__delegatesTo(connection);    
                
            case 5:
                return invoke__conformsToExcluding(connection, (data.classes.SapClass) args.get(0), (java.util.List) args.get(1), (java.util.List) args.get(2));    
                
            case 6:
                return invoke__signaturesWithDelegation(connection);    
                
            case 7:
                return invoke__delegatedSignatures(connection);    
                
            case 8:
                return invoke__adaptedSignatures(connection);    
                
            case 9:
                return invoke__adaptedSignaturesExcluding(connection, (java.util.Collection) args.get(0));    
                
            case 10:
                return invoke__allSignaturesExcluding(connection, (java.util.Collection) args.get(0));    
                
            case 11:
                return invoke__signaturesWithDelegationExcluding(connection, (java.util.Collection) args.get(0));    
                
            case 12:
                return invoke__delegatedSignaturesExcluding(connection, (java.util.Collection) args.get(0));    
                
            case 13:
                return invoke__getConformingClasses(connection);    
                
            case 14:
                return invoke__getAssociationEnds(connection);    
                
            case 15:
                return invoke__getEqualityRelevantAssociationEnds(connection);    
                
            case 16:
                return invoke__getConformsToClasses(connection);    
                
            case 17:
                return invoke__getConformsToAssociationEnds(connection);    
                
            case 18:
                return invoke__getConformsToCompositeParentAssociationEnds(connection);    
                
            case 19:
                return invoke__getConformsToCompositeChildAssociationEnds(connection);    
            default:
                throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException( operationId, refMetaObject( ), "invoke___Operation(int)"); //$NON-NLS-1$
        }

    }    

    // get the JMI interface
    @SuppressWarnings("unchecked")
    public java.lang.Class<data.classes.SapClass> get___JmiInterface() {
        return data.classes.SapClass.class;
    }

    // to String
    protected String metaObjectToString() {
        return "data.classes.SapClass (Java Type)\ndata.classes.SapClass (MOF Type)"; //$NON-NLS-1$
    }    
}