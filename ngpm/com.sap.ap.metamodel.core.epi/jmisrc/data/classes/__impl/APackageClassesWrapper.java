/**
 * Generated by the MOIN Generator Version 3.0
 **/

package data.classes.__impl;

public class APackageClassesWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<data.classes.APackageClasses> implements data.classes.APackageClasses,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The APackageClasses wrapper
     */
    public APackageClassesWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, data.classes.__impl.APackageClassesImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private data.classes.__impl.APackageClassesImpl getCastWrappedObject() {
        return (data.classes.__impl.APackageClassesImpl) getWrappedObject();
    }

    public data.classes.APackageClasses unwrap() {
        return (data.classes.APackageClasses) getWrappedObject();
    }
    
    public boolean exists(modelmanagement.Package _Package, data.classes.SapClass _Classes) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Package), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Classes));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Package), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Classes)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public modelmanagement.Package getPackage(data.classes.SapClass _Classes) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (modelmanagement.Package) wrapResult(getCastWrappedObject().getPackage(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Classes)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (modelmanagement.Package) wrapResult(getCastWrappedObject().getPackage(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Classes))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getClasses(modelmanagement.Package _Package) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getClasses(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Package)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getClasses(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Package))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(modelmanagement.Package _Package, data.classes.SapClass _Classes) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Package), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Classes));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Package), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Classes)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(modelmanagement.Package _Package, data.classes.SapClass _Classes) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Package), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Classes));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Package), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Classes)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<data.classes.APackageClasses> get___JmiInterface() {
        return data.classes.APackageClasses.class;
    }

    protected String metaObjectToString() {
        return "data.classes.APackageClasses (Java Type)\ndata.classes.A_package__classes (MOF Type)"; //$NON-NLS-1$
    }    
}