/**
 * Generated by the MOIN Generator Version 3.0
 **/

package data.classes.__impl;

public class AConversionMethodConverterWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<data.classes.AConversionMethodConverter> implements data.classes.AConversionMethodConverter,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AConversionMethodConverter wrapper
     */
    public AConversionMethodConverterWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, data.classes.__impl.AConversionMethodConverterImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private data.classes.__impl.AConversionMethodConverterImpl getCastWrappedObject() {
        return (data.classes.__impl.AConversionMethodConverterImpl) getWrappedObject();
    }

    public data.classes.AConversionMethodConverter unwrap() {
        return (data.classes.AConversionMethodConverter) getWrappedObject();
    }
    
    public boolean exists(data.classes.MethodSignature _ConversionMethod, data.classes.ConverterBetweenParametrizations _Converter) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConversionMethod), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Converter));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConversionMethod), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Converter)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public data.classes.MethodSignature getConversionMethod(data.classes.ConverterBetweenParametrizations _Converter) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (data.classes.MethodSignature) wrapResult(getCastWrappedObject().getConversionMethod(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Converter)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (data.classes.MethodSignature) wrapResult(getCastWrappedObject().getConversionMethod(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Converter))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public data.classes.ConverterBetweenParametrizations getConverter(data.classes.MethodSignature _ConversionMethod) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (data.classes.ConverterBetweenParametrizations) wrapResult(getCastWrappedObject().getConverter(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConversionMethod)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (data.classes.ConverterBetweenParametrizations) wrapResult(getCastWrappedObject().getConverter(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConversionMethod))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(data.classes.MethodSignature _ConversionMethod, data.classes.ConverterBetweenParametrizations _Converter) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConversionMethod), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Converter));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConversionMethod), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Converter)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(data.classes.MethodSignature _ConversionMethod, data.classes.ConverterBetweenParametrizations _Converter) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConversionMethod), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Converter));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConversionMethod), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Converter)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<data.classes.AConversionMethodConverter> get___JmiInterface() {
        return data.classes.AConversionMethodConverter.class;
    }

    protected String metaObjectToString() {
        return "data.classes.AConversionMethodConverter (Java Type)\ndata.classes.A_conversionMethod_converter (MOF Type)"; //$NON-NLS-1$
    }    
}