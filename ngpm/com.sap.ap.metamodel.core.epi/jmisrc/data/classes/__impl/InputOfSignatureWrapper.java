/**
 * Generated by the MOIN Generator Version 3.0
 **/

package data.classes.__impl;

public class InputOfSignatureWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<data.classes.InputOfSignature> implements data.classes.InputOfSignature,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The InputOfSignature wrapper
     */
    public InputOfSignatureWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, data.classes.__impl.InputOfSignatureImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private data.classes.__impl.InputOfSignatureImpl getCastWrappedObject() {
        return (data.classes.__impl.InputOfSignatureImpl) getWrappedObject();
    }

    public data.classes.InputOfSignature unwrap() {
        return (data.classes.InputOfSignature) getWrappedObject();
    }
    
    public boolean exists(data.classes.Parameter _Input, data.classes.Signature _OwnerSignature) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Input), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _OwnerSignature));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Input), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _OwnerSignature)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.List getInput(data.classes.Signature _OwnerSignature) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.List) wrapResult(getCastWrappedObject().getInput(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _OwnerSignature)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.List) wrapResult(getCastWrappedObject().getInput(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _OwnerSignature))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public data.classes.Signature getOwnerSignature(data.classes.Parameter _Input) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (data.classes.Signature) wrapResult(getCastWrappedObject().getOwnerSignature(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Input)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (data.classes.Signature) wrapResult(getCastWrappedObject().getOwnerSignature(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Input))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(data.classes.Parameter _Input, data.classes.Signature _OwnerSignature) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Input), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _OwnerSignature));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Input), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _OwnerSignature)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(data.classes.Parameter _Input, data.classes.Signature _OwnerSignature) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Input), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _OwnerSignature));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Input), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _OwnerSignature)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<data.classes.InputOfSignature> get___JmiInterface() {
        return data.classes.InputOfSignature.class;
    }

    protected String metaObjectToString() {
        return "data.classes.InputOfSignature (Java Type)\ndata.classes.InputOfSignature (MOF Type)"; //$NON-NLS-1$
    }    
}