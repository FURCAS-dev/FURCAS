/**
 * Generated by the MOIN Generator Version 3.0
 **/

package data.classes.__impl;

public class PlatformSpecificImplementationWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefObjectWrapperImpl<data.classes.__impl.PlatformSpecificImplementationImpl> implements data.classes.PlatformSpecificImplementation,com.sap.tc.moin.repository.Partitionable {

    
    static {
    }

    public PlatformSpecificImplementationWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, data.classes.__impl.PlatformSpecificImplementationImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    private data.classes.__impl.PlatformSpecificImplementationImpl getCastWrappedObject() {
        return (data.classes.__impl.PlatformSpecificImplementationImpl) getWrappedObject();
    }
    
    private data.classes.__impl.PlatformSpecificImplementationImpl getCastWrappedObject(com.sap.tc.moin.repository.core.CorePartitionable resolved) {
        return (data.classes.__impl.PlatformSpecificImplementationImpl) resolved;
    }
    
    public data.classes.__impl.PlatformSpecificImplementationImpl unwrap() {
        return (data.classes.__impl.PlatformSpecificImplementationImpl) getWrappedObject();
    }
        
    // methods for attributes
    public java.lang.String getTargetPlatform() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        com.sap.tc.moin.repository.core.CorePartitionable resolved = mriReference.getIfResolved();
        if (resolved != null) {
            return getCastWrappedObject(resolved).getTargetPlatform();
        }
            try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().getTargetPlatform();
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().getTargetPlatform(); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public void setTargetPlatform(java.lang.String newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setTargetPlatform(connection, newValue);
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setTargetPlatform(connection, newValue);
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public java.lang.String getImplementation() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        com.sap.tc.moin.repository.core.CorePartitionable resolved = mriReference.getIfResolved();
        if (resolved != null) {
            return getCastWrappedObject(resolved).getImplementation();
        }
            try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().getImplementation();
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().getImplementation(); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public void setImplementation(java.lang.String newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setImplementation(connection, newValue);
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setImplementation(connection, newValue);
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

     
    // methods for references
   
    // methods for modeled operations
    
    // methods for internal modeled operations

    // reflective methods
    

    // get the JMI interface
    public java.lang.Class<data.classes.PlatformSpecificImplementation> get___JmiInterface() {
        return data.classes.PlatformSpecificImplementation.class;
    }

    // to String
    protected String metaObjectToString() {
        return "data.classes.PlatformSpecificImplementation (Java Type)\ndata.classes.PlatformSpecificImplementation (MOF Type)"; //$NON-NLS-1$
    }    
}