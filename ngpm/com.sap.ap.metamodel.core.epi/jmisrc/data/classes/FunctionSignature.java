/**
 * Generated by the MOIN Generator Version 3.0
 **/

package data.classes;

/**
 * signature definition for an anonymous function that has to be implemented by a block
 * This interface is not intended to be implemented by clients.
 */
public interface FunctionSignature extends data.classes.Signature {

    /**
     * Descriptors for all features of this MofClass and its supertypes.
     */
    public static final Descriptors DESCRIPTORS = new Descriptors( );

    // class extent descriptor
    /**
     * Extent descriptor
     */
    public final com.sap.tc.moin.repository.mmi.descriptors.ClassDescriptor<com.sap.tc.moin.repository.mmi.reflect.RefClass, data.classes.FunctionSignature> CLASS_DESCRIPTOR = new com.sap.tc.moin.repository.mmi.descriptors.ClassDescriptor<com.sap.tc.moin.repository.mmi.reflect.RefClass, data.classes.FunctionSignature>("E0234C8C51E931DC3E4B11DEAA070018DE1146FF", "sap.com/moin/mm/ap/core", "data", "classes", "FunctionSignature"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ 

    
    // references
    public data.classes.FunctionSignatureImplementation getImplementation() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public void setImplementation(data.classes.FunctionSignatureImplementation newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;

    // operations
    public boolean isAbstract() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;


    public static final class Descriptors {
        Descriptors( ) { 
        }
        /**
         * Returns the descriptor for the <code>sideEffectFree</code> attribute.
         * @return  the descriptor for the <code>sideEffectFree</code> attribute
         */
        public com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,data.classes.Signature,java.lang.Boolean> SIDE_EFFECT_FREE( ) {
            return data.classes.Signature.DESCRIPTORS.SIDE_EFFECT_FREE( );
        }
        /**
         * Returns the descriptor for the <code>faults</code> reference.
         * @return  the descriptor for the <code>faults</code> reference
         */
        public com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.Signature,data.classes.SapClass> FAULTS( ) {
            return data.classes.Signature.DESCRIPTORS.FAULTS( );
        }
        /**
         * Returns the descriptor for the <code>output</code> reference.
         * @return  the descriptor for the <code>output</code> reference
         */
        public com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.Signature,data.classes.TypeDefinition> OUTPUT( ) {
            return data.classes.Signature.DESCRIPTORS.OUTPUT( );
        }
        /**
         * Returns the descriptor for the <code>ownedTypeDefinitions</code> reference.
         * @return  the descriptor for the <code>ownedTypeDefinitions</code> reference
         */
        public com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.Signature,data.classes.TypeDefinition> OWNED_TYPE_DEFINITIONS( ) {
            return data.classes.Signature.DESCRIPTORS.OWNED_TYPE_DEFINITIONS( );
        }
        /**
         * Returns the descriptor for the <code>input</code> reference.
         * @return  the descriptor for the <code>input</code> reference
         */
        public com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.Signature,java.util.List<data.classes.Parameter>> INPUT( ) {
            return data.classes.Signature.DESCRIPTORS.INPUT( );
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.FunctionSignature,data.classes.FunctionSignatureImplementation> __implementation;
        /**
         * Returns the descriptor for the <code>implementation</code> reference.
         * @return  the descriptor for the <code>implementation</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.FunctionSignature,data.classes.FunctionSignatureImplementation> IMPLEMENTATION( ) {
            if ( __implementation == null ) {
                __implementation = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.FunctionSignature,data.classes.FunctionSignatureImplementation>( "E0234C8C51E931D93E4B11DECAA20018DE1146FF", "sap.com/moin/mm/ap/core", new java.lang.String[] { "data", "classes", "FunctionSignature", "implementation" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __implementation;
        }
        /**
         * Returns the descriptor for the <code>conformsTo</code> operation.
         * @return  the descriptor for the <code>conformsTo</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.Signature,java.lang.Boolean> CONFORMS_TO( ) {
            return data.classes.Signature.DESCRIPTORS.CONFORMS_TO( );
        }
        /**
         * Returns the descriptor for the <code>conformsToExcluding</code> operation.
         * @return  the descriptor for the <code>conformsToExcluding</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.Signature,java.lang.Boolean> CONFORMS_TO_EXCLUDING( ) {
            return data.classes.Signature.DESCRIPTORS.CONFORMS_TO_EXCLUDING( );
        }
        private com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.FunctionSignature,java.lang.Boolean> __isAbstract;
        /**
         * Returns the descriptor for the <code>isAbstract</code> operation.
         * @return  the descriptor for the <code>isAbstract</code> operation
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.FunctionSignature,java.lang.Boolean> IS_ABSTRACT( ) {
            if ( __isAbstract == null ) {
                __isAbstract = new com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.FunctionSignature,java.lang.Boolean>( "E0234C8C51E931DB3E4B11DEC86E0018DE1146FF", "sap.com/moin/mm/ap/core", new java.lang.String[] { "data", "classes", "FunctionSignature", "isAbstract" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __isAbstract;
        }
    }
}    