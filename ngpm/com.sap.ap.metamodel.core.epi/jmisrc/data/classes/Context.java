/**
 * Generated by the MOIN Generator Version 3.0
 **/

package data.classes;

/**
 * An instance of a class can occur in a number of contexts. Each context has a characteristic condition that an object has to fulfill in order to "be in that context."
 * <p>
 * A context can specify constraints, additional events that the object may raise, or preconditions for operations of the object's class.
 * <p>
 * (Currently, the metamodel only describes context-based constraints; events and preconditions may have to be added later.)
 * This interface is not intended to be implemented by clients.
 */
public interface Context extends modelmanagement.NamedElement {

    /**
     * Descriptors for all features of this MofClass and its supertypes.
     */
    public static final Descriptors DESCRIPTORS = new Descriptors( );

    // class extent descriptor
    /**
     * Extent descriptor
     */
    public final com.sap.tc.moin.repository.mmi.descriptors.ClassDescriptor<com.sap.tc.moin.repository.mmi.reflect.RefClass, data.classes.Context> CLASS_DESCRIPTOR = new com.sap.tc.moin.repository.mmi.descriptors.ClassDescriptor<com.sap.tc.moin.repository.mmi.reflect.RefClass, data.classes.Context>("E0234C8C51E6C0D83E4B11DEC0050018DE1146FF", "sap.com/moin/mm/ap/core", "data", "classes", "Context"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ 

    
    // references
    public data.classes.SapClass getFor() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public void setFor(data.classes.SapClass newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public java.util.Collection<data.constraints.Constraint> getConstraints() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public dataaccess.expressions.Expression getCondition() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public void setCondition(dataaccess.expressions.Expression newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;


    public static final class Descriptors {
        Descriptors( ) { 
        }
        /**
         * Returns the descriptor for the <code>name</code> attribute.
         * @return  the descriptor for the <code>name</code> attribute
         */
        public com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,modelmanagement.NamedElement,java.lang.String> NAME( ) {
            return modelmanagement.NamedElement.DESCRIPTORS.NAME( );
        }
        /**
         * Returns the descriptor for the <code>description</code> attribute.
         * @return  the descriptor for the <code>description</code> attribute
         */
        public com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,modelmanagement.NamedElement,localization.TranslatableText> DESCRIPTION( ) {
            return modelmanagement.NamedElement.DESCRIPTORS.DESCRIPTION( );
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.Context,data.classes.SapClass> __for;
        /**
         * Returns the descriptor for the <code>for</code> reference.
         * @return  the descriptor for the <code>for</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.Context,data.classes.SapClass> FOR( ) {
            if ( __for == null ) {
                __for = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.Context,data.classes.SapClass>( "E0234C8C51E6C0D53E4B11DEA2110018DE1146FF", "sap.com/moin/mm/ap/core", new java.lang.String[] { "data", "classes", "Context", "for_" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __for;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.Context,java.util.Collection<data.constraints.Constraint>> __constraints;
        /**
         * Returns the descriptor for the <code>constraints</code> reference.
         * @return  the descriptor for the <code>constraints</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.Context,java.util.Collection<data.constraints.Constraint>> CONSTRAINTS( ) {
            if ( __constraints == null ) {
                __constraints = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.Context,java.util.Collection<data.constraints.Constraint>>( "E0234C8C51E6C0D63E4B11DEC2A50018DE1146FF", "sap.com/moin/mm/ap/core", new java.lang.String[] { "data", "classes", "Context", "constraints" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __constraints;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.Context,dataaccess.expressions.Expression> __condition;
        /**
         * Returns the descriptor for the <code>condition</code> reference.
         * @return  the descriptor for the <code>condition</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.Context,dataaccess.expressions.Expression> CONDITION( ) {
            if ( __condition == null ) {
                __condition = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.Context,dataaccess.expressions.Expression>( "E0234C8C51E6C0D73E4B11DEC2A90018DE1146FF", "sap.com/moin/mm/ap/core", new java.lang.String[] { "data", "classes", "Context", "condition" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __condition;
        }
    }
}    