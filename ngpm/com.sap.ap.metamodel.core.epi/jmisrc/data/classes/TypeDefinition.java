/**
 * Generated by the MOIN Generator Version 3.0
 **/

package data.classes;

/**
 * This interface is not intended to be implemented by clients.
 */
public interface TypeDefinition extends data.classes.Multiplicity {

    /**
     * Descriptors for all features of this MofClass and its supertypes.
     */
    public static final Descriptors DESCRIPTORS = new Descriptors( );

    // class extent descriptor
    /**
     * Extent descriptor
     */
    public final com.sap.tc.moin.repository.mmi.descriptors.ClassDescriptor<com.sap.tc.moin.repository.mmi.reflect.RefClass, data.classes.TypeDefinition> CLASS_DESCRIPTOR = new com.sap.tc.moin.repository.mmi.descriptors.ClassDescriptor<com.sap.tc.moin.repository.mmi.reflect.RefClass, data.classes.TypeDefinition>("E0234C8C51E931C43E4B11DE81F90018DE1146FF", "sap.com/moin/mm/ap/core", "data", "classes", "TypeDefinition"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ 

    
    // references
    public java.util.Collection<data.classes.Signature> getSignaturesWithOutput() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public data.classes.TypedElement getOwnerTypedElement() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public void setOwnerTypedElement(data.classes.TypedElement newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public data.classes.Signature getOwnerSignature() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public void setOwnerSignature(data.classes.Signature newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;

    // operations
    public boolean conformsTo(data.classes.TypeDefinition typeDef) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    /**
     * Same as conformsTo(Featured):Boolean but with the possibility to pass pairs of Featured elements that are to be considered conforming and thus don't need further exploration. This can be used to avoid endless recursions in conformance testing.
     */
    public boolean conformsToExcluding(data.classes.TypeDefinition td, java.util.List<? extends data.classes.SapClass> excludingConforming, java.util.List<? extends data.classes.SapClass> excludingTo) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    /**
     * Checks if this type definition's multiplicity conforms to td's multiplicity definitions. This is the case if all instances that conform to this type definition will also conform to td.
     * <p>
     * Multiplicity conforms if td includes self's multiplicity, thus td's lower multiplicity is equal or smaller, and td's upper multiplicity is equal or larger than self's.
     * <p>
     * Ordereness and uniquness conform if td has more relaxed requirements. Thus, they conform if they are equal, if td is neither ordered nor unique, or if self is ordered and unique
     */
    public boolean multiplicityConformsTo(data.classes.TypeDefinition td) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    /**
     * Same as conformsTo(Featured):Boolean but with the possibility to pass pairs of Featured elements that are to be considered conforming and thus don't need further exploration. This can be used to avoid endless recursions in conformance testing.
     */
    public boolean conformsToIgnoringMultiplicityExcluding(data.classes.TypeDefinition td, java.util.List<? extends data.classes.SapClass> excludingConforming, java.util.List<? extends data.classes.SapClass> excludingTo) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public boolean conformsToIgnoringMultiplicity(data.classes.TypeDefinition typeDef) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public java.util.Collection<data.classes.TypedElement> getTypeUsage() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    /**
     * For nexted type definitions, navigates through to the inner type definition. For non-nested type definitions, that type definition is the result of this method.
     */
    public data.classes.TypeDefinition getInnermost() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public int getNestingLevel() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;


    public static final class Descriptors {
        Descriptors( ) { 
        }
        /**
         * Returns the descriptor for the <code>lowerMultiplicity</code> attribute.
         * @return  the descriptor for the <code>lowerMultiplicity</code> attribute
         */
        public com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,data.classes.Multiplicity,java.lang.Integer> LOWER_MULTIPLICITY( ) {
            return data.classes.Multiplicity.DESCRIPTORS.LOWER_MULTIPLICITY( );
        }
        /**
         * Returns the descriptor for the <code>upperMultiplicity</code> attribute.
         * @return  the descriptor for the <code>upperMultiplicity</code> attribute
         */
        public com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,data.classes.Multiplicity,java.lang.Integer> UPPER_MULTIPLICITY( ) {
            return data.classes.Multiplicity.DESCRIPTORS.UPPER_MULTIPLICITY( );
        }
        /**
         * Returns the descriptor for the <code>ordered</code> attribute.
         * @return  the descriptor for the <code>ordered</code> attribute
         */
        public com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,data.classes.Multiplicity,java.lang.Boolean> ORDERED( ) {
            return data.classes.Multiplicity.DESCRIPTORS.ORDERED( );
        }
        /**
         * Returns the descriptor for the <code>unique</code> attribute.
         * @return  the descriptor for the <code>unique</code> attribute
         */
        public com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,data.classes.Multiplicity,java.lang.Boolean> UNIQUE( ) {
            return data.classes.Multiplicity.DESCRIPTORS.UNIQUE( );
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.TypeDefinition,java.util.Collection<data.classes.Signature>> __signaturesWithOutput;
        /**
         * Returns the descriptor for the <code>signaturesWithOutput</code> reference.
         * @return  the descriptor for the <code>signaturesWithOutput</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.TypeDefinition,java.util.Collection<data.classes.Signature>> SIGNATURES_WITH_OUTPUT( ) {
            if ( __signaturesWithOutput == null ) {
                __signaturesWithOutput = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.TypeDefinition,java.util.Collection<data.classes.Signature>>( "E0234C8C51E6C0FA3E4B11DEC1AC0018DE1146FF", "sap.com/moin/mm/ap/core", new java.lang.String[] { "data", "classes", "TypeDefinition", "signaturesWithOutput" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __signaturesWithOutput;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.TypeDefinition,data.classes.TypedElement> __ownerTypedElement;
        /**
         * Returns the descriptor for the <code>ownerTypedElement</code> reference.
         * @return  the descriptor for the <code>ownerTypedElement</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.TypeDefinition,data.classes.TypedElement> OWNER_TYPED_ELEMENT( ) {
            if ( __ownerTypedElement == null ) {
                __ownerTypedElement = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.TypeDefinition,data.classes.TypedElement>( "E0234C8C51E6C0FB3E4B11DE994D0018DE1146FF", "sap.com/moin/mm/ap/core", new java.lang.String[] { "data", "classes", "TypeDefinition", "ownerTypedElement" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __ownerTypedElement;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.TypeDefinition,data.classes.Signature> __ownerSignature;
        /**
         * Returns the descriptor for the <code>ownerSignature</code> reference.
         * @return  the descriptor for the <code>ownerSignature</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.TypeDefinition,data.classes.Signature> OWNER_SIGNATURE( ) {
            if ( __ownerSignature == null ) {
                __ownerSignature = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,data.classes.TypeDefinition,data.classes.Signature>( "E0234C8C51E6C0FC3E4B11DEB1C20018DE1146FF", "sap.com/moin/mm/ap/core", new java.lang.String[] { "data", "classes", "TypeDefinition", "ownerSignature" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __ownerSignature;
        }
        /**
         * Returns the descriptor for the <code>isMany</code> operation.
         * @return  the descriptor for the <code>isMany</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.Multiplicity,java.lang.Boolean> IS_MANY( ) {
            return data.classes.Multiplicity.DESCRIPTORS.IS_MANY( );
        }
        private com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypeDefinition,java.lang.Boolean> __conformsTo;
        /**
         * Returns the descriptor for the <code>conformsTo</code> operation.
         * @return  the descriptor for the <code>conformsTo</code> operation
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypeDefinition,java.lang.Boolean> CONFORMS_TO( ) {
            if ( __conformsTo == null ) {
                __conformsTo = new com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypeDefinition,java.lang.Boolean>( "E0234C8C51E6C0FF3E4B11DEBAAB0018DE1146FF", "sap.com/moin/mm/ap/core", new java.lang.String[] { "data", "classes", "TypeDefinition", "conformsTo" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __conformsTo;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypeDefinition,java.lang.Boolean> __conformsToExcluding;
        /**
         * Returns the descriptor for the <code>conformsToExcluding</code> operation.
         * @return  the descriptor for the <code>conformsToExcluding</code> operation
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypeDefinition,java.lang.Boolean> CONFORMS_TO_EXCLUDING( ) {
            if ( __conformsToExcluding == null ) {
                __conformsToExcluding = new com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypeDefinition,java.lang.Boolean>( "E0234C8C51E6C1043E4B11DE9B460018DE1146FF", "sap.com/moin/mm/ap/core", new java.lang.String[] { "data", "classes", "TypeDefinition", "conformsToExcluding" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __conformsToExcluding;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypeDefinition,java.lang.Boolean> __multiplicityConformsTo;
        /**
         * Returns the descriptor for the <code>multiplicityConformsTo</code> operation.
         * @return  the descriptor for the <code>multiplicityConformsTo</code> operation
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypeDefinition,java.lang.Boolean> MULTIPLICITY_CONFORMS_TO( ) {
            if ( __multiplicityConformsTo == null ) {
                __multiplicityConformsTo = new com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypeDefinition,java.lang.Boolean>( "E0234C8C51E6C1073E4B11DEAEE30018DE1146FF", "sap.com/moin/mm/ap/core", new java.lang.String[] { "data", "classes", "TypeDefinition", "multiplicityConformsTo" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __multiplicityConformsTo;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypeDefinition,java.lang.Boolean> __conformsToIgnoringMultiplicityExcluding;
        /**
         * Returns the descriptor for the <code>conformsToIgnoringMultiplicityExcluding</code> operation.
         * @return  the descriptor for the <code>conformsToIgnoringMultiplicityExcluding</code> operation
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypeDefinition,java.lang.Boolean> CONFORMS_TO_IGNORING_MULTIPLICITY_EXCLUDING( ) {
            if ( __conformsToIgnoringMultiplicityExcluding == null ) {
                __conformsToIgnoringMultiplicityExcluding = new com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypeDefinition,java.lang.Boolean>( "E0234C8C51E6C10C3E4B11DE92D60018DE1146FF", "sap.com/moin/mm/ap/core", new java.lang.String[] { "data", "classes", "TypeDefinition", "conformsToIgnoringMultiplicityExcluding" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __conformsToIgnoringMultiplicityExcluding;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypeDefinition,java.lang.Boolean> __conformsToIgnoringMultiplicity;
        /**
         * Returns the descriptor for the <code>conformsToIgnoringMultiplicity</code> operation.
         * @return  the descriptor for the <code>conformsToIgnoringMultiplicity</code> operation
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypeDefinition,java.lang.Boolean> CONFORMS_TO_IGNORING_MULTIPLICITY( ) {
            if ( __conformsToIgnoringMultiplicity == null ) {
                __conformsToIgnoringMultiplicity = new com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypeDefinition,java.lang.Boolean>( "E0234C8C51E931C13E4B11DEB8750018DE1146FF", "sap.com/moin/mm/ap/core", new java.lang.String[] { "data", "classes", "TypeDefinition", "conformsToIgnoringMultiplicity" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __conformsToIgnoringMultiplicity;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypeDefinition,java.util.Collection<data.classes.TypedElement>> __getTypeUsage;
        /**
         * Returns the descriptor for the <code>getTypeUsage</code> operation.
         * @return  the descriptor for the <code>getTypeUsage</code> operation
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypeDefinition,java.util.Collection<data.classes.TypedElement>> GET_TYPE_USAGE( ) {
            if ( __getTypeUsage == null ) {
                __getTypeUsage = new com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypeDefinition,java.util.Collection<data.classes.TypedElement>>( "E0234C8C51E931C33E4B11DEC0BB0018DE1146FF", "sap.com/moin/mm/ap/core", new java.lang.String[] { "data", "classes", "TypeDefinition", "getTypeUsage" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __getTypeUsage;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypeDefinition,data.classes.TypeDefinition> __getInnermost;
        /**
         * Returns the descriptor for the <code>getInnermost</code> operation.
         * @return  the descriptor for the <code>getInnermost</code> operation
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypeDefinition,data.classes.TypeDefinition> GET_INNERMOST( ) {
            if ( __getInnermost == null ) {
                __getInnermost = new com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypeDefinition,data.classes.TypeDefinition>( "E0234C8C6F041731BAF011DE8CE10019D29902CC", "sap.com/moin/mm/ap/core", new java.lang.String[] { "data", "classes", "TypeDefinition", "getInnermost" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __getInnermost;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypeDefinition,java.lang.Integer> __getNestingLevel;
        /**
         * Returns the descriptor for the <code>getNestingLevel</code> operation.
         * @return  the descriptor for the <code>getNestingLevel</code> operation
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypeDefinition,java.lang.Integer> GET_NESTING_LEVEL( ) {
            if ( __getNestingLevel == null ) {
                __getNestingLevel = new com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,data.classes.TypeDefinition,java.lang.Integer>( "E0234C8CB5A671F0BE5711DEC399001A6BCDC3B3", "sap.com/moin/mm/ap/core", new java.lang.String[] { "data", "classes", "TypeDefinition", "getNestingLevel" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __getNestingLevel;
        }
    }
}    