/**
 * Generated by the MOIN Generator Version 3.0
 **/

package data.__impl;

public class DataPackageWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefPackageWrapperImpl<data.__impl.DataPackageImpl> implements data.DataPackage,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The DataPackage wrapper
     */
    public DataPackageWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, data.__impl.DataPackageImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    private data.__impl.DataPackageImpl getCastWrappedObject() {
        return (data.__impl.DataPackageImpl) getWrappedObject();
    }
    
    public data.__impl.DataPackageImpl unwrap() {
        return (data.__impl.DataPackageImpl) getWrappedObject();
    }
    
    public data.classes.ClassesPackage getClasses()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (data.classes.ClassesPackage) wrapResult(getCastWrappedObject().getClasses(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (data.classes.ClassesPackage) wrapResult(getCastWrappedObject().getClasses(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public data.constraints.ConstraintsPackage getConstraints()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (data.constraints.ConstraintsPackage) wrapResult(getCastWrappedObject().getConstraints(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (data.constraints.ConstraintsPackage) wrapResult(getCastWrappedObject().getConstraints(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public data.quantitystructure.QuantitystructurePackage getQuantitystructure()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (data.quantitystructure.QuantitystructurePackage) wrapResult(getCastWrappedObject().getQuantitystructure(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (data.quantitystructure.QuantitystructurePackage) wrapResult(getCastWrappedObject().getQuantitystructure(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public data.timedependency.TimedependencyPackage getTimedependency()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (data.timedependency.TimedependencyPackage) wrapResult(getCastWrappedObject().getTimedependency(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (data.timedependency.TimedependencyPackage) wrapResult(getCastWrappedObject().getTimedependency(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public data.documents.DocumentsPackage getDocuments()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (data.documents.DocumentsPackage) wrapResult(getCastWrappedObject().getDocuments(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (data.documents.DocumentsPackage) wrapResult(getCastWrappedObject().getDocuments(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public data.generics.GenericsPackage getGenerics()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (data.generics.GenericsPackage) wrapResult(getCastWrappedObject().getGenerics(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (data.generics.GenericsPackage) wrapResult(getCastWrappedObject().getGenerics(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public data.tuples.TuplesPackage getTuples()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (data.tuples.TuplesPackage) wrapResult(getCastWrappedObject().getTuples(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (data.tuples.TuplesPackage) wrapResult(getCastWrappedObject().getTuples(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    // methods for structure type creators
    
    public java.lang.Class<data.DataPackage> get___JmiInterface() {
        return data.DataPackage.class;
    }
    
    protected String metaObjectToString() {
        return "data.DataPackage (Java Type)\ndata (MOF Type)"; //$NON-NLS-1$
    }
}