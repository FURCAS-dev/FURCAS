/**
 * Generated by the MOIN Generator Version 3.0
 **/

package data.constraints.__impl;

public class AConstraintExpressionConstraintWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<data.constraints.AConstraintExpressionConstraint> implements data.constraints.AConstraintExpressionConstraint,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AConstraintExpressionConstraint wrapper
     */
    public AConstraintExpressionConstraintWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, data.constraints.__impl.AConstraintExpressionConstraintImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private data.constraints.__impl.AConstraintExpressionConstraintImpl getCastWrappedObject() {
        return (data.constraints.__impl.AConstraintExpressionConstraintImpl) getWrappedObject();
    }

    public data.constraints.AConstraintExpressionConstraint unwrap() {
        return (data.constraints.AConstraintExpressionConstraint) getWrappedObject();
    }
    
    public boolean exists(dataaccess.expressions.Expression _ConstraintExpression, data.constraints.Constraint _Constraint) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConstraintExpression), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Constraint));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConstraintExpression), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Constraint)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public dataaccess.expressions.Expression getConstraintExpression(data.constraints.Constraint _Constraint) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (dataaccess.expressions.Expression) wrapResult(getCastWrappedObject().getConstraintExpression(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Constraint)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (dataaccess.expressions.Expression) wrapResult(getCastWrappedObject().getConstraintExpression(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Constraint))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public data.constraints.Constraint getConstraint(dataaccess.expressions.Expression _ConstraintExpression) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (data.constraints.Constraint) wrapResult(getCastWrappedObject().getConstraint(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConstraintExpression)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (data.constraints.Constraint) wrapResult(getCastWrappedObject().getConstraint(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConstraintExpression))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(dataaccess.expressions.Expression _ConstraintExpression, data.constraints.Constraint _Constraint) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConstraintExpression), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Constraint));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConstraintExpression), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Constraint)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(dataaccess.expressions.Expression _ConstraintExpression, data.constraints.Constraint _Constraint) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConstraintExpression), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Constraint));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConstraintExpression), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Constraint)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<data.constraints.AConstraintExpressionConstraint> get___JmiInterface() {
        return data.constraints.AConstraintExpressionConstraint.class;
    }

    protected String metaObjectToString() {
        return "data.constraints.AConstraintExpressionConstraint (Java Type)\ndata.constraints.A_constraintExpression_constraint (MOF Type)"; //$NON-NLS-1$
    }    
}