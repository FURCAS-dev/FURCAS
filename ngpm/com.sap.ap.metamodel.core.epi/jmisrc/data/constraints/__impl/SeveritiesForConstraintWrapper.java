/**
 * Generated by the MOIN Generator Version 3.0
 **/

package data.constraints.__impl;

public class SeveritiesForConstraintWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<data.constraints.SeveritiesForConstraint> implements data.constraints.SeveritiesForConstraint,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The SeveritiesForConstraint wrapper
     */
    public SeveritiesForConstraintWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, data.constraints.__impl.SeveritiesForConstraintImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private data.constraints.__impl.SeveritiesForConstraintImpl getCastWrappedObject() {
        return (data.constraints.__impl.SeveritiesForConstraintImpl) getWrappedObject();
    }

    public data.constraints.SeveritiesForConstraint unwrap() {
        return (data.constraints.SeveritiesForConstraint) getWrappedObject();
    }
    
    public boolean exists(data.constraints.SeverityInState _SeverityInState, data.constraints.Constraint _Constraint) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SeverityInState), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Constraint));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SeverityInState), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Constraint)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getSeverityInState(data.constraints.Constraint _Constraint) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getSeverityInState(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Constraint)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getSeverityInState(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Constraint))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public data.constraints.Constraint getConstraint(data.constraints.SeverityInState _SeverityInState) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (data.constraints.Constraint) wrapResult(getCastWrappedObject().getConstraint(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SeverityInState)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (data.constraints.Constraint) wrapResult(getCastWrappedObject().getConstraint(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SeverityInState))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(data.constraints.SeverityInState _SeverityInState, data.constraints.Constraint _Constraint) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SeverityInState), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Constraint));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SeverityInState), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Constraint)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(data.constraints.SeverityInState _SeverityInState, data.constraints.Constraint _Constraint) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SeverityInState), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Constraint));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _SeverityInState), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Constraint)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<data.constraints.SeveritiesForConstraint> get___JmiInterface() {
        return data.constraints.SeveritiesForConstraint.class;
    }

    protected String metaObjectToString() {
        return "data.constraints.SeveritiesForConstraint (Java Type)\ndata.constraints.SeveritiesForConstraint (MOF Type)"; //$NON-NLS-1$
    }    
}