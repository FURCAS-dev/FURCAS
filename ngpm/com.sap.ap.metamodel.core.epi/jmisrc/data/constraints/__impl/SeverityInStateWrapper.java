/**
 * Generated by the MOIN Generator Version 3.0
 **/

package data.constraints.__impl;

public class SeverityInStateWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefObjectWrapperImpl<data.constraints.__impl.SeverityInStateImpl> implements data.constraints.SeverityInState,com.sap.tc.moin.repository.Partitionable {

    
    static {
    }

    public SeverityInStateWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, data.constraints.__impl.SeverityInStateImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    private data.constraints.__impl.SeverityInStateImpl getCastWrappedObject() {
        return (data.constraints.__impl.SeverityInStateImpl) getWrappedObject();
    }
    
    private data.constraints.__impl.SeverityInStateImpl getCastWrappedObject(com.sap.tc.moin.repository.core.CorePartitionable resolved) {
        return (data.constraints.__impl.SeverityInStateImpl) resolved;
    }
    
    public data.constraints.__impl.SeverityInStateImpl unwrap() {
        return (data.constraints.__impl.SeverityInStateImpl) getWrappedObject();
    }
        
    // methods for attributes
    public data.constraints.ObjectState getState() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        com.sap.tc.moin.repository.core.CorePartitionable resolved = mriReference.getIfResolved();
        if (resolved != null) {
            return getCastWrappedObject(resolved).getState();
        }
            try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().getState();
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().getState(); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public void setState(data.constraints.ObjectState newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setState(connection, newValue);
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setState(connection, newValue);
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public data.constraints.Severity getSeverity() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        com.sap.tc.moin.repository.core.CorePartitionable resolved = mriReference.getIfResolved();
        if (resolved != null) {
            return getCastWrappedObject(resolved).getSeverity();
        }
            try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().getSeverity();
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().getSeverity(); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public void setSeverity(data.constraints.Severity newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setSeverity(connection, newValue);
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setSeverity(connection, newValue);
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

     
    // methods for references
   
    // methods for modeled operations
    
    // methods for internal modeled operations

    // reflective methods
    

    // get the JMI interface
    public java.lang.Class<data.constraints.SeverityInState> get___JmiInterface() {
        return data.constraints.SeverityInState.class;
    }

    // to String
    protected String metaObjectToString() {
        return "data.constraints.SeverityInState (Java Type)\ndata.constraints.SeverityInState (MOF Type)"; //$NON-NLS-1$
    }    
}