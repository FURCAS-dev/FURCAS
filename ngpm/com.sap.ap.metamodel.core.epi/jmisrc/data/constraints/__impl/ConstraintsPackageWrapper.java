/**
 * Generated by the MOIN Generator Version 3.0
 **/

package data.constraints.__impl;

public class ConstraintsPackageWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefPackageWrapperImpl<data.constraints.__impl.ConstraintsPackageImpl> implements data.constraints.ConstraintsPackage,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The ConstraintsPackage wrapper
     */
    public ConstraintsPackageWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, data.constraints.__impl.ConstraintsPackageImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    private data.constraints.__impl.ConstraintsPackageImpl getCastWrappedObject() {
        return (data.constraints.__impl.ConstraintsPackageImpl) getWrappedObject();
    }
    
    public data.constraints.__impl.ConstraintsPackageImpl unwrap() {
        return (data.constraints.__impl.ConstraintsPackageImpl) getWrappedObject();
    }
    
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getConstraint()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getConstraint(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getConstraint(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getSeverityInState()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getSeverityInState(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getSeverityInState(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public data.constraints.Constrains getConstrains()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (data.constraints.Constrains) wrapResult(getCastWrappedObject().getConstrains(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (data.constraints.Constrains) wrapResult(getCastWrappedObject().getConstrains(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public data.constraints.SeveritiesForConstraint getSeveritiesForConstraint()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (data.constraints.SeveritiesForConstraint) wrapResult(getCastWrappedObject().getSeveritiesForConstraint(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (data.constraints.SeveritiesForConstraint) wrapResult(getCastWrappedObject().getSeveritiesForConstraint(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public data.constraints.AConstraintExpressionConstraint getAConstraintExpressionConstraint()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (data.constraints.AConstraintExpressionConstraint) wrapResult(getCastWrappedObject().getAConstraintExpressionConstraint(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (data.constraints.AConstraintExpressionConstraint) wrapResult(getCastWrappedObject().getAConstraintExpressionConstraint(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public data.constraints.APreconditionsPreconditionForSignature getAPreconditionsPreconditionForSignature()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (data.constraints.APreconditionsPreconditionForSignature) wrapResult(getCastWrappedObject().getAPreconditionsPreconditionForSignature(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (data.constraints.APreconditionsPreconditionForSignature) wrapResult(getCastWrappedObject().getAPreconditionsPreconditionForSignature(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public data.constraints.APostconditionsPostconditionForSignature getAPostconditionsPostconditionForSignature()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (data.constraints.APostconditionsPostconditionForSignature) wrapResult(getCastWrappedObject().getAPostconditionsPostconditionForSignature(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (data.constraints.APostconditionsPostconditionForSignature) wrapResult(getCastWrappedObject().getAPostconditionsPostconditionForSignature(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    // methods for structure type creators
    
    @SuppressWarnings("unchecked")
    public java.lang.Class<data.constraints.ConstraintsPackage> get___JmiInterface() {
        return data.constraints.ConstraintsPackage.class;
    }
    
    protected String metaObjectToString() {
        return "data.constraints.ConstraintsPackage (Java Type)\ndata.constraints (MOF Type)"; //$NON-NLS-1$
    }
}