/**
 * Generated by the MOIN Generator Version 3.0
 **/

package data.constraints;
/**
 * The expression is evaluated in the context of an instance of constrainedType which can be accessed using a This expression. It must return a Boolean value.
 * This interface is not intended to be implemented by clients.
 */
public interface AConstraintExpressionConstraint extends com.sap.tc.moin.repository.mmi.reflect.RefAssociation
{
    // association extent descriptor
    /**
     * Extent descriptor
     */
    public final com.sap.tc.moin.repository.mmi.descriptors.AssociationDescriptor<data.constraints.AConstraintExpressionConstraint> ASSOCIATION_DESCRIPTOR = new com.sap.tc.moin.repository.mmi.descriptors.AssociationDescriptor<data.constraints.AConstraintExpressionConstraint>("E0234C8C51EDECDB3E4B11DE822E0018DE1146FF", "sap.com/moin/mm/ap/core", "data", "constraints", "A_constraintExpression_constraint"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ 


    // association interface
    public boolean exists(dataaccess.expressions.Expression _ConstraintExpression, data.constraints.Constraint _Constraint) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public dataaccess.expressions.Expression getConstraintExpression(data.constraints.Constraint _Constraint) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public data.constraints.Constraint getConstraint(dataaccess.expressions.Expression _ConstraintExpression) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public boolean add(dataaccess.expressions.Expression _ConstraintExpression, data.constraints.Constraint _Constraint) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public boolean remove(dataaccess.expressions.Expression _ConstraintExpression, data.constraints.Constraint _Constraint) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
}