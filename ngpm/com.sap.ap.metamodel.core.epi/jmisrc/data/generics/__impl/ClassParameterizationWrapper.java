/**
 * Generated by the MOIN Generator Version 3.0
 **/

package data.generics.__impl;

public class ClassParameterizationWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefObjectWrapperImpl<data.generics.__impl.ClassParameterizationImpl> implements data.generics.ClassParameterization,com.sap.tc.moin.repository.Partitionable {

    
    static {
    }

    public ClassParameterizationWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, data.generics.__impl.ClassParameterizationImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    private data.generics.__impl.ClassParameterizationImpl getCastWrappedObject() {
        return (data.generics.__impl.ClassParameterizationImpl) getWrappedObject();
    }
    
    public data.generics.__impl.ClassParameterizationImpl unwrap() {
        return (data.generics.__impl.ClassParameterizationImpl) getWrappedObject();
    }
        
    // methods for attributes
     
    // methods for references
    public java.util.List<data.generics.FormalTypeParameter> getFormalTypeParameters() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.List<data.generics.FormalTypeParameter>) wrapResult(getCastWrappedObject().getFormalTypeParameters(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.List<data.generics.FormalTypeParameter>) wrapResult(getCastWrappedObject().getFormalTypeParameters(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public data.classes.SapClass getOwningClassDefinition() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (data.classes.SapClass) wrapResult(getCastWrappedObject().getOwningClassDefinition(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (data.classes.SapClass) wrapResult(getCastWrappedObject().getOwningClassDefinition(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setOwningClassDefinition(data.classes.SapClass newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setOwningClassDefinition(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setOwningClassDefinition(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public modelmanagement.Package getPackage() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (modelmanagement.Package) wrapResult(getCastWrappedObject().getPackage(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (modelmanagement.Package) wrapResult(getCastWrappedObject().getPackage(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setPackage(modelmanagement.Package newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setPackage(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setPackage(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

   
    // methods for modeled operations
    
    // methods for internal modeled operations

    // reflective methods
    

    // get the JMI interface
    public java.lang.Class<data.generics.ClassParameterization> get___JmiInterface() {
        return data.generics.ClassParameterization.class;
    }

    // to String
    protected String metaObjectToString() {
        return "data.generics.ClassParameterization (Java Type)\ndata.generics.ClassParameterization (MOF Type)"; //$NON-NLS-1$
    }    
}