/**
 * Generated by the MOIN Generator Version 3.0
 **/

package data.generics.__impl;

public class AFormalTypeParametersParameterOfWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<data.generics.AFormalTypeParametersParameterOf> implements data.generics.AFormalTypeParametersParameterOf,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AFormalTypeParametersParameterOf wrapper
     */
    public AFormalTypeParametersParameterOfWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, data.generics.__impl.AFormalTypeParametersParameterOfImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private data.generics.__impl.AFormalTypeParametersParameterOfImpl getCastWrappedObject() {
        return (data.generics.__impl.AFormalTypeParametersParameterOfImpl) getWrappedObject();
    }

    public data.generics.AFormalTypeParametersParameterOf unwrap() {
        return (data.generics.AFormalTypeParametersParameterOf) getWrappedObject();
    }
    
    public boolean exists(data.generics.FormalTypeParameter _FormalTypeParameters, data.generics.ClassParameterization _ParameterOf) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FormalTypeParameters), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ParameterOf));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FormalTypeParameters), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ParameterOf)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.List getFormalTypeParameters(data.generics.ClassParameterization _ParameterOf) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.List) wrapResult(getCastWrappedObject().getFormalTypeParameters(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ParameterOf)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.List) wrapResult(getCastWrappedObject().getFormalTypeParameters(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ParameterOf))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public data.generics.ClassParameterization getParameterOf(data.generics.FormalTypeParameter _FormalTypeParameters) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (data.generics.ClassParameterization) wrapResult(getCastWrappedObject().getParameterOf(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FormalTypeParameters)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (data.generics.ClassParameterization) wrapResult(getCastWrappedObject().getParameterOf(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FormalTypeParameters))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(data.generics.FormalTypeParameter _FormalTypeParameters, data.generics.ClassParameterization _ParameterOf) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FormalTypeParameters), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ParameterOf));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FormalTypeParameters), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ParameterOf)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(data.generics.FormalTypeParameter _FormalTypeParameters, data.generics.ClassParameterization _ParameterOf) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FormalTypeParameters), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ParameterOf));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FormalTypeParameters), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ParameterOf)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<data.generics.AFormalTypeParametersParameterOf> get___JmiInterface() {
        return data.generics.AFormalTypeParametersParameterOf.class;
    }

    protected String metaObjectToString() {
        return "data.generics.AFormalTypeParametersParameterOf (Java Type)\ndata.generics.A_formalTypeParameters_parameterOf (MOF Type)"; //$NON-NLS-1$
    }    
}