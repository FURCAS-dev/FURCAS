/**
 * Generated by the MOIN Generator Version 3.0
 **/

package data.generics.__impl;

public class ParameterizedClassDeclarationWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<data.generics.ParameterizedClassDeclaration> implements data.generics.ParameterizedClassDeclaration,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The ParameterizedClassDeclaration wrapper
     */
    public ParameterizedClassDeclarationWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, data.generics.__impl.ParameterizedClassDeclarationImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private data.generics.__impl.ParameterizedClassDeclarationImpl getCastWrappedObject() {
        return (data.generics.__impl.ParameterizedClassDeclarationImpl) getWrappedObject();
    }

    public data.generics.ParameterizedClassDeclaration unwrap() {
        return (data.generics.ParameterizedClassDeclaration) getWrappedObject();
    }
    
    public boolean exists(data.classes.SapClass _OwningClassDefinition, data.generics.ClassParameterization _Parameterization) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _OwningClassDefinition), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Parameterization));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _OwningClassDefinition), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Parameterization)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public data.classes.SapClass getOwningClassDefinition(data.generics.ClassParameterization _Parameterization) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (data.classes.SapClass) wrapResult(getCastWrappedObject().getOwningClassDefinition(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Parameterization)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (data.classes.SapClass) wrapResult(getCastWrappedObject().getOwningClassDefinition(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Parameterization))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public data.generics.ClassParameterization getParameterization(data.classes.SapClass _OwningClassDefinition) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (data.generics.ClassParameterization) wrapResult(getCastWrappedObject().getParameterization(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _OwningClassDefinition)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (data.generics.ClassParameterization) wrapResult(getCastWrappedObject().getParameterization(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _OwningClassDefinition))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(data.classes.SapClass _OwningClassDefinition, data.generics.ClassParameterization _Parameterization) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _OwningClassDefinition), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Parameterization));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _OwningClassDefinition), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Parameterization)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(data.classes.SapClass _OwningClassDefinition, data.generics.ClassParameterization _Parameterization) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _OwningClassDefinition), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Parameterization));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _OwningClassDefinition), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Parameterization)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<data.generics.ParameterizedClassDeclaration> get___JmiInterface() {
        return data.generics.ParameterizedClassDeclaration.class;
    }

    protected String metaObjectToString() {
        return "data.generics.ParameterizedClassDeclaration (Java Type)\ndata.generics.ParameterizedClassDeclaration (MOF Type)"; //$NON-NLS-1$
    }    
}