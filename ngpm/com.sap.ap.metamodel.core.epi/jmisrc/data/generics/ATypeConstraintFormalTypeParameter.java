/**
 * Generated by the MOIN Generator Version 3.0
 **/

package data.generics;
/**
 * Can be used to specify that any actual type used for the formal type parameter must conform to the class referenced by the typeConstraint end. With this, whenever the formal type parameter is used as a type in the class definition, the typeConstaint's features can be used.
 * This interface is not intended to be implemented by clients.
 */
public interface ATypeConstraintFormalTypeParameter extends com.sap.tc.moin.repository.mmi.reflect.RefAssociation
{
    // association extent descriptor
    /**
     * Extent descriptor
     */
    public final com.sap.tc.moin.repository.mmi.descriptors.AssociationDescriptor<data.generics.ATypeConstraintFormalTypeParameter> ASSOCIATION_DESCRIPTOR = new com.sap.tc.moin.repository.mmi.descriptors.AssociationDescriptor<data.generics.ATypeConstraintFormalTypeParameter>("E0234C8C51F05DCC3E4B11DEADF50018DE1146FF", "sap.com/moin/mm/ap/core", "data", "generics", "A_typeConstraint_formalTypeParameter"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ 


    // association interface
    public boolean exists(data.classes.SapClass _TypeConstraint, data.generics.FormalTypeParameter _FormalTypeParameter) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public data.classes.SapClass getTypeConstraint(data.generics.FormalTypeParameter _FormalTypeParameter) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public java.util.Collection<data.generics.FormalTypeParameter> getFormalTypeParameter(data.classes.SapClass _TypeConstraint) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public boolean add(data.classes.SapClass _TypeConstraint, data.generics.FormalTypeParameter _FormalTypeParameter) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public boolean remove(data.classes.SapClass _TypeConstraint, data.generics.FormalTypeParameter _FormalTypeParameter) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
}