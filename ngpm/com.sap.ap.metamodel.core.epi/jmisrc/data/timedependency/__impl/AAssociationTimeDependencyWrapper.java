/**
 * Generated by the MOIN Generator Version 3.0
 **/

package data.timedependency.__impl;

public class AAssociationTimeDependencyWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<data.timedependency.AAssociationTimeDependency> implements data.timedependency.AAssociationTimeDependency,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AAssociationTimeDependency wrapper
     */
    public AAssociationTimeDependencyWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, data.timedependency.__impl.AAssociationTimeDependencyImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private data.timedependency.__impl.AAssociationTimeDependencyImpl getCastWrappedObject() {
        return (data.timedependency.__impl.AAssociationTimeDependencyImpl) getWrappedObject();
    }

    public data.timedependency.AAssociationTimeDependency unwrap() {
        return (data.timedependency.AAssociationTimeDependency) getWrappedObject();
    }
    
    public boolean exists(data.classes.Association _Association, data.timedependency.TimeDependency _TimeDependency) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Association), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TimeDependency));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Association), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TimeDependency)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public data.classes.Association getAssociation(data.timedependency.TimeDependency _TimeDependency) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (data.classes.Association) wrapResult(getCastWrappedObject().getAssociation(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TimeDependency)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (data.classes.Association) wrapResult(getCastWrappedObject().getAssociation(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TimeDependency))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public data.timedependency.TimeDependency getTimeDependency(data.classes.Association _Association) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (data.timedependency.TimeDependency) wrapResult(getCastWrappedObject().getTimeDependency(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Association)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (data.timedependency.TimeDependency) wrapResult(getCastWrappedObject().getTimeDependency(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Association))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(data.classes.Association _Association, data.timedependency.TimeDependency _TimeDependency) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Association), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TimeDependency));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Association), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TimeDependency)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(data.classes.Association _Association, data.timedependency.TimeDependency _TimeDependency) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Association), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TimeDependency));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Association), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _TimeDependency)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<data.timedependency.AAssociationTimeDependency> get___JmiInterface() {
        return data.timedependency.AAssociationTimeDependency.class;
    }

    protected String metaObjectToString() {
        return "data.timedependency.AAssociationTimeDependency (Java Type)\ndata.timedependency.A_association_timeDependency (MOF Type)"; //$NON-NLS-1$
    }    
}