/**
 * Generated by the MOIN Generator Version 3.0
 **/

package data.tuples.__impl;

public class TuplesPackageWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefPackageWrapperImpl<data.tuples.__impl.TuplesPackageImpl> implements data.tuples.TuplesPackage,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The TuplesPackage wrapper
     */
    public TuplesPackageWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, data.tuples.__impl.TuplesPackageImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    private data.tuples.__impl.TuplesPackageImpl getCastWrappedObject() {
        return (data.tuples.__impl.TuplesPackageImpl) getWrappedObject();
    }
    
    public data.tuples.__impl.TuplesPackageImpl unwrap() {
        return (data.tuples.__impl.TuplesPackageImpl) getWrappedObject();
    }
    
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getTupleTypeDefinition()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getTupleTypeDefinition(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getTupleTypeDefinition(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getTupleElement()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getTupleElement(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getTupleElement(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public data.tuples.AElementsTupleTypeDefinition getAElementsTupleTypeDefinition()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (data.tuples.AElementsTupleTypeDefinition) wrapResult(getCastWrappedObject().getAElementsTupleTypeDefinition(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (data.tuples.AElementsTupleTypeDefinition) wrapResult(getCastWrappedObject().getAElementsTupleTypeDefinition(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    // methods for structure type creators
    
    public java.lang.Class<data.tuples.TuplesPackage> get___JmiInterface() {
        return data.tuples.TuplesPackage.class;
    }
    
    protected String metaObjectToString() {
        return "data.tuples.TuplesPackage (Java Type)\ndata.tuples (MOF Type)"; //$NON-NLS-1$
    }
}