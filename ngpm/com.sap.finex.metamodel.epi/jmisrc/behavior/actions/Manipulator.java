/**
 * Generated by the MOIN Generator Version 3.0
 **/

package behavior.actions;

/**
 * A manipulator is a specific type of function implementation. It only consists of assignments to fields on the class on which the function is defined. All assignments conceptually happen concurrently and therefore during evaluation of their expressions which all have to be side effect-free, uses the state in which the object on which the manipulator is called was in at the time when the manipulator was called.
 * This interface is not intended to be implemented by clients.
 */
public interface Manipulator extends behavior.functions.SignatureImplementation {

    /**
     * Descriptors for all features of this MofClass and its supertypes.
     */
    public static final Descriptors DESCRIPTORS = new Descriptors( );

    // class extent descriptor
    /**
     * Extent descriptor
     */
    public final com.sap.tc.moin.repository.mmi.descriptors.ClassDescriptor<com.sap.tc.moin.repository.mmi.reflect.RefClass, behavior.actions.Manipulator> CLASS_DESCRIPTOR = new com.sap.tc.moin.repository.mmi.descriptors.ClassDescriptor<com.sap.tc.moin.repository.mmi.reflect.RefClass, behavior.actions.Manipulator>("E0003E7BDE1B62D2D06311DEAD510019D29902CC", "sap.com/finex/metamodel", "behavior", "actions", "Manipulator"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ 

    
    // references
    public java.util.Collection<behavior.actions.Assignment> getAssignments() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;


    public static final class Descriptors {
        Descriptors( ) { 
        }
        /**
         * Returns the descriptor for the <code>signature</code> reference.
         * @return  the descriptor for the <code>signature</code> reference
         */
        public com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,behavior.functions.SignatureImplementation,behavior.functions.Function> SIGNATURE( ) {
            return behavior.functions.SignatureImplementation.DESCRIPTORS.SIGNATURE( );
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,behavior.actions.Manipulator,java.util.Collection<behavior.actions.Assignment>> __assignments;
        /**
         * Returns the descriptor for the <code>assignments</code> reference.
         * @return  the descriptor for the <code>assignments</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,behavior.actions.Manipulator,java.util.Collection<behavior.actions.Assignment>> ASSIGNMENTS( ) {
            if ( __assignments == null ) {
                __assignments = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,behavior.actions.Manipulator,java.util.Collection<behavior.actions.Assignment>>( "E0003E7BDE1B62D1D06311DE90840019D29902CC", "sap.com/finex/metamodel", new java.lang.String[] { "behavior", "actions", "Manipulator", "assignments" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __assignments;
        }
        /**
         * Returns the descriptor for the <code>isSideEffectFree</code> operation.
         * @return  the descriptor for the <code>isSideEffectFree</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,behavior.functions.SignatureImplementation,java.lang.Boolean> IS_SIDE_EFFECT_FREE( ) {
            return behavior.functions.SignatureImplementation.DESCRIPTORS.IS_SIDE_EFFECT_FREE( );
        }
    }
}    