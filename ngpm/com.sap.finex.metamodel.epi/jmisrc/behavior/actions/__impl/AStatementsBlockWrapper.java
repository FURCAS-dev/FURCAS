/**
 * Generated by the MOIN Generator Version 3.0
 **/

package behavior.actions.__impl;

public class AStatementsBlockWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<behavior.actions.AStatementsBlock> implements behavior.actions.AStatementsBlock,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AStatementsBlock wrapper
     */
    public AStatementsBlockWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, behavior.actions.__impl.AStatementsBlockImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private behavior.actions.__impl.AStatementsBlockImpl getCastWrappedObject() {
        return (behavior.actions.__impl.AStatementsBlockImpl) getWrappedObject();
    }

    public behavior.actions.AStatementsBlock unwrap() {
        return (behavior.actions.AStatementsBlock) getWrappedObject();
    }
    
    public boolean exists(behavior.actions.Statement _Statements, behavior.actions.Block _Block) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Statements), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Block));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Statements), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Block)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.List getStatements(behavior.actions.Block _Block) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.List) wrapResult(getCastWrappedObject().getStatements(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Block)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.List) wrapResult(getCastWrappedObject().getStatements(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Block))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public behavior.actions.Block getBlock(behavior.actions.Statement _Statements) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (behavior.actions.Block) wrapResult(getCastWrappedObject().getBlock(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Statements)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (behavior.actions.Block) wrapResult(getCastWrappedObject().getBlock(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Statements))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(behavior.actions.Statement _Statements, behavior.actions.Block _Block) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Statements), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Block));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Statements), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Block)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(behavior.actions.Statement _Statements, behavior.actions.Block _Block) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Statements), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Block));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Statements), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Block)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<behavior.actions.AStatementsBlock> get___JmiInterface() {
        return behavior.actions.AStatementsBlock.class;
    }

    protected String metaObjectToString() {
        return "behavior.actions.AStatementsBlock (Java Type)\nbehavior.actions.A_statements_block (MOF Type)"; //$NON-NLS-1$
    }    
}