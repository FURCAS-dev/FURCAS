/**
 * Generated by the MOIN Generator Version 3.0
 **/

package behavior.actions.__impl;

public class BlockWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefObjectWrapperImpl<behavior.actions.__impl.BlockImpl> implements behavior.actions.Block,com.sap.tc.moin.repository.Partitionable {

        
    private static final java.util.Map<java.lang.String, java.lang.Integer> OPERATION_IDS;
    
    static {
        
        OPERATION_IDS = new java.util.HashMap<java.lang.String, java.lang.Integer>();
        OPERATION_IDS.put("getEnclosingType", Integer.valueOf(0)); //$NON-NLS-1$
        OPERATION_IDS.put("isSideEffectFree", Integer.valueOf(1)); //$NON-NLS-1$
        OPERATION_IDS.put("getOuterMostBlock", Integer.valueOf(2)); //$NON-NLS-1$
    }

    public BlockWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, behavior.actions.__impl.BlockImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    private behavior.actions.__impl.BlockImpl getCastWrappedObject() {
        return (behavior.actions.__impl.BlockImpl) getWrappedObject();
    }
    
    public behavior.actions.__impl.BlockImpl unwrap() {
        return (behavior.actions.__impl.BlockImpl) getWrappedObject();
    }
        
    // methods for attributes
     
    // methods for references
    public java.util.List<behavior.actions.Statement> getStatements() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.List<behavior.actions.Statement>) wrapResult(getCastWrappedObject().getStatements(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.List<behavior.actions.Statement>) wrapResult(getCastWrappedObject().getStatements(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public behavior.actions.StatementWithNestedBlock getOwningStatement() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (behavior.actions.StatementWithNestedBlock) wrapResult(getCastWrappedObject().getOwningStatement(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (behavior.actions.StatementWithNestedBlock) wrapResult(getCastWrappedObject().getOwningStatement(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setOwningStatement(behavior.actions.StatementWithNestedBlock newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setOwningStatement(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setOwningStatement(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public java.util.Collection<behavior.actions.NamedValue> getNamedValues() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection<behavior.actions.NamedValue>) wrapResult(getCastWrappedObject().getNamedValues(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection<behavior.actions.NamedValue>) wrapResult(getCastWrappedObject().getNamedValues(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



   
    // methods for modeled operations
    public structure.Type getEnclosingType() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (structure.Type)___invokeOperation(connection, 0, "E0003E7BC4631A84B74111DE9A7B00155883529C", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public boolean isSideEffectFree() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.lang.Boolean)___invokeOperation(connection, 1, "E0003E7BEABB89F1B96811DE96FA001A6BCDC3B3", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public behavior.actions.Block getOuterMostBlock() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (behavior.actions.Block)___invokeOperation(connection, 2, "E0003E7BB1E43BE1BD7D11DE87B2001A6BCDC3B3", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    
    // methods for internal modeled operations
    private structure.Type invoke__getEnclosingType(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            return (structure.Type)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "getEnclosingType", getCastWrappedObject( ), operationParameters));
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }
    private boolean invoke__isSideEffectFree(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            return ((java.lang.Boolean)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "isSideEffectFree", getCastWrappedObject( ), operationParameters))).booleanValue();
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }
    private behavior.actions.Block invoke__getOuterMostBlock(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            return (behavior.actions.Block)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "getOuterMostBlock", getCastWrappedObject( ), operationParameters));
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }

    // reflective methods
    @Override
    public Object refInvokeOperation(com.sap.tc.moin.repository.core.CoreConnection connection, java.lang.String requestedOperation, java.util.List<? extends Object> args) throws com.sap.tc.moin.repository.mmi.reflect.RefException {
        if (requestedOperation == null) {
            throw new com.sap.tc.moin.repository.mmi.reflect.InvalidNameException(requestedOperation);
        }
        java.lang.Integer operationId = OPERATION_IDS.get(requestedOperation);
        if (operationId == null) {
            throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException(requestedOperation, refMetaObject(), "refInvokeOperation(String)"); //$NON-NLS-1$
        }
        switch (operationId) {
                
            case 0:
                return ___invokeOperation( connection, operationId, "E0003E7BC4631A84B74111DE9A7B00155883529C", args ); //$NON-NLS-1$    
                
            case 1:
                return ___invokeOperation( connection, operationId, "E0003E7BEABB89F1B96811DE96FA001A6BCDC3B3", args ); //$NON-NLS-1$    
                
            case 2:
                return ___invokeOperation( connection, operationId, "E0003E7BB1E43BE1BD7D11DE87B2001A6BCDC3B3", args ); //$NON-NLS-1$    
            default:
                throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException(requestedOperation, refMetaObject(), "refInvokeOperation(String)"); //$NON-NLS-1$
        }
    }
    
    @Override
    public Object invoke___Operation(com.sap.tc.moin.repository.core.CoreConnection connection, int operationId, java.util.List<? extends Object> args) throws com.sap.tc.moin.repository.mmi.reflect.RefException {
        switch (operationId) {
                
            case 0:
                return invoke__getEnclosingType(connection);    
                
            case 1:
                return invoke__isSideEffectFree(connection);    
                
            case 2:
                return invoke__getOuterMostBlock(connection);    
            default:
                throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException( operationId, refMetaObject( ), "invoke___Operation(int)"); //$NON-NLS-1$
        }
    
    }    

    // get the JMI interface
    public java.lang.Class<behavior.actions.Block> get___JmiInterface() {
        return behavior.actions.Block.class;
    }

    // to String
    protected String metaObjectToString() {
        return "behavior.actions.Block (Java Type)\nbehavior.actions.Block (MOF Type)"; //$NON-NLS-1$
    }    
}