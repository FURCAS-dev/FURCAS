/**
 * Generated by the MOIN Generator Version 3.0
 **/

package behavior.functions.__impl;

public class FunctionsPackageWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefPackageWrapperImpl<behavior.functions.__impl.FunctionsPackageImpl> implements behavior.functions.FunctionsPackage,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The FunctionsPackage wrapper
     */
    public FunctionsPackageWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, behavior.functions.__impl.FunctionsPackageImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    private behavior.functions.__impl.FunctionsPackageImpl getCastWrappedObject() {
        return (behavior.functions.__impl.FunctionsPackageImpl) getWrappedObject();
    }
    
    public behavior.functions.__impl.FunctionsPackageImpl unwrap() {
        return (behavior.functions.__impl.FunctionsPackageImpl) getWrappedObject();
    }
    
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getFunction()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getFunction(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getFunction(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getParameter()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getParameter(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getParameter(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getSignatureImplementation()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getSignatureImplementation(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getSignatureImplementation(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public behavior.functions.AImplementationSignature getAImplementationSignature()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (behavior.functions.AImplementationSignature) wrapResult(getCastWrappedObject().getAImplementationSignature(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (behavior.functions.AImplementationSignature) wrapResult(getCastWrappedObject().getAImplementationSignature(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public behavior.functions.AParametersSignature getAParametersSignature()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (behavior.functions.AParametersSignature) wrapResult(getCastWrappedObject().getAParametersSignature(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (behavior.functions.AParametersSignature) wrapResult(getCastWrappedObject().getAParametersSignature(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public behavior.functions.AExpressionParameter getAExpressionParameter()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (behavior.functions.AExpressionParameter) wrapResult(getCastWrappedObject().getAExpressionParameter(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (behavior.functions.AExpressionParameter) wrapResult(getCastWrappedObject().getAExpressionParameter(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    // methods for structure type creators
    
    public java.lang.Class<behavior.functions.FunctionsPackage> get___JmiInterface() {
        return behavior.functions.FunctionsPackage.class;
    }
    
    protected String metaObjectToString() {
        return "behavior.functions.FunctionsPackage (Java Type)\nbehavior.functions (MOF Type)"; //$NON-NLS-1$
    }
}