/**
 * Generated by the MOIN Generator Version 3.0
 **/

package behavior.functions.__impl;

public class AExpressionParameterWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<behavior.functions.AExpressionParameter> implements behavior.functions.AExpressionParameter,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AExpressionParameter wrapper
     */
    public AExpressionParameterWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, behavior.functions.__impl.AExpressionParameterImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private behavior.functions.__impl.AExpressionParameterImpl getCastWrappedObject() {
        return (behavior.functions.__impl.AExpressionParameterImpl) getWrappedObject();
    }

    public behavior.functions.AExpressionParameter unwrap() {
        return (behavior.functions.AExpressionParameter) getWrappedObject();
    }
    
    public boolean exists(behavior.expressions.Expression _Expression, behavior.functions.Parameter _Parameter) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Expression), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Parameter));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Expression), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Parameter)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getExpression(behavior.functions.Parameter _Parameter) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getExpression(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Parameter)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getExpression(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Parameter))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getParameter(behavior.expressions.Expression _Expression) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getParameter(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Expression)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getParameter(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Expression))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(behavior.expressions.Expression _Expression, behavior.functions.Parameter _Parameter) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Expression), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Parameter));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Expression), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Parameter)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(behavior.expressions.Expression _Expression, behavior.functions.Parameter _Parameter) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Expression), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Parameter));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Expression), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Parameter)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<behavior.functions.AExpressionParameter> get___JmiInterface() {
        return behavior.functions.AExpressionParameter.class;
    }

    protected String metaObjectToString() {
        return "behavior.functions.AExpressionParameter (Java Type)\nbehavior.functions.A_expression_parameter (MOF Type)"; //$NON-NLS-1$
    }    
}