/**
 * Generated by the MOIN Generator Version 3.0
 **/

package behavior.functions.__impl;

public class AImplementationSignatureWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<behavior.functions.AImplementationSignature> implements behavior.functions.AImplementationSignature,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AImplementationSignature wrapper
     */
    public AImplementationSignatureWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, behavior.functions.__impl.AImplementationSignatureImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private behavior.functions.__impl.AImplementationSignatureImpl getCastWrappedObject() {
        return (behavior.functions.__impl.AImplementationSignatureImpl) getWrappedObject();
    }

    public behavior.functions.AImplementationSignature unwrap() {
        return (behavior.functions.AImplementationSignature) getWrappedObject();
    }
    
    public boolean exists(behavior.actions.Block _Implementation, behavior.functions.Function _Signature) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Implementation), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Signature));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Implementation), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Signature)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public behavior.actions.Block getImplementation(behavior.functions.Function _Signature) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (behavior.actions.Block) wrapResult(getCastWrappedObject().getImplementation(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Signature)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (behavior.actions.Block) wrapResult(getCastWrappedObject().getImplementation(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Signature))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public behavior.functions.Function getSignature(behavior.actions.Block _Implementation) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (behavior.functions.Function) wrapResult(getCastWrappedObject().getSignature(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Implementation)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (behavior.functions.Function) wrapResult(getCastWrappedObject().getSignature(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Implementation))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(behavior.actions.Block _Implementation, behavior.functions.Function _Signature) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Implementation), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Signature));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Implementation), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Signature)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(behavior.actions.Block _Implementation, behavior.functions.Function _Signature) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Implementation), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Signature));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Implementation), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Signature)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<behavior.functions.AImplementationSignature> get___JmiInterface() {
        return behavior.functions.AImplementationSignature.class;
    }

    protected String metaObjectToString() {
        return "behavior.functions.AImplementationSignature (Java Type)\nbehavior.functions.A_implementation_signature (MOF Type)"; //$NON-NLS-1$
    }    
}