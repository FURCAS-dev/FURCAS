/**
 * Generated by the MOIN Generator Version 3.0
 **/

package behavior.expressions.__impl;

public class AClazzAllWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<behavior.expressions.AClazzAll> implements behavior.expressions.AClazzAll,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AClazzAll wrapper
     */
    public AClazzAllWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, behavior.expressions.__impl.AClazzAllImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private behavior.expressions.__impl.AClazzAllImpl getCastWrappedObject() {
        return (behavior.expressions.__impl.AClazzAllImpl) getWrappedObject();
    }

    public behavior.expressions.AClazzAll unwrap() {
        return (behavior.expressions.AClazzAll) getWrappedObject();
    }
    
    public boolean exists(structure.FinexClass _Clazz, behavior.expressions.All _All) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Clazz), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _All));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Clazz), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _All)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public structure.FinexClass getClazz(behavior.expressions.All _All) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (structure.FinexClass) wrapResult(getCastWrappedObject().getClazz(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _All)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (structure.FinexClass) wrapResult(getCastWrappedObject().getClazz(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _All))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getAll(structure.FinexClass _Clazz) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getAll(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Clazz)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getAll(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Clazz))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(structure.FinexClass _Clazz, behavior.expressions.All _All) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Clazz), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _All));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Clazz), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _All)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(structure.FinexClass _Clazz, behavior.expressions.All _All) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Clazz), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _All));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Clazz), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _All)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<behavior.expressions.AClazzAll> get___JmiInterface() {
        return behavior.expressions.AClazzAll.class;
    }

    protected String metaObjectToString() {
        return "behavior.expressions.AClazzAll (Java Type)\nbehavior.expressions.A_clazz_all (MOF Type)"; //$NON-NLS-1$
    }    
}