/**
 * Generated by the MOIN Generator Version 3.0
 **/

package behavior.expressions.__impl;

public class FieldInitializerWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefObjectWrapperImpl<behavior.expressions.__impl.FieldInitializerImpl> implements behavior.expressions.FieldInitializer,com.sap.tc.moin.repository.Partitionable {

    
    static {
    }

    public FieldInitializerWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, behavior.expressions.__impl.FieldInitializerImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    private behavior.expressions.__impl.FieldInitializerImpl getCastWrappedObject() {
        return (behavior.expressions.__impl.FieldInitializerImpl) getWrappedObject();
    }
    
    public behavior.expressions.__impl.FieldInitializerImpl unwrap() {
        return (behavior.expressions.__impl.FieldInitializerImpl) getWrappedObject();
    }
        
    // methods for attributes
     
    // methods for references
    public structure.Field getFieldToInitialize() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (structure.Field) wrapResult(getCastWrappedObject().getFieldToInitialize(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (structure.Field) wrapResult(getCastWrappedObject().getFieldToInitialize(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setFieldToInitialize(structure.Field newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setFieldToInitialize(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setFieldToInitialize(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public behavior.expressions.Expression getInitExpression() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (behavior.expressions.Expression) wrapResult(getCastWrappedObject().getInitExpression(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (behavior.expressions.Expression) wrapResult(getCastWrappedObject().getInitExpression(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setInitExpression(behavior.expressions.Expression newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setInitExpression(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setInitExpression(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

   
    // methods for modeled operations
    
    // methods for internal modeled operations

    // reflective methods
    

    // get the JMI interface
    public java.lang.Class<behavior.expressions.FieldInitializer> get___JmiInterface() {
        return behavior.expressions.FieldInitializer.class;
    }

    // to String
    protected String metaObjectToString() {
        return "behavior.expressions.FieldInitializer (Java Type)\nbehavior.expressions.FieldInitializer (MOF Type)"; //$NON-NLS-1$
    }    
}