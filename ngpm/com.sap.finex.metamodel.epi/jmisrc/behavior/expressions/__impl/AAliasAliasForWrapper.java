/**
 * Generated by the MOIN Generator Version 3.0
 **/

package behavior.expressions.__impl;

public class AAliasAliasForWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<behavior.expressions.AAliasAliasFor> implements behavior.expressions.AAliasAliasFor,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AAliasAliasFor wrapper
     */
    public AAliasAliasForWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, behavior.expressions.__impl.AAliasAliasForImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private behavior.expressions.__impl.AAliasAliasForImpl getCastWrappedObject() {
        return (behavior.expressions.__impl.AAliasAliasForImpl) getWrappedObject();
    }

    public behavior.expressions.AAliasAliasFor unwrap() {
        return (behavior.expressions.AAliasAliasFor) getWrappedObject();
    }
    
    public boolean exists(behavior.expressions.Alias _Alias, behavior.expressions.Expression _AliasFor) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Alias), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AliasFor));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Alias), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AliasFor)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public behavior.expressions.Alias getAlias(behavior.expressions.Expression _AliasFor) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (behavior.expressions.Alias) wrapResult(getCastWrappedObject().getAlias(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AliasFor)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (behavior.expressions.Alias) wrapResult(getCastWrappedObject().getAlias(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AliasFor))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public behavior.expressions.Expression getAliasFor(behavior.expressions.Alias _Alias) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (behavior.expressions.Expression) wrapResult(getCastWrappedObject().getAliasFor(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Alias)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (behavior.expressions.Expression) wrapResult(getCastWrappedObject().getAliasFor(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Alias))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(behavior.expressions.Alias _Alias, behavior.expressions.Expression _AliasFor) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Alias), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AliasFor));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Alias), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AliasFor)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(behavior.expressions.Alias _Alias, behavior.expressions.Expression _AliasFor) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Alias), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AliasFor));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Alias), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AliasFor)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<behavior.expressions.AAliasAliasFor> get___JmiInterface() {
        return behavior.expressions.AAliasAliasFor.class;
    }

    protected String metaObjectToString() {
        return "behavior.expressions.AAliasAliasFor (Java Type)\nbehavior.expressions.A_alias_aliasFor (MOF Type)"; //$NON-NLS-1$
    }    
}