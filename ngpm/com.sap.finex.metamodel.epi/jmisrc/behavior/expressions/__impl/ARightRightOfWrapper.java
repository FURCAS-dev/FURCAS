/**
 * Generated by the MOIN Generator Version 3.0
 **/

package behavior.expressions.__impl;

public class ARightRightOfWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<behavior.expressions.ARightRightOf> implements behavior.expressions.ARightRightOf,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The ARightRightOf wrapper
     */
    public ARightRightOfWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, behavior.expressions.__impl.ARightRightOfImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private behavior.expressions.__impl.ARightRightOfImpl getCastWrappedObject() {
        return (behavior.expressions.__impl.ARightRightOfImpl) getWrappedObject();
    }

    public behavior.expressions.ARightRightOf unwrap() {
        return (behavior.expressions.ARightRightOf) getWrappedObject();
    }
    
    public boolean exists(behavior.expressions.Expression _Right, behavior.expressions.BinaryOperator _RightOf) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Right), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _RightOf));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Right), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _RightOf)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public behavior.expressions.Expression getRight(behavior.expressions.BinaryOperator _RightOf) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (behavior.expressions.Expression) wrapResult(getCastWrappedObject().getRight(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _RightOf)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (behavior.expressions.Expression) wrapResult(getCastWrappedObject().getRight(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _RightOf))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public behavior.expressions.BinaryOperator getRightOf(behavior.expressions.Expression _Right) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (behavior.expressions.BinaryOperator) wrapResult(getCastWrappedObject().getRightOf(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Right)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (behavior.expressions.BinaryOperator) wrapResult(getCastWrappedObject().getRightOf(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Right))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(behavior.expressions.Expression _Right, behavior.expressions.BinaryOperator _RightOf) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Right), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _RightOf));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Right), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _RightOf)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(behavior.expressions.Expression _Right, behavior.expressions.BinaryOperator _RightOf) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Right), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _RightOf));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Right), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _RightOf)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<behavior.expressions.ARightRightOf> get___JmiInterface() {
        return behavior.expressions.ARightRightOf.class;
    }

    protected String metaObjectToString() {
        return "behavior.expressions.ARightRightOf (Java Type)\nbehavior.expressions.A_right_rightOf (MOF Type)"; //$NON-NLS-1$
    }    
}