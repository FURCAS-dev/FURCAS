/**
 * Generated by the MOIN Generator Version 3.0
 **/

package behavior.expressions.__impl;

public final class ExpressionsPackageImpl extends com.sap.tc.moin.repository.core.jmi.reflect.RefPackageImpl
{
        
    public static final java.util.Map<java.lang.String, java.lang.Integer> FEATURE_IDS;
    
    static {
        
        FEATURE_IDS = new java.util.HashMap<java.lang.String, java.lang.Integer>(55);
        FEATURE_IDS.put("literals", Integer.valueOf(0)); //$NON-NLS-1$
        FEATURE_IDS.put("Expression", Integer.valueOf(1)); //$NON-NLS-1$
        FEATURE_IDS.put("BinaryBooleanOperator", Integer.valueOf(2)); //$NON-NLS-1$
        FEATURE_IDS.put("Not", Integer.valueOf(3)); //$NON-NLS-1$
        FEATURE_IDS.put("BinaryNumericOperator", Integer.valueOf(4)); //$NON-NLS-1$
        FEATURE_IDS.put("UnaryNumericOperator", Integer.valueOf(5)); //$NON-NLS-1$
        FEATURE_IDS.put("BooleanOperatorExpression", Integer.valueOf(6)); //$NON-NLS-1$
        FEATURE_IDS.put("NumericOperatorExpression", Integer.valueOf(7)); //$NON-NLS-1$
        FEATURE_IDS.put("FilterExpression", Integer.valueOf(8)); //$NON-NLS-1$
        FEATURE_IDS.put("PathExpression", Integer.valueOf(9)); //$NON-NLS-1$
        FEATURE_IDS.put("Count", Integer.valueOf(10)); //$NON-NLS-1$
        FEATURE_IDS.put("UnaryOperator", Integer.valueOf(11)); //$NON-NLS-1$
        FEATURE_IDS.put("UnaryMinus", Integer.valueOf(12)); //$NON-NLS-1$
        FEATURE_IDS.put("NumericAggregate", Integer.valueOf(13)); //$NON-NLS-1$
        FEATURE_IDS.put("UnaryBooleanOperator", Integer.valueOf(14)); //$NON-NLS-1$
        FEATURE_IDS.put("BooleanAggregate", Integer.valueOf(15)); //$NON-NLS-1$
        FEATURE_IDS.put("Single", Integer.valueOf(16)); //$NON-NLS-1$
        FEATURE_IDS.put("This", Integer.valueOf(17)); //$NON-NLS-1$
        FEATURE_IDS.put("FirstPathExpression", Integer.valueOf(18)); //$NON-NLS-1$
        FEATURE_IDS.put("BinaryOperator", Integer.valueOf(19)); //$NON-NLS-1$
        FEATURE_IDS.put("WithArgument", Integer.valueOf(20)); //$NON-NLS-1$
        FEATURE_IDS.put("ImplicitContext", Integer.valueOf(21)); //$NON-NLS-1$
        FEATURE_IDS.put("Alias", Integer.valueOf(22)); //$NON-NLS-1$
        FEATURE_IDS.put("Tuple", Integer.valueOf(23)); //$NON-NLS-1$
        FEATURE_IDS.put("ObjectCreationExpression", Integer.valueOf(24)); //$NON-NLS-1$
        FEATURE_IDS.put("FieldInitializer", Integer.valueOf(25)); //$NON-NLS-1$
        FEATURE_IDS.put("Equals", Integer.valueOf(26)); //$NON-NLS-1$
        FEATURE_IDS.put("Unequals", Integer.valueOf(27)); //$NON-NLS-1$
        FEATURE_IDS.put("NamedValueExpression", Integer.valueOf(28)); //$NON-NLS-1$
        FEATURE_IDS.put("A_left_leftOf", Integer.valueOf(29)); //$NON-NLS-1$
        FEATURE_IDS.put("A_right_rightOf", Integer.valueOf(30)); //$NON-NLS-1$
        FEATURE_IDS.put("A_condition_conditionOf", Integer.valueOf(31)); //$NON-NLS-1$
        FEATURE_IDS.put("A_field_pathExpression", Integer.valueOf(32)); //$NON-NLS-1$
        FEATURE_IDS.put("A_operandOf_operand", Integer.valueOf(33)); //$NON-NLS-1$
        FEATURE_IDS.put("A_argument_withArgument", Integer.valueOf(34)); //$NON-NLS-1$
        FEATURE_IDS.put("A_alias_aliasFor", Integer.valueOf(35)); //$NON-NLS-1$
        FEATURE_IDS.put("A_classToInstantiate_objectCreationExpression", Integer.valueOf(36)); //$NON-NLS-1$
        FEATURE_IDS.put("A_fieldToInitialize_fieldInitializer", Integer.valueOf(37)); //$NON-NLS-1$
        FEATURE_IDS.put("A_fieldInitializers_creationExpression", Integer.valueOf(38)); //$NON-NLS-1$
        FEATURE_IDS.put("A_initExpression_fieldInitializer", Integer.valueOf(39)); //$NON-NLS-1$
        FEATURE_IDS.put("A_namedValue_namedValueExpression", Integer.valueOf(40)); //$NON-NLS-1$
    }

    // constructors    
    public ExpressionsPackageImpl()
    {
        super();
    }
    public ExpressionsPackageImpl(java.lang.Object workspace, java.lang.String mofId, com.sap.tc.moin.repository.mmi.reflect.RefPackage immediatePackage, com.sap.tc.moin.repository.mmi.reflect.RefObject metaObject)
    {
        super(workspace, mofId, immediatePackage, metaObject);
    }
    // internal enumeration creators
    // internal structure type creators
    // nested packages
    public com.sap.tc.moin.repository.mmi.reflect.RefPackage getLiterals(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refPackage(connection, "literals"); //$NON-NLS-1$
    }
    // classes
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getExpression(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Expression"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getBinaryBooleanOperator(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "BinaryBooleanOperator"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getNot(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Not"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getBinaryNumericOperator(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "BinaryNumericOperator"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getUnaryNumericOperator(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "UnaryNumericOperator"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getBooleanOperatorExpression(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "BooleanOperatorExpression"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getNumericOperatorExpression(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "NumericOperatorExpression"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getFilterExpression(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "FilterExpression"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getPathExpression(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "PathExpression"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getCount(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Count"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getUnaryOperator(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "UnaryOperator"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getUnaryMinus(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "UnaryMinus"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getNumericAggregate(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "NumericAggregate"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getUnaryBooleanOperator(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "UnaryBooleanOperator"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getBooleanAggregate(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "BooleanAggregate"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getSingle(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Single"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getThis(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "This"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getFirstPathExpression(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "FirstPathExpression"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getBinaryOperator(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "BinaryOperator"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getWithArgument(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "WithArgument"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getImplicitContext(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "ImplicitContext"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getAlias(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Alias"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getTuple(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Tuple"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getObjectCreationExpression(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "ObjectCreationExpression"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getFieldInitializer(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "FieldInitializer"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getEquals(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Equals"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getUnequals(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "Unequals"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getNamedValueExpression(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refClass(connection, "NamedValueExpression"); //$NON-NLS-1$
    }
    // associations
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getALeftLeftOf(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "A_left_leftOf"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getARightRightOf(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "A_right_rightOf"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getAConditionConditionOf(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "A_condition_conditionOf"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getAFieldPathExpression(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "A_field_pathExpression"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getAOperandOfOperand(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "A_operandOf_operand"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getAArgumentWithArgument(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "A_argument_withArgument"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getAAliasAliasFor(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "A_alias_aliasFor"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getAClassToInstantiateObjectCreationExpression(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "A_classToInstantiate_objectCreationExpression"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getAFieldToInitializeFieldInitializer(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "A_fieldToInitialize_fieldInitializer"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getAFieldInitializersCreationExpression(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "A_fieldInitializers_creationExpression"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getAInitExpressionFieldInitializer(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "A_initExpression_fieldInitializer"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefAssociation getANamedValueNamedValueExpression(com.sap.tc.moin.repository.core.CoreConnection connection) {
        return  refAssociation(connection, "A_namedValue_namedValueExpression"); //$NON-NLS-1$
    }
    // structure type creators

    protected java.lang.Object create___Extent(java.lang.Object workspace, java.lang.String mofId, com.sap.tc.moin.repository.mmi.reflect.RefPackage immediatePackage, com.sap.tc.moin.repository.mmi.reflect.RefObject metaObject) {
        java.lang.String name = ((com.sap.tc.moin.repository.mmi.model.ModelElement) metaObject).getName();
        com.sap.tc.moin.repository.mmi.reflect.RefBaseObject result = null;
        try {
            switch (FEATURE_IDS.get(name)) {
                case 0:
                    return new behavior.expressions.literals.__impl.LiteralsPackageImpl(workspace, mofId, immediatePackage, metaObject);
                case 1:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
                case 2:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavior.expressions.__impl.BinaryBooleanOperatorImpl")); //$NON-NLS-1$
                case 3:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavior.expressions.__impl.NotImpl")); //$NON-NLS-1$
                case 4:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavior.expressions.__impl.BinaryNumericOperatorImpl")); //$NON-NLS-1$
                case 5:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
                case 6:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
                case 7:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
                case 8:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavior.expressions.__impl.FilterExpressionImpl")); //$NON-NLS-1$
                case 9:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavior.expressions.__impl.PathExpressionImpl")); //$NON-NLS-1$
                case 10:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavior.expressions.__impl.CountImpl")); //$NON-NLS-1$
                case 11:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
                case 12:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavior.expressions.__impl.UnaryMinusImpl")); //$NON-NLS-1$
                case 13:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavior.expressions.__impl.NumericAggregateImpl")); //$NON-NLS-1$
                case 14:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
                case 15:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavior.expressions.__impl.BooleanAggregateImpl")); //$NON-NLS-1$
                case 16:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavior.expressions.__impl.SingleImpl")); //$NON-NLS-1$
                case 17:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavior.expressions.__impl.ThisImpl")); //$NON-NLS-1$
                case 18:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavior.expressions.__impl.FirstPathExpressionImpl")); //$NON-NLS-1$
                case 19:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
                case 20:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
                case 21:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavior.expressions.__impl.ImplicitContextImpl")); //$NON-NLS-1$
                case 22:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavior.expressions.__impl.AliasImpl")); //$NON-NLS-1$
                case 23:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavior.expressions.__impl.TupleImpl")); //$NON-NLS-1$
                case 24:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavior.expressions.__impl.ObjectCreationExpressionImpl")); //$NON-NLS-1$
                case 25:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavior.expressions.__impl.FieldInitializerImpl")); //$NON-NLS-1$
                case 26:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavior.expressions.__impl.EqualsImpl")); //$NON-NLS-1$
                case 27:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavior.expressions.__impl.UnequalsImpl")); //$NON-NLS-1$
                case 28:
                    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("behavior.expressions.__impl.NamedValueExpressionImpl")); //$NON-NLS-1$
                case 29:
                    return new behavior.expressions.__impl.ALeftLeftOfImpl(workspace, mofId, immediatePackage, metaObject);
                case 30:
                    return new behavior.expressions.__impl.ARightRightOfImpl(workspace, mofId, immediatePackage, metaObject);
                case 31:
                    return new behavior.expressions.__impl.AConditionConditionOfImpl(workspace, mofId, immediatePackage, metaObject);
                case 32:
                    return new behavior.expressions.__impl.AFieldPathExpressionImpl(workspace, mofId, immediatePackage, metaObject);
                case 33:
                    return new behavior.expressions.__impl.AOperandOfOperandImpl(workspace, mofId, immediatePackage, metaObject);
                case 34:
                    return new behavior.expressions.__impl.AArgumentWithArgumentImpl(workspace, mofId, immediatePackage, metaObject);
                case 35:
                    return new behavior.expressions.__impl.AAliasAliasForImpl(workspace, mofId, immediatePackage, metaObject);
                case 36:
                    return new behavior.expressions.__impl.AClassToInstantiateObjectCreationExpressionImpl(workspace, mofId, immediatePackage, metaObject);
                case 37:
                    return new behavior.expressions.__impl.AFieldToInitializeFieldInitializerImpl(workspace, mofId, immediatePackage, metaObject);
                case 38:
                    return new behavior.expressions.__impl.AFieldInitializersCreationExpressionImpl(workspace, mofId, immediatePackage, metaObject);
                case 39:
                    return new behavior.expressions.__impl.AInitExpressionFieldInitializerImpl(workspace, mofId, immediatePackage, metaObject);
                case 40:
                    return new behavior.expressions.__impl.ANamedValueNamedValueExpressionImpl(workspace, mofId, immediatePackage, metaObject);
                default:
                    throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException(name, null, "create___Extent()"); //$NON-NLS-1$
        }
        }
        catch(com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            throw ex;
        }
        catch(java.lang.Exception ex) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }        
    }

    public java.lang.Class<behavior.expressions.ExpressionsPackage> get___JmiInterface() {
        return behavior.expressions.ExpressionsPackage.class;
    }
    
    protected void initialize() {
        if (___refPackages == null) {
            ___refPackages = new java.util.ArrayList<RefPackageAndName>(1);
            ___refPackagesByName = new java.util.HashMap<String, RefPackageAndName>();
            java.lang.String name = ""; //$NON-NLS-1$
            RefPackageAndName rpan = null;
            name = "literals"; //$NON-NLS-1$
            rpan = new RefPackageAndName(name, "behavior.expressions.literals.LiteralsPackage", false); //$NON-NLS-1$
            ___refPackages.add(rpan);
            ___refPackagesByName.put(name, rpan);
        }
  
        if (___refClasses == null) {
            ___refClasses = new java.util.ArrayList<RefClassAndName>(28);
            ___refClassesByName = new java.util.HashMap<String, RefClassAndName>();
            java.lang.String name = ""; //$NON-NLS-1$
            RefClassAndName rcan = null;
            name = "Expression"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavior.expressions.Expression"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "BinaryBooleanOperator"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavior.expressions.BinaryBooleanOperator"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Not"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavior.expressions.Not"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "BinaryNumericOperator"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavior.expressions.BinaryNumericOperator"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "UnaryNumericOperator"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavior.expressions.UnaryNumericOperator"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "BooleanOperatorExpression"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavior.expressions.BooleanOperatorExpression"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "NumericOperatorExpression"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavior.expressions.NumericOperatorExpression"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "FilterExpression"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavior.expressions.FilterExpression"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "PathExpression"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavior.expressions.PathExpression"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Count"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavior.expressions.Count"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "UnaryOperator"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavior.expressions.UnaryOperator"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "UnaryMinus"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavior.expressions.UnaryMinus"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "NumericAggregate"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavior.expressions.NumericAggregate"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "UnaryBooleanOperator"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavior.expressions.UnaryBooleanOperator"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "BooleanAggregate"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavior.expressions.BooleanAggregate"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Single"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavior.expressions.Single"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "This"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavior.expressions.This"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "FirstPathExpression"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavior.expressions.FirstPathExpression"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "BinaryOperator"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavior.expressions.BinaryOperator"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "WithArgument"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavior.expressions.WithArgument"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "ImplicitContext"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavior.expressions.ImplicitContext"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Alias"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavior.expressions.Alias"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Tuple"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavior.expressions.Tuple"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "ObjectCreationExpression"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavior.expressions.ObjectCreationExpression"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "FieldInitializer"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavior.expressions.FieldInitializer"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Equals"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavior.expressions.Equals"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "Unequals"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavior.expressions.Unequals"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
            name = "NamedValueExpression"; //$NON-NLS-1$
            rcan = new RefClassAndName(name, "behavior.expressions.NamedValueExpression"); //$NON-NLS-1$
            ___refClasses.add(rcan);
            ___refClassesByName.put(name, rcan);
        }
  
        if (___refAssociations == null) {
            ___refAssociations = new java.util.ArrayList<RefAssociationAndName>(12);
            ___refAssociationsByName = new java.util.HashMap<String, RefAssociationAndName>();
            java.lang.String name = ""; //$NON-NLS-1$
            RefAssociationAndName raan = null;
            name = "A_left_leftOf"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "behavior.expressions.ALeftLeftOf"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "A_right_rightOf"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "behavior.expressions.ARightRightOf"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "A_condition_conditionOf"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "behavior.expressions.AConditionConditionOf"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "A_field_pathExpression"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "behavior.expressions.AFieldPathExpression"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "A_operandOf_operand"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "behavior.expressions.AOperandOfOperand"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "A_argument_withArgument"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "behavior.expressions.AArgumentWithArgument"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "A_alias_aliasFor"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "behavior.expressions.AAliasAliasFor"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "A_classToInstantiate_objectCreationExpression"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "behavior.expressions.AClassToInstantiateObjectCreationExpression"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "A_fieldToInitialize_fieldInitializer"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "behavior.expressions.AFieldToInitializeFieldInitializer"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "A_fieldInitializers_creationExpression"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "behavior.expressions.AFieldInitializersCreationExpression"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "A_initExpression_fieldInitializer"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "behavior.expressions.AInitExpressionFieldInitializer"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
            name = "A_namedValue_namedValueExpression"; //$NON-NLS-1$
            raan = new RefAssociationAndName(name, "behavior.expressions.ANamedValueNamedValueExpression"); //$NON-NLS-1$
            ___refAssociations.add(raan);
            ___refAssociationsByName.put(name, raan);
        }
    }
    
    @Override
    public com.sap.tc.moin.repository.spi.core.Wrapper<behavior.expressions.__impl.ExpressionsPackageImpl> createWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, boolean synchronize) {
        return new behavior.expressions.__impl.ExpressionsPackageWrapper(conn, this, synchronize);
    }

}