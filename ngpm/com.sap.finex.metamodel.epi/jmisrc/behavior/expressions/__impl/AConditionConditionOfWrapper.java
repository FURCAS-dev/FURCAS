/**
 * Generated by the MOIN Generator Version 3.0
 **/

package behavior.expressions.__impl;

public class AConditionConditionOfWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<behavior.expressions.AConditionConditionOf> implements behavior.expressions.AConditionConditionOf,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AConditionConditionOf wrapper
     */
    public AConditionConditionOfWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, behavior.expressions.__impl.AConditionConditionOfImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private behavior.expressions.__impl.AConditionConditionOfImpl getCastWrappedObject() {
        return (behavior.expressions.__impl.AConditionConditionOfImpl) getWrappedObject();
    }

    public behavior.expressions.AConditionConditionOf unwrap() {
        return (behavior.expressions.AConditionConditionOf) getWrappedObject();
    }
    
    public boolean exists(behavior.expressions.Expression _Condition, behavior.expressions.FilterExpression _ConditionOf) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Condition), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConditionOf));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Condition), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConditionOf)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public behavior.expressions.Expression getCondition(behavior.expressions.FilterExpression _ConditionOf) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (behavior.expressions.Expression) wrapResult(getCastWrappedObject().getCondition(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConditionOf)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (behavior.expressions.Expression) wrapResult(getCastWrappedObject().getCondition(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConditionOf))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public behavior.expressions.FilterExpression getConditionOf(behavior.expressions.Expression _Condition) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (behavior.expressions.FilterExpression) wrapResult(getCastWrappedObject().getConditionOf(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Condition)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (behavior.expressions.FilterExpression) wrapResult(getCastWrappedObject().getConditionOf(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Condition))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(behavior.expressions.Expression _Condition, behavior.expressions.FilterExpression _ConditionOf) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Condition), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConditionOf));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Condition), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConditionOf)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(behavior.expressions.Expression _Condition, behavior.expressions.FilterExpression _ConditionOf) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Condition), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConditionOf));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Condition), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConditionOf)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<behavior.expressions.AConditionConditionOf> get___JmiInterface() {
        return behavior.expressions.AConditionConditionOf.class;
    }

    protected String metaObjectToString() {
        return "behavior.expressions.AConditionConditionOf (Java Type)\nbehavior.expressions.A_condition_conditionOf (MOF Type)"; //$NON-NLS-1$
    }    
}