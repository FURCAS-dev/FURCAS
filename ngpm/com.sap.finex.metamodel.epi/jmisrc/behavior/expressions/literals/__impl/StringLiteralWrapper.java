/**
 * Generated by the MOIN Generator Version 3.0
 **/

package behavior.expressions.literals.__impl;

public class StringLiteralWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefObjectWrapperImpl<behavior.expressions.literals.__impl.StringLiteralImpl> implements behavior.expressions.literals.StringLiteral,com.sap.tc.moin.repository.Partitionable {

        
    private static final java.util.Map<java.lang.String, java.lang.Integer> OPERATION_IDS;

    static {
        
        OPERATION_IDS = new java.util.HashMap<java.lang.String, java.lang.Integer>();
        OPERATION_IDS.put("getImpliedType", Integer.valueOf(0)); //$NON-NLS-1$
        OPERATION_IDS.put("isNumeric", Integer.valueOf(1)); //$NON-NLS-1$
        OPERATION_IDS.put("isBoolean", Integer.valueOf(2)); //$NON-NLS-1$
        OPERATION_IDS.put("numericPostType", Integer.valueOf(3)); //$NON-NLS-1$
        OPERATION_IDS.put("getEnclosingType", Integer.valueOf(4)); //$NON-NLS-1$
        OPERATION_IDS.put("isSideEffectFree", Integer.valueOf(5)); //$NON-NLS-1$
        OPERATION_IDS.put("getImplicitContextType", Integer.valueOf(6)); //$NON-NLS-1$
        OPERATION_IDS.put("getAliasesDefinedByEvaluating", Integer.valueOf(7)); //$NON-NLS-1$
        OPERATION_IDS.put("getTuplesWhereThisIsFieldInitializer", Integer.valueOf(8)); //$NON-NLS-1$
        OPERATION_IDS.put("getAllVisibleAliases", Integer.valueOf(9)); //$NON-NLS-1$
    }

    public StringLiteralWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, behavior.expressions.literals.__impl.StringLiteralImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    @SuppressWarnings("unused")
    private behavior.expressions.literals.__impl.StringLiteralImpl getCastWrappedObject() {
        return (behavior.expressions.literals.__impl.StringLiteralImpl) getWrappedObject();
    }
    
    private behavior.expressions.literals.__impl.StringLiteralImpl getCastWrappedObject(com.sap.tc.moin.repository.core.CorePartitionable resolved) {
        return (behavior.expressions.literals.__impl.StringLiteralImpl) resolved;
    }
    
    public behavior.expressions.literals.__impl.StringLiteralImpl unwrap() {
        return (behavior.expressions.literals.__impl.StringLiteralImpl) getWrappedObject();
    }
        
    // methods for attributes
    public java.lang.String getLiteral() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        com.sap.tc.moin.repository.core.CorePartitionable resolved = mriReference.getIfResolved();
        if (resolved != null) {
            return getCastWrappedObject(resolved).getLiteral();
        }
            try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().getLiteral();
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().getLiteral(); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public void setLiteral(java.lang.String newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setLiteral(connection, newValue);
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setLiteral(connection, newValue);
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

     
    // methods for references
    public structure.Type getType() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (structure.Type) wrapResult(getCastWrappedObject().getType(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (structure.Type) wrapResult(getCastWrappedObject().getType(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setType(structure.Type newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setType(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setType(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public behavior.expressions.BinaryOperator getLeftOf() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (behavior.expressions.BinaryOperator) wrapResult(getCastWrappedObject().getLeftOf(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (behavior.expressions.BinaryOperator) wrapResult(getCastWrappedObject().getLeftOf(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setLeftOf(behavior.expressions.BinaryOperator newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setLeftOf(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setLeftOf(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public behavior.expressions.BinaryOperator getRightOf() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (behavior.expressions.BinaryOperator) wrapResult(getCastWrappedObject().getRightOf(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (behavior.expressions.BinaryOperator) wrapResult(getCastWrappedObject().getRightOf(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setRightOf(behavior.expressions.BinaryOperator newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setRightOf(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setRightOf(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public behavior.expressions.FilterExpression getConditionOf() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (behavior.expressions.FilterExpression) wrapResult(getCastWrappedObject().getConditionOf(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (behavior.expressions.FilterExpression) wrapResult(getCastWrappedObject().getConditionOf(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setConditionOf(behavior.expressions.FilterExpression newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setConditionOf(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setConditionOf(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public behavior.expressions.UnaryOperator getOperandOf() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (behavior.expressions.UnaryOperator) wrapResult(getCastWrappedObject().getOperandOf(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (behavior.expressions.UnaryOperator) wrapResult(getCastWrappedObject().getOperandOf(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setOperandOf(behavior.expressions.UnaryOperator newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setOperandOf(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setOperandOf(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public behavior.expressions.WithArgument getWithArgument() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (behavior.expressions.WithArgument) wrapResult(getCastWrappedObject().getWithArgument(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (behavior.expressions.WithArgument) wrapResult(getCastWrappedObject().getWithArgument(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setWithArgument(behavior.expressions.WithArgument newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setWithArgument(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setWithArgument(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public behavior.expressions.Alias getAlias() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (behavior.expressions.Alias) wrapResult(getCastWrappedObject().getAlias(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (behavior.expressions.Alias) wrapResult(getCastWrappedObject().getAlias(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setAlias(behavior.expressions.Alias newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setAlias(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setAlias(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public behavior.expressions.FieldInitializer getFieldInitializer() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (behavior.expressions.FieldInitializer) wrapResult(getCastWrappedObject().getFieldInitializer(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (behavior.expressions.FieldInitializer) wrapResult(getCastWrappedObject().getFieldInitializer(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setFieldInitializer(behavior.expressions.FieldInitializer newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setFieldInitializer(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setFieldInitializer(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

   
    // methods for modeled operations
    public structure.Type getImpliedType(java.lang.String name) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(1);
        try {
            parameterList.add(name);
            return (structure.Type)___invokeOperation(connection, 0, "E0001D0AF446B591B1E711DECB850019D29902CC", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public boolean isNumeric() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.lang.Boolean)___invokeOperation(connection, 1, "E0003E7BDB8B1E71B27C11DEB93A00155883529C", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public boolean isBoolean() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.lang.Boolean)___invokeOperation(connection, 2, "E0003E7BDB8D8F70B27C11DEB87100155883529C", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public structure.Type numericPostType(java.lang.String operator, structure.Type preType1, structure.Type preType2) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(3);
        try {
            parameterList.add(operator);
            parameterList.add(preType1);
            parameterList.add(preType2);
            return (structure.Type)___invokeOperation(connection, 3, "E0003E7BDB6760A3B2BA11DEB0810019D29902CC", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public structure.Type getEnclosingType() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (structure.Type)___invokeOperation(connection, 4, "E0003E7BC45BEE91B74111DE872100155883529C", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public boolean isSideEffectFree() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.lang.Boolean)___invokeOperation(connection, 5, "E0003E7BEAB6CF01B96811DEB969001A6BCDC3B3", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public structure.Type getImplicitContextType() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (structure.Type)___invokeOperation(connection, 6, "E0003E7B9846E051D29711DE801F00155883529C", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public java.util.Collection<behavior.expressions.Alias> getAliasesDefinedByEvaluating() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.util.Collection<behavior.expressions.Alias>)___invokeOperation(connection, 7, "E0003E7B66275F61DAAC11DE96EEF8E30A140E7A", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public java.util.Collection<behavior.expressions.Tuple> getTuplesWhereThisIsFieldInitializer() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.util.Collection<behavior.expressions.Tuple>)___invokeOperation(connection, 8, "E0003E7B9B8C5CA0DA1111DEB6820019D29902CC", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public java.util.Collection<behavior.expressions.Alias> getAllVisibleAliases() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.util.Collection<behavior.expressions.Alias>)___invokeOperation(connection, 9, "E0003E7B8F9FED32DAA711DE9206D77E0A140E7A", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    
    // methods for internal modeled operations
    private structure.Type invoke__getImpliedType(com.sap.tc.moin.repository.core.CoreConnection connection, java.lang.String name) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            operationParameters.put("name", unwrapArg(name));
            return (structure.Type)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "getImpliedType", getCastWrappedObject( ), operationParameters));
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }
    private boolean invoke__isNumeric(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            return ((java.lang.Boolean)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "isNumeric", getCastWrappedObject( ), operationParameters))).booleanValue();
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }
    private boolean invoke__isBoolean(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            return ((java.lang.Boolean)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "isBoolean", getCastWrappedObject( ), operationParameters))).booleanValue();
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }
    private structure.Type invoke__numericPostType(com.sap.tc.moin.repository.core.CoreConnection connection, java.lang.String operator, structure.Type preType1, structure.Type preType2) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            operationParameters.put("operator", unwrapArg(operator));
            operationParameters.put("preType1", unwrapArg(preType1));
            operationParameters.put("preType2", unwrapArg(preType2));
            return (structure.Type)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "numericPostType", getCastWrappedObject( ), operationParameters));
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }
    private structure.Type invoke__getEnclosingType(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            return (structure.Type)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "getEnclosingType", getCastWrappedObject( ), operationParameters));
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }
    private boolean invoke__isSideEffectFree(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            return ((java.lang.Boolean)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "isSideEffectFree", getCastWrappedObject( ), operationParameters))).booleanValue();
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }
    private structure.Type invoke__getImplicitContextType(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            return (structure.Type)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "getImplicitContextType", getCastWrappedObject( ), operationParameters));
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }
    private java.util.Collection<behavior.expressions.Alias> invoke__getAliasesDefinedByEvaluating(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            return (java.util.Collection)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "getAliasesDefinedByEvaluating", getCastWrappedObject( ), operationParameters));
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }
    private java.util.Collection<behavior.expressions.Tuple> invoke__getTuplesWhereThisIsFieldInitializer(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            return (java.util.Collection)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "getTuplesWhereThisIsFieldInitializer", getCastWrappedObject( ), operationParameters));
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }
    private java.util.Collection<behavior.expressions.Alias> invoke__getAllVisibleAliases(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            // delegating to the OCL service org.omg.sap2mof.OperationCodeOcl
            java.util.Map operationParameters = new java.util.HashMap();
            return (java.util.Collection)wrapResult(connection.getSession().getOclService().evaluateOclBodyExpression(connection, "getAllVisibleAliases", getCastWrappedObject( ), operationParameters));
            // end of implementation provided in tag org.omg.sap2mof.OperationCodeOcl
        } catch(com.sap.tc.moin.repository.exception.MoinBaseException ex) {
                throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
    }

    // reflective methods
    @Override
    public Object refInvokeOperation(com.sap.tc.moin.repository.core.CoreConnection connection, java.lang.String requestedOperation, java.util.List<? extends Object> args) throws com.sap.tc.moin.repository.mmi.reflect.RefException {
        if (requestedOperation == null) {
            throw new com.sap.tc.moin.repository.mmi.reflect.InvalidNameException(requestedOperation);
        }
        java.lang.Integer operationId = OPERATION_IDS.get(requestedOperation);
        if (operationId == null) {
            throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException(requestedOperation, refMetaObject(), "refInvokeOperation(String)"); //$NON-NLS-1$
        }
        switch (operationId) {
                
            case 0:
                return ___invokeOperation( connection, operationId, "E0001D0AF446B591B1E711DECB850019D29902CC", args ); //$NON-NLS-1$    
                
            case 1:
                return ___invokeOperation( connection, operationId, "E0003E7BDB8B1E71B27C11DEB93A00155883529C", args ); //$NON-NLS-1$    
                
            case 2:
                return ___invokeOperation( connection, operationId, "E0003E7BDB8D8F70B27C11DEB87100155883529C", args ); //$NON-NLS-1$    
                
            case 3:
                return ___invokeOperation( connection, operationId, "E0003E7BDB6760A3B2BA11DEB0810019D29902CC", args ); //$NON-NLS-1$    
                
            case 4:
                return ___invokeOperation( connection, operationId, "E0003E7BC45BEE91B74111DE872100155883529C", args ); //$NON-NLS-1$    
                
            case 5:
                return ___invokeOperation( connection, operationId, "E0003E7BEAB6CF01B96811DEB969001A6BCDC3B3", args ); //$NON-NLS-1$    
                
            case 6:
                return ___invokeOperation( connection, operationId, "E0003E7B9846E051D29711DE801F00155883529C", args ); //$NON-NLS-1$    
                
            case 7:
                return ___invokeOperation( connection, operationId, "E0003E7B66275F61DAAC11DE96EEF8E30A140E7A", args ); //$NON-NLS-1$    
                
            case 8:
                return ___invokeOperation( connection, operationId, "E0003E7B9B8C5CA0DA1111DEB6820019D29902CC", args ); //$NON-NLS-1$    
                
            case 9:
                return ___invokeOperation( connection, operationId, "E0003E7B8F9FED32DAA711DE9206D77E0A140E7A", args ); //$NON-NLS-1$    
            default:
                throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException(requestedOperation, refMetaObject(), "refInvokeOperation(String)"); //$NON-NLS-1$
        }
    }

    @Override
    public Object invoke___Operation(com.sap.tc.moin.repository.core.CoreConnection connection, int operationId, java.util.List<? extends Object> args) throws com.sap.tc.moin.repository.mmi.reflect.RefException {
        switch (operationId) {
                
            case 0:
                return invoke__getImpliedType(connection, (java.lang.String) args.get(0));    
                
            case 1:
                return invoke__isNumeric(connection);    
                
            case 2:
                return invoke__isBoolean(connection);    
                
            case 3:
                return invoke__numericPostType(connection, (java.lang.String) args.get(0), (structure.Type) args.get(1), (structure.Type) args.get(2));    
                
            case 4:
                return invoke__getEnclosingType(connection);    
                
            case 5:
                return invoke__isSideEffectFree(connection);    
                
            case 6:
                return invoke__getImplicitContextType(connection);    
                
            case 7:
                return invoke__getAliasesDefinedByEvaluating(connection);    
                
            case 8:
                return invoke__getTuplesWhereThisIsFieldInitializer(connection);    
                
            case 9:
                return invoke__getAllVisibleAliases(connection);    
            default:
                throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException( operationId, refMetaObject( ), "invoke___Operation(int)"); //$NON-NLS-1$
        }

    }    

    // get the JMI interface
    @SuppressWarnings("unchecked")
    public java.lang.Class<behavior.expressions.literals.StringLiteral> get___JmiInterface() {
        return behavior.expressions.literals.StringLiteral.class;
    }

    // to String
    protected String metaObjectToString() {
        return "behavior.expressions.literals.StringLiteral (Java Type)\nbehavior.expressions.literals.StringLiteral (MOF Type)"; //$NON-NLS-1$
    }    
}