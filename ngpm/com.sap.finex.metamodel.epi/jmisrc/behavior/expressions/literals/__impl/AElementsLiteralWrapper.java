/**
 * Generated by the MOIN Generator Version 3.0
 **/

package behavior.expressions.literals.__impl;

public class AElementsLiteralWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<behavior.expressions.literals.AElementsLiteral> implements behavior.expressions.literals.AElementsLiteral,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AElementsLiteral wrapper
     */
    public AElementsLiteralWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, behavior.expressions.literals.__impl.AElementsLiteralImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private behavior.expressions.literals.__impl.AElementsLiteralImpl getCastWrappedObject() {
        return (behavior.expressions.literals.__impl.AElementsLiteralImpl) getWrappedObject();
    }

    public behavior.expressions.literals.AElementsLiteral unwrap() {
        return (behavior.expressions.literals.AElementsLiteral) getWrappedObject();
    }
    
    public boolean exists(behavior.expressions.Expression _Elements, behavior.expressions.literals.MultiObjectLiteral _Literal) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Elements), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Literal));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Elements), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Literal)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getElements(behavior.expressions.literals.MultiObjectLiteral _Literal) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getElements(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Literal)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getElements(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Literal))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public behavior.expressions.literals.MultiObjectLiteral getLiteral(behavior.expressions.Expression _Elements) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (behavior.expressions.literals.MultiObjectLiteral) wrapResult(getCastWrappedObject().getLiteral(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Elements)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (behavior.expressions.literals.MultiObjectLiteral) wrapResult(getCastWrappedObject().getLiteral(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Elements))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(behavior.expressions.Expression _Elements, behavior.expressions.literals.MultiObjectLiteral _Literal) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Elements), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Literal));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Elements), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Literal)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(behavior.expressions.Expression _Elements, behavior.expressions.literals.MultiObjectLiteral _Literal) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Elements), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Literal));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Elements), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Literal)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<behavior.expressions.literals.AElementsLiteral> get___JmiInterface() {
        return behavior.expressions.literals.AElementsLiteral.class;
    }

    protected String metaObjectToString() {
        return "behavior.expressions.literals.AElementsLiteral (Java Type)\nbehavior.expressions.literals.A_elements_literal (MOF Type)"; //$NON-NLS-1$
    }    
}