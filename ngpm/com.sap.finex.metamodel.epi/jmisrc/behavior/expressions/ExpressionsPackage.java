/**
 * Generated by the MOIN Generator Version 3.0
 **/

package behavior.expressions;

/**
 * This interface is not intended to be implemented by clients.
 */
public interface ExpressionsPackage extends com.sap.tc.moin.repository.mmi.reflect.RefPackage
{
    /**
     * Extent descriptor
     */
    public final com.sap.tc.moin.repository.mmi.descriptors.PackageDescriptor<behavior.expressions.ExpressionsPackage> PACKAGE_DESCRIPTOR = new com.sap.tc.moin.repository.mmi.descriptors.PackageDescriptor<behavior.expressions.ExpressionsPackage>("E0003E7B7484E77DB1A911DEA33C00155883529C", "sap.com/finex/metamodel", "behavior", "expressions"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ 
    // packages
    public behavior.expressions.literals.LiteralsPackage getLiterals();
    // classes
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getExpression();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getBinaryBooleanOperator();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getNot();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getBinaryNumericOperator();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getUnaryNumericOperator();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getBooleanOperatorExpression();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getNumericOperatorExpression();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getFilterExpression();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getPathExpression();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getCount();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getUnaryOperator();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getUnaryMinus();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getNumericAggregate();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getUnaryBooleanOperator();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getBooleanAggregate();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getSingle();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getThis();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getFirstPathExpression();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getBinaryOperator();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getWithArgument();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getImplicitContext();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getAlias();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getTuple();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getObjectCreationExpression();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getFieldInitializer();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getEquals();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getUnequals();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getNamedValueExpression();
    // associations
    public behavior.expressions.ALeftLeftOf getALeftLeftOf();
    public behavior.expressions.ARightRightOf getARightRightOf();
    public behavior.expressions.AConditionConditionOf getAConditionConditionOf();
    public behavior.expressions.AFieldPathExpression getAFieldPathExpression();
    public behavior.expressions.AOperandOfOperand getAOperandOfOperand();
    public behavior.expressions.AArgumentWithArgument getAArgumentWithArgument();
    public behavior.expressions.AAliasAliasFor getAAliasAliasFor();
    public behavior.expressions.AClassToInstantiateObjectCreationExpression getAClassToInstantiateObjectCreationExpression();
    public behavior.expressions.AFieldToInitializeFieldInitializer getAFieldToInitializeFieldInitializer();
    public behavior.expressions.AFieldInitializersCreationExpression getAFieldInitializersCreationExpression();
    public behavior.expressions.AInitExpressionFieldInitializer getAInitExpressionFieldInitializer();
    public behavior.expressions.ANamedValueNamedValueExpression getANamedValueNamedValueExpression();
}