/**
 * Generated by the MOIN Generator Version 3.0
 **/

package behavior.expressions.oql.__impl;

public class AFromExpressionFromClauseWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<behavior.expressions.oql.AFromExpressionFromClause> implements behavior.expressions.oql.AFromExpressionFromClause,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AFromExpressionFromClause wrapper
     */
    public AFromExpressionFromClauseWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, behavior.expressions.oql.__impl.AFromExpressionFromClauseImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private behavior.expressions.oql.__impl.AFromExpressionFromClauseImpl getCastWrappedObject() {
        return (behavior.expressions.oql.__impl.AFromExpressionFromClauseImpl) getWrappedObject();
    }

    public behavior.expressions.oql.AFromExpressionFromClause unwrap() {
        return (behavior.expressions.oql.AFromExpressionFromClause) getWrappedObject();
    }
    
    public boolean exists(behavior.expressions.Expression _FromExpression, behavior.expressions.oql.FromClause _FromClause) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FromExpression), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FromClause));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FromExpression), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FromClause)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public behavior.expressions.Expression getFromExpression(behavior.expressions.oql.FromClause _FromClause) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (behavior.expressions.Expression) wrapResult(getCastWrappedObject().getFromExpression(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FromClause)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (behavior.expressions.Expression) wrapResult(getCastWrappedObject().getFromExpression(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FromClause))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public behavior.expressions.oql.FromClause getFromClause(behavior.expressions.Expression _FromExpression) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (behavior.expressions.oql.FromClause) wrapResult(getCastWrappedObject().getFromClause(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FromExpression)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (behavior.expressions.oql.FromClause) wrapResult(getCastWrappedObject().getFromClause(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FromExpression))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(behavior.expressions.Expression _FromExpression, behavior.expressions.oql.FromClause _FromClause) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FromExpression), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FromClause));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FromExpression), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FromClause)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(behavior.expressions.Expression _FromExpression, behavior.expressions.oql.FromClause _FromClause) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FromExpression), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FromClause));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FromExpression), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FromClause)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<behavior.expressions.oql.AFromExpressionFromClause> get___JmiInterface() {
        return behavior.expressions.oql.AFromExpressionFromClause.class;
    }

    protected String metaObjectToString() {
        return "behavior.expressions.oql.AFromExpressionFromClause (Java Type)\nbehavior.expressions.oql.A_fromExpression_fromClause (MOF Type)"; //$NON-NLS-1$
    }    
}