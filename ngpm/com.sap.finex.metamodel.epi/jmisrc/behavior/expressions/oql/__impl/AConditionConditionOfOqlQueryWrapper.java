/**
 * Generated by the MOIN Generator Version 3.0
 **/

package behavior.expressions.oql.__impl;

public class AConditionConditionOfOqlQueryWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<behavior.expressions.oql.AConditionConditionOfOqlQuery> implements behavior.expressions.oql.AConditionConditionOfOqlQuery,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AConditionConditionOfOqlQuery wrapper
     */
    public AConditionConditionOfOqlQueryWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, behavior.expressions.oql.__impl.AConditionConditionOfOqlQueryImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private behavior.expressions.oql.__impl.AConditionConditionOfOqlQueryImpl getCastWrappedObject() {
        return (behavior.expressions.oql.__impl.AConditionConditionOfOqlQueryImpl) getWrappedObject();
    }

    public behavior.expressions.oql.AConditionConditionOfOqlQuery unwrap() {
        return (behavior.expressions.oql.AConditionConditionOfOqlQuery) getWrappedObject();
    }
    
    public boolean exists(behavior.expressions.Expression _Condition, behavior.expressions.oql.OqlQuery _ConditionOfOqlQuery) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Condition), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConditionOfOqlQuery));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Condition), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConditionOfOqlQuery)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public behavior.expressions.Expression getCondition(behavior.expressions.oql.OqlQuery _ConditionOfOqlQuery) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (behavior.expressions.Expression) wrapResult(getCastWrappedObject().getCondition(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConditionOfOqlQuery)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (behavior.expressions.Expression) wrapResult(getCastWrappedObject().getCondition(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConditionOfOqlQuery))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public behavior.expressions.oql.OqlQuery getConditionOfOqlQuery(behavior.expressions.Expression _Condition) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (behavior.expressions.oql.OqlQuery) wrapResult(getCastWrappedObject().getConditionOfOqlQuery(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Condition)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (behavior.expressions.oql.OqlQuery) wrapResult(getCastWrappedObject().getConditionOfOqlQuery(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Condition))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(behavior.expressions.Expression _Condition, behavior.expressions.oql.OqlQuery _ConditionOfOqlQuery) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Condition), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConditionOfOqlQuery));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Condition), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConditionOfOqlQuery)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(behavior.expressions.Expression _Condition, behavior.expressions.oql.OqlQuery _ConditionOfOqlQuery) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Condition), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConditionOfOqlQuery));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Condition), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ConditionOfOqlQuery)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<behavior.expressions.oql.AConditionConditionOfOqlQuery> get___JmiInterface() {
        return behavior.expressions.oql.AConditionConditionOfOqlQuery.class;
    }

    protected String metaObjectToString() {
        return "behavior.expressions.oql.AConditionConditionOfOqlQuery (Java Type)\nbehavior.expressions.oql.A_condition_conditionOfOqlQuery (MOF Type)"; //$NON-NLS-1$
    }    
}