/**
 * Generated by the MOIN Generator Version 3.0
 **/

package behavior.expressions.oql.__impl;

public class AFromClausesFromClauseOfOqlQueryWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<behavior.expressions.oql.AFromClausesFromClauseOfOqlQuery> implements behavior.expressions.oql.AFromClausesFromClauseOfOqlQuery,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AFromClausesFromClauseOfOqlQuery wrapper
     */
    public AFromClausesFromClauseOfOqlQueryWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, behavior.expressions.oql.__impl.AFromClausesFromClauseOfOqlQueryImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private behavior.expressions.oql.__impl.AFromClausesFromClauseOfOqlQueryImpl getCastWrappedObject() {
        return (behavior.expressions.oql.__impl.AFromClausesFromClauseOfOqlQueryImpl) getWrappedObject();
    }

    public behavior.expressions.oql.AFromClausesFromClauseOfOqlQuery unwrap() {
        return (behavior.expressions.oql.AFromClausesFromClauseOfOqlQuery) getWrappedObject();
    }
    
    public boolean exists(behavior.expressions.oql.FromClause _FromClauses, behavior.expressions.oql.OqlQuery _FromClauseOfOqlQuery) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FromClauses), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FromClauseOfOqlQuery));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FromClauses), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FromClauseOfOqlQuery)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.List getFromClauses(behavior.expressions.oql.OqlQuery _FromClauseOfOqlQuery) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.List) wrapResult(getCastWrappedObject().getFromClauses(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FromClauseOfOqlQuery)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.List) wrapResult(getCastWrappedObject().getFromClauses(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FromClauseOfOqlQuery))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public behavior.expressions.oql.OqlQuery getFromClauseOfOqlQuery(behavior.expressions.oql.FromClause _FromClauses) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (behavior.expressions.oql.OqlQuery) wrapResult(getCastWrappedObject().getFromClauseOfOqlQuery(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FromClauses)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (behavior.expressions.oql.OqlQuery) wrapResult(getCastWrappedObject().getFromClauseOfOqlQuery(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FromClauses))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(behavior.expressions.oql.FromClause _FromClauses, behavior.expressions.oql.OqlQuery _FromClauseOfOqlQuery) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FromClauses), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FromClauseOfOqlQuery));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FromClauses), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FromClauseOfOqlQuery)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(behavior.expressions.oql.FromClause _FromClauses, behavior.expressions.oql.OqlQuery _FromClauseOfOqlQuery) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FromClauses), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FromClauseOfOqlQuery));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FromClauses), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _FromClauseOfOqlQuery)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<behavior.expressions.oql.AFromClausesFromClauseOfOqlQuery> get___JmiInterface() {
        return behavior.expressions.oql.AFromClausesFromClauseOfOqlQuery.class;
    }

    protected String metaObjectToString() {
        return "behavior.expressions.oql.AFromClausesFromClauseOfOqlQuery (Java Type)\nbehavior.expressions.oql.A_fromClauses_fromClauseOfOqlQuery (MOF Type)"; //$NON-NLS-1$
    }    
}