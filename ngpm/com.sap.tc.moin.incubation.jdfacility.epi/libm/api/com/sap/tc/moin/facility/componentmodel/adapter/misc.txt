
//  public IProject getProject( PRI pri ) {
//            return getProject( pri.getCri( ) );
//        }

//        private CMContainer grantLibraryContainer( String name ) {
    //
//            CRI criLib = grantNamedCRI( name );
//            CMContainer libContainer = getDelegatedInstance( ).getCMManager( ).getContainer( criLib );
//            if ( libContainer == null ) {
//                List<String> rfn = new ArrayList<String>( );
//                rfn.add( "moin/" );
//                rfn.add( "diagrams/" );
//                List<String> loc = new ArrayList<String>( );
//                loc.add( name );
//                libContainer = new CMFSContainerArchives( criLib, true, null, null, loc, rfn );
//                getDelegatedInstance( ).getCMManager( ).putContainer( libContainer, true );
//            }
//            return libContainer;
//        }


//  private static void getPluginXMLContentExtensions( Set<CMFSFolder> folders, IProject project ) {
//
//      IPluginModelBase model = PluginRegistry.findModel( project );
//      if ( model == null ) {
//          return;
//      }
//
//      PDEContentTypeRegistry ctr = PDEContentTypeRegistry.getInstance( );
//
//      for ( IPluginExtension ext : model.getPluginBase( ).getExtensions( ) ) {
//          for ( IPluginObject child : ext.getChildren( ) ) {
//              if ( "ContentDefinition".equals( child.getName( ) ) ) {
//                  for ( IPluginObject cdef : ( (IPluginElement) child ).getChildren( ) ) {
//
//                      if ( cdef instanceof IPluginElement ) {
//
//                          if ( ctr.addFolderByNature( folders, (IPluginElement) cdef ) ) {
//                              continue;
//                          }
//                          if ( ctr.addFolderByPath( folders, (IPluginElement) cdef ) ) {
//                              continue;
//                          }
//                      }
//                  }
//              }
//          }
//      }
//  }

//    void notNow( ) {
//
//        IProject x = null;
//
//
//        IJavaProject ijp = JavaCore.create( x );
//        try {
//            IClasspathContainer cc = JavaCore.getClasspathContainer( ijp.getPath( ), ijp );
//            for ( IClasspathEntry cpe : cc.getClasspathEntries( ) ) {
//                if ( cpe.getContentKind( ) == IClasspathEntry.CPE_PROJECT ) {
//
//                } else if ( cpe.getContentKind( ) == IClasspathEntry.CPE_LIBRARY ) {
//
//                }
//            }
//
//        } catch ( JavaModelException e ) {
//            e.printStackTrace( );
//        }
//
//
//        IJavaProject javaProject = JavaCore.create( x );
//        System.out.print( "" );
//
//        try {
//            for ( IClasspathEntry cpe : javaProject.getRawClasspath( ) ) {
//
//                System.out.println( cpe );
//
//                if ( cpe.getEntryKind( ) == IClasspathEntry.CPE_CONTAINER ) {
//                    IClasspathContainer cc = JavaCore.getClasspathContainer( cpe.getPath( ), javaProject );
//                    for ( IClasspathEntry inner : cc.getClasspathEntries( ) ) {
//                        if ( inner.getContentKind( ) == IClasspathEntry.CPE_PROJECT ) {
//                        } else if ( inner.getContentKind( ) == IClasspathEntry.CPE_LIBRARY ) {
//                        }
//
//                        System.out.println( "  " + inner );
//                    }
//                }
//            }
//            // System.out.println("**");
//            // for (IClasspathEntry cpe : javaProject.getResolvedClasspath(true)) {
//            // System.out.println(cpe);
//            // }
//        } catch ( JavaModelException e1 ) {
//            e1.printStackTrace( );
//        }
//    }
//
//
//    void nowNow2( IProject eclipseProject ) {
//
//        IPluginModelBase model = PluginRegistry.findModel( eclipseProject );
//        if ( model == null ) {
//            return;
//        }
//
//        IPluginImport[] imports = model.getPluginBase( ).getImports( );
//        for ( IPluginImport importElement : imports ) {
//            System.out.println( importElement );
//            IPluginModelBase usedPlugin = PluginRegistry.findModel( importElement.getId( ) );
//            String locationPath = usedPlugin.getInstallLocation( );
//
//            IResource res = importElement.getPluginModel( ).getUnderlyingResource( );
//            if ( res instanceof IProject ) {
//                IProject project = (IProject) res;
//                IJavaProject javaProject = JavaCore.create( project );
//                try {
//                    IClasspathEntry[] paths = javaProject.getRawClasspath( );
//                } catch ( JavaModelException e ) {
//                    e.printStackTrace( );
//                }
//                System.out.print( "*" );
//            }
//        }
//
////        IDevelopmentConfiguration devonfig = DiiResourceService.getDevelopmentConfiguration( eclipseProject, false );
////
////        IDevelopmentComponent[] localDcs = DiiModelService.getLocalDcs( devonfig );
////        for ( IDevelopmentComponent localDc : localDcs ) {
////            System.out.println( localDc );
////        }
//
//
//    }

//    if ( eclipseProject != null && forced ) {
//        // Contract for forced-refresh: we also refresh the Eclipse resources in the respective project.
//        try {
//            IdeUtilImpl.refreshEclipseResources( eclipseProject );

//    @SuppressWarnings( "unused" )
//    public void getDataPlugins( ) {
//
//        PDEContentTypeRegistry ctr = PDEContentTypeRegistry.getInstance( );
//
//        IExtensionPoint mmExtPoint = Platform.getExtensionRegistry( ).getExtensionPoint( PDEContentTypeRegistry.CONTENT_EX_POINT_NAME );
//
//        if ( mmExtPoint != null ) {
//
//            IConfigurationElement[] configElements = mmExtPoint.getConfigurationElements( );
//
//            State state = Platform.getPlatformAdmin( ).getState( false );
//
//            for ( IConfigurationElement configElement : configElements ) {
//                String bundleID = configElement.getNamespaceIdentifier( );
//
//                String aliasBundleID = configElement.getAttribute( "ForPluginID" );
//                if ( aliasBundleID != null && aliasBundleID.length( ) > 0 ) {
//                    bundleID = aliasBundleID;
//                }
//
//                BundleDescription bundleDesc = state.getBundle( bundleID, null );
//
//                if ( bundleDesc != null ) {
//                    BundleSpecification[] required = bundleDesc.getRequiredBundles( );
//
//                    File location = PDEContentTypeRegistry.getBundleFileLocation( bundleDesc.getLocation( ) );
//
//                    Set<CMFSFolder> folders = new HashSet<CMFSFolder>( );
//                    for ( IConfigurationElement localConfig : configElement.getChildren( ) ) {
//                        String name = localConfig.getName( );
//                        if ( ctr.addFolderByNature( folders, localConfig ) ) {
//                            continue;
//                        }
//                        if ( ctr.addFolderByPath( folders, localConfig ) ) {
//                            continue;
//                        }
//                    }
//
//                    CRI cri = grantNamedCRI( bundleID );
//                    CMFSContainer container = null;
//
//                    if ( location.isDirectory( ) ) {
//                        String config = PDEContentTypeRegistry.serializeFolderConfigString( folders, location.getAbsolutePath( ) );
//                        container = new CMFSContainerFolder( cri, true, null, null, config.toString( ) );
//                    } else {
//                        List<String> prefixes = new ArrayList<String>( folders.size( ) );
//                        for ( CMFSFolder folder : folders ) {
//                            prefixes.add( folder.folder );
//                        }
//                        container = new CMFSContainerArchives( cri, true, null, null, Collections.singletonList( location.getAbsolutePath( ) ), prefixes );
//                    }
//
//                    if ( container != null ) {
//                        getDelegatedInstance( ).getCMManager( ).putContainer( container, true );
//                    }
//                }
//            }
//        }
//    }


//    private static String createFolderConfigString( String prefixes, String folder ) {
//
//        StringBuilder config = new StringBuilder( );
//        for ( String part : prefixes.split( ";" ) ) { //$NON-NLS-1$
//            part = part.trim( );
//            if ( part.length( ) == 0 ) {
//                continue;
//            }
//            if ( config.length( ) > 0 ) {
//                config.append( ';' );
//            }
//            config.append( part );
//            config.append( '=' );
//            config.append( folder );
//        }
//        return config.toString( );
//    }
//  Manifest mf = null;
//  if ( location.isDirectory( ) ) {
//      InputStream is = null;
//      try {
//          is = new FileInputStream( new File( location, "META-INF/MANIFEST.MF" ) ); //$NON-NLS-1$
//          mf = new Manifest( is );
//      } catch ( IOException e ) {
//          // TODO Auto-generated catch block
//          e.printStackTrace( );
//      } finally {
//          if ( is != null ) {
//              try {
//                  is.close( );
//              } catch ( IOException e ) {
//              }
//          }
//      }
//  } else {
//      JarFile jf;
//      try {
//          jf = new JarFile( location );
//          mf = jf.getManifest( );
//      } catch ( IOException e ) {
//      }
//  }



















//    public void getDataPlugins( CMDataArea targetDataArea ) {
//
//        IExtensionPoint mmExtPoint = Platform.getExtensionRegistry( ).getExtensionPoint( CONTENT_EX_POINT_NAME );
//
//        if ( mmExtPoint != null ) {
//
//            final ResourceIdentifierFactory riFactory = targetDataArea.getFacility( ).getRIFactory( );
//            final String DAName = targetDataArea.getDataAreaDescriptor( ).getDataAreaName( );
//
//            IConfigurationElement[] configElements = mmExtPoint.getConfigurationElements( );
//            State state = Platform.getPlatformAdmin( ).getState( false );
//
//
//            for ( IConfigurationElement configElement : configElements ) {
//                if ( CE_CONTENT_DEFINITION.equals( configElement.getName( ) ) ) {
//
//                    String bundleID = configElement.getNamespaceIdentifier( );
//
//                    String aliasBundleID = configElement.getAttribute( CE_PLUGIN_ALIAS );
//                    if ( aliasBundleID != null && aliasBundleID.length( ) > 0 ) {
//                        bundleID = aliasBundleID;
//                    }
//
//                    BundleDescription bundleDesc = state.getBundle( bundleID, null );
//                    if ( bundleDesc != null ) {
//                        BundleSpecification[] required = bundleDesc.getRequiredBundles( );
//
//                        Set<CMFSFolder> folders = new HashSet<CMFSFolder>( );
//                        for ( IConfigurationElement localConfig : configElement.getChildren( ) ) {
//                            if ( addFolderByNature( folders, localConfig ) ) {
//                                continue;
//                            }
//                            if ( addFolderByPath( folders, localConfig ) ) {
//                                continue;
//                            }
//                        }
//
//                        CRI cri = riFactory.createCri( DAName, bundleID );
//                        CMFSContainer container = null;
//
//                        File location = getBundleFileLocation( bundleDesc.getLocation( ) );
//                        if ( location.isDirectory( ) ) {
//                            String config = serializeFolderConfigString( folders, location.getAbsolutePath( ) );
//                            container = new CMFSContainerFolder( cri, true, null, null, config.toString( ) );
//                        } else {
//                            List<String> prefixes = new ArrayList<String>( folders.size( ) );
//                            for ( CMFSFolder folder : folders ) {
//                                prefixes.add( folder.folder );
//                            }
//                            container = new CMFSContainerArchives( cri, true, null, null, Collections.singletonList( location.getAbsolutePath( ) ), prefixes );
//                        }
//
//                        if ( container != null ) {
//                            targetDataArea.getCMManager( ).putContainer( container, true );
//                        }
//                    }
//                }
//            }
//        }
//    }
