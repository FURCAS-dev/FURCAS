#!/bin/sh
if [ "$1" = "" ]; then
  echo Usage: build \<MOIN-workspace-dir\> \<project\> \<subproject\> \<codeline\>
  echo Call in the directory containing your Rose/Unisys XMI output and a .properties file.
  echo The \<MOIN-workspace-dir\> is the one containing the project directories
  echo such as moin.metamodels or ide.static.content. The working directory
  echo is expected to hold the Rose/Unisys-exported metamodel XMIs and a .properties
  echo file that is named after the leading XMI file.
  echo The script will copy the Rose/Unisys-exported metamodel XMI files
  echo to the subprojects mmr/meta/ source folder, removes any previously
  echo imported MOIN model partitions from moin/meta and applies the MOIN
  echo XmiConverter to the Rose/Unisys exports, producing new model partitions
  echo in moin/meta/. Then, the Japro build is started for the metamodel
  echo subproject specified.
  echo The \<codeline\> argument tells if "dev" or "FrwkDev_stream" or some
  echo other codeline shall be built.
  echo Example: build C:/japro/moin/MOIN/moin moin.metamodels _ngpm dev
else
  echo build called with arguments $1 $2 $3
  pwd=`pwd`
  japroWSWithBackspaces=`echo $1 | /bin/sed -e 's/\\//\\\\/g'`
  echo japroWSWithBackspaces is $japroWSWithBackspaces
  cd "$1/$2/$4/src/$3/mmr/meta"
  if [ "$pwd" = "$1/$2/$4/src/$3/mmr/meta" ]; then
    echo metamodel XMLs are already in target location; not copying
  else
    /bin/cp $pwd/*.xml "$1/$2/$4/src/$3/mmr/meta"
    /bin/cp $pwd/*.properties "$1/$2/$4/src/$3/mmr/meta"
  fi
  cd "$1/$2/$4/src/$3"
  /bin/rm -rf moin/meta/*
  # Replace forward slashes in JAVA_HOME by backslashes for calling
  # the .bat file XmiConverter.bat:
  export JAVA_HOME=`echo $JAVA_HOME | /bin/sed -e 's/\\//\\\\/g'`

  # The following would be the line once the public XmiConverter from $4
  # works as expected and we solved the configuration file issues, using
  # a local XmiConverter.bat file to control OCL import settings
  #pushd "$1/moin.ide/$4/gen/dbg/java/sub/_tc~moin~xmiconverter~zip/e/01/pack/XmiConverter"
  #echo "
  #" | $pwd/XmiConverter.bat -projectPath $japroWSWithBackspaces\\moin.metamodels\\$4\\src\\_ngpm

  # The following would be the line once the public XmiConverter from $4
  # works as expected and we solved the configuration file issues. Note,
  # that for the global script to consider OCL expression, the environment
  # variable XMICONVERTER_VM_ARGS_INTERNAL needs to contain the
  # parameter "-Dmoin.importOclConstraints=true"
  echo calling XmiConverter.bat with -projectPath $japroWSWithBackspaces\\$2\\$4\\src\\$3
  pushd "$1/../moin/moin.ide/$4/gen/dbg/java/sub/_tc~moin~xmiconverter~zip/e/01/pack/XmiConverter"
  echo "
  " | $1/../moin/moin.ide/$4/gen/dbg/java/sub/_tc~moin~xmiconverter~zip/e/01/pack/XmiConverter/XmiConverter.bat -projectPath $japroWSWithBackspaces\\$2\\$4\\src\\$3

  # This version works with the local XmiConverter copy:
  #pushd "$pwd/../lib/XmiConverter"
  #echo "
  #" | $pwd/XmiConverter.bat -projectPath $japroWSWithBackspaces\\moin.metamodels\\$4\\src\\_ngpm

  popd
  japro.bat
  if [ -d "$1/../moin/moin.standalone/$4/gen/dbg/java/sub/_tc~moin~standalone~zip/e/01/pack/moinStandalone/external" ]; then
    echo Copying build results to standalone/external directory...
    /bin/cp $1/$2/$4/gen/dbg/java/packaged/public/$3/* "$1/../moin/moin.standalone/$4/gen/dbg/java/sub/_tc~moin~standalone~zip/e/01/pack/moinStandalone/external"
    echo Done.
  fi
  echo If Japro build was successful, please make sure to re-deploy the
  echo metamodel into your persistent store. If you can afford it, drop all
  echo MOIN tables, including the metamodel tables.
fi
