<?xml version = '1.0' encoding = 'ISO-8859-1' ?>
<!-- <!DOCTYPE XMI SYSTEM 'Model1311.DTD' > -->
<XMI xmi.version = '1.1' xmlns:Model='omg.org/mof.Model/1.3' timestamp = 'Wed Mar 03 00:33:33 2010' >
 <XMI.header>
  <XMI.documentation>
   <XMI.exporter>Unisys.JCR.1</XMI.exporter>
   <XMI.exporterVersion>1.3.2</XMI.exporterVersion>
  </XMI.documentation>
  <XMI.metamodel xmi.name = 'org.omg.mof.Model' xmi.version = '1.3'/>
 </XMI.header>
<XMI.content>
<!-- ==================== behavioral    [Package] ==================== -->
<Model:Package xmi.id = 'a446B1EEC006B' 
  name = 'behavioral' annotation = 'Processes, workflows and events. This is where BPEL and BPMN should be positioned and mapped to our infrastructures. But also the Process Agent Framework and BTM has to end up here.' 
  isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' >
  <Model:Namespace.contents>
    <!-- ==================== behavioral.bpdm    [Package] ==================== -->
    <Model:Package xmi.id = 'a4472F8220220' 
      name = 'bpdm' annotation = '' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' >
      <Model:Namespace.contents>
        <!-- ==================== behavioral.bpdm.Dummy    [Class] ==================== -->
        <Model:Class xmi.id = 'a4581611800FD' 
          name = 'Dummy' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' />
      </Model:Namespace.contents>
    </Model:Package>
    <!-- ==================== behavioral.businesstasks    [Package] ==================== -->
    <Model:Package xmi.id = 'a44D74C9A02B1' 
      name = 'businesstasks' annotation = 'If it turns out to be beneficial, elements in this package cover the creation and management of BTM-related objects, such as creating a business task, assigning it to specific users or roles, etc.' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' >
      <Model:Namespace.contents>
        <!-- ==================== behavioral.businesstasks.TaskAgent    [Class] ==================== -->
        <Model:Class xmi.id = 'a44ECBFAF0253' 
          name = 'TaskAgent' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' />
      </Model:Namespace.contents>
    </Model:Package>
    <!-- ==================== behavioral.actions    [Package] ==================== -->
    <Model:Package xmi.id = 'a44D74DA301E0' 
      name = 'actions' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' >
      <Model:ModelElement.annotation>Some action language that talks in the concepts of BOs, BONodes, invoking services, sending messages, explicitly declaring that an event occurred, triggering actions, evaluating rules, ...

The language can be used, e.g., to specify the behavior of an action (part of a BO or BONode) or a service implementation.</Model:ModelElement.annotation>
      <Model:Namespace.contents>
        <!-- ==================== behavioral.actions.Assignment    [Class] ==================== -->
        <Model:Class xmi.id = 'a45229F090021' 
          name = 'Assignment' annotation = 'The argument tells the value to be assigned to the variable.' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a4522A8BA0390'/>  <!-- behavioral.actions.Assignment.AssignmentCompatibility -->
            <Model:Constraint xmi.idref = 'a496DD2570213'/>  <!-- behavioral.actions.Assignment.MustHaveArgument -->
          </Model:ModelElement.constraints>
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xmi.idref = 'a492573460213'/>  <!-- behavioral.actions.StatementWithArgument -->
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== behavioral.actions.Assignment.assignTo    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra4522A2B703D3' 
              name = 'assignTo' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a47A717EF035B'/>  <!-- behavioral.actions.Variable -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a4522A2B703D3'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.actions.Assignment.AssignmentCompatibility    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a4522A8BA0390' 
              name = 'AssignmentCompatibility' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context Assignment
inv:
    self.argument.getType().conformsTo(self.assignTo.getType())</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a45229F090021'/>  <!-- behavioral.actions.Assignment -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <!-- ==================== behavioral.actions.Assignment.MustHaveArgument    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a496DD2570213' 
              name = 'MustHaveArgument' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context Assignment
inv:
  self.argument-&gt;notEmpty()</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a45229F090021'/>  <!-- behavioral.actions.Assignment -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== behavioral.actions.org.omg.sap2mof.store=no    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.739' 
          name = 'org.omg.sap2mof.store=no' annotation = '' 
          tagId = 'org.omg.sap2mof.store' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>no</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'ra4522A2B703D3'/>  <!-- behavioral.actions.Assignment.assignTo -->
            <Model:ModelElement xmi.idref = 'ra454606FA01F3'/>  <!-- behavioral.actions.Block.statements -->
            <Model:ModelElement xmi.idref = 'ra45472E2F0043'/>  <!-- behavioral.actions.Block.variables -->
            <Model:ModelElement xmi.idref = 'ra471DF5CA0119'/>  <!-- behavioral.actions.Foreach.forVariable -->
            <Model:ModelElement xmi.idref = 'ra49255F030128'/>  <!-- behavioral.actions.StatementWithNestedBlocks.nestedBlocks -->
            <Model:ModelElement xmi.idref = 'a4522A2B703D3'/>
            <Model:ModelElement xmi.idref = 'a454606FA01F3'/>
            <Model:ModelElement xmi.idref = 'a45472E2F0043'/>
            <Model:ModelElement xmi.idref = 'a471DF5CA0119'/>
            <Model:ModelElement xmi.idref = 'a49255F030128'/>
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== behavioral.actions.Statement    [Class] ==================== -->
        <Model:Class xmi.id = 'a4545FC1D0190' 
          name = 'Statement' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xml:link = 'simple' href = 'data.xml|a4B85514B0119'/>
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== behavioral.actions.Statement.block    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra454606FA01FD' 
              name = 'block' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a454606CB020A'/>  <!-- behavioral.actions.Block -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a454606FA01FD'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.actions.Statement.getOutermostBlock    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a4925638400FA' 
              name = 'getOutermostBlock' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.1' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a454606CB020A'/>  <!-- behavioral.actions.Block -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== behavioral.actions.Statement.isSideEffectFree    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a492566D302AF' 
              name = 'isSideEffectFree' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:ModelElement.annotation>A statement is said to be side effect free if it does not modify any variable declared outside the scope of the block owning the statement and if it does not modify any object's state and if it does not modify any association's link set.

TODO We need a more context-sensitive definition of sideEffectFree. While assigning to a local variable disallows statement reordering within the block, the block can still overall be side effect free such that its invocation may be reordered. There seem to be at least two notions of side effect freeness: one within the block in which it occurs (and variable assignment in this context counts as a side effect because it will disallow reordering), and another one regarding side effects observable outside the block; those are all modifications that can "escape" from the block, including changing the state of an object that is reachable outside the block (even if created in the block but then returned from the block), or changing the contents of a link container visible outside the block.</Model:ModelElement.annotation>
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.2' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== behavioral.actions.Statement.isSideEffectFreeForBlock    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a4A27EFCF0128' 
              name = 'isSideEffectFreeForBlock' annotation = 'Assignment statements to block-local variables do not imply a side effect w.r.t the block' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.3' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
                  </Model:TypedElement.type>
                </Model:Parameter>
                <Model:Parameter xmi.id = 'XX.4' 
                  name = 'block' annotation = '' 
                  direction = 'in_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a454606CB020A'/>  <!-- behavioral.actions.Block -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== behavioral.actions.Statement.getNamedValuesInScope    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a4B83FCC30196' 
              name = 'getNamedValuesInScope' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.5' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xml:link = 'simple' href = 'data.xml|a4522A56F0149'/>
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== behavioral.actions.Statement.getOwningClass    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a4B84F0E00203' 
              name = 'getOwningClass' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.6' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xml:link = 'simple' href = 'data.xml|a4432171B031E'/>
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== behavioral.actions.org.omg.sap2mof.OperationCodeOcl=context Statement::getOutermostBlock():Block...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.740' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context Statement::getOutermostBlock():Block...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Statement::getOutermostBlock():Block
body:
  self.block.getOutermostBlock()</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a4925638400FA'/>  <!-- behavioral.actions.Statement.getOutermostBlock -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== behavioral.actions.org.omg.sap2mof.OperationCodeOcl=context Statement::isSideEffectFree():Boolean...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.741' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context Statement::isSideEffectFree():Boolean...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Statement::isSideEffectFree():Boolean
body:
  not self.oclIsKindOf(AddLink) and
  not self.oclIsKindOf(RemoveLink) and
  not self.oclIsKindOf(Assignment) and
  (self.oclIsKindOf(IfElse) implies self.oclAsType(IfElse).condition.isSideEffectFree()) and
  (self.oclIsKindOf(WhileLoop) implies self.oclAsType(WhileLoop).condition.isSideEffectFree()) and
  (self.oclIsKindOf(ExpressionStatement) implies self.oclAsType(ExpressionStatement).expression.isSideEffectFree()) and
  (self.oclIsKindOf(StatementWithArgument) implies (self.oclAsType(StatementWithArgument).argument-&gt;notEmpty() implies self.oclAsType(StatementWithArgument).argument.isSideEffectFree())) and
  (self.oclIsKindOf(StatementWithNestedBlocks) implies self.oclAsType(StatementWithNestedBlocks).nestedBlocks-&gt;forAll(b|b.isSideEffectFree()))</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a492566D302AF'/>  <!-- behavioral.actions.Statement.isSideEffectFree -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== behavioral.actions.org.omg.sap2mof.OperationCodeOcl=context Statement::isSideEffectFreeForBlock(block:Block):Boolean...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.742' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context Statement::isSideEffectFreeForBlock(block:Block):Boolean...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Statement::isSideEffectFreeForBlock(block:Block):Boolean
body:
  not self.oclIsKindOf(AddLink) and
  not self.oclIsKindOf(RemoveLink) and
  (self.oclIsKindOf(Assignment) implies self.oclAsType(Assignment).assignTo.owner &lt;&gt; block) and
  (self.oclIsKindOf(IfElse) implies self.oclAsType(IfElse).condition.isSideEffectFree()) and
  (self.oclIsKindOf(WhileLoop) implies self.oclAsType(WhileLoop).condition.isSideEffectFree()) and
  (self.oclIsKindOf(ExpressionStatement) implies self.oclAsType(ExpressionStatement).expression.isSideEffectFree()) and
  (self.oclIsKindOf(StatementWithArgument) implies (self.oclAsType(StatementWithArgument).argument-&gt;notEmpty() implies self.oclAsType(StatementWithArgument).argument.isSideEffectFree())) and
  (self.oclIsKindOf(StatementWithNestedBlocks) implies self.oclAsType(StatementWithNestedBlocks).nestedBlocks-&gt;forAll(b|b.isSideEffectFree()))</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a4A27EFCF0128'/>  <!-- behavioral.actions.Statement.isSideEffectFreeForBlock -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== behavioral.actions.org.omg.sap2mof.OperationCodeOcl=context Statement::getNamedValuesInScope():Set(NamedValue)...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.743' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context Statement::getNamedValuesInScope():Set(NamedValue)...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Statement::getNamedValuesInScope():Set(NamedValue)
body:
  -- collect all NamedValue declarations introduced by statements in this statement's owning block, prior to this statement.
  let pos = self.block.statements-&gt;indexOf(self) in
  if pos &gt; 1 then
    self.addNamedValuesWithNewNames(
    if self.block.statements-&gt;at(-1+pos).oclIsKindOf(NamedValueDeclaration) then
      self.block.statements-&gt;at(-1+pos).oclAsType(NamedValueDeclaration).namedValue-&gt;asSet()
    else
      Set{}
    endif,
    self.block.statements-&gt;at(-1+pos).getNamedValuesInScope())
  else
    -- first statement in block; consider block itself
    self.block.getNamedValuesInScope()
  endif</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a4B83FCC30196'/>  <!-- behavioral.actions.Statement.getNamedValuesInScope -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== behavioral.actions.org.omg.sap2mof.OperationCodeOcl=context Statement::getOwningClass():SapClass...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.744' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context Statement::getOwningClass():SapClass...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Statement::getOwningClass():SapClass
body:
  self.block.getOwningClass()</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a4B84F0E00203'/>  <!-- behavioral.actions.Statement.getOwningClass -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== behavioral.actions.Block    [Class] ==================== -->
        <Model:Class xmi.id = 'a454606CB020A' 
          name = 'Block' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:ModelElement.annotation>A block contains statements and provides a scope, e.g., for block-local variables. Such a scope can be used for mapping to and from an operation's signature. A block accepts a number of values for a set of variables and as such is parameterizable. Additional variables can be introduced in the block that will not be provided to the block by its surrounding context. Those are considered the block's "local variables."

A block can be executed like in SmallTalk, dynamically binding its arguments at runtime.

With this, an operation is only a very thin wrapper around a Block.

The parameters of a block are always defined by the signature that is implemented by the block.</Model:ModelElement.annotation>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a47B2D480003E'/>  <!-- behavioral.actions.Block.DoesNotOwnIterators -->
            <Model:Constraint xmi.idref = 'a492568B60399'/>  <!-- behavioral.actions.Block.IsSideEffectFreeIfImplementsSideEffectFreeSignature -->
            <Model:Constraint xmi.idref = 'a49B7F26B02D8'/>  <!-- behavioral.actions.Block.DistinctNamedValueNames -->
          </Model:ModelElement.constraints>
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xml:link = 'simple' href = 'data.xml|a4974995A0069'/>
            <Model:GeneralizableElement xml:link = 'simple' href = 'data.xml|a4B85514B0119'/>
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== behavioral.actions.Block.statements    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra454606FA01F3' 
              name = 'statements' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'true' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4545FC1D0190'/>  <!-- behavioral.actions.Statement -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a454606FA01F3'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.actions.Block.variables    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra45472E2F0043' 
              name = 'variables' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'data.xml|a4522A56F0149'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a45472E2F0043'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.actions.Block.owningStatement    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra49255F0300DB' 
              name = 'owningStatement' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a49255EB1034B'/>  <!-- behavioral.actions.StatementWithNestedBlocks -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a49255F0300DB'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.actions.Block.getOutermostBlock    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a4925623D029F' 
              name = 'getOutermostBlock' annotation = 'Walks up the owningStatement/nestedBlocks association to find owning statements and their owning blocks transitively until it arrives at a block that is not owned by a statement. That block is then returned. Usually, such a block would be the implementation of either a function or a method signature.' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.7' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a454606CB020A'/>  <!-- behavioral.actions.Block -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== behavioral.actions.Block.localIsSideEffectFree    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a4925687402EE' 
              name = 'localIsSideEffectFree' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.8' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== behavioral.actions.Block.getNamedValuesInScope    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a4B84041C003E' 
              name = 'getNamedValuesInScope' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:ModelElement.annotation>Determines all NamedValues that are in scope for all statements of this block. For example, in the block of a Foreach statement, the Foreach Iterator is in scope for all contained statements. If the block is nested in a statement (such as for an "if" statement), the NamedValues in scope for the containing statement are added as well. Additionally, if the block occurs as a signature implementation, the signature parameters are added. If this block occurs in an object-parameterized class, the formal object parameters are also added.

</Model:ModelElement.annotation>
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.9' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xml:link = 'simple' href = 'data.xml|a4522A56F0149'/>
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== behavioral.actions.Block.getOwningClass    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a4B84099F038A' 
              name = 'getOwningClass' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.10' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xml:link = 'simple' href = 'data.xml|a4432171B031E'/>
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== behavioral.actions.Block.DoesNotOwnIterators    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a47B2D480003E' 
              name = 'DoesNotOwnIterators' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context Block
inv:
  self.variables-&gt;select(i|i.oclIsKindOf(Iterator))-&gt;isEmpty()</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a454606CB020A'/>  <!-- behavioral.actions.Block -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <!-- ==================== behavioral.actions.Block.IsSideEffectFreeIfImplementsSideEffectFreeSignature    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a492568B60399' 
              name = 'IsSideEffectFreeIfImplementsSideEffectFreeSignature' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context Block
inv:
  self.implements_-&gt;notEmpty() implies
    (self.implements_.sideEffectFree implies self.isSideEffectFree())</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a454606CB020A'/>  <!-- behavioral.actions.Block -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <!-- ==================== behavioral.actions.Block.DistinctNamedValueNames    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a49B7F26B02D8' 
              name = 'DistinctNamedValueNames' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context Block
inv:
  self.variables-&gt;forAll( i, j | i &lt;&gt; j implies i.name &lt;&gt; j.name )</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a454606CB020A'/>  <!-- behavioral.actions.Block -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== behavioral.actions.org.omg.sap2mof.store=yes    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.745' 
          name = 'org.omg.sap2mof.store=yes' annotation = '' 
          tagId = 'org.omg.sap2mof.store' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>yes</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'ra49255F0300DB'/>  <!-- behavioral.actions.Block.owningStatement -->
            <Model:ModelElement xmi.idref = 'ra4522A2B703D5'/>  <!-- behavioral.actions.Variable.assignments -->
            <Model:ModelElement xmi.idref = 'a4522A2B703D5'/>
            <Model:ModelElement xmi.idref = 'a49255F0300DB'/>
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== behavioral.actions.org.omg.sap2mof.OperationCodeOcl=context Block::getOutermostBlock():Block...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.746' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context Block::getOutermostBlock():Block...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Block::getOutermostBlock():Block
body:
  if self.owningStatement-&gt;notEmpty() then
    self.owningStatement.block.getOutermostBlock()
  else
    self
  endif</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a4925623D029F'/>  <!-- behavioral.actions.Block.getOutermostBlock -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== behavioral.actions.org.omg.sap2mof.OperationCodeOcl=context Block::localIsSideEffectFree():Boolean...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.747' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context Block::localIsSideEffectFree():Boolean...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Block::localIsSideEffectFree():Boolean
body:
  self.statements-&gt;forAll(s|s.isSideEffectFreeForBlock(self))</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a4925687402EE'/>  <!-- behavioral.actions.Block.localIsSideEffectFree -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== behavioral.actions.org.omg.sap2mof.OperationCodeOcl=context Block::getNamedValuesInScope():Set(NamedValue)...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.748' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context Block::getNamedValuesInScope():Set(NamedValue)...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Block::getNamedValuesInScope():Set(NamedValue)
body:
  self.addNamedValuesWithNewNames(
  -- Handle Foreach
  let s:Set(NamedValue)=Set{} in
  s-&gt;union(if owningStatement.oclIsKindOf(Foreach) then
    owningStatement.oclAsType(Foreach).forVariable-&gt;asSet()
  else
    Set{}
  endif)-&gt;union(
  -- add parameters for those blocks that are used as a signature implementation
  functionSignature.input-&gt;asSet()
  )-&gt;union(
  implements_.input-&gt;asSet()
  ),
  -- then ascend the block composition hierarchy and add all NamedValues defined in parent blocks before the occurrence of the statement with the nested block
  if owningStatement-&gt;notEmpty() then
    owningStatement.getNamedValuesInScope()
  else
    -- add formal object parameters from owning class
    let oc = self.getOwningClass() in
    if oc-&gt;notEmpty() then
      oc.formalObjectParameters-&gt;asSet()
    else
      Set{}
    endif
  endif)</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a4B84041C003E'/>  <!-- behavioral.actions.Block.getNamedValuesInScope -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== behavioral.actions.org.omg.sap2mof.OperationCodeOcl=context Block::getOwningClass():SapClass...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.749' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context Block::getOwningClass():SapClass...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Block::getOwningClass():SapClass
body:
  let outermost = self.getOutermostBlock() in
  let implementedSignature = outermost.getImplementedSignature() in
  if implementedSignature-&gt;notEmpty() then
    implementedSignature.getOwningClass()
  else
    null
  endif</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a4B84099F038A'/>  <!-- behavioral.actions.Block.getOwningClass -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== behavioral.actions.IfElse    [Class] ==================== -->
        <Model:Class xmi.id = 'a45471B57000A' 
          name = 'IfElse' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xmi.idref = 'a4B8518F803B9'/>  <!-- behavioral.actions.ConditionalStatement -->
            <Model:GeneralizableElement xmi.idref = 'a49255EB1034B'/>  <!-- behavioral.actions.StatementWithNestedBlocks -->
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== behavioral.actions.IfElse.getIfBlock    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a4925619E029F' 
              name = 'getIfBlock' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.11' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a454606CB020A'/>  <!-- behavioral.actions.Block -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== behavioral.actions.IfElse.getElseBlock    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a492561A2036B' 
              name = 'getElseBlock' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.12' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a454606CB020A'/>  <!-- behavioral.actions.Block -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== behavioral.actions.org.omg.sap2mof.OperationCodeOcl=context IfElse::getIfBlock():Block...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.750' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context IfElse::getIfBlock():Block...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context IfElse::getIfBlock():Block
body:
  self.nestedBlocks-&gt;at(1)</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a4925619E029F'/>  <!-- behavioral.actions.IfElse.getIfBlock -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== behavioral.actions.org.omg.sap2mof.OperationCodeOcl=context IfElse::getElseBlock():Block...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.751' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context IfElse::getElseBlock():Block...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context IfElse::getElseBlock():Block
body:
  if self.nestedBlocks-&gt;size() &gt; 1 then
    self.nestedBlocks-&gt;at(2)
  else
    null
  endif</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a492561A2036B'/>  <!-- behavioral.actions.IfElse.getElseBlock -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== behavioral.actions.WhileLoop    [Class] ==================== -->
        <Model:Class xmi.id = 'a45471B58016A' 
          name = 'WhileLoop' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xmi.idref = 'a4B8518F803B9'/>  <!-- behavioral.actions.ConditionalStatement -->
            <Model:GeneralizableElement xmi.idref = 'a4925602703B9'/>  <!-- behavioral.actions.SingleBlockStatement -->
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== behavioral.actions.WhileLoop.getLoopBody    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a492561970399' 
              name = 'getLoopBody' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.13' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a454606CB020A'/>  <!-- behavioral.actions.Block -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== behavioral.actions.org.omg.sap2mof.OperationCodeOcl=context WhileLoop::getLoopBody():Block...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.752' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context WhileLoop::getLoopBody():Block...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context WhileLoop::getLoopBody():Block
body:
  self.nestedBlocks-&gt;at(1)</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a492561970399'/>  <!-- behavioral.actions.WhileLoop.getLoopBody -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== behavioral.actions.Foreach    [Class] ==================== -->
        <Model:Class xmi.id = 'a456DFC3C0125' 
          name = 'Foreach' annotation = 'We may not need a Foreach statement if we use internal iterators in collections together with blocks. However, how would a collection class implement the internal iterator without a for statement? Could this work with a WhileLoop only?' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a471DF65302FD'/>  <!-- behavioral.actions.Foreach.VariableOwnedByRightBlock -->
          </Model:ModelElement.constraints>
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xmi.idref = 'a4925602703B9'/>  <!-- behavioral.actions.SingleBlockStatement -->
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== behavioral.actions.Foreach.collection    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra456DFC8100CE' 
              name = 'collection' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'dataaccess.xml|a450E63AB03A2'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a456DFC8100CE'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.actions.Foreach.forVariable    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra471DF5CA0119' 
              name = 'forVariable' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a47A719D200EA'/>  <!-- behavioral.actions.Iterator -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a471DF5CA0119'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.actions.Foreach.parallel    [Attribute] ==================== -->
            <Model:Attribute xmi.id = 'a456DFC5001F9' 
              name = 'parallel' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' 
              isDerived = 'false' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <!-- ==================== behavioral.actions.Foreach.VariableOwnedByRightBlock    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a471DF65302FD' 
              name = 'VariableOwnedByRightBlock' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context Foreach
inv:
  self.forVariable.owner = self.nestedBlocks-&gt;at(1)</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a456DFC3C0125'/>  <!-- behavioral.actions.Foreach -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== behavioral.actions.Return    [Class] ==================== -->
        <Model:Class xmi.id = 'a4577E38403E0' 
          name = 'Return' annotation = 'Returns a value from a block. Must be the last statement of a block.' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a4578381000DA'/>  <!-- behavioral.actions.Return.ReturnMustBeLastInBlock -->
            <Model:Constraint xmi.idref = 'a492562ED005D'/>  <!-- behavioral.actions.Return.ReturnTypeMustMatch -->
          </Model:ModelElement.constraints>
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xmi.idref = 'a492573460213'/>  <!-- behavioral.actions.StatementWithArgument -->
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== behavioral.actions.Return.ReturnMustBeLastInBlock    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a4578381000DA' 
              name = 'ReturnMustBeLastInBlock' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context Return
inv:
  self = self.block.statements-&gt;last()</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a4577E38403E0'/>  <!-- behavioral.actions.Return -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <!-- ==================== behavioral.actions.Return.ReturnTypeMustMatch    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a492562ED005D' 
              name = 'ReturnTypeMustMatch' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context Return
inv:
  self.argument.getType().conformsTo(self.getOutermostBlock().getImplementedSignature().output)</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a4577E38403E0'/>  <!-- behavioral.actions.Return -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== behavioral.actions.AddLink    [Class] ==================== -->
        <Model:Class xmi.id = 'a457841700027' 
          name = 'AddLink' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:ModelElement.annotation>Adds a link to an association. As opposed to, e.g., MOF 1.4 semantics, if a link would violate an upper multiplicity of 1 by adding a second link to an object, the existing link will implicitly be replaced by this AddLink statement.

When *at* is unspecified for an ordered association, the link will be added at the "end."</Model:ModelElement.annotation>
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xmi.idref = 'a457841890204'/>  <!-- behavioral.actions.LinkManipulationStatement -->
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <!-- ==================== behavioral.actions.RemoveLink    [Class] ==================== -->
        <Model:Class xmi.id = 'a4578417F0187' 
          name = 'RemoveLink' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:ModelElement.annotation>Removes the link if it exists, from the association specified.

If no *at* position is specified for an association with one ordered end, one occurrence of the link specified by the two *objects* will be removed at random.</Model:ModelElement.annotation>
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xmi.idref = 'a457841890204'/>  <!-- behavioral.actions.LinkManipulationStatement -->
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <!-- ==================== behavioral.actions.LinkManipulationStatement    [Class] ==================== -->
        <Model:Class xmi.id = 'a457841890204' 
          name = 'LinkManipulationStatement' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a457842F1032E'/>  <!-- behavioral.actions.LinkManipulationStatement.ObjectsMustConformToEndTypes -->
            <Model:Constraint xmi.idref = 'a489D61BF0222'/>  <!-- behavioral.actions.LinkManipulationStatement.BlockMustNotImplementSideEffectFreeSignature -->
            <Model:Constraint xmi.idref = 'a4942611D02DE'/>  <!-- behavioral.actions.LinkManipulationStatement.NoValueMustBeModified -->
          </Model:ModelElement.constraints>
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xmi.idref = 'a4545FC1D0190'/>  <!-- behavioral.actions.Statement -->
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== behavioral.actions.LinkManipulationStatement.association    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra457841C701BD' 
              name = 'association' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'data.xml|a44321DA40150'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a457841C701BD'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.actions.LinkManipulationStatement.objects    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra457842A20095' 
              name = 'objects' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '2' upper = '2' is_ordered = 'true' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'dataaccess.xml|a450E63AB03A2'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a457842A20095'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.actions.LinkManipulationStatement.at    [Attribute] ==================== -->
            <Model:Attribute xmi.id = 'a4A6D6C030271' 
              name = 'at' annotation = 'An optional position specification which will be ignored for associations with no ordered ends. If not set for an association with ordered ends, a reasonable default will be chosen.' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' 
              isDerived = 'false' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a3B538AB300B3'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <!-- ==================== behavioral.actions.LinkManipulationStatement.ObjectsMustConformToEndTypes    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a457842F1032E' 
              name = 'ObjectsMustConformToEndTypes' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context LinkManipulationStatement
inv:
  Sequence{1..self.objects-&gt;size()}-&gt;forAll(i:Integer |
    objects-&gt;at(i).getType().conformsTo(association.ends-&gt;at(i).type))</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a457841890204'/>  <!-- behavioral.actions.LinkManipulationStatement -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <!-- ==================== behavioral.actions.LinkManipulationStatement.BlockMustNotImplementSideEffectFreeSignature    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a489D61BF0222' 
              name = 'BlockMustNotImplementSideEffectFreeSignature' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context LinkManipulationStatement
inv:
  self.block.getImplementedSignature()-&gt;notEmpty() implies
  not self.block.getImplementedSignature().sideEffectFree</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a457841890204'/>  <!-- behavioral.actions.LinkManipulationStatement -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <!-- ==================== behavioral.actions.LinkManipulationStatement.NoValueMustBeModified    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a4942611D02DE' 
              name = 'NoValueMustBeModified' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context LinkManipulationStatement
inv:
  self.association.ends-&gt;forAll(ae:AssociationEnd |
    ae.type.clazz.valueType implies not ae.contributesToEquality)</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a457841890204'/>  <!-- behavioral.actions.LinkManipulationStatement -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== behavioral.actions.ExpressionStatement    [Class] ==================== -->
        <Model:Class xmi.id = 'a45AA9A16016E' 
          name = 'ExpressionStatement' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xmi.idref = 'a4545FC1D0190'/>  <!-- behavioral.actions.Statement -->
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== behavioral.actions.ExpressionStatement.expression    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra45AA9A1F00DB' 
              name = 'expression' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'dataaccess.xml|a450E63AB03A2'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a45AA9A1F00DB'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== behavioral.actions.Sort    [Class] ==================== -->
        <Model:Class xmi.id = 'a4715E4DA0271' 
          name = 'Sort' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' />
        <!-- ==================== behavioral.actions.QueryInvocation    [Class] ==================== -->
        <Model:Class xmi.id = 'a4715E505007D' 
          name = 'QueryInvocation' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' />
        <!-- ==================== behavioral.actions.Constant    [Class] ==================== -->
        <Model:Class xmi.id = 'a47A717EE033C' 
          name = 'Constant' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:ModelElement.annotation>A constant always has an initial value defined and cannot be changed after that initial assignment anymore.

If a constant has no initExpression assigned, it's type needs to support a lower multiplicity of 0, and the value of the constant will be an empty multi-object.</Model:ModelElement.annotation>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a47A72AC802FD'/>  <!-- behavioral.actions.Constant.InitExpressionTypeMustMatchVariableType -->
          </Model:ModelElement.constraints>
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xmi.idref = 'a49889B6400B0'/>  <!-- behavioral.actions.NamedValueWithOptionalInitExpression -->
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== behavioral.actions.Constant.InitExpressionTypeMustMatchVariableType    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a47A72AC802FD' 
              name = 'InitExpressionTypeMustMatchVariableType' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context Constant
inv:
  self.initExpression-&gt;notEmpty() implies self.initExpression.getType().conformsTo(self.getType())</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a47A717EE033C'/>  <!-- behavioral.actions.Constant -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== behavioral.actions.Variable    [Class] ==================== -->
        <Model:Class xmi.id = 'a47A717EF035B' 
          name = 'Variable' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:ModelElement.annotation>As opposed to a Constant, a Variable can be used in an Assignment.

If a variable has no initExpression assigned, it's type needs to support a lower multiplicity of 0, and the value of the variable will be an empty multi-object.</Model:ModelElement.annotation>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a47A72AB70109'/>  <!-- behavioral.actions.Variable.InitExpressionTypeMustMatchVariableType -->
          </Model:ModelElement.constraints>
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xmi.idref = 'a49889B6400B0'/>  <!-- behavioral.actions.NamedValueWithOptionalInitExpression -->
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== behavioral.actions.Variable.assignments    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra4522A2B703D5' 
              name = 'assignments' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a45229F090021'/>  <!-- behavioral.actions.Assignment -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a4522A2B703D5'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.actions.Variable.getCommonTypeOfAssignments    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a49063AB3032C' 
              name = 'getCommonTypeOfAssignments' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'false' />
            <!-- ==================== behavioral.actions.Variable.InitExpressionTypeMustMatchVariableType    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a47A72AB70109' 
              name = 'InitExpressionTypeMustMatchVariableType' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context Variable
inv:
  self.initExpression-&gt;notEmpty() implies self.initExpression.getType().conformsTo(self.getType())</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a47A717EF035B'/>  <!-- behavioral.actions.Variable -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== behavioral.actions.Iterator    [Class] ==================== -->
        <Model:Class xmi.id = 'a47A719D200EA' 
          name = 'Iterator' annotation = 'A named value that can neither be assigned nor needs an initialization expression. It obtains its value by an iterator statement implicitly.' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xml:link = 'simple' href = 'data.xml|a4522A56F0149'/>
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== behavioral.actions.Iterator.boundToFor    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra471DF5CA011B' 
              name = 'boundToFor' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a456DFC3C0125'/>  <!-- behavioral.actions.Foreach -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a471DF5CA011B'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== behavioral.actions.NamedValueDeclaration    [Class] ==================== -->
        <Model:Class xmi.id = 'a48873D45021C' 
          name = 'NamedValueDeclaration' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xmi.idref = 'a4545FC1D0190'/>  <!-- behavioral.actions.Statement -->
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== behavioral.actions.NamedValueDeclaration.namedValue    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra49B64B6F0279' 
              name = 'namedValue' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a49889B6400B0'/>  <!-- behavioral.actions.NamedValueWithOptionalInitExpression -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a49B64B6F0279'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== behavioral.actions.StatementWithNestedBlocks    [Class] ==================== -->
        <Model:Class xmi.id = 'a49255EB1034B' 
          name = 'StatementWithNestedBlocks' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xmi.idref = 'a4545FC1D0190'/>  <!-- behavioral.actions.Statement -->
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== behavioral.actions.StatementWithNestedBlocks.nestedBlocks    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra49255F030128' 
              name = 'nestedBlocks' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '2' is_ordered = 'true' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a454606CB020A'/>  <!-- behavioral.actions.Block -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a49255F030128'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== behavioral.actions.SingleBlockStatement    [Class] ==================== -->
        <Model:Class xmi.id = 'a4925602703B9' 
          name = 'SingleBlockStatement' annotation = 'Constrains the number of blocks that this statement can own to 1.' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a492560530128'/>  <!-- behavioral.actions.SingleBlockStatement.OwnsExactlyOneBlock -->
          </Model:ModelElement.constraints>
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xmi.idref = 'a49255EB1034B'/>  <!-- behavioral.actions.StatementWithNestedBlocks -->
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== behavioral.actions.SingleBlockStatement.OwnsExactlyOneBlock    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a492560530128' 
              name = 'OwnsExactlyOneBlock' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context SingleBlockStatement
inv:
  self.nestedBlocks-&gt;size() = 1</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a4925602703B9'/>  <!-- behavioral.actions.SingleBlockStatement -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== behavioral.actions.StatementWithArgument    [Class] ==================== -->
        <Model:Class xmi.id = 'a492573460213' 
          name = 'StatementWithArgument' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xml:link = 'simple' href = 'dataaccess.xml|a4577E587019C'/>
            <Model:GeneralizableElement xmi.idref = 'a4545FC1D0190'/>  <!-- behavioral.actions.Statement -->
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <!-- ==================== behavioral.actions.NamedValueWithOptionalInitExpression    [Class] ==================== -->
        <Model:Class xmi.id = 'a49889B6400B0' 
          name = 'NamedValueWithOptionalInitExpression' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a49889C4B0335'/>  <!-- behavioral.actions.NamedValueWithOptionalInitExpression.AssignmentCompatibility -->
          </Model:ModelElement.constraints>
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xml:link = 'simple' href = 'data.xml|a4522A56F0149'/>
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== behavioral.actions.NamedValueWithOptionalInitExpression.initExpression    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra47A71B140109' 
              name = 'initExpression' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'dataaccess.xml|a450E63AB03A2'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a47A71B140109'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.actions.NamedValueWithOptionalInitExpression.AssignmentCompatibility    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a49889C4B0335' 
              name = 'AssignmentCompatibility' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context NamedValueWithOptionalInitExpression
inv:
    self.initExpression-&gt;forAll(ie | ie.getType().conformsTo(self.getType()))</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a49889B6400B0'/>  <!-- behavioral.actions.NamedValueWithOptionalInitExpression -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== behavioral.actions.ConditionalStatement    [Class] ==================== -->
        <Model:Class xmi.id = 'a4B8518F803B9' 
          name = 'ConditionalStatement' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xml:link = 'simple' href = 'dataaccess.xml|a45471B4401F7'/>
            <Model:GeneralizableElement xmi.idref = 'a4545FC1D0190'/>  <!-- behavioral.actions.Statement -->
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <!-- ==================== behavioral.actions.A_assignTo_assignments    [Association] ==================== -->
        <Model:Association xmi.id = 'a4522A2B7015C' 
          name = 'A_assignTo_assignments' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a4522A2B703D3' 
              name = 'assignTo' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a47A717EF035B'/>  <!-- behavioral.actions.Variable -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a4522A2B703D5' 
              name = 'assignments' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a45229F090021'/>  <!-- behavioral.actions.Assignment -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== behavioral.actions.A_statements_block    [Association] ==================== -->
        <Model:Association xmi.id = 'a454606F903AA' 
          name = 'A_statements_block' annotation = 'Statements can only occur inside blocks.' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a454606FA01F3' 
              name = 'statements' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'true' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4545FC1D0190'/>  <!-- behavioral.actions.Statement -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a454606FA01FD' 
              name = 'block' annotation = '' 
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a454606CB020A'/>  <!-- behavioral.actions.Block -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== behavioral.actions.A_variables_owner    [Association] ==================== -->
        <Model:Association xmi.id = 'a45472E2E0218' 
          name = 'A_variables_owner' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a45472E2F0043' 
              name = 'variables' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'data.xml|a4522A56F0149'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a45472E2F004D' 
              name = 'owner' annotation = '' 
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a454606CB020A'/>  <!-- behavioral.actions.Block -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== behavioral.actions.A_collection_foreach    [Association] ==================== -->
        <Model:Association xmi.id = 'a456DFC800267' 
          name = 'A_collection_foreach' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a456DFC8100CE' 
              name = 'collection' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'dataaccess.xml|a450E63AB03A2'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a456DFC8100E2' 
              name = 'foreach' annotation = '' 
              isNavigable = 'false' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a456DFC3C0125'/>  <!-- behavioral.actions.Foreach -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== behavioral.actions.A_association_linkManipulationStatement    [Association] ==================== -->
        <Model:Association xmi.id = 'a457841C601B1' 
          name = 'A_association_linkManipulationStatement' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a457841C701BD' 
              name = 'association' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'data.xml|a44321DA40150'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a457841C701C7' 
              name = 'linkManipulationStatement' annotation = '' 
              isNavigable = 'false' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a457841890204'/>  <!-- behavioral.actions.LinkManipulationStatement -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== behavioral.actions.A_objects_linkManipulationStatement    [Association] ==================== -->
        <Model:Association xmi.id = 'a457842A10116' 
          name = 'A_objects_linkManipulationStatement' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a457842A20095' 
              name = 'objects' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '2' upper = '2' is_ordered = 'true' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'dataaccess.xml|a450E63AB03A2'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a457842A200C7' 
              name = 'linkManipulationStatement' annotation = '' 
              isNavigable = 'false' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a457841890204'/>  <!-- behavioral.actions.LinkManipulationStatement -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== behavioral.actions.A_expression_expressionStatement    [Association] ==================== -->
        <Model:Association xmi.id = 'a45AA9A1E0301' 
          name = 'A_expression_expressionStatement' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a45AA9A1F00DB' 
              name = 'expression' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'dataaccess.xml|a450E63AB03A2'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a45AA9A1F010E' 
              name = 'expressionStatement' annotation = '' 
              isNavigable = 'false' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a45AA9A16016E'/>  <!-- behavioral.actions.ExpressionStatement -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== behavioral.actions.A_forVariable_boundToFor    [Association] ==================== -->
        <Model:Association xmi.id = 'a471DF5C902AF' 
          name = 'A_forVariable_boundToFor' annotation = 'For Foreach statement binds a variable in its block to the values of the collection expression, one after the other. The variable is owned by the block.' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a471DF5CA0119' 
              name = 'forVariable' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a47A719D200EA'/>  <!-- behavioral.actions.Iterator -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a471DF5CA011B' 
              name = 'boundToFor' annotation = '' 
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a456DFC3C0125'/>  <!-- behavioral.actions.Foreach -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== behavioral.actions.A_initExpression_initExpressionFor    [Association] ==================== -->
        <Model:Association xmi.id = 'a47A71B130280' 
          name = 'A_initExpression_initExpressionFor' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a47A71B140109' 
              name = 'initExpression' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'dataaccess.xml|a450E63AB03A2'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a47A71B140128' 
              name = 'initExpressionFor' annotation = '' 
              isNavigable = 'false' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a49889B6400B0'/>  <!-- behavioral.actions.NamedValueWithOptionalInitExpression -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== behavioral.actions.A_owningStatement_nestedBlocks    [Association] ==================== -->
        <Model:Association xmi.id = 'a49255F0300DA' 
          name = 'A_owningStatement_nestedBlocks' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a49255F0300DB' 
              name = 'owningStatement' annotation = '' 
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a49255EB1034B'/>  <!-- behavioral.actions.StatementWithNestedBlocks -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a49255F030128' 
              name = 'nestedBlocks' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '2' is_ordered = 'true' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a454606CB020A'/>  <!-- behavioral.actions.Block -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== behavioral.actions.A_namedValue_namedValueDeclaration    [Association] ==================== -->
        <Model:Association xmi.id = 'a49B64B6F0008' 
          name = 'A_namedValue_namedValueDeclaration' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a49B64B6F0279' 
              name = 'namedValue' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a49889B6400B0'/>  <!-- behavioral.actions.NamedValueWithOptionalInitExpression -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a49B64B6F027B' 
              name = 'namedValueDeclaration' annotation = '' 
              isNavigable = 'false' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a48873D45021C'/>  <!-- behavioral.actions.NamedValueDeclaration -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
      </Model:Namespace.contents>
    </Model:Package>
    <Model:Import xmi.id = 'G.753' 
      name = 'PrimitiveTypes' annotation = '' 
      visibility = 'public_vis' isClustered = 'false' >
      <Model:Import.importedNamespace>
        <Model:Namespace xml:link = 'simple' href = 'PrimitiveTypes.xml|a3B5389EE0204'/>
      </Model:Import.importedNamespace>
    </Model:Import>
    <Model:Import xmi.id = 'G.754' 
      name = 'data' annotation = '' 
      visibility = 'public_vis' isClustered = 'false' >
      <Model:Import.importedNamespace>
        <Model:Namespace xml:link = 'simple' href = 'data.xml|a453E0C08006D'/>
      </Model:Import.importedNamespace>
    </Model:Import>
    <Model:Import xmi.id = 'G.755' 
      name = 'dataaccess' annotation = '' 
      visibility = 'public_vis' isClustered = 'false' >
      <Model:Import.importedNamespace>
        <Model:Namespace xml:link = 'simple' href = 'dataaccess.xml|a453E0CD8006C'/>
      </Model:Import.importedNamespace>
    </Model:Import>
    <!-- ==================== behavioral.rules    [Package] ==================== -->
    <Model:Package xmi.id = 'a44D74DBB02FD' 
      name = 'rules' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' >
      <Model:ModelElement.annotation>A declarative rules language that uses the structural concepts (see package structural) to form expressions and conditions. Conditions may, e.g., be used to define when an event listener wants to be notified about the occurrence of specific events.

Consider FDT and other expression languages.</Model:ModelElement.annotation>
      <Model:Namespace.contents>
        <!-- ==================== behavioral.rules.Dummy    [Class] ==================== -->
        <Model:Class xmi.id = 'a4581612D0139' 
          name = 'Dummy' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' />
      </Model:Namespace.contents>
    </Model:Package>
    <!-- ==================== behavioral.events    [Package] ==================== -->
    <Model:Package xmi.id = 'a44D74DC40238' 
      name = 'events' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' >
      <Model:ModelElement.annotation>Talks about types of (business) events that may occur, may need to be communicated / signalled and which can be consumed by event listeners (which most likely should be an action with suitable signature). Rules (see rules package) may be used to filter for relevant events.

From Holger's slides:

Business Event:
A meaningful change of the state of the enterprise (inside or outside)
A key source of business events are business objects; there are other sources like unstructured documents, analytical sources, RSS feeds, embedded software etc.
The term &#x0093;business event&#x0094; is often used interchangeably to refer to both the specification (type) of the event, and each individual occurrence (instance) of the event
Characterized by its type, modeled in Enterprise Repository*:
Name and/or significance
The data that is provided with each occurrence (aka attributes or context)
Modeled as data type
Relationship to other event types (to be clarified)
Like causality or aggregation
Can carry additional pre-defined data at execution time
Like unique occurance ID, timestamp, identification of event producer
Must be interpretable outside the &#x0093;local processing context&#x0094; that produced it
Logically self-contained in representing all the information pertinent to the situation causing the event
May either directly contain relevant details or may enable consumers to access the relevant details (via links or subsequent service calls or other means)
Even if it contains relevant details that doesn&#x0092;t rule out the need for accessing additional data, business rules, etc. for the purposes of processing and acting upon the event

</Model:ModelElement.annotation>
      <Model:Namespace.contents>
        <!-- ==================== behavioral.events.Subscription    [Class] ==================== -->
        <Model:Class xmi.id = 'a44ECBFF00094' 
          name = 'Subscription' annotation = 'Represents an EventConsumer&apos;s interest in being notified about occurrences of events produced by one or more EventProducers. The subscription can specify rules that constrain which events the consumer is interested in. It is then the event infrastructure&apos;s task to optimize the event forwarding to the consumers appropriately.' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a4787844F036B'/>  <!-- behavioral.events.Subscription.SubscribingClassMatchProducer -->
          </Model:ModelElement.constraints>
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xml:link = 'simple' href = 'modelmanagement.xml|a45013C240030'/>
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== behavioral.events.Subscription.producer    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra44ECC16B0021' 
              name = 'producer' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44ECC164016C'/>  <!-- behavioral.events.EventProducer -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a44ECC16B0021'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.events.Subscription.filters    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra44ECC23202DA' 
              name = 'filters' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44ECC2220006'/>  <!-- behavioral.events.EventFilter -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a44ECC23202DA'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.events.Subscription.subscribingClass    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra47DA749E0306' 
              name = 'subscribingClass' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'data.xml|a4432171B031E'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a47DA749E0306'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.events.Subscription.SubscribingClassMatchProducer    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a4787844F036B' 
              name = 'SubscribingClassMatchProducer' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context Subscription
inv:
  self.producer.notificationSignatures-&gt;forAll(ms:MethodSignature |
    self.subscribingClass.allSignatures()-&gt;exists(s:MethodSignature|s.conformsTo(ms)))</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a44ECBFF00094'/>  <!-- behavioral.events.Subscription -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== behavioral.events.org.omg.sap2mof.store=if_reference    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.756' 
          name = 'org.omg.sap2mof.store=if_reference' annotation = '' 
          tagId = 'org.omg.sap2mof.store' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>if_reference</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'ra44ECC16B0021'/>  <!-- behavioral.events.Subscription.producer -->
            <Model:ModelElement xmi.idref = 'a44ECC16B0021'/>
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== behavioral.events.org.omg.sap2mof.store=no    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.757' 
          name = 'org.omg.sap2mof.store=no' annotation = '' 
          tagId = 'org.omg.sap2mof.store' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>no</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'ra44ECC23202DA'/>  <!-- behavioral.events.Subscription.filters -->
            <Model:ModelElement xmi.idref = 'ra47DA749E0306'/>  <!-- behavioral.events.Subscription.subscribingClass -->
            <Model:ModelElement xmi.idref = 'a44ECC23202DA'/>
            <Model:ModelElement xmi.idref = 'a47DA749E0306'/>
            <Model:ModelElement xmi.idref = 'a44ECC07E0048'/>
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== behavioral.events.org.omg.sap2mof.violationMessageExpression='Subscribing class signatures must match producer\'s notification signatures'    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.758' 
          name = 'org.omg.sap2mof.violationMessageExpression=&apos;Subscribing class signatures must match producer\&apos;s notification signatures&apos;' annotation = '' 
          tagId = 'org.omg.sap2mof.violationMessageExpression' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>'Subscribing class signatures must match producer\'s notification signatures'</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a4787844F036B'/>  <!-- behavioral.events.Subscription.SubscribingClassMatchProducer -->
            <Model:ModelElement xmi.idref = 'a48079526010A'/>  <!-- behavioral.events.EventFilter.FilterBlockSignatureMatchNotificationSignature -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== behavioral.events.EventProducer    [Class] ==================== -->
        <Model:Class xmi.id = 'a44ECC164016C' 
          name = 'EventProducer' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:Namespace.contents>
            <!-- ==================== behavioral.events.EventProducer.subscriptions    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra44ECC16B0023' 
              name = 'subscriptions' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44ECBFF00094'/>  <!-- behavioral.events.Subscription -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a44ECC16B0023'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.events.EventProducer.notificationSignatures    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra44ECC07E004A' 
              name = 'notificationSignatures' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'data.xml|a47D67D15030D'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a44ECC07E004A'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== behavioral.events.org.omg.sap2mof.store=yes    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.759' 
          name = 'org.omg.sap2mof.store=yes' annotation = '' 
          tagId = 'org.omg.sap2mof.store' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>yes</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'ra44ECC07E004A'/>  <!-- behavioral.events.EventProducer.notificationSignatures -->
            <Model:ModelElement xmi.idref = 'a47DA749E02F6'/>
            <Model:ModelElement xmi.idref = 'a44ECC07E004A'/>
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== behavioral.events.EventFilter    [Class] ==================== -->
        <Model:Class xmi.id = 'a44ECC2220006' 
          name = 'EventFilter' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:ModelElement.annotation>From Holger's slides:

Event Patterns:
An event pattern is a decision rule that describes how to match a certain set of events
Each match is a (partially ordered) set of events that is an instance of the event pattern constructed by replacing variables in the pattern with values
It is similar to mathematical language for logical expressions
The main features of an event pattern language are (in order of complexity):
Basic event patterns to express patterns that match single event types
Content-based event matching in terms of the event type&#x0092;s attributes
Pattern operators for expressing relationships between events
Like logical operators, set operators, structural operators (causes, is independent of, before)
Context that restricts matches of patterns to specific contexts in which events are observed
Context refers to information outside the events
Temporal operators to specify the timing of events that match a pattern, or when a pattern should or should not match
Like &#x0093;at&#x0094;, &#x0093;after&#x0094;, &#x0093;during&#x0094;
</Model:ModelElement.annotation>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a48079526010A'/>  <!-- behavioral.events.EventFilter.FilterBlockSignatureMatchNotificationSignature -->
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <!-- ==================== behavioral.events.EventFilter.subscription    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra44ECC23202E4' 
              name = 'subscription' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44ECBFF00094'/>  <!-- behavioral.events.Subscription -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a44ECC23202E4'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.events.EventFilter.test    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra47FE5989016F' 
              name = 'test' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a454606CB020A'/>  <!-- behavioral.actions.Block -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a47FE5989016F'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.events.EventFilter.FilterBlockSignatureMatchNotificationSignature    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a48079526010A' 
              name = 'FilterBlockSignatureMatchNotificationSignature' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context EventFilter
inv:
  self.subscription.producer.notificationSignatures-&gt;exists(ms:MethodSignature |
    ms.conformsTo(self.test.getImplementedSignature()))</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a44ECC2220006'/>  <!-- behavioral.events.EventFilter -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== behavioral.events.Producer    [Association] ==================== -->
        <Model:Association xmi.id = 'a44ECC16A01C4' 
          name = 'Producer' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a44ECC16B0021' 
              name = 'producer' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44ECC164016C'/>  <!-- behavioral.events.EventProducer -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a44ECC16B0023' 
              name = 'subscriptions' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44ECBFF00094'/>  <!-- behavioral.events.Subscription -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== behavioral.events.A_filters_subscription    [Association] ==================== -->
        <Model:Association xmi.id = 'a44ECC2320059' 
          name = 'A_filters_subscription' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a44ECC23202DA' 
              name = 'filters' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44ECC2220006'/>  <!-- behavioral.events.EventFilter -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a44ECC23202E4' 
              name = 'subscription' annotation = '' 
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44ECBFF00094'/>  <!-- behavioral.events.Subscription -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== behavioral.events.Subscriptions    [Association] ==================== -->
        <Model:Association xmi.id = 'a47DA749E0160' 
          name = 'Subscriptions' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a47DA749E02F6' 
              name = 'subscription' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44ECBFF00094'/>  <!-- behavioral.events.Subscription -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a47DA749E0306' 
              name = 'subscribingClass' annotation = '' 
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'data.xml|a4432171B031E'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== behavioral.events.A_test_filter    [Association] ==================== -->
        <Model:Association xmi.id = 'a47FE59880193' 
          name = 'A_test_filter' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a47FE5989016F' 
              name = 'test' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a454606CB020A'/>  <!-- behavioral.actions.Block -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a47FE5989017B' 
              name = 'filter' annotation = '' 
              isNavigable = 'false' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44ECC2220006'/>  <!-- behavioral.events.EventFilter -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== behavioral.events.NotificationSignatures    [Association] ==================== -->
        <Model:Association xmi.id = 'a44ECC07D023C' 
          name = 'NotificationSignatures' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:ModelElement.annotation>The subsciption tells the method to be called upon event receipt. The class to which the method belongs would probably have to be stateless (or at least have a default constructor) to avoid having to restore the state from a persistent store upon event receipt.

Also, there needs to be a way to specify how the arguments of the method are assembled from the event.</Model:ModelElement.annotation>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a44ECC07E0048' 
              name = 'producer' annotation = '' 
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44ECC164016C'/>  <!-- behavioral.events.EventProducer -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a44ECC07E004A' 
              name = 'notificationSignatures' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'data.xml|a47D67D15030D'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
      </Model:Namespace.contents>
    </Model:Package>
    <!-- ==================== behavioral.transactions    [Package] ==================== -->
    <Model:Package xmi.id = 'a44D75B700032' 
      name = 'transactions' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' >
      <Model:ModelElement.annotation>Allows modelers / developers to specify transactional boundaries, tentative updates, compensation strategies etc.

Also, mark in the models how pieces of data-modifying functionality can share transactional scopes with other pieces. Make the distinction between shared transactions and compensation explicit.</Model:ModelElement.annotation>
      <Model:Namespace.contents>
        <!-- ==================== behavioral.transactions.Dummy    [Class] ==================== -->
        <Model:Class xmi.id = 'a458161330033' 
          name = 'Dummy' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' />
      </Model:Namespace.contents>
    </Model:Package>
    <!-- ==================== behavioral.status_and_action_old    [Package] ==================== -->
    <Model:Package xmi.id = 'a44F2DC700080' 
      name = 'status_and_action_old' annotation = 'Status and Action Modeling. Must be closely related to the businessobjects package and the behavioral/actions package. Decide whether this should be under behavioral or structural.' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' >
      <Model:Namespace.contents>
        <!-- ==================== behavioral.status_and_action_old.SAMAction    [Class] ==================== -->
        <Model:Class xmi.id = 'a44F2F5E500D4' 
          name = 'SAMAction' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:Namespace.contents>
            <!-- ==================== behavioral.status_and_action_old.SAMAction.businessObjectNode    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra44F2F5F1012F' 
              name = 'businessObjectNode' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'data.xml|a4432171B031E'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a44F2F5F1012F'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.status_and_action_old.SAMAction.samSchemaActions    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra44FE6D3702F2' 
              name = 'samSchemaActions' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE6C1503CE'/>  <!-- behavioral.status_and_action_old.SAMSchemaAction -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a44FE6D3702F2'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.status_and_action_old.SAMAction.name    [Attribute] ==================== -->
            <Model:Attribute xmi.id = 'a44FEACF000BF' 
              name = 'name' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' 
              isDerived = 'false' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60394'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <!-- ==================== behavioral.status_and_action_old.SAMAction.isAgentAction    [Attribute] ==================== -->
            <Model:Attribute xmi.id = 'a44FEACF000D3' 
              name = 'isAgentAction' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' 
              isDerived = 'false' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
              </Model:TypedElement.type>
            </Model:Attribute>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== behavioral.status_and_action_old.org.omg.sap2mof.store=no    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.760' 
          name = 'org.omg.sap2mof.store=no' annotation = '' 
          tagId = 'org.omg.sap2mof.store' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>no</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'ra44FE6D3702F2'/>  <!-- behavioral.status_and_action_old.SAMAction.samSchemaActions -->
            <Model:ModelElement xmi.idref = 'ra44FE5CE5000A'/>  <!-- behavioral.status_and_action_old.SAMStatusVariable.samStatusValues -->
            <Model:ModelElement xmi.idref = 'ra44FE6D9703D7'/>  <!-- behavioral.status_and_action_old.SAMStatusVariable.samSchemaVariables -->
            <Model:ModelElement xmi.idref = 'ra44FEAED5006C'/>  <!-- behavioral.status_and_action_old.SAMDerivator.samSchemaDerivators -->
            <Model:ModelElement xmi.idref = 'ra44FE6AC00097'/>  <!-- behavioral.status_and_action_old.SAMStatusSchema.samOperators -->
            <Model:ModelElement xmi.idref = 'ra44FE6C2F02BD'/>  <!-- behavioral.status_and_action_old.SAMStatusSchema.samSchemaVariables -->
            <Model:ModelElement xmi.idref = 'ra44FE6C38002C'/>  <!-- behavioral.status_and_action_old.SAMStatusSchema.samSchemaActions -->
            <Model:ModelElement xmi.idref = 'ra44FEB2510092'/>  <!-- behavioral.status_and_action_old.SAMStatusSchema.samSchemaDerivators -->
            <Model:ModelElement xmi.idref = 'ra44FEC4A7031C'/>  <!-- behavioral.status_and_action_old.SAMOperator.samSourceOperators -->
            <Model:ModelElement xmi.idref = 'ra44FEC6FA0398'/>  <!-- behavioral.status_and_action_old.SAMOperator.samSchemaActions -->
            <Model:ModelElement xmi.idref = 'ra44FE6C340184'/>  <!-- behavioral.status_and_action_old.SAMSchemaVariable.samSchemaValues -->
            <Model:ModelElement xmi.idref = 'ra44FEB9A5020D'/>  <!-- behavioral.status_and_action_old.SAMSchemaVariable.samTargetSchemaDerivators -->
            <Model:ModelElement xmi.idref = 'ra44FEB65C0225'/>  <!-- behavioral.status_and_action_old.SAMSchemaValue.samSourceSchemaValues -->
            <Model:ModelElement xmi.idref = 'ra44FEC288003D'/>  <!-- behavioral.status_and_action_old.SAMSchemaValue.samOperators -->
            <Model:ModelElement xmi.idref = 'ra44FEC5DF02E3'/>  <!-- behavioral.status_and_action_old.SAMSchemaValue.samSchemaActions -->
            <Model:ModelElement xmi.idref = 'ra44FEB4570100'/>  <!-- behavioral.status_and_action_old.SAMSchemaAction.samTargetSchemaValues -->
            <Model:ModelElement xmi.idref = 'ra44FEB9AC0253'/>  <!-- behavioral.status_and_action_old.SAMSchemaDerivator.samTargetSchemaVariable -->
            <Model:ModelElement xmi.idref = 'a44FE5CE5000A'/>
            <Model:ModelElement xmi.idref = 'a44FE6AC00097'/>
            <Model:ModelElement xmi.idref = 'a44FE6C2F02BD'/>
            <Model:ModelElement xmi.idref = 'a44FE6C340184'/>
            <Model:ModelElement xmi.idref = 'a44FE6C38002C'/>
            <Model:ModelElement xmi.idref = 'a44FE6D3702F2'/>
            <Model:ModelElement xmi.idref = 'a44FE6D9703D7'/>
            <Model:ModelElement xmi.idref = 'a44FEAED5006C'/>
            <Model:ModelElement xmi.idref = 'a44FEB2510092'/>
            <Model:ModelElement xmi.idref = 'a44FEB4570100'/>
            <Model:ModelElement xmi.idref = 'a44FEB65C0225'/>
            <Model:ModelElement xmi.idref = 'a44FEB9A5020D'/>
            <Model:ModelElement xmi.idref = 'a44FEB9AC0253'/>
            <Model:ModelElement xmi.idref = 'a44FEC288003D'/>
            <Model:ModelElement xmi.idref = 'a44FEC4A7031C'/>
            <Model:ModelElement xmi.idref = 'a44FEC5DF02E3'/>
            <Model:ModelElement xmi.idref = 'a44FEC6FA0398'/>
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== behavioral.status_and_action_old.SAMStatusVariable    [Class] ==================== -->
        <Model:Class xmi.id = 'a44F2F6C90251' 
          name = 'SAMStatusVariable' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:Namespace.contents>
            <!-- ==================== behavioral.status_and_action_old.SAMStatusVariable.businessObjectNode    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra44F2F6E600E6' 
              name = 'businessObjectNode' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'data.xml|a4432171B031E'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a44F2F6E600E6'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.status_and_action_old.SAMStatusVariable.samStatusValues    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra44FE5CE5000A' 
              name = 'samStatusValues' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE5BF60070'/>  <!-- behavioral.status_and_action_old.SAMStatusValue -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a44FE5CE5000A'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.status_and_action_old.SAMStatusVariable.samSchemaVariables    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra44FE6D9703D7' 
              name = 'samSchemaVariables' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE6B8503A2'/>  <!-- behavioral.status_and_action_old.SAMSchemaVariable -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a44FE6D9703D7'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.status_and_action_old.SAMStatusVariable.name    [Attribute] ==================== -->
            <Model:Attribute xmi.id = 'a44FEA801016C' 
              name = 'name' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' 
              isDerived = 'false' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60394'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <!-- ==================== behavioral.status_and_action_old.SAMStatusVariable.isAgentVariable    [Attribute] ==================== -->
            <Model:Attribute xmi.id = 'a44FEA92F0202' 
              name = 'isAgentVariable' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' 
              isDerived = 'false' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
              </Model:TypedElement.type>
            </Model:Attribute>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== behavioral.status_and_action_old.SAMDerivator    [Class] ==================== -->
        <Model:Class xmi.id = 'a44FE57E30371' 
          name = 'SAMDerivator' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:Namespace.contents>
            <!-- ==================== behavioral.status_and_action_old.SAMDerivator.businessObject    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra44FE5B2402E6' 
              name = 'businessObject' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'data.xml|a4432171B031E'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a44FE5B2402E6'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.status_and_action_old.SAMDerivator.samSchemaDerivators    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra44FEAED5006C' 
              name = 'samSchemaDerivators' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FEAD8A0233'/>  <!-- behavioral.status_and_action_old.SAMSchemaDerivator -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a44FEAED5006C'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.status_and_action_old.SAMDerivator.kind    [Attribute] ==================== -->
            <Model:Attribute xmi.id = 'a44FEAE070305' 
              name = 'kind' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' 
              isDerived = 'false' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FEADB80062'/>  <!-- behavioral.status_and_action_old.SAMDerivatorKindEnum -->
              </Model:TypedElement.type>
            </Model:Attribute>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== behavioral.status_and_action_old.SAMStatusValue    [Class] ==================== -->
        <Model:Class xmi.id = 'a44FE5BF60070' 
          name = 'SAMStatusValue' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:Namespace.contents>
            <!-- ==================== behavioral.status_and_action_old.SAMStatusValue.samStatusVariable    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra44FE5CE5000C' 
              name = 'samStatusVariable' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44F2F6C90251'/>  <!-- behavioral.status_and_action_old.SAMStatusVariable -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a44FE5CE5000C'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.status_and_action_old.SAMStatusValue.name    [Attribute] ==================== -->
            <Model:Attribute xmi.id = 'a44FEA8E401D3' 
              name = 'name' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' 
              isDerived = 'false' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60394'/>
              </Model:TypedElement.type>
            </Model:Attribute>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== behavioral.status_and_action_old.SAMStatusSchema    [Class] ==================== -->
        <Model:Class xmi.id = 'a44FE69A1022A' 
          name = 'SAMStatusSchema' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:Namespace.contents>
            <!-- ==================== behavioral.status_and_action_old.SAMStatusSchema.businessObjectNode    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra44FE69AF039C' 
              name = 'businessObjectNode' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'data.xml|a4432171B031E'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a44FE69AF039C'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.status_and_action_old.SAMStatusSchema.samOperators    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra44FE6AC00097' 
              name = 'samOperators' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE6A3D021D'/>  <!-- behavioral.status_and_action_old.SAMOperator -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a44FE6AC00097'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.status_and_action_old.SAMStatusSchema.samSchemaVariables    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra44FE6C2F02BD' 
              name = 'samSchemaVariables' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE6B8503A2'/>  <!-- behavioral.status_and_action_old.SAMSchemaVariable -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a44FE6C2F02BD'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.status_and_action_old.SAMStatusSchema.samSchemaActions    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra44FE6C38002C' 
              name = 'samSchemaActions' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE6C1503CE'/>  <!-- behavioral.status_and_action_old.SAMSchemaAction -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a44FE6C38002C'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.status_and_action_old.SAMStatusSchema.samSchemaDerivators    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra44FEB2510092' 
              name = 'samSchemaDerivators' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FEAD8A0233'/>  <!-- behavioral.status_and_action_old.SAMSchemaDerivator -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a44FEB2510092'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.status_and_action_old.SAMStatusSchema.name    [Attribute] ==================== -->
            <Model:Attribute xmi.id = 'a44FEA8D00116' 
              name = 'name' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' 
              isDerived = 'false' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60394'/>
              </Model:TypedElement.type>
            </Model:Attribute>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== behavioral.status_and_action_old.SAMOperator    [Class] ==================== -->
        <Model:Class xmi.id = 'a44FE6A3D021D' 
          name = 'SAMOperator' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:Namespace.contents>
            <!-- ==================== behavioral.status_and_action_old.SAMOperator.samStatusSchema    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra44FE6AC00099' 
              name = 'samStatusSchema' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE69A1022A'/>  <!-- behavioral.status_and_action_old.SAMStatusSchema -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a44FE6AC00099'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.status_and_action_old.SAMOperator.samSchemaValues    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra44FEC288003F' 
              name = 'samSchemaValues' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE6C0901FA'/>  <!-- behavioral.status_and_action_old.SAMSchemaValue -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a44FEC288003F'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.status_and_action_old.SAMOperator.samTargetOperators    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra44FEC4A7031E' 
              name = 'samTargetOperators' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE6A3D021D'/>  <!-- behavioral.status_and_action_old.SAMOperator -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a44FEC4A7031E'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.status_and_action_old.SAMOperator.samSourceOperators    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra44FEC4A7031C' 
              name = 'samSourceOperators' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE6A3D021D'/>  <!-- behavioral.status_and_action_old.SAMOperator -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a44FEC4A7031C'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.status_and_action_old.SAMOperator.samSchemaActions    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra44FEC6FA0398' 
              name = 'samSchemaActions' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE6C1503CE'/>  <!-- behavioral.status_and_action_old.SAMSchemaAction -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a44FEC6FA0398'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.status_and_action_old.SAMOperator.kind    [Attribute] ==================== -->
            <Model:Attribute xmi.id = 'a44FEAA5901A4' 
              name = 'kind' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' 
              isDerived = 'false' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FEA9990023'/>  <!-- behavioral.status_and_action_old.SAMOperatorKindEnum -->
              </Model:TypedElement.type>
            </Model:Attribute>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== behavioral.status_and_action_old.SAMSchemaVariable    [Class] ==================== -->
        <Model:Class xmi.id = 'a44FE6B8503A2' 
          name = 'SAMSchemaVariable' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:Namespace.contents>
            <!-- ==================== behavioral.status_and_action_old.SAMSchemaVariable.samStatusSchema    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra44FE6C2F02BF' 
              name = 'samStatusSchema' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE69A1022A'/>  <!-- behavioral.status_and_action_old.SAMStatusSchema -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a44FE6C2F02BF'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.status_and_action_old.SAMSchemaVariable.samSchemaValues    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra44FE6C340184' 
              name = 'samSchemaValues' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE6C0901FA'/>  <!-- behavioral.status_and_action_old.SAMSchemaValue -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a44FE6C340184'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.status_and_action_old.SAMSchemaVariable.samSchemaValue    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra44FE6D9703D9' 
              name = 'samSchemaValue' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44F2F6C90251'/>  <!-- behavioral.status_and_action_old.SAMStatusVariable -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a44FE6D9703D9'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.status_and_action_old.SAMSchemaVariable.samTargetSchemaDerivators    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra44FEB9A5020D' 
              name = 'samTargetSchemaDerivators' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FEAD8A0233'/>  <!-- behavioral.status_and_action_old.SAMSchemaDerivator -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a44FEB9A5020D'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.status_and_action_old.SAMSchemaVariable.samSourceSchemaDerivators    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra44FEB9AC0255' 
              name = 'samSourceSchemaDerivators' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FEAD8A0233'/>  <!-- behavioral.status_and_action_old.SAMSchemaDerivator -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a44FEB9AC0255'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.status_and_action_old.SAMSchemaVariable.hasStateGuard    [Attribute] ==================== -->
            <Model:Attribute xmi.id = 'a44FEAC5D000F' 
              name = 'hasStateGuard' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' 
              isDerived = 'false' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
              </Model:TypedElement.type>
            </Model:Attribute>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== behavioral.status_and_action_old.SAMSchemaValue    [Class] ==================== -->
        <Model:Class xmi.id = 'a44FE6C0901FA' 
          name = 'SAMSchemaValue' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:Namespace.contents>
            <!-- ==================== behavioral.status_and_action_old.SAMSchemaValue.samSchemaVariable    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra44FE6C340186' 
              name = 'samSchemaVariable' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE6B8503A2'/>  <!-- behavioral.status_and_action_old.SAMSchemaVariable -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a44FE6C340186'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.status_and_action_old.SAMSchemaValue.samSourceSchemaActions    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra44FEB4570102' 
              name = 'samSourceSchemaActions' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE6C1503CE'/>  <!-- behavioral.status_and_action_old.SAMSchemaAction -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a44FEB4570102'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.status_and_action_old.SAMSchemaValue.samTargetSchemaValues    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra44FEB65C022F' 
              name = 'samTargetSchemaValues' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE6C0901FA'/>  <!-- behavioral.status_and_action_old.SAMSchemaValue -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a44FEB65C022F'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.status_and_action_old.SAMSchemaValue.samSourceSchemaValues    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra44FEB65C0225' 
              name = 'samSourceSchemaValues' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE6C0901FA'/>  <!-- behavioral.status_and_action_old.SAMSchemaValue -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a44FEB65C0225'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.status_and_action_old.SAMSchemaValue.samOperators    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra44FEC288003D' 
              name = 'samOperators' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE6A3D021D'/>  <!-- behavioral.status_and_action_old.SAMOperator -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a44FEC288003D'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.status_and_action_old.SAMSchemaValue.samSchemaActions    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra44FEC5DF02E3' 
              name = 'samSchemaActions' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE6C1503CE'/>  <!-- behavioral.status_and_action_old.SAMSchemaAction -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a44FEC5DF02E3'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.status_and_action_old.SAMSchemaValue.isInitial    [Attribute] ==================== -->
            <Model:Attribute xmi.id = 'a44FEAB31008A' 
              name = 'isInitial' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' 
              isDerived = 'false' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <!-- ==================== behavioral.status_and_action_old.SAMSchemaValue.isInhibiting    [Attribute] ==================== -->
            <Model:Attribute xmi.id = 'a44FEAB4101E1' 
              name = 'isInhibiting' annotation = '' 
              scope = 'instance_level' visibility = 'private_vis' 
              isChangeable = 'true' 
              isDerived = 'false' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
              </Model:TypedElement.type>
            </Model:Attribute>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== behavioral.status_and_action_old.SAMSchemaAction    [Class] ==================== -->
        <Model:Class xmi.id = 'a44FE6C1503CE' 
          name = 'SAMSchemaAction' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:Namespace.contents>
            <!-- ==================== behavioral.status_and_action_old.SAMSchemaAction.samStatusSchema    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra44FE6C38002E' 
              name = 'samStatusSchema' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE69A1022A'/>  <!-- behavioral.status_and_action_old.SAMStatusSchema -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a44FE6C38002E'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.status_and_action_old.SAMSchemaAction.samAction    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra44FE6D3702FC' 
              name = 'samAction' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44F2F5E500D4'/>  <!-- behavioral.status_and_action_old.SAMAction -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a44FE6D3702FC'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.status_and_action_old.SAMSchemaAction.samTargetSchemaValues    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra44FEB4570100' 
              name = 'samTargetSchemaValues' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE6C0901FA'/>  <!-- behavioral.status_and_action_old.SAMSchemaValue -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a44FEB4570100'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.status_and_action_old.SAMSchemaAction.samSchemaValues    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra44FEC5DF02E5' 
              name = 'samSchemaValues' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE6C0901FA'/>  <!-- behavioral.status_and_action_old.SAMSchemaValue -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a44FEC5DF02E5'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.status_and_action_old.SAMSchemaAction.samSchemaOperators    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra44FEC6FA039A' 
              name = 'samSchemaOperators' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE6A3D021D'/>  <!-- behavioral.status_and_action_old.SAMOperator -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a44FEC6FA039A'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== behavioral.status_and_action_old.SAMOperatorKindEnum    [DataType] ==================== -->
        <Model:DataType xmi.id = 'a44FEA9990023' 
          name = 'SAMOperatorKindEnum' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' >
          <Model:DataType.typeCode>
            <XMI.CorbaTypeCode>
              <XMI.CorbaTcEnum xmi.tcName = 'SAMOperatorKindEnum'>
              <XMI.CorbaTcEnumLabel xmi.tcName = 'OR'/>
              <XMI.CorbaTcEnumLabel xmi.tcName = 'AND'/>
              </XMI.CorbaTcEnum>
            </XMI.CorbaTypeCode>
          </Model:DataType.typeCode>
        </Model:DataType>
        <!-- ==================== behavioral.status_and_action_old.SAMSchemaDerivator    [Class] ==================== -->
        <Model:Class xmi.id = 'a44FEAD8A0233' 
          name = 'SAMSchemaDerivator' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:Namespace.contents>
            <!-- ==================== behavioral.status_and_action_old.SAMSchemaDerivator.samDerivator    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra44FEAED5006E' 
              name = 'samDerivator' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE57E30371'/>  <!-- behavioral.status_and_action_old.SAMDerivator -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a44FEAED5006E'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.status_and_action_old.SAMSchemaDerivator.samStatusSchema    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra44FEB2510094' 
              name = 'samStatusSchema' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE69A1022A'/>  <!-- behavioral.status_and_action_old.SAMStatusSchema -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a44FEB2510094'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.status_and_action_old.SAMSchemaDerivator.samSourceSchemaVariables    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra44FEB9A50217' 
              name = 'samSourceSchemaVariables' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE6B8503A2'/>  <!-- behavioral.status_and_action_old.SAMSchemaVariable -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a44FEB9A50217'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== behavioral.status_and_action_old.SAMSchemaDerivator.samTargetSchemaVariable    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra44FEB9AC0253' 
              name = 'samTargetSchemaVariable' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE6B8503A2'/>  <!-- behavioral.status_and_action_old.SAMSchemaVariable -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a44FEB9AC0253'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== behavioral.status_and_action_old.SAMDerivatorKindEnum    [DataType] ==================== -->
        <Model:DataType xmi.id = 'a44FEADB80062' 
          name = 'SAMDerivatorKindEnum' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' >
          <Model:DataType.typeCode>
            <XMI.CorbaTypeCode>
              <XMI.CorbaTcEnum xmi.tcName = 'SAMDerivatorKindEnum'>
              <XMI.CorbaTcEnumLabel xmi.tcName = 'POPULATION'/>
              <XMI.CorbaTcEnumLabel xmi.tcName = 'AGGREGATION'/>
              <XMI.CorbaTcEnumLabel xmi.tcName = 'OVERALL'/>
              </XMI.CorbaTcEnum>
            </XMI.CorbaTypeCode>
          </Model:DataType.typeCode>
        </Model:DataType>
        <!-- ==================== behavioral.status_and_action_old.PreconditionKindEnum    [DataType] ==================== -->
        <Model:DataType xmi.id = 'a44FEBD5B0230' 
          name = 'PreconditionKindEnum' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' >
          <Model:DataType.typeCode>
            <XMI.CorbaTypeCode>
              <XMI.CorbaTcEnum xmi.tcName = 'PreconditionKindEnum'>
              <XMI.CorbaTcEnumLabel xmi.tcName = 'ENABLE'/>
              <XMI.CorbaTcEnumLabel xmi.tcName = 'REQUIRED'/>
              <XMI.CorbaTcEnumLabel xmi.tcName = 'INHIBIT'/>
              <XMI.CorbaTcEnumLabel xmi.tcName = 'NEUTEAL'/>
              </XMI.CorbaTcEnum>
            </XMI.CorbaTypeCode>
          </Model:DataType.typeCode>
        </Model:DataType>
        <!-- ==================== behavioral.status_and_action_old.SAMActionForBusinessObjectNode    [Association] ==================== -->
        <Model:Association xmi.id = 'a44F2F5F002C6' 
          name = 'SAMActionForBusinessObjectNode' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a44F2F5F1012D' 
              name = 'samActions' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44F2F5E500D4'/>  <!-- behavioral.status_and_action_old.SAMAction -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a44F2F5F1012F' 
              name = 'businessObjectNode' annotation = '' 
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'data.xml|a4432171B031E'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== behavioral.status_and_action_old.org.omg.sap2mof.store=yes    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.761' 
          name = 'org.omg.sap2mof.store=yes' annotation = '' 
          tagId = 'org.omg.sap2mof.store' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>yes</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a44F2F5F1012D'/>
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== behavioral.status_and_action_old.SAMStatusVariableForBusinessObjectNode    [Association] ==================== -->
        <Model:Association xmi.id = 'a44F2F6E50128' 
          name = 'SAMStatusVariableForBusinessObjectNode' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a44F2F6E600E4' 
              name = 'samStatusVariables' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44F2F6C90251'/>  <!-- behavioral.status_and_action_old.SAMStatusVariable -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a44F2F6E600E6' 
              name = 'businessObjectNode' annotation = '' 
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'data.xml|a4432171B031E'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== behavioral.status_and_action_old.SAMDerivatorForBusinessObject    [Association] ==================== -->
        <Model:Association xmi.id = 'a44FE5B2400EF' 
          name = 'SAMDerivatorForBusinessObject' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a44FE5B2402E4' 
              name = 'samDerivators' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE57E30371'/>  <!-- behavioral.status_and_action_old.SAMDerivator -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a44FE5B2402E6' 
              name = 'businessObject' annotation = '' 
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'data.xml|a4432171B031E'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== behavioral.status_and_action_old.SAMStatusValueForSAMStatusVariable    [Association] ==================== -->
        <Model:Association xmi.id = 'a44FE5CE401A3' 
          name = 'SAMStatusValueForSAMStatusVariable' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a44FE5CE5000A' 
              name = 'samStatusValues' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE5BF60070'/>  <!-- behavioral.status_and_action_old.SAMStatusValue -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a44FE5CE5000C' 
              name = 'samStatusVariable' annotation = '' 
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44F2F6C90251'/>  <!-- behavioral.status_and_action_old.SAMStatusVariable -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== behavioral.status_and_action_old.SAMStatusSchemaForBusinessObjectNode    [Association] ==================== -->
        <Model:Association xmi.id = 'a44FE69AF007B' 
          name = 'SAMStatusSchemaForBusinessObjectNode' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a44FE69AF0392' 
              name = 'samStatusSchema' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE69A1022A'/>  <!-- behavioral.status_and_action_old.SAMStatusSchema -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a44FE69AF039C' 
              name = 'businessObjectNode' annotation = '' 
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'data.xml|a4432171B031E'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== behavioral.status_and_action_old.SAMOperatorForSAMStatusSchema    [Association] ==================== -->
        <Model:Association xmi.id = 'a44FE6ABF0276' 
          name = 'SAMOperatorForSAMStatusSchema' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a44FE6AC00097' 
              name = 'samOperators' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE6A3D021D'/>  <!-- behavioral.status_and_action_old.SAMOperator -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a44FE6AC00099' 
              name = 'samStatusSchema' annotation = '' 
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE69A1022A'/>  <!-- behavioral.status_and_action_old.SAMStatusSchema -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== behavioral.status_and_action_old.SAMSchemaVariableForSAMStatusSchema    [Association] ==================== -->
        <Model:Association xmi.id = 'a44FE6C2F003D' 
          name = 'SAMSchemaVariableForSAMStatusSchema' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a44FE6C2F02BD' 
              name = 'samSchemaVariables' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE6B8503A2'/>  <!-- behavioral.status_and_action_old.SAMSchemaVariable -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a44FE6C2F02BF' 
              name = 'samStatusSchema' annotation = '' 
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE69A1022A'/>  <!-- behavioral.status_and_action_old.SAMStatusSchema -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== behavioral.status_and_action_old.SAMSchemaValueForSAMSchemaVariable    [Association] ==================== -->
        <Model:Association xmi.id = 'a44FE6C330331' 
          name = 'SAMSchemaValueForSAMSchemaVariable' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a44FE6C340184' 
              name = 'samSchemaValues' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE6C0901FA'/>  <!-- behavioral.status_and_action_old.SAMSchemaValue -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a44FE6C340186' 
              name = 'samSchemaVariable' annotation = '' 
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE6B8503A2'/>  <!-- behavioral.status_and_action_old.SAMSchemaVariable -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== behavioral.status_and_action_old.SAMSchemaActionForSAMStatusSchema    [Association] ==================== -->
        <Model:Association xmi.id = 'a44FE6C3700F2' 
          name = 'SAMSchemaActionForSAMStatusSchema' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a44FE6C38002C' 
              name = 'samSchemaActions' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE6C1503CE'/>  <!-- behavioral.status_and_action_old.SAMSchemaAction -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a44FE6C38002E' 
              name = 'samStatusSchema' annotation = '' 
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE69A1022A'/>  <!-- behavioral.status_and_action_old.SAMStatusSchema -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== behavioral.status_and_action_old.SAMSchemaActionForSAMAction    [Association] ==================== -->
        <Model:Association xmi.id = 'a44FE6D36032C' 
          name = 'SAMSchemaActionForSAMAction' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a44FE6D3702F2' 
              name = 'samSchemaActions' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE6C1503CE'/>  <!-- behavioral.status_and_action_old.SAMSchemaAction -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a44FE6D3702FC' 
              name = 'samAction' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44F2F5E500D4'/>  <!-- behavioral.status_and_action_old.SAMAction -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== behavioral.status_and_action_old.SAMSchemaVariableForSAMStatusVariable    [Association] ==================== -->
        <Model:Association xmi.id = 'a44FE6D970034' 
          name = 'SAMSchemaVariableForSAMStatusVariable' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a44FE6D9703D7' 
              name = 'samSchemaVariables' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE6B8503A2'/>  <!-- behavioral.status_and_action_old.SAMSchemaVariable -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a44FE6D9703D9' 
              name = 'samSchemaValue' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44F2F6C90251'/>  <!-- behavioral.status_and_action_old.SAMStatusVariable -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== behavioral.status_and_action_old.SAMSchemaDerivatorForSAMDerivator    [Association] ==================== -->
        <Model:Association xmi.id = 'a44FEAED3009B' 
          name = 'SAMSchemaDerivatorForSAMDerivator' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a44FEAED5006C' 
              name = 'samSchemaDerivators' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FEAD8A0233'/>  <!-- behavioral.status_and_action_old.SAMSchemaDerivator -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a44FEAED5006E' 
              name = 'samDerivator' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE57E30371'/>  <!-- behavioral.status_and_action_old.SAMDerivator -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== behavioral.status_and_action_old.SAMSchemaDerivatorForSAMStatusSchema    [Association] ==================== -->
        <Model:Association xmi.id = 'a44FEB24F0374' 
          name = 'SAMSchemaDerivatorForSAMStatusSchema' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a44FEB2510092' 
              name = 'samSchemaDerivators' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FEAD8A0233'/>  <!-- behavioral.status_and_action_old.SAMSchemaDerivator -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a44FEB2510094' 
              name = 'samStatusSchema' annotation = '' 
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE69A1022A'/>  <!-- behavioral.status_and_action_old.SAMStatusSchema -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== behavioral.status_and_action_old.SAMStatusTransition    [Association] ==================== -->
        <Model:Association xmi.id = 'a44FEB45500C1' 
          name = 'SAMStatusTransition' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a44FEB4570100' 
              name = 'samTargetSchemaValues' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE6C0901FA'/>  <!-- behavioral.status_and_action_old.SAMSchemaValue -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a44FEB4570102' 
              name = 'samSourceSchemaActions' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE6C1503CE'/>  <!-- behavioral.status_and_action_old.SAMSchemaAction -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== behavioral.status_and_action_old.SAMStatusSynchronizer    [Association] ==================== -->
        <Model:Association xmi.id = 'a44FEB65A0222' 
          name = 'SAMStatusSynchronizer' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a44FEB65C0225' 
              name = 'samSourceSchemaValues' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE6C0901FA'/>  <!-- behavioral.status_and_action_old.SAMSchemaValue -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a44FEB65C022F' 
              name = 'samTargetSchemaValues' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE6C0901FA'/>  <!-- behavioral.status_and_action_old.SAMSchemaValue -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== behavioral.status_and_action_old.SAMSchemaDerivatorForSAMSchemaVariable    [Association] ==================== -->
        <Model:Association xmi.id = 'a44FEB9A40099' 
          name = 'SAMSchemaDerivatorForSAMSchemaVariable' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a44FEB9A5020D' 
              name = 'samTargetSchemaDerivators' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FEAD8A0233'/>  <!-- behavioral.status_and_action_old.SAMSchemaDerivator -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a44FEB9A50217' 
              name = 'samSourceSchemaVariables' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE6B8503A2'/>  <!-- behavioral.status_and_action_old.SAMSchemaVariable -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== behavioral.status_and_action_old.SAMSchemaVariableForSAMSchemaDerivator    [Association] ==================== -->
        <Model:Association xmi.id = 'a44FEB9AB03D9' 
          name = 'SAMSchemaVariableForSAMSchemaDerivator' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a44FEB9AC0253' 
              name = 'samTargetSchemaVariable' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE6B8503A2'/>  <!-- behavioral.status_and_action_old.SAMSchemaVariable -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a44FEB9AC0255' 
              name = 'samSourceSchemaDerivators' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FEAD8A0233'/>  <!-- behavioral.status_and_action_old.SAMSchemaDerivator -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== behavioral.status_and_action_old.SAMNeutralPreconditonFromValueToOperator    [Association] ==================== -->
        <Model:Association xmi.id = 'a44FEC2860117' 
          name = 'SAMNeutralPreconditonFromValueToOperator' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a44FEC288003D' 
              name = 'samOperators' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE6A3D021D'/>  <!-- behavioral.status_and_action_old.SAMOperator -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a44FEC288003F' 
              name = 'samSchemaValues' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE6C0901FA'/>  <!-- behavioral.status_and_action_old.SAMSchemaValue -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== behavioral.status_and_action_old.SAMNeutralPreconditionFromOperatorToOperator    [Association] ==================== -->
        <Model:Association xmi.id = 'a44FEC4A5007A' 
          name = 'SAMNeutralPreconditionFromOperatorToOperator' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a44FEC4A7031C' 
              name = 'samSourceOperators' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE6A3D021D'/>  <!-- behavioral.status_and_action_old.SAMOperator -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a44FEC4A7031E' 
              name = 'samTargetOperators' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE6A3D021D'/>  <!-- behavioral.status_and_action_old.SAMOperator -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== behavioral.status_and_action_old.SAMPreconditionFromValueToAction    [Association] ==================== -->
        <Model:Association xmi.id = 'a44FEC5DF0026' 
          name = 'SAMPreconditionFromValueToAction' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a44FEC5DF02E3' 
              name = 'samSchemaActions' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE6C1503CE'/>  <!-- behavioral.status_and_action_old.SAMSchemaAction -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a44FEC5DF02E5' 
              name = 'samSchemaValues' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE6C0901FA'/>  <!-- behavioral.status_and_action_old.SAMSchemaValue -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== behavioral.status_and_action_old.SAMPreconditionFromOperatorToAction    [Association] ==================== -->
        <Model:Association xmi.id = 'a44FEC6F90333' 
          name = 'SAMPreconditionFromOperatorToAction' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a44FEC6FA0398' 
              name = 'samSchemaActions' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE6C1503CE'/>  <!-- behavioral.status_and_action_old.SAMSchemaAction -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a44FEC6FA039A' 
              name = 'samSchemaOperators' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44FE6A3D021D'/>  <!-- behavioral.status_and_action_old.SAMOperator -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
      </Model:Namespace.contents>
    </Model:Package>
    <!-- ==================== behavioral.status_and_action    [Package] ==================== -->
    <Model:Package xmi.id = 'a474A122E006C' 
      name = 'status_and_action' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' >
      <Model:ModelElement.annotation>S&amp;AM is mostly about pre- and post-conditions for invocation of signatures. The abstraction that S&amp;AM adds over simple pre/post constraints is that it groups parts of an object's state into what is called a status variable. Status variables furthermore are expected to have a finite set of possible values.

Synchronizers are used to set the status of a status variable. This means that for those status variables (if they are implemented only by a signature) there must be a writing signature that allows for setting the value. Conceptually, synchronizers seem a bit like an event subscription with the condition that a status variable assumes a certain value, and the event listener sets the value of another status variable to a given value.

Status population also does a setting of status variables. Viewn from the other side, this looks like a status variable is derived from the values of other status variables. Again, this could be expressed as a signature with a corresponding implementation that acts as a status variable signature. Impact analysis could be performed for the implementation to determine when the value changes.

Given a full-blown boolean expression algebra, only a subset of the expressions can be modeled in S&amp;AM. Also, if the type of a status variable has an infinite (or very large) value set, modeling with the S&amp;AM notation gets unwieldy.

From a distance, it seems that S&amp;AM is a graphical notation for a specific subset of pre/post constraints over "status functions" and invocable signatures.

S&amp;AM could be regarded a view on other constraint and event registration metadata, but that would be difficult to bring, e.g., into a graphical notation.</Model:ModelElement.annotation>
      <Model:Namespace.contents>
        <!-- ==================== behavioral.status_and_action.design    [Package] ==================== -->
        <Model:Package xmi.id = 'a4743818802D4' 
          name = 'design' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' >
          <Model:Namespace.contents>
            <!-- ==================== behavioral.status_and_action.design.BusinessObject    [Class] ==================== -->
            <Model:Class xmi.id = 'a474381C1025F' 
              name = 'BusinessObject' annotation = '' 
              isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
              isSingleton = 'false' >
              <Model:Namespace.contents>
                <!-- ==================== behavioral.status_and_action.design.BusinessObject.nodes    [Reference] ==================== -->
                <Model:Reference xmi.id = 'ra4743821B00D3' 
                  name = 'nodes' annotation = '' 
                  scope = 'instance_level' visibility = 'public_vis' 
                  isChangeable = 'true' >
                  <Model:StructuralFeature.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:StructuralFeature.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a474381D302BF'/>  <!-- behavioral.status_and_action.design.BusinessObjectNode -->
                  </Model:TypedElement.type>
                  <Model:Reference.referencedEnd>
                    <Model:AssociationEnd xmi.idref = 'a4743821B00D3'/>
                  </Model:Reference.referencedEnd>
                </Model:Reference>
              </Model:Namespace.contents>
            </Model:Class>
            <!-- ==================== behavioral.status_and_action.design.BusinessObjectNode    [Class] ==================== -->
            <Model:Class xmi.id = 'a474381D302BF' 
              name = 'BusinessObjectNode' annotation = '' 
              isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
              isSingleton = 'false' >
              <Model:GeneralizableElement.supertypes>
                <Model:GeneralizableElement xml:link = 'simple' href = 'modelmanagement.xml|a45013C240030'/>
              </Model:GeneralizableElement.supertypes>
              <Model:Namespace.contents>
                <!-- ==================== behavioral.status_and_action.design.BusinessObjectNode.variables    [Reference] ==================== -->
                <Model:Reference xmi.id = 'ra474382700178' 
                  name = 'variables' annotation = '' 
                  scope = 'instance_level' visibility = 'public_vis' 
                  isChangeable = 'true' >
                  <Model:StructuralFeature.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:StructuralFeature.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a474382660242'/>  <!-- behavioral.status_and_action.design.StatusVariable -->
                  </Model:TypedElement.type>
                  <Model:Reference.referencedEnd>
                    <Model:AssociationEnd xmi.idref = 'a474382700178'/>
                  </Model:Reference.referencedEnd>
                </Model:Reference>
                <!-- ==================== behavioral.status_and_action.design.BusinessObjectNode.actions    [Reference] ==================== -->
                <Model:Reference xmi.id = 'ra47438550012E' 
                  name = 'actions' annotation = '' 
                  scope = 'instance_level' visibility = 'public_vis' 
                  isChangeable = 'true' >
                  <Model:StructuralFeature.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:StructuralFeature.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4743854A01DA'/>  <!-- behavioral.status_and_action.design.Action -->
                  </Model:TypedElement.type>
                  <Model:Reference.referencedEnd>
                    <Model:AssociationEnd xmi.idref = 'a47438550012E'/>
                  </Model:Reference.referencedEnd>
                </Model:Reference>
              </Model:Namespace.contents>
            </Model:Class>
            <!-- ==================== behavioral.status_and_action.design.StatusVariable    [Class] ==================== -->
            <Model:Class xmi.id = 'a474382660242' 
              name = 'StatusVariable' annotation = '' 
              isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
              isSingleton = 'false' >
              <Model:GeneralizableElement.supertypes>
                <Model:GeneralizableElement xmi.idref = 'a474A08690112'/>  <!-- behavioral.status_and_action.design.AbstractStatusVariable -->
              </Model:GeneralizableElement.supertypes>
            </Model:Class>
            <!-- ==================== behavioral.status_and_action.design.StatusValue    [Class] ==================== -->
            <Model:Class xmi.id = 'a474384A700EC' 
              name = 'StatusValue' annotation = '' 
              isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
              isSingleton = 'false' >
              <Model:GeneralizableElement.supertypes>
                <Model:GeneralizableElement xmi.idref = 'a474A091C02AC'/>  <!-- behavioral.status_and_action.design.AbstractStatusValue -->
              </Model:GeneralizableElement.supertypes>
            </Model:Class>
            <!-- ==================== behavioral.status_and_action.design.Action    [Class] ==================== -->
            <Model:Class xmi.id = 'a4743854A01DA' 
              name = 'Action' annotation = '' 
              isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
              isSingleton = 'false' >
              <Model:GeneralizableElement.supertypes>
                <Model:GeneralizableElement xmi.idref = 'a474A09310202'/>  <!-- behavioral.status_and_action.design.AbstractAction -->
              </Model:GeneralizableElement.supertypes>
            </Model:Class>
            <!-- ==================== behavioral.status_and_action.design.AbstractStatusVariable    [Class] ==================== -->
            <Model:Class xmi.id = 'a474A08690112' 
              name = 'AbstractStatusVariable' annotation = '' 
              isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' 
              isSingleton = 'false' >
              <Model:GeneralizableElement.supertypes>
                <Model:GeneralizableElement xml:link = 'simple' href = 'modelmanagement.xml|a45013C240030'/>
              </Model:GeneralizableElement.supertypes>
              <Model:Namespace.contents>
                <!-- ==================== behavioral.status_and_action.design.AbstractStatusVariable.values    [Reference] ==================== -->
                <Model:Reference xmi.id = 'ra474D300E0254' 
                  name = 'values' annotation = '' 
                  scope = 'instance_level' visibility = 'public_vis' 
                  isChangeable = 'true' >
                  <Model:StructuralFeature.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:StructuralFeature.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a474A091C02AC'/>  <!-- behavioral.status_and_action.design.AbstractStatusValue -->
                  </Model:TypedElement.type>
                  <Model:Reference.referencedEnd>
                    <Model:AssociationEnd xmi.idref = 'a474D300E0254'/>
                  </Model:Reference.referencedEnd>
                </Model:Reference>
                <!-- ==================== behavioral.status_and_action.design.AbstractStatusVariable.isAgent    [Attribute] ==================== -->
                <Model:Attribute xmi.id = 'a474A087800C7' 
                  name = 'isAgent' annotation = '' 
                  scope = 'instance_level' visibility = 'public_vis' 
                  isChangeable = 'true' 
                  isDerived = 'false' >
                  <Model:StructuralFeature.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:StructuralFeature.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
                  </Model:TypedElement.type>
                </Model:Attribute>
                <!-- ==================== behavioral.status_and_action.design.AbstractStatusVariable.isStateGuarded    [Attribute] ==================== -->
                <Model:Attribute xmi.id = 'a474A087D003C' 
                  name = 'isStateGuarded' annotation = '' 
                  scope = 'instance_level' visibility = 'public_vis' 
                  isChangeable = 'true' 
                  isDerived = 'false' >
                  <Model:StructuralFeature.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:StructuralFeature.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
                  </Model:TypedElement.type>
                </Model:Attribute>
              </Model:Namespace.contents>
            </Model:Class>
            <!-- ==================== behavioral.status_and_action.design.AbstractStatusValue    [Class] ==================== -->
            <Model:Class xmi.id = 'a474A091C02AC' 
              name = 'AbstractStatusValue' annotation = '' 
              isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' 
              isSingleton = 'false' >
              <Model:GeneralizableElement.supertypes>
                <Model:GeneralizableElement xml:link = 'simple' href = 'modelmanagement.xml|a45013C240030'/>
              </Model:GeneralizableElement.supertypes>
              <Model:Namespace.contents>
                <!-- ==================== behavioral.status_and_action.design.AbstractStatusValue.isInitial    [Attribute] ==================== -->
                <Model:Attribute xmi.id = 'a474A0A8C016E' 
                  name = 'isInitial' annotation = '' 
                  scope = 'instance_level' visibility = 'public_vis' 
                  isChangeable = 'true' 
                  isDerived = 'false' >
                  <Model:StructuralFeature.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:StructuralFeature.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
                  </Model:TypedElement.type>
                </Model:Attribute>
                <!-- ==================== behavioral.status_and_action.design.AbstractStatusValue.isInhibiting    [Attribute] ==================== -->
                <Model:Attribute xmi.id = 'a474A0A920065' 
                  name = 'isInhibiting' annotation = '' 
                  scope = 'instance_level' visibility = 'public_vis' 
                  isChangeable = 'true' 
                  isDerived = 'false' >
                  <Model:StructuralFeature.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:StructuralFeature.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
                  </Model:TypedElement.type>
                </Model:Attribute>
                <!-- ==================== behavioral.status_and_action.design.AbstractStatusValue.isStateGuarded    [Attribute] ==================== -->
                <Model:Attribute xmi.id = 'a474A0A980334' 
                  name = 'isStateGuarded' annotation = '' 
                  scope = 'instance_level' visibility = 'public_vis' 
                  isChangeable = 'true' 
                  isDerived = 'false' >
                  <Model:StructuralFeature.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:StructuralFeature.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
                  </Model:TypedElement.type>
                </Model:Attribute>
              </Model:Namespace.contents>
            </Model:Class>
            <!-- ==================== behavioral.status_and_action.design.AbstractAction    [Class] ==================== -->
            <Model:Class xmi.id = 'a474A09310202' 
              name = 'AbstractAction' annotation = '' 
              isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' 
              isSingleton = 'false' >
              <Model:GeneralizableElement.supertypes>
                <Model:GeneralizableElement xml:link = 'simple' href = 'modelmanagement.xml|a45013C240030'/>
              </Model:GeneralizableElement.supertypes>
              <Model:Namespace.contents>
                <!-- ==================== behavioral.status_and_action.design.AbstractAction.isAgent    [Attribute] ==================== -->
                <Model:Attribute xmi.id = 'a474A0A300071' 
                  name = 'isAgent' annotation = '' 
                  scope = 'instance_level' visibility = 'public_vis' 
                  isChangeable = 'true' 
                  isDerived = 'false' >
                  <Model:StructuralFeature.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:StructuralFeature.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
                  </Model:TypedElement.type>
                </Model:Attribute>
                <!-- ==================== behavioral.status_and_action.design.AbstractAction.isPreconditionFixed    [Attribute] ==================== -->
                <Model:Attribute xmi.id = 'a474A0A35012D' 
                  name = 'isPreconditionFixed' annotation = '' 
                  scope = 'instance_level' visibility = 'public_vis' 
                  isChangeable = 'true' 
                  isDerived = 'false' >
                  <Model:StructuralFeature.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:StructuralFeature.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
                  </Model:TypedElement.type>
                </Model:Attribute>
              </Model:Namespace.contents>
            </Model:Class>
            <!-- ==================== behavioral.status_and_action.design.BusinessObjectHasNodes    [Association] ==================== -->
            <Model:Association xmi.id = 'a4743821A02B7' 
              name = 'BusinessObjectHasNodes' annotation = '' 
              isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
              isDerived = 'false' >
              <Model:Namespace.contents>
                <Model:AssociationEnd xmi.id = 'a4743821B00D3' 
                  name = 'nodes' annotation = '' 
                  isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
                  <Model:AssociationEnd.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:AssociationEnd.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a474381D302BF'/>  <!-- behavioral.status_and_action.design.BusinessObjectNode -->
                  </Model:TypedElement.type>
                </Model:AssociationEnd>
                <Model:AssociationEnd xmi.id = 'a4743821B00D5' 
                  name = 'businessObject' annotation = '' 
                  isNavigable = 'false' aggregation = 'composite' isChangeable = 'true' >
                  <Model:AssociationEnd.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:AssociationEnd.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a474381C1025F'/>  <!-- behavioral.status_and_action.design.BusinessObject -->
                  </Model:TypedElement.type>
                </Model:AssociationEnd>
              </Model:Namespace.contents>
            </Model:Association>
            <!-- ==================== behavioral.status_and_action.design.NodeHasVariables    [Association] ==================== -->
            <Model:Association xmi.id = 'a4743826F0282' 
              name = 'NodeHasVariables' annotation = '' 
              isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
              isDerived = 'false' >
              <Model:Namespace.contents>
                <Model:AssociationEnd xmi.id = 'a474382700178' 
                  name = 'variables' annotation = '' 
                  isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
                  <Model:AssociationEnd.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:AssociationEnd.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a474382660242'/>  <!-- behavioral.status_and_action.design.StatusVariable -->
                  </Model:TypedElement.type>
                </Model:AssociationEnd>
                <Model:AssociationEnd xmi.id = 'a47438270017A' 
                  name = 'node' annotation = '' 
                  isNavigable = 'false' aggregation = 'composite' isChangeable = 'true' >
                  <Model:AssociationEnd.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:AssociationEnd.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a474381D302BF'/>  <!-- behavioral.status_and_action.design.BusinessObjectNode -->
                  </Model:TypedElement.type>
                </Model:AssociationEnd>
              </Model:Namespace.contents>
            </Model:Association>
            <!-- ==================== behavioral.status_and_action.design.NodeHasActions    [Association] ==================== -->
            <Model:Association xmi.id = 'a4743854F0312' 
              name = 'NodeHasActions' annotation = '' 
              isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
              isDerived = 'false' >
              <Model:Namespace.contents>
                <Model:AssociationEnd xmi.id = 'a47438550012E' 
                  name = 'actions' annotation = '' 
                  isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
                  <Model:AssociationEnd.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:AssociationEnd.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4743854A01DA'/>  <!-- behavioral.status_and_action.design.Action -->
                  </Model:TypedElement.type>
                </Model:AssociationEnd>
                <Model:AssociationEnd xmi.id = 'a474385500130' 
                  name = 'node' annotation = '' 
                  isNavigable = 'false' aggregation = 'composite' isChangeable = 'true' >
                  <Model:AssociationEnd.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:AssociationEnd.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a474381D302BF'/>  <!-- behavioral.status_and_action.design.BusinessObjectNode -->
                  </Model:TypedElement.type>
                </Model:AssociationEnd>
              </Model:Namespace.contents>
            </Model:Association>
            <!-- ==================== behavioral.status_and_action.design.VariableHasValues    [Association] ==================== -->
            <Model:Association xmi.id = 'a474D300E0253' 
              name = 'VariableHasValues' annotation = '' 
              isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
              isDerived = 'false' >
              <Model:Namespace.contents>
                <Model:AssociationEnd xmi.id = 'a474D300E0254' 
                  name = 'values' annotation = '' 
                  isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
                  <Model:AssociationEnd.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:AssociationEnd.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a474A091C02AC'/>  <!-- behavioral.status_and_action.design.AbstractStatusValue -->
                  </Model:TypedElement.type>
                </Model:AssociationEnd>
                <Model:AssociationEnd xmi.id = 'a474D300E0255' 
                  name = 'variable' annotation = '' 
                  isNavigable = 'false' aggregation = 'composite' isChangeable = 'true' >
                  <Model:AssociationEnd.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:AssociationEnd.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a474A08690112'/>  <!-- behavioral.status_and_action.design.AbstractStatusVariable -->
                  </Model:TypedElement.type>
                </Model:AssociationEnd>
              </Model:Namespace.contents>
            </Model:Association>
          </Model:Namespace.contents>
        </Model:Package>
        <!-- ==================== behavioral.status_and_action.assembly    [Package] ==================== -->
        <Model:Package xmi.id = 'a4743819403C0' 
          name = 'assembly' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' >
          <Model:Namespace.contents>
            <!-- ==================== behavioral.status_and_action.assembly.StatusSchema    [Class] ==================== -->
            <Model:Class xmi.id = 'a4743828E0312' 
              name = 'StatusSchema' annotation = '' 
              isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
              isSingleton = 'false' >
              <Model:GeneralizableElement.supertypes>
                <Model:GeneralizableElement xml:link = 'simple' href = 'modelmanagement.xml|a45013C240030'/>
              </Model:GeneralizableElement.supertypes>
              <Model:Namespace.contents>
                <!-- ==================== behavioral.status_and_action.assembly.StatusSchema.node    [Reference] ==================== -->
                <Model:Reference xmi.id = 'ra47462CE70119' 
                  name = 'node' annotation = '' 
                  scope = 'instance_level' visibility = 'public_vis' 
                  isChangeable = 'true' >
                  <Model:StructuralFeature.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:StructuralFeature.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xml:link = 'simple' href = 'data.xml|a4432171B031E'/>
                  </Model:TypedElement.type>
                  <Model:Reference.referencedEnd>
                    <Model:AssociationEnd xmi.idref = 'a47462CE70119'/>
                  </Model:Reference.referencedEnd>
                </Model:Reference>
                <!-- ==================== behavioral.status_and_action.assembly.StatusSchema.elements    [Reference] ==================== -->
                <Model:Reference xmi.id = 'ra475736E50115' 
                  name = 'elements' annotation = '' 
                  scope = 'instance_level' visibility = 'public_vis' 
                  isChangeable = 'true' >
                  <Model:StructuralFeature.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:StructuralFeature.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4757375B0119'/>  <!-- behavioral.status_and_action.assembly.SchemaElement -->
                  </Model:TypedElement.type>
                  <Model:Reference.referencedEnd>
                    <Model:AssociationEnd xmi.idref = 'a475736E50115'/>
                  </Model:Reference.referencedEnd>
                </Model:Reference>
              </Model:Namespace.contents>
            </Model:Class>
            <!-- ==================== behavioral.status_and_action.assembly.Connector    [Class] ==================== -->
            <Model:Class xmi.id = 'a4743829B0267' 
              name = 'Connector' annotation = '' 
              isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' 
              isSingleton = 'false' >
              <Model:GeneralizableElement.supertypes>
                <Model:GeneralizableElement xmi.idref = 'a4757375B0119'/>  <!-- behavioral.status_and_action.assembly.SchemaElement -->
              </Model:GeneralizableElement.supertypes>
              <Model:Namespace.contents>
                <!-- ==================== behavioral.status_and_action.assembly.Connector.source    [Reference] ==================== -->
                <Model:Reference xmi.id = 'ra474D26520137' 
                  name = 'source' annotation = '' 
                  scope = 'instance_level' visibility = 'public_vis' 
                  isChangeable = 'true' >
                  <Model:StructuralFeature.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:StructuralFeature.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4743C60C0191'/>  <!-- behavioral.status_and_action.assembly.ConnectableElement -->
                  </Model:TypedElement.type>
                  <Model:Reference.referencedEnd>
                    <Model:AssociationEnd xmi.idref = 'a474D26520137'/>
                  </Model:Reference.referencedEnd>
                </Model:Reference>
                <!-- ==================== behavioral.status_and_action.assembly.Connector.target    [Reference] ==================== -->
                <Model:Reference xmi.id = 'ra474D26D90304' 
                  name = 'target' annotation = '' 
                  scope = 'instance_level' visibility = 'public_vis' 
                  isChangeable = 'true' >
                  <Model:StructuralFeature.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:StructuralFeature.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4743C60C0191'/>  <!-- behavioral.status_and_action.assembly.ConnectableElement -->
                  </Model:TypedElement.type>
                  <Model:Reference.referencedEnd>
                    <Model:AssociationEnd xmi.idref = 'a474D26D90304'/>
                  </Model:Reference.referencedEnd>
                </Model:Reference>
              </Model:Namespace.contents>
            </Model:Class>
            <!-- ==================== behavioral.status_and_action.assembly.Operator    [Class] ==================== -->
            <Model:Class xmi.id = 'a474384F803AD' 
              name = 'Operator' annotation = '' 
              isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
              isSingleton = 'false' >
              <Model:GeneralizableElement.supertypes>
                <Model:GeneralizableElement xmi.idref = 'a4743C60C0191'/>  <!-- behavioral.status_and_action.assembly.ConnectableElement -->
              </Model:GeneralizableElement.supertypes>
            </Model:Class>
            <!-- ==================== behavioral.status_and_action.assembly.ConnectableElement    [Class] ==================== -->
            <Model:Class xmi.id = 'a4743C60C0191' 
              name = 'ConnectableElement' annotation = '' 
              isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' 
              isSingleton = 'false' >
              <Model:GeneralizableElement.supertypes>
                <Model:GeneralizableElement xmi.idref = 'a4757375B0119'/>  <!-- behavioral.status_and_action.assembly.SchemaElement -->
              </Model:GeneralizableElement.supertypes>
            </Model:Class>
            <!-- ==================== behavioral.status_and_action.assembly.ActionProxy    [Class] ==================== -->
            <Model:Class xmi.id = 'a4743C61903A6' 
              name = 'ActionProxy' annotation = '' 
              isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
              isSingleton = 'false' >
              <Model:GeneralizableElement.supertypes>
                <Model:GeneralizableElement xmi.idref = 'a4743C60C0191'/>  <!-- behavioral.status_and_action.assembly.ConnectableElement -->
                <Model:GeneralizableElement xmi.idref = 'a4743854A01DA'/>  <!-- behavioral.status_and_action.design.Action -->
                <Model:GeneralizableElement xmi.idref = 'a474A09310202'/>  <!-- behavioral.status_and_action.design.AbstractAction -->
              </Model:GeneralizableElement.supertypes>
              <Model:Namespace.contents>
                <!-- ==================== behavioral.status_and_action.assembly.ActionProxy.action    [Reference] ==================== -->
                <Model:Reference xmi.id = 'ra4743C68201A9' 
                  name = 'action' annotation = '' 
                  scope = 'instance_level' visibility = 'public_vis' 
                  isChangeable = 'true' >
                  <Model:StructuralFeature.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:StructuralFeature.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xml:link = 'simple' href = 'data.xml|a4432198602CB'/>
                  </Model:TypedElement.type>
                  <Model:Reference.referencedEnd>
                    <Model:AssociationEnd xmi.idref = 'a4743C68201A9'/>
                  </Model:Reference.referencedEnd>
                </Model:Reference>
              </Model:Namespace.contents>
            </Model:Class>
            <!-- ==================== behavioral.status_and_action.assembly.StatusValueProxy    [Class] ==================== -->
            <Model:Class xmi.id = 'a4743C621004B' 
              name = 'StatusValueProxy' annotation = '' 
              isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
              isSingleton = 'false' >
              <Model:GeneralizableElement.supertypes>
                <Model:GeneralizableElement xmi.idref = 'a4743C60C0191'/>  <!-- behavioral.status_and_action.assembly.ConnectableElement -->
                <Model:GeneralizableElement xmi.idref = 'a474384A700EC'/>  <!-- behavioral.status_and_action.design.StatusValue -->
                <Model:GeneralizableElement xmi.idref = 'a474A091C02AC'/>  <!-- behavioral.status_and_action.design.AbstractStatusValue -->
              </Model:GeneralizableElement.supertypes>
              <Model:Namespace.contents>
                <!-- ==================== behavioral.status_and_action.assembly.StatusValueProxy.value    [Reference] ==================== -->
                <Model:Reference xmi.id = 'ra4743C68403CC' 
                  name = 'value' annotation = '' 
                  scope = 'instance_level' visibility = 'public_vis' 
                  isChangeable = 'true' >
                  <Model:StructuralFeature.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:StructuralFeature.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a474384A700EC'/>  <!-- behavioral.status_and_action.design.StatusValue -->
                  </Model:TypedElement.type>
                  <Model:Reference.referencedEnd>
                    <Model:AssociationEnd xmi.idref = 'a4743C68403CC'/>
                  </Model:Reference.referencedEnd>
                </Model:Reference>
              </Model:Namespace.contents>
            </Model:Class>
            <!-- ==================== behavioral.status_and_action.assembly.Transition    [Class] ==================== -->
            <Model:Class xmi.id = 'a4743C6F302DA' 
              name = 'Transition' annotation = '' 
              isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
              isSingleton = 'false' >
              <Model:GeneralizableElement.supertypes>
                <Model:GeneralizableElement xmi.idref = 'a4743829B0267'/>  <!-- behavioral.status_and_action.assembly.Connector -->
              </Model:GeneralizableElement.supertypes>
            </Model:Class>
            <!-- ==================== behavioral.status_and_action.assembly.Synchroniser    [Class] ==================== -->
            <Model:Class xmi.id = 'a4743C6FA0338' 
              name = 'Synchroniser' annotation = '' 
              isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
              isSingleton = 'false' >
              <Model:GeneralizableElement.supertypes>
                <Model:GeneralizableElement xmi.idref = 'a4743829B0267'/>  <!-- behavioral.status_and_action.assembly.Connector -->
              </Model:GeneralizableElement.supertypes>
            </Model:Class>
            <!-- ==================== behavioral.status_and_action.assembly.Precondition    [Class] ==================== -->
            <Model:Class xmi.id = 'a4743CBA202B3' 
              name = 'Precondition' annotation = '' 
              isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
              isSingleton = 'false' >
              <Model:GeneralizableElement.supertypes>
                <Model:GeneralizableElement xmi.idref = 'a4743829B0267'/>  <!-- behavioral.status_and_action.assembly.Connector -->
              </Model:GeneralizableElement.supertypes>
              <Model:Namespace.contents>
                <!-- ==================== behavioral.status_and_action.assembly.Precondition.strategy    [Reference] ==================== -->
                <Model:Reference xmi.id = 'ra474D280200E1' 
                  name = 'strategy' annotation = '' 
                  scope = 'instance_level' visibility = 'public_vis' 
                  isChangeable = 'true' >
                  <Model:StructuralFeature.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:StructuralFeature.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a474D276E01D5'/>  <!-- behavioral.status_and_action.assembly.Strategy -->
                  </Model:TypedElement.type>
                  <Model:Reference.referencedEnd>
                    <Model:AssociationEnd xmi.idref = 'a474D280200E1'/>
                  </Model:Reference.referencedEnd>
                </Model:Reference>
              </Model:Namespace.contents>
            </Model:Class>
            <!-- ==================== behavioral.status_and_action.assembly.StatusVariableProxy    [Class] ==================== -->
            <Model:Class xmi.id = 'a4743D31502E7' 
              name = 'StatusVariableProxy' annotation = '' 
              isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
              isSingleton = 'false' >
              <Model:GeneralizableElement.supertypes>
                <Model:GeneralizableElement xmi.idref = 'a4743C60C0191'/>  <!-- behavioral.status_and_action.assembly.ConnectableElement -->
                <Model:GeneralizableElement xmi.idref = 'a474382660242'/>  <!-- behavioral.status_and_action.design.StatusVariable -->
                <Model:GeneralizableElement xmi.idref = 'a474A08690112'/>  <!-- behavioral.status_and_action.design.AbstractStatusVariable -->
              </Model:GeneralizableElement.supertypes>
              <Model:Namespace.contents>
                <!-- ==================== behavioral.status_and_action.assembly.StatusVariableProxy.variable    [Reference] ==================== -->
                <Model:Reference xmi.id = 'ra4743D3470384' 
                  name = 'variable' annotation = '' 
                  scope = 'instance_level' visibility = 'public_vis' 
                  isChangeable = 'true' >
                  <Model:StructuralFeature.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:StructuralFeature.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a474382660242'/>  <!-- behavioral.status_and_action.design.StatusVariable -->
                  </Model:TypedElement.type>
                  <Model:Reference.referencedEnd>
                    <Model:AssociationEnd xmi.idref = 'a4743D3470384'/>
                  </Model:Reference.referencedEnd>
                </Model:Reference>
              </Model:Namespace.contents>
            </Model:Class>
            <!-- ==================== behavioral.status_and_action.assembly.AndOperator    [Class] ==================== -->
            <Model:Class xmi.id = 'a47462DBC030D' 
              name = 'AndOperator' annotation = '' 
              isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
              isSingleton = 'false' >
              <Model:GeneralizableElement.supertypes>
                <Model:GeneralizableElement xmi.idref = 'a474384F803AD'/>  <!-- behavioral.status_and_action.assembly.Operator -->
              </Model:GeneralizableElement.supertypes>
            </Model:Class>
            <!-- ==================== behavioral.status_and_action.assembly.OrOperator    [Class] ==================== -->
            <Model:Class xmi.id = 'a47462DC40077' 
              name = 'OrOperator' annotation = '' 
              isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
              isSingleton = 'false' >
              <Model:GeneralizableElement.supertypes>
                <Model:GeneralizableElement xmi.idref = 'a474384F803AD'/>  <!-- behavioral.status_and_action.assembly.Operator -->
              </Model:GeneralizableElement.supertypes>
            </Model:Class>
            <!-- ==================== behavioral.status_and_action.assembly.RequiredStrategy    [Class] ==================== -->
            <Model:Class xmi.id = 'a47462E2601E2' 
              name = 'RequiredStrategy' annotation = '' 
              isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
              isSingleton = 'false' >
              <Model:GeneralizableElement.supertypes>
                <Model:GeneralizableElement xmi.idref = 'a474D276E01D5'/>  <!-- behavioral.status_and_action.assembly.Strategy -->
              </Model:GeneralizableElement.supertypes>
            </Model:Class>
            <!-- ==================== behavioral.status_and_action.assembly.NeutralStrategy    [Class] ==================== -->
            <Model:Class xmi.id = 'a47462E33023D' 
              name = 'NeutralStrategy' annotation = '' 
              isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
              isSingleton = 'false' >
              <Model:GeneralizableElement.supertypes>
                <Model:GeneralizableElement xmi.idref = 'a474D276E01D5'/>  <!-- behavioral.status_and_action.assembly.Strategy -->
              </Model:GeneralizableElement.supertypes>
            </Model:Class>
            <!-- ==================== behavioral.status_and_action.assembly.EnablingStrategy    [Class] ==================== -->
            <Model:Class xmi.id = 'a47462E3F00D4' 
              name = 'EnablingStrategy' annotation = '' 
              isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
              isSingleton = 'false' >
              <Model:GeneralizableElement.supertypes>
                <Model:GeneralizableElement xmi.idref = 'a474D276E01D5'/>  <!-- behavioral.status_and_action.assembly.Strategy -->
              </Model:GeneralizableElement.supertypes>
            </Model:Class>
            <!-- ==================== behavioral.status_and_action.assembly.InhibitingStrategy    [Class] ==================== -->
            <Model:Class xmi.id = 'a47462E4E0322' 
              name = 'InhibitingStrategy' annotation = '' 
              isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
              isSingleton = 'false' >
              <Model:GeneralizableElement.supertypes>
                <Model:GeneralizableElement xmi.idref = 'a474D276E01D5'/>  <!-- behavioral.status_and_action.assembly.Strategy -->
              </Model:GeneralizableElement.supertypes>
            </Model:Class>
            <!-- ==================== behavioral.status_and_action.assembly.Strategy    [Class] ==================== -->
            <Model:Class xmi.id = 'a474D276E01D5' 
              name = 'Strategy' annotation = '' 
              isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' 
              isSingleton = 'false' />
            <!-- ==================== behavioral.status_and_action.assembly.SchemaElement    [Class] ==================== -->
            <Model:Class xmi.id = 'a4757375B0119' 
              name = 'SchemaElement' annotation = '' 
              isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' 
              isSingleton = 'false' >
              <Model:GeneralizableElement.supertypes>
                <Model:GeneralizableElement xml:link = 'simple' href = 'modelmanagement.xml|a45013C240030'/>
              </Model:GeneralizableElement.supertypes>
            </Model:Class>
            <!-- ==================== behavioral.status_and_action.assembly.ProxyRepresentsAction    [Association] ==================== -->
            <Model:Association xmi.id = 'a4743C681037E' 
              name = 'ProxyRepresentsAction' annotation = '' 
              isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
              isDerived = 'false' >
              <Model:Namespace.contents>
                <Model:AssociationEnd xmi.id = 'a4743C68201A9' 
                  name = 'action' annotation = '' 
                  isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
                  <Model:AssociationEnd.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:AssociationEnd.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xml:link = 'simple' href = 'data.xml|a4432198602CB'/>
                  </Model:TypedElement.type>
                </Model:AssociationEnd>
                <Model:AssociationEnd xmi.id = 'a4743C68201AB' 
                  name = 'proxy' annotation = '' 
                  isNavigable = 'false' aggregation = 'none' isChangeable = 'true' >
                  <Model:AssociationEnd.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:AssociationEnd.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4743C61903A6'/>  <!-- behavioral.status_and_action.assembly.ActionProxy -->
                  </Model:TypedElement.type>
                </Model:AssociationEnd>
              </Model:Namespace.contents>
            </Model:Association>
            <!-- ==================== behavioral.status_and_action.assembly.ProxyRepresentsValue    [Association] ==================== -->
            <Model:Association xmi.id = 'a4743C6840217' 
              name = 'ProxyRepresentsValue' annotation = '' 
              isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
              isDerived = 'false' >
              <Model:Namespace.contents>
                <Model:AssociationEnd xmi.id = 'a4743C68403CC' 
                  name = 'value' annotation = '' 
                  isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
                  <Model:AssociationEnd.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:AssociationEnd.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a474384A700EC'/>  <!-- behavioral.status_and_action.design.StatusValue -->
                  </Model:TypedElement.type>
                </Model:AssociationEnd>
                <Model:AssociationEnd xmi.id = 'a4743C68403DC' 
                  name = 'proxy' annotation = '' 
                  isNavigable = 'false' aggregation = 'none' isChangeable = 'true' >
                  <Model:AssociationEnd.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:AssociationEnd.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4743C621004B'/>  <!-- behavioral.status_and_action.assembly.StatusValueProxy -->
                  </Model:TypedElement.type>
                </Model:AssociationEnd>
              </Model:Namespace.contents>
            </Model:Association>
            <!-- ==================== behavioral.status_and_action.assembly.ProxyRepresentsVariable    [Association] ==================== -->
            <Model:Association xmi.id = 'a4743D34700A3' 
              name = 'ProxyRepresentsVariable' annotation = '' 
              isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
              isDerived = 'false' >
              <Model:Namespace.contents>
                <Model:AssociationEnd xmi.id = 'a4743D3470384' 
                  name = 'variable' annotation = '' 
                  isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
                  <Model:AssociationEnd.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:AssociationEnd.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a474382660242'/>  <!-- behavioral.status_and_action.design.StatusVariable -->
                  </Model:TypedElement.type>
                </Model:AssociationEnd>
                <Model:AssociationEnd xmi.id = 'a4743D3470386' 
                  name = 'proxy' annotation = '' 
                  isNavigable = 'false' aggregation = 'none' isChangeable = 'true' >
                  <Model:AssociationEnd.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:AssociationEnd.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4743D31502E7'/>  <!-- behavioral.status_and_action.assembly.StatusVariableProxy -->
                  </Model:TypedElement.type>
                </Model:AssociationEnd>
              </Model:Namespace.contents>
            </Model:Association>
            <!-- ==================== behavioral.status_and_action.assembly.NodeHasSchemas    [Association] ==================== -->
            <Model:Association xmi.id = 'a47462CE500D9' 
              name = 'NodeHasSchemas' annotation = '' 
              isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
              isDerived = 'false' >
              <Model:Namespace.contents>
                <Model:AssociationEnd xmi.id = 'a47462CE70119' 
                  name = 'node' annotation = '' 
                  isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
                  <Model:AssociationEnd.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:AssociationEnd.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xml:link = 'simple' href = 'data.xml|a4432171B031E'/>
                  </Model:TypedElement.type>
                </Model:AssociationEnd>
                <Model:AssociationEnd xmi.id = 'a47462CE7011B' 
                  name = 'behaviouralModel' annotation = '' 
                  isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
                  <Model:AssociationEnd.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:AssociationEnd.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4743828E0312'/>  <!-- behavioral.status_and_action.assembly.StatusSchema -->
                  </Model:TypedElement.type>
                </Model:AssociationEnd>
              </Model:Namespace.contents>
            </Model:Association>
            <!-- ==================== behavioral.status_and_action.assembly.org.omg.sap2mof.store=yes    [Tag] ==================== -->
            <Model:Tag xmi.id = 'G.762' 
              name = 'org.omg.sap2mof.store=yes' annotation = '' 
              tagId = 'org.omg.sap2mof.store' >
              <Model:Tag.values>
                <XMI.any xmi.type = 'string' xmi.name = ''>yes</XMI.any>
              </Model:Tag.values>
              <Model:Tag.elements>
                <Model:ModelElement xmi.idref = 'a47462CE7011B'/>
              </Model:Tag.elements>
            </Model:Tag>
            <!-- ==================== behavioral.status_and_action.assembly.ConnectorHasSource    [Association] ==================== -->
            <Model:Association xmi.id = 'a474D2651030B' 
              name = 'ConnectorHasSource' annotation = '' 
              isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
              isDerived = 'false' >
              <Model:Namespace.contents>
                <Model:AssociationEnd xmi.id = 'a474D26520137' 
                  name = 'source' annotation = '' 
                  isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
                  <Model:AssociationEnd.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:AssociationEnd.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4743C60C0191'/>  <!-- behavioral.status_and_action.assembly.ConnectableElement -->
                  </Model:TypedElement.type>
                </Model:AssociationEnd>
                <Model:AssociationEnd xmi.id = 'a474D26520139' 
                  name = 'outgoing' annotation = '' 
                  isNavigable = 'false' aggregation = 'none' isChangeable = 'true' >
                  <Model:AssociationEnd.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:AssociationEnd.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4743829B0267'/>  <!-- behavioral.status_and_action.assembly.Connector -->
                  </Model:TypedElement.type>
                </Model:AssociationEnd>
              </Model:Namespace.contents>
            </Model:Association>
            <!-- ==================== behavioral.status_and_action.assembly.ConnectorHasTarget    [Association] ==================== -->
            <Model:Association xmi.id = 'a474D26D90016' 
              name = 'ConnectorHasTarget' annotation = '' 
              isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
              isDerived = 'false' >
              <Model:Namespace.contents>
                <Model:AssociationEnd xmi.id = 'a474D26D90304' 
                  name = 'target' annotation = '' 
                  isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
                  <Model:AssociationEnd.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:AssociationEnd.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4743C60C0191'/>  <!-- behavioral.status_and_action.assembly.ConnectableElement -->
                  </Model:TypedElement.type>
                </Model:AssociationEnd>
                <Model:AssociationEnd xmi.id = 'a474D26D90306' 
                  name = 'incoming' annotation = '' 
                  isNavigable = 'false' aggregation = 'none' isChangeable = 'true' >
                  <Model:AssociationEnd.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:AssociationEnd.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4743829B0267'/>  <!-- behavioral.status_and_action.assembly.Connector -->
                  </Model:TypedElement.type>
                </Model:AssociationEnd>
              </Model:Namespace.contents>
            </Model:Association>
            <!-- ==================== behavioral.status_and_action.assembly.PreconditionHasStrategy    [Association] ==================== -->
            <Model:Association xmi.id = 'a474D2801021A' 
              name = 'PreconditionHasStrategy' annotation = '' 
              isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
              isDerived = 'false' >
              <Model:Namespace.contents>
                <Model:AssociationEnd xmi.id = 'a474D280200E1' 
                  name = 'strategy' annotation = '' 
                  isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
                  <Model:AssociationEnd.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:AssociationEnd.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a474D276E01D5'/>  <!-- behavioral.status_and_action.assembly.Strategy -->
                  </Model:TypedElement.type>
                </Model:AssociationEnd>
                <Model:AssociationEnd xmi.id = 'a474D280200E3' 
                  name = 'owner' annotation = '' 
                  isNavigable = 'false' aggregation = 'none' isChangeable = 'true' >
                  <Model:AssociationEnd.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:AssociationEnd.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4743CBA202B3'/>  <!-- behavioral.status_and_action.assembly.Precondition -->
                  </Model:TypedElement.type>
                </Model:AssociationEnd>
              </Model:Namespace.contents>
            </Model:Association>
            <!-- ==================== behavioral.status_and_action.assembly.SchemaOwnsElements    [Association] ==================== -->
            <Model:Association xmi.id = 'a475736DE0114' 
              name = 'SchemaOwnsElements' annotation = '' 
              isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
              isDerived = 'false' >
              <Model:Namespace.contents>
                <Model:AssociationEnd xmi.id = 'a475736E50115' 
                  name = 'elements' annotation = '' 
                  isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
                  <Model:AssociationEnd.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:AssociationEnd.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4757375B0119'/>  <!-- behavioral.status_and_action.assembly.SchemaElement -->
                  </Model:TypedElement.type>
                </Model:AssociationEnd>
                <Model:AssociationEnd xmi.id = 'a475736E50117' 
                  name = 'schema' annotation = '' 
                  isNavigable = 'false' aggregation = 'composite' isChangeable = 'true' >
                  <Model:AssociationEnd.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:AssociationEnd.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4743828E0312'/>  <!-- behavioral.status_and_action.assembly.StatusSchema -->
                  </Model:TypedElement.type>
                </Model:AssociationEnd>
              </Model:Namespace.contents>
            </Model:Association>
          </Model:Namespace.contents>
        </Model:Package>
      </Model:Namespace.contents>
    </Model:Package>
    <Model:Import xmi.id = 'G.763' 
      name = 'modelmanagement' annotation = '' 
      visibility = 'public_vis' isClustered = 'false' >
      <Model:Import.importedNamespace>
        <Model:Namespace xml:link = 'simple' href = 'modelmanagement.xml|a44D74C00013D'/>
      </Model:Import.importedNamespace>
    </Model:Import>
  </Model:Namespace.contents>
</Model:Package>
</XMI.content>
</XMI>
