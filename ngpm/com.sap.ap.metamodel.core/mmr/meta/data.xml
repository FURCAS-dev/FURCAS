<?xml version = '1.0' encoding = 'ISO-8859-1' ?>
<!-- <!DOCTYPE XMI SYSTEM 'Model1311.DTD' > -->
<XMI xmi.version = '1.1' xmlns:Model='omg.org/mof.Model/1.3' timestamp = 'Fri Jul 30 13:00:15 2010' >
 <XMI.header>
  <XMI.documentation>
   <XMI.exporter>Unisys.JCR.1</XMI.exporter>
   <XMI.exporterVersion>1.3.2</XMI.exporterVersion>
  </XMI.documentation>
  <XMI.metamodel xmi.name = 'org.omg.mof.Model' xmi.version = '1.3'/>
 </XMI.header>
<XMI.content>
<!-- ==================== data    [Package] ==================== -->
<Model:Package xmi.id = 'a453E0C08006D' 
  name = 'data' annotation = '' 
  isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' >
  <Model:Namespace.contents>
    <!-- ==================== data.classes    [Package] ==================== -->
    <Model:Package xmi.id = 'a44D751530256' 
      name = 'classes' annotation = 'BOs, BONodes, associations, regardless the association implementation (foreign keys, persistence structures, IDs, ...). Nodes have attributes that have types. Resulting is a datatype for the node that can be used, e.g., in the action language.' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' >
      <Model:Namespace.contents>
        <!-- ==================== data.classes.Association    [Class] ==================== -->
        <Model:Class xmi.id = 'a44321DA40150' 
          name = 'Association' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a478BCB6A02F5'/>  <!-- data.classes.Association.UniquenessOnBothEndsMustBeTheSame -->
            <Model:Constraint xmi.idref = 'a493FCCBC0290'/>  <!-- data.classes.Association.AtMostOneCompositeEnd -->
            <Model:Constraint xmi.idref = 'a494140D20251'/>  <!-- data.classes.Association.AtLeastOneNavigableEnd -->
            <Model:Constraint xmi.idref = 'a49422D7A004E'/>  <!-- data.classes.Association.AtMostOneEqualityContributionForTwoValueClasses -->
            <Model:Constraint xmi.idref = 'a49788E6D003E'/>  <!-- data.classes.Association.AtMostOneOrderedEnd -->
          </Model:ModelElement.constraints>
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xml:link = 'simple' href = 'modelmanagement.xml|a45013C240030'/>
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== data.classes.Association.ends    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra44EC56620059' 
              name = 'ends' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '2' upper = '2' is_ordered = 'true' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44EC55FB03B8'/>  <!-- data.classes.AssociationEnd -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a44EC56620059'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.Association.package_    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra4795A52A03B9' 
              name = 'package_' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'modelmanagement.xml|a452B7C8B00D8'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a4795A52A03B9'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.Association.UniquenessOnBothEndsMustBeTheSame    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a478BCB6A02F5' 
              name = 'UniquenessOnBothEndsMustBeTheSame' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context Association
inv:
  self.ends-&gt;forAll( e1, e2 : AssociationEnd |
              e1 &lt;&gt; e2 implies e1.type.unique = e2.type.unique)</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a44321DA40150'/>  <!-- data.classes.Association -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <!-- ==================== data.classes.Association.AtMostOneCompositeEnd    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a493FCCBC0290' 
              name = 'AtMostOneCompositeEnd' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context Association
inv:
  self.ends-&gt;select(composite)-&gt;size() &lt; 2</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a44321DA40150'/>  <!-- data.classes.Association -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <!-- ==================== data.classes.Association.AtLeastOneNavigableEnd    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a494140D20251' 
              name = 'AtLeastOneNavigableEnd' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context Association
inv:
  self.ends-&gt;select(ae:AssociationEnd | ae.navigable)-&gt;notEmpty()</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a44321DA40150'/>  <!-- data.classes.Association -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <!-- ==================== data.classes.Association.AtMostOneEqualityContributionForTwoValueClasses    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a49422D7A004E' 
              name = 'AtMostOneEqualityContributionForTwoValueClasses' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context Association
inv:
  self.ends-&gt;select(contributesToEquality and type.clazz.valueType)-&gt;size() &lt; 2</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a44321DA40150'/>  <!-- data.classes.Association -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <!-- ==================== data.classes.Association.AtMostOneOrderedEnd    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a49788E6D003E' 
              name = 'AtMostOneOrderedEnd' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context Association
inv:
  self.ends-&gt;select(ae|ae.type.ordered)-&gt;size() &lt; 2</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a44321DA40150'/>  <!-- data.classes.Association -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== data.classes.org.omg.sap2mof.store=no    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.635' 
          name = 'org.omg.sap2mof.store=no' annotation = '' 
          tagId = 'org.omg.sap2mof.store' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>no</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'ra44EC56620059'/>  <!-- data.classes.Association.ends -->
            <Model:ModelElement xmi.idref = 'ra443B53200210'/>  <!-- data.classes.Signature.faults -->
            <Model:ModelElement xmi.idref = 'ra47B9EDFD0001'/>  <!-- data.classes.Signature.output -->
            <Model:ModelElement xmi.idref = 'ra47CBF46E03D9'/>  <!-- data.classes.Signature.ownedTypeDefinitions -->
            <Model:ModelElement xmi.idref = 'ra47F12A8C021B'/>  <!-- data.classes.Signature.input -->
            <Model:ModelElement xmi.idref = 'ra47B9ABAF02AF'/>  <!-- data.classes.AssociationEnd.type -->
            <Model:ModelElement xmi.idref = 'ra4795967B0020'/>  <!-- data.classes.SapClass.package_ -->
            <Model:ModelElement xmi.idref = 'ra49B150D6032C'/>  <!-- data.classes.SapClass.formalObjectParameters -->
            <Model:ModelElement xmi.idref = 'ra456DB5E0037B'/>  <!-- data.classes.Delegation.from -->
            <Model:ModelElement xmi.idref = 'ra47CBF418010A'/>  <!-- data.classes.TypedElement.ownedTypeDefinition -->
            <Model:ModelElement xmi.idref = 'ra47D67F7201BC'/>  <!-- data.classes.SignatureImplementation.implements_ -->
            <Model:ModelElement xmi.idref = 'ra4783730C01A5'/>  <!-- data.classes.AssociationEndSignatureImplementation.end -->
            <Model:ModelElement xmi.idref = 'ra4784F7F5005F'/>  <!-- data.classes.ClassTypeDefinition.clazz -->
            <Model:ModelElement xmi.idref = 'ra49B1561E0157'/>  <!-- data.classes.ClassTypeDefinition.objectParameters -->
            <Model:ModelElement xmi.idref = 'ra4AD595C100DA'/>  <!-- data.classes.ClassTypeDefinition.ownedObjectParameters -->
            <Model:ModelElement xmi.idref = 'ra48A02BD6002E'/>  <!-- data.classes.FunctionSignatureTypeDefinition.signature -->
            <Model:ModelElement xmi.idref = 'ra49B15BB60196'/>  <!-- data.classes.MethodSignature.converter -->
            <Model:ModelElement xmi.idref = 'ra4975FB7F01F5'/>  <!-- data.classes.FunctionSignature.implementation -->
            <Model:ModelElement xmi.idref = 'ra47F112BE01FC'/>  <!-- data.classes.TypeAdapter.to -->
            <Model:ModelElement xmi.idref = 'ra47F112EE01B9'/>  <!-- data.classes.TypeAdapter.adapted -->
            <Model:ModelElement xmi.idref = 'ra48A04147011B'/>  <!-- data.classes.SignatureOwner.ownedSignatures -->
            <Model:ModelElement xmi.idref = 'ra49B1561C02CE'/>  <!-- data.classes.ActualObjectParameter.value -->
            <Model:ModelElement xmi.idref = 'ra49B15A62039B'/>  <!-- data.classes.ConverterBetweenParametrizations.clazz -->
            <Model:ModelElement xmi.idref = 'a443B53200210'/>
            <Model:ModelElement xmi.idref = 'a44EC56620059'/>
            <Model:ModelElement xmi.idref = 'a456DB5E0037B'/>
            <Model:ModelElement xmi.idref = 'a46FB601102FD'/>
            <Model:ModelElement xmi.idref = 'a4783730C01A5'/>
            <Model:ModelElement xmi.idref = 'a4784F7F5005F'/>
            <Model:ModelElement xmi.idref = 'a4795A52A03A9'/>
            <Model:ModelElement xmi.idref = 'a4795967B0020'/>
            <Model:ModelElement xmi.idref = 'a47B9ABAF02AF'/>
            <Model:ModelElement xmi.idref = 'a47B9EDFD0001'/>
            <Model:ModelElement xmi.idref = 'a47CBF418010A'/>
            <Model:ModelElement xmi.idref = 'a47CBF46E03D9'/>
            <Model:ModelElement xmi.idref = 'a47CD54E60261'/>
            <Model:ModelElement xmi.idref = 'a47D67F7201BC'/>
            <Model:ModelElement xmi.idref = 'a47F112BE01FC'/>
            <Model:ModelElement xmi.idref = 'a47F112EE01B9'/>
            <Model:ModelElement xmi.idref = 'a47F12A8C021B'/>
            <Model:ModelElement xmi.idref = 'a489CAD350196'/>
            <Model:ModelElement xmi.idref = 'a48A02BD6002E'/>
            <Model:ModelElement xmi.idref = 'a48A04147011B'/>
            <Model:ModelElement xmi.idref = 'a4975FB7F01F5'/>
            <Model:ModelElement xmi.idref = 'a49B150D6032C'/>
            <Model:ModelElement xmi.idref = 'a49B1561E0157'/>
            <Model:ModelElement xmi.idref = 'a49B1561C02CE'/>
            <Model:ModelElement xmi.idref = 'a49B15A62039B'/>
            <Model:ModelElement xmi.idref = 'a49B15BB60196'/>
            <Model:ModelElement xmi.idref = 'a4AD595C100DA'/>
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.org.omg.sap2mof.store=yes    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.636' 
          name = 'org.omg.sap2mof.store=yes' annotation = '' 
          tagId = 'org.omg.sap2mof.store' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>yes</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'ra4795A52A03B9'/>  <!-- data.classes.Association.package_ -->
            <Model:ModelElement xmi.idref = 'ra48A02BD6007D'/>  <!-- data.classes.Signature.typeDefinition -->
            <Model:ModelElement xmi.idref = 'ra44EC5662005B'/>  <!-- data.classes.AssociationEnd.association -->
            <Model:ModelElement xmi.idref = 'ra456DB5E0037D'/>  <!-- data.classes.AssociationEnd.delegation -->
            <Model:ModelElement xmi.idref = 'ra4784F7F5005E'/>  <!-- data.classes.SapClass.elementsOfType -->
            <Model:ModelElement xmi.idref = 'ra47F112BE0232'/>  <!-- data.classes.SapClass.adaptedBy -->
            <Model:ModelElement xmi.idref = 'ra47F112EE01EC'/>  <!-- data.classes.SapClass.adapters -->
            <Model:ModelElement xmi.idref = 'ra49B15A620399'/>  <!-- data.classes.SapClass.converterBetweenParametrizations -->
            <Model:ModelElement xmi.idref = 'ra46FB601102EE'/>  <!-- data.classes.Context.constraints -->
            <Model:ModelElement xmi.idref = 'ra47B9ABAF02BF'/>  <!-- data.classes.ClassTypeDefinition.associationEnd -->
            <Model:ModelElement xmi.idref = 'ra47CBF418010B'/>  <!-- data.classes.TypeDefinition.ownerTypedElement -->
            <Model:ModelElement xmi.idref = 'ra47CBF46E03DA'/>  <!-- data.classes.TypeDefinition.ownerSignature -->
            <Model:ModelElement xmi.idref = 'ra47CD54E60251'/>  <!-- data.classes.NestedTypeDefinition.ownedTypeDefinition -->
            <Model:ModelElement xmi.idref = 'ra47D67F7201BD'/>  <!-- data.classes.MethodSignature.implementation -->
            <Model:ModelElement xmi.idref = 'ra48A04147011A'/>  <!-- data.classes.MethodSignature.owner -->
            <Model:ModelElement xmi.idref = 'ra49B150D6035B'/>  <!-- data.classes.Parameter.parameterOfClass -->
            <Model:ModelElement xmi.idref = 'ra489CAD350177'/>  <!-- data.classes.NativeImpl.platformSpecificImplementaiton -->
            <Model:ModelElement xmi.idref = 'ra4975FB7F01F6'/>  <!-- data.classes.FunctionSignatureImplementation.functionSignature -->
            <Model:ModelElement xmi.idref = 'ra49B1561E0159'/>  <!-- data.classes.ActualObjectParameter.classTypeDefinitions -->
            <Model:ModelElement xmi.idref = 'ra4AD595C100DC'/>  <!-- data.classes.ActualObjectParameter.owningClassTypeDefinition -->
            <Model:ModelElement xmi.idref = 'ra49B15BB60138'/>  <!-- data.classes.ConverterBetweenParametrizations.conversionMethod -->
            <Model:ModelElement xmi.idref = 'a44EC5662005B'/>
            <Model:ModelElement xmi.idref = 'a456DB5E0037D'/>
            <Model:ModelElement xmi.idref = 'a46FB601102EE'/>
            <Model:ModelElement xmi.idref = 'a4784F7F5005E'/>
            <Model:ModelElement xmi.idref = 'a4795A52A03B9'/>
            <Model:ModelElement xmi.idref = 'a4795967B0021'/>
            <Model:ModelElement xmi.idref = 'a47B9ABAF02BF'/>
            <Model:ModelElement xmi.idref = 'a47CBF418010B'/>
            <Model:ModelElement xmi.idref = 'a47CBF46E03DA'/>
            <Model:ModelElement xmi.idref = 'a47CD54E60251'/>
            <Model:ModelElement xmi.idref = 'a47D67F7201BD'/>
            <Model:ModelElement xmi.idref = 'a47F112BE0232'/>
            <Model:ModelElement xmi.idref = 'a47F112EE01EC'/>
            <Model:ModelElement xmi.idref = 'a489CAD350177'/>
            <Model:ModelElement xmi.idref = 'a48A02BD6007D'/>
            <Model:ModelElement xmi.idref = 'a48A04147011A'/>
            <Model:ModelElement xmi.idref = 'a4975FB7F01F6'/>
            <Model:ModelElement xmi.idref = 'a49B150D6035B'/>
            <Model:ModelElement xmi.idref = 'a49B1561E0159'/>
            <Model:ModelElement xmi.idref = 'a49B1561D007D'/>
            <Model:ModelElement xmi.idref = 'a49B15A620399'/>
            <Model:ModelElement xmi.idref = 'a49B15BB60138'/>
            <Model:ModelElement xmi.idref = 'a4AD595C100DC'/>
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.org.omg.sap2mof.violationMessageExpression='Uniqueness on both ends must be the same'    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.637' 
          name = 'org.omg.sap2mof.violationMessageExpression=&apos;Uniqueness on both ends must be the same&apos;' annotation = '' 
          tagId = 'org.omg.sap2mof.violationMessageExpression' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>'Uniqueness on both ends must be the same'</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a478BCB6A02F5'/>  <!-- data.classes.Association.UniquenessOnBothEndsMustBeTheSame -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.org.omg.sap2mof.violationMessageExpression='Associations between two value types that affect equality of both types are currently not supported. It would lead to a recursive equality definition and therefore to recursive value constructors.'    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.638' 
          name = 'org.omg.sap2mof.violationMessageExpression=&apos;Associations between two value types that affect equality of both types are currently not supported. It would lead to a recursive equality definition and therefore to recursive value constructors.&apos;' annotation = '' 
          tagId = 'org.omg.sap2mof.violationMessageExpression' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>'Associations between two value types that affect equality of both types are currently not supported. It would lead to a recursive equality definition and therefore to recursive value constructors.'</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a49422D7A004E'/>  <!-- data.classes.Association.AtMostOneEqualityContributionForTwoValueClasses -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.Signature    [Class] ==================== -->
        <Model:Class xmi.id = 'a4432198602CB' 
          name = 'Signature' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:ModelElement.annotation>Defines an abstract callable operation or block signature with input parameter types, return type and exception / fault types. A signature may also be implemented by association navigation expressions or link set manipulation statements.

The enforcement of side effect freeness is the SignatureImplementation subclasses' responsibility.</Model:ModelElement.annotation>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a49D2B379007D'/>  <!-- data.classes.Signature.OnlyTrailingOptionalParameters -->
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <!-- ==================== data.classes.Signature.faults    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra443B53200210' 
              name = 'faults' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a443B53200210'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.Signature.output    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra47B9EDFD0001' 
              name = 'output' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a47B9A97A00CB'/>  <!-- data.classes.TypeDefinition -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a47B9EDFD0001'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.Signature.ownedTypeDefinitions    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra47CBF46E03D9' 
              name = 'ownedTypeDefinitions' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a47B9A97A00CB'/>  <!-- data.classes.TypeDefinition -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a47CBF46E03D9'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.Signature.input    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra47F12A8C021B' 
              name = 'input' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'true' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a47F12A7E0062'/>  <!-- data.classes.Parameter -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a47F12A8C021B'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.Signature.typeDefinition    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra48A02BD6007D' 
              name = 'typeDefinition' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a47B9A9AD03B9'/>  <!-- data.classes.FunctionSignatureTypeDefinition -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a48A02BD6007D'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.Signature.sideEffectFree    [Attribute] ==================== -->
            <Model:Attribute xmi.id = 'a489D4B780261' 
              name = 'sideEffectFree' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' 
              isDerived = 'false' >
              <Model:ModelElement.annotation>If this flag is set, the signature's implementation must not use a link-modifying implementation on any object of an entity class. It is permissible for an implementation to create value objects. All signatures being called by an implementation must then also have this flag set.

This flag is also relevant for conformance. A signature only conforms to one with this flag set if it also has this flag set.

Note that activities that do not modify the link structure may still have side effects outside of the scope of this programming model, such as producing a log entry in some persistence layer about a query being executed. Such side effects that are outside of this programming model do not count as a side effect in the sense of this flag. In particular, they do not make the program's semantics depend on execution order of such signature implementations.</Model:ModelElement.annotation>
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <!-- ==================== data.classes.Signature.conformsTo    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a457589E201DD' 
              name = 'conformsTo' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.14' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
                  </Model:TypedElement.type>
                </Model:Parameter>
                <Model:Parameter xmi.id = 'XX.15' 
                  name = 's' annotation = '' 
                  direction = 'in_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4432198602CB'/>  <!-- data.classes.Signature -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== data.classes.Signature.conformsToExcluding    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a45DD4F8E0018' 
              name = 'conformsToExcluding' annotation = 'Same as conformsTo(Featured):Boolean but with the possibility to pass pairs of Featured elements that are to be considered conforming and thus don&apos;t need further exploration. This can be used to avoid endless recursions in conformance testing.' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.16' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
                  </Model:TypedElement.type>
                </Model:Parameter>
                <Model:Parameter xmi.id = 'XX.17' 
                  name = 's' annotation = '' 
                  direction = 'in_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4432198602CB'/>  <!-- data.classes.Signature -->
                  </Model:TypedElement.type>
                </Model:Parameter>
                <Model:Parameter xmi.id = 'XX.18' 
                  name = 'excludingConforming' annotation = '' 
                  direction = 'in_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'true' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
                  </Model:TypedElement.type>
                </Model:Parameter>
                <Model:Parameter xmi.id = 'XX.19' 
                  name = 'excludingTo' annotation = '' 
                  direction = 'in_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'true' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== data.classes.Signature.getNamedValuesInScope    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a4B84F8BF030D' 
              name = 'getNamedValuesInScope' annotation = 'For a signature, only the owning class&apos;s formal object parameters are in scope.' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.20' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4522A56F0149'/>  <!-- data.classes.NamedValue -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== data.classes.Signature.getOwningClass    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a4B84F8F50186' 
              name = 'getOwningClass' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.21' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== data.classes.Signature.OnlyTrailingOptionalParameters    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a49D2B379007D' 
              name = 'OnlyTrailingOptionalParameters' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context Signature
inv:
  self.input-&gt;forAll(p | p.defaultValue-&gt;notEmpty() implies Sequence{(self.input-&gt;indexOf(p)+1)..self.input-&gt;size()}-&gt;forAll(
    i | self.input-&gt;at(i).defaultValue-&gt;notEmpty()))</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a4432198602CB'/>  <!-- data.classes.Signature -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context Signature::conformsTo(s:Signature):Boolean...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.640' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context Signature::conformsTo(s:Signature):Boolean...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Signature::conformsTo(s:Signature):Boolean
body:
  if self = s then
    true
  else
    self.conformsToExcluding(s, Sequence{}, Sequence{})
  endif</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a457589E201DD'/>  <!-- data.classes.Signature.conformsTo -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context Signature::conformsToExcluding(s:Signature, excludingConforming:Sequence(SapClass), excludingTo:Sequence(SapClass)):Boolean...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.641' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context Signature::conformsToExcluding(s:Signature, excludingConforming:Sequence(SapClass), excludingTo:Sequence(SapClass)):Boolean...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Signature::conformsToExcluding(s:Signature, excludingConforming:Sequence(SapClass), excludingTo:Sequence(SapClass)):Boolean
body:
  if s = self then
    true
  else
    let nameConforms:Boolean = self.oclIsKindOf(MethodSignature) and s.oclIsKindOf(MethodSignature) 
       implies s.oclAsType(MethodSignature).name = self.oclAsType(MethodSignature).name in
    nameConforms and
    (s.sideEffectFree implies self.sideEffectFree) and
    s.input-&gt;size() = self.input-&gt;size() and
    Sequence{1..self.input-&gt;size()}-&gt;
      forAll(i | s.input-&gt;at(i).getType().conformsToExcluding(self.input-&gt;at(i).getType(), excludingConforming, excludingTo)) and
    s.output-&gt;size() = self.output-&gt;size() and
    Sequence{1..self.output-&gt;size()}-&gt;
      forAll(i | self.output-&gt;asSequence()-&gt;at(i).conformsToExcluding(s.output-&gt;asSequence()-&gt;at(i), excludingConforming, excludingTo))
  endif</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a45DD4F8E0018'/>  <!-- data.classes.Signature.conformsToExcluding -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context Signature::getNamedValuesInScope():Set(NamedValue)...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.642' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context Signature::getNamedValuesInScope():Set(NamedValue)...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Signature::getNamedValuesInScope():Set(NamedValue)
body:
  self.getOwningClass().formalObjectParameters-&gt;asSet()</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a4B84F8BF030D'/>  <!-- data.classes.Signature.getNamedValuesInScope -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context Signature::getOwningClass():SapClass...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.643' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context Signature::getOwningClass():SapClass...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Signature::getOwningClass():SapClass
body:
  if self.oclIsKindOf(MethodSignature) then
    let owner:SignatureOwner = self.oclAsType(MethodSignature).owner in
    if owner.oclIsKindOf(SapClass) then
      owner.oclAsType(SapClass)
    else
      null    -- e.g., TypeAdapter
    endif
  else
    self.oclAsType(FunctionSignature).getImplementedAnonymousFunctionExpression().getOwningClass()
  endif</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a4B84F8F50186'/>  <!-- data.classes.Signature.getOwningClass -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.AssociationEnd    [Class] ==================== -->
        <Model:Class xmi.id = 'a44EC55FB03B8' 
          name = 'AssociationEnd' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a4574A7040339'/>  <!-- data.classes.AssociationEnd.ExposingClassesEqualOppositeEndsType -->
            <Model:Constraint xmi.idref = 'a49411E10033C'/>  <!-- data.classes.AssociationEnd.NoCompositionWithValueClass -->
            <Model:Constraint xmi.idref = 'a49414222002E'/>  <!-- data.classes.AssociationEnd.EqualityContributionsMustBeExposedAndNavigable -->
            <Model:Constraint xmi.idref = 'a497443BF0271'/>  <!-- data.classes.AssociationEnd.EqualityContributingEndOnValueMustHaveUnlimitedUpperBounds -->
          </Model:ModelElement.constraints>
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xml:link = 'simple' href = 'modelmanagement.xml|a45013C240030'/>
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== data.classes.AssociationEnd.association    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra44EC5662005B' 
              name = 'association' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44321DA40150'/>  <!-- data.classes.Association -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a44EC5662005B'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.AssociationEnd.delegation    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra456DB5E0037D' 
              name = 'delegation' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a456DB5D50361'/>  <!-- data.classes.Delegation -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a456DB5E0037D'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.AssociationEnd.signatureImplementations    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra4783730C01A7' 
              name = 'signatureImplementations' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a478372D00242'/>  <!-- data.classes.AssociationEndSignatureImplementation -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a4783730C01A7'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.AssociationEnd.type    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra47B9ABAF02AF' 
              name = 'type' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4784F7E800AB'/>  <!-- data.classes.ClassTypeDefinition -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a47B9ABAF02AF'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.AssociationEnd.navigable    [Attribute] ==================== -->
            <Model:Attribute xmi.id = 'a44EC567E00FA' 
              name = 'navigable' annotation = 'Means that the association can be navigated in that direction towards this end. Note that non-navigability does not serve as a security-related feature. If all objects of the type at the other end can be enumerated and because the association has to be navigable in at least one direction, it will be possible to find out those objects on the other end that are linked to an instance which semantically implements navigation again, only potentially very slowly if the extent to enumerate is large.' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' 
              isDerived = 'false' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <!-- ==================== data.classes.AssociationEnd.composite    [Attribute] ==================== -->
            <Model:Attribute xmi.id = 'a44EC7CEF00F1' 
              name = 'composite' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' 
              isDerived = 'false' >
              <Model:ModelElement.annotation>Expresses ownership that for entity-to-entity associations also implies delete propagation. Only one of the two association ends can be marked as composite. The end marked in this way attaches to the "owning" class whereas the otherEnd() attaches to the "owned" class.

Composition cannot be used for value classes. Values cannot be owned, and values cannot own anything.</Model:ModelElement.annotation>
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <!-- ==================== data.classes.AssociationEnd.contributesToEquality    [Attribute] ==================== -->
            <Model:Attribute xmi.id = 'a49414120003E' 
              name = 'contributesToEquality' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' 
              isDerived = 'false' >
              <Model:ModelElement.annotation>If true, this association end contributes to the equality of the exposing class. An equality-contributing association end must be exposed (maybe with private visibility) because it is relevant for the contract of that class.

It is a questionable construct to have both ends contribute to equality if both classes are value classes because it would mean that values of either of the classes can be identified only in pairs. The equality definition would be recursive, and an implementation would have to understand this and cut short the recursion, comparing only all other equality-related association end values.</Model:ModelElement.annotation>
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <!-- ==================== data.classes.AssociationEnd.otherEnd    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a456DC3DA0356' 
              name = 'otherEnd' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.22' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a44EC55FB03B8'/>  <!-- data.classes.AssociationEnd -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== data.classes.AssociationEnd.ExposingClassesEqualOppositeEndsType    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a4574A7040339' 
              name = 'ExposingClassesEqualOppositeEndsType' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context AssociationEnd
inv:
  self.signatureImplementations.implements_.owner-&gt;forAll(c:SignatureOwner | c = self.otherEnd().type.clazz)</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a44EC55FB03B8'/>  <!-- data.classes.AssociationEnd -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <!-- ==================== data.classes.AssociationEnd.NoCompositionWithValueClass    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a49411E10033C' 
              name = 'NoCompositionWithValueClass' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context AssociationEnd
inv:
  self.composite implies self.association.ends.type-&gt;forAll(ctd:ClassTypeDefinition | not ctd.clazz.valueType)</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a44EC55FB03B8'/>  <!-- data.classes.AssociationEnd -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <!-- ==================== data.classes.AssociationEnd.EqualityContributionsMustBeExposedAndNavigable    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a49414222002E' 
              name = 'EqualityContributionsMustBeExposedAndNavigable' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context AssociationEnd
inv:
  self.contributesToEquality implies (self.otherEnd().signatureImplementations-&gt;notEmpty() and self.otherEnd().navigable)</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a44EC55FB03B8'/>  <!-- data.classes.AssociationEnd -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <!-- ==================== data.classes.AssociationEnd.EqualityContributingEndOnValueMustHaveUnlimitedUpperBounds    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a497443BF0271' 
              name = 'EqualityContributingEndOnValueMustHaveUnlimitedUpperBounds' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context AssociationEnd
inv:
  (self.type.clazz.valueType and self.contributesToEquality and
   self.type.clazz.getAssociationEnds()-&gt;exists(ae |
     ae &lt;&gt; self and ae.contributesToEquality)) implies
  self.type.isMany()</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a44EC55FB03B8'/>  <!-- data.classes.AssociationEnd -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context AssociationEnd::otherEnd():AssociationEnd...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.644' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context AssociationEnd::otherEnd():AssociationEnd...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context AssociationEnd::otherEnd():AssociationEnd
body:
  association.ends-&gt;select(ae|ae &lt;&gt; self)-&gt;first()</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a456DC3DA0356'/>  <!-- data.classes.AssociationEnd.otherEnd -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.org.omg.sap2mof.violationMessageExpression='Exposing classes equal opposite ends type'    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.645' 
          name = 'org.omg.sap2mof.violationMessageExpression=&apos;Exposing classes equal opposite ends type&apos;' annotation = '' 
          tagId = 'org.omg.sap2mof.violationMessageExpression' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>'Exposing classes equal opposite ends type'</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a4574A7040339'/>  <!-- data.classes.AssociationEnd.ExposingClassesEqualOppositeEndsType -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.org.omg.sap2mof.violationMessageExpression='If the association is equality relevant for the value and it is not the only attribute of the value, there may be an unlimited number of values connected to the other end. The multiplicity of the end must be *.'    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.646' 
          name = 'org.omg.sap2mof.violationMessageExpression=&apos;If the association is equality relevant for the value and it is not the only attribute of the value, there may be an unlimited number of values connected to the other end. The multiplicity of the end must be *.&apos;' annotation = '' 
          tagId = 'org.omg.sap2mof.violationMessageExpression' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>'If the association is equality relevant for the value and it is not the only attribute of the value, there may be an unlimited number of values connected to the other end. The multiplicity of the end must be *.'</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a497443BF0271'/>  <!-- data.classes.AssociationEnd.EqualityContributingEndOnValueMustHaveUnlimitedUpperBounds -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.SapClass    [Class] ==================== -->
        <Model:Class xmi.id = 'a4432171B031E' 
          name = 'SapClass' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a49B15ADD007D'/>  <!-- data.classes.SapClass.OnlyValueClassesCanHaveObjectParameters -->
            <Model:Constraint xmi.idref = 'a49B15B25030D'/>  <!-- data.classes.SapClass.OnlyObjectParameterizedClassesCanHaveConverter -->
            <Model:Constraint xmi.idref = 'a49D2C2BB0280'/>  <!-- data.classes.SapClass.OnlyTrailingOptionalParameters -->
            <Model:Constraint xmi.idref = 'a4A0D90B302DE'/>  <!-- data.classes.SapClass.NoRecursionForObjectParameters -->
          </Model:ModelElement.constraints>
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xml:link = 'simple' href = 'behavioral.xml|a44ECC164016C'/>
            <Model:GeneralizableElement xmi.idref = 'a48A0412B002E'/>  <!-- data.classes.SignatureOwner -->
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== data.classes.SapClass.signaturesWithFault    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra443B53200224' 
              name = 'signaturesWithFault' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4432198602CB'/>  <!-- data.classes.Signature -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a443B53200224'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.SapClass.elementsOfType    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra4784F7F5005E' 
              name = 'elementsOfType' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4784F7E800AB'/>  <!-- data.classes.ClassTypeDefinition -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a4784F7F5005E'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.SapClass.package_    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra4795967B0020' 
              name = 'package_' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'modelmanagement.xml|a452B7C8B00D8'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a4795967B0020'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.SapClass.adaptedBy    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra47F112BE0232' 
              name = 'adaptedBy' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a47F112210022'/>  <!-- data.classes.TypeAdapter -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a47F112BE0232'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.SapClass.adapters    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra47F112EE01EC' 
              name = 'adapters' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a47F112210022'/>  <!-- data.classes.TypeAdapter -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a47F112EE01EC'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.SapClass.formalObjectParameters    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra49B150D6032C' 
              name = 'formalObjectParameters' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'true' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a47F12A7E0062'/>  <!-- data.classes.Parameter -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a49B150D6032C'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.SapClass.converterBetweenParametrizations    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra49B15A620399' 
              name = 'converterBetweenParametrizations' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a49B15A3F03D8'/>  <!-- data.classes.ConverterBetweenParametrizations -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a49B15A620399'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.SapClass.valueType    [Attribute] ==================== -->
            <Model:Attribute xmi.id = 'a47B98A000000' 
              name = 'valueType' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' 
              isDerived = 'false' >
              <Model:ModelElement.annotation>If true, instances of the class will be immutable. Comparison will be by equality. Their identity is defined by value equality. Value types can of course contain associations to non-value (or "entity") types.

As opposed to value types, instances of entity types have identity and mutable state. They are always passed by reference. Variables only hold a reference to a shared instance. Comparing two entity objects using "Equals" will compare their identities.</Model:ModelElement.annotation>
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <!-- ==================== data.classes.SapClass.isAbstract    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a45DE22500389' 
              name = 'isAbstract' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.23' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== data.classes.SapClass.isParameterizedClassDefinition    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a45E5ABB003DE' 
              name = 'isParameterizedClassDefinition' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.24' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== data.classes.SapClass.conformsTo    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a4522A72200CC' 
              name = 'conformsTo' annotation = 'A class A conforms to a class B if they are the same or if there is a chain of (TypeAdapter_i, Class_i) pairs (0&lt;=i&lt;=n) where TypeAdapter_0 adapts A to Class_0, and where Class_n is B.' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.25' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
                  </Model:TypedElement.type>
                </Model:Parameter>
                <Model:Parameter xmi.id = 'XX.26' 
                  name = 'type' annotation = '' 
                  direction = 'in_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== data.classes.SapClass.allSignatures    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a45828D3E0276' 
              name = 'allSignatures' annotation = 'Computes all locally-defined signatures plus those signatures offered by any Class (directly, or by delegation or recursively by type adaptation) attached to this class as a type adapter, plus allSignatures() recursively of all classes to which this class delegates.' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.27' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a47D67D15030D'/>  <!-- data.classes.MethodSignature -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== data.classes.SapClass.delegatesTo    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a45828E740204' 
              name = 'delegatesTo' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:ModelElement.annotation>A class can delegate to another class via an attached association end that in turn has attached a Delegation element. The delegating class by this exposes all operations and association ends exposed by the delegate class (recursively). The semantics of such a delegation is that when invoked, the invocation will be forwarded to the delegate object transparently and recursively.

Note, that TypeAdapter objects cannot delegate because they cannot have association ends attached to them. They can only expose association ends whose other end is attached to a class to which the TypeAdapter conforms.</Model:ModelElement.annotation>
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.28' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== data.classes.SapClass.conformsToExcluding    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a45DD493C0152' 
              name = 'conformsToExcluding' annotation = 'Same as conformsTo(Featured):Boolean but with the possibility to pass pairs of Featured elements that are to be considered conforming and thus don&apos;t need further exploration. This can be used to avoid endless recursions in conformance testing.' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.29' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
                  </Model:TypedElement.type>
                </Model:Parameter>
                <Model:Parameter xmi.id = 'XX.30' 
                  name = 'type' annotation = '' 
                  direction = 'in_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
                  </Model:TypedElement.type>
                </Model:Parameter>
                <Model:Parameter xmi.id = 'XX.31' 
                  name = 'excludingConforming' annotation = '' 
                  direction = 'in_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'true' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
                  </Model:TypedElement.type>
                </Model:Parameter>
                <Model:Parameter xmi.id = 'XX.32' 
                  name = 'excludingTo' annotation = '' 
                  direction = 'in_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'true' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== data.classes.SapClass.signaturesWithDelegation    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a47862CA2038A' 
              name = 'signaturesWithDelegation' annotation = 'Signature declared directly by this class and those signatures obtained by delegation, recursively.' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.33' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a47D67D15030D'/>  <!-- data.classes.MethodSignature -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== data.classes.SapClass.delegatedSignatures    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a47E4A6EE028B' 
              name = 'delegatedSignatures' annotation = 'Signatures obtained by delegation recursively.' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.34' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a47D67D15030D'/>  <!-- data.classes.MethodSignature -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== data.classes.SapClass.adaptedSignatures    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a47E4A77602E6' 
              name = 'adaptedSignatures' annotation = 'Computes signatures offered by any Class (directly, or by delegation or recursively by type adaptation) attached to this class as a type adapter' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.35' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a47D67D15030D'/>  <!-- data.classes.MethodSignature -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== data.classes.SapClass.adaptedSignaturesExcluding    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a47E4B8DB01D6' 
              name = 'adaptedSignaturesExcluding' annotation = 'Computes signatures offered by any type adapter adapting this class to another class, minus those signatures redefined in the local class' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.36' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a47D67D15030D'/>  <!-- data.classes.MethodSignature -->
                  </Model:TypedElement.type>
                </Model:Parameter>
                <Model:Parameter xmi.id = 'XX.37' 
                  name = 'excluding' annotation = '' 
                  direction = 'in_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== data.classes.SapClass.allSignaturesExcluding    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a47E4BEFB0049' 
              name = 'allSignaturesExcluding' annotation = 'Computes all locally-defined signatures plus those signatures offered by any Class (directly, or by delegation or recursively by type adaptation) attached to this class as a type adapter, plus allSignatures() recursively of all classes to which this class delegates.' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.38' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a47D67D15030D'/>  <!-- data.classes.MethodSignature -->
                  </Model:TypedElement.type>
                </Model:Parameter>
                <Model:Parameter xmi.id = 'XX.39' 
                  name = 'excluding' annotation = '' 
                  direction = 'in_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== data.classes.SapClass.signaturesWithDelegationExcluding    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a47EAB2A10094' 
              name = 'signaturesWithDelegationExcluding' annotation = 'Signature declared directly by this class and those signatures obtained by delegation, recursively.' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.40' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a47D67D15030D'/>  <!-- data.classes.MethodSignature -->
                  </Model:TypedElement.type>
                </Model:Parameter>
                <Model:Parameter xmi.id = 'XX.41' 
                  name = 'excluding' annotation = '' 
                  direction = 'in_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== data.classes.SapClass.delegatedSignaturesExcluding    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a47EAB40A028F' 
              name = 'delegatedSignaturesExcluding' annotation = 'Signatures obtained by delegation recursively.' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.42' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a47D67D15030D'/>  <!-- data.classes.MethodSignature -->
                  </Model:TypedElement.type>
                </Model:Parameter>
                <Model:Parameter xmi.id = 'XX.43' 
                  name = 'excluding' annotation = '' 
                  direction = 'in_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== data.classes.SapClass.getConformingClasses    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a488083D701C5' 
              name = 'getConformingClasses' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.44' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== data.classes.SapClass.getAssociationEnds    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a4976387602F5' 
              name = 'getAssociationEnds' annotation = 'Retrieves those association ends that use this class in their type definition.' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.45' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a44EC55FB03B8'/>  <!-- data.classes.AssociationEnd -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== data.classes.SapClass.getEqualityRelevantAssociationEnds    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a4976394D03D7' 
              name = 'getEqualityRelevantAssociationEnds' annotation = 'Obtains all association ends that use this class in their type definition and that contribute to this class&apos;s equality, indicated by their contributesToEquality attribute being set to true.' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.46' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a44EC55FB03B8'/>  <!-- data.classes.AssociationEnd -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== data.classes.SapClass.getConformsToClasses    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a49784E36029F' 
              name = 'getConformsToClasses' annotation = 'Determines all classes to which this class conforms, directly and transitively, through chains of TypeAdapters. The result includes this class itself.' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.47' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== data.classes.SapClass.getConformsToAssociationEnds    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a49784F2C02FD' 
              name = 'getConformsToAssociationEnds' annotation = 'Determines all association ends to whose type this class conforms. This means that an instance of this class can be inserted on that respective end of the corresponding association. For example, if there is an association between Order and Item with ends "order" and "items" and there are classes SalesOrder and SalesOrderItem conforming to Order and Item, respectively, then the "order" end will be returned by this method when invoked on the SalesOrder class because SalesOrder conforms to Order and therefore a SalesOrder can be inserted into the association in role "order."' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.48' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a44EC55FB03B8'/>  <!-- data.classes.AssociationEnd -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== data.classes.SapClass.getConformsToCompositeParentAssociationEnds    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a4978501103A9' 
              name = 'getConformsToCompositeParentAssociationEnds' annotation = 'Like getConformsToAssociationEnds(), but selects only those association ends that are marked as composite.' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.49' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a44EC55FB03B8'/>  <!-- data.classes.AssociationEnd -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== data.classes.SapClass.getConformsToCompositeChildAssociationEnds    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a4978508B003E' 
              name = 'getConformsToCompositeChildAssociationEnds' annotation = 'Like getConformsToAssociationEnds(), but selects only those association ends whose other ends are marked as composite.' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.50' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a44EC55FB03B8'/>  <!-- data.classes.AssociationEnd -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== data.classes.SapClass.OnlyValueClassesCanHaveObjectParameters    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a49B15ADD007D' 
              name = 'OnlyValueClassesCanHaveObjectParameters' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context SapClass
inv:
  self.formalObjectParameters-&gt;notEmpty() implies self.valueType</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <!-- ==================== data.classes.SapClass.OnlyObjectParameterizedClassesCanHaveConverter    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a49B15B25030D' 
              name = 'OnlyObjectParameterizedClassesCanHaveConverter' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context SapClass
inv:
  self.converterBetweenParametrizations-&gt;notEmpty() implies self.formalObjectParameters-&gt;notEmpty()</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <!-- ==================== data.classes.SapClass.OnlyTrailingOptionalParameters    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a49D2C2BB0280' 
              name = 'OnlyTrailingOptionalParameters' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context SapClass
inv:
  self.formalObjectParameters-&gt;forAll(p | p.defaultValue-&gt;notEmpty() implies Sequence{(self.formalObjectParameters-&gt;indexOf(p)+1)..self.formalObjectParameters-&gt;size()}-&gt;forAll(
    i | self.formalObjectParameters-&gt;at(i).defaultValue-&gt;notEmpty()))</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <!-- ==================== data.classes.SapClass.NoRecursionForObjectParameters    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a4A0D90B302DE' 
              name = 'NoRecursionForObjectParameters' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context SapClass
inv:
  true  --  TODO implement this</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== data.classes.org.omg.sap2mof.requiresPartition=True    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.647' 
          name = 'org.omg.sap2mof.requiresPartition=True' annotation = '' 
          tagId = 'org.omg.sap2mof.requiresPartition' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>True</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
            <Model:ModelElement xmi.idref = 'a47F112210022'/>  <!-- data.classes.TypeAdapter -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context SapClass::isAbstract():Boolean...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.648' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context SapClass::isAbstract():Boolean...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context SapClass::isAbstract():Boolean
body:
  not (self.allSignatures()-&gt;forAll(s:MethodSignature | not s.isAbstract()))</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a45DE22500389'/>  <!-- data.classes.SapClass.isAbstract -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context SapClass::isParameterizedClassDefinition():Boolean...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.649' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context SapClass::isParameterizedClassDefinition():Boolean...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context SapClass::isParameterizedClassDefinition():Boolean
body:
  self.parameterization-&gt;notEmpty()</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a45E5ABB003DE'/>  <!-- data.classes.SapClass.isParameterizedClassDefinition -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context SapClass::conformsTo(type:SapClass):Boolean...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.650' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context SapClass::conformsTo(type:SapClass):Boolean...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context SapClass::conformsTo(type:SapClass):Boolean
body:
  if self.oclIsUndefined() then
    false
  else
    self.conformsToExcluding(type, Sequence{}, Sequence{})
  endif</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a4522A72200CC'/>  <!-- data.classes.SapClass.conformsTo -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context SapClass::allSignatures():Set(MethodSignature)...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.651' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context SapClass::allSignatures():Set(MethodSignature)...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context SapClass::allSignatures():Set(MethodSignature)
body:
self.allSignaturesExcluding(Set{})</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a45828D3E0276'/>  <!-- data.classes.SapClass.allSignatures -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context SapClass::delegatesTo():Set(SapClass)...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.652' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context SapClass::delegatesTo():Set(SapClass)...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context SapClass::delegatesTo():Set(SapClass)
body:
  if self.oclIsKindOf(data::generics::ParameterizedClassInstantiation) then
    self.oclAsType(data::generics::ParameterizedClassInstantiation).parameterizedClass.delegatesTo()
  else
    if self.oclIsKindOf(data::generics::FormalTypeParameter) then
      self.oclAsType(data::generics::FormalTypeParameter).typeConstraint-&gt;collect(c:SapClass | c.delegatesTo())-&gt;flatten()-&gt;asSet()
    else
      -- TODO improve OCL impact analysis algorithm so that this doesn't kill performance:
      -- Set{}  -- use this for good performance
      self.getAssociationEnds().otherEnd()-&gt;select(delegation-&gt;notEmpty()).type.clazz-&gt;reject(c|c=self)-&gt;asSet()    -- currently bad performance
    endif
  endif</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a45828E740204'/>  <!-- data.classes.SapClass.delegatesTo -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context SapClass::conformsToExcluding(type:SapClass, excludingConforming:Sequence(SapClass), excludingTo:Sequence(SapClass)):Boolean...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.653' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context SapClass::conformsToExcluding(type:SapClass, excludingConforming:Sequence(SapClass), excludingTo:Sequence(SapClass)):Boolean...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context SapClass::conformsToExcluding(type:SapClass, excludingConforming:Sequence(SapClass), excludingTo:Sequence(SapClass)):Boolean
body:
  if oclIsUndefined() then
    false
  else
  if self = type then
   true
  else
    if Sequence{1..excludingConforming-&gt;size()}-&gt;exists(i|
        excludingConforming-&gt;asSequence()-&gt;at(i) = self and excludingTo-&gt;asSequence()-&gt;at(i) = type) then
     true
  else
    self.adapters-&gt;exists(a|a.to.conformsToExcluding(type, excludingConforming-&gt;including(self), excludingTo-&gt;including(type))) or
    (if self.oclIsKindOf(data::generics::FormalTypeParameter) then
        if self.oclAsType(data::generics::FormalTypeParameter).typeConstraint-&gt;notEmpty() then
            self.oclAsType(data::generics::FormalTypeParameter).typeConstraint.conformsToExcluding(type, excludingConforming-&gt;including(self), excludingTo-&gt;including(type))
        else
            false
        endif
    else
        false
    endif)
  endif
  endif
endif</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a45DD493C0152'/>  <!-- data.classes.SapClass.conformsToExcluding -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context SapClass::signaturesWithDelegation():Set(MethodSignature)...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.654' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context SapClass::signaturesWithDelegation():Set(MethodSignature)...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context SapClass::signaturesWithDelegation():Set(MethodSignature)
body:
  self.signaturesWithDelegationExcluding(Set{})</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a47862CA2038A'/>  <!-- data.classes.SapClass.signaturesWithDelegation -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context SapClass::delegatedSignatures():Set(MethodSignature)...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.655' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context SapClass::delegatedSignatures():Set(MethodSignature)...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context SapClass::delegatedSignatures():Set(MethodSignature)
body:
  self.delegatesTo().signaturesWithDelegation()-&gt;flatten()-&gt;asSet()</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a47E4A6EE028B'/>  <!-- data.classes.SapClass.delegatedSignatures -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context SapClass::adaptedSignatures():Set(MethodSignature)...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.656' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context SapClass::adaptedSignatures():Set(MethodSignature)...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context SapClass::adaptedSignatures():Set(MethodSignature)
body:
  self.adaptedSignaturesExcluding(Set{})
</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a47E4A77602E6'/>  <!-- data.classes.SapClass.adaptedSignatures -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context SapClass::adaptedSignaturesExcluding(excluding:Set(SapClass)):Set(MethodSignature)...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.657' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context SapClass::adaptedSignaturesExcluding(excluding:Set(SapClass)):Set(MethodSignature)...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context SapClass::adaptedSignaturesExcluding(excluding:Set(SapClass)):Set(MethodSignature)
body:
  if excluding-&gt;count(self)=0 then
    if self.oclIsKindOf(data::generics::ParameterizedClassInstantiation) then
      self.oclAsType(data::generics::ParameterizedClassInstantiation).parameterizedClass.adaptedSignaturesExcluding(excluding-&gt;including(self))
    else
      if self.oclIsKindOf(data::generics::FormalTypeParameter) then
        self.oclAsType(data::generics::FormalTypeParameter).typeConstraint-&gt;collect(c:SapClass | c.adaptedSignaturesExcluding(excluding-&gt;including(self)))-&gt;flatten()-&gt;asSet()
      else
        self.adapters.allSignaturesExcluding(excluding-&gt;including(self))
          -&gt;select(s | not self.ownedSignatures-&gt;exists(os | os.conformsTo(s)))
          -&gt;flatten()-&gt;asSet()
      endif
    endif
  else
    Set{}
  endif
</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a47E4B8DB01D6'/>  <!-- data.classes.SapClass.adaptedSignaturesExcluding -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context SapClass::allSignaturesExcluding(excluding:Set(SapClass)):Set(MethodSignature)...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.658' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context SapClass::allSignaturesExcluding(excluding:Set(SapClass)):Set(MethodSignature)...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context SapClass::allSignaturesExcluding(excluding:Set(SapClass)):Set(MethodSignature)
body:
  if excluding-&gt;count(self)=0 then
    if self.oclIsKindOf(data::generics::ParameterizedClassInstantiation) then
      self.oclAsType(data::generics::ParameterizedClassInstantiation).parameterizedClass.allSignaturesExcluding(excluding-&gt;including(self))
    else
      if self.oclIsKindOf(data::generics::FormalTypeParameter) then
        self.oclAsType(data::generics::FormalTypeParameter).typeConstraint-&gt;collect(c:SapClass | c.allSignaturesExcluding(excluding-&gt;including(self)))-&gt;flatten()-&gt;asSet()
      else
        self.signaturesWithDelegationExcluding(excluding)-&gt;union(self.adaptedSignaturesExcluding(excluding))
      endif
    endif
  else
    Set{}    
  endif</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a47E4BEFB0049'/>  <!-- data.classes.SapClass.allSignaturesExcluding -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context SapClass::signaturesWithDelegationExcluding(excluding:Set(SapClass)):Set(MethodSignature)...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.659' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context SapClass::signaturesWithDelegationExcluding(excluding:Set(SapClass)):Set(MethodSignature)...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context SapClass::signaturesWithDelegationExcluding(excluding:Set(SapClass)):Set(MethodSignature)
body:
if excluding-&gt;count(self)=0 then 
    if self.oclIsKindOf(data::generics::ParameterizedClassInstantiation) then
      self.oclAsType(data::generics::ParameterizedClassInstantiation).parameterizedClass.signaturesWithDelegationExcluding(excluding-&gt;including(self))
    else
      if self.oclIsKindOf(data::generics::FormalTypeParameter) then
        self.oclAsType(data::generics::FormalTypeParameter).typeConstraint-&gt;collect(c:SapClass | c.signaturesWithDelegationExcluding(excluding-&gt;including(self)))-&gt;flatten()-&gt;asSet()
      else
        self.ownedSignatures-&gt;union(self.delegatesTo().signaturesWithDelegationExcluding(excluding-&gt;including(self)))-&gt;flatten()-&gt;asSet()
      endif
    endif
else
  Set{}
endif</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a47EAB2A10094'/>  <!-- data.classes.SapClass.signaturesWithDelegationExcluding -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context SapClass::delegatedSignaturesExcluding(excluding:Set(SapClass)):Set(MethodSignature)...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.660' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context SapClass::delegatedSignaturesExcluding(excluding:Set(SapClass)):Set(MethodSignature)...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context SapClass::delegatedSignaturesExcluding(excluding:Set(SapClass)):Set(MethodSignature)
body:
if excluding-&gt;count(self)=0 then
  self.delegatesTo().signaturesWithDelegationExcluding(excluding-&gt;including(self))-&gt;flatten()-&gt;asSet()
else
  Set{}
endif</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a47EAB40A028F'/>  <!-- data.classes.SapClass.delegatedSignaturesExcluding -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context SapClass::getConformingClasses():Set(SapClass)...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.661' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context SapClass::getConformingClasses():Set(SapClass)...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context SapClass::getConformingClasses():Set(SapClass)
body:
    self.adaptedBy.adapted.getConformingClasses()-&gt;including(self)-&gt;asSet()

</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a488083D701C5'/>  <!-- data.classes.SapClass.getConformingClasses -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context SapClass::getAssociationEnds():Set(AssociationEnd)...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.662' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context SapClass::getAssociationEnds():Set(AssociationEnd)...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context SapClass::getAssociationEnds():Set(AssociationEnd)
body:
  self.elementsOfType-&gt;collect(associationEnd-&gt;asSet())-&gt;asSet()</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a4976387602F5'/>  <!-- data.classes.SapClass.getAssociationEnds -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context SapClass::getEqualityRelevantAssociationEnds():Set(AssociationEnd)...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.663' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context SapClass::getEqualityRelevantAssociationEnds():Set(AssociationEnd)...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context SapClass::getEqualityRelevantAssociationEnds():Set(AssociationEnd)
body:
  self.getAssociationEnds()-&gt;select(ae|ae.contributesToEquality)</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a4976394D03D7'/>  <!-- data.classes.SapClass.getEqualityRelevantAssociationEnds -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context SapClass::getConformsToClasses():Set(SapClass)...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.664' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context SapClass::getConformsToClasses():Set(SapClass)...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context SapClass::getConformsToClasses():Set(SapClass)
body:
    self.adapters.to.getConformsToClasses()-&gt;including(self)-&gt;asSet()</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a49784E36029F'/>  <!-- data.classes.SapClass.getConformsToClasses -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context SapClass::getConformsToAssociationEnds():Set(AssociationEnd)...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.665' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context SapClass::getConformsToAssociationEnds():Set(AssociationEnd)...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context SapClass::getConformsToAssociationEnds():Set(AssociationEnd)
body:
    self.getConformsToClasses().getAssociationEnds()-&gt;asSet()</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a49784F2C02FD'/>  <!-- data.classes.SapClass.getConformsToAssociationEnds -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context SapClass::getConformsToCompositeParentAssociationEnds():Set(AssociationEnd)...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.666' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context SapClass::getConformsToCompositeParentAssociationEnds():Set(AssociationEnd)...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context SapClass::getConformsToCompositeParentAssociationEnds():Set(AssociationEnd)
body:
    self.getConformsToClasses().getAssociationEnds()-&gt;select(ae|ae.composite)-&gt;asSet()</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a4978501103A9'/>  <!-- data.classes.SapClass.getConformsToCompositeParentAssociationEnds -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context SapClass::getConformsToCompositeChildAssociationEnds():Set(AssociationEnd)...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.667' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context SapClass::getConformsToCompositeChildAssociationEnds():Set(AssociationEnd)...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context SapClass::getConformsToCompositeChildAssociationEnds():Set(AssociationEnd)
body:
    self.getConformsToClasses().getAssociationEnds()-&gt;select(ae|ae.otherEnd().composite)-&gt;asSet()</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a4978508B003E'/>  <!-- data.classes.SapClass.getConformsToCompositeChildAssociationEnds -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.Delegation    [Class] ==================== -->
        <Model:Class xmi.id = 'a456DB5D50361' 
          name = 'Delegation' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:ModelElement.annotation>Exposes all features (operations and exposed association ends) of the class to which the opposite of the "from" end is attached as features of the "from" end's class. In particular, this makes the "from" class conform to the type of the "to" association end.

The lower and upper multiplicity of the "from" opposite's association end must be 1 because a single instance is required in order to the "from" type to be able to delegate to it.</Model:ModelElement.annotation>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a456DB71403E2'/>  <!-- data.classes.Delegation.ToEndMustHaveMultiplicityOfOne -->
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <!-- ==================== data.classes.Delegation.from    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra456DB5E0037B' 
              name = 'from' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44EC55FB03B8'/>  <!-- data.classes.AssociationEnd -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a456DB5E0037B'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.Delegation.allFeatures    [Attribute] ==================== -->
            <Model:Attribute xmi.id = 'a456DC1B60091' 
              name = 'allFeatures' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' 
              isDerived = 'false' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <!-- ==================== data.classes.Delegation.ToEndMustHaveMultiplicityOfOne    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a456DB71403E2' 
              name = 'ToEndMustHaveMultiplicityOfOne' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context Delegation
inv:
  self.from.otherEnd().type.lowerMultiplicity = 1 and
  self.from.otherEnd().type.upperMultiplicity = 1</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a456DB5D50361'/>  <!-- data.classes.Delegation -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== data.classes.org.omg.sap2mof.violationMessageExpression='TO end must have multiplicity of One'    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.668' 
          name = 'org.omg.sap2mof.violationMessageExpression=&apos;TO end must have multiplicity of One&apos;' annotation = '' 
          tagId = 'org.omg.sap2mof.violationMessageExpression' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>'TO end must have multiplicity of One'</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a456DB71403E2'/>  <!-- data.classes.Delegation.ToEndMustHaveMultiplicityOfOne -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.TypedElement    [Class] ==================== -->
        <Model:Class xmi.id = 'a4717B7BC031A' 
          name = 'TypedElement' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:Namespace.contents>
            <!-- ==================== data.classes.TypedElement.ownedTypeDefinition    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra47CBF418010A' 
              name = 'ownedTypeDefinition' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a47B9A97A00CB'/>  <!-- data.classes.TypeDefinition -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a47CBF418010A'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.TypedElement.conformsTo    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a47555350031C' 
              name = 'conformsTo' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:ModelElement.annotation>A typed element consisting of a type with a multiplicity conforms to another typed element if this typed element's type conforms to the other type element's type, and this type element's multiplicity "conforms" to the other type element's multiplicity. In particular, equal multiplicities conform to each other.

TODO: decide if and how non-equal multiplicites may still conform; for example, a single element may implicitly conform to a collection of elements of conforming type; however, additions to the single element would not be possible.</Model:ModelElement.annotation>
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.51' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
                  </Model:TypedElement.type>
                </Model:Parameter>
                <Model:Parameter xmi.id = 'XX.52' 
                  name = 'typedElement' annotation = '' 
                  direction = 'in_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4717B7BC031A'/>  <!-- data.classes.TypedElement -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== data.classes.TypedElement.getType    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a4905EBCF00CB' 
              name = 'getType' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:ModelElement.annotation>Determined the type of the element. If the element owns a type definition, that one is assumed to be the result. Otherwise, "polymorphically" (we will refactor this once we can defined OCL method bodies polymorphically) we determine the type of the respective element.

TODO the inference for Iterator elements used in an Iterate expression needs to resolve NestedTypeDefinitions; for non-NestedTypeDefinition type definitions it needs to reduce the multiplicity to exactly 1.</Model:ModelElement.annotation>
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.53' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a47B9A97A00CB'/>  <!-- data.classes.TypeDefinition -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context TypedElement::conformsTo(typedElement:TypedElement):Boolean...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.669' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context TypedElement::conformsTo(typedElement:TypedElement):Boolean...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context TypedElement::conformsTo(typedElement:TypedElement):Boolean
body:
  self = typedElement or
  self.getType().conformsTo(typedElement.getType())</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a47555350031C'/>  <!-- data.classes.TypedElement.conformsTo -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context TypedElement::getType():TypeDefinition...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.670' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context TypedElement::getType():TypeDefinition...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context TypedElement::getType():TypeDefinition
body:
  if self.ownedTypeDefinition-&gt;notEmpty() then
    self.ownedTypeDefinition
  else
    if self.oclIsKindOf(behavioral::actions::Variable) then
      self.oclAsType(behavioral::actions::Variable).initExpression.getType()
    else if self.oclIsKindOf(behavioral::actions::Constant) then
      if self.oclAsType(behavioral::actions::Constant).initExpression-&gt;notEmpty() then
        self.oclAsType(behavioral::actions::Constant).initExpression.getType()
      else
         if self.oclAsType(behavioral::actions::Constant)."iterate"-&gt;notEmpty() then
           self.oclAsType(behavioral::actions::Constant)."iterate".iteratorExpression.getType()
         else
           null
         endif
      endif
    else if self.oclIsKindOf(behavioral::actions::Iterator) then
      if self.oclAsType(behavioral::actions::Iterator).boundToFor-&gt;notEmpty() then
        if self.oclAsType(behavioral::actions::Iterator).boundToFor.collection.getType().oclIsKindOf(data::classes::NestedTypeDefinition) then
          -- if the selection's object has a nested type definition, un-nest by one level
          self.oclAsType(behavioral::actions::Iterator).boundToFor.collection.getType().oclAsType(data::classes::NestedTypeDefinition).type
        else
          -- the tool should infer a better match; this as a better default than "null"
          self.oclAsType(behavioral::actions::Iterator).boundToFor.collection.getType()
        endif
      else
        let selection:Set(dataaccess::expressions::Expression)=self.oclAsType(behavioral::actions::Iterator).selection.object-&gt;asSet() in
        let groupby:Set(dataaccess::expressions::Expression)=self.oclAsType(behavioral::actions::Iterator).factOfGroupBy.object-&gt;asSet() in
        let iterateexp:Set(dataaccess::expressions::Expression)=self.oclAsType(behavioral::actions::Iterator)."iterate".source-&gt;asSet() in
        let iteratesource:Set(dataaccess::expressions::Expression)=selection-&gt;union(groupby)-&gt;union(iterateexp) in
        if iteratesource-&gt;notEmpty() then
          if iteratesource-&gt;any(true).getType().oclIsKindOf(data::classes::NestedTypeDefinition) then
            -- if the Selection's/GroupBy's object has a nested type definition, un-nest by one level
            iteratesource-&gt;any(true).getType().oclAsType(data::classes::NestedTypeDefinition).type
          else
            -- In this case the tool should create a cloned tpye definition with multiplicities set to 1;
            -- Just in case the tool doesn't do this and for the case where the object has upper
            -- multiplicity 1, use the object's type as the default for the "self" iterator
            iteratesource-&gt;any(true).getType()
          endif
        else
          if self.oclAsType(behavioral::actions::Iterator).groupedFactsOfGroupBy-&gt;notEmpty() then
            -- the groups of a group-by expression can re-used the facts type
            self.oclAsType(behavioral::actions::Iterator).factOfGroupBy.object.getType()
          else
            if self.oclAsType(behavioral::actions::Iterator).dimension-&gt;notEmpty() then
              -- the DimensionDefinition's expression defines the dimension iterator's type
              self.oclAsType(behavioral::actions::Iterator).dimension.expression.getType()
            else
              -- Then we have no idea how to infer the Iterator's type
              null
            endif
          endif
        endif
      endif
    else if self.oclIsKindOf(dataaccess::expressions::collectionExpressions::Including) or self.oclIsKindOf(dataaccess::expressions::collectionExpressions::Excluding) then
      self.oclAsType(dataaccess::expressions::collectionExpressions::CollectionExpression).source.getType()
    else if self.oclIsKindOf(dataaccess::expressions::collectionExpressions::Iterate) then
      self.oclAsType(dataaccess::expressions::collectionExpressions::Iterate).iteratorExpression.getType()
    else if self.oclIsKindOf(Parameter) then
      if self.oclAsType(Parameter).defaultValue-&gt;notEmpty() then
        self.oclAsType(Parameter).defaultValue.getType()
      else
        if self.oclAsType(Parameter).ownerSignature.oclIsKindOf(MethodSignature) and
        self.oclAsType(Parameter).ownerSignature.oclAsType(MethodSignature).implementation-&gt;notEmpty() and
        self.oclAsType(Parameter).ownerSignature.oclAsType(MethodSignature).implementation.oclIsKindOf(AssociationEndSignatureImplementation) then
  &#x0009;let impl:AssociationEndSignatureImplementation = self.oclAsType(Parameter).ownerSignature.oclAsType(MethodSignature).implementation.oclAsType(AssociationEndSignatureImplementation) in
            impl.end.type
        else
          if self.oclAsType(Parameter).ownerSignature.oclIsKindOf(FunctionSignature) then
            if self.oclAsType(Parameter).ownerSignature.oclAsType(FunctionSignature).dimension-&gt;notEmpty() then
              self.oclAsType(Parameter).ownerSignature.oclAsType(FunctionSignature).dimension.cellSet.factsType
            else
              if self.oclAsType(Parameter).ownerSignature.oclAsType(FunctionSignature).cellSetForValueFunction-&gt;notEmpty() then
                self.oclAsType(Parameter).ownerSignature.oclAsType(FunctionSignature).cellSetForValueFunction.factsType
              else
                if self.oclAsType(Parameter).ownerSignature.oclAsType(FunctionSignature).cellSetForAggregationFunction-&gt;notEmpty() then
                  if self.oclAsType(Parameter).ownerSignature.oclAsType(FunctionSignature).cellSetForAggregationFunction.valueFunction-&gt;notEmpty() then
                    self.oclAsType(Parameter).ownerSignature.oclAsType(FunctionSignature).cellSetForAggregationFunction.valueFunction.output
                  else
                    self.oclAsType(Parameter).ownerSignature.oclAsType(FunctionSignature).cellSetForAggregationFunction.factsType
                  endif
                else
                  if self.oclAsType(Parameter).ownerSignature.oclAsType(FunctionSignature).implementation.oclIsKindOf(dataaccess::analytics::CellSet) then
                    let pos:Integer = self.oclAsType(Parameter).ownerSignature.input-&gt;indexOf(self.oclAsType(Parameter)) in
                    if pos = 1 then
                      self.oclAsType(Parameter).ownerSignature.oclAsType(FunctionSignature).implementation.oclAsType(dataaccess::analytics::CellSet).factsType
                    else
                      self.oclAsType(Parameter).ownerSignature.oclAsType(FunctionSignature).implementation.oclAsType(dataaccess::analytics::CellSet).
                          dimensions-&gt;at(-1+pos).characteristicFunction.output
                    endif
                  else
                    null
                  endif
                endif
              endif
            endif
          else
            null
          endif
        endif
      endif
    else if self.oclIsKindOf(dataaccess::analytics::DimensionExpression) then
      -- TODO Here, the multiplicity would have to be forced to 0..*
      self.oclAsType(dataaccess::analytics::DimensionExpression).dimensionParameter.getType()
    else if self.oclIsKindOf(dataaccess::expressions::VariableExpression) then
      self.oclAsType(dataaccess::expressions::VariableExpression).variable.getType()
    else if self.oclIsKindOf(dataaccess::expressions::SignatureCallExpression) then
      self.oclAsType(dataaccess::expressions::SignatureCallExpression).getSignature().output
    else if self.oclIsKindOf(dataaccess::expressions::AssociationEndNavigationExpression) then
      self.oclAsType(dataaccess::expressions::AssociationEndNavigationExpression).toEnd.type
    else if self.oclIsKindOf(dataaccess::expressions::Replace) then
      self.oclAsType(dataaccess::expressions::Replace).object.getType()
    else if self.oclIsKindOf(dataaccess::expressions::Ternary) then
      -- Find the "least" TypeDefinition to which both, trueExpr.getType() and falseExpr.getType() conform.
      -- We determine the more general of the two types; we cannot synthesize a new TypeDefinition in OCL.
      -- Doing so would have to be done by explicit typing, setting the ownedTypeDefinition explicitly
      if self.oclAsType(dataaccess::expressions::Ternary).trueExpr.getType().conformsTo(self.oclAsType(dataaccess::expressions::Ternary).falseExpr.getType()) then
        self.oclAsType(dataaccess::expressions::Ternary).falseExpr.getType()
      else
        self.oclAsType(dataaccess::expressions::Ternary).trueExpr.getType()
      endif
    else if self.oclIsKindOf(dataaccess::query::Selection) then
      self.oclAsType(dataaccess::query::Selection).object.getType()
    else
      null
    endif
    endif
    endif
    endif
    endif
    endif
    endif
    endif
    endif
    endif
    endif
    endif
    endif
  endif</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a4905EBCF00CB'/>  <!-- data.classes.TypedElement.getType -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.Context    [Class] ==================== -->
        <Model:Class xmi.id = 'a46FB5A85031C' 
          name = 'Context' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:ModelElement.annotation>An instance of a class can occur in a number of contexts. Each context has a characteristic condition that an object has to fulfill in order to "be in that context."

A context can specify constraints, additional events that the object may raise, or preconditions for operations of the object's class.

(Currently, the metamodel only describes context-based constraints; events and preconditions may have to be added later.)</Model:ModelElement.annotation>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a46FB62310290'/>  <!-- data.classes.Context.ConditionMustBeBoolean -->
            <Model:Constraint xmi.idref = 'a4750233C0128'/>  <!-- data.classes.Context.ConstraintForRightClass -->
          </Model:ModelElement.constraints>
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xml:link = 'simple' href = 'modelmanagement.xml|a45013C240030'/>
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== data.classes.Context.for_    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra46FB5B2A01A5' 
              name = 'for_' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a46FB5B2A01A5'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.Context.constraints    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra46FB601102EE' 
              name = 'constraints' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a450E61B602EE'/>  <!-- data.constraints.Constraint -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a46FB601102EE'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.Context.condition    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra46FB620402BF' 
              name = 'condition' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'dataaccess.xml|a450E63AB03A2'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a46FB620402BF'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.Context.ConditionMustBeBoolean    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a46FB62310290' 
              name = 'ConditionMustBeBoolean' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context Context
inv:
  self.condition.getType().upperMultiplicity = 1 and
  self.condition.getType().oclIsKindOf(ClassTypeDefinition) and
  self.condition.getType().oclAsType(ClassTypeDefinition).clazz.name = 'Boolean'</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a46FB5A85031C'/>  <!-- data.classes.Context -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <!-- ==================== data.classes.Context.ConstraintForRightClass    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a4750233C0128' 
              name = 'ConstraintForRightClass' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context Context
inv:
  self.constraints-&gt;forAll(c | c.constrainedType = self.for_)</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a46FB5A85031C'/>  <!-- data.classes.Context -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== data.classes.org.omg.sap2mof.violationMessageExpression='Condition must be boolean'    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.671' 
          name = 'org.omg.sap2mof.violationMessageExpression=&apos;Condition must be boolean&apos;' annotation = '' 
          tagId = 'org.omg.sap2mof.violationMessageExpression' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>'Condition must be boolean'</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a46FB62310290'/>  <!-- data.classes.Context.ConditionMustBeBoolean -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.Multiplicity    [Class] ==================== -->
        <Model:Class xmi.id = 'a47554DA003A9' 
          name = 'Multiplicity' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:Namespace.contents>
            <!-- ==================== data.classes.Multiplicity.lowerMultiplicity    [Attribute] ==================== -->
            <Model:Attribute xmi.id = 'a4507C31E02D6' 
              name = 'lowerMultiplicity' annotation = 'The lower bounds of this multiplicity.' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' 
              isDerived = 'false' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a3B538AB300B3'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <!-- ==================== data.classes.Multiplicity.upperMultiplicity    [Attribute] ==================== -->
            <Model:Attribute xmi.id = 'a4507C32D010B' 
              name = 'upperMultiplicity' annotation = 'The upper bounds of this multiplicity. Unlimited is encoded as -1.' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' 
              isDerived = 'false' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a3B538AB300B3'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <!-- ==================== data.classes.Multiplicity.ordered    [Attribute] ==================== -->
            <Model:Attribute xmi.id = 'a4574A6340159' 
              name = 'ordered' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' 
              isDerived = 'false' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <!-- ==================== data.classes.Multiplicity.unique    [Attribute] ==================== -->
            <Model:Attribute xmi.id = 'a47554DC003A9' 
              name = 'unique' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' 
              isDerived = 'false' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <!-- ==================== data.classes.Multiplicity.isMany    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a48A9EC770251' 
              name = 'isMany' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'false' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.54' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context Multiplicity::isMany():Boolean...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.672' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context Multiplicity::isMany():Boolean...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Multiplicity::isMany():Boolean
body:
  self.upperMultiplicity &gt; 1 or self.upperMultiplicity = -1</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a48A9EC770251'/>  <!-- data.classes.Multiplicity.isMany -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.SignatureImplementation    [Class] ==================== -->
        <Model:Class xmi.id = 'a47836ECF037A' 
          name = 'SignatureImplementation' annotation = 'A signature can be implemented by a block (this would be a "method" in the classical sense) or, e.g., by an association navigation or by a link set manipulation statement.' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:Namespace.contents>
            <!-- ==================== data.classes.SignatureImplementation.implements_    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra47D67F7201BC' 
              name = 'implements_' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a47D67D15030D'/>  <!-- data.classes.MethodSignature -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a47D67F7201BC'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.SignatureImplementation.getImplementedSignature    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a489D53A40232' 
              name = 'getImplementedSignature' annotation = 'A block implements either a FunctionSignature or a MethodSignature. Two different associations connect the Block with the respective Signature subclasses. This operation is a convenience that chooses the one or the other, depending on which one is filled.' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.55' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4432198602CB'/>  <!-- data.classes.Signature -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context SignatureImplementation::getImplementedSignature():Signature...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.673' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context SignatureImplementation::getImplementedSignature():Signature...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context SignatureImplementation::getImplementedSignature():Signature
body:
  if self.oclIsKindOf(FunctionSignatureImplementation) then
    if self.oclAsType(FunctionSignatureImplementation).functionSignature-&gt;notEmpty() then
      self.oclAsType(FunctionSignatureImplementation).functionSignature
    else
      self.implements_
    endif
  else
    self.implements_
  endif</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a489D53A40232'/>  <!-- data.classes.SignatureImplementation.getImplementedSignature -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.LinkTraversal    [Class] ==================== -->
        <Model:Class xmi.id = 'a47837252006D' 
          name = 'LinkTraversal' annotation = 'Navigates an association starting on the source object on which the implementation is invoked and navigating to the *end* specified.' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a4784FC2201C5'/>  <!-- data.classes.LinkTraversal.OutputTypeMatchEndType -->
            <Model:Constraint xmi.idref = 'a48A152F80290'/>  <!-- data.classes.LinkTraversal.MustBeNavigable -->
          </Model:ModelElement.constraints>
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xmi.idref = 'a478372D00242'/>  <!-- data.classes.AssociationEndSignatureImplementation -->
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== data.classes.LinkTraversal.OutputTypeMatchEndType    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a4784FC2201C5' 
              name = 'OutputTypeMatchEndType' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context LinkTraversal
inv:
  self.implements_.input-&gt;isEmpty() and
  self.implements_.output.oclIsKindOf(ClassTypeDefinition) and 
  self.implements_.output.oclAsType(ClassTypeDefinition).clazz = self.end.type.clazz</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a47837252006D'/>  <!-- data.classes.LinkTraversal -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <!-- ==================== data.classes.LinkTraversal.MustBeNavigable    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a48A152F80290' 
              name = 'MustBeNavigable' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context LinkTraversal
inv:
  self.end.navigable</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a47837252006D'/>  <!-- data.classes.LinkTraversal -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== data.classes.org.omg.sap2mof.violationMessageExpression='Signature has input or output does not match association end type'    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.674' 
          name = 'org.omg.sap2mof.violationMessageExpression=&apos;Signature has input or output does not match association end type&apos;' annotation = '' 
          tagId = 'org.omg.sap2mof.violationMessageExpression' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>'Signature has input or output does not match association end type'</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a4784FC2201C5'/>  <!-- data.classes.LinkTraversal.OutputTypeMatchEndType -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.LinkAddition    [Class] ==================== -->
        <Model:Class xmi.id = 'a47837252033C' 
          name = 'LinkAddition' annotation = 'Adds a link to the association of which *end* is one end, such that the object on which the implementation is invoked is on the other end, and the parameters passed to this implementation are in the role denoted by *end*.' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a4784FC9E0109'/>  <!-- data.classes.LinkAddition.AdditionInputTypeMatchEndType -->
          </Model:ModelElement.constraints>
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xmi.idref = 'a4A6D631E01A5'/>  <!-- data.classes.LinkManipulationAtPosition -->
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== data.classes.LinkAddition.AdditionInputTypeMatchEndType    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a4784FC9E0109' 
              name = 'AdditionInputTypeMatchEndType' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context LinkAddition
inv:
  self.implements_.output-&gt;isEmpty() and
  self.implements_.input-&gt;size() = 1 and 
  self.implements_.input-&gt;at(1).getType().oclIsKindOf(ClassTypeDefinition) and 
  self.implements_.input-&gt;at(1).getType().oclAsType(ClassTypeDefinition).clazz = self.end.type.clazz</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a47837252033C'/>  <!-- data.classes.LinkAddition -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== data.classes.org.omg.sap2mof.violationMessageExpression='Signature has output or input does not match association end type'    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.675' 
          name = 'org.omg.sap2mof.violationMessageExpression=&apos;Signature has output or input does not match association end type&apos;' annotation = '' 
          tagId = 'org.omg.sap2mof.violationMessageExpression' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>'Signature has output or input does not match association end type'</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a4784FC9E0109'/>  <!-- data.classes.LinkAddition.AdditionInputTypeMatchEndType -->
            <Model:ModelElement xmi.idref = 'a4784FCA20167'/>  <!-- data.classes.LinkRemoval.RemovalTypeMatchEndType -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.LinkRemoval    [Class] ==================== -->
        <Model:Class xmi.id = 'a47837254000F' 
          name = 'LinkRemoval' annotation = 'Removes all links from the object on which the implementation is invoked to those objects passed as parameters where the parameter objects are in the role denoted by *end*.' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a4784FCA20167'/>  <!-- data.classes.LinkRemoval.RemovalTypeMatchEndType -->
          </Model:ModelElement.constraints>
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xmi.idref = 'a4A6D631E01A5'/>  <!-- data.classes.LinkManipulationAtPosition -->
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== data.classes.LinkRemoval.RemovalTypeMatchEndType    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a4784FCA20167' 
              name = 'RemovalTypeMatchEndType' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context LinkRemoval
inv:
  self.implements_.output-&gt;isEmpty() and
  self.implements_.input-&gt;size() = 1 and 
  self.implements_.input-&gt;at(1).getType().oclIsKindOf(ClassTypeDefinition) and 
  self.implements_.input-&gt;at(1).getType().oclAsType(ClassTypeDefinition).clazz = self.end.type.clazz</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a47837254000F'/>  <!-- data.classes.LinkRemoval -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== data.classes.AssociationEndSignatureImplementation    [Class] ==================== -->
        <Model:Class xmi.id = 'a478372D00242' 
          name = 'AssociationEndSignatureImplementation' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a47D65BD10261'/>  <!-- data.classes.AssociationEndSignatureImplementation.OnlyOnOtherEndsClassOrClassConformingToItOrAdapterAdaptingToIt -->
          </Model:ModelElement.constraints>
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xmi.idref = 'a47836ECF037A'/>  <!-- data.classes.SignatureImplementation -->
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== data.classes.AssociationEndSignatureImplementation.end    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra4783730C01A5' 
              name = 'end' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44EC55FB03B8'/>  <!-- data.classes.AssociationEnd -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a4783730C01A5'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.AssociationEndSignatureImplementation.OnlyOnOtherEndsClassOrClassConformingToItOrAdapterAdaptingToIt    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a47D65BD10261' 
              name = 'OnlyOnOtherEndsClassOrClassConformingToItOrAdapterAdaptingToIt' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context AssociationEndSignatureImplementation
inv:
  (self.implements_.owner.oclIsKindOf(SapClass) and
    self.implements_.owner.oclAsType(SapClass).conformsTo(self.end.otherEnd().type.clazz))
  or   (self.implements_.owner.oclIsKindOf(TypeAdapter) and
    self.implements_.owner.oclAsType(TypeAdapter).adapted.conformsTo(self.end.otherEnd().type.clazz))
</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a478372D00242'/>  <!-- data.classes.AssociationEndSignatureImplementation -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== data.classes.org.omg.sap2mof.violationMessageExpression='Implementation must be owned in other end class'    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.676' 
          name = 'org.omg.sap2mof.violationMessageExpression=&apos;Implementation must be owned in other end class&apos;' annotation = '' 
          tagId = 'org.omg.sap2mof.violationMessageExpression' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>'Implementation must be owned in other end class'</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a47D65BD10261'/>  <!-- data.classes.AssociationEndSignatureImplementation.OnlyOnOtherEndsClassOrClassConformingToItOrAdapterAdaptingToIt -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.ClassTypeDefinition    [Class] ==================== -->
        <Model:Class xmi.id = 'a4784F7E800AB' 
          name = 'ClassTypeDefinition' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a49B15774036B'/>  <!-- data.classes.ClassTypeDefinition.ActualObjectsParametersMatchSignature -->
          </Model:ModelElement.constraints>
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xmi.idref = 'a47B9A97A00CB'/>  <!-- data.classes.TypeDefinition -->
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== data.classes.ClassTypeDefinition.clazz    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra4784F7F5005F' 
              name = 'clazz' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a4784F7F5005F'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.ClassTypeDefinition.associationEnd    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra47B9ABAF02BF' 
              name = 'associationEnd' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44EC55FB03B8'/>  <!-- data.classes.AssociationEnd -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a47B9ABAF02BF'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.ClassTypeDefinition.objectParameters    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra49B1561E0157' 
              name = 'objectParameters' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'true' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a49B1547F0167'/>  <!-- data.classes.ActualObjectParameter -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a49B1561E0157'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.ClassTypeDefinition.ownedObjectParameters    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra4AD595C100DA' 
              name = 'ownedObjectParameters' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'true' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a49B1547F0167'/>  <!-- data.classes.ActualObjectParameter -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a4AD595C100DA'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.ClassTypeDefinition.objectParametersConformTo    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a49C0C5AE02EE' 
              name = 'objectParametersConformTo' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.56' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
                  </Model:TypedElement.type>
                </Model:Parameter>
                <Model:Parameter xmi.id = 'XX.57' 
                  name = 'ctd' annotation = '' 
                  direction = 'in_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4784F7E800AB'/>  <!-- data.classes.ClassTypeDefinition -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== data.classes.ClassTypeDefinition.effectiveObjectParameters    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a49D37F7B030D' 
              name = 'effectiveObjectParameters' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.58' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'true' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xml:link = 'simple' href = 'dataaccess.xml|a450E63AB03A2'/>
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== data.classes.ClassTypeDefinition.ActualObjectsParametersMatchSignature    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a49B15774036B' 
              name = 'ActualObjectsParametersMatchSignature' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context ClassTypeDefinition
inv:
  let numberOfMandatoryParameters:Integer =
    self.clazz.formalObjectParameters-&gt;select(p|p.defaultValue-&gt;isEmpty())-&gt;size()
  in
  self.objectParameters-&gt;size() &gt;= numberOfMandatoryParameters and
  self.objectParameters-&gt;size() &lt;= self.clazz.formalObjectParameters-&gt;size() and
  Sequence{1..self.objectParameters-&gt;size()}-&gt;forAll(i:Integer|
    self.objectParameters-&gt;at(i).formalObjectParameter =
    self.clazz.formalObjectParameters-&gt;at(i))</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a4784F7E800AB'/>  <!-- data.classes.ClassTypeDefinition -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context ClassTypeDefinition::objectParametersConformTo(ctd:ClassTypeDefinition):Boolean...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.677' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context ClassTypeDefinition::objectParametersConformTo(ctd:ClassTypeDefinition):Boolean...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context ClassTypeDefinition::objectParametersConformTo(ctd:ClassTypeDefinition):Boolean
body:
  if self.effectiveObjectParameters()-&gt;size()  = ctd.effectiveObjectParameters()-&gt;size() then
    self.clazz.converterBetweenParametrizations-&gt;notEmpty() or
    Sequence{1..self.effectiveObjectParameters()-&gt;size()}-&gt;forAll(i |
      self.effectiveObjectParameters()-&gt;at(i).evaluatesToEqualAs(ctd.effectiveObjectParameters()-&gt;at(i)))
  else
    false
  endif</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a49C0C5AE02EE'/>  <!-- data.classes.ClassTypeDefinition.objectParametersConformTo -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context ClassTypeDefinition::effectiveObjectParameters():Sequence(Expression)...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.678' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context ClassTypeDefinition::effectiveObjectParameters():Sequence(Expression)...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context ClassTypeDefinition::effectiveObjectParameters():Sequence(Expression)
body:
  self.objectParameters.value-&gt;flatten()-&gt;asSequence()-&gt;union(
     Sequence{(self.objectParameters-&gt;size()+1)..(self.clazz.formalObjectParameters-&gt;size())}-&gt;collect(i | 
             self.clazz.formalObjectParameters-&gt;at(i).defaultValue-&gt;flatten()-&gt;asSequence()))-&gt;flatten()-&gt;asSequence()</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a49D37F7B030D'/>  <!-- data.classes.ClassTypeDefinition.effectiveObjectParameters -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.TypeDefinition    [Class] ==================== -->
        <Model:Class xmi.id = 'a47B9A97A00CB' 
          name = 'TypeDefinition' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xmi.idref = 'a47554DA003A9'/>  <!-- data.classes.Multiplicity -->
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== data.classes.TypeDefinition.signaturesWithOutput    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra47B9EDFD0002' 
              name = 'signaturesWithOutput' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4432198602CB'/>  <!-- data.classes.Signature -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a47B9EDFD0002'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.TypeDefinition.ownerTypedElement    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra47CBF418010B' 
              name = 'ownerTypedElement' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4717B7BC031A'/>  <!-- data.classes.TypedElement -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a47CBF418010B'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.TypeDefinition.ownerSignature    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra47CBF46E03DA' 
              name = 'ownerSignature' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4432198602CB'/>  <!-- data.classes.Signature -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a47CBF46E03DA'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.TypeDefinition.conformsTo    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a478630C203C8' 
              name = 'conformsTo' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.59' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
                  </Model:TypedElement.type>
                </Model:Parameter>
                <Model:Parameter xmi.id = 'XX.60' 
                  name = 'typeDef' annotation = '' 
                  direction = 'in_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a47B9A97A00CB'/>  <!-- data.classes.TypeDefinition -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== data.classes.TypeDefinition.conformsToExcluding    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a478672C20310' 
              name = 'conformsToExcluding' annotation = 'Same as conformsTo(Featured):Boolean but with the possibility to pass pairs of Featured elements that are to be considered conforming and thus don&apos;t need further exploration. This can be used to avoid endless recursions in conformance testing.' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.61' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
                  </Model:TypedElement.type>
                </Model:Parameter>
                <Model:Parameter xmi.id = 'XX.62' 
                  name = 'td' annotation = '' 
                  direction = 'in_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a47B9A97A00CB'/>  <!-- data.classes.TypeDefinition -->
                  </Model:TypedElement.type>
                </Model:Parameter>
                <Model:Parameter xmi.id = 'XX.63' 
                  name = 'excludingConforming' annotation = '' 
                  direction = 'in_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'true' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
                  </Model:TypedElement.type>
                </Model:Parameter>
                <Model:Parameter xmi.id = 'XX.64' 
                  name = 'excludingTo' annotation = '' 
                  direction = 'in_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'true' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== data.classes.TypeDefinition.multiplicityConformsTo    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a48EA7C2E0372' 
              name = 'multiplicityConformsTo' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:ModelElement.annotation>Checks if this type definition's multiplicity conforms to td's multiplicity definitions. This is the case if all instances that conform to this type definition will also conform to td.

Multiplicity conforms if td includes self's multiplicity, thus td's lower multiplicity is equal or smaller, and td's upper multiplicity is equal or larger than self's.

Ordereness and uniquness conform if td has more relaxed requirements. Thus, they conform if they are equal, if td is neither ordered nor unique, or if self is ordered and unique</Model:ModelElement.annotation>
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.65' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
                  </Model:TypedElement.type>
                </Model:Parameter>
                <Model:Parameter xmi.id = 'XX.66' 
                  name = 'td' annotation = '' 
                  direction = 'in_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a47B9A97A00CB'/>  <!-- data.classes.TypeDefinition -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== data.classes.TypeDefinition.conformsToIgnoringMultiplicityExcluding    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a48EA7D5903DF' 
              name = 'conformsToIgnoringMultiplicityExcluding' annotation = 'Same as conformsTo(Featured):Boolean but with the possibility to pass pairs of Featured elements that are to be considered conforming and thus don&apos;t need further exploration. This can be used to avoid endless recursions in conformance testing.' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.67' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
                  </Model:TypedElement.type>
                </Model:Parameter>
                <Model:Parameter xmi.id = 'XX.68' 
                  name = 'td' annotation = '' 
                  direction = 'in_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a47B9A97A00CB'/>  <!-- data.classes.TypeDefinition -->
                  </Model:TypedElement.type>
                </Model:Parameter>
                <Model:Parameter xmi.id = 'XX.69' 
                  name = 'excludingConforming' annotation = '' 
                  direction = 'in_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'true' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
                  </Model:TypedElement.type>
                </Model:Parameter>
                <Model:Parameter xmi.id = 'XX.70' 
                  name = 'excludingTo' annotation = '' 
                  direction = 'in_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'true' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== data.classes.TypeDefinition.conformsToIgnoringMultiplicity    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a48EA7E0A0304' 
              name = 'conformsToIgnoringMultiplicity' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.71' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
                  </Model:TypedElement.type>
                </Model:Parameter>
                <Model:Parameter xmi.id = 'XX.72' 
                  name = 'typeDef' annotation = '' 
                  direction = 'in_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a47B9A97A00CB'/>  <!-- data.classes.TypeDefinition -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== data.classes.TypeDefinition.getTypeUsage    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a49062365016E' 
              name = 'getTypeUsage' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.73' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4717B7BC031A'/>  <!-- data.classes.TypedElement -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== data.classes.TypeDefinition.getInnermost    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a4AD9743F0213' 
              name = 'getInnermost' annotation = 'For nexted type definitions, navigates through to the inner type definition. For non-nested type definitions, that type definition is the result of this method.' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.74' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a47B9A97A00CB'/>  <!-- data.classes.TypeDefinition -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== data.classes.TypeDefinition.getNestingLevel    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a4ADF29CE02AF' 
              name = 'getNestingLevel' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.75' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a3B538AB300B3'/>
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== data.classes.TypeDefinition.getNamedValuesInScope    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a4B84096A02BF' 
              name = 'getNamedValuesInScope' annotation = 'Needs to find the owner of the type definition, then check if it&apos;s a statement such as a variable declaration, or a method signature (meaning the owner may contribute formal object parameters) or a function signature (meaning the function expression knows the NamedValues in scope), etc.' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.76' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4522A56F0149'/>  <!-- data.classes.NamedValue -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context TypeDefinition::conformsTo(typeDef:TypeDefinition):Boolean...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.679' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context TypeDefinition::conformsTo(typeDef:TypeDefinition):Boolean...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context TypeDefinition::conformsTo(typeDef:TypeDefinition):Boolean
body:
  if self.oclIsUndefined() then
    false
  else if self = typeDef then
    true
  else
    self.conformsToExcluding(typeDef, Sequence{}, Sequence{})
  endif
  endif</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a478630C203C8'/>  <!-- data.classes.TypeDefinition.conformsTo -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context TypeDefinition::conformsToExcluding(td:TypeDefinition, excludingConforming:Sequence(SapClass), excludingTo:Sequence(SapClass)):Boolean...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.680' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context TypeDefinition::conformsToExcluding(td:TypeDefinition, excludingConforming:Sequence(SapClass), excludingTo:Sequence(SapClass)):Boolean...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context TypeDefinition::conformsToExcluding(td:TypeDefinition, excludingConforming:Sequence(SapClass), excludingTo:Sequence(SapClass)):Boolean
body:
  if oclIsUndefined() then
    false
  else
  if self = td then
    true
  else
   self.multiplicityConformsTo(td) and
   self.conformsToIgnoringMultiplicityExcluding(td, excludingConforming, excludingTo)
  endif
 endif</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a478672C20310'/>  <!-- data.classes.TypeDefinition.conformsToExcluding -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context TypeDefinition::multiplicityConformsTo(td:TypeDefinition):Boolean...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.681' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context TypeDefinition::multiplicityConformsTo(td:TypeDefinition):Boolean...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context TypeDefinition::multiplicityConformsTo(td:TypeDefinition):Boolean
body:
    -- check for multiplicity conformance
    -- multiplicity of td must include multiplicity of td
    td.lowerMultiplicity &lt;= self.lowerMultiplicity
    and
    (
        td.upperMultiplicity = -1
        or 
        ( td.upperMultiplicity &gt;= self.upperMultiplicity and self.upperMultiplicity &lt;&gt; -1 ) 
    ) 
    
    -- check for conformance of orderedness and uniqueness
    -- orderedness/uniqueness of td must be same or more relaxed than self's
    and
    (
       not self.isMany()
        or
        ( ( self.ordered = td.ordered ) and ( self.unique = td.unique ) )
        or
        ( self.ordered and self.unique )
        or
        ( not ( td.ordered or td.unique ) )
    )</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a48EA7C2E0372'/>  <!-- data.classes.TypeDefinition.multiplicityConformsTo -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context TypeDefinition::conformsToIgnoringMultiplicityExcluding(td:TypeDefinition, excludingConforming:Sequence(SapClass), excludingTo:Sequence(SapClass)):Boolean...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.682' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context TypeDefinition::conformsToIgnoringMultiplicityExcluding(td:TypeDefinition, excludingConforming:Sequence(SapClass), excludingTo:Sequence(SapClass)):Boolean...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context TypeDefinition::conformsToIgnoringMultiplicityExcluding(td:TypeDefinition, excludingConforming:Sequence(SapClass), excludingTo:Sequence(SapClass)):Boolean
body:
  if self = td then
    true
  else
   if self.oclIsKindOf(ClassTypeDefinition) then
    td.oclIsKindOf(ClassTypeDefinition) and
    self.oclAsType(ClassTypeDefinition).clazz.conformsToExcluding(
                td.oclAsType(ClassTypeDefinition).clazz, excludingConforming, excludingTo) and
    self.oclAsType(ClassTypeDefinition).objectParametersConformTo(td.oclAsType(ClassTypeDefinition))
  else
    if self.oclIsKindOf(FunctionSignatureTypeDefinition) then
      td.oclIsKindOf(FunctionSignatureTypeDefinition) and
      self.oclAsType(FunctionSignatureTypeDefinition).signature.conformsToExcluding(
           td.oclAsType(FunctionSignatureTypeDefinition).signature, excludingConforming, excludingTo)
    else
      td.oclIsKindOf(NestedTypeDefinition) and
      self.oclAsType(NestedTypeDefinition).type.conformsToExcluding(
          td.oclAsType(NestedTypeDefinition).type, excludingConforming, excludingTo)
    endif
  endif
 endif</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a48EA7D5903DF'/>  <!-- data.classes.TypeDefinition.conformsToIgnoringMultiplicityExcluding -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context TypeDefinition::conformsToIgnoringMultiplicity(typeDef:TypeDefinition):Boolean...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.683' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context TypeDefinition::conformsToIgnoringMultiplicity(typeDef:TypeDefinition):Boolean...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context TypeDefinition::conformsToIgnoringMultiplicity(typeDef:TypeDefinition):Boolean
body:
  if self = typeDef then
   true
  else
    self.conformsToIgnoringMultiplicityExcluding(typeDef, Sequence{}, Sequence{})
  endif</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a48EA7E0A0304'/>  <!-- data.classes.TypeDefinition.conformsToIgnoringMultiplicity -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context TypeDefinition::getTypeUsage():Set(TypedElement)...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.684' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context TypeDefinition::getTypeUsage():Set(TypedElement)...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context TypeDefinition::getTypeUsage():Set(TypedElement)
body:
  TypedElement.allInstances()-&gt;select(te | te.getType() = self)</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a49062365016E'/>  <!-- data.classes.TypeDefinition.getTypeUsage -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context TypeDefinition::getInnermost():TypeDefinition...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.685' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context TypeDefinition::getInnermost():TypeDefinition...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context TypeDefinition::getInnermost():TypeDefinition
body:
  if self.oclIsKindOf(NestedTypeDefinition) then
    self.oclAsType(NestedTypeDefinition).type.getInnermost()
  else
    self
  endif</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a4AD9743F0213'/>  <!-- data.classes.TypeDefinition.getInnermost -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context TypeDefinition::getNestingLevel():Integer...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.686' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context TypeDefinition::getNestingLevel():Integer...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context TypeDefinition::getNestingLevel():Integer
body:
  if self.oclIsKindOf(NestedTypeDefinition) then
    self.oclAsType(NestedTypeDefinition).type.getNestingLevel() + 1
  else
    0
  endif</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a4ADF29CE02AF'/>  <!-- data.classes.TypeDefinition.getNestingLevel -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context TypeDefinition::getNamedValuesInScope():Set(NamedValue)...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.687' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context TypeDefinition::getNamedValuesInScope():Set(NamedValue)...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context TypeDefinition::getNamedValuesInScope():Set(NamedValue)
body:
  -- find owner of type definition and collect the named values in scope for the owner
  (let ownerSig:Signature = self.ownerSignature in
  if ownerSig-&gt;notEmpty() and ownerSig.oclIsKindOf(Signature) then
    ownerSig.oclAsType(Signature).getNamedValuesInScope()
  else
    Set{}   -- some boundary case such as TupleElement or ValueSet not currently supported
  endif)-&gt;union(

  if self.ownerTypedElement-&gt;notEmpty() then
    if self.ownerTypedElement.oclIsKindOf(dataaccess::expressions::Expression) then
      self.ownerTypedElement.oclAsType(dataaccess::expressions::Expression).getNamedValuesInScope()
    else
      if self.ownerTypedElement.oclIsKindOf(NamedValue) then
        self.ownerTypedElement.oclAsType(NamedValue).getNamedValuesInScope()
      else
        Set{}   -- some boundary case such as TupleElement or ValueSet not currently supported
      endif
    endif
  else
    Set{}
  endif)-&gt;union(
  if self.oclIsKindOf(data::classes::ClassTypeDefinition) then
    self.oclAsType(data::classes::ClassTypeDefinition).associationEnd-&gt;collect(otherEnd().type.clazz.formalObjectParameters-&gt;asSet())-&gt;asSet()
  else
    Set{}
  endif)</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a4B84096A02BF'/>  <!-- data.classes.TypeDefinition.getNamedValuesInScope -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.NestedTypeDefinition    [Class] ==================== -->
        <Model:Class xmi.id = 'a47B9A98D0138' 
          name = 'NestedTypeDefinition' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a4AD9FA7500DA'/>  <!-- data.classes.NestedTypeDefinition.NestedIsAlwaysMany -->
          </Model:ModelElement.constraints>
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xmi.idref = 'a47B9A97A00CB'/>  <!-- data.classes.TypeDefinition -->
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== data.classes.NestedTypeDefinition.type    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra47B9A99700DA' 
              name = 'type' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a47B9A97A00CB'/>  <!-- data.classes.TypeDefinition -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a47B9A99700DA'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.NestedTypeDefinition.ownedTypeDefinition    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra47CD54E60251' 
              name = 'ownedTypeDefinition' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a47B9A97A00CB'/>  <!-- data.classes.TypeDefinition -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a47CD54E60251'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.NestedTypeDefinition.op    [Attribute] ==================== -->
            <Model:Attribute xmi.id = 'a49CA318F03B9' 
              name = 'op' annotation = 'Only for syntax mapping issues, hopefully disappearing again in the future. It holds the operator that syntactically introduced this nested type definition, such as "[" or "*".' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' 
              isDerived = 'false' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60394'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <!-- ==================== data.classes.NestedTypeDefinition.NestedIsAlwaysMany    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a4AD9FA7500DA' 
              name = 'NestedIsAlwaysMany' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context NestedTypeDefinition
inv:
  self.isMany()</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a47B9A98D0138'/>  <!-- data.classes.NestedTypeDefinition -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== data.classes.FunctionSignatureTypeDefinition    [Class] ==================== -->
        <Model:Class xmi.id = 'a47B9A9AD03B9' 
          name = 'FunctionSignatureTypeDefinition' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xmi.idref = 'a47B9A97A00CB'/>  <!-- data.classes.TypeDefinition -->
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== data.classes.FunctionSignatureTypeDefinition.signature    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra48A02BD6002E' 
              name = 'signature' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4432198602CB'/>  <!-- data.classes.Signature -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a48A02BD6002E'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.FunctionSignatureTypeDefinition.ownedSignature    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra4935A90F037B' 
              name = 'ownedSignature' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4432198602CB'/>  <!-- data.classes.Signature -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a4935A90F037B'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== data.classes.MethodSignature    [Class] ==================== -->
        <Model:Class xmi.id = 'a47D67D15030D' 
          name = 'MethodSignature' annotation = 'a signature of a method defined in a class' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xmi.idref = 'a4432198602CB'/>  <!-- data.classes.Signature -->
            <Model:GeneralizableElement xml:link = 'simple' href = 'modelmanagement.xml|a45013C240030'/>
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== data.classes.MethodSignature.implementation    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra47D67F7201BD' 
              name = 'implementation' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a47836ECF037A'/>  <!-- data.classes.SignatureImplementation -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a47D67F7201BD'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.MethodSignature.owner    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra48A04147011A' 
              name = 'owner' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a48A0412B002E'/>  <!-- data.classes.SignatureOwner -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a48A04147011A'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.MethodSignature.converter    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra49B15BB60196' 
              name = 'converter' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a49B15A3F03D8'/>  <!-- data.classes.ConverterBetweenParametrizations -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a49B15BB60196'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.MethodSignature.isAbstract    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a45759A6F0348' 
              name = 'isAbstract' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.77' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context MethodSignature::isAbstract():Boolean...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.688' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context MethodSignature::isAbstract():Boolean...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context MethodSignature::isAbstract():Boolean
body:
  self.implementation-&gt;isEmpty()</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a45759A6F0348'/>  <!-- data.classes.MethodSignature.isAbstract -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.FunctionSignature    [Class] ==================== -->
        <Model:Class xmi.id = 'a47D67D190077' 
          name = 'FunctionSignature' annotation = 'signature definition for an anonymous function that has to be implemented by a block' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xmi.idref = 'a4432198602CB'/>  <!-- data.classes.Signature -->
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== data.classes.FunctionSignature.implementation    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra4975FB7F01F5' 
              name = 'implementation' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4974995A0069'/>  <!-- data.classes.FunctionSignatureImplementation -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a4975FB7F01F5'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.FunctionSignature.isAbstract    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a48EA1ACF00EA' 
              name = 'isAbstract' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.78' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== data.classes.FunctionSignature.getImplementedAnonymousFunctionExpression    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a4B84EBDF0167' 
              name = 'getImplementedAnonymousFunctionExpression' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.79' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xml:link = 'simple' href = 'dataaccess.xml|a47A0757E02EC'/>
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context FunctionSignature::isAbstract():Boolean...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.689' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context FunctionSignature::isAbstract():Boolean...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context FunctionSignature::isAbstract():Boolean
body:
  self.implementation-&gt;isEmpty()</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a48EA1ACF00EA'/>  <!-- data.classes.FunctionSignature.isAbstract -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context FunctionSignature::getImplementedAnonymousFunctionExpression():AnonymousFunctionExpr...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.690' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context FunctionSignature::getImplementedAnonymousFunctionExpression():AnonymousFunctionExpr...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context FunctionSignature::getImplementedAnonymousFunctionExpression():AnonymousFunctionExpr
body:
  let candidates:Sequence(dataaccess::expressions::fp::AnonymousFunctionExpr) =
         self.typeDefinition.ownerTypedElement.oclAsType(dataaccess::expressions::fp::AnonymousFunctionExpr)-&gt;asSequence() in
  if candidates-&gt;isEmpty() then
    null
  else
    candidates-&gt;at(1)
  endif</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a4B84EBDF0167'/>  <!-- data.classes.FunctionSignature.getImplementedAnonymousFunctionExpression -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.LinkSetting    [Class] ==================== -->
        <Model:Class xmi.id = 'a47DEB88201E2' 
          name = 'LinkSetting' annotation = 'Replaces all links of the association of which the association end *end* is part and which connect to the object on which this implementation is invoked with their other end. The links are replaced by links from the object on which the implementation is invoked to the object(s) passed to this implementation as argument.' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a47DFFCFF00DB'/>  <!-- data.classes.LinkSetting.InputTypeMatchEndType -->
          </Model:ModelElement.constraints>
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xmi.idref = 'a49425BBA0251'/>  <!-- data.classes.ExtentModifyingAssociationEndSignatureImplementation -->
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== data.classes.LinkSetting.InputTypeMatchEndType    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a47DFFCFF00DB' 
              name = 'InputTypeMatchEndType' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context LinkSetting
inv:
  self.implements_.output-&gt;isEmpty() and
  self.implements_.input-&gt;size() = 1 and 
  self.implements_.input-&gt;at(1).getType().oclIsKindOf(ClassTypeDefinition) and 
  self.implements_.input-&gt;at(1).getType().oclAsType(ClassTypeDefinition).clazz = self.end.type.clazz</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a47DEB88201E2'/>  <!-- data.classes.LinkSetting -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== data.classes.org.omg.sap2mof.violationMessageExpression='Signature\'s output or input does not match association end type'    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.691' 
          name = 'org.omg.sap2mof.violationMessageExpression=&apos;Signature\&apos;s output or input does not match association end type&apos;' annotation = '' 
          tagId = 'org.omg.sap2mof.violationMessageExpression' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>'Signature\'s output or input does not match association end type'</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a47DFFCFF00DB'/>  <!-- data.classes.LinkSetting.InputTypeMatchEndType -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.TypeAdapter    [Class] ==================== -->
        <Model:Class xmi.id = 'a47F112210022' 
          name = 'TypeAdapter' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a47F536E802AE'/>  <!-- data.classes.TypeAdapter.AllSignatureConforms -->
            <Model:Constraint xmi.idref = 'a47F54150036A'/>  <!-- data.classes.TypeAdapter.SignaturesCannotBeAbstract -->
            <Model:Constraint xmi.idref = 'a487CC4420119'/>  <!-- data.classes.TypeAdapter.IsFullAdaptationToTo -->
            <Model:Constraint xmi.idref = 'a4982DADB0157'/>  <!-- data.classes.TypeAdapter.ValuesToValues_EntitiesToEntities -->
          </Model:ModelElement.constraints>
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xmi.idref = 'a48A0412B002E'/>  <!-- data.classes.SignatureOwner -->
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== data.classes.TypeAdapter.to    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra47F112BE01FC' 
              name = 'to' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a47F112BE01FC'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.TypeAdapter.adapted    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra47F112EE01B9' 
              name = 'adapted' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a47F112EE01B9'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.TypeAdapter.conformsTo    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a47F11B080137' 
              name = 'conformsTo' annotation = 'A class A conforms to a class B if for every signature that B has (either directly or by delegation, but not from any adapters), A has a conforming signature, either immediately declared in A or by delegation or through a type adapter.' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.80' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
                  </Model:TypedElement.type>
                </Model:Parameter>
                <Model:Parameter xmi.id = 'XX.81' 
                  name = 'type' annotation = '' 
                  direction = 'in_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== data.classes.TypeAdapter.conformsToExcluding    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a47F11B130043' 
              name = 'conformsToExcluding' annotation = 'Same as conformsTo(Featured):Boolean but with the possibility to pass pairs of Featured elements that are to be considered conforming and thus don&apos;t need further exploration. This can be used to avoid endless recursions in conformance testing.' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.82' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
                  </Model:TypedElement.type>
                </Model:Parameter>
                <Model:Parameter xmi.id = 'XX.83' 
                  name = 'type' annotation = '' 
                  direction = 'in_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
                  </Model:TypedElement.type>
                </Model:Parameter>
                <Model:Parameter xmi.id = 'XX.84' 
                  name = 'excludingConforming' annotation = '' 
                  direction = 'in_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'true' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
                  </Model:TypedElement.type>
                </Model:Parameter>
                <Model:Parameter xmi.id = 'XX.85' 
                  name = 'excludingTo' annotation = '' 
                  direction = 'in_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'true' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== data.classes.TypeAdapter.allSignatures    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a47F11EA202A6' 
              name = 'allSignatures' annotation = 'Computes all locally-defined signatures plus not conforming signatures offered by &apos;To&apos; Class. ' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.86' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a47D67D15030D'/>  <!-- data.classes.MethodSignature -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== data.classes.TypeAdapter.allSignaturesExcluding    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a47F123AB0091' 
              name = 'allSignaturesExcluding' annotation = 'Same as allSignatures() but with the possibility to to avoid endless recursions.' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.87' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a47D67D15030D'/>  <!-- data.classes.MethodSignature -->
                  </Model:TypedElement.type>
                </Model:Parameter>
                <Model:Parameter xmi.id = 'XX.88' 
                  name = 'excluding' annotation = '' 
                  direction = 'in_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== data.classes.TypeAdapter.AllSignatureConforms    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a47F536E802AE' 
              name = 'AllSignatureConforms' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context TypeAdapter
inv:
 self.ownedSignatures-&gt;forAll(selfSig:MethodSignature |
    self.to.signaturesWithDelegation()-&gt;exists(toSig:MethodSignature |
       selfSig.conformsTo(toSig)))</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a47F112210022'/>  <!-- data.classes.TypeAdapter -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <!-- ==================== data.classes.TypeAdapter.SignaturesCannotBeAbstract    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a47F54150036A' 
              name = 'SignaturesCannotBeAbstract' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context TypeAdapter
inv:
 self.ownedSignatures-&gt;forAll(selfSig:MethodSignature | not selfSig.isAbstract())</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a47F112210022'/>  <!-- data.classes.TypeAdapter -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <!-- ==================== data.classes.TypeAdapter.IsFullAdaptationToTo    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a487CC4420119' 
              name = 'IsFullAdaptationToTo' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context TypeAdapter
inv:
  self.to.signaturesWithDelegation()-&gt;forAll(toSig|
    self.adapted.signaturesWithDelegation()-&gt;exists(adaptedSig|
      adaptedSig.conformsTo(toSig))
    or self.ownedSignatures-&gt;exists(ownedSig|
      ownedSig.conformsTo(toSig)))</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a47F112210022'/>  <!-- data.classes.TypeAdapter -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <!-- ==================== data.classes.TypeAdapter.ValuesToValues_EntitiesToEntities    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a4982DADB0157' 
              name = 'ValuesToValues_EntitiesToEntities' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context TypeAdapter
inv:
  self.adapted.valueType = self.to.valueType</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a47F112210022'/>  <!-- data.classes.TypeAdapter -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context TypeAdapter::conformsTo(type:SapClass):Boolean...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.692' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context TypeAdapter::conformsTo(type:SapClass):Boolean...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context TypeAdapter::conformsTo(type:SapClass):Boolean
body:
  type.signaturesWithDelegation()-&gt;forAll(typeSig:MethodSignature |
    self.allSignatures()-&gt;exists(selfSig:MethodSignature |
       selfSig.conformsToExcluding(typeSig, Sequence{self.to}, Sequence{type})))</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a47F11B080137'/>  <!-- data.classes.TypeAdapter.conformsTo -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context TypeAdapter::conformsToExcluding(type:SapClass, excludingConforming:Sequence(SapClass), excludingTo:Sequence(SapClass)):Boolean...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.693' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context TypeAdapter::conformsToExcluding(type:SapClass, excludingConforming:Sequence(SapClass), excludingTo:Sequence(SapClass)):Boolean...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context TypeAdapter::conformsToExcluding(type:SapClass, excludingConforming:Sequence(SapClass), excludingTo:Sequence(SapClass)):Boolean
body:
  Sequence{1..excludingConforming-&gt;size()}-&gt;exists(i|
  excludingConforming-&gt;asSequence()-&gt;at(i) = self.to and excludingTo-&gt;asSequence()-&gt;at(i) = type) or
  type.signaturesWithDelegation()-&gt;forAll(typeSig:MethodSignature |
         self.allSignatures()-&gt;exists(selfSig:MethodSignature |
            selfSig.conformsToExcluding(typeSig,
                    excludingConforming-&gt;asSequence()-&gt;append(self.to),
                    excludingTo-&gt;asSequence()-&gt;append(type))))</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a47F11B130043'/>  <!-- data.classes.TypeAdapter.conformsToExcluding -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context TypeAdapter::allSignatures():Set(MethodSignature)...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.694' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context TypeAdapter::allSignatures():Set(MethodSignature)...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context TypeAdapter::allSignatures():Set(MethodSignature)
body:
   self.allSignaturesExcluding(Set{})
</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a47F11EA202A6'/>  <!-- data.classes.TypeAdapter.allSignatures -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context TypeAdapter::allSignaturesExcluding(excluding:Set(SapClass)):Set(MethodSignature)...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.695' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context TypeAdapter::allSignaturesExcluding(excluding:Set(SapClass)):Set(MethodSignature)...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context TypeAdapter::allSignaturesExcluding(excluding:Set(SapClass)):Set(MethodSignature)
body:
  self.to.allSignaturesExcluding(excluding)-&gt;select(s |
    not self.ownedSignatures-&gt;exists(os | os.conformsTo(s)))-&gt;union(
  self.ownedSignatures)</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a47F123AB0091'/>  <!-- data.classes.TypeAdapter.allSignaturesExcluding -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.org.omg.sap2mof.violationMessageExpression='All signatures must conform to TO class signatures'    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.696' 
          name = 'org.omg.sap2mof.violationMessageExpression=&apos;All signatures must conform to TO class signatures&apos;' annotation = '' 
          tagId = 'org.omg.sap2mof.violationMessageExpression' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>'All signatures must conform to TO class signatures'</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a47F536E802AE'/>  <!-- data.classes.TypeAdapter.AllSignatureConforms -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.org.omg.sap2mof.violationMessageExpression='Signatures can not be abstract'    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.697' 
          name = 'org.omg.sap2mof.violationMessageExpression=&apos;Signatures can not be abstract&apos;' annotation = '' 
          tagId = 'org.omg.sap2mof.violationMessageExpression' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>'Signatures can not be abstract'</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a47F54150036A'/>  <!-- data.classes.TypeAdapter.SignaturesCannotBeAbstract -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.Parameter    [Class] ==================== -->
        <Model:Class xmi.id = 'a47F12A7E0062' 
          name = 'Parameter' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a49D2B3330167'/>  <!-- data.classes.Parameter.DefaultValueType -->
          </Model:ModelElement.constraints>
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xmi.idref = 'a4522A56F0149'/>  <!-- data.classes.NamedValue -->
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== data.classes.Parameter.ownerSignature    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra47F12A8C021C' 
              name = 'ownerSignature' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4432198602CB'/>  <!-- data.classes.Signature -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a47F12A8C021C'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.Parameter.parameterOfClass    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra49B150D6035B' 
              name = 'parameterOfClass' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a49B150D6035B'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.Parameter.defaultValue    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra49D2B2E30119' 
              name = 'defaultValue' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'dataaccess.xml|a450E63AB03A2'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a49D2B2E30119'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.Parameter.DefaultValueType    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a49D2B3330167' 
              name = 'DefaultValueType' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context Parameter
inv:
  self.defaultValue-&gt;notEmpty() implies self.defaultValue.getType().conformsTo(self.getType())</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a47F12A7E0062'/>  <!-- data.classes.Parameter -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== data.classes.NamedValue    [Class] ==================== -->
        <Model:Class xmi.id = 'a4522A56F0149' 
          name = 'NamedValue' annotation = 'A value that can be used by name in the scope of a Block. Specializations are, e.g., Constant and Variable. Specializations may have different rules for initialization expressions.' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xml:link = 'simple' href = 'modelmanagement.xml|a45013C240030'/>
            <Model:GeneralizableElement xmi.idref = 'a4717B7BC031A'/>  <!-- data.classes.TypedElement -->
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== data.classes.NamedValue.getNamedValuesInScope    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a4B84F6FD002E' 
              name = 'getNamedValuesInScope' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.89' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4522A56F0149'/>  <!-- data.classes.NamedValue -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context NamedValue::getNamedValuesInScope():Set(NamedValue)...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.698' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context NamedValue::getNamedValuesInScope():Set(NamedValue)...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context NamedValue::getNamedValuesInScope():Set(NamedValue)
body:
    self.owner.getNamedValuesInScope()-&gt;union(
    if self.oclIsKindOf(Parameter) then
      self.oclAsType(Parameter).ownerSignature.getNamedValuesInScope()
    else
      if self.oclIsKindOf(behavioral::actions::Iterator) then
        self.oclAsType(behavioral::actions::Iterator).boundToFor.getNamedValuesInScope()-&gt;asSet()-&gt;union(
        self.oclAsType(behavioral::actions::Iterator)."iterate".getNamedValuesInScope()-&gt;asSet())
      else
        if self.oclIsKindOf(behavioral::actions::Constant) then
          self.oclAsType(behavioral::actions::Constant)."iterate".getNamedValuesInScope()
        else
          Set{}    -- TODO further cases?
        endif
      endif
    endif
    )
</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a4B84F6FD002E'/>  <!-- data.classes.NamedValue.getNamedValuesInScope -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.PlatformSpecificImplementation    [Class] ==================== -->
        <Model:Class xmi.id = 'a489C71AE029F' 
          name = 'PlatformSpecificImplementation' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:Namespace.contents>
            <!-- ==================== data.classes.PlatformSpecificImplementation.targetPlatform    [Attribute] ==================== -->
            <Model:Attribute xmi.id = 'a489C720F000F' 
              name = 'targetPlatform' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' 
              isDerived = 'false' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60394'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <!-- ==================== data.classes.PlatformSpecificImplementation.implementation    [Attribute] ==================== -->
            <Model:Attribute xmi.id = 'a489CACBF03C8' 
              name = 'implementation' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' 
              isDerived = 'false' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60394'/>
              </Model:TypedElement.type>
            </Model:Attribute>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== data.classes.NativeImpl    [Class] ==================== -->
        <Model:Class xmi.id = 'a489CAD05038A' 
          name = 'NativeImpl' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xmi.idref = 'a47836ECF037A'/>  <!-- data.classes.SignatureImplementation -->
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== data.classes.NativeImpl.platformSpecificImplementaiton    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra489CAD350177' 
              name = 'platformSpecificImplementaiton' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a489C71AE029F'/>  <!-- data.classes.PlatformSpecificImplementation -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a489CAD350177'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== data.classes.SignatureOwner    [Class] ==================== -->
        <Model:Class xmi.id = 'a48A0412B002E' 
          name = 'SignatureOwner' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xml:link = 'simple' href = 'modelmanagement.xml|a45013C240030'/>
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== data.classes.SignatureOwner.ownedSignatures    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra48A04147011B' 
              name = 'ownedSignatures' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a47D67D15030D'/>  <!-- data.classes.MethodSignature -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a48A04147011B'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== data.classes.ExtentModifyingAssociationEndSignatureImplementation    [Class] ==================== -->
        <Model:Class xmi.id = 'a49425BBA0251' 
          name = 'ExtentModifyingAssociationEndSignatureImplementation' annotation = 'Abstract base class for all association extent-manipulating signature implementations. Groups all constraints that apply to those.' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a49425C35031C'/>  <!-- data.classes.ExtentModifyingAssociationEndSignatureImplementation.MustNotModifyExtentIfEqualityRelevantForValueClass -->
            <Model:Constraint xmi.idref = 'a489D52CC0232'/>  <!-- data.classes.ExtentModifyingAssociationEndSignatureImplementation.MustNotImplementSideEffectFreeOperation -->
          </Model:ModelElement.constraints>
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xmi.idref = 'a478372D00242'/>  <!-- data.classes.AssociationEndSignatureImplementation -->
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== data.classes.ExtentModifyingAssociationEndSignatureImplementation.MustNotModifyExtentIfEqualityRelevantForValueClass    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a49425C35031C' 
              name = 'MustNotModifyExtentIfEqualityRelevantForValueClass' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context ExtentModifyingAssociationEndSignatureImplementation
inv:
  end.association.ends-&gt;forAll(ae:AssociationEnd |
    ae.contributesToEquality implies not ae.type.clazz.valueType)</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a49425BBA0251'/>  <!-- data.classes.ExtentModifyingAssociationEndSignatureImplementation -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <!-- ==================== data.classes.ExtentModifyingAssociationEndSignatureImplementation.MustNotImplementSideEffectFreeOperation    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a489D52CC0232' 
              name = 'MustNotImplementSideEffectFreeOperation' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context ExtentModifyingAssociationEndSignatureImplementation
inv:
  not self.implements_.sideEffectFree</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a49425BBA0251'/>  <!-- data.classes.ExtentModifyingAssociationEndSignatureImplementation -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== data.classes.FunctionSignatureImplementation    [Class] ==================== -->
        <Model:Class xmi.id = 'a4974995A0069' 
          name = 'FunctionSignatureImplementation' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xmi.idref = 'a47836ECF037A'/>  <!-- data.classes.SignatureImplementation -->
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== data.classes.FunctionSignatureImplementation.functionSignature    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra4975FB7F01F6' 
              name = 'functionSignature' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a47D67D190077'/>  <!-- data.classes.FunctionSignature -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a4975FB7F01F6'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.FunctionSignatureImplementation.isSideEffectFree    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a4A3B3771032C' 
              name = 'isSideEffectFree' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.90' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context FunctionSignatureImplementation::isSideEffectFree():Boolean...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.699' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context FunctionSignatureImplementation::isSideEffectFree():Boolean...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context FunctionSignatureImplementation::isSideEffectFree():Boolean
body:
  if self.oclIsKindOf(behavioral::actions::Block) then
    self.oclAsType(behavioral::actions::Block).localIsSideEffectFree()
  else
    if self.oclIsKindOf(dataaccess::analytics::CellSet) then
      self.oclAsType(dataaccess::analytics::CellSet).localIsSideEffectFree()
    else
      false
    endif
  endif</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a4A3B3771032C'/>  <!-- data.classes.FunctionSignatureImplementation.isSideEffectFree -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.ActualObjectParameter    [Class] ==================== -->
        <Model:Class xmi.id = 'a49B1547F0167' 
          name = 'ActualObjectParameter' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:Namespace.contents>
            <!-- ==================== data.classes.ActualObjectParameter.formalObjectParameter    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra49B154870128' 
              name = 'formalObjectParameter' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a47F12A7E0062'/>  <!-- data.classes.Parameter -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a49B154870128'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.ActualObjectParameter.classTypeDefinitions    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra49B1561E0159' 
              name = 'classTypeDefinitions' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4784F7E800AB'/>  <!-- data.classes.ClassTypeDefinition -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a49B1561E0159'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.ActualObjectParameter.value    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra49B1561C02CE' 
              name = 'value' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'dataaccess.xml|a450E63AB03A2'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a49B1561C02CE'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.ActualObjectParameter.owningClassTypeDefinition    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra4AD595C100DC' 
              name = 'owningClassTypeDefinition' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4784F7E800AB'/>  <!-- data.classes.ClassTypeDefinition -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a4AD595C100DC'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== data.classes.ConverterBetweenParametrizations    [Class] ==================== -->
        <Model:Class xmi.id = 'a49B15A3F03D8' 
          name = 'ConverterBetweenParametrizations' annotation = 'Specifies a method as converter method. This class is mostly used as a constraint container for such a construct.' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a49B15C100290'/>  <!-- data.classes.ConverterBetweenParametrizations.MustHaveConcreteMethod -->
            <Model:Constraint xmi.idref = 'a49B195DE0193'/>  <!-- data.classes.ConverterBetweenParametrizations.FormalObjectParametersConformToMethodParameters -->
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <!-- ==================== data.classes.ConverterBetweenParametrizations.clazz    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra49B15A62039B' 
              name = 'clazz' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a49B15A62039B'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.ConverterBetweenParametrizations.conversionMethod    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra49B15BB60138' 
              name = 'conversionMethod' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a47D67D15030D'/>  <!-- data.classes.MethodSignature -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a49B15BB60138'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.classes.ConverterBetweenParametrizations.MustHaveConcreteMethod    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a49B15C100290' 
              name = 'MustHaveConcreteMethod' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context ConverterBetweenParametrizations
inv:
  not self.conversionMethod.isAbstract()</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a49B15A3F03D8'/>  <!-- data.classes.ConverterBetweenParametrizations -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <!-- ==================== data.classes.ConverterBetweenParametrizations.FormalObjectParametersConformToMethodParameters    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a49B195DE0193' 
              name = 'FormalObjectParametersConformToMethodParameters' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context ConverterBetweenParametrizations
inv:
  self.conversionMethod.input-&gt;size() = self.clazz.formalObjectParameters-&gt;size() and
  Sequence{1..self.conversionMethod.input-&gt;size()}-&gt;forAll(i |
    self.clazz.formalObjectParameters-&gt;at(i).conformsTo(self.conversionMethod.input-&gt;at(i)))</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a49B15A3F03D8'/>  <!-- data.classes.ConverterBetweenParametrizations -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== data.classes.LinkManipulationAtPosition    [Class] ==================== -->
        <Model:Class xmi.id = 'a4A6D631E01A5' 
          name = 'LinkManipulationAtPosition' annotation = 'An implementation that optionally specifies a position in an ordered link set telling where to apply the modification.' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xmi.idref = 'a49425BBA0251'/>  <!-- data.classes.ExtentModifyingAssociationEndSignatureImplementation -->
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== data.classes.LinkManipulationAtPosition.at    [Attribute] ==================== -->
            <Model:Attribute xmi.id = 'a4A6D63680261' 
              name = 'at' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' 
              isDerived = 'false' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a3B538AB300B3'/>
              </Model:TypedElement.type>
            </Model:Attribute>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== data.classes.InScope    [Class] ==================== -->
        <Model:Class xmi.id = 'a4B85514B0119' 
          name = 'InScope' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:Namespace.contents>
            <!-- ==================== data.classes.InScope.addNamedValuesWithNewNames    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a4B83E9E9035B' 
              name = 'addNamedValuesWithNewNames' annotation = 'Used to build up a scope of named values, proceeding "inside-out." The first argument is the already computed set of NamedValues, all of which end up in the resulting set of NamedValues. NamedValues from the second argument are added to the result set if the first NamedValue set does not contain any NamedValue with an equal name.' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.91' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4522A56F0149'/>  <!-- data.classes.NamedValue -->
                  </Model:TypedElement.type>
                </Model:Parameter>
                <Model:Parameter xmi.id = 'XX.92' 
                  name = 'inner' annotation = '' 
                  direction = 'in_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4522A56F0149'/>  <!-- data.classes.NamedValue -->
                  </Model:TypedElement.type>
                </Model:Parameter>
                <Model:Parameter xmi.id = 'XX.93' 
                  name = 'outer' annotation = '' 
                  direction = 'in_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4522A56F0149'/>  <!-- data.classes.NamedValue -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== data.classes.org.omg.sap2mof.OperationCodeOcl=context InScope::addNamedValuesWithNewNames(inner:Set(NamedValue), outer:Set(NamedValue)):Set(NamedValue)...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.700' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context InScope::addNamedValuesWithNewNames(inner:Set(NamedValue), outer:Set(NamedValue)):Set(NamedValue)...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context InScope::addNamedValuesWithNewNames(inner:Set(NamedValue), outer:Set(NamedValue)):Set(NamedValue)
body:
  inner-&gt;union(outer-&gt;select(o | not inner-&gt;exists(i | i.name = o.name))-&gt;asSet())</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a4B83E9E9035B'/>  <!-- data.classes.InScope.addNamedValuesWithNewNames -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.classes.FaultsOfSignature    [Association] ==================== -->
        <Model:Association xmi.id = 'a443B531C0296' 
          name = 'FaultsOfSignature' annotation = 'Exception handling to be discussed, e.g., should multiple exceptions be supported for signatures?' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a443B53200210' 
              name = 'faults' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a443B53200224' 
              name = 'signaturesWithFault' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4432198602CB'/>  <!-- data.classes.Signature -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== data.classes.EndsOfAssociation    [Association] ==================== -->
        <Model:Association xmi.id = 'a44EC565F0290' 
          name = 'EndsOfAssociation' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a44EC56620059' 
              name = 'ends' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '2' upper = '2' is_ordered = 'true' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44EC55FB03B8'/>  <!-- data.classes.AssociationEnd -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a44EC5662005B' 
              name = 'association' annotation = '' 
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44321DA40150'/>  <!-- data.classes.Association -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== data.classes.DelegationToEnd    [Association] ==================== -->
        <Model:Association xmi.id = 'a456DB5E0010E' 
          name = 'DelegationToEnd' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a456DB5E0037B' 
              name = 'from' annotation = '' 
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44EC55FB03B8'/>  <!-- data.classes.AssociationEnd -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a456DB5E0037D' 
              name = 'delegation' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a456DB5D50361'/>  <!-- data.classes.Delegation -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== data.classes.A_for__context    [Association] ==================== -->
        <Model:Association xmi.id = 'a46FB5B290213' 
          name = 'A_for__context' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a46FB5B2A01A5' 
              name = 'for_' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a46FB5B2A0271' 
              name = 'context' annotation = '' 
              isNavigable = 'false' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a46FB5A85031C'/>  <!-- data.classes.Context -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== data.classes.A_constraints_theContext    [Association] ==================== -->
        <Model:Association xmi.id = 'a46FB601003B9' 
          name = 'A_constraints_theContext' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a46FB601102EE' 
              name = 'constraints' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a450E61B602EE'/>  <!-- data.constraints.Constraint -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a46FB601102FD' 
              name = 'theContext' annotation = '' 
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a46FB5A85031C'/>  <!-- data.classes.Context -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== data.classes.A_condition_context    [Association] ==================== -->
        <Model:Association xmi.id = 'a46FB6203031C' 
          name = 'A_condition_context' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a46FB620402BF' 
              name = 'condition' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'dataaccess.xml|a450E63AB03A2'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a46FB6204030D' 
              name = 'context' annotation = '' 
              isNavigable = 'false' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a46FB5A85031C'/>  <!-- data.classes.Context -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== data.classes.A_end_signatureImplementations    [Association] ==================== -->
        <Model:Association xmi.id = 'a4783730C003E' 
          name = 'A_end_signatureImplementations' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a4783730C01A5' 
              name = 'end' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44EC55FB03B8'/>  <!-- data.classes.AssociationEnd -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a4783730C01A7' 
              name = 'signatureImplementations' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a478372D00242'/>  <!-- data.classes.AssociationEndSignatureImplementation -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== data.classes.A_elementsOfType_clazz    [Association] ==================== -->
        <Model:Association xmi.id = 'a4784F7F5005D' 
          name = 'A_elementsOfType_clazz' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a4784F7F5005E' 
              name = 'elementsOfType' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4784F7E800AB'/>  <!-- data.classes.ClassTypeDefinition -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a4784F7F5005F' 
              name = 'clazz' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== data.classes.A_associations_package_    [Association] ==================== -->
        <Model:Association xmi.id = 'a4795A52A00EA' 
          name = 'A_associations_package_' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a4795A52A03A9' 
              name = 'associations' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44321DA40150'/>  <!-- data.classes.Association -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a4795A52A03B9' 
              name = 'package_' annotation = '' 
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'modelmanagement.xml|a452B7C8B00D8'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== data.classes.A_package__classes    [Association] ==================== -->
        <Model:Association xmi.id = 'a4795967B001F' 
          name = 'A_package__classes' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a4795967B0020' 
              name = 'package_' annotation = '' 
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'modelmanagement.xml|a452B7C8B00D8'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a4795967B0021' 
              name = 'classes' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== data.classes.A_type_nestedTypeDefinition    [Association] ==================== -->
        <Model:Association xmi.id = 'a47B9A9960148' 
          name = 'A_type_nestedTypeDefinition' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a47B9A99700DA' 
              name = 'type' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a47B9A97A00CB'/>  <!-- data.classes.TypeDefinition -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a47B9A99700DC' 
              name = 'nestedTypeDefinition' annotation = '' 
              isNavigable = 'false' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a47B9A98D0138'/>  <!-- data.classes.NestedTypeDefinition -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== data.classes.A_type_associationEnd    [Association] ==================== -->
        <Model:Association xmi.id = 'a47B9ABAE00AB' 
          name = 'A_type_associationEnd' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a47B9ABAF02AF' 
              name = 'type' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4784F7E800AB'/>  <!-- data.classes.ClassTypeDefinition -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a47B9ABAF02BF' 
              name = 'associationEnd' annotation = '' 
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44EC55FB03B8'/>  <!-- data.classes.AssociationEnd -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== data.classes.OutputOfSignature    [Association] ==================== -->
        <Model:Association xmi.id = 'a47B9EDFD0000' 
          name = 'OutputOfSignature' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a47B9EDFD0001' 
              name = 'output' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a47B9A97A00CB'/>  <!-- data.classes.TypeDefinition -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a47B9EDFD0002' 
              name = 'signaturesWithOutput' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4432198602CB'/>  <!-- data.classes.Signature -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== data.classes.A_ownedTypeDefinition_ownerTypedElement    [Association] ==================== -->
        <Model:Association xmi.id = 'a47CBF4180109' 
          name = 'A_ownedTypeDefinition_ownerTypedElement' annotation = 'An examples for this kind of ownership is a variable declaration owning the corresponding type definition' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a47CBF418010A' 
              name = 'ownedTypeDefinition' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a47B9A97A00CB'/>  <!-- data.classes.TypeDefinition -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a47CBF418010B' 
              name = 'ownerTypedElement' annotation = '' 
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4717B7BC031A'/>  <!-- data.classes.TypedElement -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== data.classes.A_ownedTypeDefinitions_ownerSignature    [Association] ==================== -->
        <Model:Association xmi.id = 'a47CBF46E03D8' 
          name = 'A_ownedTypeDefinitions_ownerSignature' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a47CBF46E03D9' 
              name = 'ownedTypeDefinitions' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a47B9A97A00CB'/>  <!-- data.classes.TypeDefinition -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a47CBF46E03DA' 
              name = 'ownerSignature' annotation = '' 
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4432198602CB'/>  <!-- data.classes.Signature -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== data.classes.A_ownedTypeDefinition_owningNestedTypeDefinition    [Association] ==================== -->
        <Model:Association xmi.id = 'a47CD54E4031C' 
          name = 'A_ownedTypeDefinition_owningNestedTypeDefinition' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a47CD54E60251' 
              name = 'ownedTypeDefinition' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a47B9A97A00CB'/>  <!-- data.classes.TypeDefinition -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a47CD54E60261' 
              name = 'owningNestedTypeDefinition' annotation = '' 
              isNavigable = 'false' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a47B9A98D0138'/>  <!-- data.classes.NestedTypeDefinition -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== data.classes.A_implements__implementation    [Association] ==================== -->
        <Model:Association xmi.id = 'a47D67F7201BB' 
          name = 'A_implements__implementation' annotation = 'Concrete (non-abstract) operations must specify their implementing Block using this association.' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a47D67F7201BC' 
              name = 'implements_' annotation = '' 
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a47D67D15030D'/>  <!-- data.classes.MethodSignature -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a47D67F7201BD' 
              name = 'implementation' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a47836ECF037A'/>  <!-- data.classes.SignatureImplementation -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== data.classes.AdaptedTo    [Association] ==================== -->
        <Model:Association xmi.id = 'a47F112BD0399' 
          name = 'AdaptedTo' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a47F112BE01FC' 
              name = 'to' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a47F112BE0232' 
              name = 'adaptedBy' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a47F112210022'/>  <!-- data.classes.TypeAdapter -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== data.classes.A_adapted_adapters    [Association] ==================== -->
        <Model:Association xmi.id = 'a47F112ED01E4' 
          name = 'A_adapted_adapters' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a47F112EE01B9' 
              name = 'adapted' annotation = '' 
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a47F112EE01EC' 
              name = 'adapters' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a47F112210022'/>  <!-- data.classes.TypeAdapter -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== data.classes.InputOfSignature    [Association] ==================== -->
        <Model:Association xmi.id = 'a47F12A8C021A' 
          name = 'InputOfSignature' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:ModelElement.annotation>Operations take no argument or one compound argument. With this, the argument structure is to be described by a class. Thus, individual parameters are generally not identified by position but by the name of the association end on the parameter's class.

Note that the input argument itself is not tagged with a name. It is not intended to be accessibile directly within the operation implementation.</Model:ModelElement.annotation>
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a47F12A8C021B' 
              name = 'input' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'true' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a47F12A7E0062'/>  <!-- data.classes.Parameter -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a47F12A8C021C' 
              name = 'ownerSignature' annotation = '' 
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4432198602CB'/>  <!-- data.classes.Signature -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== data.classes.A_platformSpecificImplementaiton_nativeImpl    [Association] ==================== -->
        <Model:Association xmi.id = 'a489CAD34032C' 
          name = 'A_platformSpecificImplementaiton_nativeImpl' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a489CAD350177' 
              name = 'platformSpecificImplementaiton' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a489C71AE029F'/>  <!-- data.classes.PlatformSpecificImplementation -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a489CAD350196' 
              name = 'nativeImpl' annotation = '' 
              isNavigable = 'false' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a489CAD05038A'/>  <!-- data.classes.NativeImpl -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== data.classes.A_signature_typeDefinition    [Association] ==================== -->
        <Model:Association xmi.id = 'a48A02BD6000F' 
          name = 'A_signature_typeDefinition' annotation = 'If FunctionSignatureTypeDefinition is also to be used for functions derived from (methods + this), then the signature may as well be a MethodSignature.' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a48A02BD6002E' 
              name = 'signature' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4432198602CB'/>  <!-- data.classes.Signature -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a48A02BD6007D' 
              name = 'typeDefinition' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a47B9A9AD03B9'/>  <!-- data.classes.FunctionSignatureTypeDefinition -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== data.classes.OwnedSignatures    [Association] ==================== -->
        <Model:Association xmi.id = 'a48A041470119' 
          name = 'OwnedSignatures' annotation = 'these are the abstract signatures with no implementation' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a48A04147011A' 
              name = 'owner' annotation = '' 
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a48A0412B002E'/>  <!-- data.classes.SignatureOwner -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a48A04147011B' 
              name = 'ownedSignatures' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a47D67D15030D'/>  <!-- data.classes.MethodSignature -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== data.classes.A_ownedSignature_functionSignatureTypeDefinition    [Association] ==================== -->
        <Model:Association xmi.id = 'a4935A90C031D' 
          name = 'A_ownedSignature_functionSignatureTypeDefinition' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a4935A90F037B' 
              name = 'ownedSignature' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4432198602CB'/>  <!-- data.classes.Signature -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a4935A9160243' 
              name = 'functionSignatureTypeDefinition' annotation = '' 
              isNavigable = 'false' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a47B9A9AD03B9'/>  <!-- data.classes.FunctionSignatureTypeDefinition -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== data.classes.A_implementation_functionSignature    [Association] ==================== -->
        <Model:Association xmi.id = 'a4975FB7F01F4' 
          name = 'A_implementation_functionSignature' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a4975FB7F01F5' 
              name = 'implementation' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4974995A0069'/>  <!-- data.classes.FunctionSignatureImplementation -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a4975FB7F01F6' 
              name = 'functionSignature' annotation = '' 
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a47D67D190077'/>  <!-- data.classes.FunctionSignature -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== data.classes.A_formalObjectParameters_parameterOfClass    [Association] ==================== -->
        <Model:Association xmi.id = 'a49B150D50186' 
          name = 'A_formalObjectParameters_parameterOfClass' annotation = 'Allows for types such as Number&lt;precision:Number&gt; which are parameterized with an object, such as in Number&lt;5&gt;.' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a49B150D6032C' 
              name = 'formalObjectParameters' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'true' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a47F12A7E0062'/>  <!-- data.classes.Parameter -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a49B150D6035B' 
              name = 'parameterOfClass' annotation = '' 
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== data.classes.A_formalObjectParameter_actualObjectParameter    [Association] ==================== -->
        <Model:Association xmi.id = 'a49B15486030D' 
          name = 'A_formalObjectParameter_actualObjectParameter' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a49B154870128' 
              name = 'formalObjectParameter' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a47F12A7E0062'/>  <!-- data.classes.Parameter -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a49B15487012A' 
              name = 'actualObjectParameter' annotation = '' 
              isNavigable = 'false' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a49B1547F0167'/>  <!-- data.classes.ActualObjectParameter -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== data.classes.A_objectParameters_classTypeDefinitions    [Association] ==================== -->
        <Model:Association xmi.id = 'a49B1561D0222' 
          name = 'A_objectParameters_classTypeDefinitions' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a49B1561E0157' 
              name = 'objectParameters' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'true' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a49B1547F0167'/>  <!-- data.classes.ActualObjectParameter -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a49B1561E0159' 
              name = 'classTypeDefinitions' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4784F7E800AB'/>  <!-- data.classes.ClassTypeDefinition -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== data.classes.A_value_actualObjectParameter    [Association] ==================== -->
        <Model:Association xmi.id = 'a49B1561C000F' 
          name = 'A_value_actualObjectParameter' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a49B1561C02CE' 
              name = 'value' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'dataaccess.xml|a450E63AB03A2'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a49B1561D007D' 
              name = 'actualObjectParameter' annotation = '' 
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a49B1547F0167'/>  <!-- data.classes.ActualObjectParameter -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== data.classes.A_converterBetweenParametrizations_clazz    [Association] ==================== -->
        <Model:Association xmi.id = 'a49B15A610251' 
          name = 'A_converterBetweenParametrizations_clazz' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a49B15A620399' 
              name = 'converterBetweenParametrizations' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a49B15A3F03D8'/>  <!-- data.classes.ConverterBetweenParametrizations -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a49B15A62039B' 
              name = 'clazz' annotation = '' 
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== data.classes.A_conversionMethod_converter    [Association] ==================== -->
        <Model:Association xmi.id = 'a49B15BB5036B' 
          name = 'A_conversionMethod_converter' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a49B15BB60138' 
              name = 'conversionMethod' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a47D67D15030D'/>  <!-- data.classes.MethodSignature -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a49B15BB60196' 
              name = 'converter' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a49B15A3F03D8'/>  <!-- data.classes.ConverterBetweenParametrizations -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== data.classes.A_defaultValue_parameter    [Association] ==================== -->
        <Model:Association xmi.id = 'a49D2B2E10271' 
          name = 'A_defaultValue_parameter' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a49D2B2E30119' 
              name = 'defaultValue' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'dataaccess.xml|a450E63AB03A2'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a49D2B2E30186' 
              name = 'parameter' annotation = '' 
              isNavigable = 'false' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a47F12A7E0062'/>  <!-- data.classes.Parameter -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== data.classes.A_ownedObjectParameters_owningClassTypeDefinition    [Association] ==================== -->
        <Model:Association xmi.id = 'a4AD595BF02EE' 
          name = 'A_ownedObjectParameters_owningClassTypeDefinition' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a4AD595C100DA' 
              name = 'ownedObjectParameters' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'true' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a49B1547F0167'/>  <!-- data.classes.ActualObjectParameter -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a4AD595C100DC' 
              name = 'owningClassTypeDefinition' annotation = '' 
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4784F7E800AB'/>  <!-- data.classes.ClassTypeDefinition -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
      </Model:Namespace.contents>
    </Model:Package>
    <Model:Import xmi.id = 'G.639' 
      name = 'PrimitiveTypes' annotation = '' 
      visibility = 'public_vis' isClustered = 'false' >
      <Model:Import.importedNamespace>
        <Model:Namespace xml:link = 'simple' href = 'PrimitiveTypes.xml|a3B5389EE0204'/>
      </Model:Import.importedNamespace>
    </Model:Import>
    <Model:Import xmi.id = 'G.701' 
      name = 'dataaccess' annotation = '' 
      visibility = 'public_vis' isClustered = 'false' >
      <Model:Import.importedNamespace>
        <Model:Namespace xml:link = 'simple' href = 'dataaccess.xml|a453E0CD8006C'/>
      </Model:Import.importedNamespace>
    </Model:Import>
    <Model:Import xmi.id = 'G.702' 
      name = 'modelmanagement' annotation = '' 
      visibility = 'public_vis' isClustered = 'false' >
      <Model:Import.importedNamespace>
        <Model:Namespace xml:link = 'simple' href = 'modelmanagement.xml|a44D74C00013D'/>
      </Model:Import.importedNamespace>
    </Model:Import>
    <!-- ==================== data.constraints    [Package] ==================== -->
    <Model:Package xmi.id = 'a44350AE0011F' 
      name = 'constraints' annotation = 'Complex data types (as opposed to the basic data types that are plain CCTS types)' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' >
      <Model:Namespace.contents>
        <!-- ==================== data.constraints.Constraint    [Class] ==================== -->
        <Model:Class xmi.id = 'a450E61B602EE' 
          name = 'Constraint' annotation = 'An instance of this class defines a subset of the instances of the type it constains. It does so by providing a predicate ("characteristic function"). Instances of the type constrained for which the predicate holds are part of the subset, the others are not.' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a47B9834100FA'/>  <!-- data.constraints.Constraint.ExpressionTypeMustBeBoolean -->
            <Model:Constraint xmi.idref = 'a47CC09070222'/>  <!-- data.constraints.Constraint.MustBeOwned -->
          </Model:ModelElement.constraints>
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xml:link = 'simple' href = 'modelmanagement.xml|a45013C240030'/>
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== data.constraints.Constraint.constrainedType    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra450E61D30245' 
              name = 'constrainedType' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a450E61D30245'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.constraints.Constraint.severityInState    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra450E62E2023B' 
              name = 'severityInState' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a450E62DA010D'/>  <!-- data.constraints.SeverityInState -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a450E62E2023B'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.constraints.Constraint.constraintExpression    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra450E63F301B1' 
              name = 'constraintExpression' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'dataaccess.xml|a450E63AB03A2'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a450E63F301B1'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.constraints.Constraint.ExpressionTypeMustBeBoolean    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a47B9834100FA' 
              name = 'ExpressionTypeMustBeBoolean' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context Constraint
inv:
  self.constraintExpression.getType().upperMultiplicity = 1 and
  self.constraintExpression.getType().oclIsKindOf(data::classes::ClassTypeDefinition) and
  self.constraintExpression.getType().oclAsType(data::classes::ClassTypeDefinition).clazz.name = 'Boolean'</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a450E61B602EE'/>  <!-- data.constraints.Constraint -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <!-- ==================== data.constraints.Constraint.MustBeOwned    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a47CC09070222' 
              name = 'MustBeOwned' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context Constraint
inv:
  self.constrainedType-&gt;notEmpty() or
  self.theContext-&gt;notEmpty() or
  self.preconditionForSignature-&gt;notEmpty() or
  self.postconditionForSignature-&gt;notEmpty()
</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a450E61B602EE'/>  <!-- data.constraints.Constraint -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== data.constraints.org.omg.sap2mof.store=yes    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.703' 
          name = 'org.omg.sap2mof.store=yes' annotation = '' 
          tagId = 'org.omg.sap2mof.store' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>yes</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'ra450E62E2023B'/>  <!-- data.constraints.Constraint.severityInState -->
            <Model:ModelElement xmi.idref = 'a450E62E2023B'/>
            <Model:ModelElement xmi.idref = 'a47B952BA006D'/>
            <Model:ModelElement xmi.idref = 'a47B952BD0040'/>
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.constraints.org.omg.sap2mof.violationMessageExpression='Expression type must be Boolean'    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.704' 
          name = 'org.omg.sap2mof.violationMessageExpression=&apos;Expression type must be Boolean&apos;' annotation = '' 
          tagId = 'org.omg.sap2mof.violationMessageExpression' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>'Expression type must be Boolean'</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a47B9834100FA'/>  <!-- data.constraints.Constraint.ExpressionTypeMustBeBoolean -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.constraints.org.omg.sap2mof.violationMessageExpression='Constraint must be owned by Class or Context'    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.705' 
          name = 'org.omg.sap2mof.violationMessageExpression=&apos;Constraint must be owned by Class or Context&apos;' annotation = '' 
          tagId = 'org.omg.sap2mof.violationMessageExpression' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>'Constraint must be owned by Class or Context'</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a47CC09070222'/>  <!-- data.constraints.Constraint.MustBeOwned -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.constraints.ObjectState    [DataType] ==================== -->
        <Model:DataType xmi.id = 'a450E624800DB' 
          name = 'ObjectState' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' >
          <Model:DataType.typeCode>
            <XMI.CorbaTypeCode>
              <XMI.CorbaTcEnum xmi.tcName = 'ObjectState'>
              <XMI.CorbaTcEnumLabel xmi.tcName = 'INITIAL'/>
              <XMI.CorbaTcEnumLabel xmi.tcName = 'TRANSIENT'/>
              <XMI.CorbaTcEnumLabel xmi.tcName = 'SAVED'/>
              <XMI.CorbaTcEnumLabel xmi.tcName = 'ACTIVE'/>
              <XMI.CorbaTcEnumLabel xmi.tcName = 'COMPLIANT'/>
              </XMI.CorbaTcEnum>
            </XMI.CorbaTypeCode>
          </Model:DataType.typeCode>
        </Model:DataType>
        <!-- ==================== data.constraints.Severity    [DataType] ==================== -->
        <Model:DataType xmi.id = 'a450E62B80064' 
          name = 'Severity' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' >
          <Model:DataType.typeCode>
            <XMI.CorbaTypeCode>
              <XMI.CorbaTcEnum xmi.tcName = 'Severity'>
              <XMI.CorbaTcEnumLabel xmi.tcName = 'WARNING'/>
              <XMI.CorbaTcEnumLabel xmi.tcName = 'ERROR'/>
              <XMI.CorbaTcEnumLabel xmi.tcName = 'ILLEGAL'/>
              </XMI.CorbaTcEnum>
            </XMI.CorbaTypeCode>
          </Model:DataType.typeCode>
        </Model:DataType>
        <!-- ==================== data.constraints.SeverityInState    [Class] ==================== -->
        <Model:Class xmi.id = 'a450E62DA010D' 
          name = 'SeverityInState' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:Namespace.contents>
            <!-- ==================== data.constraints.SeverityInState.state    [Attribute] ==================== -->
            <Model:Attribute xmi.id = 'a450E6313017D' 
              name = 'state' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' 
              isDerived = 'false' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a450E624800DB'/>  <!-- data.constraints.ObjectState -->
              </Model:TypedElement.type>
            </Model:Attribute>
            <!-- ==================== data.constraints.SeverityInState.severity    [Attribute] ==================== -->
            <Model:Attribute xmi.id = 'a450E631803B5' 
              name = 'severity' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' 
              isDerived = 'false' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a450E62B80064'/>  <!-- data.constraints.Severity -->
              </Model:TypedElement.type>
            </Model:Attribute>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== data.constraints.Constrains    [Association] ==================== -->
        <Model:Association xmi.id = 'a450E61D203A2' 
          name = 'Constrains' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a450E61D30245' 
              name = 'constrainedType' annotation = '' 
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a450E61D302E5' 
              name = 'constraints' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a450E61B602EE'/>  <!-- data.constraints.Constraint -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== data.constraints.SeveritiesForConstraint    [Association] ==================== -->
        <Model:Association xmi.id = 'a450E62E10348' 
          name = 'SeveritiesForConstraint' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a450E62E2023B' 
              name = 'severityInState' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a450E62DA010D'/>  <!-- data.constraints.SeverityInState -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a450E62E2023D' 
              name = 'constraint' annotation = '' 
              isNavigable = 'false' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a450E61B602EE'/>  <!-- data.constraints.Constraint -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== data.constraints.org.omg.sap2mof.store=no    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.706' 
          name = 'org.omg.sap2mof.store=no' annotation = '' 
          tagId = 'org.omg.sap2mof.store' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>no</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a450E62E2023D'/>
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.constraints.A_constraintExpression_constraint    [Association] ==================== -->
        <Model:Association xmi.id = 'a450E63F20390' 
          name = 'A_constraintExpression_constraint' annotation = 'The expression is evaluated in the context of an instance of constrainedType which can be accessed using a This expression. It must return a Boolean value.' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a450E63F301B1' 
              name = 'constraintExpression' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'dataaccess.xml|a450E63AB03A2'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a450E63F301B3' 
              name = 'constraint' annotation = '' 
              isNavigable = 'false' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a450E61B602EE'/>  <!-- data.constraints.Constraint -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== data.constraints.A_preconditions_preconditionForSignature    [Association] ==================== -->
        <Model:Association xmi.id = 'a47B952B90119' 
          name = 'A_preconditions_preconditionForSignature' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a47B952BA005D' 
              name = 'preconditions' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a450E61B602EE'/>  <!-- data.constraints.Constraint -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a47B952BA006D' 
              name = 'preconditionForSignature' annotation = '' 
              isNavigable = 'false' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4432198602CB'/>  <!-- data.classes.Signature -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== data.constraints.A_postconditions_postconditionForSignature    [Association] ==================== -->
        <Model:Association xmi.id = 'a47B952BC004E' 
          name = 'A_postconditions_postconditionForSignature' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a47B952BD003E' 
              name = 'postconditions' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a450E61B602EE'/>  <!-- data.constraints.Constraint -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a47B952BD0040' 
              name = 'postconditionForSignature' annotation = '' 
              isNavigable = 'false' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4432198602CB'/>  <!-- data.classes.Signature -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
      </Model:Namespace.contents>
    </Model:Package>
    <!-- ==================== data.quantitystructure    [Package] ==================== -->
    <Model:Package xmi.id = 'a451A893801B4' 
      name = 'quantitystructure' annotation = 'Helps modelers to specify the numbers of instances of types, relations and the access patterns over them. This can later be used to optimize data representation, partitioning and deployment.' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' >
      <Model:Namespace.contents>
        <!-- ==================== data.quantitystructure.Dummy    [Class] ==================== -->
        <Model:Class xmi.id = 'a458161A7008A' 
          name = 'Dummy' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' />
      </Model:Namespace.contents>
    </Model:Package>
    <!-- ==================== data.timedependency    [Package] ==================== -->
    <Model:Package xmi.id = 'a456557E402D2' 
      name = 'timedependency' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' >
      <Model:ModelElement.annotation>Models the aspect of time-dependent data. If a structural feature such as a class or a property or an association is marked as time-dependent, clients expect to find time-dependent access operations for read access. If no time is specified, the time of access is implicitly assumed.

Modifications to such structures keep the history of the data. Again, if no modification time is explicitly specified, the time at which the modification occurs is used implicitly.

Clarify if it should be possible to "modify history." In other words, should it be possible to make structural changes in data that was already recorded in the past?

TODO Perhaps this package should be separated out into an own top-level metamodel package because it has dependencies on behavioral/actions and dataaccess/expressions.</Model:ModelElement.annotation>
      <Model:Namespace.contents>
        <!-- ==================== data.timedependency.TimeDependency    [Class] ==================== -->
        <Model:Class xmi.id = 'a45655911018B' 
          name = 'TimeDependency' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:ModelElement.annotation>Captures the specification for how to deal in detail with the time-dependent nature of the annotated structural feature.

Time dependence of a class means that the existence of an instance of that class is timie dependent. A time-dependent association means that the existence of each link of that association is time dependent.

Read operations on time-dependent classes and associations (such as queries and navigation) can optionally specify a point in time or a timespan. If no time or timespan is specified, the current time is assumed.

Write/update operations by default will use the current time as the point in time, or an open time interval starting at the current time (in case of a timespan feature). Any open previous timespan by default will be closed at the current time by an update.

Read and update operations of time-dependent features can optionally be equipped with a time/timespan telling the temporal validity of the values updated or the values to be read.</Model:ModelElement.annotation>
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a45655A1100C0'/>  <!-- data.timedependency.TimeDependency.RecordCutoffGreaterOrEqualZero -->
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <!-- ==================== data.timedependency.TimeDependency.theClass    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra45655A8F020C' 
              name = 'theClass' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a45655A8F020C'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.timedependency.TimeDependency.association    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra45655A9100A6' 
              name = 'association' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44321DA40150'/>  <!-- data.classes.Association -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a45655A9100A6'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.timedependency.TimeDependency.recordCutoffInMilliseconds    [Attribute] ==================== -->
            <Model:Attribute xmi.id = 'a4565594C0095' 
              name = 'recordCutoffInMilliseconds' annotation = 'The number of milliseconds for which to keep historic versions of this feature. Only values greater or equal to zero are permitted. 0 means that no historic versions are kept at all.' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' 
              isDerived = 'false' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a3B538AB300B3'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <!-- ==================== data.timedependency.TimeDependency.canChangePast    [Attribute] ==================== -->
            <Model:Attribute xmi.id = 'a45655B1202BF' 
              name = 'canChangePast' annotation = 'If true, it is permissible to change values of the time-dependent feature for previous times.' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' 
              isDerived = 'false' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <!-- ==================== data.timedependency.TimeDependency.timespan    [Attribute] ==================== -->
            <Model:Attribute xmi.id = 'a45655B590180' 
              name = 'timespan' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' 
              isDerived = 'false' >
              <Model:ModelElement.annotation>If true, data is valid over a given timespan, not only a single point in time. When writing data, the validity period is to be specified as a timespan rather than a point in time.

If false, data samples are valid only at a single point in time, such as from an RFID reader or a temperature sensor. Access APIs would have to allow for conveniently finding the "nearest" match for a given point in time.</Model:ModelElement.annotation>
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
              </Model:TypedElement.type>
            </Model:Attribute>
            <!-- ==================== data.timedependency.TimeDependency.RecordCutoffGreaterOrEqualZero    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a45655A1100C0' 
              name = 'RecordCutoffGreaterOrEqualZero' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context TimeDependency
inv:
  self.recordCutoffInMilliseconds &gt;= 0</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a45655911018B'/>  <!-- data.timedependency.TimeDependency -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== data.timedependency.A_theClass_timeDependency    [Association] ==================== -->
        <Model:Association xmi.id = 'a45655A8E0201' 
          name = 'A_theClass_timeDependency' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a45655A8F020C' 
              name = 'theClass' annotation = '' 
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a45655A8F03A7' 
              name = 'timeDependency' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a45655911018B'/>  <!-- data.timedependency.TimeDependency -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== data.timedependency.A_association_timeDependency    [Association] ==================== -->
        <Model:Association xmi.id = 'a45655A900222' 
          name = 'A_association_timeDependency' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a45655A9100A6' 
              name = 'association' annotation = '' 
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a44321DA40150'/>  <!-- data.classes.Association -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a45655A9100A8' 
              name = 'timeDependency' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a45655911018B'/>  <!-- data.timedependency.TimeDependency -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
      </Model:Namespace.contents>
    </Model:Package>
    <!-- ==================== data.documents    [Package] ==================== -->
    <Model:Package xmi.id = 'a4565C2580170' 
      name = 'documents' annotation = 'Structures that help referencing and managing---typically external---document repositories. Structures shall allow to reference documents in such a repository, say something about the lifecycle of documents in such a repository in connection to the life cycle of other model elements, and integrate document repository capabilities into the modeling world, such as document ranking, versioning, etc.' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' >
      <Model:Namespace.contents>
        <!-- ==================== data.documents.Dummy    [Class] ==================== -->
        <Model:Class xmi.id = 'a458161B202DF' 
          name = 'Dummy' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' />
      </Model:Namespace.contents>
    </Model:Package>
    <!-- ==================== data.generics    [Package] ==================== -->
    <Model:Package xmi.id = 'a456EA81A030D' 
      name = 'generics' annotation = 'Describes how types can be parameterized. Parameterizable types include classes and tuples. Classes can be declared to have a list of DataType arguments. Those arguments can then be used within a class definition wherever a DataType is allowed. If a type argument is a class, it may be used wherever a class is allowed.' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' >
      <Model:Namespace.contents>
        <!-- ==================== data.generics.FormalTypeParameter    [Class] ==================== -->
        <Model:Class xmi.id = 'a456EAA6B008E' 
          name = 'FormalTypeParameter' annotation = 'A formal type argument to the ParameterizedClass owning this parameter object. It is valid only in the scope of the classDefinition owned by the ParameterizedClass that owns this parameter object.' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a4573F1290337'/>  <!-- data.generics.FormalTypeParameter.UseInSignaturesOfOwningParamerizedClassOnly -->
            <Model:Constraint xmi.idref = 'a4573F088033F'/>  <!-- data.generics.FormalTypeParameter.UseInAssociationsOfOwningParameterizedClassOnly -->
          </Model:ModelElement.constraints>
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== data.generics.FormalTypeParameter.parameterOf    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra456EA99C00A5' 
              name = 'parameterOf' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a456ECEC60286'/>  <!-- data.generics.ClassParameterization -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a456EA99C00A5'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.generics.FormalTypeParameter.typeConstraint    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra456EAACA004F' 
              name = 'typeConstraint' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a456EAACA004F'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.generics.FormalTypeParameter.actualTypeParameters    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra47F39E79003E' 
              name = 'actualTypeParameters' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a456ED3CB0143'/>  <!-- data.generics.ActualTypeParameter -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a47F39E79003E'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.generics.FormalTypeParameter.UseInSignaturesOfOwningParamerizedClassOnly    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a4573F1290337' 
              name = 'UseInSignaturesOfOwningParamerizedClassOnly' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context FormalTypeParameter
inv:
  self.elementsOfType.getTypeUsage()-&gt;forAll(s | s.oclIsKindOf(data::classes::Parameter) implies 
   (s.oclAsType(data::classes::Parameter).ownerSignature.oclIsKindOf(data::classes::MethodSignature) and
    s.oclAsType(data::classes::Parameter).ownerSignature.oclAsType(data::classes::MethodSignature).owner=self.parameterOf .owningClassDefinition)) and
  self.elementsOfType.signaturesWithOutput-&gt;forAll(s| s.oclIsKindOf(data::classes::MethodSignature) and 
    s.oclAsType(data::classes::MethodSignature).owner-&gt;notEmpty() and
    s.oclAsType(data::classes::MethodSignature).owner=self.parameterOf.owningClassDefinition) and
  self.signaturesWithFault-&gt;forAll(s| s.oclIsKindOf(data::classes::MethodSignature)  and 
    s.oclAsType(data::classes::MethodSignature).owner-&gt;notEmpty() and
    s.oclAsType(data::classes::MethodSignature).owner=self.parameterOf.owningClassDefinition)</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a456EAA6B008E'/>  <!-- data.generics.FormalTypeParameter -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <!-- ==================== data.generics.FormalTypeParameter.UseInAssociationsOfOwningParameterizedClassOnly    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a4573F088033F' 
              name = 'UseInAssociationsOfOwningParameterizedClassOnly' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context FormalTypeParameter
inv:
  self.elementsOfType.associationEnd-&gt;
    forAll(ae | ae.otherEnd().type.clazz = self.parameterOf.owningClassDefinition)</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a456EAA6B008E'/>  <!-- data.generics.FormalTypeParameter -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== data.generics.ParameterizedClassInstantiation    [Class] ==================== -->
        <Model:Class xmi.id = 'a456EAB93030B' 
          name = 'ParameterizedClassInstantiation' annotation = 'An instantiation of a parameterized class (a class that has one or more FormalTypeParameters associated) with a set of data types that match the parameterized type&apos;s signature. The instantiation is itself usable as a Class. It may as such itself still have formal type parameters which then make it a parameterized class that itself requires instantiation before it it a fully-specified type.' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a456EABEA02CA'/>  <!-- data.generics.ParameterizedClassInstantiation.ActualTypeParametersMatchSignature -->
            <Model:Constraint xmi.idref = 'a494BBA5B0128'/>  <!-- data.generics.ParameterizedClassInstantiation.ClassMustBeParameterized -->
          </Model:ModelElement.constraints>
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== data.generics.ParameterizedClassInstantiation.actualTypeParametersForInstantiation    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra456EABC501CC' 
              name = 'actualTypeParametersForInstantiation' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '-1' is_ordered = 'true' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a456ED3CB0143'/>  <!-- data.generics.ActualTypeParameter -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a456EABC501CC'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.generics.ParameterizedClassInstantiation.parameterizedClass    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra494BAF27002F' 
              name = 'parameterizedClass' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a494BAF27002F'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.generics.ParameterizedClassInstantiation.resolveFormalTypeParameter    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a45E544E0026B' 
              name = 'resolveFormalTypeParameter' annotation = 'Returns the ActualTypeParameter&apos;s type (a Class) from the actualTypeParameters association end whose formalTypeParameter is the one passed. If no such formal type parameter is found, no object (null) is returned.' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.94' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
                  </Model:TypedElement.type>
                </Model:Parameter>
                <Model:Parameter xmi.id = 'XX.95' 
                  name = 'ftp' annotation = '' 
                  direction = 'in_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a456EAA6B008E'/>  <!-- data.generics.FormalTypeParameter -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== data.generics.ParameterizedClassInstantiation.getClassParameterization    [Operation] ==================== -->
            <Model:Operation xmi.id = 'a494BBA930290' 
              name = 'getClassParameterization' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isQuery = 'true' >
              <Model:Namespace.contents>
                <Model:Parameter xmi.id = 'XX.96' 
                  name = '*return' annotation = '' 
                  direction = 'return_dir' >
                  <Model:Parameter.multiplicity>
                    <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
                  </Model:Parameter.multiplicity>
                  <Model:TypedElement.type>
                    <Model:Classifier xmi.idref = 'a456ECEC60286'/>  <!-- data.generics.ClassParameterization -->
                  </Model:TypedElement.type>
                </Model:Parameter>
              </Model:Namespace.contents>
            </Model:Operation>
            <!-- ==================== data.generics.ParameterizedClassInstantiation.ActualTypeParametersMatchSignature    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a456EABEA02CA' 
              name = 'ActualTypeParametersMatchSignature' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context ParameterizedClassInstantiation
inv:
  self.actualTypeParametersForInstantiation-&gt;size() = self.parameterizedClass.parameterization.formalTypeParameters-&gt;size() and
  Sequence{1..self.actualTypeParametersForInstantiation-&gt;size()}-&gt;forAll(i:Integer|
    self.actualTypeParametersForInstantiation-&gt;at(i).formalTypeParameter =
    self.parameterizedClass.parameterization.formalTypeParameters-&gt;at(i))</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a456EAB93030B'/>  <!-- data.generics.ParameterizedClassInstantiation -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <!-- ==================== data.generics.ParameterizedClassInstantiation.ClassMustBeParameterized    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a494BBA5B0128' 
              name = 'ClassMustBeParameterized' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context ParameterizedClassInstantiation
inv:
  self.parameterizedClass.parameterization-&gt;notEmpty()</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a456EAB93030B'/>  <!-- data.generics.ParameterizedClassInstantiation -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== data.generics.org.omg.sap2mof.store=no    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.707' 
          name = 'org.omg.sap2mof.store=no' annotation = '' 
          tagId = 'org.omg.sap2mof.store' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>no</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'ra456EABC501CC'/>  <!-- data.generics.ParameterizedClassInstantiation.actualTypeParametersForInstantiation -->
            <Model:ModelElement xmi.idref = 'ra456EA99C007D'/>  <!-- data.generics.ClassParameterization.formalTypeParameters -->
            <Model:ModelElement xmi.idref = 'ra47F39E79002E'/>  <!-- data.generics.ActualTypeParameter.formalTypeParameter -->
            <Model:ModelElement xmi.idref = 'a456EA99C007D'/>
            <Model:ModelElement xmi.idref = 'a456EABC501CC'/>
            <Model:ModelElement xmi.idref = 'a456ECED401B4'/>
            <Model:ModelElement xmi.idref = 'a47F39E79002E'/>
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.generics.org.omg.sap2mof.OperationCodeOcl=context ParameterizedClassInstantiation::resolveFormalTypeParameter(ftp:FormalTypeParameter):SapClass...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.708' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context ParameterizedClassInstantiation::resolveFormalTypeParameter(ftp:FormalTypeParameter):SapClass...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context ParameterizedClassInstantiation::resolveFormalTypeParameter(ftp:FormalTypeParameter):SapClass
body:
  self.actualTypeParametersForInstantiation-&gt;select(atp:ActualTypeParameter |
    atp.formalTypeParameter = ftp)-&gt;asSequence()-&gt;at(1).type</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a45E544E0026B'/>  <!-- data.generics.ParameterizedClassInstantiation.resolveFormalTypeParameter -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.generics.org.omg.sap2mof.OperationCodeOcl=context ParameterizedClassInstantiation::getClassParameterization():ClassParameterization...    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.709' 
          name = 'org.omg.sap2mof.OperationCodeOcl=context ParameterizedClassInstantiation::getClassParameterization():ClassParameterization...' annotation = '' 
          tagId = 'org.omg.sap2mof.OperationCodeOcl' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>context ParameterizedClassInstantiation::getClassParameterization():ClassParameterization
body:
  parameterizedClass.parameterization</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'a494BBA930290'/>  <!-- data.generics.ParameterizedClassInstantiation.getClassParameterization -->
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.generics.ClassParameterization    [Class] ==================== -->
        <Model:Class xmi.id = 'a456ECEC60286' 
          name = 'ClassParameterization' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a49479DFF034D'/>  <!-- data.generics.ClassParameterization.DistinctFormalTypeParameterNames -->
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <!-- ==================== data.generics.ClassParameterization.formalTypeParameters    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra456EA99C007D' 
              name = 'formalTypeParameters' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '-1' is_ordered = 'true' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a456EAA6B008E'/>  <!-- data.generics.FormalTypeParameter -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a456EA99C007D'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.generics.ClassParameterization.owningClassDefinition    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra456ECED401A0' 
              name = 'owningClassDefinition' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a456ECED401A0'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.generics.ClassParameterization.package_    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra479712380261' 
              name = 'package_' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'modelmanagement.xml|a452B7C8B00D8'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a479712380261'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.generics.ClassParameterization.DistinctFormalTypeParameterNames    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a49479DFF034D' 
              name = 'DistinctFormalTypeParameterNames' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context ClassParameterization
inv:
self.formalTypeParameters-&gt;forAll(i,j|i&lt;&gt;j implies i.name&lt;&gt;j.name)
</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a456ECEC60286'/>  <!-- data.generics.ClassParameterization -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== data.generics.org.omg.sap2mof.store=yes    [Tag] ==================== -->
        <Model:Tag xmi.id = 'G.710' 
          name = 'org.omg.sap2mof.store=yes' annotation = '' 
          tagId = 'org.omg.sap2mof.store' >
          <Model:Tag.values>
            <XMI.any xmi.type = 'string' xmi.name = ''>yes</XMI.any>
          </Model:Tag.values>
          <Model:Tag.elements>
            <Model:ModelElement xmi.idref = 'ra456ECED401A0'/>  <!-- data.generics.ClassParameterization.owningClassDefinition -->
            <Model:ModelElement xmi.idref = 'a456ECED401A0'/>
            <Model:ModelElement xmi.idref = 'a4797123801E4'/>
          </Model:Tag.elements>
        </Model:Tag>
        <!-- ==================== data.generics.ActualTypeParameter    [Class] ==================== -->
        <Model:Class xmi.id = 'a456ED3CB0143' 
          name = 'ActualTypeParameter' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a45742E940154'/>  <!-- data.generics.ActualTypeParameter.TypeConformsWithFormalParametersTypeConstraint -->
          </Model:ModelElement.constraints>
          <Model:Namespace.contents>
            <!-- ==================== data.generics.ActualTypeParameter.parameterizedClassInstantiation    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra456EABC501EA' 
              name = 'parameterizedClassInstantiation' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a456EAB93030B'/>  <!-- data.generics.ParameterizedClassInstantiation -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a456EABC501EA'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.generics.ActualTypeParameter.type    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra478635F0029F' 
              name = 'type' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a478635F0029F'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.generics.ActualTypeParameter.formalTypeParameter    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra47F39E79002E' 
              name = 'formalTypeParameter' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a456EAA6B008E'/>  <!-- data.generics.FormalTypeParameter -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a47F39E79002E'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== data.generics.ActualTypeParameter.TypeConformsWithFormalParametersTypeConstraint    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a45742E940154' 
              name = 'TypeConformsWithFormalParametersTypeConstraint' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context ActualTypeParameter
inv:
  self.formalTypeParameter.typeConstraint-&gt;notEmpty() implies
    self.type.conformsTo(self.formalTypeParameter.typeConstraint)</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a456ED3CB0143'/>  <!-- data.generics.ActualTypeParameter -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== data.generics.A_formalTypeParameters_parameterOf    [Association] ==================== -->
        <Model:Association xmi.id = 'a456EA99A03AF' 
          name = 'A_formalTypeParameters_parameterOf' annotation = 'A class with one or more formal type parameters is a "generic class."' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a456EA99C007D' 
              name = 'formalTypeParameters' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '-1' is_ordered = 'true' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a456EAA6B008E'/>  <!-- data.generics.FormalTypeParameter -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a456EA99C00A5' 
              name = 'parameterOf' annotation = '' 
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a456ECEC60286'/>  <!-- data.generics.ClassParameterization -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== data.generics.A_typeConstraint_formalTypeParameter    [Association] ==================== -->
        <Model:Association xmi.id = 'a456EAAC60392' 
          name = 'A_typeConstraint_formalTypeParameter' annotation = 'Can be used to specify that any actual type used for the formal type parameter must conform to the class referenced by the typeConstraint end. With this, whenever the formal type parameter is used as a type in the class definition, the typeConstaint&apos;s features can be used.' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a456EAACA004F' 
              name = 'typeConstraint' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a456EAACA0063' 
              name = 'formalTypeParameter' annotation = '' 
              isNavigable = 'false' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a456EAA6B008E'/>  <!-- data.generics.FormalTypeParameter -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== data.generics.A_actualTypeParametersForInstantiation_parameterizedClassInstantiation    [Association] ==================== -->
        <Model:Association xmi.id = 'a456EABC3013D' 
          name = 'A_actualTypeParametersForInstantiation_parameterizedClassInstantiation' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a456EABC501CC' 
              name = 'actualTypeParametersForInstantiation' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '-1' is_ordered = 'true' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a456ED3CB0143'/>  <!-- data.generics.ActualTypeParameter -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a456EABC501EA' 
              name = 'parameterizedClassInstantiation' annotation = '' 
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a456EAB93030B'/>  <!-- data.generics.ParameterizedClassInstantiation -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== data.generics.ParameterizedClassDeclaration    [Association] ==================== -->
        <Model:Association xmi.id = 'a456ECED301F8' 
          name = 'ParameterizedClassDeclaration' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a456ECED401A0' 
              name = 'owningClassDefinition' annotation = '' 
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a456ECED401B4' 
              name = 'parameterization' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a456ECEC60286'/>  <!-- data.generics.ClassParameterization -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== data.generics.A_type_actualTypeParametersOfClass    [Association] ==================== -->
        <Model:Association xmi.id = 'a478635EB0109' 
          name = 'A_type_actualTypeParametersOfClass' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a478635F0029F' 
              name = 'type' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a478635F002FD' 
              name = 'actualTypeParametersOfClass' annotation = '' 
              isNavigable = 'false' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a456ED3CB0143'/>  <!-- data.generics.ActualTypeParameter -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== data.generics.A_parameterizedClasses_package_    [Association] ==================== -->
        <Model:Association xmi.id = 'a47971235033C' 
          name = 'A_parameterizedClasses_package_' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a4797123801E4' 
              name = 'parameterizedClasses' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a456ECEC60286'/>  <!-- data.generics.ClassParameterization -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a479712380261' 
              name = 'package_' annotation = '' 
              isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'modelmanagement.xml|a452B7C8B00D8'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== data.generics.A_formalTypeParameter_actualTypeParameters    [Association] ==================== -->
        <Model:Association xmi.id = 'a47F39E780261' 
          name = 'A_formalTypeParameter_actualTypeParameters' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a47F39E79002E' 
              name = 'formalTypeParameter' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a456EAA6B008E'/>  <!-- data.generics.FormalTypeParameter -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a47F39E79003E' 
              name = 'actualTypeParameters' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a456ED3CB0143'/>  <!-- data.generics.ActualTypeParameter -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== data.generics.A_parameterizedClass_parameterizedClassInstantiation    [Association] ==================== -->
        <Model:Association xmi.id = 'a494BAF27002E' 
          name = 'A_parameterizedClass_parameterizedClassInstantiation' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a494BAF27002F' 
              name = 'parameterizedClass' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4432171B031E'/>  <!-- data.classes.SapClass -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a494BAF270030' 
              name = 'parameterizedClassInstantiation' annotation = '' 
              isNavigable = 'false' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a456EAB93030B'/>  <!-- data.generics.ParameterizedClassInstantiation -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
      </Model:Namespace.contents>
    </Model:Package>
    <!-- ==================== data.tuples    [Package] ==================== -->
    <Model:Package xmi.id = 'a4914633C0177' 
      name = 'tuples' annotation = '' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' >
      <Model:Namespace.contents>
        <!-- ==================== data.tuples.TupleTypeDefinition    [Class] ==================== -->
        <Model:Class xmi.id = 'a49146359007D' 
          name = 'TupleTypeDefinition' annotation = 'A tuple type defines named and typed elements. Conformance for tuple types is less strict. It need not be explicitly defined as is required for classes. This allows tuple types to conform to each other based on their structure.' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xmi.idref = 'a47B9A97A00CB'/>  <!-- data.classes.TypeDefinition -->
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== data.tuples.TupleTypeDefinition.elements    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra4914639203C8' 
              name = 'elements' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a491463630280'/>  <!-- data.tuples.TupleElement -->
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a4914639203C8'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== data.tuples.TupleElement    [Class] ==================== -->
        <Model:Class xmi.id = 'a491463630280' 
          name = 'TupleElement' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xmi.idref = 'a4717B7BC031A'/>  <!-- data.classes.TypedElement -->
            <Model:GeneralizableElement xml:link = 'simple' href = 'modelmanagement.xml|a45013C240030'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <!-- ==================== data.tuples.A_elements_tupleTypeDefinition    [Association] ==================== -->
        <Model:Association xmi.id = 'a4914639201E4' 
          name = 'A_elements_tupleTypeDefinition' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a4914639203C8' 
              name = 'elements' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a491463630280'/>  <!-- data.tuples.TupleElement -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a4914639203CA' 
              name = 'tupleTypeDefinition' annotation = '' 
              isNavigable = 'false' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a49146359007D'/>  <!-- data.tuples.TupleTypeDefinition -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
      </Model:Namespace.contents>
    </Model:Package>
    <Model:Import xmi.id = 'G.711' 
      name = 'behavioral' annotation = '' 
      visibility = 'public_vis' isClustered = 'false' >
      <Model:Import.importedNamespace>
        <Model:Namespace xml:link = 'simple' href = 'behavioral.xml|a446B1EEC006B'/>
      </Model:Import.importedNamespace>
    </Model:Import>
  </Model:Namespace.contents>
</Model:Package>
</XMI.content>
</XMI>
