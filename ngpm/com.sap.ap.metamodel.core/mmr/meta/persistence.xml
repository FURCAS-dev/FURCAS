<?xml version = '1.0' encoding = 'ISO-8859-1' ?>
<!-- <!DOCTYPE XMI SYSTEM 'Model1311.DTD' > -->
<XMI xmi.version = '1.1' xmlns:Model='omg.org/mof.Model/1.3' timestamp = 'Wed Mar 10 13:04:35 2010' >
 <XMI.header>
  <XMI.documentation>
   <XMI.exporter>Unisys.JCR.1</XMI.exporter>
   <XMI.exporterVersion>1.3.2</XMI.exporterVersion>
  </XMI.documentation>
  <XMI.metamodel xmi.name = 'org.omg.mof.Model' xmi.version = '1.3'/>
 </XMI.header>
<XMI.content>
<!-- ==================== persistence    [Package] ==================== -->
<Model:Package xmi.id = 'a4472EA830302' 
  name = 'persistence' 
  isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' >
  <Model:ModelElement.annotation>Persistence modeling cronstructs. This can primarily be used to tell whether an entity class shall have persistence support or not. Specific mark-up may be provided for associations.

The package also will allow developers to specify concurrency control aspects, such as the locking style to use for a transaction or an entity class. Developers also need to be able to specify how persistent data is to be "partitioned" in the sense of defining the granularity for locking and fetching data.

Furthermore, this package may contribute specific actions to make entity objects persistent and delete persistent objects.

The package also has to define the semantics of persistence in the first place, such as how persistence affects the semantics of queries.

TODO Does marking an entity class as persistent mean that there is this kind of "virtual" top-level "collection" of instances of this class which then can be queried and referred to by name? Is it like the topmost container that guarantees reachability and therefore allows for a garbage collection semantics "by reachability?"

TODO Perhaps this package should be separated out into an own top-level metamodel package because it has dependencies on behavioral/actions and dataaccess/expressions.</Model:ModelElement.annotation>
  <Model:Namespace.contents>
    <!-- ==================== persistence.actions    [Package] ==================== -->
    <Model:Package xmi.id = 'a4979C042005B' 
      name = 'actions' annotation = '' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' >
      <Model:Namespace.contents>
        <!-- ==================== persistence.actions.Store    [Class] ==================== -->
        <Model:Class xmi.id = 'a4979C056001D' 
          name = 'Store' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:ModelElement.annotation>Marks an entity object or multi-object as persistent. It will be stored in the repository, producing a new snapshot on calling commit. 
Together with the object(s) produced by the *argument* expression, all their composite children are stored by this statement, too, and so are all links attached to any of these objects as well as all value objects that are relevant for the equality of any of the objects stored.

TODO clarify the storing of deletions</Model:ModelElement.annotation>
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xmi.idref = 'a497A4BFB0037'/>  <!-- persistence.actions.StatementWithEntityArgument -->
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <!-- ==================== persistence.actions.Delete    [Class] ==================== -->
        <Model:Class xmi.id = 'a497A4BE10316' 
          name = 'Delete' annotation = 'Deletes the one or multiple entity objects from the repository including its composite children and all attaching links.' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xmi.idref = 'a497A4BFB0037'/>  <!-- persistence.actions.StatementWithEntityArgument -->
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
        <!-- ==================== persistence.actions.StatementWithEntityArgument    [Class] ==================== -->
        <Model:Class xmi.id = 'a497A4BFB0037' 
          name = 'StatementWithEntityArgument' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a4979C0D902AD'/>  <!-- persistence.actions.StatementWithEntityArgument.CanStoreOnlyEntities -->
          </Model:ModelElement.constraints>
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xml:link = 'simple' href = 'behavioral.xml|a492573460213'/>
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== persistence.actions.StatementWithEntityArgument.CanStoreOnlyEntities    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a4979C0D902AD' 
              name = 'CanStoreOnlyEntities' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context StatementWithEntityArgument
inv:
  if self.argument.getType().oclIsKindOf(ClassTypeDefinition) then
    not self.argument.getType().oclAsType(ClassTypeDefinition).clazz.valueType
  else
    false
  endif</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a497A4BFB0037'/>  <!-- persistence.actions.StatementWithEntityArgument -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== persistence.actions.Rollback    [Class] ==================== -->
        <Model:Class xmi.id = 'a4981A0120399' 
          name = 'Rollback' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xml:link = 'simple' href = 'behavioral.xml|a4545FC1D0190'/>
          </Model:GeneralizableElement.supertypes>
        </Model:Class>
      </Model:Namespace.contents>
    </Model:Package>
    <!-- ==================== persistence.expressions    [Package] ==================== -->
    <Model:Package xmi.id = 'a4979C049027E' 
      name = 'expressions' annotation = '' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' >
      <Model:Namespace.contents>
        <!-- ==================== persistence.expressions.All    [Class] ==================== -->
        <Model:Class xmi.id = 'a4979C34B01C3' 
          name = 'All' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a4979C45C02BD'/>  <!-- persistence.expressions.All.MustBeEntityClass -->
            <Model:Constraint xmi.idref = 'a49AE8335035D'/>  <!-- persistence.expressions.All.ExpressionMustBeSnapshotOrTimePoint -->
          </Model:ModelElement.constraints>
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xml:link = 'simple' href = 'dataaccess.xml|a450E63AB03A2'/>
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== persistence.expressions.All.ofClass    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra4979C3D002DC' 
              name = 'ofClass' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'data.xml|a4432171B031E'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a4979C3D002DC'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== persistence.expressions.All.snapshotIdentifier    [Reference] ==================== -->
            <Model:Reference xmi.id = 'ra49AE7B73031B' 
              name = 'snapshotIdentifier' annotation = '' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'dataaccess.xml|a450E63AB03A2'/>
              </Model:TypedElement.type>
              <Model:Reference.referencedEnd>
                <Model:AssociationEnd xmi.idref = 'a49AE7B73031B'/>
              </Model:Reference.referencedEnd>
            </Model:Reference>
            <!-- ==================== persistence.expressions.All.snapshot    [Attribute] ==================== -->
            <Model:Attribute xmi.id = 'a498C3F3D0186' 
              name = 'snapshot' annotation = 'A selector for the snapshot to read. If DEFAULT, the entities will be read from the current session&apos;s default snapshot. If ALL is specified, all copies of instances in all snapshots is returned. If DATE, the lastSnapshotBeforeIsoTimestamp has to be set and all snapshots before that date are selected for which no successor exists that still lies before the timestamp specified. This means that the entity will be returned from all snapshots on concurrent branches that existed at the given point in time.' 
              scope = 'instance_level' visibility = 'public_vis' 
              isChangeable = 'true' 
              isDerived = 'false' >
              <Model:StructuralFeature.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:StructuralFeature.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a498C3EB901C5'/>  <!-- persistence.expressions.SnapshotSelection -->
              </Model:TypedElement.type>
            </Model:Attribute>
            <!-- ==================== persistence.expressions.All.MustBeEntityClass    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a4979C45C02BD' 
              name = 'MustBeEntityClass' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context All
inv:
  not self.ofClass.valueType</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a4979C34B01C3'/>  <!-- persistence.expressions.All -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
            <!-- ==================== persistence.expressions.All.ExpressionMustBeSnapshotOrTimePoint    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a49AE8335035D' 
              name = 'ExpressionMustBeSnapshotOrTimePoint' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context All
inv:
  if self.snapshot = SnapshotSelection::SPECIFIED then
    self.snapshotIdentifier.getType().upperMultiplicity = 1 and
    self.snapshotIdentifier.getType().oclIsKindOf(ClassTypeDefinition) and
   Set{'Snapshot', 'TimePoint'}-&gt;includes(self.snapshotIdentifier.getType().oclAsType(ClassTypeDefinition).clazz.name)
  else
    true
  endif</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a4979C34B01C3'/>  <!-- persistence.expressions.All -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== persistence.expressions.SnapshotSelection    [DataType] ==================== -->
        <Model:DataType xmi.id = 'a498C3EB901C5' 
          name = 'SnapshotSelection' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' >
          <Model:DataType.typeCode>
            <XMI.CorbaTypeCode>
              <XMI.CorbaTcEnum xmi.tcName = 'SnapshotSelection'>
              <XMI.CorbaTcEnumLabel xmi.tcName = 'DEFAULT'/>
              <XMI.CorbaTcEnumLabel xmi.tcName = 'ALL'/>
              <XMI.CorbaTcEnumLabel xmi.tcName = 'CHANGED'/>
              <XMI.CorbaTcEnumLabel xmi.tcName = 'SPECIFIED'/>
              </XMI.CorbaTcEnum>
            </XMI.CorbaTypeCode>
          </Model:DataType.typeCode>
        </Model:DataType>
        <!-- ==================== persistence.expressions.Commit    [Class] ==================== -->
        <Model:Class xmi.id = 'a4981A010001F' 
          name = 'Commit' annotation = 'Returns the Snapshot produced' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a49AC5EB70009'/>  <!-- persistence.expressions.Commit.ReturnsSnapshot -->
          </Model:ModelElement.constraints>
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xml:link = 'simple' href = 'dataaccess.xml|a450E63AB03A2'/>
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== persistence.expressions.Commit.ReturnsSnapshot    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a49AC5EB70009' 
              name = 'ReturnsSnapshot' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context Commit
inv:
  self.getType().oclIsKindOf(ClassTypeDefinition) and
  self.getType().oclAsType(ClassTypeDefinition).clazz.name = 'Snapshot'</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a4981A010001F'/>  <!-- persistence.expressions.Commit -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== persistence.expressions.Snapshot    [Class] ==================== -->
        <Model:Class xmi.id = 'a49AEBB73011C' 
          name = 'Snapshot' annotation = '' 
          isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
          isSingleton = 'false' >
          <Model:ModelElement.constraints>
            <Model:Constraint xmi.idref = 'a49AEBC430220'/>  <!-- persistence.expressions.Snapshot.SourceObjectIsOfClassType -->
          </Model:ModelElement.constraints>
          <Model:GeneralizableElement.supertypes>
            <Model:GeneralizableElement xml:link = 'simple' href = 'dataaccess.xml|a453E0FC80335'/>
          </Model:GeneralizableElement.supertypes>
          <Model:Namespace.contents>
            <!-- ==================== persistence.expressions.Snapshot.SourceObjectIsOfClassType    [Constraint] ==================== -->
            <Model:Constraint xmi.id = 'a49AEBC430220' 
              name = 'SourceObjectIsOfClassType' annotation = '' 
              language = 'OCL' evaluationPolicy = 'deferred' >
              <Model:Constraint.expression>
                <XMI.any xmi.type = 'string' xmi.name = ''>context Snapshot
inv:
  self.object.getType().oclIsKindOf(ClassTypeDefinition)</XMI.any>
              </Model:Constraint.expression>
              <Model:Constraint.constrainedElements>
                <Model:ModelElement xmi.idref = 'a49AEBB73011C'/>  <!-- persistence.expressions.Snapshot -->
              </Model:Constraint.constrainedElements>
            </Model:Constraint>
          </Model:Namespace.contents>
        </Model:Class>
        <!-- ==================== persistence.expressions.A_ofClass_all    [Association] ==================== -->
        <Model:Association xmi.id = 'a4979C3D001A3' 
          name = 'A_ofClass_all' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a4979C3D002DC' 
              name = 'ofClass' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'data.xml|a4432171B031E'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a4979C3D1008A' 
              name = 'all' annotation = '' 
              isNavigable = 'false' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4979C34B01C3'/>  <!-- persistence.expressions.All -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
        <!-- ==================== persistence.expressions.A_snapshotIdentifier_all    [Association] ==================== -->
        <Model:Association xmi.id = 'a49AE7B73000D' 
          name = 'A_snapshotIdentifier_all' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
          isDerived = 'false' >
          <Model:Namespace.contents>
            <Model:AssociationEnd xmi.id = 'a49AE7B73031B' 
              name = 'snapshotIdentifier' annotation = '' 
              isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'dataaccess.xml|a450E63AB03A2'/>
              </Model:TypedElement.type>
            </Model:AssociationEnd>
            <Model:AssociationEnd xmi.id = 'a49AE7B73034A' 
              name = 'all' annotation = '' 
              isNavigable = 'false' aggregation = 'composite' isChangeable = 'true' >
              <Model:AssociationEnd.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:AssociationEnd.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a4979C34B01C3'/>  <!-- persistence.expressions.All -->
              </Model:TypedElement.type>
            </Model:AssociationEnd>
          </Model:Namespace.contents>
        </Model:Association>
      </Model:Namespace.contents>
    </Model:Package>
    <Model:Import xmi.id = 'G.933' 
      name = 'data' annotation = '' 
      visibility = 'public_vis' isClustered = 'false' >
      <Model:Import.importedNamespace>
        <Model:Namespace xml:link = 'simple' href = 'data.xml|a453E0C08006D'/>
      </Model:Import.importedNamespace>
    </Model:Import>
    <Model:Import xmi.id = 'G.934' 
      name = 'dataaccess' annotation = '' 
      visibility = 'public_vis' isClustered = 'false' >
      <Model:Import.importedNamespace>
        <Model:Namespace xml:link = 'simple' href = 'dataaccess.xml|a453E0CD8006C'/>
      </Model:Import.importedNamespace>
    </Model:Import>
    <Model:Import xmi.id = 'G.935' 
      name = 'behavioral' annotation = '' 
      visibility = 'public_vis' isClustered = 'false' >
      <Model:Import.importedNamespace>
        <Model:Namespace xml:link = 'simple' href = 'behavioral.xml|a446B1EEC006B'/>
      </Model:Import.importedNamespace>
    </Model:Import>
  </Model:Namespace.contents>
</Model:Package>
</XMI.content>
</XMI>
