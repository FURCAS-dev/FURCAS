/**
 * Generated by the MOIN Generator Version 3.0
 **/

package com.sap.tc.moin.testcases.case001.__impl;

public class AreferencesBWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<com.sap.tc.moin.testcases.case001.AreferencesB> implements com.sap.tc.moin.testcases.case001.AreferencesB,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AreferencesB wrapper
     */
    public AreferencesBWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, com.sap.tc.moin.testcases.case001.__impl.AreferencesBImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private com.sap.tc.moin.testcases.case001.__impl.AreferencesBImpl getCastWrappedObject() {
        return (com.sap.tc.moin.testcases.case001.__impl.AreferencesBImpl) getWrappedObject();
    }

    public com.sap.tc.moin.testcases.case001.AreferencesB unwrap() {
        return (com.sap.tc.moin.testcases.case001.AreferencesB) getWrappedObject();
    }
    
    public boolean exists(com.sap.tc.moin.testcases.case001.B1 _B, com.sap.tc.moin.testcases.case001.A1 _A) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _B), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _A));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _B), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _A)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.tc.moin.testcases.case001.B1 getB(com.sap.tc.moin.testcases.case001.A1 _A) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.tc.moin.testcases.case001.B1) wrapResult(getCastWrappedObject().getB(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _A)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.tc.moin.testcases.case001.B1) wrapResult(getCastWrappedObject().getB(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _A))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.tc.moin.testcases.case001.A1 getA(com.sap.tc.moin.testcases.case001.B1 _B) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.tc.moin.testcases.case001.A1) wrapResult(getCastWrappedObject().getA(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _B)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.tc.moin.testcases.case001.A1) wrapResult(getCastWrappedObject().getA(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _B))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(com.sap.tc.moin.testcases.case001.B1 _B, com.sap.tc.moin.testcases.case001.A1 _A) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _B), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _A));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _B), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _A)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(com.sap.tc.moin.testcases.case001.B1 _B, com.sap.tc.moin.testcases.case001.A1 _A) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _B), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _A));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _B), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _A)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<com.sap.tc.moin.testcases.case001.AreferencesB> get___JmiInterface() {
        return com.sap.tc.moin.testcases.case001.AreferencesB.class;
    }

    protected String metaObjectToString() {
        return "com.sap.tc.moin.testcases.case001.AreferencesB (Java Type)\ntestcases.case001.AReferencesB (MOF Type)"; //$NON-NLS-1$
    }    
}