/**
 * Generated by the MOIN Generator Version 3.0
 **/

package com.sap.tc.moin.testcases.case011.__impl;

public class A11Wrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefObjectWrapperImpl<com.sap.tc.moin.testcases.case011.__impl.A11Impl> implements com.sap.tc.moin.testcases.case011.A11,com.sap.tc.moin.repository.Partitionable {

        
    private static final java.util.Map<java.lang.String, java.lang.Integer> OPERATION_IDS;
    
    static {
        
        OPERATION_IDS = new java.util.HashMap<java.lang.String, java.lang.Integer>();
        OPERATION_IDS.put("callMultipleSetter", Integer.valueOf(0)); //$NON-NLS-1$
        OPERATION_IDS.put("callMultipleGetter", Integer.valueOf(1)); //$NON-NLS-1$
    }

    public A11Wrapper(com.sap.tc.moin.repository.core.CoreConnection conn, com.sap.tc.moin.testcases.case011.__impl.A11Impl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    private com.sap.tc.moin.testcases.case011.__impl.A11Impl getCastWrappedObject() {
        return (com.sap.tc.moin.testcases.case011.__impl.A11Impl) getWrappedObject();
    }
    
    private com.sap.tc.moin.testcases.case011.__impl.A11Impl getCastWrappedObject(com.sap.tc.moin.repository.core.CorePartitionable resolved) {
        return (com.sap.tc.moin.testcases.case011.__impl.A11Impl) resolved;
    }
    
    public com.sap.tc.moin.testcases.case011.__impl.A11Impl unwrap() {
        return (com.sap.tc.moin.testcases.case011.__impl.A11Impl) getWrappedObject();
    }
        
    // methods for attributes
    public java.lang.String getAttribute1() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        com.sap.tc.moin.repository.core.CorePartitionable resolved = mriReference.getIfResolved();
        if (resolved != null) {
            return getCastWrappedObject(resolved).getAttribute1();
        }
            try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().getAttribute1();
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().getAttribute1(); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public void setAttribute1(java.lang.String newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setAttribute1(connection, newValue);
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setAttribute1(connection, newValue);
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public java.lang.String getAttribute2() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        com.sap.tc.moin.repository.core.CorePartitionable resolved = mriReference.getIfResolved();
        if (resolved != null) {
            return getCastWrappedObject(resolved).getAttribute2();
        }
            try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().getAttribute2();
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().getAttribute2(); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public void setAttribute2(java.lang.String newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setAttribute2(connection, newValue);
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setAttribute2(connection, newValue);
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

     
    // methods for references
   
    // methods for modeled operations
    public void callMultipleSetter(boolean throwRuntimeExceptionBetweenTheCalls, java.lang.String attribute1, java.lang.String attribute2) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(3);
        try {
            parameterList.add(throwRuntimeExceptionBetweenTheCalls);
            parameterList.add(attribute1);
            parameterList.add(attribute2);
            ___invokeOperation(connection, 0, "4767DFEC994890B4AD7911DC9FFD001558C93B47", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public java.lang.String callMultipleGetter() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.lang.String)___invokeOperation(connection, 1, "4767DFEC994890B6AD7911DCAF46001558C93B47", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    
    // methods for internal modeled operations
    private void invoke__callMultipleSetter(com.sap.tc.moin.repository.core.CoreConnection connection, boolean throwRuntimeExceptionBetweenTheCalls, java.lang.String attribute1, java.lang.String attribute2) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        // begin of implementation provided in tag org.omg.sap2mof.OperationCodeJava
        // A11.callMultipleSetter
        setAttribute1(attribute1 + "_SetViaOperation");
        if(throwRuntimeExceptionBetweenTheCalls) {
          throw new RuntimeException("Throwing a RuntimeException between the 2 setter calls was requested by the caller of this method");
        }
        setAttribute2(attribute2 + "_SetViaOperation");
        // end of implementation provided in tag org.omg.sap2mof.OperationCodeJava
    }
    private java.lang.String invoke__callMultipleGetter(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        // begin of implementation provided in tag org.omg.sap2mof.OperationCodeJava
        // A11.callMultipleGetter
        return getAttribute1() + "_GetViaOperation, " + getAttribute2() + "_GetViaOperation";
        // end of implementation provided in tag org.omg.sap2mof.OperationCodeJava
    }

    // reflective methods
    @Override
    public Object refInvokeOperation(com.sap.tc.moin.repository.core.CoreConnection connection, java.lang.String requestedOperation, java.util.List<? extends Object> args) throws com.sap.tc.moin.repository.mmi.reflect.RefException {
        if (requestedOperation == null) {
            throw new com.sap.tc.moin.repository.mmi.reflect.InvalidNameException(requestedOperation);
        }
        java.lang.Integer operationId = OPERATION_IDS.get(requestedOperation);
        if (operationId == null) {
            throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException(requestedOperation, refMetaObject(), "refInvokeOperation(String)"); //$NON-NLS-1$
        }
        switch (operationId) {
                
            case 0:
                return ___invokeOperation( connection, operationId, "4767DFEC994890B4AD7911DC9FFD001558C93B47", args ); //$NON-NLS-1$    
                
            case 1:
                return ___invokeOperation( connection, operationId, "4767DFEC994890B6AD7911DCAF46001558C93B47", args ); //$NON-NLS-1$    
            default:
                throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException(requestedOperation, refMetaObject(), "refInvokeOperation(String)"); //$NON-NLS-1$
        }
    }
    
    @Override
    public Object invoke___Operation(com.sap.tc.moin.repository.core.CoreConnection connection, int operationId, java.util.List<? extends Object> args) throws com.sap.tc.moin.repository.mmi.reflect.RefException {
        switch (operationId) {
                
            case 0:
                invoke__callMultipleSetter(connection, (java.lang.Boolean) args.get(0), (java.lang.String) args.get(1), (java.lang.String) args.get(2));
                return null;    
                
            case 1:
                return invoke__callMultipleGetter(connection);    
            default:
                throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException( operationId, refMetaObject( ), "invoke___Operation(int)"); //$NON-NLS-1$
        }
    
    }    

    // get the JMI interface
    public java.lang.Class<com.sap.tc.moin.testcases.case011.A11> get___JmiInterface() {
        return com.sap.tc.moin.testcases.case011.A11.class;
    }

    // to String
    protected String metaObjectToString() {
        return "com.sap.tc.moin.testcases.case011.A11 (Java Type)\ntestcases.case011.A11 (MOF Type)"; //$NON-NLS-1$
    }    
}