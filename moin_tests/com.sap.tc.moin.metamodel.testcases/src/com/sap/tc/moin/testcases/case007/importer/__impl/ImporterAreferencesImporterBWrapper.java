/**
 * Generated by the MOIN Generator Version 3.0
 **/

package com.sap.tc.moin.testcases.case007.importer.__impl;

public class ImporterAreferencesImporterBWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<com.sap.tc.moin.testcases.case007.importer.ImporterAreferencesImporterB> implements com.sap.tc.moin.testcases.case007.importer.ImporterAreferencesImporterB,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The ImporterAreferencesImporterB wrapper
     */
    public ImporterAreferencesImporterBWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, com.sap.tc.moin.testcases.case007.importer.__impl.ImporterAreferencesImporterBImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private com.sap.tc.moin.testcases.case007.importer.__impl.ImporterAreferencesImporterBImpl getCastWrappedObject() {
        return (com.sap.tc.moin.testcases.case007.importer.__impl.ImporterAreferencesImporterBImpl) getWrappedObject();
    }

    public com.sap.tc.moin.testcases.case007.importer.ImporterAreferencesImporterB unwrap() {
        return (com.sap.tc.moin.testcases.case007.importer.ImporterAreferencesImporterB) getWrappedObject();
    }
    
    public boolean exists(com.sap.tc.moin.testcases.case007.importer.ImporterB _ImporterB, com.sap.tc.moin.testcases.case007.importer.ImporterA _ImporterA) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImporterB), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImporterA));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImporterB), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImporterA)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.tc.moin.testcases.case007.importer.ImporterB getImporterB(com.sap.tc.moin.testcases.case007.importer.ImporterA _ImporterA) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.tc.moin.testcases.case007.importer.ImporterB) wrapResult(getCastWrappedObject().getImporterB(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImporterA)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.tc.moin.testcases.case007.importer.ImporterB) wrapResult(getCastWrappedObject().getImporterB(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImporterA))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getImporterA(com.sap.tc.moin.testcases.case007.importer.ImporterB _ImporterB) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getImporterA(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImporterB)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getImporterA(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImporterB))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(com.sap.tc.moin.testcases.case007.importer.ImporterB _ImporterB, com.sap.tc.moin.testcases.case007.importer.ImporterA _ImporterA) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImporterB), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImporterA));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImporterB), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImporterA)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(com.sap.tc.moin.testcases.case007.importer.ImporterB _ImporterB, com.sap.tc.moin.testcases.case007.importer.ImporterA _ImporterA) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImporterB), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImporterA));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImporterB), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ImporterA)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<com.sap.tc.moin.testcases.case007.importer.ImporterAreferencesImporterB> get___JmiInterface() {
        return com.sap.tc.moin.testcases.case007.importer.ImporterAreferencesImporterB.class;
    }

    protected String metaObjectToString() {
        return "com.sap.tc.moin.testcases.case007.importer.ImporterAreferencesImporterB (Java Type)\ntestcases.case007.importer.ImporterAReferencesImporterB (MOF Type)"; //$NON-NLS-1$
    }    
}