/**
 * Generated by the MOIN Generator Version 3.0
 **/

package com.sap.tc.moin.testcases.case010.__impl;

public class OneToManyNotChangeableWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<com.sap.tc.moin.testcases.case010.OneToManyNotChangeable> implements com.sap.tc.moin.testcases.case010.OneToManyNotChangeable,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The OneToManyNotChangeable wrapper
     */
    public OneToManyNotChangeableWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, com.sap.tc.moin.testcases.case010.__impl.OneToManyNotChangeableImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private com.sap.tc.moin.testcases.case010.__impl.OneToManyNotChangeableImpl getCastWrappedObject() {
        return (com.sap.tc.moin.testcases.case010.__impl.OneToManyNotChangeableImpl) getWrappedObject();
    }

    public com.sap.tc.moin.testcases.case010.OneToManyNotChangeable unwrap() {
        return (com.sap.tc.moin.testcases.case010.OneToManyNotChangeable) getWrappedObject();
    }
    
    public boolean exists(com.sap.tc.moin.testcases.case010.A10 _OneNotChangeable, com.sap.tc.moin.testcases.case010.B10 _ManyNotChangeable) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _OneNotChangeable), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ManyNotChangeable));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _OneNotChangeable), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ManyNotChangeable)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.tc.moin.testcases.case010.A10 getOneNotChangeable(com.sap.tc.moin.testcases.case010.B10 _ManyNotChangeable) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.tc.moin.testcases.case010.A10) wrapResult(getCastWrappedObject().getOneNotChangeable(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ManyNotChangeable)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.tc.moin.testcases.case010.A10) wrapResult(getCastWrappedObject().getOneNotChangeable(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _ManyNotChangeable))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection getManyNotChangeable(com.sap.tc.moin.testcases.case010.A10 _OneNotChangeable) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.Collection) wrapResult(getCastWrappedObject().getManyNotChangeable(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _OneNotChangeable)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.Collection) wrapResult(getCastWrappedObject().getManyNotChangeable(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _OneNotChangeable))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<com.sap.tc.moin.testcases.case010.OneToManyNotChangeable> get___JmiInterface() {
        return com.sap.tc.moin.testcases.case010.OneToManyNotChangeable.class;
    }

    protected String metaObjectToString() {
        return "com.sap.tc.moin.testcases.case010.OneToManyNotChangeable (Java Type)\ntestcases.case010.oneToManyNotChangeable (MOF Type)"; //$NON-NLS-1$
    }    
}