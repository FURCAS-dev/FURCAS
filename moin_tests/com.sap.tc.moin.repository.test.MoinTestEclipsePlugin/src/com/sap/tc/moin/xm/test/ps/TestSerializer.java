/**
 * Generated by the MOIN XM Generator Version 1.0 .
 */

package com.sap.tc.moin.xm.test.ps;

import com.sap.tc.moin.repository.xm.serializer.SModelElementHandle;

/**
 * XM Serializer for XML documents which are valid to the XML schema"file:/C:/japro/moin_dev/moin/moin.test/dev/src/_com.sap.tc.moin.testcases.xm/libm/api/com/sap/tc/moin/xm/test/ps/test.xsd"
 * .
 */
public class TestSerializer extends com.sap.tc.moin.repository.xm.serializer.XmCustomSerializerAbstract {

    /** Prefix for the no-namespace. */
    protected static final java.lang.String PREFIX_ = ""; //$NON-NLS-1$

    /** Prefix for the namespace "http://sap.com/moin/xm/test". */
    protected static final java.lang.String PREFIX_ns1 = "ns1"; //$NON-NLS-1$


    /* Qualified names of the XML elements. */
    protected static final java.lang.String ELEMENT_ns1_test = PREFIX_ns1 + ":test"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns1_boolean = PREFIX_ns1 + ":boolean"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns1_double = PREFIX_ns1 + ":double"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns1_float = PREFIX_ns1 + ":float"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns1_int = PREFIX_ns1 + ":int"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns1_long = PREFIX_ns1 + ":long"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns1_multiBoolean = PREFIX_ns1 + ":multiBoolean"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns1_multiDouble = PREFIX_ns1 + ":multiDouble"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns1_multiFloat = PREFIX_ns1 + ":multiFloat"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns1_multiInteger = PREFIX_ns1 + ":multiInteger"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns1_multiLong = PREFIX_ns1 + ":multiLong"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns1_multiString = PREFIX_ns1 + ":multiString"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns1_NonStringAndMultiAttributes = PREFIX_ns1 + ":NonStringAndMultiAttributes"; //$NON-NLS-1$

    private final boolean ignore;

    /**
     * Constructor. Calls the method {@link #registerPrefixes()}.
     */
    public TestSerializer( boolean doIgnore ) {

        super( );
        registerPrefixes( );
        this.ignore = doIgnore;
    }

    /**
     * Registers the prefixes for the namespaces. For each namespace a prefix
     * must be registered. The registered prefixe definitions are written to the
     * output stream by the first call of the method
     * {@link #startTag(java.lang.String)}.
     */
    protected void registerPrefixes( ) {

        registerPrefixForNamespace( "http://sap.com/moin/xm/test", PREFIX_ns1 ); //$NON-NLS-1$    
    }

    @Override
    protected void execute( ) throws com.sap.tc.moin.repository.xm.XmException {

        for ( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle modelElement : getModelElements( com.sap.tc.moin.testcases.mc.test.NonStringAndMultiAttributes.CLASS_DESCRIPTOR ) ) {
            startTag( ELEMENT_ns1_test );
            writeNs1ETest( modelElement );
            closeTag( );
        }

        // the following line was added to test the calling of a method.

        if ( !this.ignore ) {
            SModelElementHandle h = this.getModelElement( com.sap.tc.moin.testcases.mc.test.NonStringAndMultiAttributes.CLASS_DESCRIPTOR, "instance" ); //$NON-NLS-1$
            if ( h == null ) {
                throw new IllegalStateException( "No model element found for instance with logical key \"instance\"" ); //$NON-NLS-1$
            }
        }
    }

    /**
     * Writes the content model of the global element declaration
     * "test (http://sap.com/moin/xm/test)" to the output stream.
     * 
     * @param modelElement model element from which attribute values or links
     * are read
     * @throws com.sap.tc.moin.repository.xm.XmException can be used for error
     * handling, this implementation does not throw such an exception
     * @throws NullpointerException if the parameter is <code>null</code>
     */
    protected void writeNs1ETest( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle modelElement ) throws com.sap.tc.moin.repository.xm.XmException {

//        for ( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle linkedModelElement : getLinks( modelElement, com.sap.tc.moin.testcases.mc.test.TestNonStringAndMultiAttributes.ASSOCIATION_DESCRIPTOR, "nonStringAndMultiAttributes" ) ) { //$NON-NLS-1$
        startTag( ELEMENT_ns1_NonStringAndMultiAttributes );
        writeNs1ENonStringAndMultiAttributes( modelElement );
        closeTag( );
//        }
    }

    /**
     * Writes the content model of the global element declaration
     * "NonStringAndMultiAttributes (http://sap.com/moin/xm/test)" to the output
     * stream.
     * 
     * @param modelElement model element from which attribute values or links
     * are read
     * @throws com.sap.tc.moin.repository.xm.XmException can be used for error
     * handling, this implementation does not throw such an exception
     * @throws NullpointerException if the parameter is <code>null</code>
     */
    protected void writeNs1ENonStringAndMultiAttributes( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle modelElement ) throws com.sap.tc.moin.repository.xm.XmException {

        addElement( ELEMENT_ns1_boolean, modelElement, com.sap.tc.moin.testcases.mc.test.NonStringAndMultiAttributes.DESCRIPTORS.A_BOOLEAN( ) );
        addElement( ELEMENT_ns1_double, modelElement, com.sap.tc.moin.testcases.mc.test.NonStringAndMultiAttributes.DESCRIPTORS.A_DOUBLE( ) );
        addElement( ELEMENT_ns1_float, modelElement, com.sap.tc.moin.testcases.mc.test.NonStringAndMultiAttributes.DESCRIPTORS.A_FLOAT( ) );
        addElement( ELEMENT_ns1_int, modelElement, com.sap.tc.moin.testcases.mc.test.NonStringAndMultiAttributes.DESCRIPTORS.A_INTEGER( ) );
        addElement( ELEMENT_ns1_long, modelElement, com.sap.tc.moin.testcases.mc.test.NonStringAndMultiAttributes.DESCRIPTORS.A_LONG( ) );
        addElement( ELEMENT_ns1_multiBoolean, modelElement, com.sap.tc.moin.testcases.mc.test.NonStringAndMultiAttributes.DESCRIPTORS.MULTI_BOOLEAN( ) );
        addElement( ELEMENT_ns1_multiDouble, modelElement, com.sap.tc.moin.testcases.mc.test.NonStringAndMultiAttributes.DESCRIPTORS.MULTI_DOUBLE( ) );
        addElement( ELEMENT_ns1_multiFloat, modelElement, com.sap.tc.moin.testcases.mc.test.NonStringAndMultiAttributes.DESCRIPTORS.MULTI_FLOAT( ) );
        addElement( ELEMENT_ns1_multiInteger, modelElement, com.sap.tc.moin.testcases.mc.test.NonStringAndMultiAttributes.DESCRIPTORS.MULTI_INTEGER( ) );
        addElement( ELEMENT_ns1_multiLong, modelElement, com.sap.tc.moin.testcases.mc.test.NonStringAndMultiAttributes.DESCRIPTORS.MULTI_LONG( ) );
        addElement( ELEMENT_ns1_multiString, modelElement, com.sap.tc.moin.testcases.mc.test.NonStringAndMultiAttributes.DESCRIPTORS.MULTI_STRING( ) );
    }


}