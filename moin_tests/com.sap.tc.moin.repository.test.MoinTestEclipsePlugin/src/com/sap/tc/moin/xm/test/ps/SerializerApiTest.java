/**
 * Generated by the MOIN XM Generator Version 1.0 .
 */

package com.sap.tc.moin.xm.test.ps;

import java.util.Arrays;

import com.sap.tc.moin.repository.LRI;
import com.sap.tc.moin.repository.MRI;
import com.sap.tc.moin.repository.xm.XmCustomException;
import com.sap.tc.moin.repository.xm.XmException;
import com.sap.tc.moin.repository.xm.serializer.SModelElementHandle;
import com.sap.tc.moin.repository.xm.serializer.SerializerHelper;
import com.sap.tc.moin.repository.xm.serializer.XmlOutputHandler;
import com.sap.tc.moin.testcases.mc.logicalsystem.ClassificationSystemValue;
import com.sap.tc.moin.testcases.mc.logicalsystem.LogicalSystem;
import com.sap.tc.moin.testcases.mc.logicalsystem.SystemClassificationAssociation;
import com.sap.tc.moin.testcases.mc.servicereferences.ServiceReference;
import com.sap.tc.moin.testcases.mc.servicereferences.ServiceReferenceAssociation;

/**
 * Test the SerializerHelper API.
 */
@SuppressWarnings( "nls" )
public class SerializerApiTest extends com.sap.tc.moin.repository.xm.serializer.XmCustomSerializerAbstract {

    /** Prefix for the no-namespace. */
    protected static final java.lang.String PREFIX_ = ""; //$NON-NLS-1$

    /** Prefix for the namespace "http://www.sap.com/webas/2007/03/esoa/config". */
    protected static final java.lang.String PREFIX_ns1 = "ns1"; //$NON-NLS-1$

    /**
     * Prefix for the namespace
     * "http://www.sap.com/webas/2007/03/esoa/config/mc".
     */
    protected static final java.lang.String PREFIX_ns2 = "ns2"; //$NON-NLS-1$

    /**
     * Prefix for the namespace
     * "http://www.sap.com/webas/2007/03/esoa/config/system".
     */
    protected static final java.lang.String PREFIX_ns3 = "ns3"; //$NON-NLS-1$


    /* Qualified names of the XML elements. */
    protected static final java.lang.String ELEMENT_ns2_mass_configuration = PREFIX_ns2 + ":mass-configuration"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns2_logical_systems = PREFIX_ns2 + ":logical-systems"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns2_logical_system = PREFIX_ns2 + ":logical-system"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns3_name = PREFIX_ns3 + ":name"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns3_description = PREFIX_ns3 + ":description"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns3_origin = PREFIX_ns3 + ":origin"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns3_value = PREFIX_ns3 + ":value"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns3_key = PREFIX_ns3 + ":key"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns3_context_restriction = PREFIX_ns3 + ":context-restriction"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns1_reference = PREFIX_ns1 + ":reference"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns1_name = PREFIX_ns1 + ":name"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns1_namespace = PREFIX_ns1 + ":namespace"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns1_logical_system_name = PREFIX_ns1 + ":logical-system-name"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns1_service_references = PREFIX_ns1 + ":service-references"; //$NON-NLS-1$


    /* Qualified names of the XML attributes. */
    protected static final java.lang.String ATTRIBUTE__type = PREFIX_ + "type"; //$NON-NLS-1$


    /**
     * Constructor. Calls the method {@link #registerPrefixes()}.
     */
    public SerializerApiTest( ) {

        super( );
        registerPrefixes( );
    }

    /**
     * Registers the prefixes for the namespaces. For each namespace a prefix
     * must be registered. The registered prefix definitions are written to the
     * output stream by the first call of the method
     * {@link #startTag(java.lang.String)}.
     */
    protected void registerPrefixes( ) {

        registerPrefixForNamespace( "http://www.sap.com/webas/2007/03/esoa/config", PREFIX_ns1 ); //$NON-NLS-1$
        registerPrefixForNamespace( "http://www.sap.com/webas/2007/03/esoa/config/mc", PREFIX_ns2 ); //$NON-NLS-1$
        registerPrefixForNamespace( "http://www.sap.com/webas/2007/03/esoa/config/system", PREFIX_ns3 ); //$NON-NLS-1$    
    }

    @Override
    protected void execute( ) throws com.sap.tc.moin.repository.xm.XmException {


        final StringBuilder errors = new StringBuilder( );
        try {
            this.testTetMriLriGetClassInstance( );
            this.testOutputHandler( errors );
            this.testSerializerHelper_GetLinks( errors );
            this.testSerializerHelper_GetModelElements( errors );
            this.testApi( errors );
            this.testModelElement( errors );
        } catch ( Exception e ) {
            errors.append( "Unexpected Exception: " + e.getClass( ).getName( ) + ": " + e.getMessage( ) );
        }

        if ( errors.length( ) > 0 ) {
            System.setProperty( "com.sap.tc.moin.xm.apitest.failure.importexport", errors.toString( ) );
        }
        // the following lines were added to test the calls of some methods
        /************/
        this.getHelper( ).getOutputHandler( ).startTag( "ns1:test" );
        this.getHelper( ).getOutputHandler( ).addElement( "value", "value" );
        if ( 0 != this.getHelper( ).getOutputHandler( ).getLastIndex( ) ) {
            throw new XmCustomException( "wrong index " + this.getHelper( ).getOutputHandler( ).getLastIndex( ) );
        }
        // test escaping
        this.getHelper( ).getOutputHandler( ).putValue( "test&test\"test'test<test>test \uE000testFFFDtesttest\u10000test\u10FFFFtest\uFFFFFF test\u0020 \u0009 \t \r \f \n" );

        /*************/

    }

    private void testTetMriLriGetClassInstance( ) throws XmException {

        // hard coded logical key "LS1" does fit to mc_SourceMc.xml
        final SModelElementHandle logicalSystem = this.getHelper( ).getModelElement( LogicalSystem.CLASS_DESCRIPTOR, "LS1" );
        if ( logicalSystem == null ) {
            throw new XmCustomException( "Logical System with logical key \"LS1\" not found" );
        }
        // hard coded logical key which fits to mc_SourceMc.xml
        final String[] logicalKey = new String[] { this.getHelper( ).getPri( ).getContainerName( ), this.getHelper( ).getPri( ).getPartitionName( ), "/" + ELEMENT_ns2_mass_configuration + "/" + ELEMENT_ns2_logical_systems + "/" + ELEMENT_ns2_logical_system + "/" + ELEMENT_ns3_value };
        final LRI lri = this.getHelper( ).calculateLri( ClassificationSystemValue.CLASS_DESCRIPTOR, logicalKey );
        final SModelElementHandle classificationSystemValue = this.getHelper( ).getModelElement( this.getHelper( ).getPri( ).createMri( lri.getMofId( ) ) );
        if ( classificationSystemValue == null ) {
            throw new XmCustomException( "ClassificationSystemValue with logical key " + Arrays.toString( logicalKey ) + " not found" );
        }
        if ( !ClassificationSystemValue.CLASS_DESCRIPTOR.equals( classificationSystemValue.getType( ) ) ) {
            throw new XmCustomException( classificationSystemValue.getType( ) + " is not a ClasificationSystmValue class descriptor" );
        }

        // hard coded logical key which fits to mc_SourceMc.xml
        final String[] logicalKeySr = new String[] { this.getHelper( ).getPri( ).getContainerName( ), this.getHelper( ).getPri( ).getPartitionName( ), "/" + ELEMENT_ns2_mass_configuration + "/" + ELEMENT_ns1_service_references + "/" + ELEMENT_ns1_reference };
        final LRI lriSr = this.getHelper( ).calculateLri( ServiceReference.CLASS_DESCRIPTOR, logicalKeySr );
        final SModelElementHandle serviceReference = this.getHelper( ).getModelElement( lriSr );
        if ( serviceReference == null ) {
            throw new XmCustomException( "ServiceReference with MOFID " + Arrays.toString( logicalKeySr ) + "not found" );
        }
        if ( !ServiceReference.CLASS_DESCRIPTOR.equals( serviceReference.getType( ) ) ) {
            throw new XmCustomException( serviceReference.getType( ) + " is not a ServiceReference class descriptor" );
        }
    }

    private void testOutputHandler( final StringBuilder errors ) throws XmException {

        final XmlOutputHandler output = this.getHelper( ).getOutputHandler( );

        boolean success = false;
        try {
            output.closeTag( );
        } catch ( IllegalStateException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "IllegalStateException expected for OutputHandler.closeTag without open tag\n" );
        }

        success = false;
        try {
            output.getCurTag( );
        } catch ( IllegalStateException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "IllegalStateException expected for OutputHandler.getCurTag without open tag\n" );
        }

        success = false;
        try {
            output.addAttribute( "test", null );
        } catch ( NullPointerException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "NullpointerException expected for OutputHandler.addAttribute with null value\n" );
        }

        success = false;
        try {
            output.addAttribute( null, "value" );
        } catch ( NullPointerException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "NullpointerException expected for OutputHandler.addAttribute with null tag name\n" );
        }

        success = false;
        try {
            output.addElement( null, "value" );
        } catch ( NullPointerException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "NullpointerException expected for OutputHandler.addElement with null tag name\n" );
        }

        success = false;
        try {
            output.addElement( "ns1:tag", null );
        } catch ( NullPointerException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "NullpointerException expected for OutputHandler.addElement with null value\n" );
        }

        success = false;
        try {
            output.putValue( null );
        } catch ( NullPointerException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "NullPointerException expected for OutputHandler.putValue with null value\n" );
        }

        success = false;
        try {
            output.startTag( null );
        } catch ( NullPointerException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "NullPointerException expected for OutputHandler.startTag with null tag name\n" );
        }

    }

    private void testSerializerHelper_GetModelElements( final StringBuilder errors ) throws XmException {

        final SerializerHelper helper = this.getHelper( );

        boolean success = false;
        try {
            helper.getModelElements( null );
        } catch ( NullPointerException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "NullpointerException expected for SerializerHelper.getModelElements with null class descriptor\n" );
        }

        success = false;
        try {
            helper.getModelElement( (LRI) null );
        } catch ( NullPointerException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "NullpointerException expected for SerializerHelper.getModelElement with null LRI\n" );
        }

        success = false;
        try {
            helper.getModelElement( (MRI) null );
        } catch ( NullPointerException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "NullpointerException expected for SerializerHelper.getModelElement with null MRI\n" );
        }


        success = false;
        try {
            helper.getModelElement( LogicalSystem.CLASS_DESCRIPTOR, null );
        } catch ( NullPointerException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "NullpointerException expected for SerializerHelper.getModelElement with null logical key\n" );
        }

        success = false;
        try {
            helper.getModelElement( null, "test" );
        } catch ( NullPointerException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "NullpointerException expected for SerializerHelper.getModelElement with null class descriptor\n" );
        }

        success = false;
        try {
            helper.getModelElement( LogicalSystem.CLASS_DESCRIPTOR, new String[0] );
        } catch ( IllegalArgumentException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "IllegalArgumentException expected for SerializerHelper.getModelElement with empty logical key\n" );
        }

        success = false;
        try {
            helper.addNamespacePrefixDeclarations( null );
        } catch ( NullPointerException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "NullpointerException expected for SerializerHelper.addNamespacePrefixDeclarations with null namespace prefix map\n" );
        }

    }

    private void testSerializerHelper_GetLinks( final StringBuilder errors ) throws XmException {

        final SerializerHelper helper = this.getHelper( );
        final SModelElementHandle serviceRef = helper.getModelElements( ServiceReference.CLASS_DESCRIPTOR ).iterator( ).next( );
        final String outputEndName = "logicalSystem";
        boolean success = false;
        try {
            helper.getLinks( null, ServiceReferenceAssociation.ASSOCIATION_DESCRIPTOR, outputEndName );
        } catch ( final NullPointerException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "NullpointerException expected for SerializerHelper.getLinks with null model element\n" );
        }

        success = false;
        try {
            helper.getLinks( serviceRef, null, outputEndName );
        } catch ( final NullPointerException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "NullpointerException expected for SerializerHelper.getLinks with null association descriptor\n" );
        }

        success = false;
        try {
            helper.getLinks( serviceRef, ServiceReferenceAssociation.ASSOCIATION_DESCRIPTOR, null );
        } catch ( final NullPointerException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "NullpointerException expected for SerializerHelper.getLinks with null output end name\n" );
        }


        success = false;
        try {
            helper.getLinks( serviceRef, ServiceReferenceAssociation.ASSOCIATION_DESCRIPTOR, "wrong" );
        } catch ( final IllegalArgumentException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "IllegalArgumentException expected for SerializerHelper.getLinks with wrong output end name\n" );
        }

        // wrong association descriptor
        success = false;
        try {
            helper.getLinks( serviceRef, SystemClassificationAssociation.ASSOCIATION_DESCRIPTOR, "system" );
        } catch ( final IllegalArgumentException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "IllegalArgumentException expected for SerializerHelper.getLinks with wrong association\n" );
        }

    }

    private void testModelElement( final StringBuilder errors ) throws XmException {

        final SerializerHelper helper = this.getHelper( );
        final SModelElementHandle serviceRef = helper.getModelElements( ServiceReference.CLASS_DESCRIPTOR ).iterator( ).next( );
        boolean success = false;
        try {
            serviceRef.getAttribute( null );
        } catch ( NullPointerException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "NullpointerException expected for SModelElementHandle.getAttribute with null attribute descriptor\n" );
        }

        success = false;
        try {
            serviceRef.getAttribute( LogicalSystem.DESCRIPTORS.ORIGIN( ) );
        } catch ( IllegalArgumentException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "IllegalArgumentException expected for SModelElementHandle.getAttribute with an invalid attribute descriptor\n" );
        }

    }

    private void testApi( final StringBuilder errors ) throws XmException {


        boolean success = false;
        try {
            this.getModelElements( null );
        } catch ( NullPointerException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "NullpointerException expected for getModelElements with null class descriptor\n" );
        }

        success = false;
        try {
            this.getModelElement( LogicalSystem.CLASS_DESCRIPTOR, null );
        } catch ( NullPointerException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "NullpointerException expected for getModelElement with null logical key\n" );
        }

        success = false;
        try {
            this.getModelElement( null, "test" );
        } catch ( NullPointerException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "NullPointerException expected for getModelElement with null class descriptor\n" );
        }

        success = false;
        try {
            this.getModelElement( LogicalSystem.CLASS_DESCRIPTOR, new String[0] );
        } catch ( IllegalArgumentException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "IllegalArgumentException expected for getModelElement with empty logical key\n" );
        }

        final SModelElementHandle serviceRef = this.getModelElements( ServiceReference.CLASS_DESCRIPTOR ).iterator( ).next( );
        final String outputEndName = "logicalSystem";
        success = false;
        try {
            this.getLinks( null, ServiceReferenceAssociation.ASSOCIATION_DESCRIPTOR, outputEndName );
        } catch ( final NullPointerException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "NullPointerException expected for getLinks with null model element\n" );
        }

        success = false;
        try {
            this.getLinks( serviceRef, null, outputEndName );
        } catch ( final NullPointerException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "NullPointerException expected for getLinks with null association descriptor\n" );
        }

        success = false;
        try {
            this.getLinks( serviceRef, ServiceReferenceAssociation.ASSOCIATION_DESCRIPTOR, null );
        } catch ( final NullPointerException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "NullPointerException expected for getLinks with null output end name\n" );
        }


        success = false;
        try {
            this.getLinks( serviceRef, ServiceReferenceAssociation.ASSOCIATION_DESCRIPTOR, "wrong" );
        } catch ( final IllegalArgumentException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "IllegalArgumentException expected for getLinks with wrong output end name\n" );
        }

        // wrong association descriptor
        success = false;
        try {
            this.getLinks( serviceRef, SystemClassificationAssociation.ASSOCIATION_DESCRIPTOR, "system" );
        } catch ( final IllegalArgumentException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "IllegalArgumentException expected for getLinks with wrong association\n" );
        }

    }

}