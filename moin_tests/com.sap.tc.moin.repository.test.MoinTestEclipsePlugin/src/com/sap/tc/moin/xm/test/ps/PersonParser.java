/**
 * Generated by the MOIN XM Generator Version 1.0 .
 */

package com.sap.tc.moin.xm.test.ps;

import com.sap.tc.moin.testcases.mc.test.Address;
import com.sap.tc.moin.testcases.mc.test.AddressesOfPerson;
import com.sap.tc.moin.testcases.mc.test.Company;
import com.sap.tc.moin.testcases.mc.test.Customer;
import com.sap.tc.moin.testcases.mc.test.CustomersOrEmployeesOfCompany;
import com.sap.tc.moin.testcases.mc.test.Employee;
import com.sap.tc.moin.testcases.mc.test.Equipment;
import com.sap.tc.moin.testcases.mc.test.EquipmentsOfEmployee;
import com.sap.tc.moin.testcases.mc.test.Street;
import com.sap.tc.moin.testcases.mc.test.StreetOfAddress;

/**
 * Parser handler for XML documents valid to the XML schema
 * "/LocalDevelopment~LocalDevelopment~abc~demo.sap.com/test/testPerson.xsd".
 */
public class PersonParser extends com.sap.tc.moin.repository.xm.parser.XmParserHandlerAbstract {

    /** Prefix for the no-namespace. */
    protected static final java.lang.String PREFIX_ = ""; //$NON-NLS-1$

    /** Prefix for the namespace "http://sap.com/moin/xm/test/Person". */
    protected static final java.lang.String PREFIX_ns1 = "ns1"; //$NON-NLS-1$


    /* Local names of the XML elements. */
    protected static final java.lang.String ELEMENT_address = "address"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_town = "town"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_street = "street"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_name = "name"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_number = "number"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_company = "company"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_title = "title"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_equipment = "equipment"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_employee = "employee"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_customer = "customer"; //$NON-NLS-1$


    /* Local names of the XML attributes. */
    protected static final java.lang.String ATTRIBUTE_id = "id"; //$NON-NLS-1$


    /**
     * Constructor. Calls the methods {@link #registerPrefixes()} and
     * {@link #registerHandlers()}.
     */
    public PersonParser( ) {

        super( );
        registerPrefixes( );
        registerHandlers( );
    }

    /**
     * Registers the prefixes for the namespaces. For each namespace in the
     * source XML document a prefix must be registered.
     */
    protected void registerPrefixes( ) {

        registerPrefixForNamespace( "http://sap.com/moin/xm/test/Person", PREFIX_ns1 ); //$NON-NLS-1$    
    }

    /**
     * Registers sub-handler instances to which this handler will dispatch the
     * SAX events. The qualified class name of the sub-handler classes are used
     * as registration IDs.
     * <p>
     * If you want to replace an instance with the registration ID
     * "com.sap.example.NodeTest" by your own implementation "MyNode" then you
     * have to call the method
     * {@link com.sap.tc.moin.repository.xm.parser.XmParserHandlerAbstract#registerHandler(java.lang.String, com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler)}
     * with id ="com.sap.example.NodeTest" and handler="new MyNode(this)".
     * <p>
     * If you want that a certain XML element with its sub-elements is not
     * mapped to MOIN entities, then you must unregister the corresponding
     * sub-handler; use the method
     * {@link com.sap.tc.moin.repository.xm.parser.XmParserHandlerAbstract#unregisterHandler(java.lang.String)}
     * .
     */
    protected void registerHandlers( ) {

        registerHandler( Ns1EAddress.class.getName( ), new Ns1EAddress( this ) );
        registerHandler( LNs1EAddress_L_Ns1Street.class.getName( ), new LNs1EAddress_L_Ns1Street( this ) );
        registerHandler( Ns1ECompany.class.getName( ), new Ns1ECompany( this ) );
        registerHandler( Ns1EEmployee.class.getName( ), new Ns1EEmployee( this ) );
        registerHandler( Ns1EEquipment.class.getName( ), new Ns1EEquipment( this ) );
        registerHandler( Ns1CPerson.class.getName( ), new Ns1CPerson( this ) );
    }

    @Override
    protected void rootElementStarted( ) {

        //createOrGetModelElementAndPutToTopStackEntry( com.sap.moin.xm.test.person.DocumentRoot.CLASS_DESCRIPTOR, getClass( ).getName( ) );
    }

    @Override
    protected com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler getRootComplexTypeHandler( final java.lang.String localName, final java.lang.String prefix ) throws com.sap.tc.moin.repository.xm.XmException {

        if ( PREFIX_ns1.equals( prefix ) ) {
            if ( ELEMENT_address.equals( localName ) ) {
                return getHandler( Ns1EAddress.class.getName( ) );
            }
            if ( ELEMENT_company.equals( localName ) ) {
                return getHandler( Ns1ECompany.class.getName( ) );
            }
            if ( ELEMENT_customer.equals( localName ) ) {
                return getHandler( Ns1CPerson.class.getName( ) );
            }
            if ( ELEMENT_employee.equals( localName ) ) {
                return getHandler( Ns1EEmployee.class.getName( ) );
            }
            if ( ELEMENT_equipment.equals( localName ) ) {
                return getHandler( Ns1EEquipment.class.getName( ) );
            }

        }

        return null;
    }

    @Override
    protected void rootElementClosed( final com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler childHandler, final java.lang.String childPrefix, final java.lang.String childLocalName ) throws com.sap.tc.moin.repository.xm.XmException {

//        if ( PREFIX_ns1.equals( childPrefix ) ) {
//            if ( ELEMENT_address.equals( childLocalName ) ) {
//                createLink( getStack( ).getModelElement( childHandler.getClass( ).getName( ) ), getStack( ).getModelElement( getClass( ).getName( ) ), com.sap.moin.xm.test.person.DocumentRootAddress.ASSOCIATION_DESCRIPTOR, "address" ); //$NON-NLS-1$
//            } else if ( ELEMENT_company.equals( childLocalName ) ) {
//                createLink( getStack( ).getModelElement( childHandler.getClass( ).getName( ) ), getStack( ).getModelElement( getClass( ).getName( ) ), com.sap.moin.xm.test.person.DocumentRootCompany.ASSOCIATION_DESCRIPTOR, "company" ); //$NON-NLS-1$
//            } else if ( ELEMENT_customer.equals( childLocalName ) ) {
//                createLink( getStack( ).getModelElement( childHandler.getClass( ).getName( ) ), getStack( ).getModelElement( getClass( ).getName( ) ), com.sap.moin.xm.test.person.DocumentRootPerson.ASSOCIATION_DESCRIPTOR, "person" ); //$NON-NLS-1$
//            } else if ( ELEMENT_employee.equals( childLocalName ) ) {
//                createLink( getStack( ).getModelElement( childHandler.getClass( ).getName( ) ), getStack( ).getModelElement( getClass( ).getName( ) ), com.sap.moin.xm.test.person.DocumentRootEmployee.ASSOCIATION_DESCRIPTOR, "employee" ); //$NON-NLS-1$
//            } else if ( ELEMENT_equipment.equals( childLocalName ) ) {
//                createLink( getStack( ).getModelElement( childHandler.getClass( ).getName( ) ), getStack( ).getModelElement( getClass( ).getName( ) ), com.sap.moin.xm.test.person.DocumentRootEquipment.ASSOCIATION_DESCRIPTOR, "equipment" ); //$NON-NLS-1$
//            }

//        }
    }


    /* --------------------------- sub-handlers ---------------- */

    /**
     * Handler for global element declaration
     * "address (http://sap.com/moin/xm/test/Person)".
     */
    public static class Ns1EAddress extends com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler {

        public Ns1EAddress( final com.sap.tc.moin.repository.xm.parser.XmParserHandlerAbstract parser ) {

            super( parser );
        }

        @Override
        public void elementStarted( final java.lang.String value ) {

            createOrGetModelElementAndPutToTopStackEntry( Address.CLASS_DESCRIPTOR, getClass( ).getName( ) );
        }

        @Override
        public com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler getChild( final java.lang.String childName, final java.lang.String childPrefix ) {

            if ( PREFIX_ns1.equals( childPrefix ) ) {
                if ( ELEMENT_street.equals( childName ) ) {
                    return getHandler( LNs1EAddress_L_Ns1Street.class.getName( ) );
                }

            }

            return null;
        }

        @Override
        public boolean addSimpleElementOrAttribute( final java.lang.String localName, final java.lang.String prefix, final com.sap.tc.moin.repository.xm.parser.NodeType type, final java.lang.String value ) throws com.sap.tc.moin.repository.xm.XmException {

            if ( com.sap.tc.moin.repository.xm.parser.NodeType.Element.equals( type ) ) {
                if ( PREFIX_ns1.equals( prefix ) ) {
                    if ( ELEMENT_town.equals( localName ) ) {
                        setOrAddAttributeValue( getClass( ).getName( ), Address.DESCRIPTORS.TOWN( ), value );
                        return true;
                    }
                }

            }
            return false;
        }

        @Override
        public void childClosed( final com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler childHandler, final java.lang.String childPrefix, final java.lang.String childLocalName ) throws com.sap.tc.moin.repository.xm.XmException {

            if ( PREFIX_ns1.equals( childPrefix ) ) {
                if ( ELEMENT_street.equals( childLocalName ) ) {
                    createLink( childHandler.getClass( ).getName( ), getClass( ).getName( ), StreetOfAddress.ASSOCIATION_DESCRIPTOR, "street" ); //$NON-NLS-1$
                }
            }
        }
    }

    /**
     * Handler for local element declaration
     * "street (http://sap.com/moin/xm/test/Person)".
     */
    public static class LNs1EAddress_L_Ns1Street extends com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler {

        public LNs1EAddress_L_Ns1Street( final com.sap.tc.moin.repository.xm.parser.XmParserHandlerAbstract parser ) {

            super( parser );
        }

        @Override
        public void elementStarted( final java.lang.String value ) {

            createOrGetModelElementAndPutToTopStackEntry( Street.CLASS_DESCRIPTOR, getClass( ).getName( ) );
        }

        @Override
        public boolean addSimpleElementOrAttribute( final java.lang.String localName, final java.lang.String prefix, final com.sap.tc.moin.repository.xm.parser.NodeType type, final java.lang.String value ) throws com.sap.tc.moin.repository.xm.XmException {

            if ( com.sap.tc.moin.repository.xm.parser.NodeType.Element.equals( type ) ) {
                if ( PREFIX_ns1.equals( prefix ) ) {
                    if ( ELEMENT_name.equals( localName ) ) {
                        setOrAddAttributeValue( getClass( ).getName( ), Street.DESCRIPTORS.NAME( ), value );
                        return true;
                    }
                    if ( ELEMENT_number.equals( localName ) ) {
                        setOrAddAttributeValue( getClass( ).getName( ), Street.DESCRIPTORS.NUMBER( ), value );
                        return true;
                    }
                }

            }
            return false;
        }
    }

    /**
     * Handler for global element declaration
     * "company (http://sap.com/moin/xm/test/Person)".
     */
    public static class Ns1ECompany extends com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler {

        public Ns1ECompany( final com.sap.tc.moin.repository.xm.parser.XmParserHandlerAbstract parser ) {

            super( parser );
        }

        @Override
        public void elementStarted( final java.lang.String value ) {

            createOrGetModelElementAndPutToTopStackEntry( Company.CLASS_DESCRIPTOR, getClass( ).getName( ) );
        }

        @Override
        public com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler getChild( final java.lang.String childName, final java.lang.String childPrefix ) {

            if ( PREFIX_ns1.equals( childPrefix ) ) {
                if ( ELEMENT_employee.equals( childName ) ) {
                    return getHandler( Ns1EEmployee.class.getName( ) );
                }
                if ( ELEMENT_customer.equals( childName ) ) {
                    return getHandler( Ns1CPerson.class.getName( ) );
                }

            }

            return null;
        }

        @Override
        public void childClosed( final com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler childHandler, final java.lang.String childPrefix, final java.lang.String childLocalName ) throws com.sap.tc.moin.repository.xm.XmException {

            if ( PREFIX_ns1.equals( childPrefix ) ) {
                if ( ELEMENT_employee.equals( childLocalName ) ) {
                    createLink( childHandler.getClass( ).getName( ), getClass( ).getName( ), CustomersOrEmployeesOfCompany.ASSOCIATION_DESCRIPTOR, "persons" ); //$NON-NLS-1$
                } else if ( ELEMENT_customer.equals( childLocalName ) ) {
                    createLink( childHandler.getClass( ).getName( ), getClass( ).getName( ), CustomersOrEmployeesOfCompany.ASSOCIATION_DESCRIPTOR, "persons" ); //$NON-NLS-1$
                }

            }
        }
    }

    /**
     * Handler for global element declaration
     * "employee (http://sap.com/moin/xm/test/Person)".
     */
    public static class Ns1EEmployee extends com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler {

        public Ns1EEmployee( final com.sap.tc.moin.repository.xm.parser.XmParserHandlerAbstract parser ) {

            super( parser );
        }

        @Override
        public void elementStarted( final java.lang.String value ) {

            createOrGetModelElementAndPutToTopStackEntry( Employee.CLASS_DESCRIPTOR, getClass( ).getName( ) );
        }

        @Override
        public com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler getChild( final java.lang.String childName, final java.lang.String childPrefix ) {

            if ( PREFIX_ns1.equals( childPrefix ) ) {
                if ( ELEMENT_address.equals( childName ) ) {
                    return getHandler( Ns1EAddress.class.getName( ) );
                }
                if ( ELEMENT_equipment.equals( childName ) ) {
                    return getHandler( Ns1EEquipment.class.getName( ) );
                }

            }

            return null;
        }

        @Override
        public boolean addSimpleElementOrAttribute( final java.lang.String localName, final java.lang.String prefix, final com.sap.tc.moin.repository.xm.parser.NodeType type, final java.lang.String value ) throws com.sap.tc.moin.repository.xm.XmException {

            if ( com.sap.tc.moin.repository.xm.parser.NodeType.Element.equals( type ) ) {
                if ( PREFIX_ns1.equals( prefix ) ) {
                    if ( ELEMENT_name.equals( localName ) ) {
                        setOrAddAttributeValue( getClass( ).getName( ), Employee.DESCRIPTORS.NAME( ), value );
                        return true;
                    }
                    if ( ELEMENT_title.equals( localName ) ) {
                        setOrAddAttributeValue( getClass( ).getName( ), Employee.DESCRIPTORS.TITLE( ), value );
                        return true;
                    }
                }

            }
            return false;
        }

        @Override
        public void childClosed( final com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler childHandler, final java.lang.String childPrefix, final java.lang.String childLocalName ) throws com.sap.tc.moin.repository.xm.XmException {

            if ( PREFIX_ns1.equals( childPrefix ) ) {
                if ( ELEMENT_address.equals( childLocalName ) ) {
                    createLink( childHandler.getClass( ).getName( ), getClass( ).getName( ), AddressesOfPerson.ASSOCIATION_DESCRIPTOR, "addresses" ); //$NON-NLS-1$
                } else if ( ELEMENT_equipment.equals( childLocalName ) ) {
                    createLink( childHandler.getClass( ).getName( ), getClass( ).getName( ), EquipmentsOfEmployee.ASSOCIATION_DESCRIPTOR, "equipments" ); //$NON-NLS-1$
                }

            }
        }
    }

    /**
     * Handler for global element declaration
     * "equipment (http://sap.com/moin/xm/test/Person)".
     */
    public static class Ns1EEquipment extends com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler {

        public Ns1EEquipment( final com.sap.tc.moin.repository.xm.parser.XmParserHandlerAbstract parser ) {

            super( parser );
        }

        @Override
        public void elementStarted( final java.lang.String value ) {

            createOrGetModelElementAndPutToTopStackEntry( Equipment.CLASS_DESCRIPTOR, getClass( ).getName( ) );
        }

        @Override
        public boolean addSimpleElementOrAttribute( final java.lang.String localName, final java.lang.String prefix, final com.sap.tc.moin.repository.xm.parser.NodeType type, final java.lang.String value ) throws com.sap.tc.moin.repository.xm.XmException {

            if ( com.sap.tc.moin.repository.xm.parser.NodeType.Attribute.equals( type ) ) {
                if ( PREFIX_.equals( prefix ) ) {
                    if ( ATTRIBUTE_id.equals( localName ) ) {
                        setOrAddAttributeValue( getClass( ).getName( ), Equipment.DESCRIPTORS.ID( ), value );
                        return true;
                    }
                }

            }
            return false;
        }
    }

    /**
     * Handler for global complex type definition
     * "person (http://sap.com/moin/xm/test/Person)".
     */
    public static class Ns1CPerson extends com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler {

        public Ns1CPerson( final com.sap.tc.moin.repository.xm.parser.XmParserHandlerAbstract parser ) {

            super( parser );
        }

        @Override
        public void elementStarted( final java.lang.String value ) {

            createOrGetModelElementAndPutToTopStackEntry( Customer.CLASS_DESCRIPTOR, getClass( ).getName( ) );
        }

        @Override
        public com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler getChild( final java.lang.String childName, final java.lang.String childPrefix ) {

            if ( PREFIX_ns1.equals( childPrefix ) ) {
                if ( ELEMENT_address.equals( childName ) ) {
                    return getHandler( Ns1EAddress.class.getName( ) );
                }

            }

            return null;
        }

        @Override
        public boolean addSimpleElementOrAttribute( final java.lang.String localName, final java.lang.String prefix, final com.sap.tc.moin.repository.xm.parser.NodeType type, final java.lang.String value ) throws com.sap.tc.moin.repository.xm.XmException {

            if ( com.sap.tc.moin.repository.xm.parser.NodeType.Element.equals( type ) ) {
                if ( PREFIX_ns1.equals( prefix ) ) {
                    if ( ELEMENT_name.equals( localName ) ) {
                        setOrAddAttributeValue( getClass( ).getName( ), Customer.DESCRIPTORS.NAME( ), value );
                        return true;
                    }
                    if ( ELEMENT_title.equals( localName ) ) {
                        setOrAddAttributeValue( getClass( ).getName( ), Customer.DESCRIPTORS.TITLE( ), value );
                        return true;
                    }
                }

            }
            return false;
        }

        @Override
        public void childClosed( final com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler childHandler, final java.lang.String childPrefix, final java.lang.String childLocalName ) throws com.sap.tc.moin.repository.xm.XmException {

            if ( PREFIX_ns1.equals( childPrefix ) ) {
                if ( ELEMENT_address.equals( childLocalName ) ) {
                    createLink( childHandler.getClass( ).getName( ), getClass( ).getName( ), AddressesOfPerson.ASSOCIATION_DESCRIPTOR, "addresses" ); //$NON-NLS-1$
                }
            }
        }
    }

}