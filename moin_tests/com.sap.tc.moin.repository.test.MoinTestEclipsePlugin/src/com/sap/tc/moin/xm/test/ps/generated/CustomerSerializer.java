/**
 * Generated by the MOIN XM Generator Version 1.0 .
 */

package com.sap.tc.moin.xm.test.ps.generated;

/**
 * XM Serializer for XML documents which are valid to the XML schema
 * "bundleresource://177/com/sap/tc/moin/repository/test/extensions/xm/generation/xsd/customer.xsd".
 */
public class CustomerSerializer extends com.sap.tc.moin.repository.xm.serializer.XmCustomSerializerAbstract {

     /** Prefix for the no-namespace.  */
    protected static final java.lang.String PREFIX_ = ""; //$NON-NLS-1$
    
    /** Prefix for the namespace "http://www.sap.com/moin/xm/test/customer". */
    protected static final java.lang.String PREFIX_ns1 = "ns1"; //$NON-NLS-1$


    /* Qualified names of the XML elements. */
    protected static final java.lang.String ELEMENT_ns1_Customer = PREFIX_ns1 + ":Customer"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT__name = PREFIX_ + "name"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT__Address = PREFIX_ + "Address"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT__street = PREFIX_ + "street"; //$NON-NLS-1$


    /*Qualified names of the XML attributes. */
    protected static final java.lang.String ATTRIBUTE__ID = PREFIX_ + "ID"; //$NON-NLS-1$


    /**
     * Constructor. Calls the method {@link #registerPrefixes()}.
     */
    public CustomerSerializer( ) {
    
        super();
        registerPrefixes( );  
    }

    /**
     * Registers the prefixes for the namespaces. For each namespace a prefix
     * must be registered. The registered prefix definitions are written to the output
     * stream by the first call of the method {@link #startTag(java.lang.String)}.
     */
    protected void registerPrefixes( ) {
    
        registerPrefixForNamespace( "http://www.sap.com/moin/xm/test/customer", PREFIX_ns1 ); //$NON-NLS-1$    
    }
    
    @Override
    protected void execute( ) throws com.sap.tc.moin.repository.xm.XmException {
    
        for ( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle modelElement : getModelElements( com.sap.moin.xm.test.customer.DocumentRoot.CLASS_DESCRIPTOR ) ) {
           writeNs1RDocumentRoot( modelElement );
        }
    }
    
    /**
     * Writes the content model of the document root "DocumentRoot (http://www.sap.com/moin/xm/test/customer)" to the output stream.
     * 
     * @param modelElement model element from which attribute values or links are read
     * @throws com.sap.tc.moin.repository.xm.XmException can be used for error
     * handling, this implementation does not throw such an exception
     * @throws NullpointerException if the parameter is <code>null</code> 
     */
    protected void writeNs1RDocumentRoot( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle modelElement ) throws com.sap.tc.moin.repository.xm.XmException {
    
    	for ( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle linkedModelElement : getLinks( modelElement, com.sap.moin.xm.test.customer.DocumentRootCustomer.ASSOCIATION_DESCRIPTOR, "customer" ) ) { //$NON-NLS-1$
    	    startTag( ELEMENT_ns1_Customer );
    	    writeNs1CCustomer( linkedModelElement ); 
    	    closeTag( );
    	}	
    }

    /**
     * Writes the content model of the global complex type definition "Customer (http://www.sap.com/moin/xm/test/customer)" to the output stream.
     * 
     * @param modelElement model element from which attribute values or links are read
     * @throws com.sap.tc.moin.repository.xm.XmException can be used for error
     * handling, this implementation does not throw such an exception
     * @throws NullpointerException if the parameter is <code>null</code> 
     */
    protected void writeNs1CCustomer( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle modelElement ) throws com.sap.tc.moin.repository.xm.XmException {
    
    	addAttribute( ATTRIBUTE__ID, modelElement, com.sap.moin.xm.test.customer.Customer.DESCRIPTORS.I_D( ) );
    	addElement( ELEMENT__name, modelElement, com.sap.moin.xm.test.customer.Customer.DESCRIPTORS.NAME( ) );
    	for ( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle linkedModelElement : getLinks( modelElement, com.sap.moin.xm.test.customer.PersonAddress.ASSOCIATION_DESCRIPTOR, "address" ) ) { //$NON-NLS-1$
    	    startTag( ELEMENT__Address );
    	    writeLNs1CCustomer_L_Address( linkedModelElement ); 
    	    closeTag( );
    	}	
    }

    /**
     * Writes the content model of the local element declaration "Address" to the output stream.
     * 
     * @param modelElement model element from which attribute values or links are read
     * @throws com.sap.tc.moin.repository.xm.XmException can be used for error
     * handling, this implementation does not throw such an exception
     * @throws NullpointerException if the parameter is <code>null</code> 
     */
    protected void writeLNs1CCustomer_L_Address( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle modelElement ) throws com.sap.tc.moin.repository.xm.XmException {
    
    	addElement( ELEMENT__street, modelElement, com.sap.moin.xm.test.customer.Address.DESCRIPTORS.STREET( ) );
    }
  

    
}