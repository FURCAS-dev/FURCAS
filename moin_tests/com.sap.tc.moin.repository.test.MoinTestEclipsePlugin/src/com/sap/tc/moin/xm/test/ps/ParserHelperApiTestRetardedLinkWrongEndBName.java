/**
 * Generated by the MOIN XM Generator Version 1.0 .
 */

package com.sap.tc.moin.xm.test.ps;

import com.sap.tc.moin.repository.mmi.descriptors.ClassDescriptor;
import com.sap.tc.moin.repository.xm.XmException;
import com.sap.tc.moin.repository.xm.parser.PModelElementHandle;
import com.sap.tc.moin.repository.xm.parser.ParserHelper;
import com.sap.tc.moin.testcases.mc.logicalsystem.LogicalSystem;
import com.sap.tc.moin.testcases.mc.servicereferences.ServiceReference;
import com.sap.tc.moin.testcases.mc.servicereferences.ServiceReferenceAssociation;


/**
 * Tests the the creation of a retarded link with a wrong end B name. This will
 * cause an XmException at the end of the parsing.
 */
@SuppressWarnings( "nls" )
public class ParserHelperApiTestRetardedLinkWrongEndBName extends com.sap.tc.moin.repository.xm.parser.XmParserHandlerAbstract {

    /** Prefix for the no-namespace. */
    protected static final java.lang.String PREFIX_ = ""; //$NON-NLS-1$

    /** Prefix for the namespace "http://www.sap.com/webas/2007/03/esoa/config". */
    protected static final java.lang.String PREFIX_ns1 = "ns1"; //$NON-NLS-1$

    /**
     * Prefix for the namespace
     * "http://www.sap.com/webas/2007/03/esoa/config/mc".
     */
    protected static final java.lang.String PREFIX_ns2 = "ns2"; //$NON-NLS-1$

    /**
     * Prefix for the namespace
     * "http://www.sap.com/webas/2007/03/esoa/config/system".
     */
    protected static final java.lang.String PREFIX_ns3 = "ns3"; //$NON-NLS-1$


    /* Local names of the XML elements. */
    protected static final java.lang.String ELEMENT_mass_configuration = "mass-configuration"; //$NON-NLS-1$



    /* Local names of the XML attributes. */
    protected static final java.lang.String ATTRIBUTE_type = "type"; //$NON-NLS-1$


    /**
     * Constructor. Calls the methods {@link #registerPrefixes()} and
     * {@link #registerHandlers()}.
     */
    public ParserHelperApiTestRetardedLinkWrongEndBName( ) {

        super( );
        registerPrefixes( );
        registerHandlers( );
    }

    /**
     * Registers the prefixes for the namespaces. For each namespace in the
     * source XML document a prefix must be registered.
     */
    protected void registerPrefixes( ) {

        registerPrefixForNamespace( "http://www.sap.com/webas/2007/03/esoa/config", PREFIX_ns1 ); //$NON-NLS-1$
        registerPrefixForNamespace( "http://www.sap.com/webas/2007/03/esoa/config/mc", PREFIX_ns2 ); //$NON-NLS-1$
        registerPrefixForNamespace( "http://www.sap.com/webas/2007/03/esoa/config/system", PREFIX_ns3 ); //$NON-NLS-1$    
    }

    /**
     * Registers sub-handler instances to which this handler will dispatch the
     * SAX events. The qualified class name of the sub-handler classes are used
     * as registration IDs.
     * <p>
     * If you want to replace an instance with the registration ID
     * "com.sap.example.NodeTest" by your own implementation "MyNode" then you
     * have to call the method
     * {@link com.sap.tc.moin.repository.xm.parser.XmParserHandlerAbstract#registerHandler(java.lang.String, com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler)}
     * with id ="com.sap.example.NodeTest" and handler="new MyNode(this)".
     * <p>
     * If you want that a certain XML element with its sub-elements is not
     * mapped to MOIN entities, then you must unregister the corresponding
     * sub-handler; use the method
     * {@link com.sap.tc.moin.repository.xm.parser.XmParserHandlerAbstract#unregisterHandler(java.lang.String)}
     * .
     */
    protected void registerHandlers( ) {

        registerHandler( Ns2EMass_configuration.class.getName( ), new Ns2EMass_configuration( this ) );
    }

    @Override
    public com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler getRootComplexTypeHandler( final java.lang.String localName, final java.lang.String prefix ) throws com.sap.tc.moin.repository.xm.XmException {


        /*** -------------- tests --------------- */

        this.testCreateLinkLogicalKey( );
        /**** --------end tests--------- */



        if ( PREFIX_ns2.equals( prefix ) ) {
            if ( ELEMENT_mass_configuration.equals( localName ) ) {
                return getHandler( Ns2EMass_configuration.class.getName( ) );
            }

        }
        return null;
    }

/**
     * Creates a retarded link with a wrong end B name.
     * {@link ParserHelper#createLink(com.sap.tc.moin.repository.mmi.descriptors.AssociationDescriptor, String, PModelElementHandle, ClassDescriptor, String...)
     * .
     * 
     * @throws XmException
     */
    private void testCreateLinkLogicalKey( ) throws XmException {


        final ParserHelper helper = this.getHelper( );


        PModelElementHandle serviceRef = helper.getOrCreateModelElement( ServiceReference.CLASS_DESCRIPTOR );

        // wrong endBname, retarded link creation
        try {
            helper.createLink( ServiceReferenceAssociation.ASSOCIATION_DESCRIPTOR, "wrong", serviceRef, LogicalSystem.CLASS_DESCRIPTOR, "test2" );
        } catch ( Exception e ) {
            // should not occur here, but at the end of the parsing

        }
    }

    /* --------------------------- sub-handlers ---------------- */

    /**
     * Handler for global element declaration
     * "mass-configuration (http://www.sap.com/webas/2007/03/esoa/config/mc)".
     */
    public static class Ns2EMass_configuration extends com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler {

        public Ns2EMass_configuration( final com.sap.tc.moin.repository.xm.parser.XmParserHandlerAbstract parser ) {

            super( parser );
        }

        @Override
        public void elementStarted( final String value ) {

            //createOrGetModelElementAndPutToTopStackEntry( com.sap.webas.v2007.v03.esoa.config.mc.MassConfiguration.CLASS_DESCRIPTOR, getClass( ).getName( ) );
        }

        @Override
        public com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler getChild( final java.lang.String childName, final java.lang.String childPrefix ) {

            return null;
        }

        @Override
        public void childClosed( final com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler child, final String childPrefix, final String childLocalName ) throws com.sap.tc.moin.repository.xm.XmException {

//            if ( this.getChild( ELEMENT_logical_systems, PREFIX_ns2 ) == child ) {
//                createLink( child.getClass( ).getName( ), this.getClass( ).getName( ), com.sap.webas.v2007.v03.esoa.config.mc.MassConfigurationLogicalSystems.ASSOCIATION_DESCRIPTOR, "logicalSystems" ); //$NON-NLS-1$
//            } else if ( this.getChild( ELEMENT_service_references, PREFIX_ns1 ) == child ) {
//                createLink( child.getClass( ).getName( ), this.getClass( ).getName( ), com.sap.webas.v2007.v03.esoa.config.mc.MassConfigurationServiceReferences.ASSOCIATION_DESCRIPTOR, "serviceReferences" ); //$NON-NLS-1$
//            }

        }
    }

}