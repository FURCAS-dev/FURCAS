/**
 * Generated by the MOIN XM Generator Version 1.0 .
 */

package com.sap.tc.moin.xm.test.ps.generated;

/**
 * XM Serializer for XML documents which are valid to the XML schema
 * "bundleresource://177/com/sap/tc/moin/repository/test/extensions/xm/generation/xsd/recursive.xsd".
 */
public class RecursiveSerializer extends com.sap.tc.moin.repository.xm.serializer.XmCustomSerializerAbstract {

     /** Prefix for the no-namespace.  */
    protected static final java.lang.String PREFIX_ = ""; //$NON-NLS-1$
    
    /** Prefix for the namespace "http://sap.com/moin/xm/test/recursive". */
    protected static final java.lang.String PREFIX_ns1 = "ns1"; //$NON-NLS-1$


    /* Qualified names of the XML elements. */
    protected static final java.lang.String ELEMENT_ns1_field = PREFIX_ns1 + ":field"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns1_name = PREFIX_ns1 + ":name"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns1_type = PREFIX_ns1 + ":type"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns1_structure = PREFIX_ns1 + ":structure"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns1_structures = PREFIX_ns1 + ":structures"; //$NON-NLS-1$


    /**
     * Constructor. Calls the method {@link #registerPrefixes()}.
     */
    public RecursiveSerializer( ) {
    
        super();
        registerPrefixes( );  
    }

    /**
     * Registers the prefixes for the namespaces. For each namespace a prefix
     * must be registered. The registered prefix definitions are written to the output
     * stream by the first call of the method {@link #startTag(java.lang.String)}.
     */
    protected void registerPrefixes( ) {
    
        registerPrefixForNamespace( "http://sap.com/moin/xm/test/recursive", PREFIX_ns1 ); //$NON-NLS-1$    
    }
    
    @Override
    protected void execute( ) throws com.sap.tc.moin.repository.xm.XmException {
    
        for ( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle modelElement : getModelElements( com.sap.moin.xm.test.recursive.DocumentRoot.CLASS_DESCRIPTOR ) ) {
           writeNs1RDocumentRoot( modelElement );
        }
    }
    
    /**
     * Writes the content model of the document root "DocumentRoot (http://sap.com/moin/xm/test/recursive)" to the output stream.
     * 
     * @param modelElement model element from which attribute values or links are read
     * @throws com.sap.tc.moin.repository.xm.XmException can be used for error
     * handling, this implementation does not throw such an exception
     * @throws NullpointerException if the parameter is <code>null</code> 
     */
    protected void writeNs1RDocumentRoot( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle modelElement ) throws com.sap.tc.moin.repository.xm.XmException {
    
    	for ( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle linkedModelElement : getLinks( modelElement, com.sap.moin.xm.test.recursive.DocumentRootFieldType.ASSOCIATION_DESCRIPTOR, "fieldType" ) ) { //$NON-NLS-1$
    	    startTag( ELEMENT_ns1_field );
    	    writeNs1CFieldType( linkedModelElement ); 
    	    closeTag( );
    	}	
    	for ( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle linkedModelElement : getLinks( modelElement, com.sap.moin.xm.test.recursive.DocumentRootStructureType.ASSOCIATION_DESCRIPTOR, "structureType" ) ) { //$NON-NLS-1$
    	    startTag( ELEMENT_ns1_structure );
    	    writeNs1CStructureType( linkedModelElement ); 
    	    closeTag( );
    	}	
    	for ( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle linkedModelElement : getLinks( modelElement, com.sap.moin.xm.test.recursive.DocumentRootStructures.ASSOCIATION_DESCRIPTOR, "structures" ) ) { //$NON-NLS-1$
    	    startTag( ELEMENT_ns1_structures );
    	    writeNs1EStructures( linkedModelElement ); 
    	    closeTag( );
    	}	
    }

    /**
     * Writes the content model of the global complex type definition "fieldType (http://sap.com/moin/xm/test/recursive)" to the output stream.
     * 
     * @param modelElement model element from which attribute values or links are read
     * @throws com.sap.tc.moin.repository.xm.XmException can be used for error
     * handling, this implementation does not throw such an exception
     * @throws NullpointerException if the parameter is <code>null</code> 
     */
    protected void writeNs1CFieldType( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle modelElement ) throws com.sap.tc.moin.repository.xm.XmException {
    
    	addElement( ELEMENT_ns1_name, modelElement, com.sap.moin.xm.test.recursive.FieldType.DESCRIPTORS.NAME( ) );
    	addElement( ELEMENT_ns1_type, modelElement, com.sap.moin.xm.test.recursive.FieldType.DESCRIPTORS.TYPE( ) );
    }

    /**
     * Writes the content model of the global complex type definition "structureType (http://sap.com/moin/xm/test/recursive)" to the output stream.
     * 
     * @param modelElement model element from which attribute values or links are read
     * @throws com.sap.tc.moin.repository.xm.XmException can be used for error
     * handling, this implementation does not throw such an exception
     * @throws NullpointerException if the parameter is <code>null</code> 
     */
    protected void writeNs1CStructureType( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle modelElement ) throws com.sap.tc.moin.repository.xm.XmException {
    
    	addElement( ELEMENT_ns1_name, modelElement, com.sap.moin.xm.test.recursive.StructureType.DESCRIPTORS.NAME( ) );
    	for ( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle linkedModelElement : getLinks( modelElement, com.sap.moin.xm.test.recursive.StructureTypeFieldOrStructureType.ASSOCIATION_DESCRIPTOR, "fieldOrStructureType" ) ) { //$NON-NLS-1$
    		writeNs1SFieldOrStructure( linkedModelElement );
    	}	
    }

    /**
     * Writes the content model of the global element declaration "structures (http://sap.com/moin/xm/test/recursive)" to the output stream.
     * 
     * @param modelElement model element from which attribute values or links are read
     * @throws com.sap.tc.moin.repository.xm.XmException can be used for error
     * handling, this implementation does not throw such an exception
     * @throws NullpointerException if the parameter is <code>null</code> 
     */
    protected void writeNs1EStructures( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle modelElement ) throws com.sap.tc.moin.repository.xm.XmException {
    
    	for ( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle linkedModelElement : getLinks( modelElement, com.sap.moin.xm.test.recursive.StructuresStructureType.ASSOCIATION_DESCRIPTOR, "structureType" ) ) { //$NON-NLS-1$
    	    startTag( ELEMENT_ns1_structure );
    	    writeNs1CStructureType( linkedModelElement ); 
    	    closeTag( );
    	}	
    }
  

    /**
     * Writes the different members of the substitution group
     * "{http://sap.com/moin/xm/test/recursive}fieldOrStructure" to the output
     * stream.
     * 
     * @param modelElement model element which correspond to a member of the substitution group
     * @throws com.sap.tc.moin.repository.xm.XmException can be used for error
     * handling, this implementation does not throw such an exception
     * @throws java.lang.IllegalArgumentException if <tt>modelElement</tt> has not the correct type
     */
    protected void writeNs1SFieldOrStructure( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle modelElement ) throws com.sap.tc.moin.repository.xm.XmException {
    
        if ( com.sap.moin.xm.test.recursive.FieldType.CLASS_DESCRIPTOR.equals( modelElement.getType( ) ) ) {
            startTag( ELEMENT_ns1_field );
            writeNs1CFieldType( modelElement );
            closeTag( );
        }else if ( com.sap.moin.xm.test.recursive.StructureType.CLASS_DESCRIPTOR.equals( modelElement.getType( ) ) ) {
            startTag( ELEMENT_ns1_structure );
            writeNs1CStructureType( modelElement );
            closeTag( );
        } else {
            throw new java.lang.IllegalArgumentException( "modelElement has not the correct type" ); //$NON-NLS-1$
        }
    }	    
}