/**
 * Generated by the MOIN XM Generator Version 1.0 .
 */

package com.sap.tc.moin.xm.test.ps;

import com.sap.tc.moin.repository.mmi.model.Attribute;
import com.sap.tc.moin.repository.mmi.reflect.InvalidNameException;
import com.sap.tc.moin.repository.mmi.reflect.RefClass;
import com.sap.tc.moin.repository.mmi.reflect.RefObject;
import com.sap.tc.moin.repository.mmi.reflect.TypeMismatchException;

import com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor;
import com.sap.tc.moin.repository.mmi.descriptors.ClassDescriptor;
import com.sap.tc.moin.repository.xm.XmException;
import com.sap.tc.moin.repository.xm.parser.PModelElementHandle;
import com.sap.tc.moin.repository.xm.parser.ParserHelper;
import com.sap.tc.moin.testcases.mc.logicalsystem.LogicalSystem;
import com.sap.tc.moin.testcases.mc.servicereferences.ServiceReference;
import com.sap.tc.moin.testcases.mc.servicereferences.ServiceReferenceAssociation;
import com.sap.tc.moin.testcases.mc.test.NonStringAndMultiAttributes;


/**
 * Tests the Exceptions of the PModelElementHandle class.
 */
@SuppressWarnings( "nls" )
public class PModelElementHandleTest extends com.sap.tc.moin.repository.xm.parser.XmParserHandlerAbstract {

    /** Prefix for the no-namespace. */
    protected static final java.lang.String PREFIX_ = ""; //$NON-NLS-1$

    /** Prefix for the namespace "http://www.sap.com/webas/2007/03/esoa/config". */
    protected static final java.lang.String PREFIX_ns1 = "ns1"; //$NON-NLS-1$

    /**
     * Prefix for the namespace
     * "http://www.sap.com/webas/2007/03/esoa/config/mc".
     */
    protected static final java.lang.String PREFIX_ns2 = "ns2"; //$NON-NLS-1$

    /**
     * Prefix for the namespace
     * "http://www.sap.com/webas/2007/03/esoa/config/system".
     */
    protected static final java.lang.String PREFIX_ns3 = "ns3"; //$NON-NLS-1$


    /* Local names of the XML elements. */
    protected static final java.lang.String ELEMENT_mass_configuration = "mass-configuration"; //$NON-NLS-1$



    /* Local names of the XML attributes. */
    protected static final java.lang.String ATTRIBUTE_type = "type"; //$NON-NLS-1$


    /**
     * Constructor. Calls the methods {@link #registerPrefixes()} and
     * {@link #registerHandlers()}.
     */
    public PModelElementHandleTest( ) {

        super( );
        registerPrefixes( );
        registerHandlers( );
    }

    /**
     * Registers the prefixes for the namespaces. For each namespace in the
     * source XML document a prefix must be registered.
     */
    protected void registerPrefixes( ) {

        registerPrefixForNamespace( "http://www.sap.com/webas/2007/03/esoa/config", PREFIX_ns1 ); //$NON-NLS-1$
        registerPrefixForNamespace( "http://www.sap.com/webas/2007/03/esoa/config/mc", PREFIX_ns2 ); //$NON-NLS-1$
        registerPrefixForNamespace( "http://www.sap.com/webas/2007/03/esoa/config/system", PREFIX_ns3 ); //$NON-NLS-1$    
    }

    /**
     * Registers sub-handler instances to which this handler will dispatch the
     * SAX events. The qualified class name of the sub-handler classes are used
     * as registration IDs.
     * <p>
     * If you want to replace an instance with the registration ID
     * "com.sap.example.NodeTest" by your own implementation "MyNode" then you
     * have to call the method
     * {@link com.sap.tc.moin.repository.xm.parser.XmParserHandlerAbstract#registerHandler(java.lang.String, com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler)}
     * with id ="com.sap.example.NodeTest" and handler="new MyNode(this)".
     * <p>
     * If you want that a certain XML element with its sub-elements is not
     * mapped to MOIN entities, then you must unregister the corresponding
     * sub-handler; use the method
     * {@link com.sap.tc.moin.repository.xm.parser.XmParserHandlerAbstract#unregisterHandler(java.lang.String)}
     * .
     */
    protected void registerHandlers( ) {

        registerHandler( Ns2EMass_configuration.class.getName( ), new Ns2EMass_configuration( this ) );
    }

    @Override
    public com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler getRootComplexTypeHandler( final java.lang.String localName, final java.lang.String prefix ) throws com.sap.tc.moin.repository.xm.XmException {


        /*** -------------- tests --------------- */


        StringBuilder errors = new StringBuilder( );
        this.testPModelElementHandle( errors );
        /**** --------end tests--------- */


        if ( errors.length( ) > 0 ) {
            // put to system property, this system property is evaluated in TestMc.testExceptionsOfParserHelperApi( )testExceptionsOfParserHelperApi( )
            System.setProperty( "com.sap.tc.moin.xm.apitest.failure.importexport", errors.toString( ) );
        }

        if ( PREFIX_ns2.equals( prefix ) ) {
            if ( ELEMENT_mass_configuration.equals( localName ) ) {
                return getHandler( Ns2EMass_configuration.class.getName( ) );
            }

        }
        return null;
    }

    /**
     * Tests the execptions of the method
     * {@link PModelElementHandle#setOrAddAttribute(AttributeDescriptor, String)}
     * .
     * 
     * @param errors
     */
    private void testPModelElementHandle( StringBuilder errors ) {

        final PModelElementHandle handle = this.getHelper( ).getOrCreateModelElement( LogicalSystem.CLASS_DESCRIPTOR );
        // sets a null value
        boolean success = false;
        try {
            handle.setOrAddAttribute( LogicalSystem.DESCRIPTORS.NAME( ), null );
        } catch ( IllegalArgumentException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "IllegalArgumentException expected for null value\n" );
        }

        success = false;
        try {
            handle.setOrAddAttribute( ServiceReference.DESCRIPTORS.PORTTYPE_QNAME( ), "test" );
        } catch ( InvalidNameException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "InvalidNameException expected\n" );
        }

        final PModelElementHandle handleNumber = this.getHelper( ).getOrCreateModelElement( NonStringAndMultiAttributes.CLASS_DESCRIPTOR );

        success = false;
        try {
            handleNumber.setOrAddAttribute( NonStringAndMultiAttributes.DESCRIPTORS.A_INTEGER( ), "test" );
        } catch ( NumberFormatException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "NumberFormatException expected for integer\n" );
        }

        success = false;
        try {
            handleNumber.setOrAddAttribute( NonStringAndMultiAttributes.DESCRIPTORS.A_DOUBLE( ), "test" );
        } catch ( NumberFormatException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "NumberFormatException expected for double\n" );
        }


        success = false;
        try {
            handleNumber.setOrAddAttribute( NonStringAndMultiAttributes.DESCRIPTORS.A_FLOAT( ), "test" );
        } catch ( NumberFormatException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "NumberFormatException expected for float\n" );
        }

        success = false;
        try {
            handleNumber.setOrAddAttribute( NonStringAndMultiAttributes.DESCRIPTORS.A_LONG( ), "test" );
        } catch ( NumberFormatException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "NumberFormatException expected for long\n" );
        }

        success = false;
        handleNumber.setOrAddAttribute( NonStringAndMultiAttributes.DESCRIPTORS.A_BOOLEAN( ), "test" );
        // boolean value should beset to false

    }

    /**
     * Tests the exceptions of the method
     * {@link ParserHelper#createLink(com.sap.tc.moin.repository.mmi.descriptors.AssociationDescriptor, String, PModelElementHandle, PModelElementHandle)}
     * .
     * 
     * @param errors
     * @throws XmException
     */
    private void testCreateLink( StringBuilder errors ) throws XmException {

        if ( errors == null ) {
            throw new NullPointerException( "errors is null" );
        }
        final ParserHelper helper = this.getHelper( );
        boolean success = false;

        PModelElementHandle logicalSystem = helper.getOrCreateModelElement( LogicalSystem.CLASS_DESCRIPTOR );

        PModelElementHandle serviceRef = helper.getOrCreateModelElement( ServiceReference.CLASS_DESCRIPTOR );

        final String endBName = "logicalSystem";

        try {
            helper.createLink( null, endBName, serviceRef, logicalSystem );
        } catch ( NullPointerException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "createLink has not thrown an expected NullPointerException\n" );
        }
        success = false;

        try {
            helper.createLink( ServiceReferenceAssociation.ASSOCIATION_DESCRIPTOR, null, serviceRef, logicalSystem );
        } catch ( NullPointerException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "createLink has not thrown an expected NullPointerException\n" );
        }
        success = false;

        try {
            helper.createLink( ServiceReferenceAssociation.ASSOCIATION_DESCRIPTOR, endBName, null, logicalSystem );
        } catch ( NullPointerException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "createLink has not thrown an expected NullPointerException\n" );
        }
        success = false;

        try {
            helper.createLink( ServiceReferenceAssociation.ASSOCIATION_DESCRIPTOR, endBName, serviceRef, (PModelElementHandle) null );
        } catch ( NullPointerException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "createLink has not thrown an expected NullPointerException\n" );
        }
        success = false;

        // wrong endBname
        try {
            helper.createLink( ServiceReferenceAssociation.ASSOCIATION_DESCRIPTOR, "wrong", serviceRef, logicalSystem );
        } catch ( IllegalArgumentException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "createLink has not thrown an expected IllegalArgumentException\n" );
        }
        success = false;

        // handle not created with correct methods
        PModelElementHandle logSys = new PModelElementHandle( ) {

            public String getMofid( ) {

                return "test";
            }

            public ClassDescriptor<? extends RefClass, ? extends RefObject> getType( ) {

                return LogicalSystem.CLASS_DESCRIPTOR;
            }

            public void setOrAddAttribute( AttributeDescriptor<? extends Attribute, ? extends RefObject, ? extends Object> attributeDescriptor, String value ) {

                // do nothing
            }
        };
        try {
            helper.createLink( ServiceReferenceAssociation.ASSOCIATION_DESCRIPTOR, endBName, serviceRef, logSys );
        } catch ( IllegalArgumentException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "createLink has not thrown an expected IllegalArgumentException\n" );
        }

        success = false;
        try {
            helper.createLink( ServiceReferenceAssociation.ASSOCIATION_DESCRIPTOR, endBName, logSys, serviceRef );
        } catch ( IllegalArgumentException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "createLink has not thrown an expected IllegalArgumentException\n" );
        }
        success = false;

        // model elements with wrong types (logicalSystem and seriveRef are exchanged
        try {
            helper.createLink( ServiceReferenceAssociation.ASSOCIATION_DESCRIPTOR, endBName, logicalSystem, logicalSystem );
        } catch ( TypeMismatchException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "createLink has not thrown an expected TypeMismatchException\n" );
        }
        success = false;
        try {
            helper.createLink( ServiceReferenceAssociation.ASSOCIATION_DESCRIPTOR, endBName, serviceRef, serviceRef );
        } catch ( TypeMismatchException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "createLink has not thrown an expected TypeMismatchException\n" );
        }
        success = false;

    }

/**
     * Tests the exceptions of the method
     * {@link ParserHelper#createLink(com.sap.tc.moin.repository.mmi.descriptors.AssociationDescriptor, String, PModelElementHandle, ClassDescriptor, String...)
     * .
     * 
     * @param errors
     * @throws XmException
     */
    private void testCreateLinkLogicalKey( StringBuilder errors ) throws XmException {

        if ( errors == null ) {
            throw new NullPointerException( "errors is null" );
        }
        final ParserHelper helper = this.getHelper( );
        boolean success = false;

        PModelElementHandle logicalSystem = helper.getOrCreateModelElement( LogicalSystem.CLASS_DESCRIPTOR );

        PModelElementHandle serviceRef = helper.getOrCreateModelElement( ServiceReference.CLASS_DESCRIPTOR );

        final String endBName = "logicalSystem";

        try {
            helper.createLink( null, endBName, serviceRef, LogicalSystem.CLASS_DESCRIPTOR, "test" );
        } catch ( NullPointerException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "createLink has not thrown an expected NullPointerException\n" );
        }
        success = false;

        try {
            helper.createLink( ServiceReferenceAssociation.ASSOCIATION_DESCRIPTOR, null, serviceRef, LogicalSystem.CLASS_DESCRIPTOR, "test" );
        } catch ( NullPointerException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "createLink has not thrown an expected NullPointerException\n" );
        }
        success = false;

        try {
            helper.createLink( ServiceReferenceAssociation.ASSOCIATION_DESCRIPTOR, endBName, null, LogicalSystem.CLASS_DESCRIPTOR, "test" );
        } catch ( NullPointerException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "createLink has not thrown an expected NullPointerException\n" );
        }
        success = false;

        try {
            helper.createLink( ServiceReferenceAssociation.ASSOCIATION_DESCRIPTOR, endBName, serviceRef, null, "test" );
        } catch ( NullPointerException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "createLink has not thrown an expected NullPointerException\n" );
        }
        success = false;

        try {
            helper.createLink( ServiceReferenceAssociation.ASSOCIATION_DESCRIPTOR, endBName, serviceRef, LogicalSystem.CLASS_DESCRIPTOR, (String) null );
        } catch ( NullPointerException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "createLink has not thrown an expected NullPointerException\n" );
        }
        success = false;

        // creates a logical system with logical key "test", so that it is tried to create a non-retarded link by the following test
        helper.getOrCreateModelElement( LogicalSystem.CLASS_DESCRIPTOR, "test" );

        // wrong endBname, non retarded link creation
        try {
            helper.createLink( ServiceReferenceAssociation.ASSOCIATION_DESCRIPTOR, "wrong", serviceRef, LogicalSystem.CLASS_DESCRIPTOR, "test" );
        } catch ( IllegalArgumentException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "createLink has not thrown an expected IllegalArgumentException\n" );
        }
        success = false;

        // wrong endBname, retarded link creation
        try {
            helper.createLink( ServiceReferenceAssociation.ASSOCIATION_DESCRIPTOR, "wrong", serviceRef, LogicalSystem.CLASS_DESCRIPTOR, "test2" );
        } catch ( Exception e ) {
            errors.append( "createLink has  thrown a Exception in the wrong endBName retarded link creation case: " + e.getMessage( ) + "\n" );
        }

        success = false;

        // handle not created with correct methods
        PModelElementHandle logSys = new PModelElementHandle( ) {

            public String getMofid( ) {

                return "test";
            }

            public ClassDescriptor<? extends RefClass, ? extends RefObject> getType( ) {

                return LogicalSystem.CLASS_DESCRIPTOR;
            }

            public void setOrAddAttribute( AttributeDescriptor<? extends Attribute, ? extends RefObject, ? extends Object> attributeDescriptor, String value ) {

                // do nothing
            }
        };
        try {
            helper.createLink( ServiceReferenceAssociation.ASSOCIATION_DESCRIPTOR, endBName, logSys, LogicalSystem.CLASS_DESCRIPTOR, "test" );
        } catch ( IllegalArgumentException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "createLink has not thrown an expected IllegalArgumentException\n" );
        }
        success = false;



        // non retarded link creation with wrong end A type
        try {
            helper.createLink( ServiceReferenceAssociation.ASSOCIATION_DESCRIPTOR, endBName, logicalSystem, LogicalSystem.CLASS_DESCRIPTOR, "test" );
        } catch ( TypeMismatchException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "createLink has not thrown an expected TypeMismatchException\n" );
        }

        // retarded link creation with wrong end A type
        try {
            helper.createLink( ServiceReferenceAssociation.ASSOCIATION_DESCRIPTOR, endBName, logicalSystem, LogicalSystem.CLASS_DESCRIPTOR, "test2" );
        } catch ( Exception e ) {
            errors.append( "createLink has thrown an Exception for the retarded link creation case for a wrong end A type: " + e.getMessage( ) + "\n" );
        }

        // non-retarded link creation with wrong end B classifier
        // creates a service reference with logical key "test", so that it is tried to create a non-retarded link by the following test
        helper.getOrCreateModelElement( ServiceReference.CLASS_DESCRIPTOR, "test" );
        success = false;
        try {
            helper.createLink( ServiceReferenceAssociation.ASSOCIATION_DESCRIPTOR, endBName, serviceRef, ServiceReference.CLASS_DESCRIPTOR, "test" );
        } catch ( TypeMismatchException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "createLink has not thrown an expected TypeMismatchException\n" );
        }
        success = false;

        // retarded link creation with wrong end B classifier
        try {
            helper.createLink( ServiceReferenceAssociation.ASSOCIATION_DESCRIPTOR, endBName, serviceRef, ServiceReference.CLASS_DESCRIPTOR, "test2" );
        } catch ( Exception e ) {
            errors.append( "createLink has thrown an Exception for the retarded link creation case for a wrong end B classifier: " + e.getMessage( ) + "\n" );
        }
        success = false;

        try {
            helper.createLink( ServiceReferenceAssociation.ASSOCIATION_DESCRIPTOR, endBName, serviceRef, LogicalSystem.CLASS_DESCRIPTOR, new String[0] );
        } catch ( IllegalArgumentException e ) {
            success = true;
        }
        if ( !success ) {
            errors.append( "createLink has not thrown an expected IllegalArgumentException\n" );
        }
        success = false;
    }

    /* --------------------------- sub-handlers ---------------- */

    /**
     * Handler for global element declaration
     * "mass-configuration (http://www.sap.com/webas/2007/03/esoa/config/mc)".
     */
    public static class Ns2EMass_configuration extends com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler {

        public Ns2EMass_configuration( final com.sap.tc.moin.repository.xm.parser.XmParserHandlerAbstract parser ) {

            super( parser );
        }

        @Override
        public void elementStarted( final String value ) {

            //createOrGetModelElementAndPutToTopStackEntry( com.sap.webas.v2007.v03.esoa.config.mc.MassConfiguration.CLASS_DESCRIPTOR, getClass( ).getName( ) );
        }

        @Override
        public com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler getChild( final java.lang.String childName, final java.lang.String childPrefix ) {

            return null;
        }

        @Override
        public void childClosed( final com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler child, final String childPrefix, final String childLocalName ) throws com.sap.tc.moin.repository.xm.XmException {

//            if ( this.getChild( ELEMENT_logical_systems, PREFIX_ns2 ) == child ) {
//                createLink( child.getClass( ).getName( ), this.getClass( ).getName( ), com.sap.webas.v2007.v03.esoa.config.mc.MassConfigurationLogicalSystems.ASSOCIATION_DESCRIPTOR, "logicalSystems" ); //$NON-NLS-1$
//            } else if ( this.getChild( ELEMENT_service_references, PREFIX_ns1 ) == child ) {
//                createLink( child.getClass( ).getName( ), this.getClass( ).getName( ), com.sap.webas.v2007.v03.esoa.config.mc.MassConfigurationServiceReferences.ASSOCIATION_DESCRIPTOR, "serviceReferences" ); //$NON-NLS-1$
//            }

        }
    }

}