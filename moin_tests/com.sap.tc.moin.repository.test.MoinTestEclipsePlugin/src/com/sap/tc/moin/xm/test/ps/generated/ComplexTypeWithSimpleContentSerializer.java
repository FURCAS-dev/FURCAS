/**
 * Generated by the MOIN XM Generator Version 1.0 .
 */

package com.sap.tc.moin.xm.test.ps.generated;

/**
 * XM Serializer for XML documents which are valid to the XML schema
 * "bundleresource://177/com/sap/tc/moin/repository/test/extensions/xm/generation/xsd/ComplexTypeWithSimpleContent.xsd".
 */
public class ComplexTypeWithSimpleContentSerializer extends com.sap.tc.moin.repository.xm.serializer.XmCustomSerializerAbstract {

     /** Prefix for the no-namespace.  */
    protected static final java.lang.String PREFIX_ = ""; //$NON-NLS-1$
    
    /** Prefix for the namespace "http://sap.com/moin/test/simpleContent". */
    protected static final java.lang.String PREFIX_ns1 = "ns1"; //$NON-NLS-1$


    /* Qualified names of the XML elements. */
    protected static final java.lang.String ELEMENT_ns1_elementExtension = PREFIX_ns1 + ":elementExtension"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns1_elementRestriction = PREFIX_ns1 + ":elementRestriction"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns1_root = PREFIX_ns1 + ":root"; //$NON-NLS-1$


    /*Qualified names of the XML attributes. */
    protected static final java.lang.String ATTRIBUTE__attr = PREFIX_ + "attr"; //$NON-NLS-1$

    protected static final java.lang.String ATTRIBUTE__value = PREFIX_ + "value"; //$NON-NLS-1$


    /**
     * Constructor. Calls the method {@link #registerPrefixes()}.
     */
    public ComplexTypeWithSimpleContentSerializer( ) {
    
        super();
        registerPrefixes( );  
    }

    /**
     * Registers the prefixes for the namespaces. For each namespace a prefix
     * must be registered. The registered prefix definitions are written to the output
     * stream by the first call of the method {@link #startTag(java.lang.String)}.
     */
    protected void registerPrefixes( ) {
    
        registerPrefixForNamespace( "http://sap.com/moin/test/simpleContent", PREFIX_ns1 ); //$NON-NLS-1$    
    }
    
    @Override
    protected void execute( ) throws com.sap.tc.moin.repository.xm.XmException {
    
        for ( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle modelElement : getModelElements( com.sap.moin.test.simplecontent.DocumentRoot.CLASS_DESCRIPTOR ) ) {
           writeNs1RDocumentRoot( modelElement );
        }
    }
    
    /**
     * Writes the content model of the document root "DocumentRoot (http://sap.com/moin/test/simpleContent)" to the output stream.
     * 
     * @param modelElement model element from which attribute values or links are read
     * @throws com.sap.tc.moin.repository.xm.XmException can be used for error
     * handling, this implementation does not throw such an exception
     * @throws NullpointerException if the parameter is <code>null</code> 
     */
    protected void writeNs1RDocumentRoot( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle modelElement ) throws com.sap.tc.moin.repository.xm.XmException {
    
    	for ( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle linkedModelElement : getLinks( modelElement, com.sap.moin.test.simplecontent.DocumentRootSimpleContentExtension.ASSOCIATION_DESCRIPTOR, "simpleContentExtension" ) ) { //$NON-NLS-1$
    	    startTag( ELEMENT_ns1_elementExtension );
    	    writeNs1CSimpleContentExtension( linkedModelElement ); 
    	    closeTag( );
    	}	
    	for ( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle linkedModelElement : getLinks( modelElement, com.sap.moin.test.simplecontent.DocumentRootSimpleContentRestriction.ASSOCIATION_DESCRIPTOR, "simpleContentRestriction" ) ) { //$NON-NLS-1$
    	    startTag( ELEMENT_ns1_elementRestriction );
    	    writeNs1CSimpleContentRestriction( linkedModelElement ); 
    	    closeTag( );
    	}	
    	for ( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle linkedModelElement : getLinks( modelElement, com.sap.moin.test.simplecontent.DocumentRootRoot.ASSOCIATION_DESCRIPTOR, "root" ) ) { //$NON-NLS-1$
    	    startTag( ELEMENT_ns1_root );
    	    writeNs1ERoot( linkedModelElement ); 
    	    closeTag( );
    	}	
    }

    /**
     * Writes the content model of the global complex type definition "simpleContentExtension (http://sap.com/moin/test/simpleContent)" to the output stream.
     * 
     * @param modelElement model element from which attribute values or links are read
     * @throws com.sap.tc.moin.repository.xm.XmException can be used for error
     * handling, this implementation does not throw such an exception
     * @throws NullpointerException if the parameter is <code>null</code> 
     */
    protected void writeNs1CSimpleContentExtension( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle modelElement ) throws com.sap.tc.moin.repository.xm.XmException {
    
    	addAttribute( ATTRIBUTE__attr, modelElement, com.sap.moin.test.simplecontent.SimpleContentExtension.DESCRIPTORS.ATTR( ) );
    	addAttribute( ATTRIBUTE__value, modelElement, com.sap.moin.test.simplecontent.SimpleContentExtension.DESCRIPTORS.VALUE_ATTRIBUTE( ) );
        // simple content
        putValue(modelElement, com.sap.moin.test.simplecontent.SimpleContentExtension.DESCRIPTORS.VALUE( ) );
    }

    /**
     * Writes the content model of the global complex type definition "simpleContentRestriction (http://sap.com/moin/test/simpleContent)" to the output stream.
     * 
     * @param modelElement model element from which attribute values or links are read
     * @throws com.sap.tc.moin.repository.xm.XmException can be used for error
     * handling, this implementation does not throw such an exception
     * @throws NullpointerException if the parameter is <code>null</code> 
     */
    protected void writeNs1CSimpleContentRestriction( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle modelElement ) throws com.sap.tc.moin.repository.xm.XmException {
    
    	addAttribute( ATTRIBUTE__attr, modelElement, com.sap.moin.test.simplecontent.SimpleContentRestriction.DESCRIPTORS.ATTR( ) );
    	addAttribute( ATTRIBUTE__value, modelElement, com.sap.moin.test.simplecontent.SimpleContentRestriction.DESCRIPTORS.VALUE_ATTRIBUTE( ) );
        // simple content
        putValue(modelElement, com.sap.moin.test.simplecontent.SimpleContentRestriction.DESCRIPTORS.VALUE( ) );
    }

    /**
     * Writes the content model of the global element declaration "root (http://sap.com/moin/test/simpleContent)" to the output stream.
     * 
     * @param modelElement model element from which attribute values or links are read
     * @throws com.sap.tc.moin.repository.xm.XmException can be used for error
     * handling, this implementation does not throw such an exception
     * @throws NullpointerException if the parameter is <code>null</code> 
     */
    protected void writeNs1ERoot( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle modelElement ) throws com.sap.tc.moin.repository.xm.XmException {
    
    	for ( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle linkedModelElement : getLinks( modelElement, com.sap.moin.test.simplecontent.RootSimpleContentExtension.ASSOCIATION_DESCRIPTOR, "simpleContentExtension" ) ) { //$NON-NLS-1$
    	    startTag( ELEMENT_ns1_elementExtension );
    	    writeNs1CSimpleContentExtension( linkedModelElement ); 
    	    closeTag( );
    	}	
    	for ( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle linkedModelElement : getLinks( modelElement, com.sap.moin.test.simplecontent.RootSimpleContentRestriction.ASSOCIATION_DESCRIPTOR, "simpleContentRestriction" ) ) { //$NON-NLS-1$
    	    startTag( ELEMENT_ns1_elementRestriction );
    	    writeNs1CSimpleContentRestriction( linkedModelElement ); 
    	    closeTag( );
    	}	
    }
  

    
}