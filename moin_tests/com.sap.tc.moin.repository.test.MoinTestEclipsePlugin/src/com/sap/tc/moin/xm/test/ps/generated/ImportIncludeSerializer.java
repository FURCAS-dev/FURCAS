/**
 * Generated by the MOIN XM Generator Version 1.0 .
 */

package com.sap.tc.moin.xm.test.ps.generated;

/**
 * XM Serializer for XML documents which are valid to the XML schema
 * "bundleresource://177/com/sap/tc/moin/repository/test/extensions/xm/generation/xsd/ImportIncludeTop.xsd".
 */
public class ImportIncludeSerializer extends com.sap.tc.moin.repository.xm.serializer.XmCustomSerializerAbstract {

     /** Prefix for the no-namespace.  */
    protected static final java.lang.String PREFIX_ = ""; //$NON-NLS-1$
    
    /** Prefix for the namespace "http://sap.com/moin/xm/test". */
    protected static final java.lang.String PREFIX_ns1 = "ns1"; //$NON-NLS-1$

    /** Prefix for the namespace "http://sap.com/moin/xm/test/import". */
    protected static final java.lang.String PREFIX_ns2 = "ns2"; //$NON-NLS-1$

    /** Prefix for the namespace "http://sap.com/moin/xm/test/secondImport". */
    protected static final java.lang.String PREFIX_ns3 = "ns3"; //$NON-NLS-1$

    /** Prefix for the namespace "http://sap.com/moin/xm/test/thirdImport". */
    protected static final java.lang.String PREFIX_ns4 = "ns4"; //$NON-NLS-1$


    /* Qualified names of the XML elements. */
    protected static final java.lang.String ELEMENT_ns1_ElementImportIncludeTop = PREFIX_ns1 + ":ElementImportIncludeTop"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns2_ImportedElement = PREFIX_ns2 + ":ImportedElement"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns4_ImportThirdElement = PREFIX_ns4 + ":ImportThirdElement"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns1_el = PREFIX_ns1 + ":el"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns1_ElementWithThirdComplexType = PREFIX_ns1 + ":ElementWithThirdComplexType"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns4_el = PREFIX_ns4 + ":el"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns1_ElementWithThirdSimpleType = PREFIX_ns1 + ":ElementWithThirdSimpleType"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns1_ImportIncludeTopEl = PREFIX_ns1 + ":ImportIncludeTopEl"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns1_includedElementRef = PREFIX_ns1 + ":includedElementRef"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns1_includedSecondElement = PREFIX_ns1 + ":includedSecondElement"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns3_ImportSecondElement = PREFIX_ns3 + ":ImportSecondElement"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns3_ImportSecondElementWithImportThirdComplexType = PREFIX_ns3 + ":ImportSecondElementWithImportThirdComplexType"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns1_root = PREFIX_ns1 + ":root"; //$NON-NLS-1$


    /*Qualified names of the XML attributes. */
    protected static final java.lang.String ATTRIBUTE__att = PREFIX_ + "att"; //$NON-NLS-1$

    protected static final java.lang.String ATTRIBUTE_ns4_ImportThirdAttribute = PREFIX_ns4 + ":ImportThirdAttribute"; //$NON-NLS-1$


    /**
     * Constructor. Calls the method {@link #registerPrefixes()}.
     */
    public ImportIncludeSerializer( ) {
    
        super();
        registerPrefixes( );  
    }

    /**
     * Registers the prefixes for the namespaces. For each namespace a prefix
     * must be registered. The registered prefix definitions are written to the output
     * stream by the first call of the method {@link #startTag(java.lang.String)}.
     */
    protected void registerPrefixes( ) {
    
        registerPrefixForNamespace( "http://sap.com/moin/xm/test", PREFIX_ns1 ); //$NON-NLS-1$
        registerPrefixForNamespace( "http://sap.com/moin/xm/test/import", PREFIX_ns2 ); //$NON-NLS-1$
        registerPrefixForNamespace( "http://sap.com/moin/xm/test/secondImport", PREFIX_ns3 ); //$NON-NLS-1$
        registerPrefixForNamespace( "http://sap.com/moin/xm/test/thirdImport", PREFIX_ns4 ); //$NON-NLS-1$    
    }
    
    @Override
    protected void execute( ) throws com.sap.tc.moin.repository.xm.XmException {
    
        for ( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle modelElement : getModelElements( com.sap.moin.xm.test.DocumentRoot.CLASS_DESCRIPTOR ) ) {
           writeNs1RDocumentRoot( modelElement );
        }
    }
    
    /**
     * Writes the content model of the document root "DocumentRoot (http://sap.com/moin/xm/test)" to the output stream.
     * 
     * @param modelElement model element from which attribute values or links are read
     * @throws com.sap.tc.moin.repository.xm.XmException can be used for error
     * handling, this implementation does not throw such an exception
     * @throws NullpointerException if the parameter is <code>null</code> 
     */
    protected void writeNs1RDocumentRoot( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle modelElement ) throws com.sap.tc.moin.repository.xm.XmException {
    
    	for ( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle linkedModelElement : getLinks( modelElement, com.sap.moin.xm.test.DocumentRootElementImportIncludeTop.ASSOCIATION_DESCRIPTOR, "elementImportIncludeTop" ) ) { //$NON-NLS-1$
    	    startTag( ELEMENT_ns1_ElementImportIncludeTop );
    	    writeNs1EElementImportIncludeTop( linkedModelElement ); 
    	    closeTag( );
    	}	
    	for ( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle linkedModelElement : getLinks( modelElement, com.sap.moin.xm.test.DocumentRootImportThirdComplexType.ASSOCIATION_DESCRIPTOR, "importThirdComplexType" ) ) { //$NON-NLS-1$
    	    startTag( ELEMENT_ns1_ElementWithThirdComplexType );
    	    writeNs4CImportThirdComplexType( linkedModelElement ); 
    	    closeTag( );
    	}	
    	addElement( ELEMENT_ns1_ElementWithThirdSimpleType, modelElement, com.sap.moin.xm.test.DocumentRoot.DESCRIPTORS.ELEMENT_WITH_THIRD_SIMPLE_TYPE( ) );
    	addElement( ELEMENT_ns2_ImportedElement, modelElement, com.sap.moin.xm.test.DocumentRoot.DESCRIPTORS.IMPORTED_ELEMENT( ) );
    	for ( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle linkedModelElement : getLinks( modelElement, com.sap.moin.xm.test.DocumentRootIncludedType.ASSOCIATION_DESCRIPTOR, "includedType" ) ) { //$NON-NLS-1$
    	    startTag( ELEMENT_ns1_ImportIncludeTopEl );
    	    writeNs1CIncludedType( linkedModelElement ); 
    	    closeTag( );
    	}	
    	addElement( ELEMENT_ns3_ImportSecondElement, modelElement, com.sap.moin.xm.test.DocumentRoot.DESCRIPTORS.IMPORT_SECOND_ELEMENT( ) );
    	for ( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle linkedModelElement : getLinks( modelElement, com.sap.moin.xm.test.DocumentRootImportThirdComplexTypeImportSecondElementWithImportThirdComplexType.ASSOCIATION_DESCRIPTOR, "importThirdComplexType" ) ) { //$NON-NLS-1$
    	    startTag( ELEMENT_ns3_ImportSecondElementWithImportThirdComplexType );
    	    writeNs4CImportThirdComplexType( linkedModelElement ); 
    	    closeTag( );
    	}	
    	addElement( ELEMENT_ns4_ImportThirdElement, modelElement, com.sap.moin.xm.test.DocumentRoot.DESCRIPTORS.IMPORT_THIRD_ELEMENT( ) );
    	addElement( ELEMENT_ns1_includedElementRef, modelElement, com.sap.moin.xm.test.DocumentRoot.DESCRIPTORS.INCLUDED_ELEMENT_REF( ) );
    	for ( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle linkedModelElement : getLinks( modelElement, com.sap.moin.xm.test.DocumentRootImportSecondComplexType.ASSOCIATION_DESCRIPTOR, "importSecondComplexType" ) ) { //$NON-NLS-1$
    	    startTag( ELEMENT_ns1_includedSecondElement );
    	    writeNs3CImportSecondComplexType( linkedModelElement ); 
    	    closeTag( );
    	}	
    	for ( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle linkedModelElement : getLinks( modelElement, com.sap.moin.xm.test.DocumentRootRoot.ASSOCIATION_DESCRIPTOR, "root" ) ) { //$NON-NLS-1$
    	    startTag( ELEMENT_ns1_root );
    	    writeNs1ERoot( linkedModelElement ); 
    	    closeTag( );
    	}	
    }

    /**
     * Writes the content model of the global element declaration "ElementImportIncludeTop (http://sap.com/moin/xm/test)" to the output stream.
     * 
     * @param modelElement model element from which attribute values or links are read
     * @throws com.sap.tc.moin.repository.xm.XmException can be used for error
     * handling, this implementation does not throw such an exception
     * @throws NullpointerException if the parameter is <code>null</code> 
     */
    protected void writeNs1EElementImportIncludeTop( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle modelElement ) throws com.sap.tc.moin.repository.xm.XmException {
    
    	addAttribute( ATTRIBUTE__att, modelElement, com.sap.moin.xm.test.ElementImportIncludeTop.DESCRIPTORS.ATT( ) );
    	addAttribute( ATTRIBUTE_ns4_ImportThirdAttribute, modelElement, com.sap.moin.xm.test.ElementImportIncludeTop.DESCRIPTORS.IMPORT_THIRD_ATTRIBUTE( ) );
    	addElement( ELEMENT_ns2_ImportedElement, modelElement, com.sap.moin.xm.test.ElementImportIncludeTop.DESCRIPTORS.IMPORTED_ELEMENT( ) );
    	addElement( ELEMENT_ns4_ImportThirdElement, modelElement, com.sap.moin.xm.test.ElementImportIncludeTop.DESCRIPTORS.IMPORT_THIRD_ELEMENT( ) );
    	addElement( ELEMENT_ns1_el, modelElement, com.sap.moin.xm.test.ElementImportIncludeTop.DESCRIPTORS.EL( ) );
    }

    /**
     * Writes the content model of the global complex type definition "ImportThirdComplexType (http://sap.com/moin/xm/test/thirdImport)" to the output stream.
     * 
     * @param modelElement model element from which attribute values or links are read
     * @throws com.sap.tc.moin.repository.xm.XmException can be used for error
     * handling, this implementation does not throw such an exception
     * @throws NullpointerException if the parameter is <code>null</code> 
     */
    protected void writeNs4CImportThirdComplexType( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle modelElement ) throws com.sap.tc.moin.repository.xm.XmException {
    
    	addAttribute( ATTRIBUTE__att, modelElement, com.sap.moin.xm.test.thirdimport.ImportThirdComplexType.DESCRIPTORS.ATT( ) );
    	addElement( ELEMENT_ns4_el, modelElement, com.sap.moin.xm.test.thirdimport.ImportThirdComplexType.DESCRIPTORS.EL( ) );
    }

    /**
     * Writes the content model of the global complex type definition "includedType (http://sap.com/moin/xm/test)" to the output stream.
     * 
     * @param modelElement model element from which attribute values or links are read
     * @throws com.sap.tc.moin.repository.xm.XmException can be used for error
     * handling, this implementation does not throw such an exception
     * @throws NullpointerException if the parameter is <code>null</code> 
     */
    protected void writeNs1CIncludedType( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle modelElement ) throws com.sap.tc.moin.repository.xm.XmException {
    
    	addElement( ELEMENT_ns1_includedElementRef, modelElement, com.sap.moin.xm.test.IncludedType.DESCRIPTORS.INCLUDED_ELEMENT_REF( ) );
    	for ( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle linkedModelElement : getLinks( modelElement, com.sap.moin.xm.test.IncludedTypeImportSecondComplexType.ASSOCIATION_DESCRIPTOR, "importSecondComplexType" ) ) { //$NON-NLS-1$
    	    startTag( ELEMENT_ns1_includedSecondElement );
    	    writeNs3CImportSecondComplexType( linkedModelElement ); 
    	    closeTag( );
    	}	
    }

    /**
     * Writes the content model of the global complex type definition "ImportSecondComplexType (http://sap.com/moin/xm/test/secondImport)" to the output stream.
     * 
     * @param modelElement model element from which attribute values or links are read
     * @throws com.sap.tc.moin.repository.xm.XmException can be used for error
     * handling, this implementation does not throw such an exception
     * @throws NullpointerException if the parameter is <code>null</code> 
     */
    protected void writeNs3CImportSecondComplexType( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle modelElement ) throws com.sap.tc.moin.repository.xm.XmException {
    
    	addAttribute( ATTRIBUTE_ns4_ImportThirdAttribute, modelElement, com.sap.moin.xm.test.secondimport.ImportSecondComplexType.DESCRIPTORS.IMPORT_THIRD_ATTRIBUTE( ) );
    	addElement( ELEMENT_ns4_ImportThirdElement, modelElement, com.sap.moin.xm.test.secondimport.ImportSecondComplexType.DESCRIPTORS.IMPORT_THIRD_ELEMENT( ) );
    }

    /**
     * Writes the content model of the global element declaration "root (http://sap.com/moin/xm/test)" to the output stream.
     * 
     * @param modelElement model element from which attribute values or links are read
     * @throws com.sap.tc.moin.repository.xm.XmException can be used for error
     * handling, this implementation does not throw such an exception
     * @throws NullpointerException if the parameter is <code>null</code> 
     */
    protected void writeNs1ERoot( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle modelElement ) throws com.sap.tc.moin.repository.xm.XmException {
    
    	for ( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle linkedModelElement : getLinks( modelElement, com.sap.moin.xm.test.RootIncludedType.ASSOCIATION_DESCRIPTOR, "includedType" ) ) { //$NON-NLS-1$
    	    startTag( ELEMENT_ns1_ImportIncludeTopEl );
    	    writeNs1CIncludedType( linkedModelElement ); 
    	    closeTag( );
    	}	
    	addElement( ELEMENT_ns1_ElementWithThirdSimpleType, modelElement, com.sap.moin.xm.test.Root.DESCRIPTORS.ELEMENT_WITH_THIRD_SIMPLE_TYPE( ) );
    	for ( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle linkedModelElement : getLinks( modelElement, com.sap.moin.xm.test.RootImportThirdComplexType.ASSOCIATION_DESCRIPTOR, "importThirdComplexType" ) ) { //$NON-NLS-1$
    	    startTag( ELEMENT_ns1_ElementWithThirdComplexType );
    	    writeNs4CImportThirdComplexType( linkedModelElement ); 
    	    closeTag( );
    	}	
    	for ( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle linkedModelElement : getLinks( modelElement, com.sap.moin.xm.test.RootElementImportIncludeTop.ASSOCIATION_DESCRIPTOR, "elementImportIncludeTop" ) ) { //$NON-NLS-1$
    	    startTag( ELEMENT_ns1_ElementImportIncludeTop );
    	    writeNs1EElementImportIncludeTop( linkedModelElement ); 
    	    closeTag( );
    	}	
    }
  

    
}