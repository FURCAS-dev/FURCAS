import 'http://ocl.eclipse.org/tutorial/eclipsecon2011/States'

package fowlerdsl

context Statemachine
inv HasInitialState('No initial state'):
	states->exists(s : State | s.initial)

context SimpleState
def: asError(verdict : Boolean) : Boolean =
	if verdict then true else null endif
def: getStatemachine() : Statemachine =
	Statemachine.allInstances()->any(states->includes(self))
--inv EveryEventIsHandled((getStatemachine().events->asSet() - self.transitions.event->asSet())->iterate(e : Event; s : String = 'Not all events are handled' | s = s + ' ' + e.name)):
inv EveryEventIsHandled('Not all events are handled' + (getStatemachine().events->asSet() - self.transitions.event->asSet())->size().toString()):
	(getStatemachine().events->asSet() - self.transitions.event->asSet())->isEmpty()
inv UniqueInitialState('There is more than one initial state'):
--	initial implies
--	let states : Set(State) = Statemachine.allInstances()->any(states->includes(self))
--	in states->select(initial)->size() = 1
	initial implies getStatemachine().states->select(initial)->size() = 1 
--inv NameLength('\'' + name + '\' has ' + name.size().toString() + ' characters when at least 4 wanted'):
--	name.size() >= 4
--inv NameIsLowerCase('\'' + name + '\' must be Leading Uppercase'):
--	let firstLetter : String = name.substring(1,1) in firstLetter.toUpperCase() = firstLetter

endpackage