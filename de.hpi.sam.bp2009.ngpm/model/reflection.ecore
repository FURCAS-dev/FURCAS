<?xml version="1.0" encoding="UTF-8"?>
<ecore:EPackage xmi:version="2.0"
    xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="reflection"
    nsURI="http:///reflection.ecore" nsPrefix="reflection">
  <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
    <details key="invocationDelegates" value="http://de.hpi.sam.bp2009.OCL"/>
    <details key="validationDelegates" value="http://de.hpi.sam.bp2009.OCL"/>
  </eAnnotations>
  <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
    <details key="documentation" value="Allows for instantiating classes of the metamodel in the application. In other words, Class is an instance of type Class, Block is a Class, there can be expressions of type Class and of type Block etc.&#xD;&#xA;&#xD;&#xA;Similarly, for Operation, an operation object can be instantiated. Ideally, there should be literals that can be used to identify operation objects in the program syntax (maybe special syntax for the operation currently executing). An operation invocation expression can then be constructed at runtime, only that still the constraints for the type safety must be met.&#xD;&#xA;&#xD;&#xA;This may mean that an operation invocation expression can be written as calling an operation with a specific kind of signature, and the actual operation's signature then must match that signature."/>
  </eAnnotations>
  <eClassifiers xsi:type="ecore:EClass" name="Object">
    <eStructuralFeatures xsi:type="ecore:EReference" name="type" lowerBound="1" eType="ecore:EClass data.ecore#//classes/SapClass"
        eOpposite="data.ecore#//classes/SapClass/instances"/>
  </eClassifiers>
</ecore:EPackage>
