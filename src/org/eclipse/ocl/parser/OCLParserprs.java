/**
* <copyright>
*
* Copyright (c) 2005, 2009 IBM Corporation, Zeligsoft Inc., Borland Software Corp., and others.
* All rights reserved.   This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   IBM - Initial API and implementation
*   E.D.Willink - Elimination of some shift-reduce conflicts
*   E.D.Willink - Remove unnecessary warning suppression
*   E.D.Willink - Bugs 225493, 243976, 259818
*   Zeligsoft - Bug 243976
*   Borland - Bug 242880
*   E.D.Willink - Bug 282882 resolve invalid confusion
*
* </copyright>
*
* $Id: OCLParserprs.java,v 1.10 2009/09/04 10:19:33 asanchez Exp $
*/

package org.eclipse.ocl.parser;

public class OCLParserprs implements lpg.lpgjavaruntime.ParseTable, OCLParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,1,1,1,1,1,
            1,1,1,1,1,0,0,0,0,0,
            0,1,1,0,1,1,1,1,1,1,
            1,1,1,0,0,0,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,0,
            0,0,0,1,1,1,0,1,0,0,
            1,0,1,1,0,1,1,1,0,0,
            0,0,0,0,0,0,0,0,0,0,
            1,1,1,1,1,1,1,1,1,0,
            0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,6,8,0,1,1,3,
            0,1,1,1,1,1,3,3,1,1,
            3,3,3,3,3,3,1,1,3,3,
            3,3,1,1,3,3,3,3,3,3,
            3,3,1,1,1,1,3,3,3,3,
            1,1,3,3,3,3,1,1,2,2,
            1,2,2,4,6,1,1,1,1,3,
            2,2,5,5,1,1,1,1,1,1,
            1,1,1,1,1,1,1,3,0,1,
            1,1,1,1,1,1,3,3,4,1,
            1,1,1,1,0,1,1,3,1,1,
            3,2,3,1,1,1,1,1,4,1,
            1,1,1,1,1,1,1,2,2,2,
            2,1,1,4,6,8,6,8,1,3,
            1,5,3,0,1,1,1,1,1,4,
            4,0,1,1,3,1,1,3,3,1,
            1,5,5,5,1,5,2,2,5,0,
            1,0,1,1,3,4,7,5,5,0,
            1,1,3,1,1,3,1,1,1,1,
            1,1,0,1,2,4,1,0,1,1,
            2,1,1,1,7,4,4,0,1,3,
            1,2,4,4,1,2,3,3,3,1,
            2,4,4,4,-89,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-93,0,0,-2,-3,0,0,0,
            0,-14,-69,-123,0,-4,0,-39,0,0,
            -42,0,0,-5,0,0,-97,0,0,-95,
            0,0,-41,-158,0,0,0,0,0,0,
            0,0,0,-17,0,0,-178,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-18,0,
            0,0,0,-19,0,-98,0,0,0,-12,
            0,0,0,-13,0,-15,-20,-21,-22,-40,
            -43,-10,0,0,-179,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -23,0,0,0,-27,-28,0,-29,-30,-38,
            -54,-55,0,-56,-57,-6,0,0,-58,-59,
            0,0,-94,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-60,-61,0,-7,0,0,-51,0,-122,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-62,0,
            0,-8,0,0,-52,0,-124,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-63,0,0,-9,0,
            0,-53,0,-166,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-64,0,-67,-68,-70,-72,-73,-74,
            -75,-76,-77,-78,-79,-80,-81,-82,-11,0,
            0,-83,-84,0,0,-172,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-85,-86,0,-87,-88,-101,
            -125,0,-177,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-186,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -126,-129,-130,0,-131,-132,-133,-65,0,-91,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-134,-66,
            0,-92,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -135,-137,0,-175,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-136,-138,0,-206,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-141,-142,-143,-144,-145,-146,
            -148,-149,-150,-151,-152,-153,-154,0,-31,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-32,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-33,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-34,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -35,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-37,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-44,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-50,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-71,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -114,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-115,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-121,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-127,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-147,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -164,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-165,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-168,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-169,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-196,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -202,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-204,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-212,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-213,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-110,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-111,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -112,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-113,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-104,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-105,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-106,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-107,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-108,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-109,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-102,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-103,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-99,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-100,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -48,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-49,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-128,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-96,0,0,-155,-139,0,0,
            0,0,0,0,0,0,-120,-140,-16,0,
            -156,0,0,-157,-159,-160,-161,-162,-163,-45,
            0,-1,0,0,-173,-174,-176,-180,-181,-183,
            -184,-185,-187,-170,-25,-188,-189,-197,0,-190,
            0,0,-198,0,-46,0,0,0,-191,-24,
            -26,-192,-193,-194,0,0,-36,0,0,0,
            0,0,0,-116,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-90,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-47,0,-167,0,0,0,0,0,
            0,-118,0,-117,0,0,-171,-205,0,0,
            0,0,-195,-199,-119,-207,-182,0,-200,-208,
            0,0,-209,-210,-211,0,0,-201,-214,0,
            -203,0,-215,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            82,9,9,9,9,9,9,9,9,9,
            9,9,9,9,9,9,9,9,9,65,
            65,5,5,5,5,5,5,5,5,5,
            5,5,6,6,6,6,6,6,6,6,
            6,6,6,7,7,10,10,8,14,66,
            83,84,11,105,105,85,86,67,67,69,
            69,55,55,45,45,46,47,46,47,43,
            44,43,43,43,44,44,44,41,42,41,
            42,41,42,39,40,39,40,39,40,39,
            40,39,40,35,35,37,36,37,36,37,
            36,33,34,33,34,33,34,15,31,15,
            15,16,16,16,16,16,17,17,17,17,
            17,18,18,18,18,2,2,2,1,1,
            1,1,1,1,1,1,1,3,3,89,
            89,19,19,19,19,19,19,20,20,21,
            4,4,4,4,4,90,90,91,91,70,
            70,71,71,71,23,23,23,23,23,22,
            26,27,28,29,30,30,24,25,87,87,
            87,87,93,93,94,94,94,95,95,49,
            48,49,49,73,68,68,52,52,52,52,
            54,53,96,96,74,74,92,92,92,92,
            72,72,72,12,13,97,12,75,75,75,
            50,50,56,56,51,51,32,38,88,88,
            76,76,77,77,62,62,62,82,82,82,
            82,82,82,82,99,99,79,98,100,100,
            80,80,57,57,57,60,78,78,81,81,
            58,101,101,63,61,63,63,102,102,59,
            103,103,64,64,64,1,125,980,745,511,
            33,520,47,578,46,692,635,118,119,928,
            101,333,111,116,117,141,142,143,144,145,
            146,164,165,166,167,168,102,108,747,96,
            83,84,748,94,750,78,749,70,752,66,
            921,751,64,978,125,979,239,798,33,43,
            47,147,232,68,1167,2951,241,2918,1083,125,
            138,1083,125,756,982,157,159,1083,125,1139,
            762,125,2898,323,5,33,43,47,1084,46,
            692,635,211,180,910,821,922,159,125,980,
            745,511,33,520,47,578,46,692,635,118,
            119,928,101,333,111,116,117,141,142,143,
            144,145,146,164,165,166,167,168,102,108,
            747,96,83,84,748,94,750,78,749,70,
            752,66,234,751,64,49,1032,271,2935,1006,
            112,113,181,215,1087,210,1083,125,1140,232,
            232,2917,2930,2950,25,344,325,1102,1120,1128,
            690,79,244,2952,2954,159,125,980,745,511,
            33,520,47,578,46,692,635,118,119,928,
            101,333,111,116,117,141,142,143,144,145,
            146,164,165,166,167,168,102,108,747,96,
            83,84,748,94,750,78,749,70,752,66,
            234,751,64,251,252,253,254,251,252,253,
            254,1132,265,266,262,317,37,232,149,326,
            236,571,583,245,77,472,1064,125,62,719,
            544,3033,2954,403,125,980,745,511,33,520,
            47,578,46,692,635,118,119,928,101,333,
            111,116,117,141,142,143,144,145,146,164,
            165,166,167,168,102,108,747,96,83,84,
            748,94,750,78,749,70,752,66,224,751,
            64,424,893,1113,1083,1064,125,62,825,1031,
            403,125,980,745,511,33,520,47,578,46,
            692,635,118,119,928,101,333,111,116,117,
            141,142,143,144,145,146,164,165,166,167,
            168,102,108,747,96,83,84,748,94,750,
            78,749,70,752,66,224,751,64,816,1141,
            437,1083,1064,125,62,825,2916,403,125,980,
            745,511,33,520,47,578,46,692,635,118,
            119,928,101,333,111,116,117,141,142,143,
            144,145,146,164,165,166,167,168,102,108,
            747,96,83,84,748,94,750,78,749,70,
            752,66,224,751,64,818,1142,438,1083,1064,
            125,62,825,2919,80,125,980,745,511,33,
            520,47,578,46,692,635,118,119,928,101,
            333,111,116,117,141,142,143,144,145,146,
            164,165,166,167,168,102,108,747,96,83,
            84,748,94,750,78,749,70,752,66,921,
            751,64,819,1143,439,1147,947,979,857,70,
            909,887,905,1046,1150,888,1081,688,890,1064,
            125,62,1145,233,158,159,403,125,980,745,
            511,33,520,47,578,46,692,635,118,119,
            928,101,333,111,116,117,141,142,143,144,
            145,146,164,165,166,167,168,102,108,747,
            96,83,84,748,94,750,78,749,70,752,
            66,224,751,64,501,1154,949,1083,1159,1161,
            1149,470,2932,475,125,980,745,511,33,520,
            47,578,46,692,635,118,119,928,101,333,
            111,116,117,141,142,143,144,145,146,164,
            165,166,167,168,102,108,747,96,83,84,
            748,94,750,78,749,70,752,66,2940,751,
            64,191,2937,403,125,980,745,511,33,520,
            47,578,46,692,635,118,119,928,101,333,
            111,116,117,141,142,143,144,145,146,164,
            165,166,167,168,102,108,747,96,83,84,
            748,94,750,78,749,70,752,66,224,751,
            64,1157,1168,1048,1083,1103,1065,1080,242,3034,
            331,125,980,745,511,33,520,47,578,46,
            692,635,118,119,928,101,333,111,116,117,
            141,142,143,144,145,146,164,165,166,167,
            168,102,108,747,96,83,84,748,94,750,
            78,749,70,752,66,224,751,64,122,945,
            881,926,331,125,980,745,511,33,520,47,
            578,46,692,635,118,119,928,101,333,111,
            116,117,141,142,143,144,145,146,164,165,
            166,167,168,102,108,747,96,83,84,748,
            94,750,78,749,70,752,66,224,751,64,
            121,1170,825,927,331,125,980,745,511,33,
            520,47,578,46,692,635,118,119,928,101,
            333,111,116,117,141,142,143,144,145,146,
            164,165,166,167,168,102,108,747,96,83,
            84,748,94,750,78,749,70,752,66,224,
            751,64,2925,1171,825,2933,245,125,980,745,
            511,33,520,47,578,46,692,635,118,119,
            928,101,333,111,116,117,141,142,143,144,
            145,146,164,165,166,167,168,102,108,747,
            96,83,84,748,94,750,78,749,70,752,
            66,234,751,64,2926,1172,1175,1177,1179,1183,
            1186,1114,1117,917,1034,971,71,226,233,331,
            125,980,745,511,33,520,47,578,46,692,
            635,118,119,928,101,333,111,116,117,141,
            142,143,144,145,146,164,165,166,167,168,
            102,108,747,96,83,84,748,94,750,78,
            749,70,752,66,257,751,64,331,125,980,
            745,511,33,520,47,578,46,692,635,118,
            119,928,101,333,111,116,117,141,142,143,
            144,145,146,164,165,166,167,168,102,108,
            747,96,83,84,748,94,750,78,749,70,
            752,66,256,751,64,331,125,980,745,511,
            33,520,47,578,46,692,635,118,119,928,
            101,333,111,116,117,141,142,143,144,145,
            146,164,165,166,167,168,102,108,747,96,
            83,84,748,94,750,78,749,70,752,66,
            274,751,64,331,125,980,745,511,33,520,
            47,578,46,692,635,118,119,928,101,333,
            111,116,117,141,142,143,144,145,146,164,
            165,166,167,168,102,108,747,96,83,84,
            748,94,750,78,749,70,752,66,273,751,
            64,331,125,980,745,511,33,520,47,578,
            46,692,635,118,119,928,101,333,111,116,
            117,141,142,143,144,145,146,164,165,166,
            167,168,102,108,747,96,83,84,748,94,
            750,78,749,70,752,66,272,751,64,331,
            125,980,745,511,33,520,47,578,46,692,
            635,118,119,928,101,333,111,116,117,141,
            142,143,144,145,146,164,165,166,167,168,
            102,108,747,96,83,84,748,94,750,78,
            749,70,752,66,263,751,64,331,125,980,
            745,511,33,520,47,578,46,692,635,118,
            119,928,101,333,111,116,117,141,142,143,
            144,145,146,164,165,166,167,168,102,108,
            747,96,83,84,748,94,750,78,749,70,
            752,66,192,751,64,331,125,980,745,511,
            33,520,47,578,46,692,635,118,119,928,
            101,333,111,116,117,141,142,143,144,145,
            146,164,165,166,167,168,102,108,747,96,
            83,84,748,94,750,78,749,70,752,66,
            815,751,64,331,125,980,745,511,33,520,
            47,578,46,692,635,118,119,928,101,333,
            111,116,117,141,142,143,144,145,146,164,
            165,166,167,168,102,108,747,96,83,84,
            748,94,750,78,749,70,752,66,820,751,
            64,331,125,980,745,511,33,520,47,578,
            46,692,635,118,119,928,101,333,111,116,
            117,141,142,143,144,145,146,164,165,166,
            167,168,102,108,747,96,83,84,748,94,
            750,78,749,70,752,66,268,751,64,331,
            125,980,745,511,33,520,47,578,46,692,
            635,118,119,928,101,333,111,116,117,141,
            142,143,144,145,146,164,165,166,167,168,
            102,108,747,96,83,84,748,94,750,78,
            749,70,752,66,267,751,64,331,125,980,
            745,511,33,520,47,578,46,692,635,118,
            119,928,101,333,111,116,117,141,142,143,
            144,145,146,164,165,166,167,168,102,108,
            747,96,83,84,748,94,750,78,749,70,
            752,66,226,751,64,331,125,980,745,511,
            33,520,47,578,46,692,635,118,119,928,
            101,333,111,116,117,141,142,143,144,145,
            146,164,165,166,167,168,102,108,747,96,
            83,84,748,94,750,78,749,70,752,66,
            162,751,64,331,125,980,745,511,33,520,
            47,578,46,692,635,118,119,928,101,333,
            111,116,117,141,142,143,144,145,146,164,
            165,166,167,168,102,108,747,96,83,84,
            748,94,750,78,749,70,752,66,2928,751,
            64,331,125,980,745,511,33,520,47,578,
            46,692,635,118,119,928,101,333,111,116,
            117,141,142,143,144,145,146,164,165,166,
            167,168,102,108,747,96,83,84,748,94,
            750,78,749,70,752,66,163,751,64,331,
            125,980,745,511,33,520,47,578,46,692,
            635,118,119,928,101,333,111,116,117,141,
            142,143,144,145,146,164,165,166,167,168,
            102,108,747,96,83,84,748,94,750,78,
            749,70,752,66,161,751,64,331,125,980,
            745,511,33,520,47,578,46,692,635,118,
            119,928,101,333,111,116,117,141,142,143,
            144,145,146,164,165,166,167,168,102,108,
            747,96,83,84,748,94,750,78,749,70,
            752,66,193,751,64,331,125,980,745,511,
            33,520,47,578,46,692,635,118,119,928,
            101,333,111,116,117,141,142,143,144,145,
            146,164,165,166,167,168,102,108,747,96,
            83,84,748,94,750,78,749,70,752,66,
            225,751,64,331,125,980,745,511,33,520,
            47,578,46,692,635,118,119,928,101,333,
            111,116,117,141,142,143,144,145,146,164,
            165,166,167,168,102,108,747,96,83,84,
            748,94,750,78,749,70,752,66,3036,751,
            64,331,125,980,745,511,33,520,47,578,
            46,692,635,118,119,928,101,333,111,116,
            117,141,142,143,144,145,146,164,165,166,
            167,168,102,108,747,96,83,84,748,94,
            750,78,749,70,752,66,3043,751,64,331,
            125,980,745,511,33,520,47,578,46,692,
            635,118,119,928,101,333,111,116,117,141,
            142,143,144,145,146,164,165,166,167,168,
            102,108,747,96,83,84,748,94,750,78,
            749,70,752,66,3045,751,64,331,125,980,
            745,511,33,520,47,578,46,692,635,118,
            119,928,101,333,111,116,117,141,142,143,
            144,145,146,164,165,166,167,168,102,108,
            747,96,83,84,748,94,750,78,749,70,
            752,66,3049,751,64,331,125,980,745,511,
            33,520,47,578,46,692,635,118,119,928,
            101,333,111,116,117,141,142,143,144,145,
            146,164,165,166,167,168,102,108,747,96,
            83,84,748,94,750,78,749,70,752,66,
            3053,751,64,331,125,980,745,511,33,520,
            47,578,46,692,635,118,119,928,101,333,
            111,116,117,141,142,143,144,145,146,164,
            165,166,167,168,102,108,747,96,83,84,
            748,94,750,78,749,70,1145,68,331,125,
            980,745,511,33,520,47,578,46,692,635,
            118,119,928,101,333,111,116,117,141,142,
            143,144,145,146,164,165,166,167,168,102,
            108,747,96,83,84,748,94,750,78,1146,
            76,331,125,980,745,511,33,520,47,578,
            46,692,635,118,119,928,101,333,111,116,
            117,141,142,143,144,145,146,164,165,166,
            167,168,102,108,747,96,83,84,748,94,
            750,78,1147,75,331,125,980,745,511,33,
            520,47,578,46,692,635,118,119,928,101,
            333,111,116,117,141,142,143,144,145,146,
            164,165,166,167,168,102,108,747,96,83,
            84,748,94,750,78,2897,74,331,125,980,
            745,511,33,520,47,578,46,692,635,118,
            119,928,101,333,111,116,117,141,142,143,
            144,145,146,164,165,166,167,168,102,108,
            747,96,83,84,748,94,1143,82,331,125,
            980,745,511,33,520,47,578,46,692,635,
            118,119,928,101,333,111,116,117,141,142,
            143,144,145,146,164,165,166,167,168,102,
            108,747,96,83,84,748,94,1144,80,331,
            125,980,745,511,33,520,47,578,46,692,
            635,118,119,928,101,333,111,116,117,141,
            142,143,144,145,146,164,165,166,167,168,
            102,108,747,96,91,92,748,94,331,125,
            980,745,511,33,520,47,578,46,692,635,
            118,119,928,101,333,111,116,117,141,142,
            143,144,145,146,164,165,166,167,168,102,
            108,747,96,89,90,748,94,331,125,980,
            745,511,33,520,47,578,46,692,635,118,
            119,928,101,333,111,116,117,141,142,143,
            144,145,146,164,165,166,167,168,102,108,
            747,96,87,88,748,94,331,125,980,745,
            511,33,520,47,578,46,692,635,118,119,
            928,101,333,111,116,117,141,142,143,144,
            145,146,164,165,166,167,168,102,108,747,
            96,85,86,748,94,547,125,980,745,511,
            33,520,47,578,46,692,635,118,119,928,
            101,333,111,116,117,141,142,143,144,145,
            146,164,165,166,167,168,102,108,1141,100,
            547,125,980,745,511,33,520,47,578,46,
            692,635,118,119,928,101,333,111,116,117,
            141,142,143,144,145,146,164,165,166,167,
            168,102,108,1142,98,547,125,980,745,511,
            33,520,47,578,46,692,635,118,119,928,
            105,333,111,116,117,141,142,143,144,145,
            146,164,165,166,167,168,106,108,547,125,
            980,745,511,33,520,47,578,46,692,635,
            118,119,928,103,333,111,116,117,141,142,
            143,144,145,146,164,165,166,167,168,104,
            108,695,125,980,745,511,33,520,47,578,
            46,692,635,118,119,928,110,333,111,116,
            117,141,142,143,144,145,146,164,165,166,
            167,168,695,125,980,745,511,33,520,47,
            578,46,692,635,118,119,928,109,333,111,
            116,117,141,142,143,144,145,146,164,165,
            166,167,168,616,125,980,745,511,33,520,
            47,578,46,692,635,118,119,928,109,333,
            111,116,117,141,142,143,144,145,146,164,
            165,166,167,168,821,125,2898,235,1069,1137,
            43,47,2908,46,692,635,211,689,825,911,
            196,1188,506,508,1189,1190,1191,1193,1196,1198,
            911,196,1045,506,508,1199,1205,689,228,1203,
            1115,1208,1209,1110,825,237,1063,1014,1029,196,
            1215,506,508,1029,196,684,506,508,217,1032,
            620,1033,1216,1217,1201,191,205,683,218,49,
            1032,505,197,198,911,196,178,506,508,210,
            191,242,757,197,198,191,2936,1136,1138,250,
            252,253,254,265,124,239,240,179,182,183,
            195,197,198,191,204,195,197,198,1163,270,
            336,244,436,344,326,754,55,250,252,253,
            254,56,265,689,261,1163,190,197,198,762,
            237,434,911,196,1164,506,508,825,911,196,
            440,506,508,1218,1224,1164,1221,689,353,825,
            355,758,753,1226,367,1229,191,207,689,1231,
            510,689,441,1234,3107,3107,3107,3107,3107,264,
            3107,191,204,191,209,3107,3107,3107,3107,3107,
            3107,206,191,59,354,197,198,123,3107,3107,
            236,197,198,191,59,191,60,763,208,219,
            923,2911,3107,2914,3107,3107,191,3040,3107,191,
            3044,3107,2915,3107,2914,3107,3107
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,0,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,0,25,26,27,28,29,
            30,31,32,33,34,35,0,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,0,68,0,
            0,71,3,3,5,5,0,1,0,0,
            1,2,3,83,5,6,7,8,9,10,
            11,12,13,14,15,16,17,18,19,20,
            21,22,23,67,25,26,27,28,29,30,
            31,32,33,34,35,91,37,38,39,40,
            41,42,43,44,45,46,47,48,49,50,
            51,52,53,54,55,56,57,58,59,60,
            61,62,63,64,65,66,70,68,0,1,
            71,84,74,86,76,88,89,79,0,1,
            2,3,83,5,6,7,8,9,10,11,
            12,13,14,15,16,17,18,19,20,21,
            22,23,0,25,26,27,28,29,30,31,
            32,33,34,35,0,37,38,39,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,56,57,58,59,60,61,
            62,63,64,65,66,0,68,0,3,71,
            5,0,0,2,0,0,0,3,0,5,
            0,0,6,0,0,1,2,3,90,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,36,25,
            26,27,28,29,30,31,32,33,34,35,
            0,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,55,
            56,57,58,59,60,61,62,63,64,65,
            66,70,68,77,78,71,0,74,80,3,
            80,94,0,82,0,0,1,92,6,97,
            0,1,2,3,90,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,0,25,26,27,28,29,
            30,31,32,33,34,35,0,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,73,68,77,
            78,71,0,1,2,3,0,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,72,25,26,27,
            28,29,30,31,32,33,34,35,72,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,0,
            68,0,1,71,0,1,2,3,0,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,0,25,
            26,27,28,29,30,31,32,33,34,35,
            0,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,55,
            56,57,58,59,60,61,62,63,64,65,
            66,70,68,0,1,71,0,1,2,3,
            81,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            0,25,26,27,28,29,30,31,32,33,
            34,35,0,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,70,68,0,1,2,3,0,
            5,6,7,8,9,10,11,12,13,14,
            15,16,17,18,19,20,21,22,23,69,
            25,26,27,28,29,30,31,32,33,34,
            35,69,37,38,39,40,41,42,43,44,
            45,46,47,48,49,50,51,52,53,54,
            55,56,57,58,59,60,61,62,63,64,
            65,66,0,0,2,2,67,0,0,0,
            2,4,73,0,0,1,2,3,83,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,0,25,
            26,27,28,29,30,31,32,33,34,35,
            0,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,55,
            56,57,58,59,60,61,62,63,64,65,
            66,0,73,2,3,0,5,6,7,8,
            9,10,11,12,13,14,15,16,17,18,
            19,20,21,22,23,67,25,26,27,28,
            29,30,31,32,33,34,35,0,37,38,
            39,40,41,42,43,44,45,46,47,48,
            49,50,51,52,53,54,55,56,57,58,
            0,24,2,3,0,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,0,25,26,27,28,29,
            30,31,32,33,34,35,0,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,0,
            0,1,3,4,5,6,0,0,1,0,
            34,35,0,4,70,16,17,18,19,20,
            21,22,23,0,0,26,27,28,0,0,
            0,24,2,34,35,36,0,7,8,9,
            10,11,12,13,14,15,18,19,20,21,
            26,27,28,24,18,19,20,21,0,29,
            30,31,32,33,0,1,0,1,0,1,
            70,72,73,74,75,76,77,78,79,80,
            81,69,82,84,85,86,87,88,89,59,
            0,92,93,94,95,96,97,0,0,2,
            0,0,96,6,7,8,9,10,11,12,
            13,14,15,0,16,17,26,27,28,22,
            23,0,25,22,23,0,29,30,31,32,
            33,67,0,0,37,38,39,40,41,42,
            43,44,45,46,47,48,49,50,0,24,
            2,0,0,0,0,7,8,9,10,11,
            12,13,14,15,0,0,2,0,3,36,
            6,18,19,20,21,24,0,29,30,31,
            32,33,0,0,0,2,0,36,0,1,
            7,8,9,10,11,12,13,14,15,0,
            0,1,0,36,2,72,0,59,25,7,
            8,9,10,11,12,13,14,15,67,67,
            36,0,0,72,24,3,74,25,76,0,
            24,79,0,0,0,36,0,73,74,0,
            76,77,78,79,80,24,24,0,81,16,
            17,0,16,17,72,91,22,23,70,75,
            0,0,0,24,0,36,0,85,0,0,
            82,24,3,0,75,24,0,4,0,1,
            0,1,0,0,2,2,0,0,2,0,
            0,0,1,4,0,1,0,1,0,1,
            36,69,0,1,75,0,1,0,0,0,
            0,4,0,4,4,0,4,0,0,1,
            0,4,0,36,0,1,36,0,0,69,
            69,69,4,67,0,0,0,0,4,4,
            0,4,0,0,36,0,24,4,0,4,
            0,24,4,0,4,0,36,4,0,1,
            24,93,0,87,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,67,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,95,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            155,1485,519,3114,258,3115,3142,3237,3235,3236,
            3238,3239,3240,3241,3242,3243,514,3118,3119,3120,
            3121,3122,3143,3144,238,3233,3123,3124,3125,743,
            686,629,573,572,3116,2863,199,515,3139,3128,
            3129,3130,3131,3132,3133,3134,3135,3136,3137,3138,
            3141,2801,3112,3113,3111,3110,3108,3109,3159,512,
            746,3280,3277,3279,3281,3282,3284,107,3013,69,
            73,1533,2468,2468,2427,2427,171,10,260,3107,
            1485,519,3114,1725,3115,3142,3237,3235,3236,3238,
            3239,3240,3241,3242,3243,514,3118,3119,3120,3121,
            3122,3143,3144,338,3233,3123,3124,3125,743,686,
            629,573,572,3116,2863,430,515,3139,3128,3129,
            3130,3131,3132,3133,3134,3135,3136,3137,3138,3141,
            2801,3112,3113,3111,3110,3108,3109,3159,512,746,
            3280,3277,3279,3281,3282,3284,10,3013,3107,2920,
            1533,2894,689,350,759,426,347,442,230,1485,
            519,3114,1725,3115,3142,3237,3235,3236,3238,3239,
            3240,3241,3242,3243,514,3118,3119,3120,3121,3122,
            3143,3144,3107,3233,3123,3124,3125,743,686,629,
            573,572,3116,2832,3107,515,3139,3128,3129,3130,
            3131,3132,3133,3134,3135,3136,3137,3138,3141,2801,
            3112,3113,3111,3110,3108,3109,3159,512,746,3280,
            3277,3279,3281,3282,3284,72,3013,3107,2468,1533,
            2427,3107,3107,3244,71,3107,3107,2468,3107,2427,
            259,220,516,3107,3107,1485,519,3114,2953,3115,
            3142,3237,3235,3236,3238,3239,3240,3241,3242,3243,
            514,3118,3119,3120,3121,3122,3143,3144,2907,3233,
            3123,3124,3125,743,686,629,573,572,3116,2832,
            3107,515,3139,3128,3129,3130,3131,3132,3133,3134,
            3135,3136,3137,3138,3141,2801,3112,3113,3111,3110,
            3108,3109,3159,512,746,3280,3277,3279,3281,3282,
            3284,3328,3013,632,575,1533,190,689,3106,1437,
            241,2013,269,930,247,3107,2945,3353,516,1677,
            3107,1485,519,3114,2953,3115,3142,3237,3235,3236,
            3238,3239,3240,3241,3242,3243,514,3118,3119,3120,
            3121,3122,3143,3144,3107,3233,3123,3124,3125,743,
            686,629,573,572,3116,2832,3107,515,3139,3128,
            3129,3130,3131,3132,3133,3134,3135,3136,3137,3138,
            3141,2801,3112,3113,3111,3110,3108,3109,3159,512,
            746,3280,3277,3279,3281,3282,3284,332,3013,632,
            575,1533,222,1485,519,3114,3107,3115,3142,3237,
            3235,3236,3238,3239,3240,3241,3242,3243,514,3118,
            3119,3120,3121,3122,3143,3144,2157,3233,3123,3124,
            3125,743,686,629,573,572,3116,2832,2205,515,
            3139,3128,3129,3130,3131,3132,3133,3134,3135,3136,
            3137,3138,3141,2801,3112,3113,3111,3110,3108,3109,
            3159,512,746,3280,3277,3279,3281,3282,3284,3107,
            3013,176,44,1533,3107,1485,2949,3114,3107,3115,
            3142,3237,3235,3236,3238,3239,3240,3241,3242,3243,
            514,3118,3119,3120,3121,3122,3143,3144,3107,3233,
            3123,3124,3125,743,686,629,573,572,3116,2832,
            3107,515,3139,3128,3129,3130,3131,3132,3133,3134,
            3135,3136,3137,3138,3141,2801,3112,3113,3111,3110,
            3108,3109,3159,512,746,3280,3277,3279,3281,3282,
            3284,44,3013,48,43,1533,3107,1485,519,3114,
            3256,3115,3142,3237,3235,3236,3238,3239,3240,3241,
            3242,3243,514,3118,3119,3120,3121,3122,3143,3144,
            3107,3233,3123,3124,3125,743,686,629,573,572,
            3116,2832,3107,515,3139,3128,3129,3130,3131,3132,
            3133,3134,3135,3136,3137,3138,3141,2801,3112,3113,
            3111,3110,3108,3109,3159,512,746,3280,3277,3279,
            3281,3282,3284,4620,3013,3107,1485,519,3114,248,
            3115,3142,3237,3235,3236,3238,3239,3240,3241,3242,
            3243,514,3118,3119,3120,3121,3122,3143,3144,275,
            3233,3123,3124,3125,743,686,629,573,572,3116,
            2832,2998,515,3139,3128,3129,3130,3131,3132,3133,
            3134,3135,3136,3137,3138,3141,2801,3112,3113,3111,
            3110,3108,3109,3159,512,746,3280,3277,3279,3281,
            3282,3284,3107,202,755,327,338,3107,3107,249,
            327,3307,332,3107,3107,1485,519,3114,1869,3115,
            3142,3237,3235,3236,3238,3239,3240,3241,3242,3243,
            514,3118,3119,3120,3121,3122,3143,3144,127,3233,
            3123,3124,3125,743,686,629,573,572,3116,2832,
            3107,515,3139,3128,3129,3130,3131,3132,3133,3134,
            3135,3136,3137,3138,3141,2801,3112,3113,3111,3110,
            3108,3109,3159,512,746,3280,3277,3279,3281,3282,
            3284,3107,332,3234,3114,3107,3115,3142,3237,3235,
            3236,3238,3239,3240,3241,3242,3243,3117,3118,3119,
            3120,3121,3122,3143,3144,137,3233,3123,3124,3125,
            3145,3146,3147,3148,3149,3116,3126,189,3151,3139,
            3128,3129,3130,3131,3132,3133,3134,3135,3136,3137,
            3138,3141,3127,3112,3113,3111,3110,3108,3109,3159,
            3107,2909,3234,3114,220,3115,3142,3237,3235,3236,
            3238,3239,3240,3241,3242,3243,3117,3118,3119,3120,
            3121,3122,3143,3144,3107,3233,3123,3124,3125,3145,
            3146,3147,3148,3149,3116,3126,93,3151,1135,3128,
            3129,3130,3131,3132,3133,3134,3135,3136,3137,3138,
            3141,3127,3112,3113,3111,3110,3108,3109,3159,45,
            220,45,3328,3328,3328,3328,63,3107,3024,3107,
            2700,2665,42,3308,3328,3328,3328,3328,3328,3328,
            3328,3328,3328,3107,65,3328,3328,3328,77,3107,
            3107,2964,3244,3328,3328,3328,81,3237,3235,3236,
            3238,3239,3240,3241,3242,3243,2626,2587,2548,2509,
            2384,2341,2298,1149,2626,2587,2548,2509,3107,3257,
            3258,3259,3260,3261,148,766,3107,523,3107,580,
            4261,3328,3328,3328,3328,3328,3328,3328,3328,3328,
            3328,154,982,3328,3328,3328,3328,3328,3328,509,
            67,3328,3328,3328,3328,3328,3328,3107,95,3234,
            3107,3107,2253,3142,3237,3235,3236,3238,3239,3240,
            3241,3242,3243,3107,2768,2735,2384,2341,2298,3143,
            3144,3107,3233,364,419,3107,3145,3146,3147,3148,
            3149,138,3107,3107,3151,3139,3128,3129,3130,3131,
            3132,3133,3134,3135,3136,3137,3138,3141,194,1197,
            3244,127,3107,79,3107,3237,3235,3236,3238,3239,
            3240,3241,3242,3243,258,3107,327,3107,1581,3051,
            516,2626,2587,2548,2509,2909,3107,3257,3258,3259,
            3260,3261,3107,61,3107,3234,3107,189,220,45,
            3237,3235,3236,3238,3239,3240,3241,3242,3243,3107,
            138,3035,3107,3015,3234,2109,3107,509,3233,3237,
            3235,3236,3238,3239,3240,3241,3242,3243,137,341,
            1965,3107,189,189,3022,1917,689,3233,759,3107,
            1245,442,41,99,255,1965,97,332,689,3107,
            759,632,575,442,243,1293,2909,3107,3276,2768,
            2735,3107,2768,2735,2061,430,259,259,4261,2934,
            40,39,38,1341,203,1965,3107,3048,3107,3107,
            1034,2957,1629,3107,3027,1389,160,3227,3107,334,
            3107,637,3107,57,925,327,139,156,3244,3107,
            223,32,50,3221,3107,2927,33,51,3107,823,
            2907,153,3107,367,3039,3107,445,3107,58,3107,
            3107,2929,3107,2931,3321,140,3323,3107,3107,873,
            231,3320,3107,694,218,580,1965,3107,3107,152,
            151,150,3222,323,3107,3107,235,3107,3291,3336,
            3107,3335,3107,3107,3037,3107,2938,3319,3107,3294,
            3107,2943,3292,3107,3295,3107,1086,3293,48,43,
            3028,1773,3107,1821,3107,3107,3107,3107,3107,3107,
            3107,3107,3107,3107,3107,3107,3107,3107,3107,3107,
            3107,3107,338,3107,3107,3107,3107,3107,3107,3107,
            3107,3107,3107,3107,3107,3107,3107,3107,3107,3107,
            3107,3107,3107,3107,3107,3107,3107,3107,3107,3107,
            3107,3107,3107,3107,3107,3107,3107,3107,3107,3107,
            3107,3107,3107,3107,3107,3107,3107,3107,3107,3107,
            3107,3107,3107,3107,3107,3334
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            415,426,69,161,162,210,210,210,210,148,
            210,143,145,143,425,52,221,221,221,221,
            221,221,221,483,206,390,259,150,386,386,
            79,79,79,79,79,143,79,378,133,377,
            203,133,373,79,52,332,143,81,81,79,
            380,380,380,165,165,167,167,223,336,335,
            335,335,335,335,337,336,393,386,339,343,
            79,345,351,347,356,353,383,383,385,388,
            333,333,480,395,333,386,386,386,1,143,
            79,79,111,268,90,90,133,133,80,80,
            398,80,80,79,79,79,79,79,79,79,
            79,79,79,79,79,52,332,52,332,143,
            79,268,332,268,407,400,79,4,406,406,
            404,409,409,225,333,480,380,167,336,338,
            167,386,167,386,386,386,79,343,343,347,
            347,353,351,351,351,333,480,162,333,333,
            333,412,333,79,79,2,143,79,79,338,
            338,268,386,226,79,143,79,77,77,428,
            221,143,430,221,333,268,409,74,265,333,
            456,333,479,480,333,79,51,436,333,338,
            143,79,143,79,52,78,487,266,333,266,
            333,79,79,333,333
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            81,71,68,60,38,50,6,22,23,39,
            40,41,42,43,44,45,46,47,48,49,
            25,66,37,62,16,63,61,64,65,58,
            56,57,55,54,52,53,5,34,17,18,
            19,20,21,26,27,28,1,35,51,83,
            3,8,9,7,10,11,12,13,14,15,
            59,29,30,31,32,33,2,0,4,36,
            97,80,24,72,85,0,4,90,71,68,
            60,66,62,63,61,64,65,59,1,58,
            56,57,55,54,52,53,3,5,34,16,
            17,18,19,20,21,26,27,28,35,51,
            37,39,40,41,42,43,44,45,46,47,
            48,49,38,50,6,22,23,29,30,31,
            32,33,25,8,9,7,10,11,12,13,
            14,15,2,0,80,91,0,74,0,3,
            4,81,72,36,85,77,78,97,6,67,
            80,23,22,0,69,0,34,35,16,17,
            18,19,3,20,21,5,4,81,75,84,
            72,36,85,86,87,88,89,76,74,93,
            94,95,26,27,28,96,97,22,23,79,
            1,70,73,92,80,77,78,6,0,25,
            2,8,9,7,10,11,12,13,14,15,
            24,0,82,70,67,34,35,16,17,18,
            19,20,21,5,75,84,86,87,88,89,
            76,77,78,73,92,74,93,94,95,26,
            27,28,96,6,22,23,79,1,4,81,
            85,97,80,3,36,72,0,71,60,38,
            50,6,22,23,29,30,31,32,33,39,
            40,41,42,43,44,45,46,47,48,49,
            8,9,7,10,11,12,13,14,15,25,
            66,37,62,16,63,61,64,65,59,58,
            56,57,55,54,52,53,3,5,34,17,
            18,19,20,21,26,27,28,1,35,51,
            68,2,4,0,69,1,82,70,88,89,
            84,86,16,17,34,35,18,19,20,21,
            3,5,26,27,28,4,81,75,72,36,
            85,87,77,78,93,94,95,97,6,22,
            23,96,80,74,76,79,73,92,0,1,
            70,0,3,0,24,1,0,1,24,76,
            79,74,67,0,36,97,0,93,0,81,
            36,87,0,24,3,36,81,0,75,36,
            0,4,67,0,22,23,91,76,79,74,
            77,78,6,2,73,80,0,94,0,22,
            23,73,92,80,0,77,78,6,8,9,
            7,10,11,12,13,14,15,59,29,30,
            31,32,33,2,0,72,67,34,35,16,
            17,18,19,3,20,21,5,1,82,84,
            86,70,88,89,26,27,28,96,24,4,
            36,0,92,73,67,0,95,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            83,33,33,33,33,23,23,23,23,21,
            23,32,15,1,17,31,33,33,33,33,
            33,33,33,91,87,93,33,33,33,33,
            28,28,28,28,28,95,28,33,46,17,
            13,46,19,28,31,89,89,28,28,28,
            25,25,25,33,33,33,33,33,33,33,
            33,33,33,33,25,25,33,33,4,33,
            28,33,33,33,33,33,33,33,33,33,
            33,33,33,33,33,33,33,33,28,99,
            28,28,10,28,7,76,46,46,69,69,
            33,62,62,48,48,55,55,55,55,34,
            41,41,41,28,28,31,104,31,104,102,
            28,28,32,28,33,33,28,28,33,33,
            33,33,33,33,33,33,25,25,25,25,
            33,33,33,33,33,33,28,33,33,33,
            33,33,33,33,33,33,33,85,33,33,
            33,33,33,28,28,28,101,28,28,25,
            25,28,33,33,28,102,27,28,28,33,
            33,102,33,33,33,28,33,33,33,33,
            33,33,33,33,33,28,31,31,33,25,
            102,28,102,28,31,28,33,33,33,33,
            33,28,28,33,33
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            3,86,0,87,88,0,11,66,13,2,
            8,0,64,0,79,0,57,0,63,0,
            61,0,55,0,50,0,49,2,6,11,
            4,3,0,3,2,6,4,11,44,0,
            6,11,3,4,42,2,0,3,2,6,
            4,11,40,0,6,2,11,3,4,36,
            0,6,2,11,3,4,34,0,3,2,
            6,4,11,31,0,5,83,2,11,66,
            93,0,80,99,78,0,103,0,74,0,
            80,0,101,0,48,85,102,0,92,0,
            73,49,0,69,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            11,99,7,12,10,55,88,89,90,91,
            92,94,95,96,97,3,4,5,6,8,
            9,56,57,20,34,46,47,48,63,64,
            65,66,67,1,2,19,58,68,69,70,
            71,72,73,74,75,76,77,78,79,87,
            49,80,81,82,83,84,85,86,93,30,
            31,32,33,53,54,59,21,51,13,25,
            42,18,38,41,16,35,36,37,62,98,
            14,15,100,17,22,23,24,26,27,28,
            39,40,43,44,45,50,52,60,61,101,
            102,103
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            0,107,116,139,104,105,0,108,0,106,
            113,0,137,109,132,134,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            133,0,130,131,127,128,129,0,125,126,
            123,124,121,122,119,120,0,145,118,0,
            138,146,0,0,0,0,157,0,0,0,
            159,150,152,153,0,110,0,0,117,141,
            0,143,147,148,0,0,149,154,155,156,
            0,0,111,112,114,115,135,136,0,0,
            140,142,144,0,0,0,0,0,151,0,
            158,160,161,0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            83,117,13,111,141,168,91,125,1,8,
            53,58,63,22,68,72,147,151,157,174,
            46,76,161,46,101,131,101,131,165,40,
            31,178,178,186,186,194,194,194,194,208,
            208,216,216,216
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            6,6,20,6,6,6,97,97,6,6,
            6,6,6,27,6,6,6,155,155,6,
            50,80,50,50,97,97,105,135,6,43,
            34,180,183,188,191,196,199,202,205,210,
            213,218,221,224
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            95,94,38,95,94,16,95,94,88,88,
            13,12,72,38,53,54,94,22,21,16,
            75,49,18,18,95,94,95,94,17,32,
            38,34,34,36,36,40,40,40,40,42,
            42,44,44,44
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            4,4,95,4,4,4,72,72,4,4,
            4,4,4,94,4,4,4,81,81,4,
            75,3,75,75,72,72,85,36,4,97,
            93,17,16,35,34,21,20,19,18,5,
            3,28,27,26
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            2,2,15,2,2,8,2,2,4,4,
            7,6,1,15,63,63,2,8,8,8,
            1,71,8,8,2,2,2,2,8,11,
            15,13,13,15,15,19,19,19,19,21,
            21,24,24,24
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            178,1,104,89,0,12,0,178,1,104,
            88,0,147,94,147,93,147,71,0,45,
            0,147,93,147,71,0,44,119,45,0,
            147,71,0,43,119,44,119,45,0,176,
            68,0,52,119,0,153,82,104,0,16,
            0,0,158,1,152,110,0,158,1,152,
            112,0,158,1,152,168,0,198,1,59,
            0,154,1,106,0,154,24,2,0,7,
            119,0,147,72,151,85,151,1,185,0,
            151,85,151,1,185,0,18,119,12,0,
            151,1,185,0,22,118,18,119,12,0,
            147,72,151,1,185,0,147,72,151,36,
            151,1,186,0,151,36,151,1,186,0,
            151,1,186,0,19,118,18,119,12,0,
            147,72,151,1,186,0,147,1,186,0,
            194,69,59,0,14,0,192,69,106,0,
            153,82,116,0,147,1,0,158,1,104,
            67,105,0,158,1,60,0,135,0,4,
            133,0,3,133,0,139,0,2,131,0,
            1,131,0,141,0,9,128,0,8,128,
            0,6,128,0,5,128,0,143,0,10,
            126,0,7,126,0,145,0,48,124,0,
            47,124,0,46,124,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            350,2894,0,333,0,2894,350,2863,2832,2801,
            2768,2735,2700,2665,2626,2587,2548,2509,2468,2427,
            2384,2341,2298,2205,2157,1086,2109,2061,2013,873,
            445,367,823,1034,766,1965,1917,694,1869,1821,
            1773,1725,637,580,1677,1629,1581,2253,523,982,
            930,275,1533,1485,1437,1389,1341,1293,1245,1197,
            1149,0,3028,2943,2938,3022,2964,2920,2909,0,
            3051,3048,3037,823,2927,3015,2907,3035,3024,2998,
            3013,2945,2922,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,184,2,180,183,6,78,77,74,79,
            76,91,201,73,182,24,22,23,157,157,
            157,157,157,105,188,105,154,105,106,59,
            24,24,24,24,24,24,24,202,67,182,
            205,67,203,3,1,1,68,51,35,1,
            110,113,112,106,59,16,37,2,108,33,
            32,31,30,29,116,104,105,60,118,135,
            71,139,143,141,148,145,187,150,2,104,
            154,198,176,176,147,152,152,152,69,69,
            82,82,67,1,86,84,89,88,17,16,
            147,35,34,5,3,21,20,19,18,96,
            28,27,26,3,3,24,1,24,1,36,
            97,1,1,1,192,147,83,35,193,194,
            2,153,153,104,158,153,168,110,104,110,
            38,185,107,186,104,104,93,135,135,141,
            141,145,143,143,143,169,171,154,169,158,
            199,105,158,87,83,36,36,3,36,75,
            75,1,152,152,82,1,1,1,1,147,
            4,36,180,4,158,1,153,151,151,147,
            2,178,90,179,178,94,24,24,158,75,
            85,72,36,72,24,36,147,151,147,151,
            147,72,72,147,147
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "+",
            "-",
            "*",
            "/",
            ">",
            "<",
            "=",
            ">=",
            "<=",
            "<>",
            "(",
            ")",
            "{",
            "}",
            "[",
            "]",
            "->",
            "|",
            ",",
            ":",
            "::",
            ";",
            ".",
            "..",
            "@pre",
            "^",
            "^^",
            "?",
            "$empty",
            "NUMERIC_OPERATION",
            "STRING_LITERAL",
            "INTEGER_LITERAL",
            "REAL_LITERAL",
            "self",
            "inv",
            "pre",
            "post",
            "context",
            "package",
            "endpackage",
            "def",
            "if",
            "then",
            "else",
            "endif",
            "and",
            "or",
            "xor",
            "not",
            "implies",
            "let",
            "in",
            "true",
            "false",
            "body",
            "derive",
            "init",
            "null",
            "invalid",
            "attr",
            "oper",
            "static",
            "Set",
            "Bag",
            "Sequence",
            "Collection",
            "OrderedSet",
            "iterate",
            "forAll",
            "exists",
            "isUnique",
            "any",
            "one",
            "collect",
            "select",
            "reject",
            "collectNested",
            "sortedBy",
            "closure",
            "oclIsKindOf",
            "oclIsTypeOf",
            "oclAsType",
            "oclIsNew",
            "oclIsUndefined",
            "oclIsInvalid",
            "oclIsInState",
            "allInstances",
            "String",
            "Integer",
            "UnlimitedNatural",
            "Real",
            "Boolean",
            "Tuple",
            "OclAny",
            "OclVoid",
            "OclInvalid",
            "OclMessage",
            "EOF_TOKEN",
            "IDENTIFIER",
            "INTEGER_RANGE_START",
            "SINGLE_LINE_COMMENT",
            "MULTI_LINE_COMMENT",
            "ERROR_TOKEN",
            "iteratorIdentifier",
            "keywordAsIdentifier1",
            "binaryName",
            "simpleNameCS",
            "keywordAsName",
            "keywordAsName1",
            "unaryName",
            "iterateName",
            "iteratorName",
            "oclIsInStateName",
            "operationCS1",
            "operationCS2",
            "pathNameCS",
            "parametersCS",
            "variableCS",
            "oclExpressionCS",
            "impliesExpCS",
            "andOrXorExpCS",
            "andOrXorWithLet",
            "equalityExpCS",
            "equalityWithLet",
            "relationalExpCS",
            "relationalWithLet",
            "ifExpCSPrec",
            "additiveWithLet",
            "additiveExpCS",
            "multiplicativeExpCS",
            "multiplicativeWithLet",
            "unaryExpCS",
            "unaryWithLet",
            "dotArrowExpCS",
            "callExpCS",
            "messageExpCS",
            "keywordOperationCallExpCS",
            "argumentsCS",
            "collectionTypeIdentifierCS",
            "collectionLiteralPartsCS",
            "collectionLiteralPartCS",
            "variableListCS2",
            "featureCallExpCS",
            "loopExpCS",
            "typedVariableCS",
            "typeCS",
            "variableCS2",
            "variableListCS",
            "oclMessageArgumentsCS",
            "oclMessageArgCS",
            "packageDeclarationCSm",
            "invOrDefCS",
            "prePostOrBodyDeclCS",
            "initOrDerValueCS",
            "packageDeclarationCS",
            "contextDeclCSm",
            "contextDeclCS",
            "invOrDefCSm",
            "defCS",
            "defExpressionCS",
            "prePostOrBodyDeclCSm"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 102,
           SCOPE_UBOUND      = 43,
           SCOPE_SIZE        = 44,
           MAX_NAME_LENGTH   = 26;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 215,
           NT_OFFSET         = 102,
           LA_STATE_OFFSET   = 3381,
           MAX_LA            = 2,
           NUM_RULES         = 274,
           NUM_NONTERMINALS  = 105,
           NUM_SYMBOLS       = 207,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 2922,
           IDENTIFIER_SYMBOL = 2,
           EOFT_SYMBOL       = 80,
           EOLT_SYMBOL       = 80,
           ACCEPT_ACTION     = 3106,
           ERROR_ACTION      = 3107;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
