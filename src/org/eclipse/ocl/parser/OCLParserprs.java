/**
* Essential OCL Grammar
* <copyright>
*
* Copyright (c) 2005, 2009 IBM Corporation and others.
* All rights reserved.   This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   IBM - Initial API and implementation
*   E.D.Willink - Elimination of some shift-reduce conflicts
*   E.D.Willink - Remove unnecessary warning suppression
*   E.D.Willink - Bugs 184048, 225493, 243976, 259818, 282882, 287993, 288040, 292112
*   Borland - Bug 242880
*   Adolfo Sanchez-Barbudo Herrera (Open Canarias):
*        - 242153: LPG v 2.0.17 adoption.
*        - 299396: Introducing new LPG templates
*        - 300534: Removing the use of deprecated macros.
* </copyright>
*
* $Id: OCLParserprs.java,v 1.22 2010/01/25 11:31:46 asanchez Exp $
*/
/**
* Complete OCL Grammar
* <copyright>
*
* Copyright (c) 2005, 2009 IBM Corporation and others.
* All rights reserved.   This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   IBM - Initial API and implementation
*   E.D.Willink - Bug 259818, 285633, 292112
*   Adolfo Sanchez-Barbudo Herrera (Open Canarias):
*        - 242153: LPG v 2.0.17 adoption.
*        - 299396: Introducing new LPG templates
*        - 300534: Removing the use of deprecated macros.
* </copyright>
*/

package org.eclipse.ocl.parser;

/**
 * @noextend This interface is not intended to be extended by clients.
 */
@SuppressWarnings("nls")
public class OCLParserprs implements lpg.runtime.ParseTable, OCLParsersym {
    public final static int ERROR_SYMBOL = 78;
    public final int getErrorSymbol() { return ERROR_SYMBOL; }

    public final static int SCOPE_UBOUND = 44;
    public final int getScopeUbound() { return SCOPE_UBOUND; }

    public final static int SCOPE_SIZE = 45;
    public final int getScopeSize() { return SCOPE_SIZE; }

    public final static int MAX_NAME_LENGTH = 29;
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int NUM_STATES = 242;
    public final int getNumStates() { return NUM_STATES; }

    public final static int NT_OFFSET = 78;
    public final int getNtOffset() { return NT_OFFSET; }

    public final static int LA_STATE_OFFSET = 4472;
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }

    public final static int MAX_LA = 1;
    public final int getMaxLa() { return MAX_LA; }

    public final static int NUM_RULES = 300;
    public final int getNumRules() { return NUM_RULES; }

    public final static int NUM_NONTERMINALS = 119;
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }

    public final static int NUM_SYMBOLS = 197;
    public final int getNumSymbols() { return NUM_SYMBOLS; }

    public final static int SEGMENT_SIZE = 8192;
    public final int getSegmentSize() { return SEGMENT_SIZE; }

    public final static int START_STATE = 3864;
    public final int getStartState() { return START_STATE; }

    public final static int IDENTIFIER_SYMBOL = 6;
    public final int getIdentifier_SYMBOL() { return IDENTIFIER_SYMBOL; }

    public final static int EOFT_SYMBOL = 75;
    public final int getEoftSymbol() { return EOFT_SYMBOL; }

    public final static int EOLT_SYMBOL = 75;
    public final int getEoltSymbol() { return EOLT_SYMBOL; }

    public final static int ACCEPT_ACTION = 4171;
    public final int getAcceptAction() { return ACCEPT_ACTION; }

    public final static int ERROR_ACTION = 4172;
    public final int getErrorAction() { return ERROR_ACTION; }

    public final static boolean BACKTRACK = false;
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int getStartSymbol() { return lhs(0); }
    public final boolean isValidForParser() { return OCLParsersym.isValidForParser; }


    public interface IsNullable {
        public final static byte isNullable[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,1,0,
            0,0,1,1,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,1,0,
            1,1,0,0,0,0,0,0,1,0,
            1,0,0,1,0,0,0,0,0,0,
            1,0,0,0,0,0,0
        };
    };
    public final static byte isNullable[] = IsNullable.isNullable;
    public final boolean isNullable(int index) { return isNullable[index] != 0; }

    public interface ProsthesesIndex {
        public final static byte prosthesesIndex[] = {0,
            12,9,10,14,16,17,11,28,29,30,
            31,32,37,38,39,40,41,42,43,45,
            46,47,48,49,50,51,52,53,58,59,
            60,85,87,88,89,90,99,82,83,84,
            79,80,81,76,77,78,73,74,75,70,
            71,72,67,68,69,64,65,66,23,54,
            61,62,63,20,6,8,13,24,55,98,
            56,15,21,22,57,96,93,27,86,108,
            109,110,111,26,35,36,94,95,102,25,
            33,34,97,100,101,104,107,113,114,115,
            118,119,2,3,4,18,19,44,91,92,
            103,105,106,112,116,117,1,5,7
        };
    };
    public final static byte prosthesesIndex[] = ProsthesesIndex.prosthesesIndex;
    public final int prosthesesIndex(int index) { return prosthesesIndex[index]; }

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,0,0,0,0,1,1,
            0,0,1,1,1,1,1,1,1,1,
            1,1,1,1,0,1,1,1,0,0,
            1,1,1,1,0,0,0,1,0,1,
            1,1,1,1,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,3,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,4,4,0,1,1,
            3,1,3,3,5,1,1,1,1,1,
            1,1,1,1,1,1,1,4,4,0,
            1,1,3,1,1,3,1,1,1,1,
            1,1,1,4,1,3,1,1,1,2,
            1,1,1,1,1,1,1,1,1,1,
            1,1,8,10,10,8,10,1,1,1,
            5,6,8,8,7,7,5,6,9,1,
            4,6,4,7,5,0,0,1,1,3,
            1,1,1,1,1,1,1,1,1,3,
            1,3,1,1,1,3,1,3,1,1,
            1,3,1,3,1,1,1,3,1,3,
            1,1,1,3,3,1,3,3,1,1,
            1,3,3,3,3,1,3,3,3,3,
            1,1,1,3,3,1,3,3,1,1,
            1,3,3,1,3,3,1,1,1,2,
            2,1,2,2,1,1,1,1,1,1,
            3,7,4,1,3,1,1,1,1,1,
            0,1,1,1,1,1,1,1,1,1,
            1,1,0,1,1,0,1,7,2,2,
            1,6,6,0,1,1,3,1,3,1,
            1,1,2,1,1,4,1,0,1,1,
            2,1,1,1,7,1,2,3,3,3,
            5,1,2,4,4,5,3,3,3,1,
            2,4,4,4,6,8,0,1,1,3,
            -84,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-90,0,-12,0,0,-15,
            0,-14,0,-88,0,0,-2,-13,-71,0,
            -70,-76,0,-89,0,0,0,-91,0,-73,
            -3,0,0,-85,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -209,-4,-5,-9,-163,-20,-21,-22,0,0,
            -24,0,-32,-25,0,0,-183,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-27,-30,-31,0,0,
            -33,-34,-35,-36,-38,-40,-117,-41,-133,-42,
            0,-223,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-43,-44,-45,0,-28,-115,-46,-224,0,
            0,0,0,0,0,0,-176,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-47,0,0,-48,-49,-50,-51,-55,-56,
            -57,-58,-59,-60,-61,-62,-63,-67,-74,-79,
            -80,0,-81,0,0,0,-87,-135,-171,0,
            0,0,-177,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-92,
            -99,-100,0,-101,-112,-113,-114,-116,-118,-120,
            -121,-122,-123,-124,-125,-126,-127,-128,0,-129,
            -131,0,-132,-168,-147,0,0,0,-119,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-134,-137,0,-196,-138,
            -205,-139,-136,0,-166,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-215,-140,-235,-141,-142,0,
            -174,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-143,-144,
            -145,-146,-150,-151,-152,-153,-154,-155,-156,-157,
            -158,-169,-170,-219,0,0,0,-195,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-175,-178,-181,-182,0,-184,-185,-186,
            -187,-189,0,-198,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-191,-192,-193,
            -194,-197,0,-200,-201,-202,-203,-204,0,-199,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-206,-208,-210,-213,-214,0,-216,
            -217,-227,-228,-229,0,-226,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-230,
            -231,-232,-233,-234,0,-236,-240,-241,-242,0,
            0,-78,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-180,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-212,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-17,0,0,0,0,0,0,
            0,-222,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-16,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-18,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-19,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-37,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-39,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-64,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-65,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-66,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-69,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-110,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-130,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-148,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-159,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-160,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-167,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-173,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-190,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-218,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-220,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-237,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-238,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-239,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-93,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-109,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-94,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-108,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-95,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-96,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-104,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-105,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-106,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-107,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-97,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-98,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-52,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-53,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-102,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-103,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-1,0,0,0,0,0,0,
            -225,0,0,0,0,0,0,-86,0,0,
            0,0,0,0,-161,0,0,0,-6,0,
            0,0,0,-149,0,0,0,0,0,0,
            -54,0,0,0,0,-7,0,0,0,0,
            0,0,-68,0,-164,0,0,-162,0,0,
            0,0,0,0,-29,0,0,0,0,0,
            0,0,-8,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-26,0,0,0,0,0,0,
            0,0,0,-10,0,0,0,0,0,0,
            -11,0,0,0,0,0,0,0,0,0,
            -188,0,0,-207,0,0,0,-23,0,0,
            0,0,-165,0,0,0,0,0,0,-211,
            0,0,0,0,0,0,0,0,-72,0,
            0,0,-75,0,0,0,-77,0,0,0,
            -179,0,0,0,-82,0,-111,0,0,0,
            0,-83,0,-221,0,0,0,0,0,0,
            0,-172,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            103,104,104,104,104,104,104,104,104,104,
            104,104,104,104,104,104,105,118,118,118,
            118,118,118,118,118,118,118,118,65,119,
            66,66,66,7,1,67,67,4,4,3,
            3,3,3,3,3,3,3,2,2,2,
            2,2,72,72,72,72,5,6,106,106,
            107,107,73,64,74,68,90,90,84,84,
            78,78,78,78,8,8,8,8,9,9,
            91,91,92,92,85,85,86,11,11,11,
            11,11,11,11,10,108,108,13,14,15,
            15,16,16,17,18,19,12,12,12,20,
            20,22,22,23,23,23,24,24,21,21,
            21,26,26,26,26,26,26,26,26,26,
            28,27,27,29,29,29,71,75,75,69,
            69,59,59,31,30,60,60,63,63,61,
            61,62,62,57,57,56,56,58,58,54,
            54,53,53,55,55,51,51,50,50,52,
            52,48,48,47,47,47,49,49,49,45,
            45,44,44,44,44,44,46,46,46,46,
            46,42,42,41,41,41,43,43,43,39,
            39,38,38,38,40,40,40,79,79,32,
            32,32,33,33,33,25,25,34,34,34,
            34,34,36,35,109,109,103,103,103,103,
            103,103,118,118,118,118,118,118,118,118,
            118,118,118,76,76,3,93,93,26,29,
            70,71,37,37,94,94,95,95,89,89,
            89,34,110,110,111,111,96,112,113,113,
            97,97,80,80,80,81,114,114,88,88,
            82,82,98,98,77,77,77,99,99,83,
            116,116,87,87,87,100,115,101,101,102,
            102,205,483,564,106,558,563,108,143,219,
            74,75,76,77,87,88,561,90,91,92,
            93,217,109,110,111,112,565,118,119,120,
            130,644,218,201,204,557,212,220,261,566,
            729,196,570,728,186,568,730,176,643,727,
            169,642,731,163,722,726,157,648,732,151,
            836,141,733,146,725,449,748,244,556,916,
            224,646,244,37,244,841,3925,12,291,244,
            37,327,510,647,244,843,82,84,244,923,
            37,263,835,837,205,483,564,106,558,563,
            108,143,219,74,75,76,77,87,88,561,
            90,91,92,93,217,109,110,111,112,565,
            118,119,120,130,644,218,201,204,557,212,
            220,261,566,729,196,570,728,186,568,730,
            176,643,727,169,642,731,163,722,726,157,
            648,732,151,836,141,733,146,725,271,272,
            273,274,271,272,273,274,263,283,291,16,
            569,522,36,138,55,139,345,419,539,82,
            84,588,3984,258,601,838,837,52,921,564,
            106,558,563,108,143,219,74,75,76,77,
            87,88,561,90,91,92,93,217,109,110,
            111,112,565,118,119,120,130,644,218,201,
            204,557,212,220,261,566,729,196,570,728,
            186,568,730,176,643,727,169,642,731,163,
            722,726,157,648,732,151,1234,1238,733,146,
            725,1237,283,741,740,1235,615,207,59,277,
            68,162,10,157,337,318,163,451,46,659,
            112,1236,154,997,564,106,558,563,108,143,
            219,74,75,76,77,87,88,561,90,91,
            92,93,217,109,110,111,112,565,118,119,
            120,130,644,218,201,204,557,212,220,261,
            566,729,196,570,728,186,568,730,176,643,
            727,169,642,731,163,722,726,157,648,732,
            151,139,141,733,146,725,69,251,131,251,
            1154,1384,169,308,307,68,60,161,171,525,
            37,736,52,737,54,55,1383,1,483,564,
            106,558,563,108,143,219,74,75,76,77,
            87,88,561,90,91,92,93,217,109,110,
            111,112,565,118,119,120,130,644,218,201,
            204,557,212,220,261,566,729,196,570,728,
            186,568,730,176,643,727,169,642,731,163,
            722,726,157,648,732,151,260,141,733,146,
            725,247,97,282,282,295,265,425,264,416,
            148,481,381,362,417,619,655,328,643,450,
            657,661,295,537,390,475,256,583,471,244,
            831,1228,1230,1,483,564,106,558,563,108,
            143,219,74,75,76,77,87,88,561,90,
            91,92,93,217,109,110,111,112,565,118,
            119,120,130,644,218,201,204,557,212,220,
            261,566,729,196,570,728,186,568,730,176,
            643,727,169,642,731,163,722,726,157,648,
            732,151,260,141,733,146,725,67,251,1155,
            358,341,267,66,663,664,665,240,271,464,
            301,483,561,667,669,623,431,674,625,96,
            639,678,256,680,659,244,824,1231,1230,256,
            483,564,106,558,563,108,143,219,74,75,
            76,77,87,88,561,90,91,92,93,217,
            109,110,111,112,565,118,119,120,130,644,
            218,201,204,557,212,220,261,566,729,196,
            570,728,186,568,730,176,643,727,169,642,
            731,163,722,726,157,648,732,151,139,141,
            733,146,725,225,251,135,676,499,1083,485,
            684,637,593,491,1082,256,483,564,106,558,
            563,108,143,219,74,75,76,77,87,88,
            561,90,91,92,93,217,109,110,111,112,
            565,118,119,120,130,644,218,201,204,557,
            212,220,261,566,729,196,570,728,186,568,
            730,176,643,727,169,642,731,163,722,726,
            157,648,732,151,139,141,733,146,725,251,
            1308,741,740,1156,1083,659,686,613,4,457,
            1162,154,483,564,106,558,563,108,143,219,
            74,75,76,77,87,88,561,90,91,92,
            93,217,109,110,111,112,565,118,119,120,
            130,644,218,201,204,557,212,220,261,566,
            729,196,570,728,186,568,730,176,643,727,
            169,642,731,163,722,726,157,648,732,151,
            836,141,733,146,725,251,134,741,740,461,
            415,523,530,105,493,532,562,580,617,463,
            560,688,689,693,244,824,83,84,256,483,
            564,106,558,563,108,143,219,74,75,76,
            77,87,88,561,90,91,92,93,217,109,
            110,111,112,565,118,119,120,130,644,218,
            201,204,557,212,220,261,566,729,196,570,
            728,186,568,730,176,643,727,169,642,731,
            163,722,726,157,648,732,151,139,141,733,
            146,725,1313,398,697,699,704,1083,702,706,
            707,710,711,1307,256,483,564,106,558,563,
            108,143,219,74,75,76,77,87,88,561,
            90,91,92,93,217,109,110,111,112,565,
            118,119,120,130,644,218,201,204,557,212,
            220,261,566,729,196,570,728,186,568,730,
            176,643,727,169,642,731,163,722,726,157,
            648,732,151,139,141,733,146,725,714,717,
            718,719,582,1083,722,694,357,723,727,1310,
            256,483,564,106,558,563,108,143,219,74,
            75,76,77,87,88,561,90,91,92,93,
            217,109,110,111,112,565,118,119,120,130,
            644,218,201,204,557,212,220,261,566,729,
            196,570,728,186,568,730,176,643,727,169,
            642,731,163,722,726,157,648,732,151,139,
            141,733,146,725,734,738,728,740,729,1083,
            743,744,747,739,748,1311,256,483,564,106,
            558,563,108,143,219,74,75,76,77,87,
            88,561,90,91,92,93,217,109,110,111,
            112,565,118,119,120,130,644,218,201,204,
            557,212,220,261,566,729,196,570,728,186,
            568,730,176,643,727,169,642,731,163,722,
            726,157,648,732,151,139,141,733,146,725,
            751,752,642,753,652,1083,754,757,758,761,
            4172,1386,154,483,564,106,558,563,108,143,
            219,74,75,76,77,87,88,561,90,91,
            92,93,217,109,110,111,112,565,118,119,
            120,130,644,218,201,204,557,212,220,261,
            566,729,196,570,728,186,568,730,176,643,
            727,169,642,731,163,722,726,157,648,732,
            151,139,141,733,146,725,4172,4172,4172,4172,
            4172,829,154,483,564,106,558,563,108,143,
            219,74,75,76,77,87,88,561,90,91,
            92,93,217,109,110,111,112,565,118,119,
            120,130,644,218,201,204,557,212,220,261,
            566,729,196,570,728,186,568,730,176,643,
            727,169,642,731,163,722,726,157,648,732,
            151,139,141,733,146,725,4172,4172,4172,4172,
            4172,1232,103,483,564,106,558,563,108,143,
            219,74,75,76,77,87,88,561,90,91,
            92,93,217,109,110,111,112,565,118,119,
            120,130,644,218,201,204,557,212,220,261,
            566,729,196,570,728,186,568,730,176,643,
            727,169,642,731,163,722,726,157,648,732,
            151,260,141,733,146,725,4172,4172,4172,4172,
            4172,4172,4172,4172,4172,4172,4172,4172,4172,4172,
            4172,4172,4172,4172,379,37,736,52,737,54,
            55,257,154,483,564,106,558,563,108,143,
            219,74,75,76,77,87,88,561,90,91,
            92,93,217,109,110,111,112,565,118,119,
            120,130,644,218,201,204,557,212,220,261,
            566,729,196,570,728,186,568,730,176,643,
            727,169,642,731,163,722,726,157,648,732,
            151,139,141,733,146,725,734,4172,4172,4172,
            4172,1382,154,483,564,106,558,563,108,143,
            219,74,75,76,77,87,88,561,90,91,
            92,93,217,109,110,111,112,565,118,119,
            120,130,644,218,201,204,557,212,220,261,
            566,729,196,570,728,186,568,730,176,643,
            727,169,642,731,163,722,726,157,648,732,
            151,64,141,733,146,725,154,483,564,106,
            558,563,108,143,219,74,75,76,77,87,
            88,561,90,91,92,93,217,109,110,111,
            112,565,118,119,120,130,644,218,201,204,
            557,212,220,261,566,729,196,570,728,186,
            568,730,176,643,727,169,642,731,163,722,
            726,157,648,732,151,279,141,733,146,725,
            154,483,564,106,558,563,108,143,219,74,
            75,76,77,87,88,561,90,91,92,93,
            217,109,110,111,112,565,118,119,120,130,
            644,218,201,204,557,212,220,261,566,729,
            196,570,728,186,568,730,176,643,727,169,
            642,731,163,722,726,157,648,732,151,278,
            141,733,146,725,154,483,564,106,558,563,
            108,143,219,74,75,76,77,87,88,561,
            90,91,92,93,217,109,110,111,112,565,
            118,119,120,130,644,218,201,204,557,212,
            220,261,566,729,196,570,728,186,568,730,
            176,643,727,169,642,731,163,722,726,157,
            648,732,151,747,141,733,146,725,154,483,
            564,106,558,563,108,143,219,74,75,76,
            77,87,88,561,90,91,92,93,217,109,
            110,111,112,565,118,119,120,130,644,218,
            201,204,557,212,220,261,566,729,196,570,
            728,186,568,730,176,643,727,169,642,731,
            163,722,726,157,648,732,151,820,141,733,
            146,725,154,483,564,106,558,563,108,143,
            219,74,75,76,77,87,88,561,90,91,
            92,93,217,109,110,111,112,565,118,119,
            120,130,644,218,201,204,557,212,220,261,
            566,729,196,570,728,186,568,730,176,643,
            727,169,642,731,163,722,726,157,648,732,
            151,294,141,733,146,725,154,483,564,106,
            558,563,108,143,219,74,75,76,77,87,
            88,561,90,91,92,93,217,109,110,111,
            112,565,118,119,120,130,644,218,201,204,
            557,212,220,261,566,729,196,570,728,186,
            568,730,176,643,727,169,642,731,163,722,
            726,157,648,732,151,293,141,733,146,725,
            154,483,564,106,558,563,108,143,219,74,
            75,76,77,87,88,561,90,91,92,93,
            217,109,110,111,112,565,118,119,120,130,
            644,218,201,204,557,212,220,261,566,729,
            196,570,728,186,568,730,176,643,727,169,
            642,731,163,722,726,157,648,732,151,292,
            141,733,146,725,154,483,564,106,558,563,
            108,143,219,74,75,76,77,87,88,561,
            90,91,92,93,217,109,110,111,112,565,
            118,119,120,130,644,218,201,204,557,212,
            220,261,566,729,196,570,728,186,568,730,
            176,643,727,169,642,731,163,722,726,157,
            648,732,151,284,141,733,146,725,154,483,
            564,106,558,563,108,143,219,74,75,76,
            77,87,88,561,90,91,92,93,217,109,
            110,111,112,565,118,119,120,130,644,218,
            201,204,557,212,220,261,566,729,196,570,
            728,186,568,730,176,643,727,169,642,731,
            163,722,726,157,648,732,151,65,141,733,
            146,725,154,483,564,106,558,563,108,143,
            219,74,75,76,77,87,88,561,90,91,
            92,93,217,109,110,111,112,565,118,119,
            120,130,644,218,201,204,557,212,220,261,
            566,729,196,570,728,186,568,730,176,643,
            727,169,642,731,163,722,726,157,648,732,
            151,1153,141,733,146,725,154,483,564,106,
            558,563,108,143,219,74,75,76,77,87,
            88,561,90,91,92,93,217,109,110,111,
            112,565,118,119,120,130,644,218,201,204,
            557,212,220,261,566,729,196,570,728,186,
            568,730,176,643,727,169,642,731,163,722,
            726,157,648,732,151,223,141,733,146,725,
            154,483,564,106,558,563,108,143,219,74,
            75,76,77,87,88,561,90,91,92,93,
            217,109,110,111,112,565,118,119,120,130,
            644,218,201,204,557,212,220,261,566,729,
            196,570,728,186,568,730,176,643,727,169,
            642,731,163,722,726,157,648,732,151,288,
            141,733,146,725,154,483,564,106,558,563,
            108,143,219,74,75,76,77,87,88,561,
            90,91,92,93,217,109,110,111,112,565,
            118,119,120,130,644,218,201,204,557,212,
            220,261,566,729,196,570,728,186,568,730,
            176,643,727,169,642,731,163,722,726,157,
            648,732,151,287,141,733,146,725,154,483,
            564,106,558,563,108,143,219,74,75,76,
            77,87,88,561,90,91,92,93,217,109,
            110,111,112,565,118,119,120,130,644,218,
            201,204,557,212,220,261,566,729,196,570,
            728,186,568,730,176,643,727,169,642,731,
            163,722,726,157,648,732,151,140,141,733,
            146,725,154,483,564,106,558,563,108,143,
            219,74,75,76,77,87,88,561,90,91,
            92,93,217,109,110,111,112,565,118,119,
            120,130,644,218,201,204,557,212,220,261,
            566,729,196,570,728,186,568,730,176,643,
            727,169,642,731,163,722,726,157,648,732,
            151,86,141,733,146,725,154,483,564,106,
            558,563,108,143,219,74,75,76,77,87,
            88,561,90,91,92,93,217,109,110,111,
            112,565,118,119,120,130,644,218,201,204,
            557,212,220,261,566,729,196,570,728,186,
            568,730,176,643,727,169,642,731,163,722,
            726,157,648,732,151,1306,141,733,146,725,
            154,483,564,106,558,563,108,143,219,74,
            75,76,77,87,88,561,90,91,92,93,
            217,109,110,111,112,565,118,119,120,130,
            644,218,201,204,557,212,220,261,566,729,
            196,570,728,186,568,730,176,643,727,169,
            642,731,163,722,726,157,648,732,151,1312,
            141,733,146,725,154,483,564,106,558,563,
            108,143,219,74,75,76,77,87,88,561,
            90,91,92,93,217,109,110,111,112,565,
            118,119,120,130,644,218,201,204,557,212,
            220,261,566,729,196,570,728,186,568,730,
            176,643,727,169,642,731,163,722,726,157,
            648,732,151,1314,141,733,146,725,154,483,
            564,106,558,563,108,143,219,74,75,76,
            77,87,88,561,90,91,92,93,217,109,
            110,111,112,565,118,119,120,130,644,218,
            201,204,557,212,220,261,566,729,196,570,
            728,186,568,730,176,643,727,169,642,731,
            163,722,726,157,648,732,151,1387,141,733,
            146,725,154,483,564,106,558,563,108,143,
            219,74,75,76,77,87,88,561,90,91,
            92,93,217,109,110,111,112,565,118,119,
            120,130,644,218,201,204,557,212,220,261,
            566,729,196,570,728,186,568,730,176,643,
            727,169,642,731,163,722,726,157,648,732,
            151,1388,141,733,146,725,154,483,564,106,
            558,563,108,143,219,74,75,76,77,87,
            88,561,90,91,92,93,217,109,110,111,
            112,565,118,119,120,130,644,218,201,204,
            557,212,220,261,566,729,196,570,728,186,
            568,730,176,643,727,169,642,731,163,722,
            726,157,648,732,151,1389,141,733,146,725,
            154,483,564,106,558,563,108,143,219,74,
            75,76,77,87,88,561,90,91,92,93,
            217,109,110,111,112,565,118,119,120,130,
            917,218,201,204,557,212,220,261,566,729,
            196,570,728,186,568,730,176,643,727,169,
            642,731,163,722,726,157,153,920,152,154,
            483,564,106,558,563,108,143,219,74,75,
            76,77,87,88,561,90,91,92,93,217,
            109,110,111,112,565,118,119,120,130,1080,
            218,201,204,557,212,220,261,566,729,196,
            570,728,186,568,730,176,643,727,169,642,
            731,163,159,1081,158,154,483,564,106,558,
            563,108,143,219,74,75,76,77,87,88,
            561,90,91,92,93,217,109,110,111,112,
            565,118,119,120,130,922,218,201,204,557,
            212,220,261,566,729,196,570,728,186,568,
            730,176,643,727,169,165,996,164,154,483,
            564,106,558,563,108,143,219,74,75,76,
            77,87,88,561,90,91,92,93,217,109,
            110,111,112,565,118,119,120,130,1078,218,
            201,204,557,212,220,261,566,729,196,570,
            728,186,568,730,176,171,1079,170,154,483,
            564,106,558,563,108,143,219,74,75,76,
            77,87,88,561,90,91,92,93,217,109,
            110,111,112,565,118,119,120,130,998,218,
            201,204,557,212,220,261,566,729,196,570,
            728,186,179,999,178,154,483,564,106,558,
            563,108,143,219,74,75,76,77,87,88,
            561,90,91,92,93,217,109,110,111,112,
            565,118,119,120,130,998,218,201,204,557,
            212,220,261,566,729,196,570,728,186,179,
            1069,177,154,483,564,106,558,563,108,143,
            219,74,75,76,77,87,88,561,90,91,
            92,93,217,109,110,111,112,565,118,119,
            120,130,1073,218,201,204,557,212,220,261,
            566,729,196,191,1074,190,154,483,564,106,
            558,563,108,143,219,74,75,76,77,87,
            88,561,90,91,92,93,217,109,110,111,
            112,565,118,119,120,130,1073,218,201,204,
            557,212,220,261,566,729,196,191,1075,189,
            154,483,564,106,558,563,108,143,219,74,
            75,76,77,87,88,561,90,91,92,93,
            217,109,110,111,112,565,118,119,120,130,
            1073,218,201,204,557,212,220,261,566,729,
            196,191,1076,188,154,483,564,106,558,563,
            108,143,219,74,75,76,77,87,88,561,
            90,91,92,93,217,109,110,111,112,565,
            118,119,120,130,1073,218,201,204,557,212,
            220,261,566,729,196,191,1077,187,154,483,
            564,106,558,563,108,143,219,74,75,76,
            77,87,88,561,90,91,92,93,217,109,
            110,111,112,565,118,119,120,130,1070,218,
            201,204,557,212,220,261,199,1071,198,154,
            483,564,106,558,563,108,143,219,74,75,
            76,77,87,88,561,90,91,92,93,217,
            109,110,111,112,565,118,119,120,130,1070,
            218,201,204,557,212,220,261,199,1072,197,
            154,483,564,106,558,563,108,143,219,74,
            75,76,77,87,88,561,90,91,92,93,
            217,109,110,111,112,565,118,119,120,130,
            821,218,207,214,557,212,220,261,154,483,
            564,106,558,563,108,143,219,74,75,76,
            77,87,88,561,90,91,92,93,217,109,
            110,111,112,565,118,119,120,130,821,218,
            207,213,557,212,220,261,4172,4172,4172,211,
            4172,4172,4172,4172,4172,4172,4172,4172,4172,4172,
            4172,4172,4172,4172,4172,4172,4172,4172,4172,4172,
            4172,4172,4172,4172,4172,4172,4172,4172,4172,4172,
            4172,4172,4172,4172,4172,4172,4172,210,154,483,
            564,106,558,563,108,143,219,74,75,76,
            77,87,88,561,90,91,92,93,217,109,
            110,111,112,565,118,119,120,130,821,218,
            207,206,557,212,220,261,154,483,564,106,
            558,563,108,143,219,74,75,76,77,87,
            88,561,90,91,92,93,217,109,110,111,
            112,565,118,119,120,130,821,218,207,205,
            557,212,220,261,329,391,4172,203,4172,4172,
            4172,525,37,736,52,737,54,55,379,37,
            736,52,737,54,55,690,391,4172,4172,344,
            35,30,31,4172,379,37,736,52,737,54,
            55,244,824,4172,4172,202,344,35,30,31,
            4172,4172,4172,244,827,690,391,4172,379,37,
            736,52,737,54,55,336,4172,4172,72,4172,
            4172,4172,73,344,35,30,31,70,71,4172,
            4172,227,230,247,270,272,273,274,4172,72,
            840,228,229,73,32,36,244,4172,70,71,
            264,378,4172,299,296,476,1158,377,4172,224,
            4172,32,36,244,370,262,265,826,4172,72,
            4172,4172,477,73,156,4172,1159,1160,70,71,
            63,4172,4172,299,344,35,30,31,32,36,
            244,344,35,30,31,270,272,273,274,478,
            822,3,285,825,244,391,1161,1160,344,35,
            30,31,382,379,37,736,52,737,54,55,
            379,37,736,52,737,54,55,4172,739,414,
            35,30,31,414,35,30,31,414,35,30,
            31,414,35,30,31,244,831,244,827,32,
            36,244,581,833,244,1381,32,36,244,4172,
            481,290,244,833,4172,4172,4172,484,72,4172,
            4172,4172,73,32,36,244,4172,70,71,4172,
            4172,4172,300,4172,738,4011,4172,4172,4172,276,
            381,4172,259,4172,32,36,828,4172,32,36,
            38,4172,32,36,567,4172,32,36,919,4172,
            4172,826,4172,67,4172,471,60,4172,69,66,
            4172,4172,4172,4172,4172,4172,61,68,4172,4172,
            4172,4172,4172,4172,4172,95,4172,4172,1380,4172,
            4172,4172,4172,4172,4172,4172,286,825,4172,4172,
            4172,4172,4172,830,4172,4172,4172,4172,832,834,
            4172,4172
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,0,0,4,5,6,4,5,0,
            1,0,9,10,0,12,13,14,15,0,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,0,0,37,3,0,
            40,41,42,43,44,0,46,47,48,49,
            50,0,1,2,0,4,5,6,0,0,
            0,16,17,18,19,63,64,67,59,11,
            11,20,21,22,23,24,25,26,27,28,
            29,30,31,32,33,34,75,51,37,53,
            54,40,41,42,43,44,0,46,47,48,
            49,50,0,1,0,51,4,5,6,5,
            51,0,53,54,10,4,12,13,14,15,
            9,0,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,0,0,37,
            3,45,40,41,42,43,44,0,46,47,
            48,49,50,0,1,0,0,4,5,6,
            0,0,0,16,17,18,19,5,0,67,
            0,11,10,20,21,22,23,24,25,26,
            27,28,29,30,31,32,33,34,0,51,
            37,53,54,40,41,42,43,44,37,46,
            47,48,49,50,0,1,0,39,4,5,
            6,51,57,53,54,59,61,62,12,13,
            14,15,52,0,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,0,
            1,37,3,0,40,41,42,43,44,6,
            46,47,48,49,50,0,1,0,1,4,
            5,6,0,0,0,3,0,4,11,7,
            0,1,9,3,8,20,21,22,23,24,
            25,26,27,28,29,30,31,32,33,34,
            0,68,37,36,0,40,41,42,43,44,
            0,46,47,48,49,50,0,0,8,45,
            4,5,55,7,7,9,10,0,12,13,
            14,15,16,17,18,19,0,0,0,12,
            13,14,15,0,6,0,0,1,11,73,
            0,35,35,0,0,39,11,3,58,6,
            56,45,12,13,14,15,0,0,52,2,
            60,0,56,20,21,22,23,24,25,26,
            27,28,29,30,31,32,33,34,0,51,
            0,53,54,57,6,57,58,61,62,61,
            62,63,64,58,38,59,68,0,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,0,0,0,0,56,0,6,
            5,3,66,7,0,10,12,13,14,15,
            0,7,52,20,21,22,23,24,25,26,
            27,28,29,30,31,32,33,34,0,0,
            0,1,4,5,6,7,0,9,10,35,
            0,11,0,0,16,17,18,19,71,7,
            0,8,16,17,18,19,16,17,18,19,
            0,11,0,35,0,3,36,39,40,7,
            0,1,0,45,0,11,4,35,0,69,
            52,9,4,5,56,7,36,9,10,0,
            12,13,14,15,16,17,18,19,0,39,
            36,0,0,74,0,55,36,5,65,0,
            6,0,10,35,5,4,0,39,0,10,
            9,3,0,45,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,0,
            0,0,2,4,5,4,7,58,9,10,
            9,12,13,14,15,16,17,18,19,0,
            0,0,0,4,63,64,6,0,9,8,
            3,0,0,57,35,0,4,5,39,7,
            0,9,10,3,12,13,14,15,16,17,
            18,19,0,1,0,3,0,3,0,1,
            4,5,0,11,0,9,10,35,12,13,
            14,15,16,17,18,19,0,1,0,3,
            2,0,0,2,8,3,65,11,36,8,
            38,0,70,2,0,1,0,1,0,8,
            0,1,0,0,0,3,0,55,0,3,
            7,7,36,0,38,0,8,0,1,0,
            1,8,60,0,60,0,11,0,0,0,
            2,55,0,0,36,6,0,1,0,1,
            8,0,66,0,1,0,0,2,7,0,
            0,2,2,0,8,2,0,0,0,3,
            2,0,0,2,39,8,0,0,0,1,
            8,38,45,0,8,52,3,0,0,0,
            3,2,0,0,2,2,0,0,2,2,
            0,0,0,0,3,2,0,0,2,2,
            0,0,2,0,0,0,0,0,0,0,
            0,0,0,0,0,0,38,0,0,0,
            0,0,0,0,0,0,0,0,38,0,
            38,0,0,0,0,0,0,0,0,72,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            254,1948,4172,180,3708,4275,4206,192,200,4172,
            4062,4172,192,200,4172,216,216,216,216,4172,
            4219,4220,4221,4222,4223,4214,4212,4215,4213,4211,
            562,4216,4218,4217,4417,4172,280,4271,1756,4172,
            3670,4269,4270,4205,1884,173,3901,4273,4274,4277,
            4276,4172,1948,4293,4172,3708,4275,4206,4172,4172,
            4172,179,179,179,179,472,473,1229,4055,4047,
            4039,4219,4220,4221,4222,4223,4214,4212,4215,4213,
            4211,562,4216,4218,4217,4417,4171,3994,4271,4001,
            474,3670,4269,4270,4205,1884,155,3901,4273,4274,
            4277,4276,4172,1948,192,4018,3708,4275,4206,200,
            3994,181,4001,474,200,191,216,216,216,216,
            191,4172,4219,4220,4221,4222,4223,4214,4212,4215,
            4213,4211,562,4216,4218,4217,4417,4172,281,4271,
            1820,159,3670,4269,4270,4205,1884,4172,3901,4273,
            4274,4277,4276,4172,1948,4172,107,3708,4275,4206,
            4172,89,193,3544,3500,3456,3412,199,161,1229,
            149,4043,199,4219,4220,4221,4222,4223,4214,4212,
            4215,4213,4211,562,4216,4218,4217,4417,4172,3994,
            4271,4001,474,3670,4269,4270,4205,1884,4272,3901,
            4273,4274,4277,4276,80,1948,209,165,3708,4275,
            4206,3994,3933,4001,474,301,3906,3889,215,215,
            215,215,153,226,4219,4220,4221,4222,4223,4214,
            4212,4215,4213,4211,562,4216,4218,4217,4417,4172,
            3885,4271,3918,4172,3670,4269,4270,4205,1884,4206,
            3901,4273,4274,4277,4276,137,1948,144,136,3708,
            4275,4206,62,4172,4172,1614,4172,3588,37,1692,
            38,3915,3629,4023,845,4219,4220,4221,4222,4223,
            4214,4212,4215,4213,4211,562,4216,4218,4217,4417,
            267,372,4271,743,4172,3670,4269,4270,4205,1884,
            4172,3901,4273,4274,4277,4276,142,167,749,3215,
            192,200,1392,172,171,192,200,4172,216,216,
            216,216,180,180,180,180,289,53,231,388,
            365,374,384,4172,4206,268,4172,3878,4043,2396,
            208,172,171,243,4172,166,4043,2012,367,4206,
            3100,160,216,216,216,216,4172,4172,154,4393,
            4266,145,148,4219,4220,4221,4222,4223,4214,4212,
            4215,4213,4211,4200,4216,4218,4217,4417,4172,3994,
            4172,4001,474,3933,4206,3933,367,3906,3889,3906,
            3889,472,473,367,2844,394,372,4172,4219,4220,
            4221,4222,4223,4214,4212,4215,4213,4211,735,4216,
            4218,4217,4417,4172,200,4172,63,147,4172,4206,
            3826,2076,1084,2268,4172,3788,216,216,216,216,
            85,3365,3159,4219,4220,4221,4222,4223,4214,4212,
            4215,4213,4211,4200,4216,4218,4217,4417,4172,4172,
            136,925,4185,4186,4206,4182,175,4184,4187,3318,
            174,38,168,4172,4181,4178,4180,4179,2716,3365,
            136,2588,3544,3500,3456,3412,3544,3500,3456,3412,
            4172,37,4172,4183,136,3894,743,4173,4175,1692,
            4172,487,185,4176,4172,38,3588,3318,154,2652,
            4177,3629,192,200,4174,172,743,192,200,269,
            216,216,216,216,180,180,180,180,4172,3268,
            743,275,195,4438,246,1462,743,3826,844,194,
            4206,184,3788,172,3826,3588,4172,166,4172,3788,
            3629,2140,4172,160,4219,4220,4221,4222,4223,4214,
            4212,4215,4213,4211,735,4216,4218,4217,4417,160,
            4172,183,4229,192,200,3588,172,367,192,200,
            3629,216,216,216,216,180,180,180,180,182,
            58,4172,4172,3588,472,473,4206,4172,3629,2588,
            3913,4172,166,4422,172,4172,192,200,166,172,
            4172,192,200,2204,216,216,216,216,180,180,
            180,180,144,136,37,3918,172,379,4172,4062,
            192,200,4172,37,4172,192,200,172,216,216,
            216,216,180,180,180,180,144,136,4172,1614,
            4228,4172,4172,4295,572,4057,995,37,743,2588,
            62,4172,2332,4296,4172,3878,4172,849,136,2588,
            249,251,4172,4172,4172,3894,4172,1392,59,3918,
            2460,2524,743,81,62,4172,4072,4172,657,4172,
            753,1001,4251,150,4250,162,4051,156,4172,297,
            4299,1392,138,4172,743,4206,4172,1088,133,1164,
            2588,4172,62,4172,1240,4172,298,1304,2268,4172,
            4172,1305,4300,4172,4014,4425,258,255,4172,4030,
            4424,4172,69,4294,3268,1532,141,4172,132,1316,
            4064,2780,3215,4172,1622,3159,649,4172,4172,4172,
            3871,4297,4172,4172,4298,4420,4172,4172,4288,4285,
            4172,62,4172,4172,3918,4301,4172,4172,4289,4287,
            4172,4172,4286,4172,4172,4172,4172,4172,4172,4172,
            4172,4172,4172,4172,4172,4172,2908,4172,4172,4172,
            4172,4172,4172,4172,4172,4172,4172,4172,2972,4172,
            3036,4172,4172,4172,4172,4172,4172,4172,4172,4394
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            403,99,50,452,452,436,436,436,414,436,
            436,240,97,240,98,211,225,211,211,452,
            452,452,436,452,452,307,320,321,454,60,
            324,56,101,143,146,143,211,391,211,64,
            68,66,74,72,60,76,75,242,244,246,
            249,211,211,240,47,138,252,254,77,262,
            189,189,256,211,211,211,452,240,211,303,
            240,225,93,456,225,455,225,211,189,269,
            309,240,365,1,1,225,311,240,240,33,
            240,366,211,211,211,211,211,211,60,313,
            452,211,211,211,211,211,211,211,211,211,
            240,207,207,316,321,319,57,326,336,333,
            329,366,452,53,31,332,333,31,366,211,
            189,189,188,324,56,188,60,76,60,74,
            60,68,68,60,64,64,240,211,225,60,
            66,66,66,66,60,72,60,75,211,211,
            365,225,93,365,225,336,211,59,366,53,
            240,240,211,211,396,209,209,189,225,211,
            269,189,336,207,366,53,366,185,366,211,
            366,52,53,366,336,57,326,336,336,366,
            267,266,265,53,368,452,240,452,181,398,
            225,210,366,269,59,366,366,211,240,211,
            240,211,211,191,416,336,366,267,366,267,
            400,53,267,53,369,366,211,211,211,366,
            366,366
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            46,4,40,1,44,20,21,22,23,24,
            30,49,50,5,47,48,37,42,41,29,
            26,28,25,27,31,33,32,34,43,6,
            60,0,6,39,56,40,45,52,17,19,
            18,16,7,35,9,4,5,10,0,75,
            7,3,2,8,0,55,11,1,36,12,
            13,14,15,5,10,9,4,16,17,18,
            19,7,35,39,45,52,56,2,60,65,
            38,8,69,70,71,72,73,57,61,62,
            63,64,74,53,51,54,58,68,75,0,
            9,4,5,10,7,35,2,60,65,12,
            38,8,13,69,14,15,70,71,72,39,
            45,52,56,73,53,57,61,58,68,74,
            51,62,63,64,54,75,37,16,17,18,
            19,0,1,59,0,9,4,5,10,16,
            17,7,18,19,35,2,60,65,12,38,
            8,13,69,14,15,70,71,72,39,45,
            52,56,73,53,57,61,51,62,54,59,
            58,68,74,75,64,63,0,36,1,0,
            29,26,28,25,27,31,33,32,34,6,
            20,21,22,23,24,30,7,0,2,67,
            46,4,40,1,44,49,50,5,47,48,
            37,42,41,43,29,26,28,25,27,31,
            33,32,34,20,21,22,23,24,30,6,
            0,56,0,45,0,7,35,0,9,4,
            0,39,0,52,0,57,61,62,63,64,
            11,2,75,7,8,66,38,0,1,9,
            4,5,10,16,17,7,18,19,35,2,
            60,65,12,38,8,13,69,14,15,70,
            71,72,39,45,52,56,73,53,51,63,
            64,54,58,68,74,75,61,62,57,0,
            70,0,73,8,0,3,1,0,1,3,
            53,51,54,11,0,65,8,0,7,3,
            0,69,60,8,0,46,4,40,1,44,
            20,21,22,23,24,30,49,50,5,47,
            48,37,42,41,29,26,28,25,27,31,
            33,32,34,43,6,2,0,66,9,4,
            5,10,16,17,7,18,19,35,2,8,
            39,45,52,56,38,11,1,36,3,55,
            12,13,15,14,0,71,0,72,0,38,
            3,0,75,68,58,53,54,57,61,62,
            64,63,6,51,0,57,61,62,29,26,
            28,25,27,31,33,32,34,6,20,21,
            22,23,24,30,0,20,21,22,23,24,
            29,26,28,25,27,31,33,32,34,30,
            6,3,0,11,58,74,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            87,25,25,25,25,90,90,90,25,90,
            90,4,9,37,7,21,36,21,21,25,
            25,25,90,25,25,100,25,28,88,25,
            25,17,25,25,25,25,21,25,21,25,
            25,25,25,25,25,25,25,25,25,25,
            25,81,81,92,25,25,25,25,25,25,
            25,25,25,21,21,21,25,95,21,11,
            37,104,13,25,104,9,104,21,25,25,
            25,106,109,21,21,36,25,24,24,1,
            24,25,39,51,63,63,75,75,25,25,
            25,81,81,69,69,69,69,57,45,21,
            95,25,25,25,28,25,26,25,21,25,
            25,25,25,25,25,25,25,25,25,21,
            25,25,26,25,26,17,25,25,25,25,
            25,25,25,25,25,25,33,21,36,25,
            25,25,25,25,25,25,25,25,21,21,
            24,36,13,24,36,21,21,26,25,25,
            30,97,21,21,25,21,21,25,104,21,
            25,25,19,25,25,25,25,102,25,21,
            25,25,25,25,21,26,25,21,21,25,
            25,25,25,25,17,25,24,25,15,25,
            36,21,25,25,26,25,25,21,33,21,
            24,21,21,36,36,21,25,25,25,25,
            25,25,25,25,17,25,21,21,21,25,
            25,25
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            1,105,0,1,115,0,96,0,80,0,
            87,0,77,0,88,0,70,0,64,68,
            2,5,15,1,0,71,0,98,0,1,
            90,0,1,68,0,2,4,0,1,5,
            15,2,58,0,2,5,15,1,55,0,
            1,5,15,2,52,0,2,5,15,1,
            49,0,1,5,15,2,46,0,2,5,
            15,1,43,0,1,5,15,2,40,0,
            1,5,15,2,33,0,1,97,0,76,
            0,1,109,0,100,99,1,64,0,116,
            0,114,0,67,0,1,108,0,107,1,
            0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            11,12,20,2,3,76,7,19,1,4,
            21,17,23,26,27,5,6,8,9,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,74,10,25,32,18,38,41,
            30,31,33,34,39,43,45,46,47,48,
            69,40,63,73,15,42,64,66,13,14,
            65,70,71,72,16,22,28,67,24,35,
            36,37,44,68,75,77,78,79
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            82,81,0,84,86,0,0,0,0,0,
            0,0,0,0,96,0,0,0,0,0,
            0,0,0,0,98,0,0,0,0,101,
            0,0,126,127,0,0,0,122,123,124,
            119,120,121,116,117,118,113,114,115,110,
            111,112,107,108,109,104,105,106,89,99,
            102,0,103,88,0,0,83,90,100,133,
            0,85,0,0,0,0,130,93,125,138,
            0,0,0,92,95,0,131,132,135,91,
            0,94,0,0,134,136,137,140,141,142,
            0,145,0,0,80,0,87,97,128,129,
            0,0,0,139,143,144,0,0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            195,231,241,129,163,171,217,251,205,15,
            28,149,156,1,9,138,189,123,179,225,
            144,37,259,265,269,273,277,116,55,22,
            46,58,58,66,66,74,74,74,74,88,
            88,96,101,106,111
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            7,7,7,7,7,7,7,7,213,7,
            35,7,7,7,7,7,7,120,185,213,
            7,42,263,263,263,7,7,120,7,25,
            49,60,63,68,71,76,79,82,85,90,
            93,98,103,108,113
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            24,23,23,26,26,26,24,23,24,26,
            36,26,26,37,37,26,26,29,26,24,
            26,36,10,9,9,6,5,29,34,35,
            36,40,40,43,43,46,46,46,46,49,
            49,52,55,58,62
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            2,2,2,2,2,2,2,2,38,2,
            72,2,2,2,2,2,2,65,8,38,
            2,71,60,60,60,2,2,65,2,73,
            70,10,5,4,9,19,18,17,16,35,
            7,39,45,52,56
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            9,9,9,9,9,9,9,9,9,9,
            9,9,9,9,9,9,9,9,9,9,
            9,9,9,9,9,1,1,9,9,9,
            9,13,13,15,15,19,19,19,19,21,
            21,22,23,24,25
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            172,1,79,14,103,0,2,0,172,1,
            79,15,103,0,153,1,148,79,12,103,
            0,187,46,0,73,137,0,137,71,137,
            70,137,44,0,72,0,137,70,137,44,
            0,71,137,72,0,137,44,0,70,137,
            71,137,72,0,137,1,0,117,0,10,
            111,0,5,111,0,120,0,4,118,0,
            9,118,0,123,0,19,121,0,18,121,
            0,17,121,0,16,121,0,126,0,35,
            124,0,7,124,0,129,0,39,127,0,
            132,0,45,130,0,135,0,52,133,0,
            141,0,56,136,0,147,55,79,0,65,
            149,0,147,55,79,13,103,0,153,1,
            149,145,11,82,13,103,0,153,1,145,
            11,82,0,153,1,149,79,0,153,1,
            149,79,13,103,0,153,1,149,183,13,
            103,0,147,8,79,1,79,12,103,0,
            147,8,138,1,79,12,103,0,138,1,
            79,12,103,0,8,147,2,0,137,1,
            79,12,103,0,137,38,146,66,162,1,
            79,12,103,0,146,66,162,1,79,12,
            103,0,38,137,2,0,137,38,146,1,
            79,12,103,0,146,1,79,12,103,0,
            137,38,162,8,142,1,79,12,103,0,
            137,38,162,8,79,1,79,12,103,0,
            137,38,162,1,79,12,103,0,186,59,
            30,0,60,0,169,59,83,0,169,59,
            80,0,184,1,30,0,150,1,80,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            3871,649,4030,4023,3918,3894,3878,1614,3826,3788,
            3708,3670,3629,3588,3544,3500,3456,3412,3365,3318,
            3268,3215,3159,3100,3036,2972,2908,1316,572,1622,
            2844,2780,1532,1240,1164,1088,2716,487,1462,753,
            657,1001,2652,2588,925,2524,2460,2396,2332,849,
            2268,394,301,1392,2204,2140,2076,2012,1948,1884,
            1820,1756,1692,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,181,79,63,64,62,61,57,54,51,
            53,58,175,68,188,7,3,3,3,154,
            154,154,51,154,154,193,79,82,82,112,
            82,79,93,30,83,80,44,103,1,116,
            122,119,128,125,108,134,131,141,132,126,
            120,40,4,46,117,123,129,135,139,150,
            30,80,82,3,3,3,154,3,3,194,
            3,11,176,191,11,175,11,55,149,148,
            36,59,1,59,59,1,137,14,15,13,
            12,137,56,45,35,7,4,9,108,187,
            79,10,5,19,18,17,16,39,52,7,
            3,178,142,79,82,145,145,147,1,186,
            79,184,79,185,169,137,170,169,150,70,
            79,79,183,82,79,79,108,135,108,129,
            108,123,123,108,117,117,8,73,3,108,
            120,120,120,120,108,126,108,132,7,7,
            1,3,176,1,3,1,8,65,153,147,
            8,8,69,8,137,1,1,149,11,55,
            149,148,1,150,179,180,179,150,153,71,
            172,67,173,172,1,145,147,1,1,137,
            146,162,142,138,79,2,8,2,192,137,
            3,8,153,149,65,153,153,38,66,38,
            8,8,8,3,3,1,137,146,137,162,
            79,147,162,147,79,153,38,38,38,137,
            137,137
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "+",
            "-",
            "*",
            "/",
            ">",
            "<",
            "=",
            ">=",
            "<=",
            "<>",
            "(",
            ")",
            "{",
            "}",
            "[",
            "]",
            "->",
            "|",
            ",",
            ":",
            "::",
            ";",
            ".",
            "..",
            "@",
            "^",
            "^^",
            "?",
            "$empty",
            "INTEGER_LITERAL",
            "REAL_LITERAL",
            "STRING_LITERAL",
            "self",
            "if",
            "then",
            "else",
            "endif",
            "and",
            "or",
            "xor",
            "not",
            "implies",
            "let",
            "in",
            "true",
            "false",
            "null",
            "invalid",
            "Set",
            "Bag",
            "Sequence",
            "Collection",
            "OrderedSet",
            "String",
            "Integer",
            "UnlimitedNatural",
            "Real",
            "Boolean",
            "Tuple",
            "OclAny",
            "OclVoid",
            "OclInvalid",
            "inv",
            "pre",
            "post",
            "context",
            "package",
            "endpackage",
            "def",
            "body",
            "derive",
            "init",
            "static",
            "OclMessage",
            "EOF_TOKEN",
            "IDENTIFIER",
            "SINGLE_LINE_COMMENT",
            "MULTI_LINE_COMMENT",
            "ERROR_TOKEN",
            "conceptualOperationNameCS",
            "CollectionTypeIdentifierCS",
            "simpleNameCS",
            "unreservedSimpleNameCS",
            "pathNameCS",
            "typeCS",
            "collectionTypeCS",
            "tupleTypePartsCS",
            "typedUninitializedVariableCS",
            "OclExpressionCS",
            "typedInitializedVariableCS",
            "initializedVariableCS",
            "uninitializedVariableCS",
            "VariableDeclarationCS",
            "CollectionLiteralPartsCS",
            "CollectionLiteralPartCS",
            "StringLiteralExpCS",
            "TupleLiteralPartsCS",
            "primaryExpCS",
            "notNameExpressionCS",
            "argumentsCS",
            "SimpleNameExpCS",
            "impliesNotNameNotLetCS",
            "impliesNotLetCS",
            "xorNotNameNotLetCS",
            "xorNotLetCS",
            "xorWithLetCS",
            "orNotNameNotLetCS",
            "orNotLetCS",
            "orWithLetCS",
            "andNotNameNotLetCS",
            "andNotLetCS",
            "andWithLetCS",
            "equalityNotNameNotLetCS",
            "equalityNotLetCS",
            "equalityWithLetCS",
            "relationalNotNameNotLetCS",
            "relationalNotLetCS",
            "relationalWithLetCS",
            "additiveNotNameNotLetCS",
            "additiveNotLetCS",
            "additiveWithLetCS",
            "multiplicativeNotNameNotLetCS",
            "multiplicativeNotLetCS",
            "multiplicativeWithLetCS",
            "unaryNotLetCS",
            "unaryWithLetCS",
            "primaryNotNameCS",
            "letVariablesCS",
            "packageDeclarationsCS",
            "invOrDefCS",
            "prePostOrBodyDeclCS",
            "initOrDerValueCS",
            "isMarkedPreCS",
            "OclMessageArgumentsCS",
            "OclMessageArgCS",
            "packageDeclarationCS_A",
            "contextDeclsCS",
            "contextDeclCS",
            "initOrDerValuesCS",
            "invOrDefsCS",
            "defExpressionCS",
            "operationCS1",
            "operationCS2",
            "prePostOrBodyDeclsCS",
            "parametersCS"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    /**
     * assert(! goto_default);
     */
    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    /**
     * assert(! shift_default);
     */
    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
