/**
 * <copyright>
 *
 * Copyright (c) 2010 E.D.Willink and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     E.D.Willink - initial API and implementation
 *
 * </copyright>
 *
 * $Id: CompleteOCL.xtext,v 1.13 2011/05/21 14:55:54 ewillink Exp $
 */
grammar org.eclipse.ocl.examples.xtext.completeocl.CompleteOCL
with org.eclipse.ocl.examples.xtext.essentialocl.EssentialOCL

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/org.eclipse.ocl.examples.xtext.base/model/BaseCST.ecore" as base
import "platform:/resource/org.eclipse.ocl.examples.xtext.essentialocl/model/EssentialOCLCST.ecore" as essentialocl
import "platform:/resource/org.eclipse.ocl.examples.pivot/model/pivot.ecore" as pivot
import "platform:/resource/org.eclipse.ocl.examples.xtext.completeocl/model/CompleteOCLCST.ecore"
//generate completeOCL "http://www.eclipse.org/ocl/examples/xtext/completeocl/CompleteOCL"
CompleteOCLDocumentCS returns CompleteOCLDocumentCS:
	(ownedImport+=ImportCS | ownedInclude+=IncludeCS | ownedLibrary+=LibraryCS)*
	(packages+=PackageDeclarationCS | contexts+=ContextDeclCS)*;

NavigationOperator:						// Intended to be overridden
	EssentialOCLNavigationOperator | '^' | '^^'
;

UnrestrictedName returns ecore::EString:
	EssentialOCLUnrestrictedName
	| 'body'
	| 'context'
	| 'def'
	| 'derive'
	//|	'endpackage'
	| 'import'
	| 'include'
	| 'init'
	| 'inv'
	| 'library'
	//|	'package'
	|	'post'
	|	'pre'
	//|	'static'
;

PrimitiveTypeIdentifier:
	'Boolean'
	| 'Integer'
	| 'Real'
	| 'String'
	| 'UnlimitedNatural'
	| 'OclAny'
	| 'OclInvalid'
	| 'OclMessage'
	| 'OclState'
	| 'OclVoid';

BodyCS returns BodyCS:
	stereotype='body' (name=UnrestrictedName)? ':' specification=SpecificationCS;

ClassifierContextDeclCS returns ClassifierContextDeclCS:
	'context' (selfName=UnrestrictedName ':')?
	((namespace+=[pivot::Namespace|UnrestrictedName] '::' (namespace+=[pivot::Namespace|UnreservedName] '::')*
	classifier=[pivot::Type|UnreservedName])
	| classifier=[pivot::Type|UnrestrictedName])
	(rules+=InvCS | rules+=DefCS)*;

ContextDeclCS returns ContextDeclCS:
	PropertyContextDeclCS
	| ClassifierContextDeclCS
	| OperationContextDeclCS;

DefCS returns DefCS:
	(static?='static')? stereotype='def' (name=UnrestrictedName)? ':' constrainedName=UnrestrictedName
	(operation?='(' (parameters+=ParameterCS (',' parameters+=ParameterCS)*)? ')')?
	':' (ownedType=TypeExpCS)? '=' specification=SpecificationCS;

DerCS returns DerCS:
	stereotype='derive' ':' specification=SpecificationCS;

ImportCS returns base::ImportCS:
	'import' (name=Identifier ':')? namespace=[pivot::Namespace|SINGLE_QUOTED_STRING];

IncludeCS returns IncludeCS:
	'include' namespace=[pivot::Namespace|SINGLE_QUOTED_STRING];

InitCS returns InitCS:
	stereotype='init' ':' specification=SpecificationCS;

InvCS returns InvCS:
	stereotype='inv' (name=UnrestrictedName ('(' messageSpecification=SpecificationCS ')')?)? ':' specification=SpecificationCS;

LibraryCS returns base::LibraryCS:
	'library' package=[pivot::Package|SINGLE_QUOTED_STRING];

OperationContextDeclCS returns OperationContextDeclCS:
	'context' ((namespace+=[pivot::Namespace|UnrestrictedName] '::' (namespace+=[pivot::Namespace|UnreservedName] '::')*
	  operation=[pivot::Operation|UnreservedName])
	| operation=[pivot::Operation|UnrestrictedName]) '(' 
	(parameters+=ParameterCS (',' parameters+=ParameterCS)*)?
	')' ':' (ownedType=TypeExpCS)?
	((rules+=PreCS) | (rules+=PostCS) | (rules+=BodyCS))*;

PackageDeclarationCS returns PackageDeclarationCS:
	'package' ((namespace+=[pivot::Namespace|UnrestrictedName] '::' (namespace+=[pivot::Namespace|UnreservedName] '::')*
	package=[pivot::Package|UnreservedName])
	| package=[pivot::Package|UnrestrictedName])
	(contexts+=ContextDeclCS)* 'endpackage';

ParameterCS returns essentialocl::VariableCS:
	(name=UnrestrictedName ':')? ownedType=TypeExpCS;

PostCS returns PostCS:
	stereotype='post' (name=UnrestrictedName)? ':' specification=SpecificationCS;

PreCS returns PreCS:
	stereotype='pre' (name=UnrestrictedName)? ':' specification=SpecificationCS;

PropertyContextDeclCS returns PropertyContextDeclCS:
	'context' ((namespace+=[pivot::Namespace|UnrestrictedName] '::' (namespace+=[pivot::Namespace|UnreservedName] '::')*
	property=[pivot::Property|UnreservedName])
	| property=[pivot::Property|UnrestrictedName]) ':' ownedType=TypeExpCS
	((rules+=InitCS (rules+=DerCS)?)? | (rules+=DerCS (rules+=InitCS)?));

SpecificationCS returns ContextSpecificationCS:
	ownedExpression=ExpCS;

//---------------------------------------------------------------------------------
//	EssentialOCL overrides
//---------------------------------------------------------------------------------
NavigatingExpCS_Base returns essentialocl::NamedExpCS:
	IndexExpCS
	({PreExpCS.namedExp=current} '@' 'pre')?
;

NavigatingArgExpCS returns essentialocl::ExpCS:
	({OclMessageArgCS} '?')
	| ExpCS
;
