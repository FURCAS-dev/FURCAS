/*
* generated by Xtext
*/

package org.eclipse.ocl.examples.xtext.oclstdlib.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.ocl.examples.xtext.essentialocl.services.EssentialOCLGrammarAccess;

@Singleton
public class OCLstdlibGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class LibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Library");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cOwnedLibraryAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cOwnedLibraryLibraryCSParserRuleCall_0_0_0 = (RuleCall)cOwnedLibraryAssignment_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLibraryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNsPrefixAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNsPrefixIdentifierParserRuleCall_3_1_0 = (RuleCall)cNsPrefixAssignment_3_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cNsURIAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cNsURISINGLE_QUOTED_STRINGTerminalRuleCall_3_3_0 = (RuleCall)cNsURIAssignment_3_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cOwnedNestedPackageAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cOwnedNestedPackagePackageCSParserRuleCall_5_0_0 = (RuleCall)cOwnedNestedPackageAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Keyword cPrecedenceKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cOwnedPrecedenceAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cOwnedPrecedencePrecedenceCSParserRuleCall_5_1_1_0 = (RuleCall)cOwnedPrecedenceAssignment_5_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1_2 = (Keyword)cGroup_5_1.eContents().get(2);
		private final Assignment cOwnedTypeAssignment_5_2 = (Assignment)cAlternatives_5.eContents().get(2);
		private final RuleCall cOwnedTypeClassifierCSParserRuleCall_5_2_0 = (RuleCall)cOwnedTypeAssignment_5_2.eContents().get(0);
		private final Assignment cOwnedAnnotationAssignment_5_3 = (Assignment)cAlternatives_5.eContents().get(3);
		private final RuleCall cOwnedAnnotationAnnotationElementCSParserRuleCall_5_3_0 = (RuleCall)cOwnedAnnotationAssignment_5_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		////generate OCLstdlib "http://www.eclipse.org/ocl/examples/xtext/oclstdlib/OCLstdlibCST"
		//
		//Library returns LibRootPackageCS:
		//	(ownedLibrary+=LibraryCS ";")* "library" name=Name (":" nsPrefix=Identifier "=" nsURI=SINGLE_QUOTED_STRING)? "{"
		//	(ownedNestedPackage+=PackageCS | "precedence" ownedPrecedence+=PrecedenceCS+ ";" | ownedType+=ClassifierCS |
		//	ownedAnnotation+=AnnotationElementCS)* "}";
		public ParserRule getRule() { return rule; }

		//(ownedLibrary+=LibraryCS ";")* "library" name=Name (":" nsPrefix=Identifier "=" nsURI=SINGLE_QUOTED_STRING)? "{"
		//(ownedNestedPackage+=PackageCS | "precedence" ownedPrecedence+=PrecedenceCS+ ";" | ownedType+=ClassifierCS |
		//ownedAnnotation+=AnnotationElementCS)* "}"
		public Group getGroup() { return cGroup; }

		//(ownedLibrary+=LibraryCS ";")*
		public Group getGroup_0() { return cGroup_0; }

		//ownedLibrary+=LibraryCS
		public Assignment getOwnedLibraryAssignment_0_0() { return cOwnedLibraryAssignment_0_0; }

		//LibraryCS
		public RuleCall getOwnedLibraryLibraryCSParserRuleCall_0_0_0() { return cOwnedLibraryLibraryCSParserRuleCall_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }

		//"library"
		public Keyword getLibraryKeyword_1() { return cLibraryKeyword_1; }

		//name=Name
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//Name
		public RuleCall getNameNameParserRuleCall_2_0() { return cNameNameParserRuleCall_2_0; }

		//(":" nsPrefix=Identifier "=" nsURI=SINGLE_QUOTED_STRING)?
		public Group getGroup_3() { return cGroup_3; }

		//":"
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }

		//nsPrefix=Identifier
		public Assignment getNsPrefixAssignment_3_1() { return cNsPrefixAssignment_3_1; }

		//Identifier
		public RuleCall getNsPrefixIdentifierParserRuleCall_3_1_0() { return cNsPrefixIdentifierParserRuleCall_3_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_3_2() { return cEqualsSignKeyword_3_2; }

		//nsURI=SINGLE_QUOTED_STRING
		public Assignment getNsURIAssignment_3_3() { return cNsURIAssignment_3_3; }

		//SINGLE_QUOTED_STRING
		public RuleCall getNsURISINGLE_QUOTED_STRINGTerminalRuleCall_3_3_0() { return cNsURISINGLE_QUOTED_STRINGTerminalRuleCall_3_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//(ownedNestedPackage+=PackageCS | "precedence" ownedPrecedence+=PrecedenceCS+ ";" | ownedType+=ClassifierCS |
		//ownedAnnotation+=AnnotationElementCS)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//ownedNestedPackage+=PackageCS
		public Assignment getOwnedNestedPackageAssignment_5_0() { return cOwnedNestedPackageAssignment_5_0; }

		//PackageCS
		public RuleCall getOwnedNestedPackagePackageCSParserRuleCall_5_0_0() { return cOwnedNestedPackagePackageCSParserRuleCall_5_0_0; }

		//"precedence" ownedPrecedence+=PrecedenceCS+ ";"
		public Group getGroup_5_1() { return cGroup_5_1; }

		//"precedence"
		public Keyword getPrecedenceKeyword_5_1_0() { return cPrecedenceKeyword_5_1_0; }

		//ownedPrecedence+=PrecedenceCS+
		public Assignment getOwnedPrecedenceAssignment_5_1_1() { return cOwnedPrecedenceAssignment_5_1_1; }

		//PrecedenceCS
		public RuleCall getOwnedPrecedencePrecedenceCSParserRuleCall_5_1_1_0() { return cOwnedPrecedencePrecedenceCSParserRuleCall_5_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_5_1_2() { return cSemicolonKeyword_5_1_2; }

		//ownedType+=ClassifierCS
		public Assignment getOwnedTypeAssignment_5_2() { return cOwnedTypeAssignment_5_2; }

		//ClassifierCS
		public RuleCall getOwnedTypeClassifierCSParserRuleCall_5_2_0() { return cOwnedTypeClassifierCSParserRuleCall_5_2_0; }

		//ownedAnnotation+=AnnotationElementCS
		public Assignment getOwnedAnnotationAssignment_5_3() { return cOwnedAnnotationAssignment_5_3; }

		//AnnotationElementCS
		public RuleCall getOwnedAnnotationAnnotationElementCSParserRuleCall_5_3_0() { return cOwnedAnnotationAnnotationElementCSParserRuleCall_5_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class LOWERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LOWER");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//LOWER returns ecore::EInt:
		//	INT;
		public ParserRule getRule() { return rule; }

		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}

	public class UPPERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UPPER");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//UPPER returns ecore::EInt:
		//	INT | "*";
		public ParserRule getRule() { return rule; }

		//INT | "*"
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//"*"
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}

	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Identifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRestrictedKeywordsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEssentialOCLUnrestrictedIdentifierParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Identifier:
		//	ID | RestrictedKeywords | EssentialOCLUnrestrictedIdentifier;
		public ParserRule getRule() { return rule; }

		//ID | RestrictedKeywords | EssentialOCLUnrestrictedIdentifier
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDParserRuleCall_0() { return cIDParserRuleCall_0; }

		//RestrictedKeywords
		public RuleCall getRestrictedKeywordsParserRuleCall_1() { return cRestrictedKeywordsParserRuleCall_1; }

		//EssentialOCLUnrestrictedIdentifier
		public RuleCall getEssentialOCLUnrestrictedIdentifierParserRuleCall_2() { return cEssentialOCLUnrestrictedIdentifierParserRuleCall_2; }
	}

	public class RestrictedKeywordsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RestrictedKeywords");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAnnotationKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cConformsToKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDocumentationKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cExtendsKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cImportKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cInvKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cIterationKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cLeftKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cLibraryKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cOperationKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cPackageKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cPostKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cPreKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cPrecedenceKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cPropertyKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cRightKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cStaticKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cSuperKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cTypeKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cLambdaKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cTupleKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		
		//RestrictedKeywords:
		//	"annotation" | "conformsTo" | "documentation" | "extends" | "import" | "inv" | "iteration" | "left" | "library" |
		//	"operation" | "package" | "post" | "pre" | "precedence" | "property" | "right" | "static" | "super" | "type" |
		//	"Lambda" | "Tuple";
		public ParserRule getRule() { return rule; }

		//"annotation" | "conformsTo" | "documentation" | "extends" | "import" | "inv" | "iteration" | "left" | "library" |
		//"operation" | "package" | "post" | "pre" | "precedence" | "property" | "right" | "static" | "super" | "type" | "Lambda"
		//| "Tuple"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"annotation"
		public Keyword getAnnotationKeyword_0() { return cAnnotationKeyword_0; }

		//"conformsTo"
		public Keyword getConformsToKeyword_1() { return cConformsToKeyword_1; }

		//"documentation"
		public Keyword getDocumentationKeyword_2() { return cDocumentationKeyword_2; }

		//"extends"
		public Keyword getExtendsKeyword_3() { return cExtendsKeyword_3; }

		//"import"
		public Keyword getImportKeyword_4() { return cImportKeyword_4; }

		//"inv"
		public Keyword getInvKeyword_5() { return cInvKeyword_5; }

		//"iteration"
		public Keyword getIterationKeyword_6() { return cIterationKeyword_6; }

		//"left"
		public Keyword getLeftKeyword_7() { return cLeftKeyword_7; }

		//"library"
		public Keyword getLibraryKeyword_8() { return cLibraryKeyword_8; }

		//"operation"
		public Keyword getOperationKeyword_9() { return cOperationKeyword_9; }

		//"package"
		public Keyword getPackageKeyword_10() { return cPackageKeyword_10; }

		//"post"
		public Keyword getPostKeyword_11() { return cPostKeyword_11; }

		//"pre"
		public Keyword getPreKeyword_12() { return cPreKeyword_12; }

		//"precedence"
		public Keyword getPrecedenceKeyword_13() { return cPrecedenceKeyword_13; }

		//"property"
		public Keyword getPropertyKeyword_14() { return cPropertyKeyword_14; }

		//"right"
		public Keyword getRightKeyword_15() { return cRightKeyword_15; }

		//"static"
		public Keyword getStaticKeyword_16() { return cStaticKeyword_16; }

		//"super"
		public Keyword getSuperKeyword_17() { return cSuperKeyword_17; }

		//"type"
		public Keyword getTypeKeyword_18() { return cTypeKeyword_18; }

		//"Lambda"
		public Keyword getLambdaKeyword_19() { return cLambdaKeyword_19; }

		//"Tuple"
		public Keyword getTupleKeyword_20() { return cTupleKeyword_20; }
	}

	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Name");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDOUBLE_QUOTED_STRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEssentialOCLReservedKeywordParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRestrictedKeywordsParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPrimitiveTypeIdentifierParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCollectionTypeIdentifierParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Name:
		//	Identifier | DOUBLE_QUOTED_STRING | EssentialOCLReservedKeyword | RestrictedKeywords | PrimitiveTypeIdentifier |
		//	CollectionTypeIdentifier;
		public ParserRule getRule() { return rule; }

		//Identifier | DOUBLE_QUOTED_STRING | EssentialOCLReservedKeyword | RestrictedKeywords | PrimitiveTypeIdentifier |
		//CollectionTypeIdentifier
		public Alternatives getAlternatives() { return cAlternatives; }

		//Identifier
		public RuleCall getIdentifierParserRuleCall_0() { return cIdentifierParserRuleCall_0; }

		//DOUBLE_QUOTED_STRING
		public RuleCall getDOUBLE_QUOTED_STRINGTerminalRuleCall_1() { return cDOUBLE_QUOTED_STRINGTerminalRuleCall_1; }

		//EssentialOCLReservedKeyword
		public RuleCall getEssentialOCLReservedKeywordParserRuleCall_2() { return cEssentialOCLReservedKeywordParserRuleCall_2; }

		//RestrictedKeywords
		public RuleCall getRestrictedKeywordsParserRuleCall_3() { return cRestrictedKeywordsParserRuleCall_3; }

		//PrimitiveTypeIdentifier
		public RuleCall getPrimitiveTypeIdentifierParserRuleCall_4() { return cPrimitiveTypeIdentifierParserRuleCall_4; }

		//CollectionTypeIdentifier
		public RuleCall getCollectionTypeIdentifierParserRuleCall_5() { return cCollectionTypeIdentifierParserRuleCall_5; }
	}

	public class AccumulatorCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AccumulatorCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIdentifierParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedTypeTypedRefCSParserRuleCall_2_0 = (RuleCall)cOwnedTypeAssignment_2.eContents().get(0);
		
		//AccumulatorCS returns base::ParameterCS:
		//	name=Identifier ":" ownedType=TypedRefCS;
		public ParserRule getRule() { return rule; }

		//name=Identifier ":" ownedType=TypedRefCS
		public Group getGroup() { return cGroup; }

		//name=Identifier
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_0_0() { return cNameIdentifierParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//ownedType=TypedRefCS
		public Assignment getOwnedTypeAssignment_2() { return cOwnedTypeAssignment_2; }

		//TypedRefCS
		public RuleCall getOwnedTypeTypedRefCSParserRuleCall_2_0() { return cOwnedTypeTypedRefCSParserRuleCall_2_0; }
	}

	public class AnnotationCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnnotationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameIdentifierParserRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final RuleCall cNameSINGLE_QUOTED_STRINGTerminalRuleCall_1_0_1 = (RuleCall)cNameAlternatives_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOwnedDetailAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOwnedDetailDetailCSParserRuleCall_2_1_0 = (RuleCall)cOwnedDetailAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cOwnedDetailAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cOwnedDetailDetailCSParserRuleCall_2_2_1_0 = (RuleCall)cOwnedDetailAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cOwnedAnnotationAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cOwnedAnnotationAnnotationElementCSParserRuleCall_3_0_1_0 = (RuleCall)cOwnedAnnotationAssignment_3_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_0_2 = (Keyword)cGroup_3_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		
		//AnnotationCS returns base::AnnotationCS:
		//	"annotation" name=(Identifier | SINGLE_QUOTED_STRING) ("(" ownedDetail+=DetailCS ("," ownedDetail+=DetailCS)* ")")?
		//	("{" ownedAnnotation+=AnnotationElementCS "}" | ";");
		public ParserRule getRule() { return rule; }

		//"annotation" name=(Identifier | SINGLE_QUOTED_STRING) ("(" ownedDetail+=DetailCS ("," ownedDetail+=DetailCS)* ")")? ("{"
		//ownedAnnotation+=AnnotationElementCS "}" | ";")
		public Group getGroup() { return cGroup; }

		//"annotation"
		public Keyword getAnnotationKeyword_0() { return cAnnotationKeyword_0; }

		//name=(Identifier | SINGLE_QUOTED_STRING)
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Identifier | SINGLE_QUOTED_STRING
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0_0() { return cNameIdentifierParserRuleCall_1_0_0; }

		//SINGLE_QUOTED_STRING
		public RuleCall getNameSINGLE_QUOTED_STRINGTerminalRuleCall_1_0_1() { return cNameSINGLE_QUOTED_STRINGTerminalRuleCall_1_0_1; }

		//("(" ownedDetail+=DetailCS ("," ownedDetail+=DetailCS)* ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//ownedDetail+=DetailCS
		public Assignment getOwnedDetailAssignment_2_1() { return cOwnedDetailAssignment_2_1; }

		//DetailCS
		public RuleCall getOwnedDetailDetailCSParserRuleCall_2_1_0() { return cOwnedDetailDetailCSParserRuleCall_2_1_0; }

		//("," ownedDetail+=DetailCS)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//ownedDetail+=DetailCS
		public Assignment getOwnedDetailAssignment_2_2_1() { return cOwnedDetailAssignment_2_2_1; }

		//DetailCS
		public RuleCall getOwnedDetailDetailCSParserRuleCall_2_2_1_0() { return cOwnedDetailDetailCSParserRuleCall_2_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }

		//"{" ownedAnnotation+=AnnotationElementCS "}" | ";"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//"{" ownedAnnotation+=AnnotationElementCS "}"
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0_0() { return cLeftCurlyBracketKeyword_3_0_0; }

		//ownedAnnotation+=AnnotationElementCS
		public Assignment getOwnedAnnotationAssignment_3_0_1() { return cOwnedAnnotationAssignment_3_0_1; }

		//AnnotationElementCS
		public RuleCall getOwnedAnnotationAnnotationElementCSParserRuleCall_3_0_1_0() { return cOwnedAnnotationAnnotationElementCSParserRuleCall_3_0_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_0_2() { return cRightCurlyBracketKeyword_3_0_2; }

		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
	}

	public class AnnotationElementCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationElementCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAnnotationCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDocumentationCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AnnotationElementCS returns base::AnnotationElementCS:
		//	AnnotationCS | DocumentationCS;
		public ParserRule getRule() { return rule; }

		//AnnotationCS | DocumentationCS
		public Alternatives getAlternatives() { return cAlternatives; }

		//AnnotationCS
		public RuleCall getAnnotationCSParserRuleCall_0() { return cAnnotationCSParserRuleCall_0; }

		//DocumentationCS
		public RuleCall getDocumentationCSParserRuleCall_1() { return cDocumentationCSParserRuleCall_1; }
	}

	public class ClassCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cOwnedTemplateSignatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedTemplateSignatureTemplateSignatureCSParserRuleCall_2_0 = (RuleCall)cOwnedTemplateSignatureAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMetaTypeNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cMetaTypeNameMetaTypeNameCrossReference_3_1_0 = (CrossReference)cMetaTypeNameAssignment_3_1.eContents().get(0);
		private final RuleCall cMetaTypeNameMetaTypeNameNameParserRuleCall_3_1_0_1 = (RuleCall)cMetaTypeNameMetaTypeNameCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cConformsToKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOwnedSuperTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOwnedSuperTypeTypedRefCSParserRuleCall_4_1_0 = (RuleCall)cOwnedSuperTypeAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cOwnedSuperTypeAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cOwnedSuperTypeTypedRefCSParserRuleCall_4_2_1_0 = (RuleCall)cOwnedSuperTypeAssignment_4_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Assignment cOwnedOperationAssignment_6_0 = (Assignment)cAlternatives_6.eContents().get(0);
		private final RuleCall cOwnedOperationOperationCSParserRuleCall_6_0_0 = (RuleCall)cOwnedOperationAssignment_6_0.eContents().get(0);
		private final Assignment cOwnedPropertyAssignment_6_1 = (Assignment)cAlternatives_6.eContents().get(1);
		private final RuleCall cOwnedPropertyLibPropertyCSParserRuleCall_6_1_0 = (RuleCall)cOwnedPropertyAssignment_6_1.eContents().get(0);
		private final Assignment cOwnedConstraintAssignment_6_2 = (Assignment)cAlternatives_6.eContents().get(2);
		private final RuleCall cOwnedConstraintInvCSParserRuleCall_6_2_0 = (RuleCall)cOwnedConstraintAssignment_6_2.eContents().get(0);
		private final Assignment cOwnedAnnotationAssignment_6_3 = (Assignment)cAlternatives_6.eContents().get(3);
		private final RuleCall cOwnedAnnotationAnnotationElementCSParserRuleCall_6_3_0 = (RuleCall)cOwnedAnnotationAssignment_6_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ClassCS returns LibClassCS:
		//	"type" name=Name ownedTemplateSignature=TemplateSignatureCS? (":" metaTypeName=[MetaTypeName|Name])? ("conformsTo"
		//	ownedSuperType+=TypedRefCS ("," ownedSuperType+=TypedRefCS)*)? "{" (ownedOperation+=OperationCS |
		//	ownedProperty+=LibPropertyCS | ownedConstraint+=InvCS | ownedAnnotation+=AnnotationElementCS)* "}";
		public ParserRule getRule() { return rule; }

		//"type" name=Name ownedTemplateSignature=TemplateSignatureCS? (":" metaTypeName=[MetaTypeName|Name])? ("conformsTo"
		//ownedSuperType+=TypedRefCS ("," ownedSuperType+=TypedRefCS)*)? "{" (ownedOperation+=OperationCS |
		//ownedProperty+=LibPropertyCS | ownedConstraint+=InvCS | ownedAnnotation+=AnnotationElementCS)* "}"
		public Group getGroup() { return cGroup; }

		//"type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }

		//ownedTemplateSignature=TemplateSignatureCS?
		public Assignment getOwnedTemplateSignatureAssignment_2() { return cOwnedTemplateSignatureAssignment_2; }

		//TemplateSignatureCS
		public RuleCall getOwnedTemplateSignatureTemplateSignatureCSParserRuleCall_2_0() { return cOwnedTemplateSignatureTemplateSignatureCSParserRuleCall_2_0; }

		//(":" metaTypeName=[MetaTypeName|Name])?
		public Group getGroup_3() { return cGroup_3; }

		//":"
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }

		//metaTypeName=[MetaTypeName|Name]
		public Assignment getMetaTypeNameAssignment_3_1() { return cMetaTypeNameAssignment_3_1; }

		//[MetaTypeName|Name]
		public CrossReference getMetaTypeNameMetaTypeNameCrossReference_3_1_0() { return cMetaTypeNameMetaTypeNameCrossReference_3_1_0; }

		//Name
		public RuleCall getMetaTypeNameMetaTypeNameNameParserRuleCall_3_1_0_1() { return cMetaTypeNameMetaTypeNameNameParserRuleCall_3_1_0_1; }

		//("conformsTo" ownedSuperType+=TypedRefCS ("," ownedSuperType+=TypedRefCS)*)?
		public Group getGroup_4() { return cGroup_4; }

		//"conformsTo"
		public Keyword getConformsToKeyword_4_0() { return cConformsToKeyword_4_0; }

		//ownedSuperType+=TypedRefCS
		public Assignment getOwnedSuperTypeAssignment_4_1() { return cOwnedSuperTypeAssignment_4_1; }

		//TypedRefCS
		public RuleCall getOwnedSuperTypeTypedRefCSParserRuleCall_4_1_0() { return cOwnedSuperTypeTypedRefCSParserRuleCall_4_1_0; }

		//("," ownedSuperType+=TypedRefCS)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//ownedSuperType+=TypedRefCS
		public Assignment getOwnedSuperTypeAssignment_4_2_1() { return cOwnedSuperTypeAssignment_4_2_1; }

		//TypedRefCS
		public RuleCall getOwnedSuperTypeTypedRefCSParserRuleCall_4_2_1_0() { return cOwnedSuperTypeTypedRefCSParserRuleCall_4_2_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//(ownedOperation+=OperationCS | ownedProperty+=LibPropertyCS | ownedConstraint+=InvCS |
		//ownedAnnotation+=AnnotationElementCS)*
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//ownedOperation+=OperationCS
		public Assignment getOwnedOperationAssignment_6_0() { return cOwnedOperationAssignment_6_0; }

		//OperationCS
		public RuleCall getOwnedOperationOperationCSParserRuleCall_6_0_0() { return cOwnedOperationOperationCSParserRuleCall_6_0_0; }

		//ownedProperty+=LibPropertyCS
		public Assignment getOwnedPropertyAssignment_6_1() { return cOwnedPropertyAssignment_6_1; }

		//LibPropertyCS
		public RuleCall getOwnedPropertyLibPropertyCSParserRuleCall_6_1_0() { return cOwnedPropertyLibPropertyCSParserRuleCall_6_1_0; }

		//ownedConstraint+=InvCS
		public Assignment getOwnedConstraintAssignment_6_2() { return cOwnedConstraintAssignment_6_2; }

		//InvCS
		public RuleCall getOwnedConstraintInvCSParserRuleCall_6_2_0() { return cOwnedConstraintInvCSParserRuleCall_6_2_0; }

		//ownedAnnotation+=AnnotationElementCS
		public Assignment getOwnedAnnotationAssignment_6_3() { return cOwnedAnnotationAssignment_6_3; }

		//AnnotationElementCS
		public RuleCall getOwnedAnnotationAnnotationElementCSParserRuleCall_6_3_0() { return cOwnedAnnotationAnnotationElementCSParserRuleCall_6_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class ClassifierCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassifierCS");
		private final RuleCall cClassCSParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ClassifierCS returns base::ClassifierCS:
		//	ClassCS;
		public ParserRule getRule() { return rule; }

		//ClassCS
		public RuleCall getClassCSParserRuleCall() { return cClassCSParserRuleCall; }
	}

	public class DetailCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DetailCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cNameAlternatives_0_0 = (Alternatives)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_0_0_0 = (RuleCall)cNameAlternatives_0_0.eContents().get(0);
		private final RuleCall cNameSINGLE_QUOTED_STRINGTerminalRuleCall_0_0_1 = (RuleCall)cNameAlternatives_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cValueAlternatives_2_0 = (Alternatives)cValueAssignment_2.eContents().get(0);
		private final RuleCall cValueSINGLE_QUOTED_STRINGTerminalRuleCall_2_0_0 = (RuleCall)cValueAlternatives_2_0.eContents().get(0);
		private final RuleCall cValueML_SINGLE_QUOTED_STRINGTerminalRuleCall_2_0_1 = (RuleCall)cValueAlternatives_2_0.eContents().get(1);
		
		//DetailCS returns base::DetailCS:
		//	name=(Name | SINGLE_QUOTED_STRING) "=" value+=(SINGLE_QUOTED_STRING | ML_SINGLE_QUOTED_STRING)*;
		public ParserRule getRule() { return rule; }

		//name=(Name | SINGLE_QUOTED_STRING) "=" value+=(SINGLE_QUOTED_STRING | ML_SINGLE_QUOTED_STRING)*
		public Group getGroup() { return cGroup; }

		//name=(Name | SINGLE_QUOTED_STRING)
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Name | SINGLE_QUOTED_STRING
		public Alternatives getNameAlternatives_0_0() { return cNameAlternatives_0_0; }

		//Name
		public RuleCall getNameNameParserRuleCall_0_0_0() { return cNameNameParserRuleCall_0_0_0; }

		//SINGLE_QUOTED_STRING
		public RuleCall getNameSINGLE_QUOTED_STRINGTerminalRuleCall_0_0_1() { return cNameSINGLE_QUOTED_STRINGTerminalRuleCall_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value+=(SINGLE_QUOTED_STRING | ML_SINGLE_QUOTED_STRING)*
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//SINGLE_QUOTED_STRING | ML_SINGLE_QUOTED_STRING
		public Alternatives getValueAlternatives_2_0() { return cValueAlternatives_2_0; }

		//SINGLE_QUOTED_STRING
		public RuleCall getValueSINGLE_QUOTED_STRINGTerminalRuleCall_2_0_0() { return cValueSINGLE_QUOTED_STRINGTerminalRuleCall_2_0_0; }

		//ML_SINGLE_QUOTED_STRING
		public RuleCall getValueML_SINGLE_QUOTED_STRINGTerminalRuleCall_2_0_1() { return cValueML_SINGLE_QUOTED_STRINGTerminalRuleCall_2_0_1; }
	}

	public class DocumentationCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DocumentationCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDocumentationCSAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDocumentationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSINGLE_QUOTED_STRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOwnedDetailAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOwnedDetailDetailCSParserRuleCall_3_1_0 = (RuleCall)cOwnedDetailAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cOwnedDetailAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cOwnedDetailDetailCSParserRuleCall_3_2_1_0 = (RuleCall)cOwnedDetailAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DocumentationCS returns base::DocumentationCS:
		//	{base::DocumentationCS} "documentation" value=SINGLE_QUOTED_STRING? ("(" ownedDetail+=DetailCS (","
		//	ownedDetail+=DetailCS)* ")")? ";";
		public ParserRule getRule() { return rule; }

		//{base::DocumentationCS} "documentation" value=SINGLE_QUOTED_STRING? ("(" ownedDetail+=DetailCS (","
		//ownedDetail+=DetailCS)* ")")? ";"
		public Group getGroup() { return cGroup; }

		//{base::DocumentationCS}
		public Action getDocumentationCSAction_0() { return cDocumentationCSAction_0; }

		//"documentation"
		public Keyword getDocumentationKeyword_1() { return cDocumentationKeyword_1; }

		//value=SINGLE_QUOTED_STRING?
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//SINGLE_QUOTED_STRING
		public RuleCall getValueSINGLE_QUOTED_STRINGTerminalRuleCall_2_0() { return cValueSINGLE_QUOTED_STRINGTerminalRuleCall_2_0; }

		//("(" ownedDetail+=DetailCS ("," ownedDetail+=DetailCS)* ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//ownedDetail+=DetailCS
		public Assignment getOwnedDetailAssignment_3_1() { return cOwnedDetailAssignment_3_1; }

		//DetailCS
		public RuleCall getOwnedDetailDetailCSParserRuleCall_3_1_0() { return cOwnedDetailDetailCSParserRuleCall_3_1_0; }

		//("," ownedDetail+=DetailCS)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//ownedDetail+=DetailCS
		public Assignment getOwnedDetailAssignment_3_2_1() { return cOwnedDetailAssignment_3_2_1; }

		//DetailCS
		public RuleCall getOwnedDetailDetailCSParserRuleCall_3_2_1_0() { return cOwnedDetailDetailCSParserRuleCall_3_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class InvCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InvCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStereotypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cStereotypeInvKeyword_0_0 = (Keyword)cStereotypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameUnrestrictedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSpecificationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSpecificationSpecificationCSParserRuleCall_3_0 = (RuleCall)cSpecificationAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//InvCS returns LibConstraintCS:
		//	stereotype="inv" name=UnrestrictedName? ":" specification=SpecificationCS ";";
		public ParserRule getRule() { return rule; }

		//stereotype="inv" name=UnrestrictedName? ":" specification=SpecificationCS ";"
		public Group getGroup() { return cGroup; }

		//stereotype="inv"
		public Assignment getStereotypeAssignment_0() { return cStereotypeAssignment_0; }

		//"inv"
		public Keyword getStereotypeInvKeyword_0_0() { return cStereotypeInvKeyword_0_0; }

		//name=UnrestrictedName?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//UnrestrictedName
		public RuleCall getNameUnrestrictedNameParserRuleCall_1_0() { return cNameUnrestrictedNameParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//specification=SpecificationCS
		public Assignment getSpecificationAssignment_3() { return cSpecificationAssignment_3; }

		//SpecificationCS
		public RuleCall getSpecificationSpecificationCSParserRuleCall_3_0() { return cSpecificationSpecificationCSParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class LibIterationCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LibIterationCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIterationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cOwnedTemplateSignatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedTemplateSignatureTemplateSignatureCSParserRuleCall_2_0 = (RuleCall)cOwnedTemplateSignatureAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOwnedIteratorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOwnedIteratorIteratorCSParserRuleCall_4_0 = (RuleCall)cOwnedIteratorAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cOwnedIteratorAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cOwnedIteratorIteratorCSParserRuleCall_5_1_0 = (RuleCall)cOwnedIteratorAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cSemicolonKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cOwnedAccumulatorAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cOwnedAccumulatorAccumulatorCSParserRuleCall_6_1_0 = (RuleCall)cOwnedAccumulatorAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cOwnedAccumulatorAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cOwnedAccumulatorAccumulatorCSParserRuleCall_6_2_1_0 = (RuleCall)cOwnedAccumulatorAssignment_6_2_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cVerticalLineKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cOwnedParameterAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cOwnedParameterParameterCSParserRuleCall_7_1_0 = (RuleCall)cOwnedParameterAssignment_7_1.eContents().get(0);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Keyword cCommaKeyword_7_2_0 = (Keyword)cGroup_7_2.eContents().get(0);
		private final Assignment cOwnedParameterAssignment_7_2_1 = (Assignment)cGroup_7_2.eContents().get(1);
		private final RuleCall cOwnedParameterParameterCSParserRuleCall_7_2_1_0 = (RuleCall)cOwnedParameterAssignment_7_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cColonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cOwnedTypeAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cOwnedTypeTypedRefCSParserRuleCall_10_0 = (RuleCall)cOwnedTypeAssignment_10.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cEqualsSignGreaterThanSignKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cImplementationAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final CrossReference cImplementationJvmTypeCrossReference_11_1_0 = (CrossReference)cImplementationAssignment_11_1.eContents().get(0);
		private final RuleCall cImplementationJvmTypeSINGLE_QUOTED_STRINGTerminalRuleCall_11_1_0_1 = (RuleCall)cImplementationJvmTypeCrossReference_11_1_0.eContents().get(1);
		private final Alternatives cAlternatives_12 = (Alternatives)cGroup.eContents().get(12);
		private final Group cGroup_12_0 = (Group)cAlternatives_12.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_12_0_0 = (Keyword)cGroup_12_0.eContents().get(0);
		private final Alternatives cAlternatives_12_0_1 = (Alternatives)cGroup_12_0.eContents().get(1);
		private final Assignment cOwnedAnnotationAssignment_12_0_1_0 = (Assignment)cAlternatives_12_0_1.eContents().get(0);
		private final RuleCall cOwnedAnnotationAnnotationElementCSParserRuleCall_12_0_1_0_0 = (RuleCall)cOwnedAnnotationAssignment_12_0_1_0.eContents().get(0);
		private final Assignment cOwnedConstraintAssignment_12_0_1_1 = (Assignment)cAlternatives_12_0_1.eContents().get(1);
		private final RuleCall cOwnedConstraintPostCSParserRuleCall_12_0_1_1_0 = (RuleCall)cOwnedConstraintAssignment_12_0_1_1.eContents().get(0);
		private final Assignment cOwnedConstraintAssignment_12_0_1_2 = (Assignment)cAlternatives_12_0_1.eContents().get(2);
		private final RuleCall cOwnedConstraintPreCSParserRuleCall_12_0_1_2_0 = (RuleCall)cOwnedConstraintAssignment_12_0_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12_0_2 = (Keyword)cGroup_12_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_12_1 = (Keyword)cAlternatives_12.eContents().get(1);
		
		//LibIterationCS:
		//	"iteration" name=Name ownedTemplateSignature=TemplateSignatureCS? "(" ownedIterator+=IteratorCS (","
		//	ownedIterator+=IteratorCS)* (";" ownedAccumulator+=AccumulatorCS ("," ownedAccumulator+=AccumulatorCS)*)? ("|"
		//	ownedParameter+=ParameterCS ("," ownedParameter+=ParameterCS)*)? ")" ":" ownedType=TypedRefCS ("=>"
		//	implementation=[types::JvmType|SINGLE_QUOTED_STRING])? ("{" (ownedAnnotation+=AnnotationElementCS |
		//	ownedConstraint+=PostCS | ownedConstraint+=PreCS)* "}" | ";");
		public ParserRule getRule() { return rule; }

		//"iteration" name=Name ownedTemplateSignature=TemplateSignatureCS? "(" ownedIterator+=IteratorCS (","
		//ownedIterator+=IteratorCS)* (";" ownedAccumulator+=AccumulatorCS ("," ownedAccumulator+=AccumulatorCS)*)? ("|"
		//ownedParameter+=ParameterCS ("," ownedParameter+=ParameterCS)*)? ")" ":" ownedType=TypedRefCS ("=>"
		//implementation=[types::JvmType|SINGLE_QUOTED_STRING])? ("{" (ownedAnnotation+=AnnotationElementCS |
		//ownedConstraint+=PostCS | ownedConstraint+=PreCS)* "}" | ";")
		public Group getGroup() { return cGroup; }

		//"iteration"
		public Keyword getIterationKeyword_0() { return cIterationKeyword_0; }

		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }

		//ownedTemplateSignature=TemplateSignatureCS?
		public Assignment getOwnedTemplateSignatureAssignment_2() { return cOwnedTemplateSignatureAssignment_2; }

		//TemplateSignatureCS
		public RuleCall getOwnedTemplateSignatureTemplateSignatureCSParserRuleCall_2_0() { return cOwnedTemplateSignatureTemplateSignatureCSParserRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//ownedIterator+=IteratorCS
		public Assignment getOwnedIteratorAssignment_4() { return cOwnedIteratorAssignment_4; }

		//IteratorCS
		public RuleCall getOwnedIteratorIteratorCSParserRuleCall_4_0() { return cOwnedIteratorIteratorCSParserRuleCall_4_0; }

		//("," ownedIterator+=IteratorCS)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//ownedIterator+=IteratorCS
		public Assignment getOwnedIteratorAssignment_5_1() { return cOwnedIteratorAssignment_5_1; }

		//IteratorCS
		public RuleCall getOwnedIteratorIteratorCSParserRuleCall_5_1_0() { return cOwnedIteratorIteratorCSParserRuleCall_5_1_0; }

		//(";" ownedAccumulator+=AccumulatorCS ("," ownedAccumulator+=AccumulatorCS)*)?
		public Group getGroup_6() { return cGroup_6; }

		//";"
		public Keyword getSemicolonKeyword_6_0() { return cSemicolonKeyword_6_0; }

		//ownedAccumulator+=AccumulatorCS
		public Assignment getOwnedAccumulatorAssignment_6_1() { return cOwnedAccumulatorAssignment_6_1; }

		//AccumulatorCS
		public RuleCall getOwnedAccumulatorAccumulatorCSParserRuleCall_6_1_0() { return cOwnedAccumulatorAccumulatorCSParserRuleCall_6_1_0; }

		//("," ownedAccumulator+=AccumulatorCS)*
		public Group getGroup_6_2() { return cGroup_6_2; }

		//","
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }

		//ownedAccumulator+=AccumulatorCS
		public Assignment getOwnedAccumulatorAssignment_6_2_1() { return cOwnedAccumulatorAssignment_6_2_1; }

		//AccumulatorCS
		public RuleCall getOwnedAccumulatorAccumulatorCSParserRuleCall_6_2_1_0() { return cOwnedAccumulatorAccumulatorCSParserRuleCall_6_2_1_0; }

		//("|" ownedParameter+=ParameterCS ("," ownedParameter+=ParameterCS)*)?
		public Group getGroup_7() { return cGroup_7; }

		//"|"
		public Keyword getVerticalLineKeyword_7_0() { return cVerticalLineKeyword_7_0; }

		//ownedParameter+=ParameterCS
		public Assignment getOwnedParameterAssignment_7_1() { return cOwnedParameterAssignment_7_1; }

		//ParameterCS
		public RuleCall getOwnedParameterParameterCSParserRuleCall_7_1_0() { return cOwnedParameterParameterCSParserRuleCall_7_1_0; }

		//("," ownedParameter+=ParameterCS)*
		public Group getGroup_7_2() { return cGroup_7_2; }

		//","
		public Keyword getCommaKeyword_7_2_0() { return cCommaKeyword_7_2_0; }

		//ownedParameter+=ParameterCS
		public Assignment getOwnedParameterAssignment_7_2_1() { return cOwnedParameterAssignment_7_2_1; }

		//ParameterCS
		public RuleCall getOwnedParameterParameterCSParserRuleCall_7_2_1_0() { return cOwnedParameterParameterCSParserRuleCall_7_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }

		//":"
		public Keyword getColonKeyword_9() { return cColonKeyword_9; }

		//ownedType=TypedRefCS
		public Assignment getOwnedTypeAssignment_10() { return cOwnedTypeAssignment_10; }

		//TypedRefCS
		public RuleCall getOwnedTypeTypedRefCSParserRuleCall_10_0() { return cOwnedTypeTypedRefCSParserRuleCall_10_0; }

		//("=>" implementation=[types::JvmType|SINGLE_QUOTED_STRING])?
		public Group getGroup_11() { return cGroup_11; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_11_0() { return cEqualsSignGreaterThanSignKeyword_11_0; }

		//implementation=[types::JvmType|SINGLE_QUOTED_STRING]
		public Assignment getImplementationAssignment_11_1() { return cImplementationAssignment_11_1; }

		//[types::JvmType|SINGLE_QUOTED_STRING]
		public CrossReference getImplementationJvmTypeCrossReference_11_1_0() { return cImplementationJvmTypeCrossReference_11_1_0; }

		//SINGLE_QUOTED_STRING
		public RuleCall getImplementationJvmTypeSINGLE_QUOTED_STRINGTerminalRuleCall_11_1_0_1() { return cImplementationJvmTypeSINGLE_QUOTED_STRINGTerminalRuleCall_11_1_0_1; }

		//"{" (ownedAnnotation+=AnnotationElementCS | ownedConstraint+=PostCS | ownedConstraint+=PreCS)* "}" | ";"
		public Alternatives getAlternatives_12() { return cAlternatives_12; }

		//"{" (ownedAnnotation+=AnnotationElementCS | ownedConstraint+=PostCS | ownedConstraint+=PreCS)* "}"
		public Group getGroup_12_0() { return cGroup_12_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_12_0_0() { return cLeftCurlyBracketKeyword_12_0_0; }

		//(ownedAnnotation+=AnnotationElementCS | ownedConstraint+=PostCS | ownedConstraint+=PreCS)*
		public Alternatives getAlternatives_12_0_1() { return cAlternatives_12_0_1; }

		//ownedAnnotation+=AnnotationElementCS
		public Assignment getOwnedAnnotationAssignment_12_0_1_0() { return cOwnedAnnotationAssignment_12_0_1_0; }

		//AnnotationElementCS
		public RuleCall getOwnedAnnotationAnnotationElementCSParserRuleCall_12_0_1_0_0() { return cOwnedAnnotationAnnotationElementCSParserRuleCall_12_0_1_0_0; }

		//ownedConstraint+=PostCS
		public Assignment getOwnedConstraintAssignment_12_0_1_1() { return cOwnedConstraintAssignment_12_0_1_1; }

		//PostCS
		public RuleCall getOwnedConstraintPostCSParserRuleCall_12_0_1_1_0() { return cOwnedConstraintPostCSParserRuleCall_12_0_1_1_0; }

		//ownedConstraint+=PreCS
		public Assignment getOwnedConstraintAssignment_12_0_1_2() { return cOwnedConstraintAssignment_12_0_1_2; }

		//PreCS
		public RuleCall getOwnedConstraintPreCSParserRuleCall_12_0_1_2_0() { return cOwnedConstraintPreCSParserRuleCall_12_0_1_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_12_0_2() { return cRightCurlyBracketKeyword_12_0_2; }

		//";"
		public Keyword getSemicolonKeyword_12_1() { return cSemicolonKeyword_12_1; }
	}

	public class IteratorCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IteratorCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIdentifierParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedTypeTypedRefCSParserRuleCall_2_0 = (RuleCall)cOwnedTypeAssignment_2.eContents().get(0);
		
		//IteratorCS returns base::ParameterCS:
		//	name=Identifier ":" ownedType=TypedRefCS;
		public ParserRule getRule() { return rule; }

		//name=Identifier ":" ownedType=TypedRefCS
		public Group getGroup() { return cGroup; }

		//name=Identifier
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_0_0() { return cNameIdentifierParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//ownedType=TypedRefCS
		public Assignment getOwnedTypeAssignment_2() { return cOwnedTypeAssignment_2; }

		//TypedRefCS
		public RuleCall getOwnedTypeTypedRefCSParserRuleCall_2_0() { return cOwnedTypeTypedRefCSParserRuleCall_2_0; }
	}

	public class LambdaTypeCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LambdaTypeCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameLambdaKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cOwnedContextTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedContextTypeTypedRefCSParserRuleCall_1_0 = (RuleCall)cOwnedContextTypeAssignment_1.eContents().get(0);
		private final Assignment cOwnedTemplateSignatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedTemplateSignatureTemplateSignatureCSParserRuleCall_2_0 = (RuleCall)cOwnedTemplateSignatureAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cOwnedParameterTypeAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cOwnedParameterTypeTypedRefCSParserRuleCall_4_0_0 = (RuleCall)cOwnedParameterTypeAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cOwnedParameterTypeAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cOwnedParameterTypeTypedRefCSParserRuleCall_4_1_1_0 = (RuleCall)cOwnedParameterTypeAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cOwnedResultTypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cOwnedResultTypeTypedRefCSParserRuleCall_7_0 = (RuleCall)cOwnedResultTypeAssignment_7.eContents().get(0);
		
		//LambdaTypeCS returns base::LambdaTypeCS:
		//	name="Lambda" ownedContextType=TypedRefCS ownedTemplateSignature=TemplateSignatureCS? "("
		//	(ownedParameterType+=TypedRefCS ("," ownedParameterType+=TypedRefCS)*)? ")" ":" ownedResultType=TypedRefCS;
		public ParserRule getRule() { return rule; }

		//name="Lambda" ownedContextType=TypedRefCS ownedTemplateSignature=TemplateSignatureCS? "("
		//(ownedParameterType+=TypedRefCS ("," ownedParameterType+=TypedRefCS)*)? ")" ":" ownedResultType=TypedRefCS
		public Group getGroup() { return cGroup; }

		//name="Lambda"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"Lambda"
		public Keyword getNameLambdaKeyword_0_0() { return cNameLambdaKeyword_0_0; }

		//ownedContextType=TypedRefCS
		public Assignment getOwnedContextTypeAssignment_1() { return cOwnedContextTypeAssignment_1; }

		//TypedRefCS
		public RuleCall getOwnedContextTypeTypedRefCSParserRuleCall_1_0() { return cOwnedContextTypeTypedRefCSParserRuleCall_1_0; }

		//ownedTemplateSignature=TemplateSignatureCS?
		public Assignment getOwnedTemplateSignatureAssignment_2() { return cOwnedTemplateSignatureAssignment_2; }

		//TemplateSignatureCS
		public RuleCall getOwnedTemplateSignatureTemplateSignatureCSParserRuleCall_2_0() { return cOwnedTemplateSignatureTemplateSignatureCSParserRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(ownedParameterType+=TypedRefCS ("," ownedParameterType+=TypedRefCS)*)?
		public Group getGroup_4() { return cGroup_4; }

		//ownedParameterType+=TypedRefCS
		public Assignment getOwnedParameterTypeAssignment_4_0() { return cOwnedParameterTypeAssignment_4_0; }

		//TypedRefCS
		public RuleCall getOwnedParameterTypeTypedRefCSParserRuleCall_4_0_0() { return cOwnedParameterTypeTypedRefCSParserRuleCall_4_0_0; }

		//("," ownedParameterType+=TypedRefCS)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//ownedParameterType+=TypedRefCS
		public Assignment getOwnedParameterTypeAssignment_4_1_1() { return cOwnedParameterTypeAssignment_4_1_1; }

		//TypedRefCS
		public RuleCall getOwnedParameterTypeTypedRefCSParserRuleCall_4_1_1_0() { return cOwnedParameterTypeTypedRefCSParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//":"
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }

		//ownedResultType=TypedRefCS
		public Assignment getOwnedResultTypeAssignment_7() { return cOwnedResultTypeAssignment_7; }

		//TypedRefCS
		public RuleCall getOwnedResultTypeTypedRefCSParserRuleCall_7_0() { return cOwnedResultTypeTypedRefCSParserRuleCall_7_0; }
	}

	public class LibraryCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LibraryCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPackageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPackagePackageCrossReference_1_0 = (CrossReference)cPackageAssignment_1.eContents().get(0);
		private final RuleCall cPackagePackageSINGLE_QUOTED_STRINGTerminalRuleCall_1_0_1 = (RuleCall)cPackagePackageCrossReference_1_0.eContents().get(1);
		
		//LibraryCS returns base::LibraryCS:
		//	"import" package=[pivot::Package|SINGLE_QUOTED_STRING];
		public ParserRule getRule() { return rule; }

		//"import" package=[pivot::Package|SINGLE_QUOTED_STRING]
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//package=[pivot::Package|SINGLE_QUOTED_STRING]
		public Assignment getPackageAssignment_1() { return cPackageAssignment_1; }

		//[pivot::Package|SINGLE_QUOTED_STRING]
		public CrossReference getPackagePackageCrossReference_1_0() { return cPackagePackageCrossReference_1_0; }

		//SINGLE_QUOTED_STRING
		public RuleCall getPackagePackageSINGLE_QUOTED_STRINGTerminalRuleCall_1_0_1() { return cPackagePackageSINGLE_QUOTED_STRINGTerminalRuleCall_1_0_1; }
	}

	public class OperationCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperationCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLibIterationCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLibOperationCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OperationCS returns base::OperationCS:
		//	LibIterationCS | LibOperationCS;
		public ParserRule getRule() { return rule; }

		//LibIterationCS | LibOperationCS
		public Alternatives getAlternatives() { return cAlternatives; }

		//LibIterationCS
		public RuleCall getLibIterationCSParserRuleCall_0() { return cLibIterationCSParserRuleCall_0; }

		//LibOperationCS
		public RuleCall getLibOperationCSParserRuleCall_1() { return cLibOperationCSParserRuleCall_1; }
	}

	public class LibOperationCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LibOperationCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStaticAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cStaticStaticKeyword_0_0 = (Keyword)cStaticAssignment_0.eContents().get(0);
		private final Keyword cOperationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cOwnedTemplateSignatureAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnedTemplateSignatureTemplateSignatureCSParserRuleCall_3_0 = (RuleCall)cOwnedTemplateSignatureAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cOwnedParameterAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cOwnedParameterParameterCSParserRuleCall_5_0_0 = (RuleCall)cOwnedParameterAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cOwnedParameterAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cOwnedParameterParameterCSParserRuleCall_5_1_1_0 = (RuleCall)cOwnedParameterAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cOwnedTypeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cOwnedTypeTypedRefCSParserRuleCall_8_0 = (RuleCall)cOwnedTypeAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cPrecedenceKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cEqualsSignKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cPrecedenceAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final CrossReference cPrecedencePrecedenceCrossReference_9_2_0 = (CrossReference)cPrecedenceAssignment_9_2.eContents().get(0);
		private final RuleCall cPrecedencePrecedenceNameParserRuleCall_9_2_0_1 = (RuleCall)cPrecedencePrecedenceCrossReference_9_2_0.eContents().get(1);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cEqualsSignGreaterThanSignKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cImplementationAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final CrossReference cImplementationJvmTypeCrossReference_10_1_0 = (CrossReference)cImplementationAssignment_10_1.eContents().get(0);
		private final RuleCall cImplementationJvmTypeSINGLE_QUOTED_STRINGTerminalRuleCall_10_1_0_1 = (RuleCall)cImplementationJvmTypeCrossReference_10_1_0.eContents().get(1);
		private final Alternatives cAlternatives_11 = (Alternatives)cGroup.eContents().get(11);
		private final Group cGroup_11_0 = (Group)cAlternatives_11.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_11_0_0 = (Keyword)cGroup_11_0.eContents().get(0);
		private final Alternatives cAlternatives_11_0_1 = (Alternatives)cGroup_11_0.eContents().get(1);
		private final Assignment cOwnedAnnotationAssignment_11_0_1_0 = (Assignment)cAlternatives_11_0_1.eContents().get(0);
		private final RuleCall cOwnedAnnotationAnnotationElementCSParserRuleCall_11_0_1_0_0 = (RuleCall)cOwnedAnnotationAssignment_11_0_1_0.eContents().get(0);
		private final Assignment cOwnedConstraintAssignment_11_0_1_1 = (Assignment)cAlternatives_11_0_1.eContents().get(1);
		private final RuleCall cOwnedConstraintPostCSParserRuleCall_11_0_1_1_0 = (RuleCall)cOwnedConstraintAssignment_11_0_1_1.eContents().get(0);
		private final Assignment cOwnedConstraintAssignment_11_0_1_2 = (Assignment)cAlternatives_11_0_1.eContents().get(2);
		private final RuleCall cOwnedConstraintPreCSParserRuleCall_11_0_1_2_0 = (RuleCall)cOwnedConstraintAssignment_11_0_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11_0_2 = (Keyword)cGroup_11_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_11_1 = (Keyword)cAlternatives_11.eContents().get(1);
		
		//LibOperationCS:
		//	static?="static"? "operation" name=Name ownedTemplateSignature=TemplateSignatureCS? "(" (ownedParameter+=ParameterCS
		//	("," ownedParameter+=ParameterCS)*)? ")" ":" ownedType=TypedRefCS ("precedence" "="
		//	precedence=[pivot::Precedence|Name])? ("=>" implementation=[types::JvmType|SINGLE_QUOTED_STRING])? ("{"
		//	(ownedAnnotation+=AnnotationElementCS | ownedConstraint+=PostCS | ownedConstraint+=PreCS)* "}" | ";");
		public ParserRule getRule() { return rule; }

		//static?="static"? "operation" name=Name ownedTemplateSignature=TemplateSignatureCS? "(" (ownedParameter+=ParameterCS
		//("," ownedParameter+=ParameterCS)*)? ")" ":" ownedType=TypedRefCS ("precedence" "="
		//precedence=[pivot::Precedence|Name])? ("=>" implementation=[types::JvmType|SINGLE_QUOTED_STRING])? ("{"
		//(ownedAnnotation+=AnnotationElementCS | ownedConstraint+=PostCS | ownedConstraint+=PreCS)* "}" | ";")
		public Group getGroup() { return cGroup; }

		//static?="static"?
		public Assignment getStaticAssignment_0() { return cStaticAssignment_0; }

		//"static"
		public Keyword getStaticStaticKeyword_0_0() { return cStaticStaticKeyword_0_0; }

		//"operation"
		public Keyword getOperationKeyword_1() { return cOperationKeyword_1; }

		//name=Name
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//Name
		public RuleCall getNameNameParserRuleCall_2_0() { return cNameNameParserRuleCall_2_0; }

		//ownedTemplateSignature=TemplateSignatureCS?
		public Assignment getOwnedTemplateSignatureAssignment_3() { return cOwnedTemplateSignatureAssignment_3; }

		//TemplateSignatureCS
		public RuleCall getOwnedTemplateSignatureTemplateSignatureCSParserRuleCall_3_0() { return cOwnedTemplateSignatureTemplateSignatureCSParserRuleCall_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//(ownedParameter+=ParameterCS ("," ownedParameter+=ParameterCS)*)?
		public Group getGroup_5() { return cGroup_5; }

		//ownedParameter+=ParameterCS
		public Assignment getOwnedParameterAssignment_5_0() { return cOwnedParameterAssignment_5_0; }

		//ParameterCS
		public RuleCall getOwnedParameterParameterCSParserRuleCall_5_0_0() { return cOwnedParameterParameterCSParserRuleCall_5_0_0; }

		//("," ownedParameter+=ParameterCS)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//ownedParameter+=ParameterCS
		public Assignment getOwnedParameterAssignment_5_1_1() { return cOwnedParameterAssignment_5_1_1; }

		//ParameterCS
		public RuleCall getOwnedParameterParameterCSParserRuleCall_5_1_1_0() { return cOwnedParameterParameterCSParserRuleCall_5_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//":"
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }

		//ownedType=TypedRefCS
		public Assignment getOwnedTypeAssignment_8() { return cOwnedTypeAssignment_8; }

		//TypedRefCS
		public RuleCall getOwnedTypeTypedRefCSParserRuleCall_8_0() { return cOwnedTypeTypedRefCSParserRuleCall_8_0; }

		//("precedence" "=" precedence=[pivot::Precedence|Name])?
		public Group getGroup_9() { return cGroup_9; }

		//"precedence"
		public Keyword getPrecedenceKeyword_9_0() { return cPrecedenceKeyword_9_0; }

		//"="
		public Keyword getEqualsSignKeyword_9_1() { return cEqualsSignKeyword_9_1; }

		//precedence=[pivot::Precedence|Name]
		public Assignment getPrecedenceAssignment_9_2() { return cPrecedenceAssignment_9_2; }

		//[pivot::Precedence|Name]
		public CrossReference getPrecedencePrecedenceCrossReference_9_2_0() { return cPrecedencePrecedenceCrossReference_9_2_0; }

		//Name
		public RuleCall getPrecedencePrecedenceNameParserRuleCall_9_2_0_1() { return cPrecedencePrecedenceNameParserRuleCall_9_2_0_1; }

		//("=>" implementation=[types::JvmType|SINGLE_QUOTED_STRING])?
		public Group getGroup_10() { return cGroup_10; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_10_0() { return cEqualsSignGreaterThanSignKeyword_10_0; }

		//implementation=[types::JvmType|SINGLE_QUOTED_STRING]
		public Assignment getImplementationAssignment_10_1() { return cImplementationAssignment_10_1; }

		//[types::JvmType|SINGLE_QUOTED_STRING]
		public CrossReference getImplementationJvmTypeCrossReference_10_1_0() { return cImplementationJvmTypeCrossReference_10_1_0; }

		//SINGLE_QUOTED_STRING
		public RuleCall getImplementationJvmTypeSINGLE_QUOTED_STRINGTerminalRuleCall_10_1_0_1() { return cImplementationJvmTypeSINGLE_QUOTED_STRINGTerminalRuleCall_10_1_0_1; }

		//"{" (ownedAnnotation+=AnnotationElementCS | ownedConstraint+=PostCS | ownedConstraint+=PreCS)* "}" | ";"
		public Alternatives getAlternatives_11() { return cAlternatives_11; }

		//"{" (ownedAnnotation+=AnnotationElementCS | ownedConstraint+=PostCS | ownedConstraint+=PreCS)* "}"
		public Group getGroup_11_0() { return cGroup_11_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_11_0_0() { return cLeftCurlyBracketKeyword_11_0_0; }

		//(ownedAnnotation+=AnnotationElementCS | ownedConstraint+=PostCS | ownedConstraint+=PreCS)*
		public Alternatives getAlternatives_11_0_1() { return cAlternatives_11_0_1; }

		//ownedAnnotation+=AnnotationElementCS
		public Assignment getOwnedAnnotationAssignment_11_0_1_0() { return cOwnedAnnotationAssignment_11_0_1_0; }

		//AnnotationElementCS
		public RuleCall getOwnedAnnotationAnnotationElementCSParserRuleCall_11_0_1_0_0() { return cOwnedAnnotationAnnotationElementCSParserRuleCall_11_0_1_0_0; }

		//ownedConstraint+=PostCS
		public Assignment getOwnedConstraintAssignment_11_0_1_1() { return cOwnedConstraintAssignment_11_0_1_1; }

		//PostCS
		public RuleCall getOwnedConstraintPostCSParserRuleCall_11_0_1_1_0() { return cOwnedConstraintPostCSParserRuleCall_11_0_1_1_0; }

		//ownedConstraint+=PreCS
		public Assignment getOwnedConstraintAssignment_11_0_1_2() { return cOwnedConstraintAssignment_11_0_1_2; }

		//PreCS
		public RuleCall getOwnedConstraintPreCSParserRuleCall_11_0_1_2_0() { return cOwnedConstraintPreCSParserRuleCall_11_0_1_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_11_0_2() { return cRightCurlyBracketKeyword_11_0_2; }

		//";"
		public Keyword getSemicolonKeyword_11_1() { return cSemicolonKeyword_11_1; }
	}

	public class PackageCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNsPrefixAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNsPrefixIdentifierParserRuleCall_2_1_0 = (RuleCall)cNsPrefixAssignment_2_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cNsURIAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cNsURISINGLE_QUOTED_STRINGTerminalRuleCall_2_3_0 = (RuleCall)cNsURIAssignment_2_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cOwnedNestedPackageAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cOwnedNestedPackagePackageCSParserRuleCall_4_0_0 = (RuleCall)cOwnedNestedPackageAssignment_4_0.eContents().get(0);
		private final Assignment cOwnedTypeAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cOwnedTypeClassifierCSParserRuleCall_4_1_0 = (RuleCall)cOwnedTypeAssignment_4_1.eContents().get(0);
		private final Assignment cOwnedAnnotationAssignment_4_2 = (Assignment)cAlternatives_4.eContents().get(2);
		private final RuleCall cOwnedAnnotationAnnotationElementCSParserRuleCall_4_2_0 = (RuleCall)cOwnedAnnotationAssignment_4_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PackageCS returns base::PackageCS:
		//	"package" name=Name (":" nsPrefix=Identifier "=" nsURI=SINGLE_QUOTED_STRING)? "{" (ownedNestedPackage+=PackageCS |
		//	ownedType+=ClassifierCS | ownedAnnotation+=AnnotationElementCS)* "}";
		public ParserRule getRule() { return rule; }

		//"package" name=Name (":" nsPrefix=Identifier "=" nsURI=SINGLE_QUOTED_STRING)? "{" (ownedNestedPackage+=PackageCS |
		//ownedType+=ClassifierCS | ownedAnnotation+=AnnotationElementCS)* "}"
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }

		//(":" nsPrefix=Identifier "=" nsURI=SINGLE_QUOTED_STRING)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//nsPrefix=Identifier
		public Assignment getNsPrefixAssignment_2_1() { return cNsPrefixAssignment_2_1; }

		//Identifier
		public RuleCall getNsPrefixIdentifierParserRuleCall_2_1_0() { return cNsPrefixIdentifierParserRuleCall_2_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_2() { return cEqualsSignKeyword_2_2; }

		//nsURI=SINGLE_QUOTED_STRING
		public Assignment getNsURIAssignment_2_3() { return cNsURIAssignment_2_3; }

		//SINGLE_QUOTED_STRING
		public RuleCall getNsURISINGLE_QUOTED_STRINGTerminalRuleCall_2_3_0() { return cNsURISINGLE_QUOTED_STRINGTerminalRuleCall_2_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//(ownedNestedPackage+=PackageCS | ownedType+=ClassifierCS | ownedAnnotation+=AnnotationElementCS)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//ownedNestedPackage+=PackageCS
		public Assignment getOwnedNestedPackageAssignment_4_0() { return cOwnedNestedPackageAssignment_4_0; }

		//PackageCS
		public RuleCall getOwnedNestedPackagePackageCSParserRuleCall_4_0_0() { return cOwnedNestedPackagePackageCSParserRuleCall_4_0_0; }

		//ownedType+=ClassifierCS
		public Assignment getOwnedTypeAssignment_4_1() { return cOwnedTypeAssignment_4_1; }

		//ClassifierCS
		public RuleCall getOwnedTypeClassifierCSParserRuleCall_4_1_0() { return cOwnedTypeClassifierCSParserRuleCall_4_1_0; }

		//ownedAnnotation+=AnnotationElementCS
		public Assignment getOwnedAnnotationAssignment_4_2() { return cOwnedAnnotationAssignment_4_2; }

		//AnnotationElementCS
		public RuleCall getOwnedAnnotationAnnotationElementCSParserRuleCall_4_2_0() { return cOwnedAnnotationAnnotationElementCSParserRuleCall_4_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ParameterCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIdentifierParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedTypeTypedRefCSParserRuleCall_2_0 = (RuleCall)cOwnedTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Group cGroup_3_1_0 = (Group)cAlternatives_3_1.eContents().get(0);
		private final Assignment cLowerAssignment_3_1_0_0 = (Assignment)cGroup_3_1_0.eContents().get(0);
		private final RuleCall cLowerLOWERParserRuleCall_3_1_0_0_0 = (RuleCall)cLowerAssignment_3_1_0_0.eContents().get(0);
		private final Group cGroup_3_1_0_1 = (Group)cGroup_3_1_0.eContents().get(1);
		private final Keyword cFullStopFullStopKeyword_3_1_0_1_0 = (Keyword)cGroup_3_1_0_1.eContents().get(0);
		private final Assignment cUpperAssignment_3_1_0_1_1 = (Assignment)cGroup_3_1_0_1.eContents().get(1);
		private final RuleCall cUpperUPPERParserRuleCall_3_1_0_1_1_0 = (RuleCall)cUpperAssignment_3_1_0_1_1.eContents().get(0);
		private final Assignment cMultiplicityAssignment_3_1_1 = (Assignment)cAlternatives_3_1.eContents().get(1);
		private final Alternatives cMultiplicityAlternatives_3_1_1_0 = (Alternatives)cMultiplicityAssignment_3_1_1.eContents().get(0);
		private final Keyword cMultiplicityAsteriskKeyword_3_1_1_0_0 = (Keyword)cMultiplicityAlternatives_3_1_1_0.eContents().get(0);
		private final Keyword cMultiplicityPlusSignKeyword_3_1_1_0_1 = (Keyword)cMultiplicityAlternatives_3_1_1_0.eContents().get(1);
		private final Keyword cMultiplicityQuestionMarkKeyword_3_1_1_0_2 = (Keyword)cMultiplicityAlternatives_3_1_1_0.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//ParameterCS returns base::ParameterCS:
		//	name=Identifier ":" ownedType=TypedRefCS ("[" (lower=LOWER (".." upper=UPPER)? | multiplicity=("*" | "+" | "?"))
		//	"]")?;
		public ParserRule getRule() { return rule; }

		//name=Identifier ":" ownedType=TypedRefCS ("[" (lower=LOWER (".." upper=UPPER)? | multiplicity=("*" | "+" | "?")) "]")?
		public Group getGroup() { return cGroup; }

		//name=Identifier
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_0_0() { return cNameIdentifierParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//ownedType=TypedRefCS
		public Assignment getOwnedTypeAssignment_2() { return cOwnedTypeAssignment_2; }

		//TypedRefCS
		public RuleCall getOwnedTypeTypedRefCSParserRuleCall_2_0() { return cOwnedTypeTypedRefCSParserRuleCall_2_0; }

		//("[" (lower=LOWER (".." upper=UPPER)? | multiplicity=("*" | "+" | "?")) "]")?
		public Group getGroup_3() { return cGroup_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }

		//lower=LOWER (".." upper=UPPER)? | multiplicity=("*" | "+" | "?")
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }

		//lower=LOWER (".." upper=UPPER)?
		public Group getGroup_3_1_0() { return cGroup_3_1_0; }

		//lower=LOWER
		public Assignment getLowerAssignment_3_1_0_0() { return cLowerAssignment_3_1_0_0; }

		//LOWER
		public RuleCall getLowerLOWERParserRuleCall_3_1_0_0_0() { return cLowerLOWERParserRuleCall_3_1_0_0_0; }

		//(".." upper=UPPER)?
		public Group getGroup_3_1_0_1() { return cGroup_3_1_0_1; }

		//".."
		public Keyword getFullStopFullStopKeyword_3_1_0_1_0() { return cFullStopFullStopKeyword_3_1_0_1_0; }

		//upper=UPPER
		public Assignment getUpperAssignment_3_1_0_1_1() { return cUpperAssignment_3_1_0_1_1; }

		//UPPER
		public RuleCall getUpperUPPERParserRuleCall_3_1_0_1_1_0() { return cUpperUPPERParserRuleCall_3_1_0_1_1_0; }

		//multiplicity=("*" | "+" | "?")
		public Assignment getMultiplicityAssignment_3_1_1() { return cMultiplicityAssignment_3_1_1; }

		//"*" | "+" | "?"
		public Alternatives getMultiplicityAlternatives_3_1_1_0() { return cMultiplicityAlternatives_3_1_1_0; }

		//"*"
		public Keyword getMultiplicityAsteriskKeyword_3_1_1_0_0() { return cMultiplicityAsteriskKeyword_3_1_1_0_0; }

		//"+"
		public Keyword getMultiplicityPlusSignKeyword_3_1_1_0_1() { return cMultiplicityPlusSignKeyword_3_1_1_0_1; }

		//"?"
		public Keyword getMultiplicityQuestionMarkKeyword_3_1_1_0_2() { return cMultiplicityQuestionMarkKeyword_3_1_1_0_2; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_2() { return cRightSquareBracketKeyword_3_2; }
	}

	public class LibPropertyCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LibPropertyCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStaticAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cStaticStaticKeyword_0_0 = (Keyword)cStaticAssignment_0.eContents().get(0);
		private final Keyword cPropertyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOwnedTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOwnedTypeTypedRefCSParserRuleCall_4_0 = (RuleCall)cOwnedTypeAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cEqualsSignGreaterThanSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cImplementationAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cImplementationJvmTypeCrossReference_5_1_0 = (CrossReference)cImplementationAssignment_5_1.eContents().get(0);
		private final RuleCall cImplementationJvmTypeSINGLE_QUOTED_STRINGTerminalRuleCall_5_1_0_1 = (RuleCall)cImplementationJvmTypeCrossReference_5_1_0.eContents().get(1);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cAlternatives_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_0_0 = (Keyword)cGroup_6_0.eContents().get(0);
		private final Assignment cOwnedAnnotationAssignment_6_0_1 = (Assignment)cGroup_6_0.eContents().get(1);
		private final RuleCall cOwnedAnnotationAnnotationElementCSParserRuleCall_6_0_1_0 = (RuleCall)cOwnedAnnotationAssignment_6_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_0_2 = (Keyword)cGroup_6_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_6_1 = (Keyword)cAlternatives_6.eContents().get(1);
		
		//LibPropertyCS:
		//	static?="static"? "property" name=Name ":" ownedType=TypedRefCS ("=>"
		//	implementation=[types::JvmType|SINGLE_QUOTED_STRING])? ("{" ownedAnnotation+=AnnotationElementCS* "}" | ";");
		public ParserRule getRule() { return rule; }

		//static?="static"? "property" name=Name ":" ownedType=TypedRefCS ("=>"
		//implementation=[types::JvmType|SINGLE_QUOTED_STRING])? ("{" ownedAnnotation+=AnnotationElementCS* "}" | ";")
		public Group getGroup() { return cGroup; }

		//static?="static"?
		public Assignment getStaticAssignment_0() { return cStaticAssignment_0; }

		//"static"
		public Keyword getStaticStaticKeyword_0_0() { return cStaticStaticKeyword_0_0; }

		//"property"
		public Keyword getPropertyKeyword_1() { return cPropertyKeyword_1; }

		//name=Name
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//Name
		public RuleCall getNameNameParserRuleCall_2_0() { return cNameNameParserRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//ownedType=TypedRefCS
		public Assignment getOwnedTypeAssignment_4() { return cOwnedTypeAssignment_4; }

		//TypedRefCS
		public RuleCall getOwnedTypeTypedRefCSParserRuleCall_4_0() { return cOwnedTypeTypedRefCSParserRuleCall_4_0; }

		//("=>" implementation=[types::JvmType|SINGLE_QUOTED_STRING])?
		public Group getGroup_5() { return cGroup_5; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_5_0() { return cEqualsSignGreaterThanSignKeyword_5_0; }

		//implementation=[types::JvmType|SINGLE_QUOTED_STRING]
		public Assignment getImplementationAssignment_5_1() { return cImplementationAssignment_5_1; }

		//[types::JvmType|SINGLE_QUOTED_STRING]
		public CrossReference getImplementationJvmTypeCrossReference_5_1_0() { return cImplementationJvmTypeCrossReference_5_1_0; }

		//SINGLE_QUOTED_STRING
		public RuleCall getImplementationJvmTypeSINGLE_QUOTED_STRINGTerminalRuleCall_5_1_0_1() { return cImplementationJvmTypeSINGLE_QUOTED_STRINGTerminalRuleCall_5_1_0_1; }

		//"{" ownedAnnotation+=AnnotationElementCS* "}" | ";"
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//"{" ownedAnnotation+=AnnotationElementCS* "}"
		public Group getGroup_6_0() { return cGroup_6_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6_0_0() { return cLeftCurlyBracketKeyword_6_0_0; }

		//ownedAnnotation+=AnnotationElementCS*
		public Assignment getOwnedAnnotationAssignment_6_0_1() { return cOwnedAnnotationAssignment_6_0_1; }

		//AnnotationElementCS
		public RuleCall getOwnedAnnotationAnnotationElementCSParserRuleCall_6_0_1_0() { return cOwnedAnnotationAnnotationElementCSParserRuleCall_6_0_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6_0_2() { return cRightCurlyBracketKeyword_6_0_2; }

		//";"
		public Keyword getSemicolonKeyword_6_1() { return cSemicolonKeyword_6_1; }
	}

	public class PostCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PostCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStereotypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cStereotypePostKeyword_0_0 = (Keyword)cStereotypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameUnrestrictedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSpecificationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSpecificationSpecificationCSParserRuleCall_3_0 = (RuleCall)cSpecificationAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PostCS returns LibConstraintCS:
		//	stereotype="post" name=UnrestrictedName? ":" specification=SpecificationCS ";";
		public ParserRule getRule() { return rule; }

		//stereotype="post" name=UnrestrictedName? ":" specification=SpecificationCS ";"
		public Group getGroup() { return cGroup; }

		//stereotype="post"
		public Assignment getStereotypeAssignment_0() { return cStereotypeAssignment_0; }

		//"post"
		public Keyword getStereotypePostKeyword_0_0() { return cStereotypePostKeyword_0_0; }

		//name=UnrestrictedName?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//UnrestrictedName
		public RuleCall getNameUnrestrictedNameParserRuleCall_1_0() { return cNameUnrestrictedNameParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//specification=SpecificationCS
		public Assignment getSpecificationAssignment_3() { return cSpecificationAssignment_3; }

		//SpecificationCS
		public RuleCall getSpecificationSpecificationCSParserRuleCall_3_0() { return cSpecificationSpecificationCSParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class PreCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PreCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStereotypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cStereotypePreKeyword_0_0 = (Keyword)cStereotypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameUnrestrictedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSpecificationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSpecificationSpecificationCSParserRuleCall_3_0 = (RuleCall)cSpecificationAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PreCS returns LibConstraintCS:
		//	stereotype="pre" name=UnrestrictedName? ":" specification=SpecificationCS ";";
		public ParserRule getRule() { return rule; }

		//stereotype="pre" name=UnrestrictedName? ":" specification=SpecificationCS ";"
		public Group getGroup() { return cGroup; }

		//stereotype="pre"
		public Assignment getStereotypeAssignment_0() { return cStereotypeAssignment_0; }

		//"pre"
		public Keyword getStereotypePreKeyword_0_0() { return cStereotypePreKeyword_0_0; }

		//name=UnrestrictedName?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//UnrestrictedName
		public RuleCall getNameUnrestrictedNameParserRuleCall_1_0() { return cNameUnrestrictedNameParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//specification=SpecificationCS
		public Assignment getSpecificationAssignment_3() { return cSpecificationAssignment_3; }

		//SpecificationCS
		public RuleCall getSpecificationSpecificationCSParserRuleCall_3_0() { return cSpecificationSpecificationCSParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class PrecedenceCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrecedenceCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cLeftKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Assignment cRightAssociativeAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cRightAssociativeRightKeyword_0_1_0 = (Keyword)cRightAssociativeAssignment_0_1.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//PrecedenceCS:
		//	("left" | rightAssociative?="right") ":" name=Name;
		public ParserRule getRule() { return rule; }

		//("left" | rightAssociative?="right") ":" name=Name
		public Group getGroup() { return cGroup; }

		//"left" | rightAssociative?="right"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"left"
		public Keyword getLeftKeyword_0_0() { return cLeftKeyword_0_0; }

		//rightAssociative?="right"
		public Assignment getRightAssociativeAssignment_0_1() { return cRightAssociativeAssignment_0_1; }

		//"right"
		public Keyword getRightAssociativeRightKeyword_0_1_0() { return cRightAssociativeRightKeyword_0_1_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//name=Name
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//Name
		public RuleCall getNameNameParserRuleCall_2_0() { return cNameNameParserRuleCall_2_0; }
	}

	public class SpecificationCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SpecificationCS");
		private final Assignment cOwnedExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedExpressionExpCSParserRuleCall_0 = (RuleCall)cOwnedExpressionAssignment.eContents().get(0);
		
		//SpecificationCS returns essentialocl::ExpSpecificationCS:
		//	ownedExpression=ExpCS;
		public ParserRule getRule() { return rule; }

		//ownedExpression=ExpCS
		public Assignment getOwnedExpressionAssignment() { return cOwnedExpressionAssignment; }

		//ExpCS
		public RuleCall getOwnedExpressionExpCSParserRuleCall_0() { return cOwnedExpressionExpCSParserRuleCall_0; }
	}

	public class TemplateBindingCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TemplateBindingCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOwnedParameterSubstitutionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedParameterSubstitutionTemplateParameterSubstitutionCSParserRuleCall_1_0 = (RuleCall)cOwnedParameterSubstitutionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOwnedParameterSubstitutionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOwnedParameterSubstitutionTemplateParameterSubstitutionCSParserRuleCall_2_1_0 = (RuleCall)cOwnedParameterSubstitutionAssignment_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TemplateBindingCS returns base::TemplateBindingCS:
		//	"<" ownedParameterSubstitution+=TemplateParameterSubstitutionCS (","
		//	ownedParameterSubstitution+=TemplateParameterSubstitutionCS)* ">";
		public ParserRule getRule() { return rule; }

		//"<" ownedParameterSubstitution+=TemplateParameterSubstitutionCS (","
		//ownedParameterSubstitution+=TemplateParameterSubstitutionCS)* ">"
		public Group getGroup() { return cGroup; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//ownedParameterSubstitution+=TemplateParameterSubstitutionCS
		public Assignment getOwnedParameterSubstitutionAssignment_1() { return cOwnedParameterSubstitutionAssignment_1; }

		//TemplateParameterSubstitutionCS
		public RuleCall getOwnedParameterSubstitutionTemplateParameterSubstitutionCSParserRuleCall_1_0() { return cOwnedParameterSubstitutionTemplateParameterSubstitutionCSParserRuleCall_1_0; }

		//("," ownedParameterSubstitution+=TemplateParameterSubstitutionCS)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//ownedParameterSubstitution+=TemplateParameterSubstitutionCS
		public Assignment getOwnedParameterSubstitutionAssignment_2_1() { return cOwnedParameterSubstitutionAssignment_2_1; }

		//TemplateParameterSubstitutionCS
		public RuleCall getOwnedParameterSubstitutionTemplateParameterSubstitutionCSParserRuleCall_2_1_0() { return cOwnedParameterSubstitutionTemplateParameterSubstitutionCSParserRuleCall_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}

	public class TemplateParameterSubstitutionCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TemplateParameterSubstitutionCS");
		private final Assignment cOwnedActualParameterAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedActualParameterTypeRefCSParserRuleCall_0 = (RuleCall)cOwnedActualParameterAssignment.eContents().get(0);
		
		//TemplateParameterSubstitutionCS returns base::TemplateParameterSubstitutionCS:
		//	ownedActualParameter=TypeRefCS;
		public ParserRule getRule() { return rule; }

		//ownedActualParameter=TypeRefCS
		public Assignment getOwnedActualParameterAssignment() { return cOwnedActualParameterAssignment; }

		//TypeRefCS
		public RuleCall getOwnedActualParameterTypeRefCSParserRuleCall_0() { return cOwnedActualParameterTypeRefCSParserRuleCall_0; }
	}

	public class TemplateSignatureCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TemplateSignatureCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOwnedTemplateParameterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedTemplateParameterTypeParameterCSParserRuleCall_1_0 = (RuleCall)cOwnedTemplateParameterAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOwnedTemplateParameterAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOwnedTemplateParameterTypeParameterCSParserRuleCall_2_1_0 = (RuleCall)cOwnedTemplateParameterAssignment_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TemplateSignatureCS returns base::TemplateSignatureCS:
		//	"<" ownedTemplateParameter+=TypeParameterCS ("," ownedTemplateParameter+=TypeParameterCS)* ">";
		public ParserRule getRule() { return rule; }

		//"<" ownedTemplateParameter+=TypeParameterCS ("," ownedTemplateParameter+=TypeParameterCS)* ">"
		public Group getGroup() { return cGroup; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//ownedTemplateParameter+=TypeParameterCS
		public Assignment getOwnedTemplateParameterAssignment_1() { return cOwnedTemplateParameterAssignment_1; }

		//TypeParameterCS
		public RuleCall getOwnedTemplateParameterTypeParameterCSParserRuleCall_1_0() { return cOwnedTemplateParameterTypeParameterCSParserRuleCall_1_0; }

		//("," ownedTemplateParameter+=TypeParameterCS)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//ownedTemplateParameter+=TypeParameterCS
		public Assignment getOwnedTemplateParameterAssignment_2_1() { return cOwnedTemplateParameterAssignment_2_1; }

		//TypeParameterCS
		public RuleCall getOwnedTemplateParameterTypeParameterCSParserRuleCall_2_1_0() { return cOwnedTemplateParameterTypeParameterCSParserRuleCall_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}

	public class LibTupleCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LibTupleCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameTupleKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cOwnedPartsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cOwnedPartsLibTuplePartCSParserRuleCall_2_0_0 = (RuleCall)cOwnedPartsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cOwnedPartsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cOwnedPartsLibTuplePartCSParserRuleCall_2_1_1_0 = (RuleCall)cOwnedPartsAssignment_2_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LibTupleCS returns base::TupleTypeCS:
		//	name="Tuple" "<" (ownedParts+=LibTuplePartCS ("," ownedParts+=LibTuplePartCS)*)? ">";
		public ParserRule getRule() { return rule; }

		//name="Tuple" "<" (ownedParts+=LibTuplePartCS ("," ownedParts+=LibTuplePartCS)*)? ">"
		public Group getGroup() { return cGroup; }

		//name="Tuple"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"Tuple"
		public Keyword getNameTupleKeyword_0_0() { return cNameTupleKeyword_0_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }

		//(ownedParts+=LibTuplePartCS ("," ownedParts+=LibTuplePartCS)*)?
		public Group getGroup_2() { return cGroup_2; }

		//ownedParts+=LibTuplePartCS
		public Assignment getOwnedPartsAssignment_2_0() { return cOwnedPartsAssignment_2_0; }

		//LibTuplePartCS
		public RuleCall getOwnedPartsLibTuplePartCSParserRuleCall_2_0_0() { return cOwnedPartsLibTuplePartCSParserRuleCall_2_0_0; }

		//("," ownedParts+=LibTuplePartCS)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//ownedParts+=LibTuplePartCS
		public Assignment getOwnedPartsAssignment_2_1_1() { return cOwnedPartsAssignment_2_1_1; }

		//LibTuplePartCS
		public RuleCall getOwnedPartsLibTuplePartCSParserRuleCall_2_1_1_0() { return cOwnedPartsLibTuplePartCSParserRuleCall_2_1_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}

	public class LibTuplePartCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LibTuplePartCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIdentifierParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedTypeTypedRefCSParserRuleCall_2_0 = (RuleCall)cOwnedTypeAssignment_2.eContents().get(0);
		
		//LibTuplePartCS returns base::TuplePartCS:
		//	name=Identifier ":" ownedType=TypedRefCS;
		public ParserRule getRule() { return rule; }

		//name=Identifier ":" ownedType=TypedRefCS
		public Group getGroup() { return cGroup; }

		//name=Identifier
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_0_0() { return cNameIdentifierParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//ownedType=TypedRefCS
		public Assignment getOwnedTypeAssignment_2() { return cOwnedTypeAssignment_2; }

		//TypedRefCS
		public RuleCall getOwnedTypeTypedRefCSParserRuleCall_2_0() { return cOwnedTypeTypedRefCSParserRuleCall_2_0; }
	}

	public class TypeParameterCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeParameterCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIdentifierParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cExtendsKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cOwnedExtendsAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cOwnedExtendsTypedRefCSParserRuleCall_1_0_1_0 = (RuleCall)cOwnedExtendsAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final Keyword cAmpersandAmpersandKeyword_1_0_2_0 = (Keyword)cGroup_1_0_2.eContents().get(0);
		private final Assignment cOwnedExtendsAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cOwnedExtendsTypedRefCSParserRuleCall_1_0_2_1_0 = (RuleCall)cOwnedExtendsAssignment_1_0_2_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cSuperKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cOwnedSuperAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOwnedSuperTypedRefCSParserRuleCall_1_1_1_0 = (RuleCall)cOwnedSuperAssignment_1_1_1.eContents().get(0);
		
		//TypeParameterCS returns base::TypeParameterCS:
		//	name=Identifier ("extends" ownedExtends+=TypedRefCS ("&&" ownedExtends+=TypedRefCS)* | "super"
		//	ownedSuper=TypedRefCS)?;
		public ParserRule getRule() { return rule; }

		//name=Identifier ("extends" ownedExtends+=TypedRefCS ("&&" ownedExtends+=TypedRefCS)* | "super" ownedSuper=TypedRefCS)?
		public Group getGroup() { return cGroup; }

		//name=Identifier
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_0_0() { return cNameIdentifierParserRuleCall_0_0; }

		//("extends" ownedExtends+=TypedRefCS ("&&" ownedExtends+=TypedRefCS)* | "super" ownedSuper=TypedRefCS)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"extends" ownedExtends+=TypedRefCS ("&&" ownedExtends+=TypedRefCS)*
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"extends"
		public Keyword getExtendsKeyword_1_0_0() { return cExtendsKeyword_1_0_0; }

		//ownedExtends+=TypedRefCS
		public Assignment getOwnedExtendsAssignment_1_0_1() { return cOwnedExtendsAssignment_1_0_1; }

		//TypedRefCS
		public RuleCall getOwnedExtendsTypedRefCSParserRuleCall_1_0_1_0() { return cOwnedExtendsTypedRefCSParserRuleCall_1_0_1_0; }

		//("&&" ownedExtends+=TypedRefCS)*
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_0_2_0() { return cAmpersandAmpersandKeyword_1_0_2_0; }

		//ownedExtends+=TypedRefCS
		public Assignment getOwnedExtendsAssignment_1_0_2_1() { return cOwnedExtendsAssignment_1_0_2_1; }

		//TypedRefCS
		public RuleCall getOwnedExtendsTypedRefCSParserRuleCall_1_0_2_1_0() { return cOwnedExtendsTypedRefCSParserRuleCall_1_0_2_1_0; }

		//"super" ownedSuper=TypedRefCS
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"super"
		public Keyword getSuperKeyword_1_1_0() { return cSuperKeyword_1_1_0; }

		//ownedSuper=TypedRefCS
		public Assignment getOwnedSuperAssignment_1_1_1() { return cOwnedSuperAssignment_1_1_1; }

		//TypedRefCS
		public RuleCall getOwnedSuperTypedRefCSParserRuleCall_1_1_1_0() { return cOwnedSuperTypedRefCSParserRuleCall_1_1_1_0; }
	}

	public class TypeRefCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeRefCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypedRefCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWildcardTypeRefCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeRefCS returns base::TypeRefCS:
		//	TypedRefCS | WildcardTypeRefCS;
		public ParserRule getRule() { return rule; }

		//TypedRefCS | WildcardTypeRefCS
		public Alternatives getAlternatives() { return cAlternatives; }

		//TypedRefCS
		public RuleCall getTypedRefCSParserRuleCall_0() { return cTypedRefCSParserRuleCall_0; }

		//WildcardTypeRefCS
		public RuleCall getWildcardTypeRefCSParserRuleCall_1() { return cWildcardTypeRefCSParserRuleCall_1; }
	}

	public class TypedRefCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypedRefCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLibTupleCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypedTypeRefCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLambdaTypeCSParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TypedRefCS returns base::TypedRefCS:
		//	LibTupleCS | TypedTypeRefCS | LambdaTypeCS;
		public ParserRule getRule() { return rule; }

		//LibTupleCS | TypedTypeRefCS | LambdaTypeCS
		public Alternatives getAlternatives() { return cAlternatives; }

		//LibTupleCS
		public RuleCall getLibTupleCSParserRuleCall_0() { return cLibTupleCSParserRuleCall_0; }

		//TypedTypeRefCS
		public RuleCall getTypedTypeRefCSParserRuleCall_1() { return cTypedTypeRefCSParserRuleCall_1; }

		//LambdaTypeCS
		public RuleCall getLambdaTypeCSParserRuleCall_2() { return cLambdaTypeCSParserRuleCall_2; }
	}

	public class TypedTypeRefCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypedTypeRefCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNamespaceAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cNamespaceNamespaceCrossReference_0_0_0 = (CrossReference)cNamespaceAssignment_0_0.eContents().get(0);
		private final RuleCall cNamespaceNamespaceNameParserRuleCall_0_0_0_1 = (RuleCall)cNamespaceNamespaceCrossReference_0_0_0.eContents().get(1);
		private final Keyword cColonColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeTypeNameParserRuleCall_1_0_1 = (RuleCall)cTypeTypeCrossReference_1_0.eContents().get(1);
		private final Assignment cOwnedTemplateBindingAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedTemplateBindingTemplateBindingCSParserRuleCall_2_0 = (RuleCall)cOwnedTemplateBindingAssignment_2.eContents().get(0);
		
		//TypedTypeRefCS returns base::TypedTypeRefCS:
		//	(namespace+=[pivot::Namespace|Name] "::")* type=[pivot::Type|Name] ownedTemplateBinding=TemplateBindingCS?;
		public ParserRule getRule() { return rule; }

		//(namespace+=[pivot::Namespace|Name] "::")* type=[pivot::Type|Name] ownedTemplateBinding=TemplateBindingCS?
		public Group getGroup() { return cGroup; }

		//(namespace+=[pivot::Namespace|Name] "::")*
		public Group getGroup_0() { return cGroup_0; }

		//namespace+=[pivot::Namespace|Name]
		public Assignment getNamespaceAssignment_0_0() { return cNamespaceAssignment_0_0; }

		//[pivot::Namespace|Name]
		public CrossReference getNamespaceNamespaceCrossReference_0_0_0() { return cNamespaceNamespaceCrossReference_0_0_0; }

		//Name
		public RuleCall getNamespaceNamespaceNameParserRuleCall_0_0_0_1() { return cNamespaceNamespaceNameParserRuleCall_0_0_0_1; }

		//"::"
		public Keyword getColonColonKeyword_0_1() { return cColonColonKeyword_0_1; }

		//type=[pivot::Type|Name]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[pivot::Type|Name]
		public CrossReference getTypeTypeCrossReference_1_0() { return cTypeTypeCrossReference_1_0; }

		//Name
		public RuleCall getTypeTypeNameParserRuleCall_1_0_1() { return cTypeTypeNameParserRuleCall_1_0_1; }

		//ownedTemplateBinding=TemplateBindingCS?
		public Assignment getOwnedTemplateBindingAssignment_2() { return cOwnedTemplateBindingAssignment_2; }

		//TemplateBindingCS
		public RuleCall getOwnedTemplateBindingTemplateBindingCSParserRuleCall_2_0() { return cOwnedTemplateBindingTemplateBindingCSParserRuleCall_2_0; }
	}

	public class WildcardTypeRefCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WildcardTypeRefCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWildcardTypeRefCSAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cExtendsKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cExtendsAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cExtendsTypedRefCSParserRuleCall_2_0_1_0 = (RuleCall)cExtendsAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cSuperKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cSuperAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cSuperTypedRefCSParserRuleCall_2_1_1_0 = (RuleCall)cSuperAssignment_2_1_1.eContents().get(0);
		
		//WildcardTypeRefCS returns base::WildcardTypeRefCS:
		//	{base::WildcardTypeRefCS} "?" ("extends" extends=TypedRefCS | "super" super=TypedRefCS)?;
		public ParserRule getRule() { return rule; }

		//{base::WildcardTypeRefCS} "?" ("extends" extends=TypedRefCS | "super" super=TypedRefCS)?
		public Group getGroup() { return cGroup; }

		//{base::WildcardTypeRefCS}
		public Action getWildcardTypeRefCSAction_0() { return cWildcardTypeRefCSAction_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_1() { return cQuestionMarkKeyword_1; }

		//("extends" extends=TypedRefCS | "super" super=TypedRefCS)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"extends" extends=TypedRefCS
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"extends"
		public Keyword getExtendsKeyword_2_0_0() { return cExtendsKeyword_2_0_0; }

		//extends=TypedRefCS
		public Assignment getExtendsAssignment_2_0_1() { return cExtendsAssignment_2_0_1; }

		//TypedRefCS
		public RuleCall getExtendsTypedRefCSParserRuleCall_2_0_1_0() { return cExtendsTypedRefCSParserRuleCall_2_0_1_0; }

		//"super" super=TypedRefCS
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"super"
		public Keyword getSuperKeyword_2_1_0() { return cSuperKeyword_2_1_0; }

		//super=TypedRefCS
		public Assignment getSuperAssignment_2_1_1() { return cSuperAssignment_2_1_1; }

		//TypedRefCS
		public RuleCall getSuperTypedRefCSParserRuleCall_2_1_1_0() { return cSuperTypedRefCSParserRuleCall_2_1_1_0; }
	}
	
	
	private LibraryElements pLibrary;
	private TerminalRule tML_SINGLE_QUOTED_STRING;
	private LOWERElements pLOWER;
	private UPPERElements pUPPER;
	private IdentifierElements pIdentifier;
	private RestrictedKeywordsElements pRestrictedKeywords;
	private NameElements pName;
	private AccumulatorCSElements pAccumulatorCS;
	private AnnotationCSElements pAnnotationCS;
	private AnnotationElementCSElements pAnnotationElementCS;
	private ClassCSElements pClassCS;
	private ClassifierCSElements pClassifierCS;
	private DetailCSElements pDetailCS;
	private DocumentationCSElements pDocumentationCS;
	private InvCSElements pInvCS;
	private LibIterationCSElements pLibIterationCS;
	private IteratorCSElements pIteratorCS;
	private LambdaTypeCSElements pLambdaTypeCS;
	private LibraryCSElements pLibraryCS;
	private OperationCSElements pOperationCS;
	private LibOperationCSElements pLibOperationCS;
	private PackageCSElements pPackageCS;
	private ParameterCSElements pParameterCS;
	private LibPropertyCSElements pLibPropertyCS;
	private PostCSElements pPostCS;
	private PreCSElements pPreCS;
	private PrecedenceCSElements pPrecedenceCS;
	private SpecificationCSElements pSpecificationCS;
	private TemplateBindingCSElements pTemplateBindingCS;
	private TemplateParameterSubstitutionCSElements pTemplateParameterSubstitutionCS;
	private TemplateSignatureCSElements pTemplateSignatureCS;
	private LibTupleCSElements pLibTupleCS;
	private LibTuplePartCSElements pLibTuplePartCS;
	private TypeParameterCSElements pTypeParameterCS;
	private TypeRefCSElements pTypeRefCS;
	private TypedRefCSElements pTypedRefCS;
	private TypedTypeRefCSElements pTypedTypeRefCS;
	private WildcardTypeRefCSElements pWildcardTypeRefCS;
	
	private final GrammarProvider grammarProvider;

	private EssentialOCLGrammarAccess gaEssentialOCL;

	@Inject
	public OCLstdlibGrammarAccess(GrammarProvider grammarProvider,
		EssentialOCLGrammarAccess gaEssentialOCL) {
		this.grammarProvider = grammarProvider;
		this.gaEssentialOCL = gaEssentialOCL;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public EssentialOCLGrammarAccess getEssentialOCLGrammarAccess() {
		return gaEssentialOCL;
	}

	
	////generate OCLstdlib "http://www.eclipse.org/ocl/examples/xtext/oclstdlib/OCLstdlibCST"
	//
	//Library returns LibRootPackageCS:
	//	(ownedLibrary+=LibraryCS ";")* "library" name=Name (":" nsPrefix=Identifier "=" nsURI=SINGLE_QUOTED_STRING)? "{"
	//	(ownedNestedPackage+=PackageCS | "precedence" ownedPrecedence+=PrecedenceCS+ ";" | ownedType+=ClassifierCS |
	//	ownedAnnotation+=AnnotationElementCS)* "}";
	public LibraryElements getLibraryAccess() {
		return (pLibrary != null) ? pLibrary : (pLibrary = new LibraryElements());
	}
	
	public ParserRule getLibraryRule() {
		return getLibraryAccess().getRule();
	}

	//terminal ML_SINGLE_QUOTED_STRING:
	//	"/\'"->"\'/";
	public TerminalRule getML_SINGLE_QUOTED_STRINGRule() {
		return (tML_SINGLE_QUOTED_STRING != null) ? tML_SINGLE_QUOTED_STRING : (tML_SINGLE_QUOTED_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_SINGLE_QUOTED_STRING"));
	} 

	//LOWER returns ecore::EInt:
	//	INT;
	public LOWERElements getLOWERAccess() {
		return (pLOWER != null) ? pLOWER : (pLOWER = new LOWERElements());
	}
	
	public ParserRule getLOWERRule() {
		return getLOWERAccess().getRule();
	}

	//UPPER returns ecore::EInt:
	//	INT | "*";
	public UPPERElements getUPPERAccess() {
		return (pUPPER != null) ? pUPPER : (pUPPER = new UPPERElements());
	}
	
	public ParserRule getUPPERRule() {
		return getUPPERAccess().getRule();
	}

	//Identifier:
	//	ID | RestrictedKeywords | EssentialOCLUnrestrictedIdentifier;
	public IdentifierElements getIdentifierAccess() {
		return (pIdentifier != null) ? pIdentifier : (pIdentifier = new IdentifierElements());
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}

	//RestrictedKeywords:
	//	"annotation" | "conformsTo" | "documentation" | "extends" | "import" | "inv" | "iteration" | "left" | "library" |
	//	"operation" | "package" | "post" | "pre" | "precedence" | "property" | "right" | "static" | "super" | "type" |
	//	"Lambda" | "Tuple";
	public RestrictedKeywordsElements getRestrictedKeywordsAccess() {
		return (pRestrictedKeywords != null) ? pRestrictedKeywords : (pRestrictedKeywords = new RestrictedKeywordsElements());
	}
	
	public ParserRule getRestrictedKeywordsRule() {
		return getRestrictedKeywordsAccess().getRule();
	}

	//Name:
	//	Identifier | DOUBLE_QUOTED_STRING | EssentialOCLReservedKeyword | RestrictedKeywords | PrimitiveTypeIdentifier |
	//	CollectionTypeIdentifier;
	public NameElements getNameAccess() {
		return (pName != null) ? pName : (pName = new NameElements());
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}

	//AccumulatorCS returns base::ParameterCS:
	//	name=Identifier ":" ownedType=TypedRefCS;
	public AccumulatorCSElements getAccumulatorCSAccess() {
		return (pAccumulatorCS != null) ? pAccumulatorCS : (pAccumulatorCS = new AccumulatorCSElements());
	}
	
	public ParserRule getAccumulatorCSRule() {
		return getAccumulatorCSAccess().getRule();
	}

	//AnnotationCS returns base::AnnotationCS:
	//	"annotation" name=(Identifier | SINGLE_QUOTED_STRING) ("(" ownedDetail+=DetailCS ("," ownedDetail+=DetailCS)* ")")?
	//	("{" ownedAnnotation+=AnnotationElementCS "}" | ";");
	public AnnotationCSElements getAnnotationCSAccess() {
		return (pAnnotationCS != null) ? pAnnotationCS : (pAnnotationCS = new AnnotationCSElements());
	}
	
	public ParserRule getAnnotationCSRule() {
		return getAnnotationCSAccess().getRule();
	}

	//AnnotationElementCS returns base::AnnotationElementCS:
	//	AnnotationCS | DocumentationCS;
	public AnnotationElementCSElements getAnnotationElementCSAccess() {
		return (pAnnotationElementCS != null) ? pAnnotationElementCS : (pAnnotationElementCS = new AnnotationElementCSElements());
	}
	
	public ParserRule getAnnotationElementCSRule() {
		return getAnnotationElementCSAccess().getRule();
	}

	//ClassCS returns LibClassCS:
	//	"type" name=Name ownedTemplateSignature=TemplateSignatureCS? (":" metaTypeName=[MetaTypeName|Name])? ("conformsTo"
	//	ownedSuperType+=TypedRefCS ("," ownedSuperType+=TypedRefCS)*)? "{" (ownedOperation+=OperationCS |
	//	ownedProperty+=LibPropertyCS | ownedConstraint+=InvCS | ownedAnnotation+=AnnotationElementCS)* "}";
	public ClassCSElements getClassCSAccess() {
		return (pClassCS != null) ? pClassCS : (pClassCS = new ClassCSElements());
	}
	
	public ParserRule getClassCSRule() {
		return getClassCSAccess().getRule();
	}

	//ClassifierCS returns base::ClassifierCS:
	//	ClassCS;
	public ClassifierCSElements getClassifierCSAccess() {
		return (pClassifierCS != null) ? pClassifierCS : (pClassifierCS = new ClassifierCSElements());
	}
	
	public ParserRule getClassifierCSRule() {
		return getClassifierCSAccess().getRule();
	}

	//DetailCS returns base::DetailCS:
	//	name=(Name | SINGLE_QUOTED_STRING) "=" value+=(SINGLE_QUOTED_STRING | ML_SINGLE_QUOTED_STRING)*;
	public DetailCSElements getDetailCSAccess() {
		return (pDetailCS != null) ? pDetailCS : (pDetailCS = new DetailCSElements());
	}
	
	public ParserRule getDetailCSRule() {
		return getDetailCSAccess().getRule();
	}

	//DocumentationCS returns base::DocumentationCS:
	//	{base::DocumentationCS} "documentation" value=SINGLE_QUOTED_STRING? ("(" ownedDetail+=DetailCS (","
	//	ownedDetail+=DetailCS)* ")")? ";";
	public DocumentationCSElements getDocumentationCSAccess() {
		return (pDocumentationCS != null) ? pDocumentationCS : (pDocumentationCS = new DocumentationCSElements());
	}
	
	public ParserRule getDocumentationCSRule() {
		return getDocumentationCSAccess().getRule();
	}

	//InvCS returns LibConstraintCS:
	//	stereotype="inv" name=UnrestrictedName? ":" specification=SpecificationCS ";";
	public InvCSElements getInvCSAccess() {
		return (pInvCS != null) ? pInvCS : (pInvCS = new InvCSElements());
	}
	
	public ParserRule getInvCSRule() {
		return getInvCSAccess().getRule();
	}

	//LibIterationCS:
	//	"iteration" name=Name ownedTemplateSignature=TemplateSignatureCS? "(" ownedIterator+=IteratorCS (","
	//	ownedIterator+=IteratorCS)* (";" ownedAccumulator+=AccumulatorCS ("," ownedAccumulator+=AccumulatorCS)*)? ("|"
	//	ownedParameter+=ParameterCS ("," ownedParameter+=ParameterCS)*)? ")" ":" ownedType=TypedRefCS ("=>"
	//	implementation=[types::JvmType|SINGLE_QUOTED_STRING])? ("{" (ownedAnnotation+=AnnotationElementCS |
	//	ownedConstraint+=PostCS | ownedConstraint+=PreCS)* "}" | ";");
	public LibIterationCSElements getLibIterationCSAccess() {
		return (pLibIterationCS != null) ? pLibIterationCS : (pLibIterationCS = new LibIterationCSElements());
	}
	
	public ParserRule getLibIterationCSRule() {
		return getLibIterationCSAccess().getRule();
	}

	//IteratorCS returns base::ParameterCS:
	//	name=Identifier ":" ownedType=TypedRefCS;
	public IteratorCSElements getIteratorCSAccess() {
		return (pIteratorCS != null) ? pIteratorCS : (pIteratorCS = new IteratorCSElements());
	}
	
	public ParserRule getIteratorCSRule() {
		return getIteratorCSAccess().getRule();
	}

	//LambdaTypeCS returns base::LambdaTypeCS:
	//	name="Lambda" ownedContextType=TypedRefCS ownedTemplateSignature=TemplateSignatureCS? "("
	//	(ownedParameterType+=TypedRefCS ("," ownedParameterType+=TypedRefCS)*)? ")" ":" ownedResultType=TypedRefCS;
	public LambdaTypeCSElements getLambdaTypeCSAccess() {
		return (pLambdaTypeCS != null) ? pLambdaTypeCS : (pLambdaTypeCS = new LambdaTypeCSElements());
	}
	
	public ParserRule getLambdaTypeCSRule() {
		return getLambdaTypeCSAccess().getRule();
	}

	//LibraryCS returns base::LibraryCS:
	//	"import" package=[pivot::Package|SINGLE_QUOTED_STRING];
	public LibraryCSElements getLibraryCSAccess() {
		return (pLibraryCS != null) ? pLibraryCS : (pLibraryCS = new LibraryCSElements());
	}
	
	public ParserRule getLibraryCSRule() {
		return getLibraryCSAccess().getRule();
	}

	//OperationCS returns base::OperationCS:
	//	LibIterationCS | LibOperationCS;
	public OperationCSElements getOperationCSAccess() {
		return (pOperationCS != null) ? pOperationCS : (pOperationCS = new OperationCSElements());
	}
	
	public ParserRule getOperationCSRule() {
		return getOperationCSAccess().getRule();
	}

	//LibOperationCS:
	//	static?="static"? "operation" name=Name ownedTemplateSignature=TemplateSignatureCS? "(" (ownedParameter+=ParameterCS
	//	("," ownedParameter+=ParameterCS)*)? ")" ":" ownedType=TypedRefCS ("precedence" "="
	//	precedence=[pivot::Precedence|Name])? ("=>" implementation=[types::JvmType|SINGLE_QUOTED_STRING])? ("{"
	//	(ownedAnnotation+=AnnotationElementCS | ownedConstraint+=PostCS | ownedConstraint+=PreCS)* "}" | ";");
	public LibOperationCSElements getLibOperationCSAccess() {
		return (pLibOperationCS != null) ? pLibOperationCS : (pLibOperationCS = new LibOperationCSElements());
	}
	
	public ParserRule getLibOperationCSRule() {
		return getLibOperationCSAccess().getRule();
	}

	//PackageCS returns base::PackageCS:
	//	"package" name=Name (":" nsPrefix=Identifier "=" nsURI=SINGLE_QUOTED_STRING)? "{" (ownedNestedPackage+=PackageCS |
	//	ownedType+=ClassifierCS | ownedAnnotation+=AnnotationElementCS)* "}";
	public PackageCSElements getPackageCSAccess() {
		return (pPackageCS != null) ? pPackageCS : (pPackageCS = new PackageCSElements());
	}
	
	public ParserRule getPackageCSRule() {
		return getPackageCSAccess().getRule();
	}

	//ParameterCS returns base::ParameterCS:
	//	name=Identifier ":" ownedType=TypedRefCS ("[" (lower=LOWER (".." upper=UPPER)? | multiplicity=("*" | "+" | "?"))
	//	"]")?;
	public ParameterCSElements getParameterCSAccess() {
		return (pParameterCS != null) ? pParameterCS : (pParameterCS = new ParameterCSElements());
	}
	
	public ParserRule getParameterCSRule() {
		return getParameterCSAccess().getRule();
	}

	//LibPropertyCS:
	//	static?="static"? "property" name=Name ":" ownedType=TypedRefCS ("=>"
	//	implementation=[types::JvmType|SINGLE_QUOTED_STRING])? ("{" ownedAnnotation+=AnnotationElementCS* "}" | ";");
	public LibPropertyCSElements getLibPropertyCSAccess() {
		return (pLibPropertyCS != null) ? pLibPropertyCS : (pLibPropertyCS = new LibPropertyCSElements());
	}
	
	public ParserRule getLibPropertyCSRule() {
		return getLibPropertyCSAccess().getRule();
	}

	//PostCS returns LibConstraintCS:
	//	stereotype="post" name=UnrestrictedName? ":" specification=SpecificationCS ";";
	public PostCSElements getPostCSAccess() {
		return (pPostCS != null) ? pPostCS : (pPostCS = new PostCSElements());
	}
	
	public ParserRule getPostCSRule() {
		return getPostCSAccess().getRule();
	}

	//PreCS returns LibConstraintCS:
	//	stereotype="pre" name=UnrestrictedName? ":" specification=SpecificationCS ";";
	public PreCSElements getPreCSAccess() {
		return (pPreCS != null) ? pPreCS : (pPreCS = new PreCSElements());
	}
	
	public ParserRule getPreCSRule() {
		return getPreCSAccess().getRule();
	}

	//PrecedenceCS:
	//	("left" | rightAssociative?="right") ":" name=Name;
	public PrecedenceCSElements getPrecedenceCSAccess() {
		return (pPrecedenceCS != null) ? pPrecedenceCS : (pPrecedenceCS = new PrecedenceCSElements());
	}
	
	public ParserRule getPrecedenceCSRule() {
		return getPrecedenceCSAccess().getRule();
	}

	//SpecificationCS returns essentialocl::ExpSpecificationCS:
	//	ownedExpression=ExpCS;
	public SpecificationCSElements getSpecificationCSAccess() {
		return (pSpecificationCS != null) ? pSpecificationCS : (pSpecificationCS = new SpecificationCSElements());
	}
	
	public ParserRule getSpecificationCSRule() {
		return getSpecificationCSAccess().getRule();
	}

	//TemplateBindingCS returns base::TemplateBindingCS:
	//	"<" ownedParameterSubstitution+=TemplateParameterSubstitutionCS (","
	//	ownedParameterSubstitution+=TemplateParameterSubstitutionCS)* ">";
	public TemplateBindingCSElements getTemplateBindingCSAccess() {
		return (pTemplateBindingCS != null) ? pTemplateBindingCS : (pTemplateBindingCS = new TemplateBindingCSElements());
	}
	
	public ParserRule getTemplateBindingCSRule() {
		return getTemplateBindingCSAccess().getRule();
	}

	//TemplateParameterSubstitutionCS returns base::TemplateParameterSubstitutionCS:
	//	ownedActualParameter=TypeRefCS;
	public TemplateParameterSubstitutionCSElements getTemplateParameterSubstitutionCSAccess() {
		return (pTemplateParameterSubstitutionCS != null) ? pTemplateParameterSubstitutionCS : (pTemplateParameterSubstitutionCS = new TemplateParameterSubstitutionCSElements());
	}
	
	public ParserRule getTemplateParameterSubstitutionCSRule() {
		return getTemplateParameterSubstitutionCSAccess().getRule();
	}

	//TemplateSignatureCS returns base::TemplateSignatureCS:
	//	"<" ownedTemplateParameter+=TypeParameterCS ("," ownedTemplateParameter+=TypeParameterCS)* ">";
	public TemplateSignatureCSElements getTemplateSignatureCSAccess() {
		return (pTemplateSignatureCS != null) ? pTemplateSignatureCS : (pTemplateSignatureCS = new TemplateSignatureCSElements());
	}
	
	public ParserRule getTemplateSignatureCSRule() {
		return getTemplateSignatureCSAccess().getRule();
	}

	//LibTupleCS returns base::TupleTypeCS:
	//	name="Tuple" "<" (ownedParts+=LibTuplePartCS ("," ownedParts+=LibTuplePartCS)*)? ">";
	public LibTupleCSElements getLibTupleCSAccess() {
		return (pLibTupleCS != null) ? pLibTupleCS : (pLibTupleCS = new LibTupleCSElements());
	}
	
	public ParserRule getLibTupleCSRule() {
		return getLibTupleCSAccess().getRule();
	}

	//LibTuplePartCS returns base::TuplePartCS:
	//	name=Identifier ":" ownedType=TypedRefCS;
	public LibTuplePartCSElements getLibTuplePartCSAccess() {
		return (pLibTuplePartCS != null) ? pLibTuplePartCS : (pLibTuplePartCS = new LibTuplePartCSElements());
	}
	
	public ParserRule getLibTuplePartCSRule() {
		return getLibTuplePartCSAccess().getRule();
	}

	//TypeParameterCS returns base::TypeParameterCS:
	//	name=Identifier ("extends" ownedExtends+=TypedRefCS ("&&" ownedExtends+=TypedRefCS)* | "super"
	//	ownedSuper=TypedRefCS)?;
	public TypeParameterCSElements getTypeParameterCSAccess() {
		return (pTypeParameterCS != null) ? pTypeParameterCS : (pTypeParameterCS = new TypeParameterCSElements());
	}
	
	public ParserRule getTypeParameterCSRule() {
		return getTypeParameterCSAccess().getRule();
	}

	//TypeRefCS returns base::TypeRefCS:
	//	TypedRefCS | WildcardTypeRefCS;
	public TypeRefCSElements getTypeRefCSAccess() {
		return (pTypeRefCS != null) ? pTypeRefCS : (pTypeRefCS = new TypeRefCSElements());
	}
	
	public ParserRule getTypeRefCSRule() {
		return getTypeRefCSAccess().getRule();
	}

	//TypedRefCS returns base::TypedRefCS:
	//	LibTupleCS | TypedTypeRefCS | LambdaTypeCS;
	public TypedRefCSElements getTypedRefCSAccess() {
		return (pTypedRefCS != null) ? pTypedRefCS : (pTypedRefCS = new TypedRefCSElements());
	}
	
	public ParserRule getTypedRefCSRule() {
		return getTypedRefCSAccess().getRule();
	}

	//TypedTypeRefCS returns base::TypedTypeRefCS:
	//	(namespace+=[pivot::Namespace|Name] "::")* type=[pivot::Type|Name] ownedTemplateBinding=TemplateBindingCS?;
	public TypedTypeRefCSElements getTypedTypeRefCSAccess() {
		return (pTypedTypeRefCS != null) ? pTypedTypeRefCS : (pTypedTypeRefCS = new TypedTypeRefCSElements());
	}
	
	public ParserRule getTypedTypeRefCSRule() {
		return getTypedTypeRefCSAccess().getRule();
	}

	//WildcardTypeRefCS returns base::WildcardTypeRefCS:
	//	{base::WildcardTypeRefCS} "?" ("extends" extends=TypedRefCS | "super" super=TypedRefCS)?;
	public WildcardTypeRefCSElements getWildcardTypeRefCSAccess() {
		return (pWildcardTypeRefCS != null) ? pWildcardTypeRefCS : (pWildcardTypeRefCS = new WildcardTypeRefCSElements());
	}
	
	public ParserRule getWildcardTypeRefCSRule() {
		return getWildcardTypeRefCSAccess().getRule();
	}

	////generate essentialOCLCST "http://www.eclipse.org/ocl/3.0.0/EssentialOCLCST"
	//
	//Model returns ContextCS:
	//	ownedExpression=ExpCS;
	public EssentialOCLGrammarAccess.ModelElements getModelAccess() {
		return gaEssentialOCL.getModelAccess();
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//terminal DOUBLE_QUOTED_STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"";
	public TerminalRule getDOUBLE_QUOTED_STRINGRule() {
		return gaEssentialOCL.getDOUBLE_QUOTED_STRINGRule();
	} 

	//terminal SINGLE_QUOTED_STRING:
	//	"\'" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSINGLE_QUOTED_STRINGRule() {
		return gaEssentialOCL.getSINGLE_QUOTED_STRINGRule();
	} 

	//terminal SIMPLE_ID:
	//	("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getSIMPLE_IDRule() {
		return gaEssentialOCL.getSIMPLE_IDRule();
	} 

	//terminal ESCAPED_ID:
	//	"_" SINGLE_QUOTED_STRING;
	public TerminalRule getESCAPED_IDRule() {
		return gaEssentialOCL.getESCAPED_IDRule();
	} 

	//ID:
	//	SIMPLE_ID | ESCAPED_ID;
	public EssentialOCLGrammarAccess.IDElements getIDAccess() {
		return gaEssentialOCL.getIDAccess();
	}
	
	public ParserRule getIDRule() {
		return getIDAccess().getRule();
	}

	//// String to allow diverse re-use
	//
	//terminal INT:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaEssentialOCL.getINTRule();
	} 

	//// Not terminal to allow parser backtracking to sort out "5..7"
	//
	//NUMBER_LITERAL returns BigNumber:
	//	INT ("." INT)? (("e" | "E") ("+" | "-")? INT)?;
	public EssentialOCLGrammarAccess.NUMBER_LITERALElements getNUMBER_LITERALAccess() {
		return gaEssentialOCL.getNUMBER_LITERALAccess();
	}
	
	public ParserRule getNUMBER_LITERALRule() {
		return getNUMBER_LITERALAccess().getRule();
	}

	//terminal DOCUMENTATION:
	//	"/ **"->"* /";
	public TerminalRule getDOCUMENTATIONRule() {
		return gaEssentialOCL.getDOCUMENTATIONRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *" !"*"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaEssentialOCL.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"--" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaEssentialOCL.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaEssentialOCL.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaEssentialOCL.getANY_OTHERRule();
	} 

	//EssentialOCLReservedKeyword:
	//	"and" | "else" | "endif" | "if" | "implies" | "in" | "let" | "not" | "or" | "then" | "xor";
	public EssentialOCLGrammarAccess.EssentialOCLReservedKeywordElements getEssentialOCLReservedKeywordAccess() {
		return gaEssentialOCL.getEssentialOCLReservedKeywordAccess();
	}
	
	public ParserRule getEssentialOCLReservedKeywordRule() {
		return getEssentialOCLReservedKeywordAccess().getRule();
	}

	//EssentialOCLUnrestrictedIdentifier:
	//	"e" | "E";
	public EssentialOCLGrammarAccess.EssentialOCLUnrestrictedIdentifierElements getEssentialOCLUnrestrictedIdentifierAccess() {
		return gaEssentialOCL.getEssentialOCLUnrestrictedIdentifierAccess();
	}
	
	public ParserRule getEssentialOCLUnrestrictedIdentifierRule() {
		return getEssentialOCLUnrestrictedIdentifierAccess().getRule();
	}

	//EssentialOCLPrefixOperator:
	//	"-" | "not";
	public EssentialOCLGrammarAccess.EssentialOCLPrefixOperatorElements getEssentialOCLPrefixOperatorAccess() {
		return gaEssentialOCL.getEssentialOCLPrefixOperatorAccess();
	}
	
	public ParserRule getEssentialOCLPrefixOperatorRule() {
		return getEssentialOCLPrefixOperatorAccess().getRule();
	}

	//EssentialOCLInfixOperator:
	//	"*" | "/" | "+" | "-" | ">" | "<" | ">=" | "<=" | "=" | "<>" | "and" | "or" | "xor" | "implies";
	public EssentialOCLGrammarAccess.EssentialOCLInfixOperatorElements getEssentialOCLInfixOperatorAccess() {
		return gaEssentialOCL.getEssentialOCLInfixOperatorAccess();
	}
	
	public ParserRule getEssentialOCLInfixOperatorRule() {
		return getEssentialOCLInfixOperatorAccess().getRule();
	}

	//EssentialOCLNavigationOperator:
	//	"." | "->";
	public EssentialOCLGrammarAccess.EssentialOCLNavigationOperatorElements getEssentialOCLNavigationOperatorAccess() {
		return gaEssentialOCL.getEssentialOCLNavigationOperatorAccess();
	}
	
	public ParserRule getEssentialOCLNavigationOperatorRule() {
		return getEssentialOCLNavigationOperatorAccess().getRule();
	}

	//StringLiteral:
	//	SINGLE_QUOTED_STRING;
	public EssentialOCLGrammarAccess.StringLiteralElements getStringLiteralAccess() {
		return gaEssentialOCL.getStringLiteralAccess();
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//// Intended to be overridden
	//
	//PrefixOperator:
	//	EssentialOCLPrefixOperator;
	public EssentialOCLGrammarAccess.PrefixOperatorElements getPrefixOperatorAccess() {
		return gaEssentialOCL.getPrefixOperatorAccess();
	}
	
	public ParserRule getPrefixOperatorRule() {
		return getPrefixOperatorAccess().getRule();
	}

	//// Intended to be overridden
	//
	//InfixOperator:
	//	EssentialOCLInfixOperator;
	public EssentialOCLGrammarAccess.InfixOperatorElements getInfixOperatorAccess() {
		return gaEssentialOCL.getInfixOperatorAccess();
	}
	
	public ParserRule getInfixOperatorRule() {
		return getInfixOperatorAccess().getRule();
	}

	//// Intended to be overridden
	//
	//NavigationOperator:
	//	EssentialOCLNavigationOperator;
	public EssentialOCLGrammarAccess.NavigationOperatorElements getNavigationOperatorAccess() {
		return gaEssentialOCL.getNavigationOperatorAccess();
	}
	
	public ParserRule getNavigationOperatorRule() {
		return getNavigationOperatorAccess().getRule();
	}

	////---------------------------------------------------------------------
	//
	////  Names
	//
	////---------------------------------------------------------------------
	//
	//EssentialOCLUnrestrictedName returns ecore::EString:
	//	Identifier;
	public EssentialOCLGrammarAccess.EssentialOCLUnrestrictedNameElements getEssentialOCLUnrestrictedNameAccess() {
		return gaEssentialOCL.getEssentialOCLUnrestrictedNameAccess();
	}
	
	public ParserRule getEssentialOCLUnrestrictedNameRule() {
		return getEssentialOCLUnrestrictedNameAccess().getRule();
	}

	//// Intended to be overridden
	//
	//UnrestrictedName returns ecore::EString:
	//	EssentialOCLUnrestrictedName;
	public EssentialOCLGrammarAccess.UnrestrictedNameElements getUnrestrictedNameAccess() {
		return gaEssentialOCL.getUnrestrictedNameAccess();
	}
	
	public ParserRule getUnrestrictedNameRule() {
		return getUnrestrictedNameAccess().getRule();
	}

	//EssentialOCLUnreservedName returns ecore::EString:
	//	UnrestrictedName | CollectionTypeIdentifier | PrimitiveTypeIdentifier | "Tuple";
	public EssentialOCLGrammarAccess.EssentialOCLUnreservedNameElements getEssentialOCLUnreservedNameAccess() {
		return gaEssentialOCL.getEssentialOCLUnreservedNameAccess();
	}
	
	public ParserRule getEssentialOCLUnreservedNameRule() {
		return getEssentialOCLUnreservedNameAccess().getRule();
	}

	//// Intended to be overridden
	//
	//UnreservedName returns ecore::EString:
	//	EssentialOCLUnreservedName;
	public EssentialOCLGrammarAccess.UnreservedNameElements getUnreservedNameAccess() {
		return gaEssentialOCL.getUnreservedNameAccess();
	}
	
	public ParserRule getUnreservedNameRule() {
		return getUnreservedNameAccess().getRule();
	}

	////---------------------------------------------------------------------
	//
	////  Types
	//
	////---------------------------------------------------------------------
	//
	//PrimitiveTypeIdentifier:
	//	"Boolean" | "Integer" | "Real" | "String" | "UnlimitedNatural" | "OclAny" | "OclInvalid" | "OclVoid";
	public EssentialOCLGrammarAccess.PrimitiveTypeIdentifierElements getPrimitiveTypeIdentifierAccess() {
		return gaEssentialOCL.getPrimitiveTypeIdentifierAccess();
	}
	
	public ParserRule getPrimitiveTypeIdentifierRule() {
		return getPrimitiveTypeIdentifierAccess().getRule();
	}

	//PrimitiveTypeCS returns base::PrimitiveTypeRefCS:
	//	name=PrimitiveTypeIdentifier;
	public EssentialOCLGrammarAccess.PrimitiveTypeCSElements getPrimitiveTypeCSAccess() {
		return gaEssentialOCL.getPrimitiveTypeCSAccess();
	}
	
	public ParserRule getPrimitiveTypeCSRule() {
		return getPrimitiveTypeCSAccess().getRule();
	}

	//CollectionTypeIdentifier returns ecore::EString:
	//	"Set" | "Bag" | "Sequence" | "Collection" | "OrderedSet";
	public EssentialOCLGrammarAccess.CollectionTypeIdentifierElements getCollectionTypeIdentifierAccess() {
		return gaEssentialOCL.getCollectionTypeIdentifierAccess();
	}
	
	public ParserRule getCollectionTypeIdentifierRule() {
		return getCollectionTypeIdentifierAccess().getRule();
	}

	//CollectionTypeCS:
	//	name=CollectionTypeIdentifier ("(" ownedType=TypeExpCS ")" | "<" ownedType=TypeExpCS ">")?;
	public EssentialOCLGrammarAccess.CollectionTypeCSElements getCollectionTypeCSAccess() {
		return gaEssentialOCL.getCollectionTypeCSAccess();
	}
	
	public ParserRule getCollectionTypeCSRule() {
		return getCollectionTypeCSAccess().getRule();
	}

	//TupleTypeCS returns base::TupleTypeCS:
	//	name="Tuple" ("(" (ownedParts+=tuplePartCS ("," ownedParts+=tuplePartCS)*)? ")" | "<" (ownedParts+=tuplePartCS (","
	//	ownedParts+=tuplePartCS)*)? ">")?;
	public EssentialOCLGrammarAccess.TupleTypeCSElements getTupleTypeCSAccess() {
		return gaEssentialOCL.getTupleTypeCSAccess();
	}
	
	public ParserRule getTupleTypeCSRule() {
		return getTupleTypeCSAccess().getRule();
	}

	//tuplePartCS returns base::TuplePartCS:
	//	name=UnrestrictedName ":" ownedType=TypeExpCS;
	public EssentialOCLGrammarAccess.TuplePartCSElements getTuplePartCSAccess() {
		return gaEssentialOCL.getTuplePartCSAccess();
	}
	
	public ParserRule getTuplePartCSRule() {
		return getTuplePartCSAccess().getRule();
	}

	////---------------------------------------------------------------------
	//
	////  Literals
	//
	////---------------------------------------------------------------------
	//
	//CollectionLiteralExpCS:
	//	ownedType=CollectionTypeCS "{" (ownedParts+=CollectionLiteralPartCS ("," ownedParts+=CollectionLiteralPartCS)*)? "}";
	public EssentialOCLGrammarAccess.CollectionLiteralExpCSElements getCollectionLiteralExpCSAccess() {
		return gaEssentialOCL.getCollectionLiteralExpCSAccess();
	}
	
	public ParserRule getCollectionLiteralExpCSRule() {
		return getCollectionLiteralExpCSAccess().getRule();
	}

	//CollectionLiteralPartCS:
	//	expressionCS=ExpCS (".." lastExpressionCS=ExpCS)?;
	public EssentialOCLGrammarAccess.CollectionLiteralPartCSElements getCollectionLiteralPartCSAccess() {
		return gaEssentialOCL.getCollectionLiteralPartCSAccess();
	}
	
	public ParserRule getCollectionLiteralPartCSRule() {
		return getCollectionLiteralPartCSAccess().getRule();
	}

	//PrimitiveLiteralExpCS:
	//	NumberLiteralExpCS | StringLiteralExpCS | BooleanLiteralExpCS | UnlimitedNaturalLiteralExpCS | InvalidLiteralExpCS |
	//	NullLiteralExpCS;
	public EssentialOCLGrammarAccess.PrimitiveLiteralExpCSElements getPrimitiveLiteralExpCSAccess() {
		return gaEssentialOCL.getPrimitiveLiteralExpCSAccess();
	}
	
	public ParserRule getPrimitiveLiteralExpCSRule() {
		return getPrimitiveLiteralExpCSAccess().getRule();
	}

	//TupleLiteralExpCS:
	//	"Tuple" "{" ownedParts+=TupleLiteralPartCS ("," ownedParts+=TupleLiteralPartCS)* "}";
	public EssentialOCLGrammarAccess.TupleLiteralExpCSElements getTupleLiteralExpCSAccess() {
		return gaEssentialOCL.getTupleLiteralExpCSAccess();
	}
	
	public ParserRule getTupleLiteralExpCSRule() {
		return getTupleLiteralExpCSAccess().getRule();
	}

	//TupleLiteralPartCS:
	//	name=UnrestrictedName (":" ownedType=TypeExpCS)? "=" initExpression=ExpCS;
	public EssentialOCLGrammarAccess.TupleLiteralPartCSElements getTupleLiteralPartCSAccess() {
		return gaEssentialOCL.getTupleLiteralPartCSAccess();
	}
	
	public ParserRule getTupleLiteralPartCSRule() {
		return getTupleLiteralPartCSAccess().getRule();
	}

	//NumberLiteralExpCS:
	//	name=NUMBER_LITERAL;
	public EssentialOCLGrammarAccess.NumberLiteralExpCSElements getNumberLiteralExpCSAccess() {
		return gaEssentialOCL.getNumberLiteralExpCSAccess();
	}
	
	public ParserRule getNumberLiteralExpCSRule() {
		return getNumberLiteralExpCSAccess().getRule();
	}

	//StringLiteralExpCS:
	//	name+=StringLiteral+;
	public EssentialOCLGrammarAccess.StringLiteralExpCSElements getStringLiteralExpCSAccess() {
		return gaEssentialOCL.getStringLiteralExpCSAccess();
	}
	
	public ParserRule getStringLiteralExpCSRule() {
		return getStringLiteralExpCSAccess().getRule();
	}

	//BooleanLiteralExpCS:
	//	name="true" | name="false";
	public EssentialOCLGrammarAccess.BooleanLiteralExpCSElements getBooleanLiteralExpCSAccess() {
		return gaEssentialOCL.getBooleanLiteralExpCSAccess();
	}
	
	public ParserRule getBooleanLiteralExpCSRule() {
		return getBooleanLiteralExpCSAccess().getRule();
	}

	//UnlimitedNaturalLiteralExpCS:
	//	{UnlimitedNaturalLiteralExpCS} "*";
	public EssentialOCLGrammarAccess.UnlimitedNaturalLiteralExpCSElements getUnlimitedNaturalLiteralExpCSAccess() {
		return gaEssentialOCL.getUnlimitedNaturalLiteralExpCSAccess();
	}
	
	public ParserRule getUnlimitedNaturalLiteralExpCSRule() {
		return getUnlimitedNaturalLiteralExpCSAccess().getRule();
	}

	//InvalidLiteralExpCS:
	//	{InvalidLiteralExpCS} "invalid";
	public EssentialOCLGrammarAccess.InvalidLiteralExpCSElements getInvalidLiteralExpCSAccess() {
		return gaEssentialOCL.getInvalidLiteralExpCSAccess();
	}
	
	public ParserRule getInvalidLiteralExpCSRule() {
		return getInvalidLiteralExpCSAccess().getRule();
	}

	//NullLiteralExpCS:
	//	{NullLiteralExpCS} "null";
	public EssentialOCLGrammarAccess.NullLiteralExpCSElements getNullLiteralExpCSAccess() {
		return gaEssentialOCL.getNullLiteralExpCSAccess();
	}
	
	public ParserRule getNullLiteralExpCSRule() {
		return getNullLiteralExpCSAccess().getRule();
	}

	//TypeLiteralCS returns base::TypedRefCS:
	//	PrimitiveTypeCS | CollectionTypeCS | TupleTypeCS;
	public EssentialOCLGrammarAccess.TypeLiteralCSElements getTypeLiteralCSAccess() {
		return gaEssentialOCL.getTypeLiteralCSAccess();
	}
	
	public ParserRule getTypeLiteralCSRule() {
		return getTypeLiteralCSAccess().getRule();
	}

	//TypeLiteralExpCS:
	//	ownedType=TypeLiteralCS;
	public EssentialOCLGrammarAccess.TypeLiteralExpCSElements getTypeLiteralExpCSAccess() {
		return gaEssentialOCL.getTypeLiteralExpCSAccess();
	}
	
	public ParserRule getTypeLiteralExpCSRule() {
		return getTypeLiteralExpCSAccess().getRule();
	}

	////TypeNameExpCS returns base::QualifiedTypeRefCS:
	//
	//TypeNameExpCS:
	//	(namespace+=[pivot::Namespace|UnrestrictedName] "::" (namespace+=[pivot::Namespace|UnreservedName] "::")*)
	//	element=[pivot::Type|UnreservedName] | element=[pivot::Type|UnrestrictedName];
	public EssentialOCLGrammarAccess.TypeNameExpCSElements getTypeNameExpCSAccess() {
		return gaEssentialOCL.getTypeNameExpCSAccess();
	}
	
	public ParserRule getTypeNameExpCSRule() {
		return getTypeNameExpCSAccess().getRule();
	}

	//TypeExpCS returns base::TypedRefCS:
	//	TypeNameExpCS | TypeLiteralCS;
	public EssentialOCLGrammarAccess.TypeExpCSElements getTypeExpCSAccess() {
		return gaEssentialOCL.getTypeExpCSAccess();
	}
	
	public ParserRule getTypeExpCSRule() {
		return getTypeExpCSAccess().getRule();
	}

	////---------------------------------------------------------------------
	//
	////  Expressions
	//
	////---------------------------------------------------------------------
	//
	//// An OclExpressionCS comprising one or more LetExpCS is kept separate to ensure
	//
	////  that let is right associative, whereas infix operators are left associative.
	//
	////   a = 64 / 16 / let b : Integer in 8 / let c : Integer in 4 
	//
	//// is
	//
	////   a = (64 / 16) / (let b : Integer in 8 / (let c : Integer in 4 ))
	//
	//ExpCS:
	//	InfixedExpCS;
	public EssentialOCLGrammarAccess.ExpCSElements getExpCSAccess() {
		return gaEssentialOCL.getExpCSAccess();
	}
	
	public ParserRule getExpCSRule() {
		return getExpCSAccess().getRule();
	}

	//InfixedExpCS returns ExpCS:
	//	PrefixedExpCS ({InfixExpCS.ownedExpression+=current} (ownedOperator+=BinaryOperatorCS
	//	ownedExpression+=PrefixedExpCS)+)?;
	public EssentialOCLGrammarAccess.InfixedExpCSElements getInfixedExpCSAccess() {
		return gaEssentialOCL.getInfixedExpCSAccess();
	}
	
	public ParserRule getInfixedExpCSRule() {
		return getInfixedExpCSAccess().getRule();
	}

	//BinaryOperatorCS:
	//	InfixOperatorCS | NavigationOperatorCS;
	public EssentialOCLGrammarAccess.BinaryOperatorCSElements getBinaryOperatorCSAccess() {
		return gaEssentialOCL.getBinaryOperatorCSAccess();
	}
	
	public ParserRule getBinaryOperatorCSRule() {
		return getBinaryOperatorCSAccess().getRule();
	}

	//InfixOperatorCS returns BinaryOperatorCS:
	//	name=InfixOperator;
	public EssentialOCLGrammarAccess.InfixOperatorCSElements getInfixOperatorCSAccess() {
		return gaEssentialOCL.getInfixOperatorCSAccess();
	}
	
	public ParserRule getInfixOperatorCSRule() {
		return getInfixOperatorCSAccess().getRule();
	}

	//NavigationOperatorCS:
	//	name=NavigationOperator;
	public EssentialOCLGrammarAccess.NavigationOperatorCSElements getNavigationOperatorCSAccess() {
		return gaEssentialOCL.getNavigationOperatorCSAccess();
	}
	
	public ParserRule getNavigationOperatorCSRule() {
		return getNavigationOperatorCSAccess().getRule();
	}

	//PrefixedExpCS returns ExpCS:
	//	PrimaryExpCS | {PrefixExpCS} ownedOperator+=UnaryOperatorCS+ ownedExpression=PrimaryExpCS;
	public EssentialOCLGrammarAccess.PrefixedExpCSElements getPrefixedExpCSAccess() {
		return gaEssentialOCL.getPrefixedExpCSAccess();
	}
	
	public ParserRule getPrefixedExpCSRule() {
		return getPrefixedExpCSAccess().getRule();
	}

	//UnaryOperatorCS:
	//	name=PrefixOperator;
	public EssentialOCLGrammarAccess.UnaryOperatorCSElements getUnaryOperatorCSAccess() {
		return gaEssentialOCL.getUnaryOperatorCSAccess();
	}
	
	public ParserRule getUnaryOperatorCSRule() {
		return getUnaryOperatorCSAccess().getRule();
	}

	//PrimaryExpCS returns ExpCS:
	//	NavigatingExpCS | SelfExpCS | PrimitiveLiteralExpCS | TupleLiteralExpCS | CollectionLiteralExpCS | TypeLiteralExpCS |
	//	LetExpCS | IfExpCS | NestedExpCS;
	public EssentialOCLGrammarAccess.PrimaryExpCSElements getPrimaryExpCSAccess() {
		return gaEssentialOCL.getPrimaryExpCSAccess();
	}
	
	public ParserRule getPrimaryExpCSRule() {
		return getPrimaryExpCSAccess().getRule();
	}

	//NameExpCS:
	//	(namespace+=[pivot::Namespace|UnrestrictedName] "::" (namespace+=[pivot::Namespace|UnreservedName] "::")*)
	//	element=[pivot::NamedElement|UnreservedName] | element=[pivot::NamedElement|UnrestrictedName];
	public EssentialOCLGrammarAccess.NameExpCSElements getNameExpCSAccess() {
		return gaEssentialOCL.getNameExpCSAccess();
	}
	
	public ParserRule getNameExpCSRule() {
		return getNameExpCSAccess().getRule();
	}

	//IndexExpCS returns NamedExpCS:
	//	NameExpCS ({IndexExpCS.namedExp=current} "[" firstIndexes+=ExpCS ("," firstIndexes+=ExpCS)* "]" ("["
	//	secondIndexes+=ExpCS ("," secondIndexes+=ExpCS)* "]")?)?;
	public EssentialOCLGrammarAccess.IndexExpCSElements getIndexExpCSAccess() {
		return gaEssentialOCL.getIndexExpCSAccess();
	}
	
	public ParserRule getIndexExpCSRule() {
		return getIndexExpCSAccess().getRule();
	}

	////	({PreExpCS.name=current} '@' 'pre')?	-- defined by Complete OCL
	//
	//NavigatingExpCS_Base returns NamedExpCS:
	//	IndexExpCS;
	public EssentialOCLGrammarAccess.NavigatingExpCS_BaseElements getNavigatingExpCS_BaseAccess() {
		return gaEssentialOCL.getNavigatingExpCS_BaseAccess();
	}
	
	public ParserRule getNavigatingExpCS_BaseRule() {
		return getNavigatingExpCS_BaseAccess().getRule();
	}

	//// For Xtext 1.0.0, this rule is very sensitive to the 65536 byte limit, so
	//
	////  keep it as simple as possible and avoid backtracking.
	//
	//NavigatingExpCS returns NamedExpCS:
	//	NavigatingExpCS_Base ({NavigatingExpCS.namedExp=current} "(" (argument+=NavigatingArgCS
	//	argument+=NavigatingCommaArgCS* (argument+=NavigatingSemiArgCS argument+=NavigatingCommaArgCS*)?
	//	(argument+=NavigatingBarArgCS argument+=NavigatingCommaArgCS*)?)? ")")?;
	public EssentialOCLGrammarAccess.NavigatingExpCSElements getNavigatingExpCSAccess() {
		return gaEssentialOCL.getNavigatingExpCSAccess();
	}
	
	public ParserRule getNavigatingExpCSRule() {
		return getNavigatingExpCSAccess().getRule();
	}

	//NavigatingArgCS:
	//	name=NavigatingArgExpCS (":" ownedType=TypeExpCS)? ("=" init=ExpCS)?;
	public EssentialOCLGrammarAccess.NavigatingArgCSElements getNavigatingArgCSAccess() {
		return gaEssentialOCL.getNavigatingArgCSAccess();
	}
	
	public ParserRule getNavigatingArgCSRule() {
		return getNavigatingArgCSAccess().getRule();
	}

	//NavigatingBarArgCS returns NavigatingArgCS:
	//	prefix="|" name=NavigatingArgExpCS (":" ownedType=TypeExpCS)? ("=" init=ExpCS)?;
	public EssentialOCLGrammarAccess.NavigatingBarArgCSElements getNavigatingBarArgCSAccess() {
		return gaEssentialOCL.getNavigatingBarArgCSAccess();
	}
	
	public ParserRule getNavigatingBarArgCSRule() {
		return getNavigatingBarArgCSAccess().getRule();
	}

	//NavigatingCommaArgCS returns NavigatingArgCS:
	//	prefix="," name=NavigatingArgExpCS (":" ownedType=TypeExpCS)? ("=" init=ExpCS)?;
	public EssentialOCLGrammarAccess.NavigatingCommaArgCSElements getNavigatingCommaArgCSAccess() {
		return gaEssentialOCL.getNavigatingCommaArgCSAccess();
	}
	
	public ParserRule getNavigatingCommaArgCSRule() {
		return getNavigatingCommaArgCSAccess().getRule();
	}

	//NavigatingSemiArgCS returns NavigatingArgCS:
	//	prefix=";" name=NavigatingArgExpCS (":" ownedType=TypeExpCS)? ("=" init=ExpCS)?;
	public EssentialOCLGrammarAccess.NavigatingSemiArgCSElements getNavigatingSemiArgCSAccess() {
		return gaEssentialOCL.getNavigatingSemiArgCSAccess();
	}
	
	public ParserRule getNavigatingSemiArgCSRule() {
		return getNavigatingSemiArgCSAccess().getRule();
	}

	//// Intended to be overridden
	//
	////	'?'	-- defined by Complete OCL
	//
	//NavigatingArgExpCS returns ExpCS:
	//	ExpCS;
	public EssentialOCLGrammarAccess.NavigatingArgExpCSElements getNavigatingArgExpCSAccess() {
		return gaEssentialOCL.getNavigatingArgExpCSAccess();
	}
	
	public ParserRule getNavigatingArgExpCSRule() {
		return getNavigatingArgExpCSAccess().getRule();
	}

	//IfExpCS:
	//	"if" condition=ExpCS "then" thenExpression=ExpCS "else" elseExpression=ExpCS "endif";
	public EssentialOCLGrammarAccess.IfExpCSElements getIfExpCSAccess() {
		return gaEssentialOCL.getIfExpCSAccess();
	}
	
	public ParserRule getIfExpCSRule() {
		return getIfExpCSAccess().getRule();
	}

	//LetExpCS:
	//	"let" variable+=LetVariableCS ("," variable+=LetVariableCS)* "in" in=ExpCS;
	public EssentialOCLGrammarAccess.LetExpCSElements getLetExpCSAccess() {
		return gaEssentialOCL.getLetExpCSAccess();
	}
	
	public ParserRule getLetExpCSRule() {
		return getLetExpCSAccess().getRule();
	}

	//LetVariableCS:
	//	name=UnrestrictedName (":" ownedType=TypeExpCS)? "=" initExpression=ExpCS;
	public EssentialOCLGrammarAccess.LetVariableCSElements getLetVariableCSAccess() {
		return gaEssentialOCL.getLetVariableCSAccess();
	}
	
	public ParserRule getLetVariableCSRule() {
		return getLetVariableCSAccess().getRule();
	}

	//NestedExpCS:
	//	"(" source=ExpCS ")";
	public EssentialOCLGrammarAccess.NestedExpCSElements getNestedExpCSAccess() {
		return gaEssentialOCL.getNestedExpCSAccess();
	}
	
	public ParserRule getNestedExpCSRule() {
		return getNestedExpCSAccess().getRule();
	}

	//SelfExpCS:
	//	{SelfExpCS} "self";
	public EssentialOCLGrammarAccess.SelfExpCSElements getSelfExpCSAccess() {
		return gaEssentialOCL.getSelfExpCSAccess();
	}
	
	public ParserRule getSelfExpCSRule() {
		return getSelfExpCSAccess().getRule();
	}
}
