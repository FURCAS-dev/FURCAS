/**
* Essential OCL Lexer
* <copyright>
*
* Copyright (c) 2005, 2009 IBM Corporation and others.
* All rights reserved.   This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   IBM - Initial API and implementation
*   E.D.Willink - Lexer and Parser refactoring to support extensibility and flexible error handling
*   Borland - Bug 242880
*   E.D.Willink - Bug 292112
* </copyright>
*
* $Id: OCLLexerprs.java,v 1.11 2009/10/23 21:26:55 ewillink Exp $
*/
/**
* Complete OCL Lexer
* <copyright>
*
* Copyright (c) 2005, 2009 IBM Corporation and others.
* All rights reserved.   This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   IBM - Initial API and implementation
*   E.D.Willink - Bug 292112, 292594
* </copyright>
*/

package org.eclipse.ocl.parser;

public class OCLLexerprs implements lpg.lpgjavaruntime.ParseTable, OCLLexersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            1,1,3,3,3,1,2,2,1,1,
            5,1,1,1,1,1,1,1,1,1,
            1,2,2,2,1,1,1,1,2,1,
            1,1,2,1,1,1,1,2,1,1,
            2,2,3,2,2,0,1,2,2,2,
            1,2,3,2,3,3,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            2,1,2,2,2,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,2,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,2,
            2,1,2,1,2,0,1,3,1,1,
            2,1
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            23,23,23,23,23,23,23,23,23,23,
            23,23,23,23,23,23,23,23,23,23,
            23,23,23,23,23,23,23,23,23,23,
            23,23,23,23,23,23,14,23,15,25,
            26,26,26,28,28,28,28,29,29,27,
            27,7,7,31,16,16,16,11,11,11,
            11,11,2,2,2,2,3,3,3,3,
            3,3,3,3,3,3,3,3,3,3,
            3,3,3,3,3,3,3,3,3,3,
            3,3,4,4,4,4,4,4,4,4,
            4,4,4,4,4,4,4,4,4,4,
            4,4,4,4,4,4,4,4,1,1,
            1,1,1,1,1,1,1,1,18,18,
            30,30,24,24,24,24,24,34,34,34,
            34,34,34,34,34,34,34,34,34,34,
            34,34,34,34,34,34,34,34,34,34,
            34,34,34,34,34,34,34,19,19,19,
            19,19,19,19,19,19,19,19,19,19,
            19,19,19,19,19,19,19,19,19,19,
            19,19,19,19,19,19,5,5,5,5,
            5,5,5,5,5,5,5,5,5,5,
            5,5,5,5,5,5,5,5,5,5,
            5,5,5,5,20,20,8,8,35,35,
            35,35,9,17,17,17,17,32,32,32,
            32,32,32,32,32,36,36,36,36,21,
            21,21,21,21,10,10,10,10,10,10,
            6,22,37,37,12,12,13,13,33,23,
            23,23,23,988,410,405,405,405,1197,2,
            366,1236,52,1294,417,1295,304,35,37,1091,
            134,133,133,133,1186,281,278,289,404,9,
            424,281,1067,437,420,1087,422,309,430,430,
            430,430,430,430,392,430,430,430,1297,354,
            342,309,430,430,430,430,430,430,1299,430,
            430,430,1184,354,361,406,371,371,371,371,
            371,371,100,371,371,371,1301,371,891,386,
            386,386,386,386,600,265,265,265,265,265,
            265,1198,265,265,265,1302,1171,52,386,386,
            386,697,265,265,265,265,265,265,1303,265,
            265,265,42,1306,294,386,794,263,263,263,
            263,263,1,45,45,45,45,503,232,232,
            232,232,232,45,1298,1307,263,263,263,45,
            1308,45,103,43,43,43,43,1309,7,8,
            1293,412,1310,43,205,50,50,50,50,43,
            1311,43,232,232,1203,444,41,1258,294,1214,
            450,444,1225,452,1247,52,450,461,131,452,
            1260,52,1271,52,461,461,50,461,50,461,
            461
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,96,97,98,0,
            100,101,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            68,69,70,71,72,73,74,75,76,77,
            78,79,80,81,82,83,84,85,86,87,
            88,89,90,91,92,93,94,95,96,97,
            98,102,100,101,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,55,
            56,57,58,59,60,61,62,63,64,65,
            66,67,68,69,70,71,72,73,74,75,
            76,77,78,79,80,81,82,83,84,85,
            86,87,88,89,90,91,92,93,94,95,
            96,97,98,0,0,0,0,103,0,1,
            2,3,4,5,6,7,8,9,10,11,
            12,13,14,15,16,17,18,19,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,39,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,56,57,58,59,60,61,
            62,63,64,65,66,67,68,69,70,71,
            72,73,74,75,76,77,78,79,80,81,
            82,83,84,85,86,87,88,89,90,91,
            92,93,94,95,96,0,1,2,3,4,
            5,6,7,8,9,10,11,12,13,14,
            15,16,17,18,19,20,21,22,23,24,
            25,26,27,28,29,30,31,32,33,34,
            35,36,37,38,39,40,41,42,43,44,
            45,46,47,48,49,50,51,52,53,54,
            55,56,57,58,59,60,61,62,63,64,
            65,66,67,68,69,70,71,72,73,74,
            75,76,77,78,79,80,81,82,83,84,
            85,86,87,88,89,90,91,92,93,94,
            95,96,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            68,69,70,71,72,73,74,75,76,77,
            78,79,80,81,82,83,84,85,86,87,
            88,89,90,91,92,93,94,95,96,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,17,18,19,20,
            21,22,23,24,25,26,27,28,29,30,
            31,32,33,34,35,36,37,38,39,40,
            41,42,43,44,45,46,47,48,49,50,
            51,52,53,54,55,56,57,58,59,60,
            61,62,63,64,65,66,67,68,69,70,
            71,72,73,74,75,76,77,78,79,80,
            81,82,83,84,85,86,87,88,89,90,
            91,92,93,94,95,96,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,71,72,73,
            74,75,76,77,78,79,80,81,82,83,
            84,85,86,87,88,89,90,91,92,93,
            94,95,96,0,1,2,3,4,5,6,
            7,8,9,10,11,12,13,14,15,16,
            17,18,19,20,21,22,23,24,25,26,
            27,28,29,30,31,32,33,34,35,36,
            37,38,39,40,41,42,43,44,45,46,
            47,48,49,50,51,52,53,54,55,56,
            57,58,59,60,61,62,63,64,65,66,
            67,68,69,70,71,72,73,74,75,76,
            77,78,79,80,81,82,83,84,85,86,
            87,88,89,90,91,92,93,94,95,96,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,0,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,96,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,47,48,49,50,51,52,
            53,54,55,56,57,58,59,60,61,62,
            63,64,65,66,67,68,69,70,71,72,
            73,74,75,76,77,78,0,80,81,82,
            83,84,85,86,87,88,89,90,0,0,
            0,15,0,17,97,98,0,100,101,102,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,17,0,0,0,0,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            0,0,0,0,0,0,0,0,0,79,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,0,14,0,1,2,3,4,
            5,6,7,8,9,10,0,0,15,16,
            0,16,0,1,2,3,4,5,6,7,
            8,9,10,0,1,2,3,4,5,6,
            7,8,9,10,0,1,2,3,4,5,
            6,7,8,9,10,0,1,2,3,4,
            5,6,7,8,9,10,0,1,2,3,
            4,5,6,7,8,9,10,0,73,0,
            1,2,3,4,5,6,7,8,9,10,
            0,1,2,3,4,5,6,7,8,9,
            10,0,1,2,3,4,5,6,7,8,
            9,10,0,0,0,99,0,0,0,102,
            0,0,0,11,12,0,0,0,0,0,
            0,14,14,13,13,0,0,0,13,0,
            0,0,0,0,0,0,0,70,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,97,98,0,100,101,0,
            0,0,0,0,71,0,72,0,0,0,
            74,0,0,0,0,0,0,75,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,99,99,99,99,0,
            0,0,102,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            461,506,506,506,506,506,506,506,506,506,
            506,506,506,506,506,506,506,506,506,506,
            506,506,506,506,506,506,506,506,506,506,
            506,506,506,506,506,506,506,506,506,506,
            506,506,506,506,506,506,506,506,506,506,
            506,506,506,506,506,506,506,506,506,506,
            506,506,506,506,506,506,506,506,506,506,
            506,506,506,506,412,506,506,506,506,506,
            506,506,506,506,506,506,506,506,505,506,
            506,506,506,506,506,506,506,506,506,461,
            506,506,461,504,504,504,504,504,504,504,
            504,504,504,504,504,504,504,504,504,504,
            504,504,504,504,504,504,504,504,504,504,
            504,504,504,504,504,504,504,504,504,504,
            504,504,504,504,504,504,504,504,504,504,
            504,504,504,504,504,504,504,504,504,504,
            504,504,504,504,504,504,504,504,504,504,
            504,504,504,504,504,504,509,504,504,504,
            504,504,504,504,504,504,504,504,504,504,
            472,504,504,504,504,504,504,504,504,504,
            504,466,504,504,10,511,511,511,511,511,
            511,511,511,511,511,511,511,511,511,511,
            511,511,511,511,511,511,511,511,511,511,
            511,511,511,511,511,511,511,511,511,511,
            511,511,511,511,511,511,511,511,511,511,
            511,511,511,511,511,511,511,511,511,511,
            511,511,511,511,511,511,511,511,511,511,
            511,511,511,511,511,511,511,511,511,511,
            511,511,511,511,511,511,511,511,511,511,
            511,511,511,511,511,511,511,511,511,511,
            511,511,511,46,461,461,461,511,266,430,
            430,430,430,430,430,430,430,430,430,430,
            430,346,430,430,430,430,430,430,430,430,
            430,430,430,430,430,430,430,430,430,430,
            430,430,430,430,430,430,430,430,430,430,
            430,430,430,430,430,430,430,430,430,430,
            430,430,430,430,430,430,430,430,430,430,
            430,430,430,430,430,430,430,430,430,430,
            430,430,430,430,430,430,430,430,430,430,
            430,430,430,430,430,430,430,430,430,430,
            430,430,430,430,397,461,371,371,371,371,
            371,371,371,371,371,371,371,371,365,371,
            371,371,371,371,371,371,371,371,371,371,
            371,371,371,371,371,371,371,371,371,371,
            371,371,371,371,371,371,371,371,371,371,
            371,371,371,371,371,371,371,371,371,371,
            371,371,371,371,371,371,371,371,371,371,
            371,371,371,371,371,371,371,371,371,371,
            371,371,371,371,371,371,371,371,371,371,
            371,371,371,371,371,371,371,371,371,371,
            371,397,461,693,693,693,693,693,693,693,
            693,693,693,693,693,693,693,693,693,693,
            693,693,693,693,693,693,693,693,693,693,
            693,693,693,693,693,693,693,693,693,693,
            693,693,693,693,693,693,693,693,693,693,
            693,693,693,693,693,693,693,693,693,693,
            693,693,693,693,693,693,693,693,693,693,
            693,693,693,693,693,693,693,693,693,693,
            693,693,693,693,693,693,693,693,693,693,
            693,693,693,693,693,693,693,693,693,267,
            726,726,726,726,726,726,726,726,726,726,
            726,726,346,726,726,726,726,726,726,726,
            726,726,726,726,726,726,726,726,726,726,
            726,726,726,726,726,726,726,726,726,726,
            726,726,726,726,726,726,726,726,726,726,
            726,726,726,726,726,726,726,726,726,726,
            726,726,726,726,726,726,726,726,726,726,
            726,726,726,726,726,726,726,726,726,726,
            726,726,726,726,726,726,726,726,726,726,
            726,726,726,726,726,397,461,726,726,726,
            726,726,726,726,726,726,726,726,726,383,
            726,726,726,726,726,726,726,726,726,726,
            726,726,726,726,726,726,726,726,726,726,
            726,726,726,726,726,726,726,726,726,726,
            726,726,726,726,726,726,726,726,726,726,
            726,726,726,726,726,726,726,726,726,726,
            726,726,726,726,726,726,726,726,726,726,
            726,726,726,726,726,726,726,726,726,726,
            726,726,726,726,726,726,726,726,726,726,
            726,726,397,461,724,724,724,724,724,724,
            724,724,724,724,724,724,724,724,724,724,
            724,724,724,724,724,724,724,724,724,724,
            724,724,724,724,724,724,724,724,724,724,
            724,724,724,724,724,724,724,724,724,724,
            724,724,724,724,724,724,724,724,724,724,
            724,724,724,724,724,724,724,724,724,724,
            724,724,724,724,724,724,724,724,729,724,
            724,724,724,724,724,724,724,724,724,724,
            724,724,724,724,724,724,724,724,724,378,
            461,386,386,386,386,386,386,386,386,386,
            386,386,386,386,386,386,386,386,386,386,
            386,386,386,386,386,386,386,386,386,386,
            386,386,386,386,386,386,386,386,386,386,
            386,386,386,386,386,386,386,386,386,386,
            386,386,386,386,386,386,386,386,386,386,
            386,386,386,386,386,386,386,386,386,386,
            386,386,386,386,386,461,386,386,386,386,
            386,386,386,386,386,386,386,386,386,386,
            386,386,386,386,386,386,378,461,410,410,
            410,410,410,410,410,410,410,410,405,405,
            335,328,305,332,482,405,405,405,405,405,
            405,405,405,405,405,405,405,405,405,405,
            405,405,405,405,405,405,405,405,405,405,
            405,405,405,405,405,405,405,405,405,405,
            405,405,405,405,405,405,405,405,405,405,
            405,405,405,405,405,405,405,417,283,285,
            474,476,348,491,730,307,20,495,488,489,
            486,487,733,492,302,318,478,479,461,461,
            461,485,461,484,417,417,19,417,417,321,
            1,595,595,595,595,595,595,595,595,595,
            595,594,594,483,461,461,461,461,594,594,
            594,594,594,594,594,594,594,594,594,594,
            594,594,594,594,594,594,594,594,594,594,
            594,594,594,594,594,594,594,594,594,594,
            594,594,594,594,594,594,594,594,594,594,
            594,594,594,594,594,594,594,594,594,594,
            461,461,461,461,461,461,461,461,461,596,
            39,513,513,513,513,513,513,513,513,513,
            513,294,294,14,2015,461,281,281,281,281,
            281,281,281,281,281,281,461,461,490,510,
            461,442,461,444,444,444,444,444,444,444,
            444,444,444,461,450,450,450,450,450,450,
            450,450,450,450,461,452,452,452,452,452,
            452,452,452,452,452,54,513,513,513,513,
            513,513,513,513,513,513,53,513,513,513,
            513,513,513,513,513,513,513,12,439,56,
            513,513,513,513,513,513,513,513,513,513,
            55,513,513,513,513,513,513,513,513,513,
            513,39,434,434,434,434,434,434,434,434,
            434,434,9,270,32,460,16,6,36,465,
            461,260,461,294,294,3,132,51,130,136,
            264,328,499,721,721,461,461,461,721,461,
            461,461,461,461,461,461,461,592,461,461,
            461,461,461,461,461,461,461,461,461,461,
            461,461,461,461,461,461,461,461,461,461,
            461,461,461,461,592,592,461,592,592,461,
            461,461,461,461,732,461,494,461,461,461,
            286,461,461,461,461,461,461,722,461,461,
            461,461,461,461,461,461,461,461,461,461,
            461,461,461,461,461,461,461,461,461,461,
            461,461,461,461,461,1,39,12,1,461,
            461,461,267
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int getErrorSymbol() { return 0; }
    public final int getScopeUbound() { return 0; }
    public final int getScopeSize() { return 0; }
    public final int getMaxNameLength() { return 0; }

    public final static int
           NUM_STATES        = 45,
           NT_OFFSET         = 103,
           LA_STATE_OFFSET   = 733,
           MAX_LA            = 2,
           NUM_RULES         = 272,
           NUM_NONTERMINALS  = 38,
           NUM_SYMBOLS       = 141,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 273,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 99,
           EOLT_SYMBOL       = 104,
           ACCEPT_ACTION     = 460,
           ERROR_ACTION      = 461;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
