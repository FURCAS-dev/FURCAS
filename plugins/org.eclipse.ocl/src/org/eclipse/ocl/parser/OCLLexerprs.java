/**
* Essential OCL Lexer
* <copyright>
*
* Copyright (c) 2005, 2009 IBM Corporation and others.
* All rights reserved.   This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   IBM - Initial API and implementation
*   E.D.Willink - Lexer and Parser refactoring to support extensibility and flexible error handling
*   Borland - Bug 242880
*   E.D.Willink - Bug 292112
*   Adolfo Sanchez-Barbudo Herrera (Open Canarias) - LPG v 2.0.17 adoption (242153)
*   Adolfo Sanchez-Barbudo Herrera (Open Canarias) - Introducing new LPG templates (299396)
*
* </copyright>
*
* $Id: OCLLexerprs.java,v 1.16 2010/01/25 11:10:05 asanchez Exp $
*/
/**
* Complete OCL Lexer
* <copyright>
*
* Copyright (c) 2005, 2009 IBM Corporation and others.
* All rights reserved.   This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   IBM - Initial API and implementation
*   E.D.Willink - Bug 292112, 292594
*   Adolfo Sanchez-Barbudo Herrera (Open Canarias) - LPG v 2.0.17 adoption (242153)
*   Adolfo Sanchez-Barbudo Herrera (Open Canarias) - Introducing new LPG templates (299396)
*
* </copyright>
*/

package org.eclipse.ocl.parser;

public class OCLLexerprs implements lpg.runtime.ParseTable, OCLLexersym {
    public final static int ERROR_SYMBOL = 0;
    public final int getErrorSymbol() { return ERROR_SYMBOL; }

    public final static int SCOPE_UBOUND = 0;
    public final int getScopeUbound() { return SCOPE_UBOUND; }

    public final static int SCOPE_SIZE = 0;
    public final int getScopeSize() { return SCOPE_SIZE; }

    public final static int MAX_NAME_LENGTH = 0;
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int NUM_STATES = 40;
    public final int getNumStates() { return NUM_STATES; }

    public final static int NT_OFFSET = 103;
    public final int getNtOffset() { return NT_OFFSET; }

    public final static int LA_STATE_OFFSET = 709;
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }

    public final static int MAX_LA = 2;
    public final int getMaxLa() { return MAX_LA; }

    public final static int NUM_RULES = 267;
    public final int getNumRules() { return NUM_RULES; }

    public final static int NUM_NONTERMINALS = 35;
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }

    public final static int NUM_SYMBOLS = 138;
    public final int getNumSymbols() { return NUM_SYMBOLS; }

    public final static int SEGMENT_SIZE = 8192;
    public final int getSegmentSize() { return SEGMENT_SIZE; }

    public final static int START_STATE = 268;
    public final int getStartState() { return START_STATE; }

    public final static int IDENTIFIER_SYMBOL = 0;
    public final int getIdentifier_SYMBOL() { return IDENTIFIER_SYMBOL; }

    public final static int EOFT_SYMBOL = 102;
    public final int getEoftSymbol() { return EOFT_SYMBOL; }

    public final static int EOLT_SYMBOL = 104;
    public final int getEoltSymbol() { return EOLT_SYMBOL; }

    public final static int ACCEPT_ACTION = 441;
    public final int getAcceptAction() { return ACCEPT_ACTION; }

    public final static int ERROR_ACTION = 442;
    public final int getErrorAction() { return ERROR_ACTION; }

    public final static boolean BACKTRACK = false;
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int getStartSymbol() { return lhs(0); }
    public final boolean isValidForParser() { return OCLLexersym.isValidForParser; }


    public interface IsNullable {
        public final static byte isNullable[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,1,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,1,
            0,0,0,0,0,0,0,0
        };
    };
    public final static byte isNullable[] = IsNullable.isNullable;
    public final boolean isNullable(int index) { return isNullable[index] != 0; }

    public interface ProsthesesIndex {
        public final static byte prosthesesIndex[] = {0,
            19,22,23,24,27,32,14,21,29,34,
            5,35,7,8,16,17,20,26,28,33,
            2,3,4,6,9,10,11,12,13,15,
            18,25,30,31,1
        };
    };
    public final static byte prosthesesIndex[] = ProsthesesIndex.prosthesesIndex;
    public final int prosthesesIndex(int index) { return prosthesesIndex[index]; }

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            1,3,3,3,3,1,2,2,1,1,
            5,1,1,1,1,1,1,1,1,1,
            1,2,2,2,1,1,1,1,2,1,
            1,1,2,1,1,1,1,2,1,1,
            2,2,3,2,2,0,1,2,2,2,
            1,2,3,2,3,3,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            2,1,2,2,2,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            2,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,2,1,
            2,0,1,1,1,2,1
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            21,21,21,21,21,21,21,21,21,21,
            21,21,21,21,21,21,21,21,21,21,
            21,21,21,21,21,21,21,21,21,21,
            21,21,21,21,21,21,13,21,14,24,
            25,25,25,27,27,27,27,28,28,26,
            26,7,7,30,15,15,15,8,8,8,
            8,8,2,2,2,2,3,3,3,3,
            3,3,3,3,3,3,3,3,3,3,
            3,3,3,3,3,3,3,3,3,3,
            3,3,4,4,4,4,4,4,4,4,
            4,4,4,4,4,4,4,4,4,4,
            4,4,4,4,4,4,4,4,1,1,
            1,1,1,1,1,1,1,1,17,17,
            29,29,22,22,22,22,32,32,32,32,
            32,32,32,32,32,32,32,32,32,32,
            32,32,32,32,32,32,32,32,32,32,
            32,32,32,32,32,32,18,18,18,18,
            18,18,18,18,18,18,18,18,18,18,
            18,18,18,18,18,18,18,18,18,18,
            18,18,18,18,18,5,5,5,5,5,
            5,5,5,5,5,5,5,5,5,5,
            5,5,5,5,5,5,5,5,5,5,
            5,5,5,19,19,9,9,33,33,33,
            33,6,16,16,16,16,31,31,31,31,
            31,31,31,31,34,34,34,34,20,20,
            20,20,20,10,10,10,10,10,23,23,
            12,12,11,11,21,21,21,21,792,420,
            415,415,415,987,277,359,423,1036,52,998,
            277,35,37,894,134,133,133,133,1058,279,
            283,1096,306,9,407,1097,131,288,379,501,
            427,427,427,427,427,427,1102,870,427,427,
            386,345,501,427,427,427,427,427,427,7,
            8,427,427,395,345,501,427,427,427,427,
            427,427,1047,52,427,427,405,345,598,362,
            362,362,362,362,362,695,261,261,261,261,
            261,261,1098,302,261,261,1099,362,362,973,
            52,362,404,259,259,259,259,259,259,1,
            45,45,45,45,42,1103,273,45,1093,1094,
            369,259,259,1060,52,45,1000,45,307,231,
            231,231,231,231,41,1104,273,398,102,43,
            43,43,43,1071,52,1109,43,203,50,50,
            50,50,1003,332,43,1110,43,1014,383,332,
            1111,231,231,1112,383,1025,403,1095,442,442,
            442,442,403,442,442,442,442,442,50,50,
            442,442
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,96,97,98,99,
            100,0,1,2,3,4,5,6,7,8,
            9,10,11,12,13,14,15,16,17,18,
            19,20,21,22,23,24,25,26,27,28,
            29,30,31,32,33,34,35,36,37,38,
            39,40,41,42,43,44,45,46,47,48,
            49,50,51,52,53,54,55,56,57,58,
            59,60,61,62,63,64,65,66,67,68,
            69,70,71,72,73,74,75,76,77,78,
            79,80,81,82,83,84,85,86,87,88,
            89,90,91,92,93,94,95,96,97,98,
            99,100,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            68,69,70,71,72,73,74,75,76,77,
            78,79,80,81,82,83,84,85,86,87,
            88,89,90,91,92,93,94,95,96,97,
            98,0,0,0,0,103,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,71,72,73,
            74,75,76,77,78,79,80,81,82,83,
            84,85,86,87,88,89,90,91,92,93,
            94,95,96,0,1,2,3,4,5,6,
            7,8,9,10,11,12,13,14,15,16,
            17,18,19,20,21,22,23,24,25,26,
            27,28,29,30,31,32,33,34,35,36,
            37,38,39,40,41,42,43,44,45,46,
            47,48,49,50,51,52,53,54,55,56,
            57,58,59,60,61,62,63,64,65,66,
            67,68,69,70,71,72,73,74,75,76,
            77,78,79,80,81,82,83,84,85,86,
            87,88,89,90,91,92,93,94,95,96,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,0,75,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,96,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,47,48,49,50,51,52,
            53,54,55,56,57,58,59,60,61,62,
            63,64,65,66,67,68,69,70,71,72,
            73,74,75,76,77,78,79,80,81,82,
            83,84,85,86,87,88,89,0,91,92,
            93,94,95,96,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,55,
            56,57,58,59,60,61,62,63,64,65,
            66,67,68,69,70,71,72,73,0,75,
            76,77,78,79,80,81,82,83,84,85,
            86,87,88,89,90,91,92,93,94,95,
            96,0,1,2,3,4,5,6,7,8,
            9,10,11,12,13,14,15,16,17,18,
            19,20,21,22,23,24,25,26,27,28,
            29,30,31,32,33,34,35,36,37,38,
            39,40,41,42,43,44,45,46,47,48,
            49,50,51,52,53,54,55,56,57,58,
            59,60,61,62,63,64,65,66,67,68,
            69,70,71,72,73,74,75,76,77,0,
            79,80,81,82,83,84,85,86,87,88,
            89,90,0,14,0,16,0,0,97,98,
            99,100,101,0,1,2,3,4,5,6,
            7,8,9,10,11,12,0,0,0,0,
            17,18,19,20,21,22,23,24,25,26,
            27,28,29,30,31,32,33,34,35,36,
            37,38,39,40,41,42,43,44,45,46,
            47,48,49,50,51,52,53,54,55,56,
            57,58,59,60,61,62,63,64,65,66,
            67,68,0,0,0,0,0,0,0,0,
            0,78,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,0,1,2,3,
            4,5,6,7,8,9,10,0,0,0,
            0,15,0,1,2,3,4,5,6,7,
            8,9,10,0,1,2,3,4,5,6,
            7,8,9,10,0,1,2,3,4,5,
            6,7,8,9,10,0,1,2,3,4,
            5,6,7,8,9,10,0,1,2,3,
            4,5,6,7,8,9,10,0,72,0,
            1,2,3,4,5,6,7,8,9,10,
            0,1,2,3,4,5,6,7,8,9,
            10,0,1,2,3,4,5,6,7,8,
            9,10,0,0,0,0,0,0,0,102,
            101,0,0,0,11,12,14,15,0,0,
            0,0,0,16,13,13,0,0,0,0,
            0,0,0,0,0,0,69,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,97,98,99,100,0,0,
            0,0,0,0,0,70,0,71,74,0,
            0,73,0,0,0,0,0,0,0,0,
            0,0,74,0,0,0,0,0,0,0,
            0,0,0,0,0,101,0,0,0,0,
            0,0,0,0,101,0,0,0,0,0,
            0,102,102,102,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            442,487,487,487,487,487,487,487,487,487,
            487,487,487,487,487,487,487,487,487,487,
            487,487,487,487,487,487,487,487,487,487,
            487,487,487,487,487,487,487,487,487,487,
            487,487,487,487,487,487,487,487,487,487,
            487,487,487,487,487,487,487,487,487,487,
            487,487,487,487,487,487,487,487,487,487,
            487,487,487,398,487,487,487,487,487,487,
            487,487,487,487,487,487,487,486,487,487,
            487,487,487,487,487,487,487,487,487,487,
            487,442,485,485,485,485,485,485,485,485,
            485,485,485,485,485,485,485,485,485,485,
            485,485,485,485,485,485,485,485,485,485,
            485,485,485,485,485,485,485,485,485,485,
            485,485,485,485,485,485,485,485,485,485,
            485,485,485,485,485,485,485,485,485,485,
            485,485,485,485,485,485,485,485,485,485,
            485,485,485,485,490,485,485,485,485,485,
            485,485,485,485,485,485,485,485,453,485,
            485,485,485,485,485,485,485,485,485,485,
            485,485,10,492,492,492,492,492,492,492,
            492,492,492,492,492,492,492,492,492,492,
            492,492,492,492,492,492,492,492,492,492,
            492,492,492,492,492,492,492,492,492,492,
            492,492,492,492,492,492,492,492,492,492,
            492,492,492,492,492,492,492,492,492,492,
            492,492,492,492,492,492,492,492,492,492,
            492,492,492,492,492,492,492,492,492,492,
            492,492,492,492,492,492,492,492,492,492,
            492,492,492,492,492,492,492,492,492,492,
            492,46,442,442,442,492,442,673,673,673,
            673,673,673,673,673,673,673,673,673,673,
            673,673,673,673,673,673,673,673,673,673,
            673,673,673,673,673,673,673,673,673,673,
            673,673,673,673,673,673,673,673,673,673,
            673,673,673,673,673,673,673,673,673,673,
            673,673,673,673,673,673,673,673,673,673,
            673,673,673,673,673,673,673,673,673,673,
            673,673,673,673,673,673,673,673,673,673,
            673,673,673,673,673,673,673,673,673,673,
            673,673,673,442,701,701,701,701,701,701,
            701,701,701,701,701,701,701,701,701,701,
            701,701,701,701,701,701,701,701,701,701,
            701,701,701,701,701,701,701,701,701,701,
            701,701,701,701,701,701,701,701,701,701,
            701,701,701,701,701,701,701,701,701,701,
            701,701,701,701,701,701,701,701,701,701,
            701,701,701,701,701,701,701,701,701,701,
            701,701,701,701,701,701,701,701,701,701,
            701,701,701,444,701,701,701,701,701,388,
            262,427,427,427,427,427,427,427,427,427,
            427,427,427,427,427,427,427,427,427,427,
            427,427,427,427,427,427,427,427,427,427,
            427,427,427,427,427,427,427,427,427,427,
            427,427,427,427,427,427,427,427,427,427,
            427,427,427,427,427,427,427,427,427,427,
            427,427,427,427,427,427,427,427,427,427,
            427,427,427,427,442,427,427,427,427,427,
            427,427,427,427,427,427,427,427,427,427,
            427,427,427,427,427,427,388,442,362,362,
            362,362,362,362,362,362,362,362,362,362,
            362,362,362,362,362,362,362,362,362,362,
            362,362,362,362,362,362,362,362,362,362,
            362,362,362,362,362,362,362,362,362,362,
            362,362,362,362,362,362,362,362,362,362,
            362,362,362,362,362,362,362,362,362,362,
            362,362,362,362,362,362,362,362,362,362,
            362,362,362,362,362,362,362,362,362,362,
            362,362,362,362,362,362,362,442,362,362,
            362,362,362,388,263,703,703,703,703,703,
            703,703,703,703,703,703,703,703,703,703,
            703,703,703,703,703,703,703,703,703,703,
            703,703,703,703,703,703,703,703,703,703,
            703,703,703,703,703,703,703,703,703,703,
            703,703,703,703,703,703,703,703,703,703,
            703,703,703,703,703,703,703,703,703,703,
            703,703,703,703,703,703,703,703,442,703,
            703,703,703,703,703,703,703,703,703,703,
            703,703,703,703,703,703,703,703,703,703,
            388,442,420,420,420,420,420,420,420,420,
            420,420,415,415,375,352,378,463,415,415,
            415,415,415,415,415,415,415,415,415,415,
            415,415,415,415,415,415,415,415,415,415,
            415,415,415,415,415,415,415,415,415,415,
            415,415,415,415,415,415,415,415,415,415,
            415,415,415,415,415,415,415,415,415,415,
            423,291,295,455,457,325,472,706,299,20,
            476,469,470,467,468,709,473,307,356,459,
            460,338,442,466,442,465,442,442,423,423,
            423,423,312,1,576,576,576,576,576,576,
            576,576,576,576,575,575,442,442,442,442,
            575,575,575,575,575,575,575,575,575,575,
            575,575,575,575,575,575,575,575,575,575,
            575,575,575,575,575,575,575,575,575,575,
            575,575,575,575,575,575,575,575,575,575,
            575,575,575,575,575,575,575,575,575,575,
            575,575,442,442,442,442,442,442,442,442,
            442,577,39,494,494,494,494,494,494,494,
            494,494,494,273,273,1791,442,277,277,277,
            277,277,277,277,277,277,277,442,442,442,
            442,425,442,332,332,332,332,332,332,332,
            332,332,332,442,383,383,383,383,383,383,
            383,383,383,383,442,403,403,403,403,403,
            403,403,403,403,403,54,494,494,494,494,
            494,494,494,494,494,494,53,494,494,494,
            494,494,494,494,494,494,494,12,417,56,
            494,494,494,494,494,494,494,494,494,494,
            55,494,494,494,494,494,494,494,494,494,
            494,39,412,412,412,412,412,412,412,412,
            412,412,14,9,260,265,32,19,16,441,
            447,6,36,442,273,273,471,491,442,132,
            51,130,442,464,375,480,442,442,442,442,
            442,442,442,442,442,442,573,442,442,442,
            442,442,442,442,442,442,442,442,442,442,
            442,442,442,442,442,442,442,442,442,442,
            442,442,442,442,573,573,573,573,442,442,
            442,442,442,442,442,708,442,475,263,442,
            442,353,442,442,442,442,442,442,442,442,
            442,442,445,442,442,442,442,442,442,442,
            442,442,442,442,442,263,442,442,442,442,
            442,442,442,442,446,442,442,442,442,442,
            442,1,39,12
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    /**
     * assert(! goto_default);
     */
    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    /**
     * assert(! shift_default);
     */
    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
