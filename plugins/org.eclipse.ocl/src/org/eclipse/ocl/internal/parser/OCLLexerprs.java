/**
* <copyright>
*
* Copyright (c) 2005, 2006 IBM Corporation and others.
* All rights reserved.   This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   IBM - Initial API and implementation
*
* </copyright>
*
* $Id: OCLLexerprs.java,v 1.1 2007/01/25 18:24:35 cdamus Exp $
*/

package org.eclipse.ocl.internal.parser;

public class OCLLexerprs implements lpg.lpgjavaruntime.ParseTable, OCLLexersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            1,3,3,3,1,1,1,1,1,5,
            1,1,1,1,1,1,1,1,1,1,
            2,2,2,1,1,1,1,2,1,1,
            1,2,1,1,2,4,1,2,1,1,
            1,2,2,3,2,2,0,1,2,2,
            2,1,2,1,2,3,2,3,3,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,2,3,1,1,1,1,1,
            2,1,2,2,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            2,2,2,2,2,2,2,2,2,1,
            2,1,2,0,1,3,3,3,3,3,
            3,3,4,4,3,3
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            20,20,20,20,20,20,20,20,20,20,
            20,20,20,20,20,20,20,20,20,20,
            20,20,20,20,20,20,20,20,20,20,
            20,20,20,20,20,20,20,20,20,20,
            21,22,22,22,26,26,26,26,27,27,
            25,25,6,6,34,34,29,13,13,13,
            7,7,7,7,7,2,2,2,2,3,
            3,3,3,3,3,3,3,3,3,3,
            3,3,3,3,3,3,3,3,3,3,
            3,3,3,3,3,4,4,4,4,4,
            4,4,4,4,4,4,4,4,4,4,
            4,4,4,4,4,4,4,4,4,4,
            4,1,1,1,1,1,1,1,1,1,
            1,36,36,36,36,36,36,36,36,37,
            37,37,37,37,37,37,37,37,37,37,
            37,35,35,38,38,38,15,15,39,39,
            28,28,12,12,12,12,31,31,31,31,
            31,31,31,31,31,31,31,31,31,31,
            31,31,31,31,31,31,31,31,31,31,
            31,31,31,31,31,17,17,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            17,17,17,18,18,18,18,18,18,18,
            18,18,18,18,18,18,18,18,18,18,
            18,18,18,18,18,18,18,18,18,18,
            18,8,8,8,8,8,8,8,8,8,
            8,8,8,8,8,8,8,8,8,8,
            8,8,8,8,8,8,8,8,8,14,
            14,14,14,30,30,30,30,30,30,30,
            30,19,19,19,19,19,9,9,9,9,
            9,5,5,5,5,5,5,5,5,5,
            32,32,11,11,10,10,16,23,23,23,
            23,23,23,23,23,23,24,404,483,463,
            463,463,1067,467,484,1018,345,1062,99,436,
            1064,345,1068,485,161,1051,53,332,5,6,
            7,8,470,1071,53,337,481,506,486,486,
            486,486,486,891,399,486,486,443,419,506,
            486,486,486,486,486,1088,53,486,486,457,
            419,506,486,486,486,486,486,1099,53,486,
            486,458,419,602,446,446,446,446,446,1,
            46,46,46,46,1029,375,46,1065,1040,387,
            375,446,446,46,387,1063,46,1112,1111,698,
            313,313,313,313,313,446,452,313,313,794,
            353,475,475,475,1016,353,872,164,163,163,
            163,475,1115,771,1110,475,308,311,311,311,
            311,311,103,44,44,44,44,1069,1113,44,
            1118,1116,1117,1114,311,311,44,1004,53,44,
            205,51,51,51,51,938,164,163,163,163,
            43,486,335,1119,1120,1121,1066,504,504,504,
            504,504,504,504,42,504,335,504,504,504,
            51,51,504,504
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,96,97,0,0,
            100,101,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            68,69,70,71,72,73,74,75,76,77,
            78,79,80,81,82,83,84,85,86,87,
            88,89,90,91,92,93,94,95,96,97,
            0,0,100,101,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,55,
            56,57,58,59,60,61,62,63,64,65,
            66,67,68,69,70,71,72,73,74,75,
            76,77,78,79,80,81,82,83,84,85,
            86,87,88,89,90,91,92,93,94,95,
            96,97,0,0,0,0,102,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,47,48,49,50,51,52,
            53,54,55,56,57,58,59,60,61,62,
            63,64,65,66,67,68,69,70,71,72,
            73,74,75,76,77,78,79,80,81,82,
            83,84,85,86,87,88,89,90,91,92,
            93,94,95,0,1,2,3,4,5,6,
            7,8,9,10,11,12,13,14,15,16,
            17,18,19,20,21,22,23,24,25,26,
            27,28,29,30,31,32,33,34,35,36,
            37,38,39,40,41,42,43,44,45,46,
            47,48,49,50,51,52,53,54,55,56,
            57,58,59,60,61,62,63,64,65,66,
            67,68,69,70,71,72,73,74,75,76,
            77,78,79,80,81,0,83,84,85,86,
            87,88,89,90,0,0,11,0,13,96,
            97,98,0,100,101,0,1,2,3,4,
            5,6,7,8,9,10,11,12,13,14,
            15,16,17,18,19,20,21,22,23,24,
            25,26,27,28,29,30,31,32,33,34,
            35,36,37,38,39,40,41,42,43,44,
            45,46,47,48,49,50,51,52,53,54,
            55,56,57,58,59,60,61,62,63,64,
            65,66,67,68,69,70,71,72,0,74,
            75,76,77,78,79,80,81,82,83,84,
            85,86,87,88,89,90,91,92,93,94,
            95,0,1,2,3,4,5,6,7,8,
            9,10,11,12,13,14,15,16,17,18,
            19,20,21,22,23,24,25,26,27,28,
            29,30,31,32,33,34,35,36,37,38,
            39,40,41,42,43,44,45,46,47,48,
            49,50,51,52,53,54,55,56,57,58,
            59,60,61,62,63,64,65,66,67,68,
            69,70,71,0,73,74,75,76,77,78,
            79,80,81,82,83,84,85,86,87,88,
            89,90,91,92,93,94,95,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,47,48,49,50,51,52,
            53,54,55,56,57,58,59,60,61,62,
            63,64,65,66,67,68,69,70,71,72,
            0,74,75,76,77,78,79,80,81,82,
            83,84,85,86,87,88,89,90,91,92,
            93,94,95,0,1,2,3,4,5,6,
            7,8,9,10,11,12,13,14,15,16,
            17,18,0,20,21,22,23,24,25,26,
            27,28,29,30,31,32,33,34,35,36,
            37,38,39,40,41,42,43,44,45,46,
            47,48,49,50,51,52,53,54,55,56,
            57,58,59,60,61,62,63,64,65,66,
            67,68,69,70,0,72,0,0,98,76,
            77,0,1,2,3,4,5,6,7,8,
            9,10,11,12,13,14,15,16,17,18,
            0,20,21,22,23,24,25,26,27,28,
            29,30,31,32,33,34,35,36,37,38,
            39,40,41,42,43,44,45,46,47,48,
            49,50,51,52,53,54,55,56,57,58,
            59,60,61,62,63,64,65,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,66,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,47,48,49,50,51,52,
            53,54,55,56,57,58,59,60,61,62,
            63,64,65,0,1,2,3,4,5,6,
            7,8,9,10,11,0,13,0,1,2,
            3,4,5,6,7,8,9,10,0,1,
            2,3,4,5,6,7,8,9,10,0,
            1,2,3,4,5,6,7,8,9,10,
            0,1,2,3,4,5,6,7,8,9,
            10,0,0,0,0,0,0,0,0,66,
            0,1,2,3,4,5,6,7,8,9,
            10,19,67,68,17,68,69,0,1,2,
            3,4,5,6,7,8,9,10,0,1,
            2,3,4,5,6,7,8,9,10,0,
            0,0,0,0,0,0,0,0,0,0,
            0,12,0,14,15,16,12,18,11,67,
            19,0,71,0,19,19,0,74,73,75,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,96,97,0,
            0,100,101,98,0,99,98,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            70,72,73,0,0,73,0,0,0,0,
            0,82,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,98,0,0,
            0,0,99,0,0,0,0,99,99,99,
            0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            504,550,550,550,550,550,550,550,550,550,
            550,550,550,550,550,550,550,550,550,550,
            550,550,550,550,550,550,550,550,550,550,
            550,550,550,550,550,550,550,550,550,550,
            550,550,550,550,550,550,550,550,550,550,
            550,550,550,550,550,550,550,550,550,550,
            550,550,550,550,550,550,550,550,550,550,
            452,550,550,550,550,550,550,549,550,550,
            550,550,550,550,550,550,550,550,550,550,
            550,550,550,550,550,550,550,550,47,504,
            550,550,504,548,548,548,548,548,548,548,
            548,548,548,548,548,548,548,548,548,548,
            548,548,548,548,548,548,548,548,548,548,
            548,548,548,548,548,548,548,548,548,548,
            548,548,548,548,548,548,548,548,548,548,
            548,548,548,548,548,548,548,548,548,548,
            548,548,548,548,548,548,548,548,548,548,
            548,548,553,548,548,548,548,548,548,514,
            548,548,548,548,548,548,548,548,548,548,
            548,548,548,548,548,548,548,548,548,548,
            504,504,548,548,9,555,555,555,555,555,
            555,555,555,555,555,555,555,555,555,555,
            555,555,555,555,555,555,555,555,555,555,
            555,555,555,555,555,555,555,555,555,555,
            555,555,555,555,555,555,555,555,555,555,
            555,555,555,555,555,555,555,555,555,555,
            555,555,555,555,555,555,555,555,555,555,
            555,555,555,555,555,555,555,555,555,555,
            555,555,555,555,555,555,555,555,555,555,
            555,555,555,555,555,555,555,555,555,555,
            555,555,504,504,504,504,555,504,815,815,
            815,815,815,815,815,815,815,815,815,815,
            815,815,815,815,815,815,815,815,815,815,
            815,815,815,815,815,815,815,815,815,815,
            815,815,815,815,815,815,815,815,815,815,
            815,815,815,815,815,815,815,815,815,815,
            815,815,815,815,815,815,815,815,815,815,
            815,815,815,815,815,815,815,815,815,820,
            815,815,815,815,815,815,815,815,815,444,
            815,815,815,815,815,815,815,815,815,815,
            815,815,815,504,483,483,483,483,483,483,
            483,483,483,483,463,463,463,463,463,463,
            463,463,524,463,463,463,463,463,463,463,
            463,463,463,463,463,463,463,463,463,463,
            463,463,463,463,463,463,463,463,463,463,
            463,463,463,463,463,463,463,463,463,463,
            463,463,463,463,463,463,463,463,463,363,
            417,434,516,518,484,393,381,340,407,415,
            418,533,342,357,537,6,530,531,528,529,
            543,534,520,521,504,504,335,504,335,484,
            484,369,504,484,484,314,486,486,486,486,
            486,486,486,486,486,486,486,486,486,486,
            486,486,486,486,486,486,486,486,486,486,
            486,486,486,486,486,486,486,486,486,486,
            486,486,486,486,486,486,486,486,486,486,
            486,486,486,486,486,486,486,486,486,486,
            486,486,486,486,486,486,486,486,486,486,
            486,486,486,486,486,486,486,486,504,486,
            486,486,486,486,486,486,486,444,486,486,
            486,486,486,486,486,486,486,486,486,486,
            486,504,446,446,446,446,446,446,446,446,
            446,446,446,446,446,446,446,446,446,446,
            446,446,446,446,446,446,446,446,446,446,
            446,446,446,446,446,446,446,446,446,446,
            446,446,446,446,446,446,446,446,446,446,
            446,446,446,446,446,446,446,446,446,446,
            446,446,446,446,446,446,446,446,446,446,
            446,446,446,504,446,446,446,446,446,446,
            446,446,446,444,446,446,446,446,446,446,
            446,446,446,446,446,446,446,315,817,817,
            817,817,817,817,817,817,817,817,817,817,
            817,817,817,817,817,817,817,817,817,817,
            817,817,817,817,817,817,817,817,817,817,
            817,817,817,817,817,817,817,817,817,817,
            817,817,817,817,817,817,817,817,817,817,
            817,817,817,817,817,817,817,817,817,817,
            817,817,817,817,817,817,817,817,817,817,
            504,817,817,817,817,817,817,817,817,444,
            817,817,817,817,817,817,817,817,817,817,
            817,817,817,504,353,353,353,353,353,353,
            353,353,353,353,475,475,475,475,475,475,
            475,475,504,475,475,475,475,475,475,475,
            475,475,475,475,475,475,475,475,475,475,
            475,475,475,475,475,475,475,475,475,475,
            475,475,475,475,475,475,475,475,475,475,
            475,475,475,475,475,475,475,475,475,830,
            461,823,822,824,504,393,504,504,508,462,
            825,1,668,668,668,668,668,668,668,668,
            668,668,667,667,667,667,667,667,667,667,
            34,667,667,667,667,667,667,667,667,667,
            667,667,667,667,667,667,667,667,667,667,
            667,667,667,667,667,667,667,667,667,667,
            667,667,667,667,667,667,667,667,667,667,
            667,667,667,667,667,667,667,317,668,668,
            668,668,668,668,668,668,668,668,667,667,
            667,667,667,667,667,667,539,667,667,667,
            667,667,667,667,667,667,667,667,667,667,
            667,667,667,667,667,667,667,667,667,667,
            667,667,667,667,667,667,667,667,667,667,
            667,667,667,667,667,667,667,667,667,667,
            667,667,667,5,557,557,557,557,557,557,
            557,557,557,557,335,13,335,504,345,345,
            345,345,345,345,345,345,345,345,504,375,
            375,375,375,375,375,375,375,375,375,504,
            387,387,387,387,387,387,387,387,387,387,
            57,557,557,557,557,557,557,557,557,557,
            557,11,19,37,31,312,504,504,504,429,
            56,557,557,557,557,557,557,557,557,557,
            557,526,532,554,442,408,404,59,557,557,
            557,557,557,557,557,557,557,557,58,557,
            557,557,557,557,557,557,557,557,557,504,
            15,18,504,162,504,325,322,504,52,160,
            165,809,504,805,808,807,460,806,540,527,
            525,504,665,504,828,827,504,542,315,536,
            504,504,504,504,504,504,504,504,504,504,
            504,504,504,504,504,504,504,665,665,504,
            504,665,665,315,504,503,507,504,504,504,
            504,504,504,504,504,504,504,504,504,504,
            338,810,811,504,504,506,504,504,504,504,
            504,813,504,504,504,504,504,504,504,504,
            504,504,504,504,504,504,504,812,504,504,
            504,504,1,504,504,504,504,5,11,1
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int getErrorSymbol() { return 0; }
    public final int getScopeUbound() { return 0; }
    public final int getScopeSize() { return 0; }
    public final int getMaxNameLength() { return 0; }

    public final static int
           NUM_STATES        = 46,
           NT_OFFSET         = 103,
           LA_STATE_OFFSET   = 830,
           MAX_LA            = 1,
           NUM_RULES         = 326,
           NUM_NONTERMINALS  = 39,
           NUM_SYMBOLS       = 142,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 327,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 99,
           EOLT_SYMBOL       = 104,
           ACCEPT_ACTION     = 503,
           ERROR_ACTION      = 504;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
