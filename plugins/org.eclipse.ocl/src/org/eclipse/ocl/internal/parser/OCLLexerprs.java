/**
* <copyright>
*
* Copyright (c) 2005, 2007 IBM Corporation and others.
* All rights reserved.   This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   IBM - Initial API and implementation
*
* </copyright>
*
* $Id: OCLLexerprs.java,v 1.4 2007/04/24 23:27:58 cdamus Exp $
*/

package org.eclipse.ocl.internal.parser;

public class OCLLexerprs implements lpg.lpgjavaruntime.ParseTable, OCLLexersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            1,3,3,3,1,1,1,1,1,5,
            1,1,1,1,1,1,1,1,1,1,
            2,2,2,1,1,1,1,2,1,1,
            1,2,1,1,2,4,1,2,1,1,
            1,2,2,3,2,2,0,1,2,2,
            2,1,2,1,2,3,2,3,3,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,2,3,1,1,1,1,1,
            2,1,2,2,2,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,2,2,2,2,2,
            2,2,2,2,1,2,1,2,0,1,
            3,3,3,3,3,3,3,4,4,3,
            3
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            20,20,20,20,20,20,20,20,20,20,
            20,20,20,20,20,20,20,20,20,20,
            20,20,20,20,20,20,20,20,20,20,
            20,20,20,20,20,20,20,20,20,20,
            21,22,22,22,26,26,26,26,27,27,
            25,25,6,6,34,34,29,13,13,13,
            7,7,7,7,7,2,2,2,2,3,
            3,3,3,3,3,3,3,3,3,3,
            3,3,3,3,3,3,3,3,3,3,
            3,3,3,3,3,4,4,4,4,4,
            4,4,4,4,4,4,4,4,4,4,
            4,4,4,4,4,4,4,4,4,4,
            4,1,1,1,1,1,1,1,1,1,
            1,36,36,36,36,36,36,36,36,37,
            37,37,37,37,37,37,37,37,37,37,
            37,35,35,38,38,38,15,15,39,39,
            28,28,12,12,12,12,12,31,31,31,
            31,31,31,31,31,31,31,31,31,31,
            31,31,31,31,31,31,31,31,31,31,
            31,31,31,31,31,31,31,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            17,17,17,17,17,17,18,18,18,18,
            18,18,18,18,18,18,18,18,18,18,
            18,18,18,18,18,18,18,18,18,18,
            18,18,18,18,18,8,8,8,8,8,
            8,8,8,8,8,8,8,8,8,8,
            8,8,8,8,8,8,8,8,8,8,
            8,8,8,8,14,14,14,14,30,30,
            30,30,30,30,30,30,19,19,19,19,
            19,9,9,9,9,9,5,5,5,5,
            5,5,5,5,5,32,32,11,11,10,
            10,16,23,23,23,23,23,23,23,23,
            23,24,699,488,468,468,468,773,472,489,
            1045,350,1089,100,441,875,350,1094,490,161,
            1078,53,337,5,6,7,8,475,1098,53,
            342,486,408,491,491,491,491,491,1029,404,
            491,491,448,424,408,491,491,491,491,491,
            1115,53,491,491,462,424,408,491,491,491,
            491,491,1126,53,491,491,463,424,505,451,
            451,451,451,451,1,46,46,46,46,1056,
            380,46,877,1067,392,380,451,451,46,392,
            1024,46,1090,878,602,318,318,318,318,318,
            451,457,318,318,802,358,480,480,480,1025,
            358,881,164,163,163,163,480,1138,1096,1137,
            480,311,316,316,316,316,316,104,44,44,
            44,44,1112,954,44,1143,1139,1140,1141,316,
            316,44,1031,53,44,207,51,51,51,51,
            956,164,163,163,163,43,782,340,1142,1144,
            1145,876,509,509,509,509,509,509,509,42,
            509,340,509,509,509,51,51,509,509
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,96,97,98,0,
            0,101,102,0,1,2,3,4,5,6,
            7,8,9,10,11,12,13,14,15,16,
            17,18,19,20,21,22,23,24,25,26,
            27,28,29,30,31,32,33,34,35,36,
            37,38,39,40,41,42,43,44,45,46,
            47,48,49,50,51,52,53,54,55,56,
            57,58,59,60,61,62,63,64,65,66,
            67,68,69,70,71,72,73,74,75,76,
            77,78,79,80,81,82,83,84,85,86,
            87,88,89,90,91,92,93,94,95,96,
            97,98,0,0,101,102,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,71,72,73,
            74,75,76,77,78,79,80,81,82,83,
            84,85,86,87,88,89,90,91,92,93,
            94,95,96,97,98,0,0,0,0,103,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,96,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,47,48,49,50,51,52,
            53,54,55,56,57,58,59,60,61,62,
            63,64,65,66,67,68,69,70,71,72,
            0,74,75,76,77,78,79,80,81,82,
            83,84,85,86,87,88,89,90,91,92,
            93,94,95,96,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,55,
            56,57,58,59,60,61,62,63,64,65,
            66,67,68,69,70,71,0,73,74,75,
            76,77,78,79,80,81,82,83,84,85,
            86,87,88,89,90,91,92,93,94,95,
            96,0,1,2,3,4,5,6,7,8,
            9,10,11,12,13,14,15,16,17,18,
            19,20,21,22,23,24,25,26,27,28,
            29,30,31,32,33,34,35,36,37,38,
            39,40,41,42,43,44,45,46,47,48,
            49,50,51,52,53,54,55,56,57,58,
            59,60,61,62,63,64,65,66,67,68,
            69,70,71,72,0,74,75,76,77,78,
            79,80,81,82,83,84,85,86,87,88,
            89,90,91,92,93,94,95,96,0,1,
            2,3,4,5,6,7,8,9,10,11,
            12,13,14,15,16,17,18,19,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,39,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,56,57,58,59,60,61,
            62,63,64,65,66,67,68,69,70,71,
            72,73,0,75,76,77,78,79,80,81,
            82,0,84,85,86,87,88,89,90,91,
            0,0,11,0,13,97,98,99,0,101,
            102,0,1,2,3,4,5,6,7,8,
            9,10,11,12,13,14,15,16,17,18,
            0,20,21,22,23,24,25,26,27,28,
            29,30,31,32,33,34,35,36,37,38,
            39,40,41,42,43,44,45,46,47,48,
            49,50,51,52,53,54,55,56,57,58,
            59,60,61,62,63,64,65,66,67,68,
            69,70,100,72,0,0,0,0,77,78,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,0,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,0,70,73,75,
            0,0,76,0,74,0,1,2,3,4,
            5,6,7,8,9,10,11,12,13,14,
            15,16,17,18,99,20,21,22,23,24,
            25,26,27,28,29,30,31,32,33,34,
            35,36,37,38,39,40,41,42,43,44,
            45,46,47,48,49,50,51,52,53,54,
            55,56,57,58,59,60,61,62,63,64,
            65,0,0,0,0,0,73,0,0,74,
            0,1,2,3,4,5,6,7,8,9,
            10,11,19,13,0,1,2,3,4,5,
            6,7,8,9,10,0,1,2,3,4,
            5,6,7,8,9,10,0,1,2,3,
            4,5,6,7,8,9,10,0,1,2,
            3,4,5,6,7,8,9,10,0,0,
            67,67,68,0,66,0,66,0,1,2,
            3,4,5,6,7,8,9,10,19,0,
            17,0,68,69,0,1,2,3,4,5,
            6,7,8,9,10,0,1,2,3,4,
            5,6,7,8,9,10,0,0,0,0,
            0,0,0,0,0,0,0,0,12,12,
            14,15,16,11,18,0,0,19,19,71,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,97,98,0,0,101,
            102,0,0,0,99,0,0,0,0,0,
            0,0,0,0,0,0,0,0,72,73,
            99,0,0,0,0,0,0,0,0,83,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,99,0,0,0,0,
            100,100,0,100,100,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            509,555,555,555,555,555,555,555,555,555,
            555,555,555,555,555,555,555,555,555,555,
            555,555,555,555,555,555,555,555,555,555,
            555,555,555,555,555,555,555,555,555,555,
            555,555,555,555,555,555,555,555,555,555,
            555,555,555,555,555,555,555,555,555,555,
            555,555,555,555,555,555,555,555,555,555,
            457,555,555,555,555,555,555,555,554,555,
            555,555,555,555,555,555,555,555,555,555,
            555,555,555,555,555,555,555,555,555,47,
            509,555,555,509,553,553,553,553,553,553,
            553,553,553,553,553,553,553,553,553,553,
            553,553,553,553,553,553,553,553,553,553,
            553,553,553,553,553,553,553,553,553,553,
            553,553,553,553,553,553,553,553,553,553,
            553,553,553,553,553,553,553,553,553,553,
            553,553,553,553,553,553,553,553,553,553,
            553,553,553,558,553,553,553,553,553,553,
            553,519,553,553,553,553,553,553,553,553,
            553,553,553,553,553,553,553,553,553,553,
            553,553,509,509,553,553,9,560,560,560,
            560,560,560,560,560,560,560,560,560,560,
            560,560,560,560,560,560,560,560,560,560,
            560,560,560,560,560,560,560,560,560,560,
            560,560,560,560,560,560,560,560,560,560,
            560,560,560,560,560,560,560,560,560,560,
            560,560,560,560,560,560,560,560,560,560,
            560,560,560,560,560,560,560,560,560,560,
            560,560,560,560,560,560,560,560,560,560,
            560,560,560,560,560,560,560,560,560,560,
            560,560,560,560,560,509,509,509,509,560,
            509,825,825,825,825,825,825,825,825,825,
            825,825,825,825,825,825,825,825,825,825,
            825,825,825,825,825,825,825,825,825,825,
            825,825,825,825,825,825,825,825,825,825,
            825,825,825,825,825,825,825,825,825,825,
            825,825,825,825,825,825,825,825,825,825,
            825,825,825,825,825,825,825,825,825,825,
            825,825,830,825,825,825,825,825,825,825,
            825,825,825,449,825,825,825,825,825,825,
            825,825,825,825,825,825,825,319,491,491,
            491,491,491,491,491,491,491,491,491,491,
            491,491,491,491,491,491,491,491,491,491,
            491,491,491,491,491,491,491,491,491,491,
            491,491,491,491,491,491,491,491,491,491,
            491,491,491,491,491,491,491,491,491,491,
            491,491,491,491,491,491,491,491,491,491,
            491,491,491,491,491,491,491,491,491,491,
            509,491,491,491,491,491,491,491,491,491,
            449,491,491,491,491,491,491,491,491,491,
            491,491,491,491,509,451,451,451,451,451,
            451,451,451,451,451,451,451,451,451,451,
            451,451,451,451,451,451,451,451,451,451,
            451,451,451,451,451,451,451,451,451,451,
            451,451,451,451,451,451,451,451,451,451,
            451,451,451,451,451,451,451,451,451,451,
            451,451,451,451,451,451,451,451,451,451,
            451,451,451,451,451,451,509,451,451,451,
            451,451,451,451,451,451,451,449,451,451,
            451,451,451,451,451,451,451,451,451,451,
            451,320,827,827,827,827,827,827,827,827,
            827,827,827,827,827,827,827,827,827,827,
            827,827,827,827,827,827,827,827,827,827,
            827,827,827,827,827,827,827,827,827,827,
            827,827,827,827,827,827,827,827,827,827,
            827,827,827,827,827,827,827,827,827,827,
            827,827,827,827,827,827,827,827,827,827,
            827,827,827,827,509,827,827,827,827,827,
            827,827,827,827,449,827,827,827,827,827,
            827,827,827,827,827,827,827,827,509,488,
            488,488,488,488,488,488,488,488,488,468,
            468,468,468,468,468,468,468,529,468,468,
            468,468,468,468,468,468,468,468,468,468,
            468,468,468,468,468,468,468,468,468,468,
            468,468,468,468,468,468,468,468,468,468,
            468,468,468,468,468,468,468,468,468,468,
            468,468,468,468,368,422,439,521,523,489,
            398,386,509,345,412,420,423,538,347,362,
            542,6,535,536,533,534,548,539,525,526,
            509,509,340,509,340,489,489,374,509,489,
            489,509,358,358,358,358,358,358,358,358,
            358,358,480,480,480,480,480,480,480,480,
            509,480,480,480,480,480,480,480,480,480,
            480,480,480,480,480,480,480,480,480,480,
            480,480,480,480,480,480,480,480,480,480,
            480,480,480,480,480,480,480,480,480,480,
            480,480,480,480,480,480,480,840,466,833,
            832,834,508,398,37,317,31,15,467,835,
            1,673,673,673,673,673,673,673,673,673,
            673,672,672,672,672,672,672,672,672,509,
            672,672,672,672,672,672,672,672,672,672,
            672,672,672,672,672,672,672,672,672,672,
            672,672,672,672,672,672,672,672,672,672,
            672,672,672,672,672,672,672,672,672,672,
            672,672,672,672,672,672,509,343,320,547,
            509,509,541,509,674,322,673,673,673,673,
            673,673,673,673,673,673,672,672,672,672,
            672,672,672,672,320,672,672,672,672,672,
            672,672,672,672,672,672,672,672,672,672,
            672,672,672,672,672,672,672,672,672,672,
            672,672,672,672,672,672,672,672,672,672,
            672,672,672,672,672,672,672,672,672,672,
            672,509,509,19,13,509,511,509,34,674,
            5,562,562,562,562,562,562,562,562,562,
            562,340,531,340,509,350,350,350,350,350,
            350,350,350,350,350,509,380,380,380,380,
            380,380,380,380,380,380,509,392,392,392,
            392,392,392,392,392,392,392,57,562,562,
            562,562,562,562,562,562,562,562,11,18,
            532,537,559,509,544,509,434,56,562,562,
            562,562,562,562,562,562,562,562,530,509,
            447,509,413,409,59,562,562,562,562,562,
            562,562,562,562,562,58,562,562,562,562,
            562,562,562,562,562,562,509,509,330,327,
            162,52,509,160,166,509,509,509,819,465,
            815,818,817,545,816,509,509,838,837,670,
            509,509,509,509,509,509,509,509,509,509,
            509,509,509,509,509,509,509,509,509,509,
            509,509,509,509,509,670,670,509,509,670,
            670,509,509,509,513,509,509,509,509,509,
            509,509,509,509,509,509,509,509,820,821,
            512,509,509,509,509,509,509,509,509,823,
            509,509,509,509,509,509,509,509,509,509,
            509,509,509,509,509,822,509,509,509,509,
            1,5,509,11,1
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int getErrorSymbol() { return 0; }
    public final int getScopeUbound() { return 0; }
    public final int getScopeSize() { return 0; }
    public final int getMaxNameLength() { return 0; }

    public final static int
           NUM_STATES        = 46,
           NT_OFFSET         = 103,
           LA_STATE_OFFSET   = 840,
           MAX_LA            = 1,
           NUM_RULES         = 331,
           NUM_NONTERMINALS  = 39,
           NUM_SYMBOLS       = 142,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 332,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 100,
           EOLT_SYMBOL       = 104,
           ACCEPT_ACTION     = 508,
           ERROR_ACTION      = 509;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
