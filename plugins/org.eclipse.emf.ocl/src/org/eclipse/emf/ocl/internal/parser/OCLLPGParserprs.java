/**
* <copyright>
*
* Copyright (c) 2005, 2006 IBM Corporation and others.
* All rights reserved.   This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   IBM - Initial API and implementation
*
* </copyright>
*
* $Id: OCLLPGParserprs.java,v 1.4 2006/05/26 18:13:04 cdamus Exp $
*/

package org.eclipse.emf.ocl.internal.parser;

public class OCLLPGParserprs implements lpg.lpgjavaruntime.ParseTable, OCLLPGParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,1,1,1,1,1,1,
            1,1,0,0,0,0,0,0,1,0,
            0,1,1,1,0,0,0,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,0,0,0,0,0,1,1,1,
            1,1,1,0,0,1,1,1,1,1,
            1,0,0,0,0,0,0,1,1,0,
            0,0,0,0,0,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            1,1,1,1,1,0,1,4,0,1,
            1,2,1,1,1,7,4,4,0,1,
            3,4,4,5,3,3,1,2,4,4,
            4,6,8,0,1,1,3,0,1,1,
            1,1,3,1,3,3,3,1,3,3,
            3,3,3,3,1,1,1,3,3,1,
            3,3,1,2,2,1,2,2,4,1,
            1,1,3,2,5,1,1,1,1,1,
            1,1,1,1,1,1,1,3,0,1,
            1,1,1,1,1,1,3,4,1,1,
            1,1,1,0,1,1,3,1,1,3,
            1,1,1,1,4,1,1,1,1,1,
            1,1,2,2,2,1,1,4,4,4,
            4,4,4,4,4,4,4,4,1,3,
            5,6,8,1,3,5,3,0,1,1,
            1,1,1,4,4,0,1,1,3,1,
            1,3,3,1,1,5,5,5,5,5,
            5,5,5,5,5,5,5,5,5,5,
            5,5,5,5,5,5,5,5,2,5,
            0,1,0,1,1,3,5,0,1,2,
            3,7,5,5,0,1,1,3,1,1,
            3,-96,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-75,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-2,-3,0,0,-36,0,0,0,
            -4,0,-26,-123,0,0,-5,-38,0,0,
            0,-260,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-124,0,0,0,
            0,0,-39,0,0,0,-77,-23,0,0,
            0,-15,-22,-16,0,-11,0,0,0,0,
            0,-261,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-17,0,-41,0,0,-97,
            0,0,-18,-12,0,0,0,0,0,0,
            -19,0,0,-6,0,0,0,-20,-21,0,
            0,-94,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-24,0,0,-162,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-25,-27,0,0,-163,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-28,
            -29,0,0,-164,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-30,-42,0,0,-165,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-49,-50,0,
            0,-166,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-51,-52,0,0,-167,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-78,-79,0,0,-168,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-80,
            -81,0,0,-169,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-82,-83,0,0,-170,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-84,-85,0,
            0,-171,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-86,-87,0,0,-172,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-88,-89,0,0,-173,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-90,
            -91,0,0,-174,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-93,-98,0,0,-175,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-99,-100,0,
            0,-176,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-101,-102,0,0,-177,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-103,-104,0,0,-178,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-105,
            -106,0,0,-179,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-107,-108,0,0,-180,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-109,-110,0,
            0,-182,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-111,-112,0,0,-183,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-113,-114,0,0,-184,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-115,
            -116,0,0,-220,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-127,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-117,0,0,-249,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-119,0,
            -120,-121,0,-250,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-122,0,-146,-149,0,-251,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-150,0,
            -153,-154,0,-252,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-155,0,-156,-157,0,-253,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-158,0,
            -159,-160,0,-254,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-181,0,-188,-189,0,-255,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-190,0,
            -191,-192,0,-256,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-193,0,-194,-195,0,-257,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-196,0,
            -197,-198,0,-258,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-199,0,-200,-201,0,-259,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-202,0,
            -203,-204,0,-118,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-92,-205,0,-246,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-13,-206,0,-293,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-125,
            0,0,-126,0,0,0,0,0,0,0,
            0,-207,-208,0,-31,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-32,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-33,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-34,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-35,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-37,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-44,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-48,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-74,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-141,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-152,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-213,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-216,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-218,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-219,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-262,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-265,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-289,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-291,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-297,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-298,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-137,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-138,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-139,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-140,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-131,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-132,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-133,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-134,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-135,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-136,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-76,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -143,0,0,-209,-210,-215,-221,-222,-223,0,
            -128,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-129,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-130,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-1,-212,0,-224,0,0,
            -225,-226,-227,-228,-229,-230,-231,-232,-285,0,
            -233,0,0,-14,0,-234,0,0,-7,0,
            0,-161,-235,-236,0,0,-8,0,0,-237,
            0,0,0,0,0,0,0,0,-43,0,
            0,0,0,0,0,0,0,-238,0,0,
            0,-9,0,0,0,0,0,-45,0,0,
            0,0,-142,0,0,0,0,-145,0,-46,
            0,0,-292,0,-40,0,0,0,0,0,
            0,-10,0,0,-95,-144,-211,-47,0,0,
            -217,-239,0,0,0,-53,-240,0,0,0,
            0,-54,0,0,0,0,-55,0,0,0,
            -241,-56,-57,-243,-244,0,0,-58,0,0,
            -59,0,-60,-61,0,0,0,-62,-63,-64,
            -65,0,0,-66,0,0,0,0,-67,-68,
            0,0,0,0,0,-69,0,0,-70,-71,
            0,-72,0,0,0,-73,-147,0,0,0,
            0,-148,-151,0,-185,-186,-187,-214,0,0,
            -242,-248,-245,-287,-288,0,-290,-247,0,0,
            -263,0,-264,-266,-267,0,-268,0,-269,-270,
            -271,-272,0,0,0,0,0,-273,0,-274,
            0,-275,0,0,-276,0,-277,0,-278,-279,
            -280,-281,-282,-283,-284,-286,-294,-295,-296,-299,
            0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            60,60,60,60,60,60,60,61,61,62,
            62,47,47,39,39,39,42,46,46,48,
            48,40,45,45,63,63,41,64,64,43,
            43,43,49,49,50,50,52,52,38,38,
            27,27,28,28,26,26,26,26,25,25,
            25,25,25,25,25,22,22,23,23,23,
            21,21,21,6,6,6,7,7,7,7,
            8,8,8,8,9,9,2,2,2,1,
            1,1,1,1,1,1,1,3,3,67,
            67,10,10,10,10,10,10,11,12,4,
            4,4,4,4,68,68,69,69,53,53,
            54,14,14,14,14,13,17,18,19,20,
            20,15,16,65,65,65,71,71,72,72,
            72,72,72,72,72,72,72,72,72,34,
            34,34,73,73,31,31,31,56,51,51,
            35,35,35,35,37,36,74,74,75,75,
            70,70,70,70,55,55,5,5,5,5,
            5,5,5,5,5,5,5,5,5,5,
            5,5,5,5,5,5,5,5,5,57,
            57,30,30,33,33,32,32,29,76,76,
            77,77,24,66,66,58,58,59,59,44,
            44,44,239,76,2876,603,602,72,60,327,
            66,70,71,91,92,93,94,95,96,111,
            112,113,114,637,48,636,56,670,704,1409,
            671,41,347,76,2876,603,602,72,65,327,
            66,70,71,91,92,93,94,95,96,111,
            112,113,114,58,693,106,108,694,76,433,
            739,365,1272,575,600,76,2887,480,64,165,
            1377,1411,1,76,2876,603,602,72,60,327,
            66,70,71,91,92,93,94,95,96,111,
            112,113,114,637,48,636,56,670,704,209,
            671,41,11,13,14,15,705,505,76,2887,
            2759,28,165,709,76,772,207,55,729,125,
            23,164,779,3,785,535,562,76,433,328,
            2932,2934,1,76,2876,603,602,72,60,327,
            66,70,71,91,92,93,94,95,96,111,
            112,113,114,637,48,636,56,670,704,209,
            671,41,123,21,164,787,27,709,76,88,
            709,76,1412,789,56,333,207,273,124,126,
            127,791,67,68,547,76,39,278,794,795,
            2935,2934,185,76,2876,603,602,72,60,327,
            66,70,71,91,92,93,94,95,96,111,
            112,113,114,637,48,636,56,670,704,195,
            671,41,375,506,1342,1341,185,76,2876,603,
            602,72,60,327,66,70,71,91,92,93,
            94,95,96,111,112,113,114,637,48,636,
            56,670,704,195,671,41,731,532,1342,2649,
            185,76,2876,603,602,72,60,327,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,637,48,636,56,670,704,195,671,41,
            534,537,1342,2718,185,76,2876,603,602,72,
            60,327,66,70,71,91,92,93,94,95,
            96,111,112,113,114,637,48,636,56,670,
            704,195,671,41,579,126,1342,2721,185,76,
            2876,603,602,72,60,327,66,70,71,91,
            92,93,94,95,96,111,112,113,114,637,
            48,636,56,670,704,195,671,41,669,65,
            1342,2722,185,76,2876,603,602,72,60,327,
            66,70,71,91,92,93,94,95,96,111,
            112,113,114,637,48,636,56,670,704,195,
            671,41,257,802,1342,2723,185,76,2876,603,
            602,72,60,327,66,70,71,91,92,93,
            94,95,96,111,112,113,114,637,48,636,
            56,670,704,195,671,41,576,657,1342,2724,
            185,76,2876,603,602,72,60,327,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,637,48,636,56,670,704,195,671,41,
            726,28,1342,2725,185,76,2876,603,602,72,
            60,327,66,70,71,91,92,93,94,95,
            96,111,112,113,114,637,48,636,56,670,
            704,195,671,41,560,810,1342,2726,185,76,
            2876,603,602,72,60,327,66,70,71,91,
            92,93,94,95,96,111,112,113,114,637,
            48,636,56,670,704,195,671,41,727,808,
            1342,2727,185,76,2876,603,602,72,60,327,
            66,70,71,91,92,93,94,95,96,111,
            112,113,114,637,48,636,56,670,704,195,
            671,41,690,644,1342,2728,185,76,2876,603,
            602,72,60,327,66,70,71,91,92,93,
            94,95,96,111,112,113,114,637,48,636,
            56,670,704,195,671,41,811,658,1342,2731,
            185,76,2876,603,602,72,60,327,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,637,48,636,56,670,704,195,671,41,
            681,815,1342,2736,185,76,2876,603,602,72,
            60,327,66,70,71,91,92,93,94,95,
            96,111,112,113,114,637,48,636,56,670,
            704,195,671,41,754,821,1342,2743,185,76,
            2876,603,602,72,60,327,66,70,71,91,
            92,93,94,95,96,111,112,113,114,637,
            48,636,56,670,704,195,671,41,823,825,
            1342,2744,185,76,2876,603,602,72,60,327,
            66,70,71,91,92,93,94,95,96,111,
            112,113,114,637,48,636,56,670,704,195,
            671,41,828,830,1342,2750,185,76,2876,603,
            602,72,60,327,66,70,71,91,92,93,
            94,95,96,111,112,113,114,637,48,636,
            56,670,704,195,671,41,833,836,1342,2768,
            185,76,2876,603,602,72,60,327,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,637,48,636,56,670,704,195,671,41,
            839,846,1342,2812,185,76,2876,603,602,72,
            60,327,66,70,71,91,92,93,94,95,
            96,111,112,113,114,637,48,636,56,670,
            704,195,671,41,848,852,1342,2817,185,76,
            2876,603,602,72,60,327,66,70,71,91,
            92,93,94,95,96,111,112,113,114,637,
            48,636,56,670,704,195,671,41,854,856,
            1342,2831,185,76,2876,603,602,72,60,327,
            66,70,71,91,92,93,94,95,96,111,
            112,113,114,637,48,636,56,670,704,195,
            671,41,858,860,1342,2834,185,76,2876,603,
            602,72,60,327,66,70,71,91,92,93,
            94,95,96,111,112,113,114,637,48,636,
            56,670,704,195,671,41,862,864,1342,2835,
            185,76,2876,603,602,72,60,327,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,637,48,636,56,670,704,195,671,41,
            866,868,1342,2893,131,76,2876,603,602,72,
            60,327,66,70,71,91,92,93,94,95,
            96,111,112,113,114,637,48,636,56,670,
            704,1409,671,41,453,76,2876,603,602,72,
            60,327,66,70,71,91,92,93,94,95,
            96,111,112,113,114,1619,870,107,108,293,
            76,2876,603,602,72,60,327,66,70,71,
            91,92,93,94,95,96,111,112,113,114,
            637,48,636,56,670,704,139,671,41,872,
            2909,874,877,2907,293,76,2876,603,602,72,
            60,327,66,70,71,91,92,93,94,95,
            96,111,112,113,114,637,48,636,56,670,
            704,139,671,41,879,2909,875,336,2911,293,
            76,2876,603,602,72,60,327,66,70,71,
            91,92,93,94,95,96,111,112,113,114,
            637,48,636,56,670,704,139,671,41,881,
            2909,882,883,2912,293,76,2876,603,602,72,
            60,327,66,70,71,91,92,93,94,95,
            96,111,112,113,114,637,48,636,56,670,
            704,139,671,41,57,2909,692,471,2918,293,
            76,2876,603,602,72,60,327,66,70,71,
            91,92,93,94,95,96,111,112,113,114,
            637,48,636,56,670,704,139,671,41,819,
            2909,885,844,2920,293,76,2876,603,602,72,
            60,327,66,70,71,91,92,93,94,95,
            96,111,112,113,114,637,48,636,56,670,
            704,139,671,41,680,2909,890,894,2922,293,
            76,2876,603,602,72,60,327,66,70,71,
            91,92,93,94,95,96,111,112,113,114,
            637,48,636,56,670,704,139,671,41,896,
            2909,898,900,2925,293,76,2876,603,602,72,
            60,327,66,70,71,91,92,93,94,95,
            96,111,112,113,114,637,48,636,56,670,
            704,139,671,41,902,2909,904,906,2927,293,
            76,2876,603,602,72,60,327,66,70,71,
            91,92,93,94,95,96,111,112,113,114,
            637,48,636,56,670,704,139,671,41,913,
            2909,915,917,2929,293,76,2876,603,602,72,
            60,327,66,70,71,91,92,93,94,95,
            96,111,112,113,114,637,48,636,56,670,
            704,139,671,41,919,2909,921,923,2930,293,
            76,2876,603,602,72,60,327,66,70,71,
            91,92,93,94,95,96,111,112,113,114,
            637,48,636,56,670,704,139,671,41,755,
            2909,778,563,2931,131,76,2876,603,602,72,
            60,327,66,70,71,91,92,93,94,95,
            96,111,112,113,114,637,48,636,56,670,
            704,195,671,41,816,744,1444,131,76,2876,
            603,602,72,60,327,66,70,71,91,92,
            93,94,95,96,111,112,113,114,637,48,
            636,56,670,704,195,671,41,93,749,2904,
            66,76,2876,603,602,72,60,327,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,637,48,636,56,670,704,209,671,41,
            709,76,1586,709,76,1587,12,13,14,15,
            1307,1339,767,925,208,131,76,2876,603,602,
            72,60,327,66,70,71,91,92,93,94,
            95,96,111,112,113,114,637,48,636,56,
            670,704,18,671,41,131,76,2876,603,602,
            72,60,327,66,70,71,91,92,93,94,
            95,96,111,112,113,114,637,48,636,56,
            670,704,17,671,41,131,76,2876,603,602,
            72,60,327,66,70,71,91,92,93,94,
            95,96,111,112,113,114,637,48,636,56,
            670,704,31,671,41,131,76,2876,603,602,
            72,60,327,66,70,71,91,92,93,94,
            95,96,111,112,113,114,637,48,636,56,
            670,704,30,671,41,131,76,2876,603,602,
            72,60,327,66,70,71,91,92,93,94,
            95,96,111,112,113,114,637,48,636,56,
            670,704,29,671,41,131,76,2876,603,602,
            72,60,327,66,70,71,91,92,93,94,
            95,96,111,112,113,114,637,48,636,56,
            670,704,22,671,41,131,76,2876,603,602,
            72,60,327,66,70,71,91,92,93,94,
            95,96,111,112,113,114,637,48,636,56,
            670,704,146,671,41,131,76,2876,603,602,
            72,60,327,66,70,71,91,92,93,94,
            95,96,111,112,113,114,637,48,636,56,
            670,704,874,671,41,131,76,2876,603,602,
            72,60,327,66,70,71,91,92,93,94,
            95,96,111,112,113,114,637,48,636,56,
            670,704,1271,671,41,131,76,2876,603,602,
            72,60,327,66,70,71,91,92,93,94,
            95,96,111,112,113,114,637,48,636,56,
            670,704,25,671,41,131,76,2876,603,602,
            72,60,327,66,70,71,91,92,93,94,
            95,96,111,112,113,114,637,48,636,56,
            670,704,2646,671,41,131,76,2876,603,602,
            72,60,327,66,70,71,91,92,93,94,
            95,96,111,112,113,114,637,48,636,56,
            670,704,197,671,41,131,76,2876,603,602,
            72,60,327,66,70,71,91,92,93,94,
            95,96,111,112,113,114,637,48,636,56,
            670,704,196,671,41,131,76,2876,603,602,
            72,60,327,66,70,71,91,92,93,94,
            95,96,111,112,113,114,637,48,636,56,
            670,704,147,671,41,131,76,2876,603,602,
            72,60,327,66,70,71,91,92,93,94,
            95,96,111,112,113,114,637,48,636,56,
            670,704,110,671,41,131,76,2876,603,602,
            72,60,327,66,70,71,91,92,93,94,
            95,96,111,112,113,114,637,48,636,56,
            670,704,24,671,41,131,76,2876,603,602,
            72,60,327,66,70,71,91,92,93,94,
            95,96,111,112,113,114,637,48,636,56,
            670,704,2936,671,41,131,76,2876,603,602,
            72,60,327,66,70,71,91,92,93,94,
            95,96,111,112,113,114,637,48,636,56,
            670,704,2938,671,41,131,76,2876,603,602,
            72,60,327,66,70,71,91,92,93,94,
            95,96,111,112,113,114,637,48,636,56,
            670,704,140,671,41,131,76,2876,603,602,
            72,60,327,66,70,71,91,92,93,94,
            95,96,111,112,113,114,637,48,636,56,
            670,704,2940,671,41,131,76,2876,603,602,
            72,60,327,66,70,71,91,92,93,94,
            95,96,111,112,113,114,637,48,636,56,
            670,704,141,671,41,400,76,2876,603,602,
            72,60,327,66,70,71,91,92,93,94,
            95,96,111,112,113,114,637,48,636,56,
            670,1622,400,76,2876,603,602,72,60,327,
            66,70,71,91,92,93,94,95,96,111,
            112,113,114,637,48,636,56,1655,400,76,
            2876,603,602,72,60,327,66,70,71,91,
            92,93,94,95,96,111,112,113,114,637,
            48,636,56,1688,400,76,2876,603,602,72,
            60,327,66,70,71,91,92,93,94,95,
            96,111,112,113,114,637,48,636,56,1732,
            400,76,2876,603,602,72,60,327,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,637,54,636,56,400,76,2876,603,602,
            72,60,327,66,70,71,91,92,93,94,
            95,96,111,112,113,114,637,53,636,56,
            400,76,2876,603,602,72,60,327,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,637,52,636,56,400,76,2876,603,602,
            72,60,327,66,70,71,91,92,93,94,
            95,96,111,112,113,114,637,51,636,56,
            400,76,2876,603,602,72,60,327,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,637,50,636,56,400,76,2876,603,602,
            72,60,327,66,70,71,91,92,93,94,
            95,96,111,112,113,114,637,49,636,56,
            347,76,2876,603,602,72,64,327,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,709,76,2644,926,909,187,928,888,932,
            1304,453,76,2876,603,602,72,60,327,66,
            70,71,91,92,93,94,95,96,111,112,
            113,114,1621,453,76,2876,603,602,72,62,
            327,66,70,71,91,92,93,94,95,96,
            111,112,113,114,453,76,2876,603,602,72,
            61,327,66,70,71,91,92,93,94,95,
            96,111,112,113,114,676,656,150,933,500,
            501,936,937,940,941,944,945,948,949,656,
            150,952,500,501,642,150,953,500,501,547,
            76,39,886,956,957,2648,5,547,76,39,
            960,149,151,152,11,13,14,15,3,399,
            2,271,1687,277,149,151,152,32,961,467,
            151,152,547,76,39,263,1,383,642,150,
            33,500,501,642,150,391,500,501,642,150,
            629,500,501,642,150,627,500,501,12,13,
            14,15,547,76,39,817,627,19,722,2647,
            398,817,964,807,151,152,751,965,1733,151,
            152,158,751,2807,151,152,36,751,211,151,
            152,968,751,751,969,972,161,36,751,1654,
            399,751,163,751,751,773,875,806,751,751,
            751,751,908,2903,751,277,2645,909,806,751,
            751,160,942,943,840,841,751,162,976,751,
            751,977,751,1010,1011,1374,496,722,1044,1045,
            1078,1079,722,722,1112,751,751,578,722,1113,
            1146,751,722,973,751,722,1147,722,976,1180,
            1181,978,1236,655,769,747,1269,979,37,773,
            750,980,983,159,200,1272,1304,2898,984,201,
            987,75,988,2905,190,991,2937,992,2939,995,
            998,999,1002,1003,1005,1006,443,158,1007,174,
            1010,2943,2943
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,0,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,0,19,
            20,21,22,23,24,25,26,0,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,0,44,45,46,47,48,49,
            50,51,52,53,0,0,0,0,3,0,
            58,59,60,0,0,0,1,67,3,4,
            5,6,7,8,9,10,11,12,13,14,
            15,16,17,27,19,20,21,22,23,24,
            25,26,0,28,29,30,31,32,33,34,
            35,36,37,38,39,40,41,42,81,44,
            45,46,47,48,49,50,51,52,53,62,
            64,58,59,60,70,0,72,63,74,75,
            0,1,67,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,56,19,
            20,21,22,23,24,25,26,0,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,0,44,45,46,47,48,49,
            50,51,52,53,0,1,0,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,77,19,20,21,22,23,24,25,
            26,54,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,54,44,45,
            46,47,48,49,50,51,52,53,0,1,
            0,3,4,5,6,7,8,9,10,11,
            12,13,14,15,16,17,0,19,20,21,
            22,23,24,25,26,79,28,29,30,31,
            32,33,34,35,36,37,38,39,40,41,
            42,0,44,45,46,47,48,49,50,51,
            52,53,0,1,0,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            0,19,20,21,22,23,24,25,26,63,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,0,44,45,46,47,
            48,49,50,51,52,53,0,1,0,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,0,19,20,21,22,23,
            24,25,26,0,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,0,
            44,45,46,47,48,49,50,51,0,0,
            1,55,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,17,82,19,20,
            21,22,23,24,25,26,62,28,29,30,
            31,32,33,34,35,36,37,38,39,40,
            41,42,0,44,45,46,47,48,49,50,
            51,52,0,1,56,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            0,19,20,21,22,23,24,25,26,0,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,0,44,45,46,47,
            48,49,50,51,0,0,1,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,80,19,20,21,22,23,24,25,
            26,0,28,0,64,4,0,1,34,35,
            36,37,38,39,40,41,0,68,69,3,
            55,5,6,7,8,9,10,11,12,0,
            65,0,0,0,3,19,5,6,7,8,
            9,10,11,12,0,0,43,0,0,1,
            19,22,23,24,22,23,24,83,84,85,
            86,87,88,89,90,91,92,93,94,0,
            25,26,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,17,43,19,20,
            21,22,23,24,25,26,0,28,0,3,
            56,3,55,34,35,36,37,38,39,40,
            41,0,65,0,3,2,5,6,7,8,
            9,10,11,12,0,0,0,0,3,2,
            5,6,7,8,9,10,11,12,0,1,
            29,30,31,32,33,0,20,21,3,0,
            0,0,2,42,29,30,31,32,33,0,
            1,0,0,0,0,4,3,42,5,6,
            7,8,9,10,11,12,27,18,0,18,
            18,3,19,5,6,7,8,9,10,11,
            12,0,68,69,3,0,0,19,0,4,
            0,56,57,58,59,60,61,62,13,14,
            15,16,17,0,18,66,0,4,0,0,
            0,76,4,0,0,0,13,14,15,16,
            17,13,14,15,16,17,0,18,0,43,
            4,43,0,43,20,21,27,0,0,13,
            14,15,16,17,0,57,0,57,0,61,
            0,61,43,0,0,27,18,20,21,27,
            54,0,18,54,18,55,18,0,18,0,
            0,18,18,4,0,0,0,71,0,3,
            0,1,0,1,0,1,54,0,1,0,
            1,78,0,1,66,0,1,27,0,1,
            0,27,27,0,43,0,1,0,1,0,
            43,0,1,0,1,0,1,0,1,0,
            1,0,1,0,1,0,1,0,1,0,
            1,0,1,0,0,2,0,1,0,1,
            0,0,0,2,0,0,43,0,3,0,
            1,73,18,0,1,0,1,0,1,0,
            1,0,1,0,1,0,1,27,0,27,
            2,27,0,1,0,1,0,1,0,1,
            0,1,0,1,0,0,1,0,4,2,
            43,0,0,2,2,0,0,2,2,0,
            0,2,2,0,0,2,2,0,0,2,
            2,0,0,2,2,0,0,2,2,0,
            0,2,2,0,0,2,2,0,0,2,
            2,0,0,2,2,0,1,0,0,0,
            2,2,0,0,2,2,0,0,2,2,
            0,0,2,2,0,18,2,0,0,2,
            2,0,0,2,0,0,0,2,2,0,
            0,2,0,0,0,0,0,0,0,0,
            18,0,0,0,0,0,0,0,0,0,
            0,27,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            205,1975,2943,466,2851,3023,3022,3024,3025,3026,
            3027,3028,3029,2843,2841,2838,2833,2850,19,3020,
            2848,2844,2832,2827,2822,2849,2620,40,242,3042,
            3043,3044,3045,3046,2859,2854,2860,2869,2872,2870,
            2816,2866,569,2943,568,3061,3059,3060,3062,3063,
            3064,3065,1945,2808,63,2943,2943,2943,3030,2943,
            2747,2739,394,26,2943,2943,1975,2933,466,2851,
            3023,3022,3024,3025,3026,3027,3028,3029,2843,2841,
            2838,2833,2850,2811,3020,2848,2844,2832,2827,2822,
            2849,2620,7,242,3042,3043,3044,3045,3046,2859,
            2854,2860,2869,2872,2870,2816,2866,569,2365,568,
            3061,3059,3060,3062,3063,3064,3065,1945,2808,2942,
            3058,2747,2739,394,317,2943,274,2805,1723,1720,
            2943,1975,2933,466,2851,3023,3022,3024,3025,3026,
            3027,3028,3029,2843,2841,2838,2833,2850,336,3020,
            2848,2844,2832,2827,2822,2849,2620,2943,242,3042,
            3043,3044,3045,3046,2859,2854,2860,2869,2872,2870,
            2816,2866,569,2943,568,3061,3059,3060,3062,3063,
            3064,3065,1945,2808,193,1975,2943,466,2851,3023,
            3022,3024,3025,3026,3027,3028,3029,2843,2841,2838,
            2833,2850,2951,3020,2848,2844,2832,2827,2822,2849,
            2620,2305,242,3042,3043,3044,3045,3046,2859,2854,
            2860,2869,2872,2870,2816,2866,569,2335,568,3061,
            3059,3060,3062,3063,3064,3065,1945,2808,104,1975,
            2943,466,2851,3023,3022,3024,3025,3026,3027,3028,
            3029,2843,2841,2838,2833,2850,2943,3020,2848,2844,
            2832,2827,2822,2849,2620,2215,242,3042,3043,3044,
            3045,3046,2859,2854,2860,2869,2872,2870,2816,2866,
            569,2943,568,3061,3059,3060,3062,3063,3064,3065,
            1945,2808,2943,1975,2943,2910,2851,3023,3022,3024,
            3025,3026,3027,3028,3029,2843,2841,2838,2833,2850,
            2943,3020,2848,2844,2832,2827,2822,2849,2620,212,
            242,3042,3043,3044,3045,3046,2859,2854,2860,2869,
            2872,2870,2816,2866,569,2943,568,3061,3059,3060,
            3062,3063,3064,3065,1945,2808,2943,1975,2943,466,
            2851,3023,3022,3024,3025,3026,3027,3028,3029,2843,
            2841,2838,2833,2850,20,3020,2848,2844,2832,2827,
            2822,2849,2620,2943,242,3042,3043,3044,3045,3046,
            2859,2854,2860,2869,2872,2870,2816,2866,569,2943,
            568,3061,3059,3060,3062,3063,3064,3065,10,2943,
            1975,3135,466,2851,3023,3022,3024,3025,3026,3027,
            3028,3029,2843,2841,2838,2833,2850,2065,3020,2848,
            2844,2832,2827,2822,2849,2620,4,242,3042,3043,
            3044,3045,3046,2859,2854,2860,2869,2872,2870,2816,
            2866,569,2943,568,3061,3059,3060,3062,3063,3064,
            3065,1945,2943,1975,336,466,2851,3023,3022,3024,
            3025,3026,3027,3028,3029,2843,2841,2838,2833,2850,
            2943,3020,2848,2844,2832,2827,2822,2849,2620,2943,
            242,3042,3043,3044,3045,3046,2859,2854,2860,2869,
            2872,2870,2816,2866,569,191,568,3061,3059,3060,
            3062,3063,3064,3065,2943,2943,2795,3021,2851,3023,
            3022,3024,3025,3026,3027,3028,3029,2843,2841,2838,
            2833,2850,3145,3020,2848,2844,2832,2827,2822,2849,
            2886,145,2885,153,3041,1915,2943,2778,2859,2854,
            2860,2869,2872,2870,2816,2866,38,332,334,3021,
            3135,3023,3022,3024,3025,3026,3027,3028,3029,42,
            1624,2943,43,2943,466,3020,3023,3022,3024,3025,
            3026,3027,3028,3029,9,55,377,191,2943,2790,
            3020,2444,2418,2392,2444,2418,2392,1446,1584,1552,
            1551,1517,1549,1516,1514,1482,1481,1479,1447,2943,
            2651,1214,3021,2851,3023,3022,3024,3025,3026,3027,
            3028,3029,2843,2841,2838,2833,2850,377,3020,2848,
            2844,2832,2827,2822,2849,2886,34,2885,156,264,
            336,264,3135,2859,2854,2860,2869,2872,2870,2816,
            2866,2943,1657,2943,3030,1306,3023,3022,3024,3025,
            3026,3027,3028,3029,16,148,57,2943,3030,3097,
            3023,3022,3024,3025,3026,3027,3028,3029,2943,402,
            3042,3043,3044,3045,3046,19,2694,2673,264,2943,
            2943,2943,3098,534,3042,3043,3044,3045,3046,88,
            2806,144,144,2943,2943,2125,738,534,3023,3022,
            3024,3025,3026,3027,3028,3029,2095,2788,2943,2734,
            2734,3021,3020,3023,3022,3024,3025,3026,3027,3028,
            3029,2943,20,20,264,44,78,3020,2943,2595,
            78,336,2802,2747,2739,394,2772,6,2545,2520,
            2495,2470,2570,47,2783,2891,2943,2595,46,78,
            191,384,2595,2943,59,2943,2545,2520,2495,2470,
            2570,2545,2520,2495,2470,2570,45,2734,2943,87,
            2595,323,2943,87,2694,2673,144,58,2943,2545,
            2520,2495,2470,2570,2943,2802,2943,87,2943,2772,
            2943,87,87,2943,2943,2095,1735,2694,2673,2897,
            2245,2943,1765,144,1795,3135,1825,2943,1855,2943,
            35,267,1885,2005,157,198,2943,2895,109,1376,
            2943,2742,2943,436,2943,470,2275,2943,504,2943,
            538,2035,2943,572,2894,2943,606,2877,2943,640,
            2943,2882,2883,97,380,2943,674,2943,708,2943,
            2641,2943,742,2943,776,2943,810,2943,844,2943,
            878,2943,912,2943,946,2943,980,2943,1014,2943,
            1048,74,1082,2943,2943,3016,2943,1116,2943,1150,
            199,2943,194,3012,105,89,88,90,3030,2943,
            2892,2155,2716,2943,1239,2943,1274,2943,1309,2943,
            1344,2943,1379,2943,1414,2943,1449,2888,2943,2095,
            2901,1184,2943,1484,2943,1519,2943,1554,2943,1589,
            2943,282,2943,342,2943,88,2806,2943,2185,3131,
            377,2943,2943,3130,3129,2943,2943,3128,3126,2943,
            2943,3125,3124,2943,2943,3123,3122,2943,2943,3121,
            3119,2943,2943,3118,3117,2943,2943,3116,3115,2943,
            2943,3114,3113,2943,2943,3112,3111,2943,2943,3110,
            3109,2943,2943,3127,3120,189,1082,2943,2943,2943,
            3081,3080,2943,2943,3079,3078,2943,2943,3077,3076,
            2943,2943,3075,3074,2943,2729,3073,2943,2943,3072,
            3071,2943,210,3147,206,2943,2943,3146,3085,2943,
            2943,3086,2943,2943,2943,2943,2943,2943,2943,2943,
            2793,2943,2943,2943,2943,2943,2943,2943,2943,2943,
            2943,1690
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            429,439,101,366,367,214,214,214,214,214,
            154,163,438,36,224,224,224,224,224,224,
            224,317,210,99,277,109,409,403,99,99,
            115,115,115,115,115,154,115,314,154,274,
            154,111,110,115,36,274,163,115,99,321,
            321,327,98,98,98,98,98,98,98,98,
            98,98,98,98,98,98,98,98,98,98,
            98,98,280,115,52,52,283,289,287,291,
            300,297,208,325,327,323,275,485,275,275,
            485,421,329,226,163,1,154,99,99,99,
            99,99,99,99,99,99,99,99,99,99,
            99,99,99,99,99,99,99,115,331,275,
            99,99,132,165,154,154,117,117,117,117,
            116,116,116,116,116,116,116,116,116,116,
            115,36,154,274,36,224,163,163,422,421,
            163,115,275,485,372,370,373,375,372,379,
            274,226,226,226,226,226,226,226,226,226,
            226,226,226,226,226,226,226,226,226,226,
            418,226,226,226,98,98,280,99,99,99,
            99,99,99,99,99,99,99,99,99,99,
            99,287,287,297,291,291,291,208,326,275,
            367,441,115,163,424,115,163,115,115,115,
            275,426,275,275,275,275,275,275,275,275,
            275,275,275,275,275,275,275,275,275,275,
            275,282,275,275,275,115,331,163,115,115,
            115,115,115,115,115,115,115,115,115,113,
            113,115,224,364,115,418,106,275,415,461,
            275,275,275,275,275,275,275,275,275,275,
            275,484,485,275,441,488,282,163,115,163,
            115,36,114,416,275,416,115,115,275
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            64,26,28,1,38,39,37,41,36,34,
            35,4,17,25,20,21,13,14,15,16,
            22,23,24,40,48,49,45,47,46,50,
            51,19,44,52,53,6,5,7,8,9,
            10,11,12,42,29,30,31,32,33,3,
            0,44,6,5,7,8,9,10,11,12,
            19,3,51,50,46,47,45,48,49,42,
            29,30,31,32,33,38,39,37,41,36,
            34,35,4,17,25,26,20,21,13,14,
            15,16,28,22,23,24,40,55,1,0,
            2,27,82,62,18,54,71,0,43,56,
            77,0,2,67,53,52,1,29,30,31,
            32,33,42,48,49,45,47,46,50,51,
            44,38,39,37,41,36,34,35,4,17,
            25,26,20,21,13,14,15,16,28,22,
            23,24,40,19,6,5,7,8,9,10,
            11,12,3,0,84,85,86,88,87,89,
            90,91,92,93,94,83,6,5,7,8,
            9,10,11,12,19,3,38,39,37,41,
            36,34,35,17,25,26,20,21,13,14,
            15,16,28,22,23,24,40,4,0,57,
            61,43,0,19,3,6,5,7,8,9,
            10,11,12,18,0,26,28,1,38,39,
            37,41,36,34,35,4,17,25,20,21,
            13,14,15,16,22,23,24,40,29,30,
            31,32,33,42,48,49,45,47,46,50,
            51,19,6,5,7,8,9,10,11,12,
            44,52,53,3,2,0,43,57,61,1,
            65,55,74,75,70,72,20,21,25,26,
            4,17,13,14,15,16,22,23,24,2,
            64,66,54,27,71,73,68,69,78,79,
            80,82,81,56,77,62,58,59,60,0,
            63,0,57,61,18,1,43,0,78,0,
            25,26,20,21,13,14,4,15,16,17,
            2,64,66,70,54,27,71,72,73,74,
            75,58,59,60,78,79,80,22,23,24,
            81,82,1,56,77,62,69,68,0,18,
            4,27,64,0,64,27,73,0,25,26,
            20,21,13,14,15,16,17,66,70,72,
            73,74,75,56,77,78,79,80,22,23,
            24,81,58,59,60,68,69,43,2,64,
            71,82,62,4,27,54,0,66,27,0,
            27,82,0,79,0,2,43,0,68,69,
            76,57,61,58,59,60,3,56,62,0,
            4,58,59,60,6,5,7,8,9,10,
            11,12,42,29,30,31,32,33,3,0,
            54,43,25,26,20,21,13,14,4,15,
            16,17,1,65,70,72,55,74,75,22,
            23,24,81,18,2,27,0,80,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            36,31,31,31,31,25,25,25,25,25,
            7,30,34,29,31,31,31,31,31,31,
            31,23,21,31,31,11,31,31,31,31,
            28,28,28,28,28,6,28,13,9,41,
            9,31,34,28,29,39,46,28,31,31,
            31,31,4,4,4,4,4,4,4,4,
            4,4,4,4,4,4,4,4,4,4,
            4,4,4,28,1,1,18,31,31,31,
            31,31,31,31,31,31,31,31,31,31,
            31,32,31,28,43,28,9,31,31,31,
            31,31,31,31,31,31,31,31,31,31,
            31,31,31,31,31,31,31,28,31,31,
            31,31,9,15,9,9,28,28,28,28,
            28,28,28,28,28,28,28,28,28,28,
            28,29,9,41,29,31,46,46,31,31,
            46,28,31,31,31,31,31,31,31,31,
            30,28,28,28,28,28,28,28,28,28,
            28,28,28,28,28,28,28,28,28,28,
            31,28,28,28,4,4,4,31,31,31,
            31,31,31,31,31,31,31,31,31,31,
            31,31,31,31,31,31,31,31,31,31,
            37,29,28,46,31,28,45,28,28,28,
            31,31,31,31,31,31,31,31,31,31,
            31,31,31,31,31,31,31,31,31,31,
            31,4,31,31,31,28,31,46,27,27,
            27,27,27,27,27,27,27,27,27,28,
            28,28,31,31,28,31,31,31,31,31,
            31,31,31,31,31,31,31,31,31,31,
            31,31,31,31,29,31,4,46,28,46,
            28,29,28,31,31,31,28,28,31
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            2,4,3,30,0,63,3,49,2,0,
            47,0,43,0,2,71,0,65,66,0,
            45,0,64,0,38,0,31,2,4,3,
            0,77,0,39,0,47,46,0,75,0,
            52,0,70,0,56,31,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            11,12,95,7,83,84,85,86,88,89,
            90,91,5,6,8,9,10,20,34,3,
            4,49,50,51,1,2,19,52,58,59,
            60,61,62,75,76,77,78,79,80,81,
            82,87,21,30,31,32,33,56,57,92,
            93,45,54,18,25,39,35,36,37,38,
            42,94,13,14,15,16,28,43,44,17,
            22,23,24,26,27,40,41,46,47,48,
            53,55,63,64,65,66,67,68,69,70,
            71,72,73,74,96
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            0,104,102,122,0,117,118,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            116,114,115,0,113,112,106,111,0,0,
            100,121,0,128,105,0,0,0,103,0,
            0,0,98,133,97,99,101,0,108,0,
            0,110,124,0,126,129,0,0,132,0,
            0,0,107,109,119,120,0,0,123,125,
            127,0,0,0,130,0,131,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            178,13,206,186,1,8,53,58,63,68,
            73,78,83,88,93,98,103,108,113,118,
            123,128,133,138,143,148,153,158,22,163,
            167,226,230,234,238,242,246,250,254,258,
            262,266,270,276,283,40,47,171,212,47,
            196,196,280,31,219,219
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            6,20,6,192,6,6,6,6,6,6,
            6,6,6,6,6,6,6,6,6,6,
            6,6,6,6,6,6,6,6,27,6,
            6,6,6,6,6,6,6,6,6,6,
            6,6,274,274,6,44,51,175,216,51,
            192,200,6,34,216,221
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            73,24,73,73,66,66,5,5,5,5,
            5,5,5,5,5,5,5,5,5,5,
            5,5,5,5,5,5,5,5,24,36,
            37,72,72,72,72,72,72,72,72,72,
            72,72,13,12,7,29,57,31,34,9,
            73,73,8,24,34,34
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            2,80,2,54,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,79,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,64,64,2,82,66,4,54,66,
            54,71,2,78,54,27
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            2,14,2,2,4,4,6,6,6,6,
            6,6,6,6,6,6,6,6,6,6,
            6,6,6,6,6,6,6,6,14,87,
            87,2,2,2,2,2,2,2,2,2,
            2,2,8,8,8,24,1,95,75,8,
            2,2,8,14,75,75
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            153,1,97,75,0,12,0,153,1,97,
            74,0,122,79,122,78,122,52,0,48,
            0,122,78,122,52,0,47,106,48,0,
            122,52,0,46,106,47,106,48,0,171,
            126,53,0,55,106,0,127,65,97,0,
            16,0,128,1,125,24,0,128,1,125,
            23,0,128,1,125,22,0,128,1,125,
            28,0,128,1,125,16,0,128,1,125,
            15,0,128,1,125,14,0,128,1,125,
            13,0,128,1,125,21,0,128,1,125,
            20,0,128,1,125,26,0,128,1,125,
            25,0,128,1,125,17,0,128,1,125,
            4,0,128,1,125,35,0,128,1,125,
            34,0,128,1,125,36,0,128,1,125,
            41,0,128,1,125,37,0,128,1,125,
            39,0,128,1,125,38,0,128,1,125,
            97,0,169,1,42,0,130,1,99,0,
            130,18,3,0,7,106,0,122,54,126,
            71,126,1,83,0,126,71,126,1,83,
            0,18,106,12,0,126,1,83,0,22,
            100,18,106,12,0,122,54,126,1,83,
            0,126,27,126,0,18,106,0,126,0,
            19,100,18,106,0,129,1,94,0,129,
            1,93,0,129,1,92,0,129,1,91,
            0,129,1,90,0,129,1,89,0,129,
            1,87,0,129,1,88,0,129,1,86,
            0,129,1,85,0,129,1,84,0,165,
            63,42,0,14,0,163,63,99,0,122,
            1,0,128,1,44,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            274,317,0,327,0,317,274,2694,2673,2651,
            1214,2620,242,2444,2418,2392,2365,2595,2570,2545,
            2520,2495,2470,2335,2305,1690,2275,2245,2215,2185,
            342,282,1657,1184,2155,2125,2095,2065,1150,1116,
            1082,1048,1014,980,946,912,878,844,810,776,
            742,708,674,640,606,572,538,504,470,436,
            2035,2005,1624,212,402,1975,1945,1915,1885,1855,
            1825,1795,1765,1735,1589,1554,1519,1484,1449,1414,
            1379,1344,1309,1274,1239,0,2793,2729,2716,2788,
            2783,2778,2734,0,2897,2895,1589,1554,1519,1484,
            1449,1414,1379,1344,1309,1274,1239,2892,2811,2888,
            2883,2882,2877,2806,2805,2808,2790,2795,2715,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,155,3,141,143,60,59,58,61,57,
            56,76,142,18,68,69,133,133,133,133,
            133,144,98,97,3,98,130,98,99,42,
            18,18,18,18,18,18,18,159,43,1,
            43,157,142,4,1,1,53,52,44,42,
            99,98,40,24,23,22,16,15,14,13,
            21,20,25,17,4,35,34,36,41,37,
            39,38,97,1,28,26,102,118,116,120,
            123,121,144,3,98,97,145,147,130,169,
            170,126,122,1,63,63,43,125,125,125,
            125,125,125,125,125,125,125,125,125,125,
            125,125,125,125,125,125,125,65,125,122,
            125,125,72,70,75,74,26,25,21,20,
            16,15,14,13,17,4,81,24,23,22,
            4,18,43,1,18,2,27,27,171,172,
            27,78,128,127,165,3,163,122,164,97,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            127,1,1,1,28,26,97,83,94,93,
            92,91,90,89,87,88,86,85,84,97,
            97,116,116,121,120,120,120,130,97,145,
            130,18,82,27,122,27,27,4,73,27,
            162,98,128,128,128,128,128,128,128,128,
            128,128,128,128,128,128,128,128,128,128,
            128,66,128,128,128,65,125,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,4,2,141,79,127,126,129,126,3,
            129,129,129,129,129,129,129,129,129,129,
            153,67,154,153,18,122,66,71,54,27,
            54,18,27,126,122,126,54,54,122
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",//$NON-NLS-1$
            "+",//$NON-NLS-1$
            "-",//$NON-NLS-1$
            "*",//$NON-NLS-1$
            "/",//$NON-NLS-1$
            ">",//$NON-NLS-1$
            "<",//$NON-NLS-1$
            "=",//$NON-NLS-1$
            ">=",//$NON-NLS-1$
            "<=",//$NON-NLS-1$
            "<>",//$NON-NLS-1$
            "(",//$NON-NLS-1$
            ")",//$NON-NLS-1$
            "{",//$NON-NLS-1$
            "}",//$NON-NLS-1$
            "[",//$NON-NLS-1$
            "]",//$NON-NLS-1$
            "->",//$NON-NLS-1$
            "|",//$NON-NLS-1$
            ",//$NON-NLS-1$",//$NON-NLS-1$
            ":",//$NON-NLS-1$
            "::",//$NON-NLS-1$
            ";",//$NON-NLS-1$
            ".",//$NON-NLS-1$
            "..",//$NON-NLS-1$
            "@pre",//$NON-NLS-1$
            "^",//$NON-NLS-1$
            "^^",//$NON-NLS-1$
            "?",//$NON-NLS-1$
            "$empty",//$NON-NLS-1$
            "NUMERIC_OPERATION",//$NON-NLS-1$
            "STRING_LITERAL",//$NON-NLS-1$
            "INTEGER_LITERAL",//$NON-NLS-1$
            "REAL_LITERAL",//$NON-NLS-1$
            "self",//$NON-NLS-1$
            "inv",//$NON-NLS-1$
            "pre",//$NON-NLS-1$
            "post",//$NON-NLS-1$
            "body",//$NON-NLS-1$
            "context",//$NON-NLS-1$
            "package",//$NON-NLS-1$
            "endpackage",//$NON-NLS-1$
            "def",//$NON-NLS-1$
            "derive",//$NON-NLS-1$
            "init",//$NON-NLS-1$
            "if",//$NON-NLS-1$
            "then",//$NON-NLS-1$
            "else",//$NON-NLS-1$
            "endif",//$NON-NLS-1$
            "and",//$NON-NLS-1$
            "or",//$NON-NLS-1$
            "xor",//$NON-NLS-1$
            "not",//$NON-NLS-1$
            "implies",//$NON-NLS-1$
            "let",//$NON-NLS-1$
            "in",//$NON-NLS-1$
            "true",//$NON-NLS-1$
            "false",//$NON-NLS-1$
            "Set",//$NON-NLS-1$
            "Bag",//$NON-NLS-1$
            "Sequence",//$NON-NLS-1$
            "Collection",//$NON-NLS-1$
            "OrderedSet",//$NON-NLS-1$
            "iterate",//$NON-NLS-1$
            "forAll",//$NON-NLS-1$
            "exists",//$NON-NLS-1$
            "isUnique",//$NON-NLS-1$
            "any",//$NON-NLS-1$
            "one",//$NON-NLS-1$
            "collect",//$NON-NLS-1$
            "select",//$NON-NLS-1$
            "reject",//$NON-NLS-1$
            "collectNested",//$NON-NLS-1$
            "sortedBy",//$NON-NLS-1$
            "closure",//$NON-NLS-1$
            "oclIsKindOf",//$NON-NLS-1$
            "oclIsTypeOf",//$NON-NLS-1$
            "oclAsType",//$NON-NLS-1$
            "oclIsNew",//$NON-NLS-1$
            "oclIsUndefined",//$NON-NLS-1$
            "oclIsInvalid",//$NON-NLS-1$
            "oclIsInState",//$NON-NLS-1$
            "allInstances",//$NON-NLS-1$
            "String",//$NON-NLS-1$
            "Integer",//$NON-NLS-1$
            "Real",//$NON-NLS-1$
            "Boolean",//$NON-NLS-1$
            "Tuple",//$NON-NLS-1$
            "OclAny",//$NON-NLS-1$
            "OclVoid",//$NON-NLS-1$
            "Invalid",//$NON-NLS-1$
            "OclMessage",//$NON-NLS-1$
            "null",//$NON-NLS-1$
            "OclInvalid",//$NON-NLS-1$
            "EOF_TOKEN",//$NON-NLS-1$
            "IDENTIFIER",//$NON-NLS-1$
            "ERROR_TOKEN",//$NON-NLS-1$
            "invOrDefCS",//$NON-NLS-1$
            "prePostOrBodyDeclCS",//$NON-NLS-1$
            "initOrDerValueCS",//$NON-NLS-1$
            "variableCS",//$NON-NLS-1$
            "contextDeclCSm",//$NON-NLS-1$
            "pathNameCS",//$NON-NLS-1$
            "contextDeclCS",//$NON-NLS-1$
            "simpleNameCS",//$NON-NLS-1$
            "typeCS",//$NON-NLS-1$
            "oclExpressionCS",//$NON-NLS-1$
            "defExpressionCS",//$NON-NLS-1$
            "operationCS",//$NON-NLS-1$
            "prePostOrBodyDeclCSm",//$NON-NLS-1$
            "parametersCS",//$NON-NLS-1$
            "oclExp0CS",//$NON-NLS-1$
            "oclExp1CS",//$NON-NLS-1$
            "oclExp2CS",//$NON-NLS-1$
            "oclExp3CS",//$NON-NLS-1$
            "oclExp4CS",//$NON-NLS-1$
            "oclExp5CS",//$NON-NLS-1$
            "oclExp6CS",//$NON-NLS-1$
            "oclExp7CS",//$NON-NLS-1$
            "callExpCS",//$NON-NLS-1$
            "messageExpCS",//$NON-NLS-1$
            "argumentsCS",//$NON-NLS-1$
            "collectionTypeIdentifierCS",//$NON-NLS-1$
            "collectionLiteralPartsCS",//$NON-NLS-1$
            "collectionLiteralPartCS",//$NON-NLS-1$
            "variableListCS2",//$NON-NLS-1$
            "featureCallExpCS",//$NON-NLS-1$
            "loopExpCS",//$NON-NLS-1$
            "iterContents",//$NON-NLS-1$
            "variableCS2",//$NON-NLS-1$
            "variableListCS",//$NON-NLS-1$
            "letExpSubCS",//$NON-NLS-1$
            "oclMessageArgumentsCS",//$NON-NLS-1$
            "oclMessageArgCS"//$NON-NLS-1$
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 95,
           SCOPE_UBOUND      = 55,
           SCOPE_SIZE        = 56,
           MAX_NAME_LENGTH   = 26;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 299,
           NT_OFFSET         = 95,
           LA_STATE_OFFSET   = 3154,
           MAX_LA            = 2,
           NUM_RULES         = 211,
           NUM_NONTERMINALS  = 78,
           NUM_SYMBOLS       = 173,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 2715,
           IDENTIFIER_SYMBOL = 3,
           EOFT_SYMBOL       = 62,
           EOLT_SYMBOL       = 62,
           ACCEPT_ACTION     = 2942,
           ERROR_ACTION      = 2943;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
