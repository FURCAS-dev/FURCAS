/**
* <copyright>
*
* Copyright (c) 2005, 2006 IBM Corporation and others.
* All rights reserved.   This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   IBM - Initial API and implementation
*
* </copyright>
*
* $Id: OCLLPGParserprs.java,v 1.1 2006/04/04 18:09:05 cdamus Exp $
*/

package org.eclipse.emf.ocl.internal.parser;

public class OCLLPGParserprs implements lpg.lpgjavaruntime.ParseTable, OCLLPGParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,1,1,1,1,1,1,1,
            1,0,1,0,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,0,0,
            0,0,0,0,1,1,1,1,0,1,
            1,1,0,0,0,0,0,0,1,0,
            0,0,0,0,0,0,1,1,1,1,
            1,0,0,0,0,0,0,1,1,1,
            1,1,0,0,0,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            1,1,1,1,1,0,1,4,0,1,
            1,2,1,1,1,7,4,4,0,1,
            3,4,4,5,3,3,1,2,4,4,
            4,6,8,0,1,1,3,0,1,1,
            1,1,3,1,3,3,3,1,3,3,
            3,3,3,3,1,1,1,3,3,1,
            3,3,1,2,2,1,2,2,4,1,
            1,1,3,2,5,1,1,1,1,1,
            1,1,1,1,1,1,1,3,0,1,
            1,1,1,1,1,1,3,4,1,1,
            1,1,1,0,1,1,3,1,1,3,
            1,1,1,1,4,1,1,1,1,1,
            1,1,2,2,2,1,1,4,4,4,
            4,4,4,4,4,4,4,4,1,3,
            5,6,8,1,3,5,3,0,1,1,
            1,1,1,4,4,0,1,1,3,1,
            1,3,3,1,1,5,5,5,5,5,
            5,5,5,5,2,5,0,1,0,1,
            1,3,5,0,1,2,3,7,5,5,
            0,1,1,3,1,1,3,-84,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-107,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-22,-39,0,0,-2,-26,
            -36,0,0,0,-3,0,0,-206,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-41,0,0,-100,0,0,0,-12,
            0,0,0,0,-99,0,0,-4,-5,0,
            0,-15,-171,0,-16,0,-13,0,0,-207,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-85,
            0,0,0,-17,0,0,0,0,0,-18,
            0,0,0,0,-19,0,0,0,0,-38,
            -80,-20,-21,-6,0,0,-7,0,0,0,
            0,-82,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-138,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-24,
            0,-139,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-25,-27,0,-28,0,-140,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-29,-30,0,-42,
            0,-141,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-49,-50,0,-51,0,-142,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-52,-66,0,-67,
            0,-143,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-68,-69,0,-70,0,-144,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-71,-72,0,-73,
            0,-146,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-74,-75,0,-76,0,-180,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-108,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-195,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-77,-78,0,-196,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-79,-81,
            0,-197,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-86,-87,0,-198,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-88,-89,0,-199,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -90,-91,0,-200,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-92,-93,0,-201,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-95,-96,
            0,-202,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-122,-125,0,-203,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-126,-129,0,-204,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -130,-131,0,-205,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-132,-133,0,-94,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-134,-135,0,
            -192,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -43,-65,0,-239,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-101,0,0,-102,0,0,0,
            0,0,0,-136,-145,0,0,-148,-149,0,
            -31,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -32,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -33,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -34,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -35,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -37,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -44,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -48,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -62,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -117,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -128,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -173,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -176,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -178,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -179,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -208,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -211,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -235,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -237,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -243,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -244,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -113,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-114,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-115,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-116,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-109,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -110,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-111,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -112,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-103,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-104,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-105,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -106,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-63,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-64,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-1,-172,0,-47,0,0,-119,0,0,
            -14,0,-150,0,0,-151,-152,-231,0,-153,
            0,0,-45,0,-154,0,0,-11,0,0,
            0,0,-118,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-97,0,0,0,
            -8,0,0,0,0,-46,-40,0,0,0,
            0,-121,0,-83,0,0,-238,0,0,0,
            0,-9,0,0,-10,0,0,-137,-98,-23,
            0,-177,-155,-120,-53,0,0,-54,0,-55,
            0,0,-156,0,-56,-157,0,0,0,-158,
            -57,0,0,0,-123,-58,-159,-59,0,0,
            0,0,0,0,-60,0,-61,-147,0,-124,
            0,0,0,0,-127,0,0,-174,-190,0,
            0,0,-194,0,0,0,0,0,0,0,
            -233,-160,-234,-236,0,0,-161,0,0,0,
            -162,-163,-164,-165,0,-166,-167,0,-168,0,
            -169,-170,0,-175,-181,-182,-183,-184,-185,-186,
            -187,0,0,0,-188,-189,-191,-193,-209,-210,
            -212,-213,-214,-215,-216,-217,-218,-219,-220,-221,
            -222,-223,-224,-225,-226,-227,-228,-229,-230,-232,
            -240,-241,-242,-245,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            62,62,62,62,62,62,62,63,63,64,
            64,49,49,39,39,39,42,48,48,50,
            50,40,47,47,65,65,41,66,66,43,
            43,43,51,51,52,52,54,54,38,38,
            27,27,28,28,26,26,26,26,25,25,
            25,25,25,25,25,22,22,23,23,23,
            21,21,21,20,20,20,6,6,6,6,
            7,7,7,7,8,8,2,2,2,1,
            1,1,1,1,1,1,1,3,3,67,
            67,9,9,9,9,9,9,10,11,4,
            4,4,4,4,68,68,69,69,55,55,
            56,13,13,13,13,12,16,17,18,19,
            19,14,15,44,44,44,71,71,72,72,
            72,72,72,72,72,72,72,72,72,33,
            33,33,73,73,30,30,30,58,53,53,
            35,35,35,35,37,36,74,74,75,75,
            70,70,70,70,57,57,5,5,5,5,
            5,5,5,5,5,59,59,31,31,34,
            34,32,32,29,76,76,77,77,24,45,
            45,60,60,61,61,46,46,46,193,76,
            2337,597,565,72,1202,66,70,71,91,92,
            93,94,95,96,111,112,113,114,60,600,
            48,598,56,632,635,1168,633,41,279,76,
            2337,597,565,72,1202,66,70,71,91,92,
            93,94,95,96,111,112,113,114,60,600,
            54,598,56,106,108,458,560,76,702,47,
            543,548,76,460,670,3,1136,1169,1,76,
            2337,597,565,72,1202,66,70,71,91,92,
            93,94,95,96,111,112,113,114,60,600,
            48,598,56,632,635,195,633,41,27,11,
            13,14,15,560,76,88,401,76,2338,1201,
            46,165,667,260,193,429,76,2338,546,441,
            165,380,40,13,530,281,23,146,2416,2418,
            1,76,2337,597,565,72,1202,66,70,71,
            91,92,93,94,95,96,111,112,113,114,
            60,600,48,598,56,632,635,195,633,41,
            560,76,1244,123,323,164,12,13,14,15,
            391,2400,125,319,164,418,193,124,126,127,
            584,684,459,655,457,76,39,457,76,39,
            2419,2418,150,76,2337,597,565,72,1202,66,
            70,71,91,92,93,94,95,96,111,112,
            113,114,60,600,48,598,56,632,635,181,
            633,41,364,28,1101,370,1068,150,76,2337,
            597,565,72,1202,66,70,71,91,92,93,
            94,95,96,111,112,113,114,60,600,48,
            598,56,632,635,181,633,41,1034,1067,1101,
            656,2387,150,76,2337,597,565,72,1202,66,
            70,71,91,92,93,94,95,96,111,112,
            113,114,60,600,48,598,56,632,635,181,
            633,41,578,376,1101,402,2388,150,76,2337,
            597,565,72,1202,66,70,71,91,92,93,
            94,95,96,111,112,113,114,60,600,48,
            598,56,632,635,181,633,41,668,671,1101,
            609,2389,150,76,2337,597,565,72,1202,66,
            70,71,91,92,93,94,95,96,111,112,
            113,114,60,600,48,598,56,632,635,181,
            633,41,678,30,1101,99,2390,150,76,2337,
            597,565,72,1202,66,70,71,91,92,93,
            94,95,96,111,112,113,114,60,600,48,
            598,56,632,635,181,633,41,653,447,1101,
            536,2391,150,76,2337,597,565,72,1202,66,
            70,71,91,92,93,94,95,96,111,112,
            113,114,60,600,48,598,56,632,635,181,
            633,41,535,534,1101,374,2395,150,76,2337,
            597,565,72,1202,66,70,71,91,92,93,
            94,95,96,111,112,113,114,60,600,48,
            598,56,632,635,181,633,41,523,616,1101,
            658,2396,150,76,2337,597,565,72,1202,66,
            70,71,91,92,93,94,95,96,111,112,
            113,114,60,600,48,598,56,632,635,181,
            633,41,625,248,1101,675,2397,107,76,2337,
            597,565,72,1202,66,70,71,91,92,93,
            94,95,96,111,112,113,114,60,600,48,
            598,56,632,635,1168,633,41,279,76,2337,
            597,565,72,1202,66,70,71,91,92,93,
            94,95,96,111,112,113,114,60,600,53,
            598,56,107,108,236,76,2337,597,565,72,
            1202,66,70,71,91,92,93,94,95,96,
            111,112,113,114,60,600,48,598,56,632,
            635,139,633,41,2404,681,688,2403,236,76,
            2337,597,565,72,1202,66,70,71,91,92,
            93,94,95,96,111,112,113,114,60,600,
            48,598,56,632,635,139,633,41,2404,680,
            318,2406,236,76,2337,597,565,72,1202,66,
            70,71,91,92,93,94,95,96,111,112,
            113,114,60,600,48,598,56,632,635,139,
            633,41,2404,691,701,2407,236,76,2337,597,
            565,72,1202,66,70,71,91,92,93,94,
            95,96,111,112,113,114,60,600,48,598,
            56,632,635,139,633,41,2404,704,707,2408,
            236,76,2337,597,565,72,1202,66,70,71,
            91,92,93,94,95,96,111,112,113,114,
            60,600,48,598,56,632,635,139,633,41,
            2404,709,711,2409,236,76,2337,597,565,72,
            1202,66,70,71,91,92,93,94,95,96,
            111,112,113,114,60,600,48,598,56,632,
            635,139,633,41,2404,713,715,2410,236,76,
            2337,597,565,72,1202,66,70,71,91,92,
            93,94,95,96,111,112,113,114,60,600,
            48,598,56,632,635,139,633,41,2404,718,
            697,2411,236,76,2337,597,565,72,1202,66,
            70,71,91,92,93,94,95,96,111,112,
            113,114,60,600,48,598,56,632,635,139,
            633,41,2404,720,660,2412,236,76,2337,597,
            565,72,1202,66,70,71,91,92,93,94,
            95,96,111,112,113,114,60,600,48,598,
            56,632,635,139,633,41,2404,721,722,2413,
            236,76,2337,597,565,72,1202,66,70,71,
            91,92,93,94,95,96,111,112,113,114,
            60,600,48,598,56,632,635,139,633,41,
            2404,723,636,2414,236,76,2337,597,565,72,
            1202,66,70,71,91,92,93,94,95,96,
            111,112,113,114,60,600,48,598,56,632,
            635,139,633,41,2404,44,685,2415,107,76,
            2337,597,565,72,1202,66,70,71,91,92,
            93,94,95,96,111,112,113,114,60,600,
            48,598,56,632,635,181,633,41,104,725,
            1245,107,76,2337,597,565,72,1202,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,60,600,48,598,56,632,635,181,633,
            41,498,45,2401,54,76,2337,597,565,72,
            1202,66,70,71,91,92,93,94,95,96,
            111,112,113,114,60,600,48,598,56,632,
            635,195,633,41,560,76,2362,560,76,2367,
            12,13,14,15,726,640,67,68,728,733,
            194,107,76,2337,597,565,72,1202,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,60,600,48,598,56,632,635,18,633,
            41,107,76,2337,597,565,72,1202,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,60,600,48,598,56,632,635,17,633,
            41,107,76,2337,597,565,72,1202,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,60,600,48,598,56,632,635,31,633,
            41,107,76,2337,597,565,72,1202,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,60,600,48,598,56,632,635,30,633,
            41,107,76,2337,597,565,72,1202,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,60,600,48,598,56,632,635,29,633,
            41,107,76,2337,597,565,72,1202,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,60,600,48,598,56,632,635,22,633,
            41,107,76,2337,597,565,72,1202,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,60,600,48,598,56,632,635,146,633,
            41,107,76,2337,597,565,72,1202,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,60,600,48,598,56,632,635,830,633,
            41,107,76,2337,597,565,72,1202,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,60,600,48,598,56,632,635,1000,633,
            41,107,76,2337,597,565,72,1202,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,60,600,48,598,56,632,635,25,633,
            41,107,76,2337,597,565,72,1202,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,60,600,48,598,56,632,635,2384,633,
            41,107,76,2337,597,565,72,1202,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,60,600,48,598,56,632,635,183,633,
            41,107,76,2337,597,565,72,1202,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,60,600,48,598,56,632,635,182,633,
            41,107,76,2337,597,565,72,1202,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,60,600,48,598,56,632,635,147,633,
            41,107,76,2337,597,565,72,1202,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,60,600,48,598,56,632,635,110,633,
            41,107,76,2337,597,565,72,1202,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,60,600,48,598,56,632,635,24,633,
            41,107,76,2337,597,565,72,1202,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,60,600,48,598,56,632,635,2420,633,
            41,107,76,2337,597,565,72,1202,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,60,600,48,598,56,632,635,2422,633,
            41,107,76,2337,597,565,72,1202,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,60,600,48,598,56,632,635,140,633,
            41,107,76,2337,597,565,72,1202,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,60,600,48,598,56,632,635,2424,633,
            41,107,76,2337,597,565,72,1202,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,60,600,48,598,56,632,635,141,633,
            41,279,76,2337,597,565,72,1202,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,60,600,48,598,56,632,2373,279,76,
            2337,597,565,72,1202,66,70,71,91,92,
            93,94,95,96,111,112,113,114,60,600,
            48,598,56,2374,279,76,2337,597,565,72,
            1202,66,70,71,91,92,93,94,95,96,
            111,112,113,114,60,600,48,598,56,2376,
            279,76,2337,597,565,72,1202,66,70,71,
            91,92,93,94,95,96,111,112,113,114,
            60,600,48,598,56,2377,279,76,2337,597,
            565,72,1202,66,70,71,91,92,93,94,
            95,96,111,112,113,114,60,600,52,598,
            56,279,76,2337,597,565,72,1202,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,60,600,51,598,56,279,76,2337,597,
            565,72,1202,66,70,71,91,92,93,94,
            95,96,111,112,113,114,60,600,50,598,
            56,279,76,2337,597,565,72,1202,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,60,600,49,598,56,321,76,2337,597,
            565,72,1202,66,70,71,91,92,93,94,
            95,96,111,112,113,114,60,2371,321,76,
            2337,597,565,72,1202,66,70,71,91,92,
            93,94,95,96,111,112,113,114,60,2372,
            321,76,2337,597,565,72,1202,66,70,71,
            91,92,93,94,95,96,111,112,113,114,
            62,321,76,2337,597,565,72,1202,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,61,362,76,2337,597,565,72,2267,66,
            70,71,91,92,93,94,95,96,111,112,
            113,114,362,76,2337,597,565,72,2299,66,
            70,71,91,92,93,94,95,96,111,112,
            113,114,542,522,150,674,495,527,560,76,
            2381,496,150,740,495,527,743,745,522,150,
            747,495,527,496,150,750,495,527,469,76,
            460,2300,5,496,150,381,495,527,149,151,
            152,11,13,14,15,3,493,151,152,2,
            318,327,319,149,151,152,32,50,795,151,
            152,457,76,39,259,1,673,48,2379,151,
            152,33,496,150,693,495,527,496,150,255,
            495,527,457,76,39,457,76,39,727,364,
            577,2386,693,752,48,649,158,36,649,375,
            649,67,68,756,161,649,758,323,151,152,
            760,649,197,151,152,674,649,762,649,703,
            382,705,163,383,36,649,863,443,605,864,
            674,897,160,67,68,674,898,21,674,649,
            796,829,931,674,1102,37,2382,932,705,965,
            162,649,764,674,674,2385,966,766,999,2398,
            159,611,613,576,549,186,575,585,187,731,
            75,768,736,2402,754,771,772,774,775,778,
            779,782,176,2421,2423,783,786,787,790,792,
            521,651,164,793,652,598,794,797,798,803,
            806,807,810,811,814,815,818,819,821,822,
            152,222,823,802,826,2427,2427
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,0,3,4,5,6,7,8,9,
            10,11,0,13,12,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,0,
            30,31,32,33,34,35,36,37,38,0,
            40,41,42,0,0,0,0,0,3,0,
            3,12,0,0,1,12,3,4,5,6,
            7,8,9,10,11,0,13,67,15,16,
            17,18,19,20,21,22,23,24,25,26,
            27,28,39,30,31,32,33,34,35,36,
            37,38,63,40,41,42,52,53,0,55,
            56,52,53,0,55,56,0,1,62,3,
            4,5,6,7,8,9,10,11,0,13,
            67,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,0,30,31,32,33,
            34,35,36,37,38,0,40,41,42,0,
            1,0,3,4,5,6,7,8,9,10,
            11,63,13,0,15,16,17,18,19,20,
            21,22,23,24,25,26,27,28,75,30,
            31,32,33,34,35,36,37,38,0,40,
            41,42,0,1,49,3,4,5,6,7,
            8,9,10,11,0,13,43,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,0,30,31,32,33,34,35,36,37,
            38,80,40,41,42,0,1,74,3,4,
            5,6,7,8,9,10,11,0,13,2,
            15,16,17,18,19,20,21,22,23,24,
            25,26,27,28,43,30,31,32,33,34,
            35,36,37,38,0,40,41,42,0,1,
            0,3,4,5,6,7,8,9,10,11,
            0,13,12,15,16,17,18,19,20,21,
            22,23,24,25,26,27,28,0,30,31,
            32,33,34,35,36,37,38,0,40,41,
            0,1,0,3,4,5,6,7,8,9,
            10,11,0,13,12,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,0,
            30,31,32,33,34,35,36,37,38,0,
            40,0,1,0,3,4,5,6,7,8,
            9,10,11,0,13,0,15,16,17,18,
            19,20,21,22,23,24,25,26,27,28,
            0,30,31,32,33,78,35,36,37,38,
            0,0,12,3,4,5,6,7,8,9,
            10,11,0,13,39,52,53,0,55,56,
            20,21,22,23,24,25,26,27,0,12,
            29,3,4,5,6,7,8,9,10,11,
            0,13,0,70,71,72,0,0,20,21,
            22,23,24,25,26,27,0,0,0,3,
            4,5,6,7,8,9,10,11,0,13,
            12,3,4,5,6,7,8,9,10,11,
            34,13,0,83,84,85,86,87,88,89,
            90,91,92,93,94,0,54,0,3,4,
            5,6,7,8,9,10,11,65,68,69,
            15,16,17,18,19,58,59,60,0,73,
            0,0,0,28,3,4,5,6,7,8,
            9,10,11,0,0,0,15,16,17,18,
            19,0,0,0,3,0,49,0,0,28,
            3,4,5,6,7,8,9,10,11,0,
            13,39,3,4,5,6,7,8,9,10,
            11,29,13,39,0,0,0,0,44,45,
            46,47,48,0,0,50,51,39,68,69,
            49,49,44,45,46,47,48,0,57,58,
            59,60,61,62,0,29,29,62,0,12,
            0,14,0,39,81,0,0,76,44,45,
            46,47,48,39,0,1,29,12,44,45,
            46,47,48,57,57,0,12,61,61,0,
            43,58,59,60,29,70,71,72,0,14,
            0,0,0,14,0,0,1,0,54,0,
            50,51,50,51,14,14,12,0,1,65,
            0,1,0,0,0,3,3,0,1,0,
            0,29,2,0,0,77,29,0,14,2,
            0,1,0,14,43,3,0,14,2,64,
            0,1,54,0,1,66,0,1,0,1,
            0,1,0,1,0,1,66,0,1,0,
            0,0,0,2,0,0,0,0,1,3,
            0,12,0,1,14,0,14,2,14,0,
            1,82,0,1,0,1,0,1,64,0,
            1,0,1,0,29,0,1,0,1,0,
            1,0,1,0,1,0,1,0,1,39,
            0,0,2,0,0,2,2,0,0,2,
            2,0,0,2,2,0,0,2,2,0,
            1,0,0,0,2,2,0,0,2,2,
            29,0,0,12,2,0,0,2,2,0,
            0,2,2,0,0,2,2,0,0,2,
            0,0,0,2,2,0,0,2,0,0,
            12,0,79,0,14,0,0,0,0,0,
            0,0,0,0,43,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            191,1491,144,492,2507,2506,2508,2509,2510,2511,
            2512,2513,19,2504,2221,2526,2527,2528,2529,2530,
            2310,2308,2315,2326,2335,2328,2305,2321,563,2427,
            562,2545,2543,2544,2192,2546,2547,2548,2549,2427,
            2172,1461,2215,144,63,2427,2427,34,2514,65,
            265,1251,2427,2427,1491,2221,492,2507,2506,2508,
            2509,2510,2511,2512,2513,2427,2504,2417,2526,2527,
            2528,2529,2530,2310,2308,2315,2326,2335,2328,2305,
            2321,563,1641,562,2545,2543,2544,2192,2546,2547,
            2548,2549,2284,2172,1461,2215,306,315,2427,1237,
            1234,306,315,109,1237,1234,2427,1491,2426,492,
            2507,2506,2508,2509,2510,2511,2512,2513,2427,2504,
            2417,2526,2527,2528,2529,2530,2310,2308,2315,2326,
            2335,2328,2305,2321,563,2427,562,2545,2543,2544,
            2192,2546,2547,2548,2549,7,2172,1461,2215,179,
            1491,2427,492,2507,2506,2508,2509,2510,2511,2512,
            2513,198,2504,2427,2526,2527,2528,2529,2530,2310,
            2308,2315,2326,2335,2328,2305,2321,563,1671,562,
            2545,2543,2544,2192,2546,2547,2548,2549,2427,2172,
            1461,2215,104,1491,2238,492,2507,2506,2508,2509,
            2510,2511,2512,2513,2427,2504,1761,2526,2527,2528,
            2529,2530,2310,2308,2315,2326,2335,2328,2305,2321,
            563,2427,562,2545,2543,2544,2192,2546,2547,2548,
            2549,2615,2172,1461,2215,2427,1491,2363,2405,2507,
            2506,2508,2509,2510,2511,2512,2513,2427,2504,1033,
            2526,2527,2528,2529,2530,2310,2308,2315,2326,2335,
            2328,2305,2321,563,1821,562,2545,2543,2544,2192,
            2546,2547,2548,2549,2427,2172,1461,2215,2427,1491,
            2427,492,2507,2506,2508,2509,2510,2511,2512,2513,
            2427,2504,1281,2526,2527,2528,2529,2530,2310,2308,
            2315,2326,2335,2328,2305,2321,563,2427,562,2545,
            2543,2544,2192,2546,2547,2548,2549,2427,2172,1461,
            2427,1491,2427,492,2507,2506,2508,2509,2510,2511,
            2512,2513,2427,2504,1311,2526,2527,2528,2529,2530,
            2310,2308,2315,2326,2335,2328,2305,2321,563,2427,
            562,2545,2543,2544,2192,2546,2547,2548,2549,2427,
            2172,2427,1491,64,492,2507,2506,2508,2509,2510,
            2511,2512,2513,42,2504,145,2526,2527,2528,2529,
            2530,2310,2308,2315,2326,2335,2328,2305,2321,563,
            2427,562,2545,2543,2544,1551,2546,2547,2548,2549,
            2427,153,1341,2505,2507,2506,2508,2509,2510,2511,
            2512,2513,2427,2504,1431,306,315,2427,1237,1234,
            2310,2308,2315,2326,2335,2328,2305,2321,2427,1371,
            303,2505,2507,2506,2508,2509,2510,2511,2512,2513,
            2427,2504,177,1960,1934,1908,55,2427,2310,2308,
            2315,2326,2335,2328,2305,2321,38,2427,2427,2505,
            2507,2506,2508,2509,2510,2511,2512,2513,2427,2504,
            261,492,2507,2506,2508,2509,2510,2511,2512,2513,
            2086,2504,2427,1248,2327,2320,2316,2303,2313,2235,
            2230,2227,2226,2223,1249,2427,2605,10,2514,2507,
            2506,2508,2509,2510,2511,2512,2513,1138,322,325,
            2526,2527,2528,2529,2530,2271,387,384,2427,2108,
            16,148,2427,528,2514,2507,2506,2508,2509,2510,
            2511,2512,2513,40,44,57,2526,2527,2528,2529,
            2530,19,9,2427,265,20,2238,2427,47,528,
            668,2507,2506,2508,2509,2510,2511,2512,2513,2427,
            2504,1521,2505,2507,2506,2508,2509,2510,2511,2512,
            2513,303,2504,2061,46,43,2427,78,2011,1986,
            737,228,2036,26,45,2151,2130,2061,20,20,
            2238,2238,2011,1986,737,228,2036,78,2295,2271,
            387,384,2292,6,177,256,87,4,2427,2221,
            59,144,58,2061,1881,78,2427,310,2011,1986,
            737,228,2036,2061,88,2304,87,2243,2011,1986,
            737,228,2036,2295,87,2427,2282,2292,87,2427,
            144,2271,387,384,87,1960,1934,1908,177,2302,
            2427,2427,2427,1611,2427,2427,2277,2427,2605,2427,
            2151,2130,2151,2130,1611,2364,1401,2427,2233,1171,
            2427,2276,156,2427,35,265,265,2427,392,157,
            2427,360,2581,184,2427,2435,2218,2427,2325,2582,
            2427,2298,2427,2340,1791,1135,2427,2345,2500,2542,
            2427,427,2605,2427,462,2349,2427,497,2427,532,
            2427,567,2427,602,2427,637,2361,74,672,2427,
            185,2427,180,2496,105,97,89,2427,2353,2514,
            2427,2213,2427,764,2348,2427,1611,2399,707,2427,
            798,1581,2427,832,2427,866,2427,900,2525,2427,
            934,2427,968,2427,88,2427,1002,2427,1036,2427,
            1070,2427,1104,2427,268,2427,330,88,2304,1701,
            2427,90,2601,2427,2427,2600,2599,2427,2427,2598,
            2597,2427,2427,2596,2595,2427,2427,2594,2593,175,
            672,2427,2427,2427,2565,2564,2427,2427,2563,2562,
            303,2427,2427,2228,2561,2427,2427,2560,2559,2427,
            2427,2558,2557,2427,2427,2556,2555,2427,196,2617,
            192,2427,2427,2616,2569,2427,2427,2570,2427,2427,
            2287,2427,1731,2427,1204,2427,2427,2427,2427,2427,
            2427,2427,2427,2427,1851
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            321,331,44,266,267,126,126,126,126,126,
            81,90,330,24,136,136,136,136,136,136,
            136,217,353,358,177,40,309,303,358,358,
            54,54,54,54,54,81,54,214,81,174,
            81,42,41,54,24,174,90,54,358,221,
            221,227,357,357,357,357,357,357,357,357,
            180,54,58,58,183,189,187,191,200,197,
            351,225,227,223,175,389,175,175,389,123,
            229,138,90,1,81,358,358,358,358,358,
            358,358,358,54,231,175,183,183,73,92,
            81,81,56,56,56,56,55,55,55,55,
            55,55,55,55,55,55,54,24,81,174,
            24,136,90,90,124,123,90,54,175,389,
            272,270,273,275,272,279,174,138,138,138,
            138,138,138,138,318,138,180,358,358,358,
            358,358,358,358,358,358,358,358,358,358,
            358,187,187,197,191,191,191,351,226,175,
            267,333,54,90,360,54,90,54,54,54,
            175,362,175,175,175,175,175,175,175,182,
            175,54,231,90,54,54,54,54,54,54,
            54,54,54,54,54,52,52,54,136,264,
            54,318,49,175,315,365,175,175,175,175,
            175,175,175,175,175,175,175,388,389,175,
            333,392,182,90,54,90,54,24,53,316,
            175,316,54,54,175
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            64,34,40,1,24,25,23,27,22,20,
            21,26,35,36,31,33,32,37,38,13,
            30,41,42,5,4,6,7,8,9,10,
            11,28,15,16,17,18,19,3,0,29,
            49,77,0,2,14,82,62,12,43,74,
            0,2,67,42,41,34,40,1,15,16,
            17,18,19,28,35,36,31,33,32,37,
            38,30,24,25,23,27,22,20,21,26,
            13,5,4,6,7,8,9,10,11,3,
            0,84,85,86,88,87,89,90,91,92,
            93,94,83,5,4,6,7,8,9,10,
            11,13,3,24,25,23,27,22,20,21,
            26,0,14,82,0,13,3,5,4,6,
            7,8,9,10,11,12,0,34,40,1,
            24,25,23,27,22,20,21,26,15,16,
            17,18,19,28,35,36,31,33,32,37,
            38,13,5,4,6,7,8,9,10,11,
            30,41,42,3,2,0,29,57,61,1,
            65,54,55,56,52,53,50,51,73,34,
            39,48,44,45,46,47,70,71,72,2,
            64,66,43,14,74,75,68,69,78,79,
            80,82,81,49,77,62,58,59,60,0,
            63,0,57,61,12,1,29,0,78,0,
            73,34,50,51,44,45,39,46,47,48,
            2,64,66,52,43,14,74,53,75,55,
            56,58,59,60,78,79,80,70,71,72,
            81,82,1,49,77,62,69,68,0,12,
            39,14,64,0,64,14,75,0,73,34,
            50,51,44,45,46,47,48,66,52,53,
            75,55,56,49,77,78,79,80,70,71,
            72,81,58,59,60,68,69,29,2,64,
            74,82,62,39,14,43,0,66,14,0,
            68,69,76,57,61,58,59,60,3,49,
            62,0,58,59,60,5,4,6,7,8,
            9,10,11,28,15,16,17,18,19,3,
            39,0,57,61,29,0,54,1,0,79,
            0,2,29,0,43,29,73,34,50,51,
            44,45,39,46,47,48,1,65,52,53,
            54,55,56,70,71,72,81,12,2,14,
            0,80,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            29,25,25,25,25,19,19,19,19,19,
            6,24,13,23,25,25,25,25,25,25,
            25,1,38,25,25,3,25,25,25,25,
            22,22,22,22,22,5,22,15,8,34,
            8,25,13,22,23,32,41,22,25,25,
            25,25,43,43,43,43,43,43,43,43,
            43,22,22,22,26,25,25,25,25,25,
            25,25,25,25,25,25,25,25,25,17,
            25,22,36,22,8,25,25,25,25,25,
            25,25,25,22,25,25,26,26,8,10,
            8,8,22,22,22,22,22,22,22,22,
            22,22,22,22,22,22,22,23,8,34,
            23,25,41,41,25,25,41,22,25,25,
            25,25,25,25,25,25,24,22,22,22,
            22,22,22,22,25,22,43,25,25,25,
            25,25,25,25,25,25,25,25,25,25,
            25,25,25,25,25,25,25,25,25,25,
            30,23,22,41,25,22,40,22,22,22,
            25,25,25,25,25,25,25,25,25,43,
            25,22,25,41,21,21,21,21,21,21,
            21,21,21,21,21,22,22,22,25,25,
            22,25,25,25,25,25,25,25,25,25,
            25,25,25,25,25,25,25,25,25,25,
            23,25,43,41,22,41,22,23,22,25,
            25,25,22,22,25
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            66,0,49,0,65,3,51,2,0,2,
            71,0,39,0,43,0,77,0,38,0,
            30,2,4,3,0,44,45,0,49,48,
            0,75,0,54,0,70,0,47,0,58,
            30,0,31,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            11,12,95,83,84,85,86,88,89,90,
            91,20,34,19,58,59,60,61,62,75,
            76,77,78,79,80,81,82,87,21,30,
            31,32,33,2,56,57,92,93,7,52,
            45,54,18,5,6,8,9,10,39,3,
            4,17,23,25,26,27,35,36,37,38,
            42,94,13,14,15,16,28,43,44,49,
            50,51,1,22,24,40,41,46,47,48,
            53,55,63,64,65,66,67,68,69,70,
            71,72,73,74,96
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            0,104,102,122,0,118,0,0,0,0,
            0,0,0,0,0,0,0,0,0,117,
            116,114,115,0,113,112,106,111,0,100,
            0,121,128,0,105,0,0,0,103,0,
            0,0,98,119,120,133,97,99,101,0,
            108,0,0,110,124,0,126,129,0,0,
            132,0,0,0,107,109,0,0,123,125,
            127,0,0,0,130,0,131,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            108,13,136,116,1,8,53,58,63,68,
            73,78,83,88,22,93,97,156,160,164,
            168,172,176,180,184,188,192,196,200,206,
            213,40,47,101,142,47,126,126,210,31,
            149,149
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            6,20,6,122,6,6,6,6,6,6,
            6,6,6,6,27,6,6,6,6,6,
            6,6,6,6,6,6,6,6,204,204,
            6,44,51,105,146,51,122,130,6,34,
            146,151
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            73,24,73,73,45,45,5,5,5,5,
            5,5,5,5,24,36,37,72,72,72,
            72,72,72,72,72,72,72,72,12,11,
            6,29,59,30,33,8,73,73,7,24,
            33,33
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            2,80,2,43,2,2,2,2,2,2,
            2,2,2,2,79,2,2,2,2,2,
            2,2,2,2,2,2,2,2,64,64,
            2,82,66,39,43,66,43,74,2,78,
            43,14
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            2,16,2,2,4,4,8,8,8,8,
            8,8,8,8,16,75,75,2,2,2,
            2,2,2,2,2,2,2,2,10,10,
            10,26,1,83,63,10,2,2,10,16,
            63,63
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            155,1,97,56,0,12,0,155,1,97,
            55,0,122,79,122,78,122,41,0,48,
            0,122,78,122,41,0,47,106,48,0,
            122,41,0,46,106,47,106,48,0,171,
            125,42,0,55,106,0,127,65,97,0,
            16,0,129,1,126,21,0,129,1,126,
            20,0,129,1,126,22,0,129,1,126,
            27,0,129,1,126,23,0,129,1,126,
            25,0,129,1,126,24,0,129,1,126,
            97,0,169,1,28,0,130,1,99,0,
            130,12,3,0,7,106,0,122,43,125,
            74,125,1,83,0,125,74,125,1,83,
            0,18,106,12,0,125,1,83,0,22,
            100,18,106,12,0,122,43,125,1,83,
            0,125,14,125,0,18,106,0,125,0,
            19,100,18,106,0,128,1,94,0,128,
            1,93,0,128,1,92,0,128,1,91,
            0,128,1,90,0,128,1,89,0,128,
            1,87,0,128,1,88,0,128,1,86,
            0,128,1,85,0,128,1,84,0,165,
            63,28,0,14,0,163,63,99,0,122,
            1,0,129,1,30,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            315,306,0,2299,2267,1202,0,306,315,2151,
            2130,2108,2086,2192,2172,1960,1934,1908,1881,2061,
            2036,2011,1986,737,228,1851,1821,1204,1791,1761,
            1731,1701,330,268,1171,707,1671,1641,1611,1581,
            672,637,602,567,532,497,462,427,1551,1521,
            1138,198,392,1491,1461,1431,1401,1371,1341,1311,
            1281,1251,1104,1070,1036,1002,968,934,900,866,
            832,798,764,0,2287,2228,2213,2282,2243,2233,
            2221,0,2364,2363,1104,1070,1036,1002,968,934,
            900,866,832,798,764,2353,2302,2348,2345,2340,
            2325,2304,2284,2215,2276,2277,2212,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,157,3,143,145,60,59,58,61,57,
            49,76,144,12,68,69,133,133,133,133,
            133,146,98,97,3,98,130,98,99,28,
            12,12,12,12,12,12,12,161,29,1,
            29,159,144,39,1,1,42,41,30,28,
            99,98,26,21,20,22,27,23,25,24,
            97,1,40,34,101,118,116,120,123,121,
            146,3,98,97,147,149,130,169,170,125,
            122,1,63,63,29,126,126,126,126,126,
            126,126,126,65,126,122,101,101,53,52,
            56,55,34,73,51,50,47,46,45,44,
            48,39,81,72,71,70,39,12,29,1,
            12,2,14,14,171,172,14,78,129,127,
            165,3,163,122,164,97,1,1,1,1,
            1,1,1,1,127,1,97,83,94,93,
            92,91,90,89,87,88,86,85,84,97,
            97,116,116,121,120,120,120,130,97,147,
            130,12,82,14,122,14,14,39,75,14,
            162,98,129,129,129,129,129,129,129,66,
            129,65,126,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,39,2,143,
            79,127,125,128,125,3,128,128,128,128,
            128,128,128,128,128,128,155,67,156,155,
            12,122,66,74,43,14,43,12,14,125,
            122,125,43,43,122
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "", //$NON-NLS-1$
            "+", //$NON-NLS-1$
            "-", //$NON-NLS-1$
            "*", //$NON-NLS-1$
            "/", //$NON-NLS-1$
            ">", //$NON-NLS-1$
            "<", //$NON-NLS-1$
            "=", //$NON-NLS-1$
            ">=", //$NON-NLS-1$
            "<=", //$NON-NLS-1$
            "<>", //$NON-NLS-1$
            "(", //$NON-NLS-1$
            ")", //$NON-NLS-1$
            "{", //$NON-NLS-1$
            "}", //$NON-NLS-1$
            "[", //$NON-NLS-1$
            "]", //$NON-NLS-1$
            "->", //$NON-NLS-1$
            "|", //$NON-NLS-1$
            ", //$NON-NLS-1$", //$NON-NLS-1$
            ":", //$NON-NLS-1$
            "::", //$NON-NLS-1$
            ";", //$NON-NLS-1$
            ".", //$NON-NLS-1$
            "..", //$NON-NLS-1$
            "@pre", //$NON-NLS-1$
            "^", //$NON-NLS-1$
            "^^", //$NON-NLS-1$
            "?", //$NON-NLS-1$
            "$empty", //$NON-NLS-1$
            "NUMERIC_OPERATION", //$NON-NLS-1$
            "STRING_LITERAL", //$NON-NLS-1$
            "INTEGER_LITERAL", //$NON-NLS-1$
            "REAL_LITERAL", //$NON-NLS-1$
            "self", //$NON-NLS-1$
            "inv", //$NON-NLS-1$
            "pre", //$NON-NLS-1$
            "post", //$NON-NLS-1$
            "body", //$NON-NLS-1$
            "context", //$NON-NLS-1$
            "package", //$NON-NLS-1$
            "endpackage", //$NON-NLS-1$
            "def", //$NON-NLS-1$
            "derive", //$NON-NLS-1$
            "init", //$NON-NLS-1$
            "if", //$NON-NLS-1$
            "then", //$NON-NLS-1$
            "else", //$NON-NLS-1$
            "endif", //$NON-NLS-1$
            "and", //$NON-NLS-1$
            "or", //$NON-NLS-1$
            "xor", //$NON-NLS-1$
            "not", //$NON-NLS-1$
            "implies", //$NON-NLS-1$
            "let", //$NON-NLS-1$
            "in", //$NON-NLS-1$
            "true", //$NON-NLS-1$
            "false", //$NON-NLS-1$
            "Set", //$NON-NLS-1$
            "Bag", //$NON-NLS-1$
            "Sequence", //$NON-NLS-1$
            "Collection", //$NON-NLS-1$
            "OrderedSet", //$NON-NLS-1$
            "iterate", //$NON-NLS-1$
            "forAll", //$NON-NLS-1$
            "exists", //$NON-NLS-1$
            "isUnique", //$NON-NLS-1$
            "any", //$NON-NLS-1$
            "one", //$NON-NLS-1$
            "collect", //$NON-NLS-1$
            "select", //$NON-NLS-1$
            "reject", //$NON-NLS-1$
            "collectNested", //$NON-NLS-1$
            "sortedBy", //$NON-NLS-1$
            "closure", //$NON-NLS-1$
            "oclIsKindOf", //$NON-NLS-1$
            "oclIsTypeOf", //$NON-NLS-1$
            "oclAsType", //$NON-NLS-1$
            "oclIsNew", //$NON-NLS-1$
            "oclIsUndefined", //$NON-NLS-1$
            "oclIsInvalid", //$NON-NLS-1$
            "oclIsInState", //$NON-NLS-1$
            "allInstances", //$NON-NLS-1$
            "String", //$NON-NLS-1$
            "Integer", //$NON-NLS-1$
            "Real", //$NON-NLS-1$
            "Boolean", //$NON-NLS-1$
            "Tuple", //$NON-NLS-1$
            "OclAny", //$NON-NLS-1$
            "OclVoid", //$NON-NLS-1$
            "Invalid", //$NON-NLS-1$
            "OclMessage", //$NON-NLS-1$
            "null", //$NON-NLS-1$
            "OclInvalid", //$NON-NLS-1$
            "EOF_TOKEN", //$NON-NLS-1$
            "IDENTIFIER", //$NON-NLS-1$
            "ERROR_TOKEN", //$NON-NLS-1$
            "invOrDefCS", //$NON-NLS-1$
            "prePostOrBodyDeclCS", //$NON-NLS-1$
            "initOrDerValueCS", //$NON-NLS-1$
            "variableCS", //$NON-NLS-1$
            "contextDeclCSm", //$NON-NLS-1$
            "pathNameCS", //$NON-NLS-1$
            "contextDeclCS", //$NON-NLS-1$
            "simpleNameCS", //$NON-NLS-1$
            "typeCS", //$NON-NLS-1$
            "oclExpressionCS", //$NON-NLS-1$
            "defExpressionCS", //$NON-NLS-1$
            "operationCS", //$NON-NLS-1$
            "prePostOrBodyDeclCSm", //$NON-NLS-1$
            "parametersCS", //$NON-NLS-1$
            "oclExp0CS", //$NON-NLS-1$
            "oclExp1CS", //$NON-NLS-1$
            "oclExp2CS", //$NON-NLS-1$
            "oclExp3CS", //$NON-NLS-1$
            "oclExp4CS", //$NON-NLS-1$
            "oclExp5CS", //$NON-NLS-1$
            "oclExp6CS", //$NON-NLS-1$
            "oclExp7CS", //$NON-NLS-1$
            "callExpCS", //$NON-NLS-1$
            "messageExpCS", //$NON-NLS-1$
            "argumentsCS", //$NON-NLS-1$
            "collectionTypeIdentifierCS", //$NON-NLS-1$
            "collectionLiteralPartsCS", //$NON-NLS-1$
            "collectionLiteralPartCS", //$NON-NLS-1$
            "variableListCS2", //$NON-NLS-1$
            "featureCallExpCS", //$NON-NLS-1$
            "loopExpCS", //$NON-NLS-1$
            "iterContents", //$NON-NLS-1$
            "variableCS2", //$NON-NLS-1$
            "variableListCS", //$NON-NLS-1$
            "letExpSubCS", //$NON-NLS-1$
            "oclMessageArgumentsCS", //$NON-NLS-1$
            "oclMessageArgCS" //$NON-NLS-1$
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 95,
           SCOPE_UBOUND      = 41,
           SCOPE_SIZE        = 42,
           MAX_NAME_LENGTH   = 26;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 245,
           NT_OFFSET         = 95,
           LA_STATE_OFFSET   = 2624,
           MAX_LA            = 1,
           NUM_RULES         = 197,
           NUM_NONTERMINALS  = 78,
           NUM_SYMBOLS       = 173,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 2212,
           IDENTIFIER_SYMBOL = 3,
           EOFT_SYMBOL       = 62,
           EOLT_SYMBOL       = 62,
           ACCEPT_ACTION     = 2426,
           ERROR_ACTION      = 2427;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
