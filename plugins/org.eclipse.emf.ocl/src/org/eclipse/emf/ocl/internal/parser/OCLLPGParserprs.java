/**
* <copyright>
*
* Copyright (c) 2005, 2006 IBM Corporation and others.
* All rights reserved.   This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   IBM - Initial API and implementation
*
* </copyright>
*
* $Id: OCLLPGParserprs.java,v 1.3 2006/05/17 13:58:27 cdamus Exp $
*/

package org.eclipse.emf.ocl.internal.parser;

public class OCLLPGParserprs implements lpg.lpgjavaruntime.ParseTable, OCLLPGParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,1,1,1,1,1,1,1,
            1,0,0,0,0,0,1,0,0,1,
            1,1,0,0,0,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            0,0,0,0,0,1,1,1,1,0,
            1,1,0,0,0,1,1,1,1,1,
            1,0,0,0,0,0,0,1,1,0,
            0,0,0,0,0,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            1,1,1,1,1,0,1,4,0,1,
            1,2,1,1,1,7,4,4,0,1,
            3,4,4,5,3,3,1,2,4,4,
            4,6,8,0,1,1,3,0,1,1,
            1,1,3,1,3,3,3,1,3,3,
            3,3,3,3,1,1,1,3,3,1,
            3,3,1,2,2,1,2,2,4,1,
            1,1,3,2,5,1,1,1,1,1,
            1,1,1,1,1,1,1,3,0,1,
            1,1,1,1,1,1,3,4,1,1,
            1,1,1,0,1,1,3,1,1,3,
            1,1,1,1,4,1,1,1,1,1,
            1,1,2,2,2,1,1,4,4,4,
            4,4,4,4,4,4,4,4,1,3,
            5,6,8,1,3,5,3,0,1,1,
            1,1,1,4,4,0,1,1,3,1,
            1,3,3,1,1,5,5,5,5,5,
            5,5,5,5,5,5,5,5,5,5,
            5,5,5,5,5,5,2,5,0,1,
            0,1,1,3,5,0,1,2,3,7,
            5,5,0,1,1,3,1,1,3,-94,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-73,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -2,-3,0,0,-36,0,0,0,-4,0,
            -26,-119,0,0,-5,-38,0,0,0,-252,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-120,0,0,0,0,0,
            -39,0,0,0,-75,-23,0,0,0,-15,
            -22,-16,0,-11,0,0,0,0,0,-253,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-17,0,-41,0,0,-95,0,0,
            -18,-12,0,0,0,0,0,0,-19,0,
            0,-6,0,0,0,-20,-21,0,0,-92,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -24,0,0,-158,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-25,-27,0,0,-159,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-28,-29,0,
            0,-160,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-30,-42,0,0,-161,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-49,-50,0,0,-162,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-51,
            -52,0,0,-163,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-76,-77,0,0,-164,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-78,-79,0,
            0,-165,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-80,-81,0,0,-166,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-82,-83,0,0,-167,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-84,
            -85,0,0,-168,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-86,-87,0,0,-169,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-88,-89,0,
            0,-170,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-91,-96,0,0,-171,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-97,-98,0,0,-172,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-99,
            -100,0,0,-173,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-101,-102,0,0,-174,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-103,-104,0,
            0,-176,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-105,-106,0,0,-177,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-107,-108,0,0,-178,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-109,
            -110,0,0,-214,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-123,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-111,0,0,-241,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-112,0,
            -113,-115,0,-242,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-116,0,-117,-118,0,-243,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-142,0,
            -145,-146,0,-244,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-149,0,-150,-151,0,-245,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-152,0,
            -153,-154,0,-246,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-155,0,-156,-175,0,-247,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-182,0,
            -183,-184,0,-248,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-185,0,-186,-187,0,-249,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-188,0,
            -189,-190,0,-250,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-191,0,-192,-193,0,-251,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-194,0,
            -195,-196,0,-114,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-90,-197,0,-238,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-13,-198,0,-285,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-121,
            0,0,-122,0,0,0,0,0,0,0,
            0,-199,-200,0,-31,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-32,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-33,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-34,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-35,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-37,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-44,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-48,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-72,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-137,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-148,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-207,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-210,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-212,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-213,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-254,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-257,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-281,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-283,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-289,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-290,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-133,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-134,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-135,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-136,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-127,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-128,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-129,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-130,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-131,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-132,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-74,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -139,0,0,-201,-202,-203,-204,-209,-215,0,
            -124,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-125,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-126,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-1,-206,0,-216,0,0,
            -217,-218,-219,-220,-221,-222,-223,-224,-277,0,
            -225,0,0,-14,0,-226,0,0,-7,0,
            0,-157,-227,-228,0,0,-8,0,0,-229,
            0,0,0,0,0,0,0,0,-43,0,
            0,0,0,0,0,0,0,-230,0,0,
            0,-9,0,0,0,0,0,-45,0,0,
            0,0,-138,0,0,0,0,-141,0,-46,
            0,0,-284,0,-40,0,0,0,0,0,
            0,-10,0,0,-93,-140,-205,-47,0,0,
            -211,-231,0,0,0,-53,-232,0,0,0,
            0,-54,0,0,0,0,-55,0,0,0,
            -233,-56,-57,-235,-236,0,0,-58,0,0,
            -59,0,-60,-61,0,0,0,-62,-63,-64,
            -65,0,0,-66,0,0,0,0,-67,-68,
            0,0,0,0,0,-69,0,0,-70,-71,
            0,-143,0,0,0,-144,-147,0,0,0,
            0,-179,-180,0,-181,-208,-237,-234,0,0,
            -240,-239,-279,-280,-282,0,-255,-256,0,0,
            -258,-259,0,-260,-261,-262,0,0,-263,-264,
            -265,0,0,-266,0,-267,0,0,-268,-269,
            -270,0,0,-271,0,0,-272,-273,-274,-275,
            -276,-278,-286,-287,-288,-291,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            60,60,60,60,60,60,60,61,61,62,
            62,47,47,39,39,39,42,46,46,48,
            48,40,45,45,63,63,41,64,64,43,
            43,43,49,49,50,50,52,52,38,38,
            27,27,28,28,26,26,26,26,25,25,
            25,25,25,25,25,22,22,23,23,23,
            21,21,21,6,6,6,7,7,7,7,
            8,8,8,8,9,9,2,2,2,1,
            1,1,1,1,1,1,1,3,3,67,
            67,10,10,10,10,10,10,11,12,4,
            4,4,4,4,68,68,69,69,53,53,
            54,14,14,14,14,13,17,18,19,20,
            20,15,16,65,65,65,71,71,72,72,
            72,72,72,72,72,72,72,72,72,34,
            34,34,73,73,31,31,31,56,51,51,
            35,35,35,35,37,36,74,74,75,75,
            70,70,70,70,55,55,5,5,5,5,
            5,5,5,5,5,5,5,5,5,5,
            5,5,5,5,5,5,5,57,57,30,
            30,33,33,32,32,29,76,76,77,77,
            24,66,66,58,58,59,59,44,44,44,
            237,76,2800,601,600,72,60,325,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,635,48,634,56,668,702,1342,669,41,
            343,76,2800,601,600,72,65,325,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,54,26,106,108,675,76,431,737,57,
            1236,473,538,76,2815,526,702,165,1341,1374,
            1,76,2800,601,600,72,60,325,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,635,48,634,56,668,702,207,669,41,
            11,13,14,15,703,498,76,2815,2689,28,
            165,690,76,770,205,51,568,125,23,164,
            262,3,315,533,660,76,431,326,2858,2860,
            1,76,2800,601,600,72,60,325,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,635,48,634,56,668,702,207,669,41,
            123,21,164,368,27,690,76,88,690,76,
            1376,421,55,331,205,271,124,126,127,523,
            67,68,645,76,39,276,563,630,2861,2860,
            184,76,2800,601,600,72,60,325,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,635,48,634,56,668,702,193,669,41,
            373,59,1306,1304,184,76,2800,601,600,72,
            60,325,66,70,71,91,92,93,94,95,
            96,111,112,113,114,635,48,634,56,668,
            702,193,669,41,672,345,1306,2651,184,76,
            2800,601,600,72,60,325,66,70,71,91,
            92,93,94,95,96,111,112,113,114,635,
            48,634,56,668,702,193,669,41,499,527,
            1306,2652,184,76,2800,601,600,72,60,325,
            66,70,71,91,92,93,94,95,96,111,
            112,113,114,635,48,634,56,668,702,193,
            669,41,639,412,1306,2653,184,76,2800,601,
            600,72,60,325,66,70,71,91,92,93,
            94,95,96,111,112,113,114,635,48,634,
            56,668,702,193,669,41,643,708,1306,2654,
            184,76,2800,601,600,72,60,325,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,635,48,634,56,668,702,193,669,41,
            742,578,1306,2655,184,76,2800,601,600,72,
            60,325,66,70,71,91,92,93,94,95,
            96,111,112,113,114,635,48,634,56,668,
            702,193,669,41,608,712,1306,2656,184,76,
            2800,601,600,72,60,325,66,70,71,91,
            92,93,94,95,96,111,112,113,114,635,
            48,634,56,668,702,193,669,41,691,91,
            1306,2657,184,76,2800,601,600,72,60,325,
            66,70,71,91,92,93,94,95,96,111,
            112,113,114,635,48,634,56,668,702,193,
            669,41,107,756,1306,2658,184,76,2800,601,
            600,72,60,325,66,70,71,91,92,93,
            94,95,96,111,112,113,114,635,48,634,
            56,668,702,193,669,41,710,774,1306,2661,
            184,76,2800,601,600,72,60,325,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,635,48,634,56,668,702,193,669,41,
            641,565,1306,2666,184,76,2800,601,600,72,
            60,325,66,70,71,91,92,93,94,95,
            96,111,112,113,114,635,48,634,56,668,
            702,193,669,41,200,687,1306,2673,184,76,
            2800,601,600,72,60,325,66,70,71,91,
            92,93,94,95,96,111,112,113,114,635,
            48,634,56,668,702,193,669,41,780,783,
            1306,2674,184,76,2800,601,600,72,60,325,
            66,70,71,91,92,93,94,95,96,111,
            112,113,114,635,48,634,56,668,702,193,
            669,41,781,791,1306,2680,184,76,2800,601,
            600,72,60,325,66,70,71,91,92,93,
            94,95,96,111,112,113,114,635,48,634,
            56,668,702,193,669,41,793,795,1306,2698,
            184,76,2800,601,600,72,60,325,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,635,48,634,56,668,702,193,669,41,
            799,803,1306,2742,184,76,2800,601,600,72,
            60,325,66,70,71,91,92,93,94,95,
            96,111,112,113,114,635,48,634,56,668,
            702,193,669,41,811,813,1306,2747,184,76,
            2800,601,600,72,60,325,66,70,71,91,
            92,93,94,95,96,111,112,113,114,635,
            48,634,56,668,702,193,669,41,816,818,
            1306,2761,184,76,2800,601,600,72,60,325,
            66,70,71,91,92,93,94,95,96,111,
            112,113,114,635,48,634,56,668,702,193,
            669,41,820,822,1306,2764,184,76,2800,601,
            600,72,60,325,66,70,71,91,92,93,
            94,95,96,111,112,113,114,635,48,634,
            56,668,702,193,669,41,824,826,1306,2765,
            184,76,2800,601,600,72,60,325,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,635,48,634,56,668,702,193,669,41,
            828,830,1306,2817,131,76,2800,601,600,72,
            60,325,66,70,71,91,92,93,94,95,
            96,111,112,113,114,635,48,634,56,668,
            702,1342,669,41,448,76,2800,601,600,72,
            60,325,66,70,71,91,92,93,94,95,
            96,111,112,113,114,1552,832,107,108,290,
            76,2800,601,600,72,60,325,66,70,71,
            91,92,93,94,95,96,111,112,113,114,
            635,48,634,56,668,702,139,669,41,834,
            2835,836,838,2834,290,76,2800,601,600,72,
            60,325,66,70,71,91,92,93,94,95,
            96,111,112,113,114,635,48,634,56,668,
            702,139,669,41,786,2835,840,842,2839,290,
            76,2800,601,600,72,60,325,66,70,71,
            91,92,93,94,95,96,111,112,113,114,
            635,48,634,56,668,702,139,669,41,844,
            2835,797,845,2840,290,76,2800,601,600,72,
            60,325,66,70,71,91,92,93,94,95,
            96,111,112,113,114,635,48,634,56,668,
            702,139,669,41,846,2835,847,122,2841,290,
            76,2800,601,600,72,60,325,66,70,71,
            91,92,93,94,95,96,111,112,113,114,
            635,48,634,56,668,702,139,669,41,728,
            2835,801,807,2844,290,76,2800,601,600,72,
            60,325,66,70,71,91,92,93,94,95,
            96,111,112,113,114,635,48,634,56,668,
            702,139,669,41,849,2835,850,500,2846,290,
            76,2800,601,600,72,60,325,66,70,71,
            91,92,93,94,95,96,111,112,113,114,
            635,48,634,56,668,702,139,669,41,852,
            2835,855,857,2849,290,76,2800,601,600,72,
            60,325,66,70,71,91,92,93,94,95,
            96,111,112,113,114,635,48,634,56,668,
            702,139,669,41,861,2835,863,866,2850,290,
            76,2800,601,600,72,60,325,66,70,71,
            91,92,93,94,95,96,111,112,113,114,
            635,48,634,56,668,702,139,669,41,868,
            2835,875,877,2851,290,76,2800,601,600,72,
            60,325,66,70,71,91,92,93,94,95,
            96,111,112,113,114,635,48,634,56,668,
            702,139,669,41,881,2835,883,885,2854,290,
            76,2800,601,600,72,60,325,66,70,71,
            91,92,93,94,95,96,111,112,113,114,
            635,48,634,56,668,702,139,669,41,887,
            2835,889,754,2857,131,76,2800,601,600,72,
            60,325,66,70,71,91,92,93,94,95,
            96,111,112,113,114,635,48,634,56,668,
            702,193,669,41,784,758,1377,131,76,2800,
            601,600,72,60,325,66,70,71,91,92,
            93,94,95,96,111,112,113,114,635,48,
            634,56,668,702,193,669,41,394,606,2831,
            66,76,2800,601,600,72,60,325,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,635,48,634,56,668,702,207,669,41,
            690,76,1549,690,76,1551,12,13,14,15,
            1271,1272,709,725,206,131,76,2800,601,600,
            72,60,325,66,70,71,91,92,93,94,
            95,96,111,112,113,114,635,48,634,56,
            668,702,18,669,41,131,76,2800,601,600,
            72,60,325,66,70,71,91,92,93,94,
            95,96,111,112,113,114,635,48,634,56,
            668,702,17,669,41,131,76,2800,601,600,
            72,60,325,66,70,71,91,92,93,94,
            95,96,111,112,113,114,635,48,634,56,
            668,702,31,669,41,131,76,2800,601,600,
            72,60,325,66,70,71,91,92,93,94,
            95,96,111,112,113,114,635,48,634,56,
            668,702,30,669,41,131,76,2800,601,600,
            72,60,325,66,70,71,91,92,93,94,
            95,96,111,112,113,114,635,48,634,56,
            668,702,29,669,41,131,76,2800,601,600,
            72,60,325,66,70,71,91,92,93,94,
            95,96,111,112,113,114,635,48,634,56,
            668,702,22,669,41,131,76,2800,601,600,
            72,60,325,66,70,71,91,92,93,94,
            95,96,111,112,113,114,635,48,634,56,
            668,702,146,669,41,131,76,2800,601,600,
            72,60,325,66,70,71,91,92,93,94,
            95,96,111,112,113,114,635,48,634,56,
            668,702,872,669,41,131,76,2800,601,600,
            72,60,325,66,70,71,91,92,93,94,
            95,96,111,112,113,114,635,48,634,56,
            668,702,1234,669,41,131,76,2800,601,600,
            72,60,325,66,70,71,91,92,93,94,
            95,96,111,112,113,114,635,48,634,56,
            668,702,25,669,41,131,76,2800,601,600,
            72,60,325,66,70,71,91,92,93,94,
            95,96,111,112,113,114,635,48,634,56,
            668,702,2578,669,41,131,76,2800,601,600,
            72,60,325,66,70,71,91,92,93,94,
            95,96,111,112,113,114,635,48,634,56,
            668,702,195,669,41,131,76,2800,601,600,
            72,60,325,66,70,71,91,92,93,94,
            95,96,111,112,113,114,635,48,634,56,
            668,702,194,669,41,131,76,2800,601,600,
            72,60,325,66,70,71,91,92,93,94,
            95,96,111,112,113,114,635,48,634,56,
            668,702,147,669,41,131,76,2800,601,600,
            72,60,325,66,70,71,91,92,93,94,
            95,96,111,112,113,114,635,48,634,56,
            668,702,110,669,41,131,76,2800,601,600,
            72,60,325,66,70,71,91,92,93,94,
            95,96,111,112,113,114,635,48,634,56,
            668,702,24,669,41,131,76,2800,601,600,
            72,60,325,66,70,71,91,92,93,94,
            95,96,111,112,113,114,635,48,634,56,
            668,702,2862,669,41,131,76,2800,601,600,
            72,60,325,66,70,71,91,92,93,94,
            95,96,111,112,113,114,635,48,634,56,
            668,702,2864,669,41,131,76,2800,601,600,
            72,60,325,66,70,71,91,92,93,94,
            95,96,111,112,113,114,635,48,634,56,
            668,702,140,669,41,131,76,2800,601,600,
            72,60,325,66,70,71,91,92,93,94,
            95,96,111,112,113,114,635,48,634,56,
            668,702,2866,669,41,131,76,2800,601,600,
            72,60,325,66,70,71,91,92,93,94,
            95,96,111,112,113,114,635,48,634,56,
            668,702,141,669,41,396,76,2800,601,600,
            72,60,325,66,70,71,91,92,93,94,
            95,96,111,112,113,114,635,48,634,56,
            668,1618,396,76,2800,601,600,72,60,325,
            66,70,71,91,92,93,94,95,96,111,
            112,113,114,635,48,634,56,1662,396,76,
            2800,601,600,72,60,325,66,70,71,91,
            92,93,94,95,96,111,112,113,114,635,
            48,634,56,1663,396,76,2800,601,600,72,
            60,325,66,70,71,91,92,93,94,95,
            96,111,112,113,114,635,48,634,56,2574,
            396,76,2800,601,600,72,60,325,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,635,54,634,56,396,76,2800,601,600,
            72,60,325,66,70,71,91,92,93,94,
            95,96,111,112,113,114,635,53,634,56,
            396,76,2800,601,600,72,60,325,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,635,52,634,56,396,76,2800,601,600,
            72,60,325,66,70,71,91,92,93,94,
            95,96,111,112,113,114,635,51,634,56,
            396,76,2800,601,600,72,60,325,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,635,50,634,56,396,76,2800,601,600,
            72,60,325,66,70,71,91,92,93,94,
            95,96,111,112,113,114,635,49,634,56,
            343,76,2800,601,600,72,64,325,66,70,
            71,91,92,93,94,95,96,111,112,113,
            114,690,76,2576,735,871,892,894,580,895,
            1237,448,76,2800,601,600,72,60,325,66,
            70,71,91,92,93,94,95,96,111,112,
            113,114,1585,448,76,2800,601,600,72,62,
            325,66,70,71,91,92,93,94,95,96,
            111,112,113,114,448,76,2800,601,600,72,
            61,325,66,70,71,91,92,93,94,95,
            96,111,112,113,114,658,607,150,873,498,
            499,898,899,902,903,906,907,910,911,607,
            150,915,498,499,593,150,916,498,499,645,
            76,39,851,920,923,2648,5,645,76,39,
            924,149,151,152,11,13,14,15,3,746,
            2,269,1617,275,149,151,152,32,927,465,
            151,152,645,76,39,261,1,381,593,150,
            33,498,499,593,150,389,498,499,593,150,
            766,498,499,593,150,765,498,499,12,13,
            14,15,645,76,39,787,765,17,767,2579,
            396,787,928,805,151,152,755,931,2575,151,
            152,158,755,2737,151,152,36,755,209,151,
            152,932,755,755,935,936,161,36,755,1584,
            397,755,163,755,755,771,873,804,755,755,
            755,755,906,2828,755,275,2577,907,804,755,
            755,160,940,941,838,839,755,162,974,755,
            65,975,767,1008,1009,1307,767,767,1042,1043,
            1076,1077,755,755,1110,688,767,939,755,1111,
            1166,767,942,755,767,767,1199,940,605,1201,
            1202,732,393,37,944,156,711,159,198,945,
            948,949,1236,1237,952,2822,953,199,75,957,
            958,961,2832,188,962,2863,2865,965,966,969,
            970,971,919,234,972,239,975,2869,2869
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,0,3,4,5,6,7,8,9,
            10,11,12,13,14,15,0,17,18,19,
            20,21,22,23,24,0,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,16,42,43,44,45,46,47,48,49,
            0,51,52,0,0,0,0,3,0,1,
            58,59,60,0,0,0,1,67,3,4,
            5,6,7,8,9,10,11,12,13,14,
            15,0,17,18,19,20,21,22,23,24,
            0,26,27,28,29,30,31,32,33,34,
            35,36,37,38,39,40,0,42,43,44,
            45,46,47,48,49,62,51,52,62,55,
            70,0,72,0,74,75,20,21,22,65,
            0,1,67,3,4,5,6,7,8,9,
            10,11,12,13,14,15,25,17,18,19,
            20,21,22,23,24,0,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,81,42,43,44,45,46,47,48,49,
            25,51,52,0,1,64,3,4,5,6,
            7,8,9,10,11,12,13,14,15,0,
            17,18,19,20,21,22,23,24,53,26,
            27,28,29,30,31,32,33,34,35,36,
            37,38,39,40,25,42,43,44,45,46,
            47,48,49,0,51,52,0,1,0,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,0,17,18,19,20,21,22,23,
            24,0,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,16,42,43,
            44,45,46,47,48,49,53,51,52,0,
            1,53,3,4,5,6,7,8,9,10,
            11,12,13,14,15,0,17,18,19,20,
            21,22,23,24,0,26,27,28,29,30,
            31,32,33,34,35,36,37,38,39,40,
            16,42,43,44,45,46,47,48,49,0,
            51,52,0,1,0,3,4,5,6,7,
            8,9,10,11,12,13,14,15,0,17,
            18,19,20,21,22,23,24,0,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,16,42,43,44,45,46,47,
            48,49,0,0,50,0,1,55,3,4,
            5,6,7,8,9,10,11,12,13,14,
            15,0,17,18,19,20,21,22,23,24,
            0,26,27,28,29,30,31,32,33,34,
            35,36,37,38,39,40,16,42,43,44,
            45,46,47,48,49,53,51,0,1,56,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,71,17,18,19,20,21,22,
            23,24,0,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,77,42,
            43,44,45,46,47,48,49,0,0,0,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,41,17,18,19,20,21,22,
            23,24,0,26,25,0,0,1,56,32,
            33,34,35,36,37,38,39,0,16,41,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,0,17,18,19,20,21,22,
            23,24,0,26,0,66,2,0,0,32,
            33,34,35,36,37,38,39,0,16,0,
            83,84,85,86,87,88,89,90,91,92,
            93,94,0,68,69,3,4,5,6,7,
            8,9,10,11,0,0,0,0,41,3,
            4,5,6,7,8,9,10,11,41,27,
            28,29,30,31,57,20,21,22,61,0,
            23,24,40,27,28,29,30,31,0,1,
            0,1,0,1,0,16,40,3,4,5,
            6,7,8,9,10,11,16,0,79,0,
            3,17,3,4,5,6,7,8,9,10,
            11,0,68,69,0,0,17,3,4,5,
            6,7,8,9,10,11,0,0,2,0,
            0,17,3,4,5,6,7,8,9,10,
            11,0,12,13,14,15,17,0,0,0,
            0,0,41,56,57,58,59,60,61,62,
            12,13,14,15,0,16,16,0,57,18,
            19,0,61,76,0,25,12,13,14,15,
            50,0,55,16,54,0,12,13,14,15,
            41,41,65,0,0,0,25,0,50,58,
            59,60,54,53,0,0,0,3,3,3,
            63,18,19,0,50,18,19,50,54,0,
            0,2,0,0,50,0,0,2,54,3,
            0,1,0,1,0,1,0,66,0,1,
            0,56,0,1,63,50,0,25,25,55,
            0,1,0,1,41,0,1,0,1,0,
            1,0,1,0,1,0,1,0,1,0,
            1,0,1,0,1,0,1,0,1,0,
            1,0,1,0,0,0,0,2,0,0,
            0,0,1,3,0,1,0,1,78,16,
            0,1,0,1,64,0,1,0,1,25,
            0,25,0,25,0,1,0,1,82,73,
            0,1,0,1,0,1,0,1,0,1,
            41,0,1,0,0,2,2,0,0,2,
            2,0,0,2,2,0,0,2,2,0,
            0,2,2,41,0,0,2,2,0,0,
            50,2,0,0,2,2,0,0,2,2,
            0,0,2,2,0,0,2,2,0,0,
            2,0,1,0,0,2,2,0,0,2,
            2,0,0,2,2,16,0,0,2,2,
            0,0,2,2,0,0,2,2,0,0,
            0,0,2,2,0,0,2,0,0,0,
            0,0,0,0,16,0,0,0,0,0,
            0,0,0,0,25,0,0,0,80,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            203,1905,2869,464,2949,2948,2950,2951,2952,2953,
            2954,2955,2773,2771,2768,2763,19,2946,2778,2774,
            2762,2757,2752,2779,2550,144,240,2968,2969,2970,
            2971,2972,2781,2780,2784,2790,2799,2796,2746,2789,
            567,2664,566,2987,2985,2986,2988,2989,2990,2991,
            63,1875,2738,2869,2869,2869,20,2956,2869,2725,
            2677,2669,392,2869,189,2869,1905,2859,464,2949,
            2948,2950,2951,2952,2953,2954,2955,2773,2771,2768,
            2763,2869,2946,2778,2774,2762,2757,2752,2779,2550,
            40,240,2968,2969,2970,2971,2972,2781,2780,2784,
            2790,2799,2796,2746,2789,567,42,566,2987,2985,
            2986,2988,2989,2990,2991,2868,1875,2738,4,3059,
            315,2869,272,2869,1653,1650,2374,2348,2322,1554,
            2869,1905,2859,464,2949,2948,2950,2951,2952,2953,
            2954,2955,2773,2771,2768,2763,2741,2946,2778,2774,
            2762,2757,2752,2779,2550,2869,240,2968,2969,2970,
            2971,2972,2781,2780,2784,2790,2799,2796,2746,2789,
            567,2295,566,2987,2985,2986,2988,2989,2990,2991,
            2825,1875,2738,191,1905,2984,464,2949,2948,2950,
            2951,2952,2953,2954,2955,2773,2771,2768,2763,35,
            2946,2778,2774,2762,2757,2752,2779,2550,2205,240,
            2968,2969,2970,2971,2972,2781,2780,2784,2790,2799,
            2796,2746,2789,567,2802,566,2987,2985,2986,2988,
            2989,2990,2991,2869,1875,2738,104,1905,2869,464,
            2949,2948,2950,2951,2952,2953,2954,2955,2773,2771,
            2768,2763,2869,2946,2778,2774,2762,2757,2752,2779,
            2550,2869,240,2968,2969,2970,2971,2972,2781,2780,
            2784,2790,2799,2796,2746,2789,567,1665,566,2987,
            2985,2986,2988,2989,2990,2991,2235,1875,2738,2869,
            1905,2265,2836,2949,2948,2950,2951,2952,2953,2954,
            2955,2773,2771,2768,2763,2869,2946,2778,2774,2762,
            2757,2752,2779,2550,2869,240,2968,2969,2970,2971,
            2972,2781,2780,2784,2790,2799,2796,2746,2789,567,
            1695,566,2987,2985,2986,2988,2989,2990,2991,2869,
            1875,2738,2869,1905,145,464,2949,2948,2950,2951,
            2952,2953,2954,2955,2773,2771,2768,2763,2869,2946,
            2778,2774,2762,2757,2752,2779,2550,2869,240,2968,
            2969,2970,2971,2972,2781,2780,2784,2790,2799,2796,
            2746,2789,567,1725,566,2987,2985,2986,2988,2989,
            2990,2991,2869,7,1845,2869,1905,3059,464,2949,
            2948,2950,2951,2952,2953,2954,2955,2773,2771,2768,
            2763,2869,2946,2778,2774,2762,2757,2752,2779,2550,
            2869,240,2968,2969,2970,2971,2972,2781,2780,2784,
            2790,2799,2796,2746,2789,567,1755,566,2987,2985,
            2986,2988,2989,2990,2991,2175,1875,2869,1905,334,
            464,2949,2948,2950,2951,2952,2953,2954,2955,2773,
            2771,2768,2763,2824,2946,2778,2774,2762,2757,2752,
            2779,2550,9,240,2968,2969,2970,2971,2972,2781,
            2780,2784,2790,2799,2796,2746,2789,567,2877,566,
            2987,2985,2986,2988,2989,2990,2991,2869,153,2869,
            2947,2949,2948,2950,2951,2952,2953,2954,2955,2773,
            2771,2768,2763,375,2946,2778,2774,2762,2757,2752,
            2779,2813,2869,2812,2025,2869,2869,2708,334,2781,
            2780,2784,2790,2799,2796,2746,2789,2869,1785,375,
            2947,2949,2948,2950,2951,2952,2953,2954,2955,2773,
            2771,2768,2763,2869,2946,2778,2774,2762,2757,2752,
            2779,2813,2869,2812,2869,2818,1269,2869,2869,2781,
            2780,2784,2790,2799,2796,2746,2789,2869,265,2869,
            1409,1517,1516,1514,1481,1482,1479,1447,1446,1444,
            1412,1411,2869,330,332,2956,2949,2948,2950,2951,
            2952,2953,2954,2955,16,43,148,55,321,2956,
            2949,2948,2950,2951,2952,2953,2954,2955,378,2968,
            2969,2970,2971,2972,2732,2374,2348,2322,2702,2869,
            2581,1144,532,2968,2969,2970,2971,2972,2869,2720,
            88,2736,2869,400,38,1815,532,2947,2949,2948,
            2950,2951,2952,2953,2954,2955,2718,19,2145,2869,
            262,2946,464,2949,2948,2950,2951,2952,2953,2954,
            2955,78,20,20,2869,2869,2946,736,2949,2948,
            2950,2951,2952,2953,2954,2955,2869,189,3023,2869,
            44,2946,2947,2949,2948,2950,2951,2952,2953,2954,
            2955,26,2475,2450,2425,2400,2946,2869,47,78,
            78,57,87,334,2732,2677,2669,392,2702,6,
            2475,2450,2425,2400,46,2713,2664,144,87,2624,
            2603,2869,87,382,45,144,2475,2450,2425,2400,
            2525,2869,3059,2664,2500,10,2475,2450,2425,2400,
            87,87,1587,59,189,2869,2025,58,2525,2677,
            2669,392,2500,144,34,156,2869,262,262,262,
            2735,2624,2603,2869,2525,2624,2603,2055,2500,2869,
            2869,3024,157,196,2525,2869,2869,2942,2500,1339,
            2869,2672,2869,434,2869,468,2869,2823,2869,502,
            2869,334,2869,536,210,1935,109,2806,2807,3059,
            2869,570,2869,604,2571,2869,638,2869,672,2869,
            706,2869,740,2869,774,2869,808,2869,842,2869,
            876,2869,910,2869,944,2869,978,74,1012,2869,
            1046,2869,1080,2869,197,2869,192,2938,105,97,
            89,2869,2821,2956,2869,1169,2869,1204,1965,2646,
            2869,1239,2869,1274,2967,2869,1309,2869,1344,2816,
            2869,2025,90,1114,2869,1379,2869,1414,1995,2085,
            2869,1449,2869,1484,2869,1519,2869,280,2869,340,
            88,88,2736,2869,2869,2827,3055,2869,2869,3054,
            3053,2869,2869,3052,3050,2869,2869,3049,3048,2869,
            2869,3047,3046,375,2869,2869,3045,3043,2869,2869,
            2115,3042,2869,2869,3041,3040,2869,2869,3039,3038,
            2869,2869,3037,3036,2869,2869,3035,3051,2869,2869,
            3044,187,1012,2869,2869,3007,3006,2869,2869,3005,
            3004,2869,2869,3003,3002,2659,2869,2869,3001,3000,
            2869,2869,2999,2998,2869,2869,2997,3071,208,204,
            2869,2869,3070,3011,2869,2869,3012,2869,2869,2869,
            2869,2869,2869,2869,2723,2869,2869,2869,2869,2869,
            2869,2869,2869,2869,1620,2869,2869,2869,3069
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            416,426,97,356,357,206,206,206,206,206,
            148,157,425,34,216,216,216,216,216,216,
            216,307,202,95,267,105,399,393,95,95,
            111,111,111,111,111,148,111,304,148,264,
            148,107,106,111,34,264,157,111,95,311,
            311,317,94,94,94,94,94,94,94,94,
            94,94,94,94,94,94,94,94,94,94,
            270,111,50,50,273,279,277,281,290,287,
            446,315,317,313,265,475,265,265,475,411,
            319,218,157,1,148,95,95,95,95,95,
            95,95,95,95,95,95,95,95,95,95,
            95,95,95,111,321,265,95,95,128,159,
            148,148,113,113,113,113,112,112,112,112,
            112,112,112,112,112,112,111,34,148,264,
            34,216,157,157,412,411,157,111,265,475,
            362,360,363,365,362,369,264,218,218,218,
            218,218,218,218,218,218,218,218,218,218,
            218,218,218,218,408,218,218,218,94,94,
            270,95,95,95,95,95,95,95,95,95,
            95,95,95,95,95,277,277,287,281,281,
            281,446,316,265,357,428,111,157,414,111,
            157,111,111,111,265,448,265,265,265,265,
            265,265,265,265,265,265,265,265,265,265,
            265,265,265,272,265,265,265,111,321,157,
            111,111,111,111,111,111,111,111,111,111,
            111,109,109,111,216,354,111,408,102,265,
            405,451,265,265,265,265,265,265,265,265,
            265,265,265,474,475,265,428,478,272,157,
            111,157,111,34,110,406,265,406,111,111,
            265
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            64,24,26,1,36,37,35,39,34,32,
            33,23,18,19,12,13,14,15,20,21,
            22,38,46,47,43,45,44,48,49,17,
            42,51,52,5,4,6,7,8,9,10,
            11,40,27,28,29,30,31,3,0,42,
            5,4,6,7,8,9,10,11,17,3,
            49,48,44,45,43,46,47,40,27,28,
            29,30,31,36,37,35,39,34,32,33,
            23,24,18,19,12,13,14,15,26,20,
            21,22,38,55,1,0,2,25,82,62,
            16,53,71,0,41,56,77,0,2,67,
            52,51,1,27,28,29,30,31,40,46,
            47,43,45,44,48,49,42,36,37,35,
            39,34,32,33,23,24,18,19,12,13,
            14,15,26,20,21,22,38,17,5,4,
            6,7,8,9,10,11,3,0,84,85,
            86,88,87,89,90,91,92,93,94,83,
            5,4,6,7,8,9,10,11,17,3,
            36,37,35,39,34,32,33,23,24,18,
            19,12,13,14,15,26,20,21,22,38,
            0,57,61,41,0,17,3,5,4,6,
            7,8,9,10,11,16,0,24,26,1,
            36,37,35,39,34,32,33,23,18,19,
            12,13,14,15,20,21,22,38,27,28,
            29,30,31,40,46,47,43,45,44,48,
            49,17,5,4,6,7,8,9,10,11,
            42,51,52,3,2,0,41,57,61,1,
            65,55,74,75,70,72,18,19,23,24,
            50,54,12,13,14,15,20,21,22,2,
            64,66,53,25,71,73,68,69,78,79,
            80,82,81,56,77,62,58,59,60,0,
            63,0,57,61,16,1,41,0,78,0,
            23,24,18,19,12,13,50,14,15,54,
            2,64,66,70,53,25,71,72,73,74,
            75,58,59,60,78,79,80,20,21,22,
            81,82,1,56,77,62,69,68,0,16,
            50,25,64,0,64,25,73,0,23,24,
            18,19,12,13,14,15,54,66,70,72,
            73,74,75,56,77,78,79,80,20,21,
            22,81,58,59,60,68,69,41,2,64,
            71,82,62,50,25,53,0,66,25,0,
            25,82,0,79,0,68,69,76,57,61,
            58,59,60,3,56,62,0,58,59,60,
            5,4,6,7,8,9,10,11,40,27,
            28,29,30,31,3,50,0,2,41,0,
            53,41,23,24,18,19,12,13,50,14,
            15,54,1,65,70,72,55,74,75,20,
            21,22,81,16,2,25,0,80,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            36,31,31,31,31,25,25,25,25,25,
            7,30,34,29,31,31,31,31,31,31,
            31,23,21,31,31,11,31,31,31,31,
            28,28,28,28,28,6,28,13,9,41,
            9,31,34,28,29,39,46,28,31,31,
            31,31,4,4,4,4,4,4,4,4,
            4,4,4,4,4,4,4,4,4,4,
            4,28,1,1,18,31,31,31,31,31,
            31,31,31,31,31,31,31,31,31,32,
            31,28,43,28,9,31,31,31,31,31,
            31,31,31,31,31,31,31,31,31,31,
            31,31,31,28,31,31,31,31,9,15,
            9,9,28,28,28,28,28,28,28,28,
            28,28,28,28,28,28,28,29,9,41,
            29,31,46,46,31,31,46,28,31,31,
            31,31,31,31,31,31,30,28,28,28,
            28,28,28,28,28,28,28,28,28,28,
            28,28,28,28,31,28,28,28,4,4,
            4,31,31,31,31,31,31,31,31,31,
            31,31,31,31,31,31,31,31,31,31,
            31,31,31,31,37,29,28,46,31,28,
            45,28,28,28,31,31,31,31,31,31,
            31,31,31,31,31,31,31,31,31,31,
            31,31,31,4,31,31,31,28,31,46,
            27,27,27,27,27,27,27,27,27,27,
            27,28,28,28,31,31,28,31,31,31,
            31,31,31,31,31,31,31,31,31,31,
            31,31,31,31,31,31,29,31,4,46,
            28,46,28,29,28,31,31,31,28,28,
            31
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            2,4,3,30,0,63,3,49,2,0,
            47,0,43,0,2,71,0,65,66,0,
            45,0,64,0,38,0,31,2,4,3,
            0,77,0,39,0,47,46,0,75,0,
            52,0,70,0,56,31,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            11,12,95,83,84,85,86,88,89,90,
            91,5,6,8,9,20,34,3,4,49,
            50,51,1,2,19,52,58,59,60,61,
            62,75,76,77,78,79,80,81,82,87,
            21,30,31,32,33,56,57,92,93,7,
            45,54,18,10,25,39,35,36,37,38,
            42,94,13,14,15,16,28,43,44,17,
            22,23,24,26,27,40,41,46,47,48,
            53,55,63,64,65,66,67,68,69,70,
            71,72,73,74,96
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            0,104,102,122,0,117,118,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            116,114,115,0,113,112,106,111,0,0,
            100,121,0,128,105,0,0,0,103,0,
            0,0,98,133,97,99,101,0,108,0,
            0,110,124,0,126,129,0,0,132,0,
            0,0,107,109,119,120,0,0,123,125,
            127,0,0,0,130,0,131,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            168,13,196,176,1,8,53,58,63,68,
            73,78,83,88,93,98,103,108,113,118,
            123,128,133,138,143,148,22,153,157,216,
            220,224,228,232,236,240,244,248,252,256,
            260,266,273,40,47,161,202,47,186,186,
            270,31,209,209
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            6,20,6,182,6,6,6,6,6,6,
            6,6,6,6,6,6,6,6,6,6,
            6,6,6,6,6,6,27,6,6,6,
            6,6,6,6,6,6,6,6,6,6,
            264,264,6,44,51,165,206,51,182,190,
            6,34,206,211
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            73,24,73,73,66,66,5,5,5,5,
            5,5,5,5,5,5,5,5,5,5,
            5,5,5,5,5,5,24,36,37,72,
            72,72,72,72,72,72,72,72,72,72,
            13,12,7,29,57,31,34,9,73,73,
            8,24,34,34
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            2,80,2,53,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,79,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            64,64,2,82,66,50,53,66,53,71,
            2,78,53,25
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            2,14,2,2,4,4,6,6,6,6,
            6,6,6,6,6,6,6,6,6,6,
            6,6,6,6,6,6,14,85,85,2,
            2,2,2,2,2,2,2,2,2,2,
            8,8,8,24,1,93,73,8,2,2,
            8,14,73,73
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            153,1,97,75,0,12,0,153,1,97,
            74,0,122,79,122,78,122,51,0,48,
            0,122,78,122,51,0,47,106,48,0,
            122,51,0,46,106,47,106,48,0,171,
            126,52,0,55,106,0,127,65,97,0,
            16,0,128,1,125,22,0,128,1,125,
            21,0,128,1,125,20,0,128,1,125,
            26,0,128,1,125,15,0,128,1,125,
            14,0,128,1,125,13,0,128,1,125,
            12,0,128,1,125,19,0,128,1,125,
            18,0,128,1,125,24,0,128,1,125,
            23,0,128,1,125,33,0,128,1,125,
            32,0,128,1,125,34,0,128,1,125,
            39,0,128,1,125,35,0,128,1,125,
            37,0,128,1,125,36,0,128,1,125,
            97,0,169,1,40,0,130,1,99,0,
            130,16,3,0,7,106,0,122,53,126,
            71,126,1,83,0,126,71,126,1,83,
            0,18,106,12,0,126,1,83,0,22,
            100,18,106,12,0,122,53,126,1,83,
            0,126,25,126,0,18,106,0,126,0,
            19,100,18,106,0,129,1,94,0,129,
            1,93,0,129,1,92,0,129,1,91,
            0,129,1,90,0,129,1,89,0,129,
            1,87,0,129,1,88,0,129,1,86,
            0,129,1,85,0,129,1,84,0,165,
            63,40,0,14,0,163,63,99,0,122,
            1,0,128,1,42,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            272,315,0,325,0,315,272,2624,2603,2581,
            1144,2550,240,2374,2348,2322,2295,2525,2500,2475,
            2450,2425,2400,2265,2235,1620,2205,2175,2145,2115,
            340,280,1587,1114,2085,2055,2025,1995,1080,1046,
            1012,978,944,910,876,842,808,774,740,706,
            672,638,604,570,536,502,468,434,1965,1935,
            1554,210,400,1905,1875,1845,1815,1785,1755,1725,
            1695,1665,1519,1484,1449,1414,1379,1344,1309,1274,
            1239,1204,1169,0,2723,2659,2646,2718,2713,2708,
            2664,0,2825,2824,1519,1484,1449,1414,1379,1344,
            1309,1274,1239,1204,1169,2821,2741,2816,2807,2806,
            2802,2736,2735,2738,2720,2725,2645,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,155,3,141,143,60,59,58,61,57,
            56,76,142,16,68,69,133,133,133,133,
            133,144,98,97,3,98,130,98,99,40,
            16,16,16,16,16,16,16,159,41,1,
            41,157,142,50,1,1,52,51,42,40,
            99,98,38,22,21,20,15,14,13,12,
            19,18,23,33,32,34,39,35,37,36,
            97,1,26,24,102,118,116,120,123,121,
            144,3,98,97,145,147,130,169,170,126,
            122,1,63,63,41,125,125,125,125,125,
            125,125,125,125,125,125,125,125,125,125,
            125,125,125,65,125,122,125,125,72,70,
            75,74,24,23,19,18,15,14,13,12,
            54,50,81,22,21,20,50,16,41,1,
            16,2,25,25,171,172,25,78,128,127,
            165,3,163,122,164,97,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,127,1,1,1,26,24,
            97,83,94,93,92,91,90,89,87,88,
            86,85,84,97,97,116,116,121,120,120,
            120,130,97,145,130,16,82,25,122,25,
            25,50,73,25,162,98,128,128,128,128,
            128,128,128,128,128,128,128,128,128,128,
            128,128,128,66,128,128,128,65,125,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,50,2,141,79,127,126,129,
            126,3,129,129,129,129,129,129,129,129,
            129,129,153,67,154,153,16,122,66,71,
            53,25,53,16,25,126,122,126,53,53,
            122
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",//$NON-NLS-1$
            "+",//$NON-NLS-1$
            "-",//$NON-NLS-1$
            "*",//$NON-NLS-1$
            "/",//$NON-NLS-1$
            ">",//$NON-NLS-1$
            "<",//$NON-NLS-1$
            "=",//$NON-NLS-1$
            ">=",//$NON-NLS-1$
            "<=",//$NON-NLS-1$
            "<>",//$NON-NLS-1$
            "(",//$NON-NLS-1$
            ")",//$NON-NLS-1$
            "{",//$NON-NLS-1$
            "}",//$NON-NLS-1$
            "[",//$NON-NLS-1$
            "]",//$NON-NLS-1$
            "->",//$NON-NLS-1$
            "|",//$NON-NLS-1$
            ",//$NON-NLS-1$",//$NON-NLS-1$
            ":",//$NON-NLS-1$
            "::",//$NON-NLS-1$
            ";",//$NON-NLS-1$
            ".",//$NON-NLS-1$
            "..",//$NON-NLS-1$
            "@pre",//$NON-NLS-1$
            "^",//$NON-NLS-1$
            "^^",//$NON-NLS-1$
            "?",//$NON-NLS-1$
            "$empty",//$NON-NLS-1$
            "NUMERIC_OPERATION",//$NON-NLS-1$
            "STRING_LITERAL",//$NON-NLS-1$
            "INTEGER_LITERAL",//$NON-NLS-1$
            "REAL_LITERAL",//$NON-NLS-1$
            "self",//$NON-NLS-1$
            "inv",//$NON-NLS-1$
            "pre",//$NON-NLS-1$
            "post",//$NON-NLS-1$
            "body",//$NON-NLS-1$
            "context",//$NON-NLS-1$
            "package",//$NON-NLS-1$
            "endpackage",//$NON-NLS-1$
            "def",//$NON-NLS-1$
            "derive",//$NON-NLS-1$
            "init",//$NON-NLS-1$
            "if",//$NON-NLS-1$
            "then",//$NON-NLS-1$
            "else",//$NON-NLS-1$
            "endif",//$NON-NLS-1$
            "and",//$NON-NLS-1$
            "or",//$NON-NLS-1$
            "xor",//$NON-NLS-1$
            "not",//$NON-NLS-1$
            "implies",//$NON-NLS-1$
            "let",//$NON-NLS-1$
            "in",//$NON-NLS-1$
            "true",//$NON-NLS-1$
            "false",//$NON-NLS-1$
            "Set",//$NON-NLS-1$
            "Bag",//$NON-NLS-1$
            "Sequence",//$NON-NLS-1$
            "Collection",//$NON-NLS-1$
            "OrderedSet",//$NON-NLS-1$
            "iterate",//$NON-NLS-1$
            "forAll",//$NON-NLS-1$
            "exists",//$NON-NLS-1$
            "isUnique",//$NON-NLS-1$
            "any",//$NON-NLS-1$
            "one",//$NON-NLS-1$
            "collect",//$NON-NLS-1$
            "select",//$NON-NLS-1$
            "reject",//$NON-NLS-1$
            "collectNested",//$NON-NLS-1$
            "sortedBy",//$NON-NLS-1$
            "closure",//$NON-NLS-1$
            "oclIsKindOf",//$NON-NLS-1$
            "oclIsTypeOf",//$NON-NLS-1$
            "oclAsType",//$NON-NLS-1$
            "oclIsNew",//$NON-NLS-1$
            "oclIsUndefined",//$NON-NLS-1$
            "oclIsInvalid",//$NON-NLS-1$
            "oclIsInState",//$NON-NLS-1$
            "allInstances",//$NON-NLS-1$
            "String",//$NON-NLS-1$
            "Integer",//$NON-NLS-1$
            "Real",//$NON-NLS-1$
            "Boolean",//$NON-NLS-1$
            "Tuple",//$NON-NLS-1$
            "OclAny",//$NON-NLS-1$
            "OclVoid",//$NON-NLS-1$
            "Invalid",//$NON-NLS-1$
            "OclMessage",//$NON-NLS-1$
            "null",//$NON-NLS-1$
            "OclInvalid",//$NON-NLS-1$
            "EOF_TOKEN",//$NON-NLS-1$
            "IDENTIFIER",//$NON-NLS-1$
            "ERROR_TOKEN",//$NON-NLS-1$
            "invOrDefCS",//$NON-NLS-1$
            "prePostOrBodyDeclCS",//$NON-NLS-1$
            "initOrDerValueCS",//$NON-NLS-1$
            "variableCS",//$NON-NLS-1$
            "contextDeclCSm",//$NON-NLS-1$
            "pathNameCS",//$NON-NLS-1$
            "contextDeclCS",//$NON-NLS-1$
            "simpleNameCS",//$NON-NLS-1$
            "typeCS",//$NON-NLS-1$
            "oclExpressionCS",//$NON-NLS-1$
            "defExpressionCS",//$NON-NLS-1$
            "operationCS",//$NON-NLS-1$
            "prePostOrBodyDeclCSm",//$NON-NLS-1$
            "parametersCS",//$NON-NLS-1$
            "oclExp0CS",//$NON-NLS-1$
            "oclExp1CS",//$NON-NLS-1$
            "oclExp2CS",//$NON-NLS-1$
            "oclExp3CS",//$NON-NLS-1$
            "oclExp4CS",//$NON-NLS-1$
            "oclExp5CS",//$NON-NLS-1$
            "oclExp6CS",//$NON-NLS-1$
            "oclExp7CS",//$NON-NLS-1$
            "callExpCS",//$NON-NLS-1$
            "messageExpCS",//$NON-NLS-1$
            "argumentsCS",//$NON-NLS-1$
            "collectionTypeIdentifierCS",//$NON-NLS-1$
            "collectionLiteralPartsCS",//$NON-NLS-1$
            "collectionLiteralPartCS",//$NON-NLS-1$
            "variableListCS2",//$NON-NLS-1$
            "featureCallExpCS",//$NON-NLS-1$
            "loopExpCS",//$NON-NLS-1$
            "iterContents",//$NON-NLS-1$
            "variableCS2",//$NON-NLS-1$
            "variableListCS",//$NON-NLS-1$
            "letExpSubCS",//$NON-NLS-1$
            "oclMessageArgumentsCS",//$NON-NLS-1$
            "oclMessageArgCS" //$NON-NLS-1$
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 95,
           SCOPE_UBOUND      = 53,
           SCOPE_SIZE        = 54,
           MAX_NAME_LENGTH   = 26;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 291,
           NT_OFFSET         = 95,
           LA_STATE_OFFSET   = 3078,
           MAX_LA            = 2,
           NUM_RULES         = 209,
           NUM_NONTERMINALS  = 78,
           NUM_SYMBOLS       = 173,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 2645,
           IDENTIFIER_SYMBOL = 3,
           EOFT_SYMBOL       = 62,
           EOLT_SYMBOL       = 62,
           ACCEPT_ACTION     = 2868,
           ERROR_ACTION      = 2869;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
