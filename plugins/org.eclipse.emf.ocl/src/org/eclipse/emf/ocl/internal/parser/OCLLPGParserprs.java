/**
* <copyright>
*
* Copyright (c) 2005, 2006 IBM Corporation and others.
* All rights reserved.   This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   IBM - Initial API and implementation
*
* </copyright>
*
* $Id: OCLLPGParserprs.java,v 1.5 2006/10/10 14:29:26 cdamus Exp $
*/

package org.eclipse.emf.ocl.internal.parser;

public class OCLLPGParserprs implements lpg.lpgjavaruntime.ParseTable, OCLLPGParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,1,1,1,1,1,1,
            1,1,0,0,0,0,0,1,0,0,
            0,1,1,1,0,0,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,0,0,0,0,0,1,1,1,1,
            0,1,1,0,0,1,1,1,1,1,
            1,0,0,0,0,0,0,0,1,1,
            0,0,0,0,0,0,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            1,1,1,1,1,0,1,4,0,1,
            1,2,1,1,1,7,4,4,0,1,
            3,4,4,5,3,3,1,2,4,4,
            4,6,8,0,1,1,3,0,1,1,
            1,1,3,1,3,3,3,1,3,3,
            3,3,3,3,1,1,1,3,3,1,
            3,3,1,2,2,1,2,2,4,1,
            1,1,3,2,5,1,1,1,1,1,
            1,1,1,1,1,1,1,3,0,1,
            1,1,1,1,1,1,3,4,1,1,
            1,1,1,0,1,1,3,1,1,3,
            2,3,1,1,1,1,4,1,1,1,
            1,1,1,1,2,2,2,1,1,4,
            4,4,4,4,4,4,4,4,4,4,
            1,3,5,6,8,1,3,5,3,0,
            1,1,1,1,1,4,4,0,1,1,
            3,1,1,3,3,1,1,5,5,5,
            5,5,5,5,5,5,5,5,5,5,
            5,5,5,5,5,5,5,5,5,5,
            2,5,0,1,0,1,1,3,5,0,
            1,2,3,7,5,5,0,1,1,3,
            1,1,3,-96,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-75,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-2,-3,0,0,-36,0,
            0,0,-4,0,-26,-123,0,0,-5,-38,
            0,0,0,-263,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-124,0,
            0,0,0,0,-39,0,0,0,-77,-23,
            0,0,0,-15,-22,-16,0,-11,0,0,
            0,0,0,-264,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-17,0,-41,0,
            0,-97,0,0,-18,-12,0,0,0,0,
            0,0,-19,0,0,-6,0,0,0,-20,
            -21,0,0,-94,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-24,0,0,-164,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-25,-27,0,
            0,-165,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-28,-29,0,0,-166,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-30,-42,0,0,-167,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-49,
            -50,0,0,-168,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-51,-52,0,0,-169,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-78,-79,0,
            0,-170,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-80,-81,0,0,-171,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-82,-83,0,0,-172,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-84,
            -85,0,0,-173,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-86,-87,0,0,-174,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-88,-89,0,
            0,-175,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-90,-91,0,0,-176,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-93,-98,0,0,-177,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-99,
            -100,0,0,-178,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-101,-102,0,0,-179,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-103,-104,0,
            0,-180,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-105,-106,0,0,-181,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-107,-108,0,0,-182,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-109,
            -110,0,0,-184,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-111,-112,0,0,-185,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-113,-114,0,
            0,-186,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-115,-116,0,0,-223,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-127,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-117,0,0,
            -252,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -119,0,-120,-121,0,-253,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-122,0,-146,-149,0,
            -254,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -150,0,-153,-154,0,-255,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-155,0,-156,-157,0,
            -256,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -158,0,-161,-162,0,-257,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-183,0,-190,-191,0,
            -258,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -192,0,-193,-194,0,-259,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-195,0,-196,-197,0,
            -260,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -198,0,-199,-200,0,-261,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-201,0,-202,-203,0,
            -262,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -204,0,-205,-206,0,-118,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-92,-207,0,-249,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-13,-208,
            0,-296,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-125,0,0,-126,0,0,0,0,0,
            0,0,0,-209,-210,0,-31,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-32,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-33,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-34,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-35,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-37,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-44,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-48,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-74,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-141,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-152,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-159,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-215,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-218,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-220,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-221,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-222,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-265,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-268,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-292,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-294,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-300,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-301,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-137,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-138,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-139,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-140,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-131,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-132,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-133,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-134,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-135,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-136,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-76,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-143,0,0,-211,-212,-217,-224,-213,
            -225,0,-128,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-160,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-163,0,-226,0,
            -227,-228,-229,-230,0,-129,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-130,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-1,-214,0,
            -231,0,0,-232,-233,-234,-235,-236,-237,-238,
            -239,-288,0,0,0,0,-14,0,-240,0,
            0,-7,0,0,-241,-242,-243,-244,0,-8,
            0,0,-246,0,0,0,0,0,0,0,
            0,-43,0,0,0,0,0,0,0,0,
            -247,0,0,0,-9,0,0,0,0,0,
            -45,0,0,0,0,-142,0,0,0,0,
            -145,0,-46,0,0,-295,0,-40,0,0,
            0,0,0,0,-10,0,0,-95,-144,-219,
            -47,-248,0,-53,-54,0,0,0,-55,-250,
            0,0,0,0,-56,0,0,0,0,-57,
            0,0,0,-266,-58,-267,-269,-270,0,0,
            0,0,0,0,0,-59,-60,0,0,0,
            -61,-62,-63,-64,0,-65,-66,-67,0,0,
            0,-68,-69,0,0,0,0,0,-70,-71,
            -72,-73,-147,-148,-151,0,0,0,-187,-188,
            0,0,0,0,-189,0,0,0,-216,-271,
            -245,0,0,-251,-272,-290,-291,-293,0,0,
            0,0,-273,0,0,0,-274,-275,0,0,
            -276,-277,-278,-279,0,-280,-281,-282,-283,0,
            0,-284,-285,-286,0,0,-287,0,0,-289,
            -297,-298,-299,-302,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            60,60,60,60,60,60,60,61,61,62,
            62,47,47,39,39,39,42,46,46,48,
            48,40,45,45,63,63,41,64,64,43,
            43,43,49,49,50,50,52,52,38,38,
            27,27,28,28,26,26,26,26,25,25,
            25,25,25,25,25,22,22,23,23,23,
            21,21,21,6,6,6,7,7,7,7,
            8,8,8,8,9,9,2,2,2,1,
            1,1,1,1,1,1,1,3,3,67,
            67,10,10,10,10,10,10,11,12,4,
            4,4,4,4,68,68,69,69,53,53,
            54,54,54,14,14,14,14,13,17,18,
            19,20,20,15,16,65,65,65,71,71,
            72,72,72,72,72,72,72,72,72,72,
            72,34,34,34,73,73,31,31,31,56,
            51,51,35,35,35,35,37,36,74,74,
            75,75,70,70,70,70,55,55,5,5,
            5,5,5,5,5,5,5,5,5,5,
            5,5,5,5,5,5,5,5,5,5,
            5,57,57,30,30,33,33,32,32,29,
            76,76,77,77,24,66,66,58,58,59,
            59,44,44,44,1,76,2962,605,604,72,
            60,329,66,70,71,91,92,93,94,95,
            96,113,114,115,116,639,48,638,56,672,
            706,1411,673,41,478,76,2962,605,604,72,
            65,329,66,70,71,91,92,93,94,95,
            96,113,114,115,116,178,22,106,108,810,
            76,435,741,181,1274,365,676,76,2975,113,
            61,167,1379,1413,123,76,2962,605,604,72,
            60,329,66,70,71,91,92,93,94,95,
            96,113,114,115,116,639,48,638,56,672,
            706,211,673,41,11,13,14,15,707,635,
            76,2975,2852,28,167,824,76,774,209,174,
            707,127,23,166,83,58,210,537,796,76,
            435,330,3012,3014,123,76,2962,605,604,72,
            60,329,66,70,71,91,92,93,94,95,
            96,113,114,115,116,639,48,638,56,672,
            706,211,673,41,125,21,166,276,27,824,
            76,88,824,76,1414,445,52,335,209,275,
            126,128,129,499,67,68,782,76,39,280,
            552,697,3017,3014,309,76,2962,605,604,72,
            60,329,66,70,71,91,92,93,94,95,
            96,113,114,115,116,639,48,638,56,672,
            706,197,673,41,377,56,1344,1343,309,76,
            2962,605,604,72,60,329,66,70,71,91,
            92,93,94,95,96,113,114,115,116,639,
            48,638,56,672,706,197,673,41,837,244,
            1344,2759,309,76,2962,605,604,72,60,329,
            66,70,71,91,92,93,94,95,96,113,
            114,115,116,639,48,638,56,672,706,197,
            673,41,586,179,1344,2761,309,76,2962,605,
            604,72,60,329,66,70,71,91,92,93,
            94,95,96,113,114,115,116,639,48,638,
            56,672,706,197,673,41,186,252,1344,2762,
            309,76,2962,605,604,72,60,329,66,70,
            71,91,92,93,94,95,96,113,114,115,
            116,639,48,638,56,672,706,197,673,41,
            529,779,1344,2763,309,76,2962,605,604,72,
            60,329,66,70,71,91,92,93,94,95,
            96,113,114,115,116,639,48,638,56,672,
            706,197,673,41,780,732,1344,2764,309,76,
            2962,605,604,72,60,329,66,70,71,91,
            92,93,94,95,96,113,114,115,116,639,
            48,638,56,672,706,197,673,41,839,165,
            1344,2811,309,76,2962,605,604,72,60,329,
            66,70,71,91,92,93,94,95,96,113,
            114,115,116,639,48,638,56,672,706,197,
            673,41,845,811,1344,2814,309,76,2962,605,
            604,72,60,329,66,70,71,91,92,93,
            94,95,96,113,114,115,116,639,48,638,
            56,672,706,197,673,41,747,870,1344,2815,
            309,76,2962,605,604,72,60,329,66,70,
            71,91,92,93,94,95,96,113,114,115,
            116,639,48,638,56,672,706,197,673,41,
            605,875,1344,2816,309,76,2962,605,604,72,
            60,329,66,70,71,91,92,93,94,95,
            96,113,114,115,116,639,48,638,56,672,
            706,197,673,41,825,420,1344,2817,309,76,
            2962,605,604,72,60,329,66,70,71,91,
            92,93,94,95,96,113,114,115,116,639,
            48,638,56,672,706,197,673,41,767,663,
            1344,2818,309,76,2962,605,604,72,60,329,
            66,70,71,91,92,93,94,95,96,113,
            114,115,116,639,48,638,56,672,706,197,
            673,41,838,881,1344,2819,309,76,2962,605,
            604,72,60,329,66,70,71,91,92,93,
            94,95,96,113,114,115,116,639,48,638,
            56,672,706,197,673,41,871,677,1344,2820,
            309,76,2962,605,604,72,60,329,66,70,
            71,91,92,93,94,95,96,113,114,115,
            116,639,48,638,56,672,706,197,673,41,
            917,927,1344,2821,309,76,2962,605,604,72,
            60,329,66,70,71,91,92,93,94,95,
            96,113,114,115,116,639,48,638,56,672,
            706,197,673,41,929,931,1344,2829,309,76,
            2962,605,604,72,60,329,66,70,71,91,
            92,93,94,95,96,113,114,115,116,639,
            48,638,56,672,706,197,673,41,933,935,
            1344,2835,309,76,2962,605,604,72,60,329,
            66,70,71,91,92,93,94,95,96,113,
            114,115,116,639,48,638,56,672,706,197,
            673,41,937,940,1344,2836,309,76,2962,605,
            604,72,60,329,66,70,71,91,92,93,
            94,95,96,113,114,115,116,639,48,638,
            56,672,706,197,673,41,942,944,1344,2837,
            309,76,2962,605,604,72,60,329,66,70,
            71,91,92,93,94,95,96,113,114,115,
            116,639,48,638,56,672,706,197,673,41,
            946,948,1344,2838,309,76,2962,605,604,72,
            60,329,66,70,71,91,92,93,94,95,
            96,113,114,115,116,639,48,638,56,672,
            706,197,673,41,951,953,1344,2843,309,76,
            2962,605,604,72,60,329,66,70,71,91,
            92,93,94,95,96,113,114,115,116,639,
            48,638,56,672,706,197,673,41,955,957,
            1344,2861,309,76,2962,605,604,72,60,329,
            66,70,71,91,92,93,94,95,96,113,
            114,115,116,639,48,638,56,672,706,197,
            673,41,959,961,1344,2902,62,76,2962,605,
            604,72,60,329,66,70,71,91,92,93,
            94,95,96,113,114,115,116,639,48,638,
            56,672,706,1411,673,41,584,76,2962,605,
            604,72,60,329,66,70,71,91,92,93,
            94,95,96,113,114,115,116,1621,963,107,
            108,424,76,2962,605,604,72,60,329,66,
            70,71,91,92,93,94,95,96,113,114,
            115,116,639,48,638,56,672,706,141,673,
            41,965,2985,967,970,2980,424,76,2962,605,
            604,72,60,329,66,70,71,91,92,93,
            94,95,96,113,114,115,116,639,48,638,
            56,672,706,141,673,41,972,2985,968,911,
            2997,424,76,2962,605,604,72,60,329,66,
            70,71,91,92,93,94,95,96,113,114,
            115,116,639,48,638,56,672,706,141,673,
            41,974,2985,975,976,2998,424,76,2962,605,
            604,72,60,329,66,70,71,91,92,93,
            94,95,96,113,114,115,116,639,48,638,
            56,672,706,141,673,41,850,2985,895,246,
            3001,424,76,2962,605,604,72,60,329,66,
            70,71,91,92,93,94,95,96,113,114,
            115,116,639,48,638,56,672,706,141,673,
            41,704,2985,978,979,3002,424,76,2962,605,
            604,72,60,329,66,70,71,91,92,93,
            94,95,96,113,114,115,116,639,48,638,
            56,672,706,141,673,41,666,2985,981,984,
            3003,424,76,2962,605,604,72,60,329,66,
            70,71,91,92,93,94,95,96,113,114,
            115,116,639,48,638,56,672,706,141,673,
            41,986,2985,990,992,3004,424,76,2962,605,
            604,72,60,329,66,70,71,91,92,93,
            94,95,96,113,114,115,116,639,48,638,
            56,672,706,141,673,41,995,2985,997,999,
            3006,424,76,2962,605,604,72,60,329,66,
            70,71,91,92,93,94,95,96,113,114,
            115,116,639,48,638,56,672,706,141,673,
            41,1001,2985,1003,1005,3007,424,76,2962,605,
            604,72,60,329,66,70,71,91,92,93,
            94,95,96,113,114,115,116,639,48,638,
            56,672,706,141,673,41,1007,2985,1009,1011,
            3008,424,76,2962,605,604,72,60,329,66,
            70,71,91,92,93,94,95,96,113,114,
            115,116,639,48,638,56,672,706,141,673,
            41,746,2985,905,890,3009,255,76,2962,605,
            604,72,60,329,66,70,71,91,92,93,
            94,95,96,113,114,115,116,639,48,638,
            56,672,706,197,673,41,897,863,1446,255,
            76,2962,605,604,72,60,329,66,70,71,
            91,92,93,94,95,96,113,114,115,116,
            639,48,638,56,672,706,197,673,41,3,
            869,2927,189,76,2962,605,604,72,60,329,
            66,70,71,91,92,93,94,95,96,113,
            114,115,116,639,48,638,56,672,706,211,
            673,41,824,76,1588,824,76,1589,12,13,
            14,15,1309,1341,887,1013,210,255,76,2962,
            605,604,72,60,329,66,70,71,91,92,
            93,94,95,96,113,114,115,116,639,48,
            638,56,672,706,18,673,41,255,76,2962,
            605,604,72,60,329,66,70,71,91,92,
            93,94,95,96,113,114,115,116,639,48,
            638,56,672,706,17,673,41,255,76,2962,
            605,604,72,60,329,66,70,71,91,92,
            93,94,95,96,113,114,115,116,639,48,
            638,56,672,706,31,673,41,255,76,2962,
            605,604,72,60,329,66,70,71,91,92,
            93,94,95,96,113,114,115,116,639,48,
            638,56,672,706,30,673,41,255,76,2962,
            605,604,72,60,329,66,70,71,91,92,
            93,94,95,96,113,114,115,116,639,48,
            638,56,672,706,29,673,41,255,76,2962,
            605,604,72,60,329,66,70,71,91,92,
            93,94,95,96,113,114,115,116,639,48,
            638,56,672,706,22,673,41,255,76,2962,
            605,604,72,60,329,66,70,71,91,92,
            93,94,95,96,113,114,115,116,639,48,
            638,56,672,706,148,673,41,255,76,2962,
            605,604,72,60,329,66,70,71,91,92,
            93,94,95,96,113,114,115,116,639,48,
            638,56,672,706,876,673,41,255,76,2962,
            605,604,72,60,329,66,70,71,91,92,
            93,94,95,96,113,114,115,116,639,48,
            638,56,672,706,1273,673,41,255,76,2962,
            605,604,72,60,329,66,70,71,91,92,
            93,94,95,96,113,114,115,116,639,48,
            638,56,672,706,25,673,41,255,76,2962,
            605,604,72,60,329,66,70,71,91,92,
            93,94,95,96,113,114,115,116,639,48,
            638,56,672,706,2708,673,41,255,76,2962,
            605,604,72,60,329,66,70,71,91,92,
            93,94,95,96,113,114,115,116,639,48,
            638,56,672,706,111,673,41,255,76,2962,
            605,604,72,60,329,66,70,71,91,92,
            93,94,95,96,113,114,115,116,639,48,
            638,56,672,706,199,673,41,255,76,2962,
            605,604,72,60,329,66,70,71,91,92,
            93,94,95,96,113,114,115,116,639,48,
            638,56,672,706,198,673,41,255,76,2962,
            605,604,72,60,329,66,70,71,91,92,
            93,94,95,96,113,114,115,116,639,48,
            638,56,672,706,149,673,41,255,76,2962,
            605,604,72,60,329,66,70,71,91,92,
            93,94,95,96,113,114,115,116,639,48,
            638,56,672,706,112,673,41,255,76,2962,
            605,604,72,60,329,66,70,71,91,92,
            93,94,95,96,113,114,115,116,639,48,
            638,56,672,706,110,673,41,255,76,2962,
            605,604,72,60,329,66,70,71,91,92,
            93,94,95,96,113,114,115,116,639,48,
            638,56,672,706,24,673,41,255,76,2962,
            605,604,72,60,329,66,70,71,91,92,
            93,94,95,96,113,114,115,116,639,48,
            638,56,672,706,3020,673,41,255,76,2962,
            605,604,72,60,329,66,70,71,91,92,
            93,94,95,96,113,114,115,116,639,48,
            638,56,672,706,3022,673,41,255,76,2962,
            605,604,72,60,329,66,70,71,91,92,
            93,94,95,96,113,114,115,116,639,48,
            638,56,672,706,142,673,41,255,76,2962,
            605,604,72,60,329,66,70,71,91,92,
            93,94,95,96,113,114,115,116,639,48,
            638,56,672,706,3024,673,41,255,76,2962,
            605,604,72,60,329,66,70,71,91,92,
            93,94,95,96,113,114,115,116,639,48,
            638,56,672,706,143,673,41,531,76,2962,
            605,604,72,60,329,66,70,71,91,92,
            93,94,95,96,113,114,115,116,639,48,
            638,56,672,1624,531,76,2962,605,604,72,
            60,329,66,70,71,91,92,93,94,95,
            96,113,114,115,116,639,48,638,56,1657,
            531,76,2962,605,604,72,60,329,66,70,
            71,91,92,93,94,95,96,113,114,115,
            116,639,48,638,56,1690,531,76,2962,605,
            604,72,60,329,66,70,71,91,92,93,
            94,95,96,113,114,115,116,639,48,638,
            56,1734,531,76,2962,605,604,72,60,329,
            66,70,71,91,92,93,94,95,96,113,
            114,115,116,639,54,638,56,531,76,2962,
            605,604,72,60,329,66,70,71,91,92,
            93,94,95,96,113,114,115,116,639,53,
            638,56,531,76,2962,605,604,72,60,329,
            66,70,71,91,92,93,94,95,96,113,
            114,115,116,639,52,638,56,531,76,2962,
            605,604,72,60,329,66,70,71,91,92,
            93,94,95,96,113,114,115,116,639,51,
            638,56,531,76,2962,605,604,72,60,329,
            66,70,71,91,92,93,94,95,96,113,
            114,115,116,639,50,638,56,531,76,2962,
            605,604,72,60,329,66,70,71,91,92,
            93,94,95,96,113,114,115,116,639,49,
            638,56,478,76,2962,605,604,72,64,329,
            66,70,71,91,92,93,94,95,96,113,
            114,115,116,824,76,2706,1014,1019,717,1022,
            60,988,1306,584,76,2962,605,604,72,60,
            329,66,70,71,91,92,93,94,95,96,
            113,114,115,116,1623,363,76,2962,605,604,
            72,64,329,66,70,71,91,92,93,94,
            95,96,113,114,115,116,2926,980,279,1023,
            2711,1026,1027,1031,1032,1306,584,76,2962,605,
            604,72,62,329,66,70,71,91,92,93,
            94,95,96,113,114,115,116,584,76,2962,
            605,604,72,61,329,66,70,71,91,92,
            93,94,95,96,113,114,115,116,795,745,
            152,1035,502,503,1036,1040,1041,1044,1045,1048,
            1049,1052,745,152,2709,502,503,731,152,1053,
            502,503,782,76,39,1056,1057,1060,1061,5,
            782,76,39,1064,151,153,154,11,13,14,
            15,3,419,2,273,1689,279,151,153,154,
            32,1065,469,153,154,782,76,39,265,1,
            385,731,152,33,502,503,731,152,393,502,
            503,731,152,414,502,503,731,152,251,502,
            503,12,13,14,15,782,76,39,906,251,
            906,664,1068,400,360,360,809,153,154,360,
            1071,1735,153,154,160,360,2710,153,154,36,
            360,213,153,154,1069,360,636,781,351,163,
            36,165,1656,401,877,910,360,360,775,911,
            808,360,360,360,360,944,360,360,360,2707,
            945,808,360,360,162,978,164,842,843,360,
            360,360,122,664,664,664,979,1012,1376,360,
            360,1013,1046,1047,1080,841,1081,1114,1115,664,
            1073,360,1148,1149,664,866,360,664,664,1182,
            1183,1238,1271,868,37,161,202,1074,1077,1274,
            1306,1078,1081,1082,1085,2910,1086,1089,1092,1093,
            203,75,1096,1097,1099,2928,192,1100,3021,3023,
            1101,1103,1104,1105,1107,3027,3027
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,0,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,0,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,21,43,44,45,46,47,48,49,
            50,0,52,53,3,0,1,0,56,0,
            0,0,1,63,3,4,5,6,7,8,
            9,10,11,12,13,14,15,16,17,18,
            19,20,0,22,23,24,25,26,27,28,
            29,30,31,32,33,34,35,36,37,38,
            39,40,41,21,43,44,45,46,47,48,
            49,50,0,52,53,58,59,60,58,59,
            60,0,0,1,63,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,0,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,0,43,44,45,46,47,
            48,49,50,0,52,53,55,0,0,1,
            0,69,70,19,20,0,1,66,0,1,
            68,3,4,5,6,7,8,9,10,11,
            12,13,14,15,16,17,18,19,20,0,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,39,40,41,
            21,43,44,45,46,47,48,49,50,62,
            52,53,62,0,71,0,73,4,75,76,
            0,0,0,3,0,1,68,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,0,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,21,43,44,45,
            46,47,48,49,50,0,52,53,0,1,
            65,3,4,5,6,7,8,9,10,11,
            12,13,14,15,16,17,18,19,20,78,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,39,40,41,
            0,43,44,45,46,47,48,49,50,0,
            52,53,0,1,0,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,0,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,54,43,44,45,46,47,
            48,49,50,0,55,51,3,55,0,0,
            56,2,72,0,1,63,3,4,5,6,
            7,8,9,10,11,12,13,14,15,16,
            17,18,19,20,0,22,23,24,25,26,
            27,28,29,30,31,32,33,34,35,36,
            37,38,39,40,41,21,43,44,45,46,
            47,48,49,50,56,52,53,0,1,0,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,0,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,41,21,
            43,44,45,46,47,48,49,50,0,1,
            0,1,55,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,0,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,21,43,44,45,46,47,48,49,
            50,0,52,0,1,0,3,4,5,6,
            7,8,9,10,11,12,13,14,15,16,
            17,18,19,20,0,22,23,24,25,26,
            27,28,29,30,31,32,33,34,35,36,
            37,38,39,40,41,21,43,44,45,46,
            47,48,49,50,0,0,51,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,51,22,23,24,25,
            26,27,0,0,2,0,3,33,34,35,
            36,37,38,39,40,0,0,1,3,4,
            5,6,7,8,9,10,11,12,13,14,
            15,16,17,18,19,20,0,22,23,24,
            25,26,27,0,69,70,0,42,33,34,
            35,36,37,38,39,40,0,21,84,85,
            86,87,88,89,90,91,92,93,94,95,
            0,0,67,3,0,5,6,7,8,9,
            10,11,12,0,0,0,0,3,0,5,
            6,7,8,9,10,11,12,51,28,29,
            30,31,32,57,19,20,0,61,22,23,
            24,41,28,29,30,31,32,74,0,0,
            0,0,51,0,3,41,5,6,7,8,
            9,10,11,12,0,0,80,3,3,18,
            5,6,7,8,9,10,11,12,42,0,
            0,0,3,18,5,6,7,8,9,10,
            11,12,42,0,0,1,3,18,5,6,
            7,8,9,10,11,12,0,0,0,2,
            0,18,64,64,0,21,0,67,4,0,
            56,57,58,59,60,61,62,13,14,15,
            16,17,0,25,26,0,4,0,0,0,
            0,77,4,4,0,13,14,15,16,17,
            0,13,14,15,16,17,0,51,21,0,
            4,42,82,57,0,55,0,61,4,13,
            14,15,16,17,0,0,66,42,3,42,
            0,22,23,24,65,21,0,1,51,54,
            0,54,42,19,20,51,0,1,0,1,
            0,1,0,1,0,1,0,1,42,0,
            1,0,1,0,1,0,1,0,1,79,
            0,1,0,1,0,1,0,1,0,1,
            0,1,0,1,0,1,0,0,2,0,
            1,0,1,0,0,0,2,0,0,0,
            0,1,3,0,1,0,1,0,21,0,
            1,0,1,83,0,1,0,1,0,1,
            0,1,0,1,0,1,0,1,0,1,
            0,1,0,0,1,42,4,42,0,42,
            2,0,0,2,2,0,0,2,2,51,
            0,0,2,2,0,0,2,2,51,0,
            0,2,2,0,0,2,2,0,0,2,
            2,0,0,2,2,0,0,2,2,0,
            0,2,2,0,0,2,2,0,0,2,
            0,1,0,0,2,2,0,0,2,2,
            0,0,2,2,0,0,2,2,0,21,
            2,0,0,2,2,0,0,2,0,0,
            0,2,0,0,0,2,0,0,2,0,
            0,0,0,0,0,0,0,21,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            42,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,54,0,54,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,81,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            104,1977,7,468,2946,3107,3106,3108,3109,3110,
            3111,3112,3113,2937,2936,2925,2920,2944,3104,2942,
            2941,146,2915,2909,2905,2943,2735,244,3126,3127,
            3128,3129,3130,2948,2947,2952,2959,2961,2960,2904,
            2953,571,2827,570,3147,3145,3146,3148,3149,3150,
            3151,3027,1947,2901,3114,3027,2888,3027,338,19,
            26,3027,1977,2067,468,2946,3107,3106,3108,3109,
            3110,3111,3112,3113,2937,2936,2925,2920,2944,3104,
            2942,2941,3027,2915,2909,2905,2943,2735,244,3126,
            3127,3128,3129,3130,2948,2947,2952,2959,2961,2960,
            2904,2953,571,1737,570,3147,3145,3146,3148,3149,
            3150,3151,3027,1947,2901,2840,2832,396,2840,2832,
            396,193,207,1977,2067,468,2946,3107,3106,3108,
            3109,3110,3111,3112,3113,2937,2936,2925,2920,2944,
            3104,2942,2941,3027,2915,2909,2905,2943,2682,244,
            3126,3127,3128,3129,3130,2948,2947,2952,2959,2961,
            2960,2904,2953,571,57,570,3147,3145,3146,3148,
            3149,3150,3151,63,1947,2901,3221,3027,3027,2871,
            20,334,336,2787,2766,3027,2883,1626,3027,1977,
            3013,468,2946,3107,3106,3108,3109,3110,3111,3112,
            3113,2937,2936,2925,2920,2944,3104,2942,2941,3027,
            2915,2909,2905,2943,2682,244,3126,3127,3128,3129,
            3130,2948,2947,2952,2959,2961,2960,2904,2953,571,
            1767,570,3147,3145,3146,3148,3149,3150,3151,3026,
            1947,2901,4,147,319,3027,276,1917,1725,1722,
            34,3027,3027,266,3027,1977,3013,468,2946,3107,
            3106,3108,3109,3110,3111,3112,3113,2937,2936,2925,
            2920,2944,3104,2942,2941,3027,2915,2909,2905,2943,
            2682,244,3126,3127,3128,3129,3130,2948,2947,2952,
            2959,2961,2960,2904,2953,571,1797,570,3147,3145,
            3146,3148,3149,3150,3151,3027,1947,2901,195,1977,
            3125,468,2946,3107,3106,3108,3109,3110,3111,3112,
            3113,2937,2936,2925,2920,2944,3104,2942,2941,3035,
            2915,2909,2905,2943,2682,244,3126,3127,3128,3129,
            3130,2948,2947,2952,2959,2961,2960,2904,2953,571,
            3027,570,3147,3145,3146,3148,3149,3150,3151,193,
            1947,2901,3027,1977,9,468,2946,3107,3106,3108,
            3109,3110,3111,3112,3113,2937,2936,2925,2920,2944,
            3104,2942,2941,3027,2915,2909,2905,2943,2682,244,
            3126,3127,3128,3129,3130,2948,2947,2952,2959,2961,
            2960,2904,2953,571,2307,570,3147,3145,3146,3148,
            3149,3150,3151,158,3221,379,266,3221,10,3027,
            338,1308,2987,3027,1977,2217,2993,2946,3107,3106,
            3108,3109,3110,3111,3112,3113,2937,2936,2925,2920,
            2944,3104,2942,2941,3027,2915,2909,2905,2943,2682,
            244,3126,3127,3128,3129,3130,2948,2947,2952,2959,
            2961,2960,2904,2953,571,1827,570,3147,3145,3146,
            3148,3149,3150,3151,338,1947,2901,3027,1977,3027,
            468,2946,3107,3106,3108,3109,3110,3111,3112,3113,
            2937,2936,2925,2920,2944,3104,2942,2941,3027,2915,
            2909,2905,2943,2682,244,3126,3127,3128,3129,3130,
            2948,2947,2952,2959,2961,2960,2904,2953,571,1857,
            570,3147,3145,3146,3148,3149,3150,3151,3027,404,
            3027,1977,3221,468,2946,3107,3106,3108,3109,3110,
            3111,3112,3113,2937,2936,2925,2920,2944,3104,2942,
            2941,3027,2915,2909,2905,2943,2682,244,3126,3127,
            3128,3129,3130,2948,2947,2952,2959,2961,2960,2904,
            2953,571,269,570,3147,3145,3146,3148,3149,3150,
            3151,3027,1947,3027,1977,155,468,2946,3107,3106,
            3108,3109,3110,3111,3112,3113,2937,2936,2925,2920,
            2944,3104,2942,2941,78,2915,2909,2905,2943,2682,
            244,3126,3127,3128,3129,3130,2948,2947,2952,2959,
            2961,2960,2904,2953,571,2876,570,3147,3145,3146,
            3148,3149,3150,3151,3027,16,379,3105,2946,3107,
            3106,3108,3109,3110,3111,3112,3113,2937,2936,2925,
            2920,2944,3104,2942,2941,87,2915,2909,2905,2943,
            2970,2969,3027,3027,3183,3027,266,2948,2947,2952,
            2959,2961,2960,2904,2953,3027,3027,2757,3105,2946,
            3107,3106,3108,3109,3110,3111,3112,3113,2937,2936,
            2925,2920,2944,3104,2942,2941,3027,2915,2909,2905,
            2943,2970,2969,109,20,20,3027,2127,2948,2947,
            2952,2959,2961,2960,2904,2953,3027,1887,1448,1586,
            1554,1553,1519,1551,1518,1516,1484,1483,1481,1449,
            3027,3027,2981,3114,3027,3107,3106,3108,3109,3110,
            3111,3112,3113,3027,150,59,42,3114,3027,3107,
            3106,3108,3109,3110,3111,3112,3113,325,3126,3127,
            3128,3129,3130,2895,2787,2766,35,2865,2506,2480,
            2454,536,3126,3127,3128,3129,3130,2187,3027,3027,
            3027,38,382,3027,3105,536,3107,3106,3108,3109,
            3110,3111,3112,3113,19,3027,2277,266,468,3104,
            3107,3106,3108,3109,3110,3111,3112,3113,2963,3027,
            40,3027,740,3104,3107,3106,3108,3109,3110,3111,
            3112,3113,2127,3027,88,2899,3105,3104,3107,3106,
            3108,3109,3110,3111,3112,3113,78,3027,55,3184,
            193,3104,2898,214,44,2881,3027,2986,2657,3027,
            338,2895,2840,2832,396,2865,6,2607,2582,2557,
            2532,2632,47,2713,1216,3027,2657,78,46,3027,
            3027,386,2657,2007,3027,2607,2582,2557,2532,2632,
            159,2607,2582,2557,2532,2632,45,87,2827,43,
            2657,2900,2427,87,146,3221,200,87,2157,2607,
            2582,2557,2532,2632,58,3027,1659,2988,1378,146,
            3027,2506,2480,2454,3144,2827,3027,438,87,2337,
            3027,146,2964,2787,2766,2703,3027,472,3027,506,
            3027,540,3027,574,3027,608,3027,642,2965,3027,
            676,3027,710,3027,744,3027,778,3027,812,2037,
            3027,846,3027,880,3027,914,3027,948,3027,982,
            3027,1016,3027,1050,74,1084,3027,3027,3100,3027,
            1118,3027,1152,201,3027,196,3096,105,97,89,
            3027,2984,3114,3027,1241,3027,1276,90,2809,3027,
            1311,3027,1346,2097,3027,1381,3027,1416,3027,1451,
            3027,1486,3027,1521,3027,1556,3027,1591,3027,284,
            3027,344,3027,88,2899,2979,2247,2127,3027,1186,
            2924,3027,3027,3217,3216,3027,3027,3215,3214,88,
            3027,3027,3212,3211,3027,3027,3210,3209,379,3027,
            3027,3208,3207,3027,3027,3205,3204,3027,3027,3203,
            3202,3027,3027,3201,3200,3027,3027,3199,3198,3027,
            3027,3197,3196,3027,3027,3195,3213,3027,3027,3206,
            191,1084,3027,3027,3167,3166,3027,3027,3165,3164,
            3027,3027,3163,3162,3027,3027,3161,3160,3027,2822,
            3159,3027,3027,3158,3157,3027,212,3233,208,3027,
            3027,3232,3027,3027,3027,3171,3027,3027,3172,3027,
            3027,3027,3027,3027,3027,3027,3027,2886,3027,3027,
            3027,3027,3027,3027,3027,3027,3027,3027,3027,3027,
            3027,3027,3027,3027,3027,3027,3027,3027,3027,3027,
            1692,3027,3027,3027,3027,3027,3027,3027,3027,3027,
            3027,3027,3027,3027,3027,3027,2367,3027,2397,3027,
            3027,3027,3027,3027,3027,3027,3027,3027,3027,3027,
            3027,3027,3027,3027,3027,3027,3027,3027,3027,3027,
            3027,3231
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            431,441,53,318,319,166,166,166,166,166,
            106,115,440,37,176,176,176,176,176,176,
            176,269,162,429,229,61,361,355,429,429,
            67,67,67,67,67,106,67,266,106,226,
            106,63,62,67,37,226,115,67,429,273,
            273,279,428,428,428,428,428,428,428,428,
            428,428,428,428,428,428,428,428,428,428,
            428,428,232,67,382,382,235,241,239,243,
            252,249,160,277,279,275,227,487,227,227,
            487,373,281,178,115,1,106,429,429,429,
            429,429,429,429,429,429,429,429,429,429,
            429,429,429,429,429,429,429,67,283,227,
            429,429,84,117,106,106,69,69,69,69,
            68,68,68,68,68,68,68,68,68,68,
            67,37,106,226,37,176,115,115,374,373,
            115,67,227,487,324,322,325,327,67,381,
            324,331,226,178,178,178,178,178,178,178,
            178,178,178,178,178,178,178,178,178,178,
            178,178,370,178,178,178,428,428,232,429,
            429,429,429,429,429,429,429,429,429,429,
            429,429,429,239,239,249,243,243,243,160,
            278,227,319,443,67,115,376,67,115,67,
            67,67,2,227,378,227,227,227,227,227,
            227,227,227,227,227,227,227,227,227,227,
            227,227,227,227,234,227,227,227,67,283,
            115,67,67,67,67,67,67,67,67,67,
            67,67,65,65,67,176,316,67,370,58,
            227,367,463,227,227,227,227,227,227,227,
            227,227,227,227,486,487,227,443,490,234,
            115,67,115,67,37,66,368,227,368,67,
            67,227
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            65,26,63,27,1,37,38,36,40,35,
            33,34,4,17,25,19,20,13,14,15,
            16,22,23,24,39,47,48,44,46,45,
            49,50,18,43,52,53,6,5,7,8,
            9,10,11,12,41,28,29,30,31,32,
            3,0,2,42,83,62,21,54,72,0,
            51,56,78,0,2,68,53,52,1,28,
            29,30,31,32,41,47,48,44,46,45,
            49,50,43,37,38,36,40,35,33,34,
            4,17,25,26,19,20,13,14,15,16,
            27,22,23,24,39,18,6,5,7,8,
            9,10,11,12,3,0,85,86,87,89,
            88,90,91,92,93,94,95,84,6,5,
            7,8,9,10,11,12,18,3,37,38,
            36,40,35,33,34,17,25,26,19,20,
            13,14,15,16,27,22,23,24,39,4,
            0,57,61,51,0,18,3,6,5,7,
            8,9,10,11,12,21,0,26,27,1,
            37,38,36,40,35,33,34,4,17,25,
            19,20,13,14,15,16,22,23,24,39,
            28,29,30,31,32,41,47,48,44,46,
            45,49,50,18,6,5,7,8,9,10,
            11,12,43,52,53,3,2,0,51,57,
            61,1,66,55,75,76,71,73,19,20,
            25,26,4,17,13,14,15,16,22,23,
            24,2,65,67,54,42,72,74,69,70,
            79,80,81,83,82,56,78,62,58,59,
            60,0,64,0,57,61,21,1,51,0,
            79,0,25,26,19,20,13,14,4,15,
            16,17,2,65,67,71,54,42,72,73,
            74,75,76,58,59,60,79,80,81,22,
            23,24,82,83,1,56,78,62,70,69,
            0,21,4,42,65,0,65,42,74,0,
            25,26,19,20,13,14,15,16,17,67,
            71,73,74,75,76,56,78,79,80,81,
            22,23,24,82,58,59,60,69,70,51,
            2,65,72,83,62,4,42,54,0,67,
            42,0,42,83,0,80,0,2,51,0,
            63,43,6,5,7,8,9,10,11,12,
            18,3,50,49,45,46,44,47,48,41,
            28,29,30,31,32,37,38,36,40,35,
            33,34,4,17,25,26,19,20,13,14,
            15,16,27,22,23,24,39,55,1,0,
            69,70,77,57,61,58,59,60,3,56,
            62,0,4,58,59,60,6,5,7,8,
            9,10,11,12,41,28,29,30,31,32,
            3,0,54,51,25,26,19,20,13,14,
            4,15,16,17,1,66,71,73,55,75,
            76,22,23,24,82,21,2,42,0,81,
            0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            36,31,31,31,31,25,25,25,25,25,
            7,30,34,29,31,31,31,31,31,31,
            31,23,21,31,31,11,31,31,31,31,
            28,28,28,28,28,6,28,13,9,41,
            9,31,34,28,29,39,46,28,31,31,
            31,31,4,4,4,4,4,4,4,4,
            4,4,4,4,4,4,4,4,4,4,
            4,4,4,28,1,1,18,31,31,31,
            31,31,31,31,31,31,31,31,31,31,
            31,32,31,28,43,28,9,31,31,31,
            31,31,31,31,31,31,31,31,31,31,
            31,31,31,31,31,31,31,28,31,31,
            31,31,9,15,9,9,28,28,28,28,
            28,28,28,28,28,28,28,28,28,28,
            28,29,9,41,29,31,46,46,31,31,
            46,28,31,31,31,31,31,31,28,1,
            31,31,30,28,28,28,28,28,28,28,
            28,28,28,28,28,28,28,28,28,28,
            28,28,31,28,28,28,4,4,4,31,
            31,31,31,31,31,31,31,31,31,31,
            31,31,31,31,31,31,31,31,31,31,
            31,31,37,29,28,46,31,28,45,28,
            28,28,28,31,31,31,31,31,31,31,
            31,31,31,31,31,31,31,31,31,31,
            31,31,31,31,4,31,31,31,28,31,
            46,27,27,27,27,27,27,27,27,27,
            27,27,28,28,28,31,31,28,31,31,
            31,31,31,31,31,31,31,31,31,31,
            31,31,31,31,31,31,31,29,31,4,
            46,28,46,28,29,28,31,31,31,28,
            28,31
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            2,4,3,30,0,63,3,49,2,0,
            47,0,43,0,2,71,0,65,66,0,
            45,0,64,0,38,0,31,2,4,3,
            0,77,0,39,0,47,46,0,75,0,
            52,0,70,0,56,31,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            11,12,95,7,83,84,85,86,88,89,
            90,91,5,6,8,9,10,34,3,4,
            20,49,50,51,1,2,52,58,59,60,
            61,62,75,76,77,78,79,80,81,82,
            87,19,30,31,32,33,56,57,92,93,
            21,45,54,18,25,39,35,36,37,38,
            42,94,96,13,14,15,16,28,43,44,
            17,22,23,24,26,27,40,41,46,47,
            48,53,55,63,64,65,66,67,68,69,
            70,71,72,73,74,97
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            0,105,103,123,0,118,119,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            117,115,116,0,114,113,107,112,0,0,
            101,122,0,129,106,0,0,0,104,0,
            0,0,99,134,98,100,102,0,109,0,
            0,111,125,0,127,130,0,0,133,0,
            0,0,108,110,120,121,0,0,124,126,
            128,0,0,0,131,0,132,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            178,13,206,186,1,8,53,58,63,68,
            73,78,83,88,93,98,103,108,113,118,
            123,128,133,138,143,148,153,158,22,163,
            167,226,230,234,238,242,246,250,254,258,
            262,266,270,276,283,40,47,171,212,47,
            196,196,280,31,219,219
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            6,20,6,192,6,6,6,6,6,6,
            6,6,6,6,6,6,6,6,6,6,
            6,6,6,6,6,6,6,6,27,6,
            6,6,6,6,6,6,6,6,6,6,
            6,6,274,274,6,44,51,175,216,51,
            192,200,6,34,216,221
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            73,24,73,73,66,66,5,5,5,5,
            5,5,5,5,5,5,5,5,5,5,
            5,5,5,5,5,5,5,5,24,36,
            37,72,72,72,72,72,72,72,72,72,
            72,72,13,12,7,29,57,31,34,9,
            73,73,8,24,34,34
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            2,81,2,54,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,80,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,65,65,2,83,67,4,54,67,
            54,72,2,79,54,42
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            2,15,2,2,4,4,6,6,6,6,
            6,6,6,6,6,6,6,6,6,6,
            6,6,6,6,6,6,6,6,15,90,
            90,2,2,2,2,2,2,2,2,2,
            2,2,8,8,8,25,1,98,78,8,
            2,2,8,15,78,78
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            154,1,98,76,0,12,0,154,1,98,
            75,0,123,80,123,79,123,52,0,48,
            0,123,79,123,52,0,47,107,48,0,
            123,52,0,46,107,47,107,48,0,172,
            127,53,0,55,107,0,128,66,98,0,
            16,0,129,1,126,24,0,129,1,126,
            23,0,129,1,126,22,0,129,1,126,
            27,0,129,1,126,16,0,129,1,126,
            15,0,129,1,126,14,0,129,1,126,
            13,0,129,1,126,20,0,129,1,126,
            19,0,129,1,126,26,0,129,1,126,
            25,0,129,1,126,17,0,129,1,126,
            4,0,129,1,126,34,0,129,1,126,
            33,0,129,1,126,35,0,129,1,126,
            40,0,129,1,126,36,0,129,1,126,
            38,0,129,1,126,37,0,129,1,126,
            98,0,170,1,41,0,131,1,100,0,
            131,21,3,0,7,107,0,123,54,127,
            72,127,1,84,0,127,72,127,1,84,
            0,18,107,12,0,127,1,84,0,22,
            101,18,107,12,0,123,54,127,1,84,
            0,127,42,127,0,18,107,0,127,0,
            19,101,18,107,0,130,1,95,0,130,
            1,94,0,130,1,93,0,130,1,92,
            0,130,1,91,0,130,1,90,0,130,
            1,88,0,130,1,89,0,130,1,87,
            0,130,1,86,0,130,1,85,0,166,
            64,41,0,14,0,164,64,100,0,123,
            1,0,129,1,43,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            276,319,0,329,0,319,276,2735,2787,2766,
            2713,1216,2682,244,2506,2480,2454,2427,2657,2632,
            2607,2582,2557,2532,2397,2367,1692,2337,2307,2277,
            2247,344,284,1659,1186,2217,2187,2157,2127,2097,
            1152,1118,1084,1050,1016,982,948,914,880,846,
            812,778,744,710,676,642,608,574,540,506,
            472,438,2067,2037,2007,1626,214,404,1977,1947,
            1917,1887,1857,1827,1797,1767,1737,1591,1556,1521,
            1486,1451,1416,1381,1346,1311,1276,1241,0,2886,
            2822,2809,2881,2876,2871,2827,0,2988,2987,1591,
            1556,1521,1486,1451,1416,1381,1346,1311,1276,1241,
            2984,2900,2979,2965,2964,2963,2899,2898,2901,2883,
            2888,2808,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,156,3,142,144,60,59,58,61,57,
            56,77,143,21,69,70,134,134,134,134,
            134,145,99,98,3,99,131,99,100,41,
            21,21,21,21,21,21,21,160,51,1,
            51,158,143,4,1,1,53,52,43,41,
            100,99,39,24,23,22,16,15,14,13,
            20,19,25,17,4,34,33,35,40,36,
            38,37,98,1,27,26,103,119,117,121,
            124,122,145,3,99,98,146,148,131,170,
            171,127,123,1,64,64,51,126,126,126,
            126,126,126,126,126,126,126,126,126,126,
            126,126,126,126,126,126,126,66,126,123,
            126,126,73,71,76,75,26,25,20,19,
            16,15,14,13,17,4,82,24,23,22,
            4,21,51,1,21,2,42,42,172,173,
            42,79,129,128,166,3,164,123,63,26,
            165,98,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,128,1,1,1,27,26,98,84,
            95,94,93,92,91,90,88,89,87,86,
            85,98,98,117,117,122,121,121,121,131,
            98,146,131,21,83,42,123,42,42,4,
            74,63,42,163,99,129,129,129,129,129,
            129,129,129,129,129,129,129,129,129,129,
            129,129,129,129,67,129,129,129,66,126,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,4,2,142,80,128,127,
            130,127,3,130,130,130,130,130,130,130,
            130,130,130,154,68,155,154,21,123,67,
            72,54,42,54,21,42,127,123,127,54,
            54,123
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "", //$NON-NLS-1$
            "+", //$NON-NLS-1$
            "-", //$NON-NLS-1$
            "*", //$NON-NLS-1$
            "/", //$NON-NLS-1$
            ">", //$NON-NLS-1$
            "<", //$NON-NLS-1$
            "=", //$NON-NLS-1$
            ">=", //$NON-NLS-1$
            "<=", //$NON-NLS-1$
            "<>", //$NON-NLS-1$
            "(", //$NON-NLS-1$
            ")", //$NON-NLS-1$
            "{", //$NON-NLS-1$
            "}", //$NON-NLS-1$
            "[", //$NON-NLS-1$
            "]", //$NON-NLS-1$
            "->", //$NON-NLS-1$
            "|", //$NON-NLS-1$
            ", //$NON-NLS-1$", //$NON-NLS-1$
            ":", //$NON-NLS-1$
            "::", //$NON-NLS-1$
            ";", //$NON-NLS-1$
            ".", //$NON-NLS-1$
            "..", //$NON-NLS-1$
            "@pre", //$NON-NLS-1$
            "^", //$NON-NLS-1$
            "^^", //$NON-NLS-1$
            "?", //$NON-NLS-1$
            "$empty", //$NON-NLS-1$
            "NUMERIC_OPERATION", //$NON-NLS-1$
            "STRING_LITERAL", //$NON-NLS-1$
            "INTEGER_LITERAL", //$NON-NLS-1$
            "REAL_LITERAL", //$NON-NLS-1$
            "self", //$NON-NLS-1$
            "inv", //$NON-NLS-1$
            "pre", //$NON-NLS-1$
            "post", //$NON-NLS-1$
            "body", //$NON-NLS-1$
            "context", //$NON-NLS-1$
            "package", //$NON-NLS-1$
            "endpackage", //$NON-NLS-1$
            "def", //$NON-NLS-1$
            "derive", //$NON-NLS-1$
            "init", //$NON-NLS-1$
            "if", //$NON-NLS-1$
            "then", //$NON-NLS-1$
            "else", //$NON-NLS-1$
            "endif", //$NON-NLS-1$
            "and", //$NON-NLS-1$
            "or", //$NON-NLS-1$
            "xor", //$NON-NLS-1$
            "not", //$NON-NLS-1$
            "implies", //$NON-NLS-1$
            "let", //$NON-NLS-1$
            "in", //$NON-NLS-1$
            "true", //$NON-NLS-1$
            "false", //$NON-NLS-1$
            "Set", //$NON-NLS-1$
            "Bag", //$NON-NLS-1$
            "Sequence", //$NON-NLS-1$
            "Collection", //$NON-NLS-1$
            "OrderedSet", //$NON-NLS-1$
            "iterate", //$NON-NLS-1$
            "forAll", //$NON-NLS-1$
            "exists", //$NON-NLS-1$
            "isUnique", //$NON-NLS-1$
            "any", //$NON-NLS-1$
            "one", //$NON-NLS-1$
            "collect", //$NON-NLS-1$
            "select", //$NON-NLS-1$
            "reject", //$NON-NLS-1$
            "collectNested", //$NON-NLS-1$
            "sortedBy", //$NON-NLS-1$
            "closure", //$NON-NLS-1$
            "oclIsKindOf", //$NON-NLS-1$
            "oclIsTypeOf", //$NON-NLS-1$
            "oclAsType", //$NON-NLS-1$
            "oclIsNew", //$NON-NLS-1$
            "oclIsUndefined", //$NON-NLS-1$
            "oclIsInvalid", //$NON-NLS-1$
            "oclIsInState", //$NON-NLS-1$
            "allInstances", //$NON-NLS-1$
            "String", //$NON-NLS-1$
            "Integer", //$NON-NLS-1$
            "Real", //$NON-NLS-1$
            "Boolean", //$NON-NLS-1$
            "Tuple", //$NON-NLS-1$
            "OclAny", //$NON-NLS-1$
            "OclVoid", //$NON-NLS-1$
            "Invalid", //$NON-NLS-1$
            "OclMessage", //$NON-NLS-1$
            "null", //$NON-NLS-1$
            "OclInvalid", //$NON-NLS-1$
            "EOF_TOKEN", //$NON-NLS-1$
            "IDENTIFIER", //$NON-NLS-1$
            "INTEGER_RANGE_START", //$NON-NLS-1$
            "ERROR_TOKEN", //$NON-NLS-1$
            "invOrDefCS", //$NON-NLS-1$
            "prePostOrBodyDeclCS", //$NON-NLS-1$
            "initOrDerValueCS", //$NON-NLS-1$
            "variableCS", //$NON-NLS-1$
            "contextDeclCSm", //$NON-NLS-1$
            "pathNameCS", //$NON-NLS-1$
            "contextDeclCS", //$NON-NLS-1$
            "simpleNameCS", //$NON-NLS-1$
            "typeCS", //$NON-NLS-1$
            "oclExpressionCS", //$NON-NLS-1$
            "defExpressionCS", //$NON-NLS-1$
            "operationCS", //$NON-NLS-1$
            "prePostOrBodyDeclCSm", //$NON-NLS-1$
            "parametersCS", //$NON-NLS-1$
            "oclExp0CS", //$NON-NLS-1$
            "oclExp1CS", //$NON-NLS-1$
            "oclExp2CS", //$NON-NLS-1$
            "oclExp3CS", //$NON-NLS-1$
            "oclExp4CS", //$NON-NLS-1$
            "oclExp5CS", //$NON-NLS-1$
            "oclExp6CS", //$NON-NLS-1$
            "oclExp7CS", //$NON-NLS-1$
            "callExpCS", //$NON-NLS-1$
            "messageExpCS", //$NON-NLS-1$
            "argumentsCS", //$NON-NLS-1$
            "collectionTypeIdentifierCS", //$NON-NLS-1$
            "collectionLiteralPartsCS", //$NON-NLS-1$
            "collectionLiteralPartCS", //$NON-NLS-1$
            "variableListCS2", //$NON-NLS-1$
            "featureCallExpCS", //$NON-NLS-1$
            "loopExpCS", //$NON-NLS-1$
            "iterContents", //$NON-NLS-1$
            "variableCS2", //$NON-NLS-1$
            "variableListCS", //$NON-NLS-1$
            "letExpSubCS", //$NON-NLS-1$
            "oclMessageArgumentsCS", //$NON-NLS-1$
            "oclMessageArgCS" //$NON-NLS-1$
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 96,
           SCOPE_UBOUND      = 55,
           SCOPE_SIZE        = 56,
           MAX_NAME_LENGTH   = 26;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 302,
           NT_OFFSET         = 96,
           LA_STATE_OFFSET   = 3240,
           MAX_LA            = 2,
           NUM_RULES         = 213,
           NUM_NONTERMINALS  = 78,
           NUM_SYMBOLS       = 174,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 2808,
           IDENTIFIER_SYMBOL = 3,
           EOFT_SYMBOL       = 62,
           EOLT_SYMBOL       = 62,
           ACCEPT_ACTION     = 3026,
           ERROR_ACTION      = 3027;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
