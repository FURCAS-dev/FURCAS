/**
* <copyright>
*
* Copyright (c) 2005, 2006 IBM Corporation and others.
* All rights reserved.   This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   IBM - Initial API and implementation
*
* </copyright>
*
* $Id: OCLLexerprs.java,v 1.2 2006/04/12 20:47:23 cdamus Exp $
*/

package org.eclipse.emf.ocl.internal.parser;

public class OCLLexerprs implements lpg.lpgjavaruntime.ParseTable, OCLLexersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            1,3,1,1,1,1,5,1,1,1,
            1,1,1,1,1,1,1,2,2,2,
            1,1,1,1,2,1,1,1,2,1,
            1,2,4,1,2,1,1,1,2,2,
            3,2,2,0,1,2,2,2,1,2,
            1,2,3,2,3,3,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            2,3,1,1,1,1,1,2,1,2,
            2,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,2,2,2,
            2,2,2,2,2,1,2,1,2,0,
            1,3,3,3,3,3,3,3,4,4,
            3
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            18,18,18,18,18,18,18,18,18,18,
            18,18,18,18,18,18,18,18,18,18,
            18,18,18,18,18,18,18,18,18,18,
            18,18,18,18,18,18,18,20,21,21,
            21,24,24,24,24,25,25,23,23,5,
            5,33,33,27,9,9,9,6,6,6,
            6,6,2,2,2,2,3,3,3,3,
            3,3,3,3,3,3,3,3,3,3,
            3,3,3,3,3,3,3,3,3,3,
            3,3,4,4,4,4,4,4,4,4,
            4,4,4,4,4,4,4,4,4,4,
            4,4,4,4,4,4,4,4,1,1,
            1,1,1,1,1,1,1,1,35,35,
            35,35,35,35,35,35,36,36,36,36,
            36,36,36,36,36,36,36,36,34,34,
            37,37,37,11,11,38,38,26,26,8,
            8,8,8,29,29,29,29,29,29,29,
            29,29,29,29,29,29,29,29,29,29,
            29,29,29,29,29,29,29,29,29,29,
            29,29,13,13,13,13,13,13,13,13,
            13,13,13,13,13,13,13,13,13,13,
            13,13,13,13,13,13,13,13,13,13,
            14,14,14,14,14,14,14,14,14,14,
            14,14,14,14,14,14,14,14,14,14,
            14,14,14,14,14,14,14,14,15,15,
            15,15,15,15,15,15,15,15,15,15,
            15,15,15,15,15,15,15,15,15,15,
            15,15,15,15,15,15,10,10,10,10,
            28,28,28,28,28,28,28,28,16,16,
            16,16,16,17,17,17,17,17,7,7,
            7,7,7,7,7,7,30,30,31,31,
            19,19,12,22,22,22,22,22,22,22,
            22,22,689,447,445,445,445,401,448,1012,
            335,99,1047,50,459,868,161,160,160,160,
            329,784,3,4,5,376,1065,770,364,347,
            401,461,461,461,461,382,39,461,420,497,
            427,427,427,427,1058,461,427,461,1060,424,
            158,1069,50,427,1062,427,203,48,48,48,
            48,396,1,43,43,43,43,1061,43,427,
            1084,50,43,1095,50,43,593,309,309,309,
            309,1000,50,309,48,48,1111,436,1063,1059,
            40,309,420,309,790,371,450,450,450,371,
            1014,332,450,1107,1066,332,450,305,307,307,
            307,307,1106,1112,307,1113,102,41,41,41,
            41,307,41,307,1115,1064,41,1067,1108,41,
            934,161,160,160,160,1025,390,1036,393,1109,
            390,1116,393,465,465
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,96,97,0,99,
            100,0,1,2,3,4,5,6,7,8,
            9,10,11,12,13,14,15,16,17,18,
            19,20,21,22,23,24,25,26,27,28,
            29,30,31,32,33,34,35,36,37,38,
            39,40,41,42,43,44,45,46,47,48,
            49,50,51,52,53,54,55,56,57,58,
            59,60,61,62,63,64,65,66,67,68,
            69,70,71,72,73,74,75,76,77,78,
            79,80,81,82,83,84,85,86,87,88,
            89,90,91,92,93,94,95,96,97,0,
            99,100,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            68,69,70,71,72,73,74,75,76,77,
            78,79,80,81,82,83,84,85,86,87,
            88,89,90,91,92,93,94,95,96,97,
            0,0,0,101,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,55,
            56,57,58,59,60,61,62,63,64,65,
            66,67,68,69,70,71,72,73,74,75,
            76,77,78,79,80,81,82,83,84,85,
            86,87,88,89,90,91,92,93,94,95,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,0,74,75,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,71,0,73,
            74,75,76,77,78,79,80,81,82,83,
            84,85,86,87,88,89,90,91,92,93,
            94,95,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            68,69,70,71,72,0,74,75,76,77,
            78,79,80,81,82,83,84,85,86,87,
            88,89,90,91,92,93,94,95,0,1,
            2,3,4,5,6,7,8,9,10,11,
            12,13,14,15,16,17,18,19,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,39,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,56,57,58,59,60,61,
            62,63,64,65,66,67,68,69,70,71,
            72,73,74,75,76,77,78,79,80,0,
            82,83,84,85,86,87,88,89,0,0,
            11,0,13,0,96,97,0,99,100,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,17,18,0,20,
            21,22,23,24,25,26,27,28,29,30,
            31,32,33,34,35,36,37,38,39,40,
            41,42,43,44,45,46,47,48,49,50,
            51,52,53,54,55,56,57,58,59,60,
            61,62,63,64,65,66,67,74,69,70,
            0,72,0,0,0,76,77,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,0,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,47,48,49,50,51,52,
            53,54,55,56,57,58,59,60,61,62,
            63,64,65,0,1,2,3,4,5,6,
            7,8,9,10,11,12,13,14,15,16,
            17,18,0,20,21,22,23,24,25,26,
            27,28,29,30,31,32,33,34,35,36,
            37,38,39,40,41,42,43,44,45,46,
            47,48,49,50,51,52,53,54,55,56,
            57,58,59,60,61,62,63,64,65,0,
            1,2,3,4,5,6,7,8,9,10,
            11,0,13,0,1,2,3,4,5,6,
            7,8,9,10,0,1,2,3,4,5,
            6,7,8,9,10,0,1,2,3,4,
            5,6,7,8,9,10,0,1,2,3,
            4,5,6,7,8,9,10,0,0,0,
            0,0,0,0,0,0,0,68,0,1,
            2,3,4,5,6,7,8,9,10,19,
            67,17,69,0,1,2,3,4,5,6,
            7,8,9,10,0,1,2,3,4,5,
            6,7,8,9,10,0,0,0,0,98,
            0,0,0,0,0,0,0,12,12,14,
            15,16,11,18,66,67,66,68,71,19,
            0,19,70,19,0,0,75,0,73,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,96,97,0,99,100,0,0,
            0,98,0,0,98,0,0,0,0,0,
            0,0,0,0,0,0,0,72,73,0,
            0,0,0,0,0,0,81,0,73,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,98,98,0,0,0,
            0,0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            465,508,508,508,508,508,508,508,508,508,
            508,508,508,508,508,508,508,508,508,508,
            508,508,508,508,508,508,508,508,508,508,
            508,508,508,508,508,508,508,508,508,508,
            508,508,508,508,508,508,508,508,508,508,
            508,508,508,508,508,508,508,508,508,508,
            508,508,508,508,508,508,508,508,508,508,
            436,508,508,508,508,508,508,507,508,508,
            508,508,508,508,508,508,508,508,508,508,
            508,508,508,508,508,508,508,508,44,508,
            508,465,506,506,506,506,506,506,506,506,
            506,506,506,506,506,506,506,506,506,506,
            506,506,506,506,506,506,506,506,506,506,
            506,506,506,506,506,506,506,506,506,506,
            506,506,506,506,506,506,506,506,506,506,
            506,506,506,506,506,506,506,506,506,506,
            506,506,506,506,506,506,506,506,506,506,
            506,511,506,506,506,506,506,506,472,506,
            506,506,506,506,506,506,506,506,506,506,
            506,506,506,506,506,506,506,506,506,465,
            506,506,6,513,513,513,513,513,513,513,
            513,513,513,513,513,513,513,513,513,513,
            513,513,513,513,513,513,513,513,513,513,
            513,513,513,513,513,513,513,513,513,513,
            513,513,513,513,513,513,513,513,513,513,
            513,513,513,513,513,513,513,513,513,513,
            513,513,513,513,513,513,513,513,513,513,
            513,513,513,513,513,513,513,513,513,513,
            513,513,513,513,513,513,513,513,513,513,
            513,513,513,513,513,513,513,513,513,513,
            465,465,465,513,465,772,772,772,772,772,
            772,772,772,772,772,772,772,772,772,772,
            772,772,772,772,772,772,772,772,772,772,
            772,772,772,772,772,772,772,772,772,772,
            772,772,772,772,772,772,772,772,772,772,
            772,772,772,772,772,772,772,772,772,772,
            772,772,772,772,772,772,772,772,772,772,
            772,772,772,772,772,772,777,772,772,772,
            772,772,772,772,772,432,772,772,772,772,
            772,772,772,772,772,772,772,772,772,772,
            310,461,461,461,461,461,461,461,461,461,
            461,461,461,461,461,461,461,461,461,461,
            461,461,461,461,461,461,461,461,461,461,
            461,461,461,461,461,461,461,461,461,461,
            461,461,461,461,461,461,461,461,461,461,
            461,461,461,461,461,461,461,461,461,461,
            461,461,461,461,461,461,461,461,461,461,
            461,461,461,465,461,461,461,461,461,461,
            461,432,461,461,461,461,461,461,461,461,
            461,461,461,461,461,461,465,427,427,427,
            427,427,427,427,427,427,427,427,427,427,
            427,427,427,427,427,427,427,427,427,427,
            427,427,427,427,427,427,427,427,427,427,
            427,427,427,427,427,427,427,427,427,427,
            427,427,427,427,427,427,427,427,427,427,
            427,427,427,427,427,427,427,427,427,427,
            427,427,427,427,427,427,427,427,465,427,
            427,427,427,427,427,427,427,432,427,427,
            427,427,427,427,427,427,427,427,427,427,
            427,427,311,774,774,774,774,774,774,774,
            774,774,774,774,774,774,774,774,774,774,
            774,774,774,774,774,774,774,774,774,774,
            774,774,774,774,774,774,774,774,774,774,
            774,774,774,774,774,774,774,774,774,774,
            774,774,774,774,774,774,774,774,774,774,
            774,774,774,774,774,774,774,774,774,774,
            774,774,774,774,774,465,774,774,774,774,
            774,774,774,432,774,774,774,774,774,774,
            774,774,774,774,774,774,774,774,465,447,
            447,447,447,447,447,447,447,447,447,445,
            445,445,445,445,445,445,445,482,445,445,
            445,445,445,445,445,445,445,445,445,445,
            445,445,445,445,445,445,445,445,445,445,
            445,445,445,445,445,445,445,445,445,445,
            445,445,445,445,445,445,445,445,445,445,
            445,445,445,445,406,409,368,474,476,448,
            359,350,341,374,387,408,491,346,495,4,
            488,489,486,487,501,492,478,479,465,465,
            420,465,420,34,448,448,465,448,448,465,
            371,371,371,371,371,371,371,371,371,371,
            450,450,450,450,450,450,450,450,465,450,
            450,450,450,450,450,450,450,450,450,450,
            450,450,450,450,450,450,450,450,450,450,
            450,450,450,450,450,450,450,450,450,450,
            450,450,450,450,450,450,450,450,450,450,
            450,450,450,450,450,435,780,500,779,781,
            465,359,465,465,465,444,782,1,626,626,
            626,626,626,626,626,626,626,626,625,625,
            625,625,625,625,625,625,465,625,625,625,
            625,625,625,625,625,625,625,625,625,625,
            625,625,625,625,625,625,625,625,625,625,
            625,625,625,625,625,625,625,625,625,625,
            625,625,625,625,625,625,625,625,625,625,
            625,625,625,313,626,626,626,626,626,626,
            626,626,626,626,625,625,625,625,625,625,
            625,625,465,625,625,625,625,625,625,625,
            625,625,625,625,625,625,625,625,625,625,
            625,625,625,625,625,625,625,625,625,625,
            625,625,625,625,625,625,625,625,625,625,
            625,625,625,625,625,625,625,625,625,3,
            515,515,515,515,515,515,515,515,515,515,
            420,465,420,465,332,332,332,332,332,332,
            332,332,332,332,465,390,390,390,390,390,
            390,390,390,390,390,465,393,393,393,393,
            393,393,393,393,393,393,54,515,515,515,
            515,515,515,515,515,515,515,8,10,31,
            16,28,12,159,465,465,49,414,53,515,
            515,515,515,515,515,515,515,515,515,484,
            457,423,455,56,515,515,515,515,515,515,
            515,515,515,515,55,515,515,515,515,515,
            515,515,515,515,515,465,465,157,162,464,
            15,465,321,465,318,308,465,767,433,763,
            766,765,498,764,490,512,485,497,623,483,
            465,785,331,784,465,465,494,465,467,465,
            465,465,465,465,465,465,465,465,465,465,
            465,465,465,623,623,465,623,623,465,465,
            465,1,465,465,3,465,465,465,465,465,
            465,465,465,465,465,465,465,768,769,465,
            465,465,465,465,465,465,770,465,311,465,
            465,465,465,465,465,465,465,465,465,465,
            465,465,465,465,465,8,1
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int getErrorSymbol() { return 0; }
    public final int getScopeUbound() { return 0; }
    public final int getScopeSize() { return 0; }
    public final int getMaxNameLength() { return 0; }

    public final static int
           NUM_STATES        = 42,
           NT_OFFSET         = 102,
           LA_STATE_OFFSET   = 786,
           MAX_LA            = 1,
           NUM_RULES         = 321,
           NUM_NONTERMINALS  = 38,
           NUM_SYMBOLS       = 140,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 322,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 98,
           EOLT_SYMBOL       = 103,
           ACCEPT_ACTION     = 464,
           ERROR_ACTION      = 465;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
