/**
* <copyright>
*
* Copyright (c) 2005, 2006 IBM Corporation and others.
* All rights reserved.   This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   IBM - Initial API and implementation
*
* </copyright>
*
* $Id: OCLLexerprs.java,v 1.1 2006/04/04 18:09:05 cdamus Exp $
*/

package org.eclipse.emf.ocl.internal.parser;

public class OCLLexerprs implements lpg.lpgjavaruntime.ParseTable, OCLLexersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            1,3,1,1,1,1,5,1,1,1,
            1,1,1,1,1,1,1,2,2,2,
            1,1,1,1,2,1,1,1,2,1,
            1,2,4,1,2,1,1,1,2,2,
            3,2,2,0,1,2,2,2,1,2,
            1,2,3,2,3,3,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            2,3,1,1,1,1,1,2,1,2,
            2,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,2,2,2,
            2,2,2,2,2,1,2,1,2,0,
            1,3,3
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            18,18,18,18,18,18,18,18,18,18,
            18,18,18,18,18,18,18,18,18,18,
            18,18,18,18,18,18,18,18,18,18,
            18,18,18,18,18,18,18,20,21,21,
            21,24,24,24,24,25,25,23,23,5,
            5,33,33,27,9,9,9,6,6,6,
            6,6,2,2,2,2,3,3,3,3,
            3,3,3,3,3,3,3,3,3,3,
            3,3,3,3,3,3,3,3,3,3,
            3,3,4,4,4,4,4,4,4,4,
            4,4,4,4,4,4,4,4,4,4,
            4,4,4,4,4,4,4,4,1,1,
            1,1,1,1,1,1,1,1,35,35,
            35,35,35,35,35,35,36,36,36,36,
            36,36,36,36,36,36,36,36,34,34,
            37,37,37,11,11,38,38,26,26,8,
            8,8,8,29,29,29,29,29,29,29,
            29,29,29,29,29,29,29,29,29,29,
            29,29,29,29,29,29,29,29,29,29,
            29,29,13,13,13,13,13,13,13,13,
            13,13,13,13,13,13,13,13,13,13,
            13,13,13,13,13,13,13,13,13,13,
            14,14,14,14,14,14,14,14,14,14,
            14,14,14,14,14,14,14,14,14,14,
            14,14,14,14,14,14,14,14,15,15,
            15,15,15,15,15,15,15,15,15,15,
            15,15,15,15,15,15,15,15,15,15,
            15,15,15,15,15,15,10,10,10,10,
            28,28,28,28,28,28,28,28,16,16,
            16,16,16,17,17,17,17,17,7,7,
            7,7,7,7,7,7,30,30,31,31,
            19,19,12,22,689,436,427,427,427,393,
            437,1053,327,99,1038,50,439,861,161,160,
            160,160,321,783,3,4,5,368,1051,768,
            356,339,401,440,440,440,440,374,39,440,
            412,497,419,419,419,419,1050,440,419,440,
            1070,416,158,1057,50,419,784,419,203,48,
            48,48,48,388,1,43,43,43,43,1003,
            43,419,1080,50,43,1091,50,43,593,309,
            309,309,309,991,50,309,48,48,1073,428,
            1049,1055,40,309,412,309,790,363,442,442,
            442,363,1005,324,442,1103,787,324,442,305,
            307,307,307,307,1102,1112,307,1054,102,41,
            41,41,41,307,41,307,1076,1077,41,1078,
            1074,41,926,161,160,160,160,1016,382,1027,
            385,457,382,457,385,457,457
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,96,97,0,99,
            100,0,1,2,3,4,5,6,7,8,
            9,10,11,12,13,14,15,16,17,18,
            19,20,21,22,23,24,25,26,27,28,
            29,30,31,32,33,34,35,36,37,38,
            39,40,41,42,43,44,45,46,47,48,
            49,50,51,52,53,54,55,56,57,58,
            59,60,61,62,63,64,65,66,67,68,
            69,70,71,72,73,74,75,76,77,78,
            79,80,81,82,83,84,85,86,87,88,
            89,90,91,92,93,94,95,96,97,0,
            99,100,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            68,69,70,71,72,73,74,75,76,77,
            78,79,80,81,82,83,84,85,86,87,
            88,89,90,91,92,93,94,95,96,97,
            0,0,0,101,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,55,
            56,57,58,59,60,61,62,63,64,65,
            66,67,68,69,70,71,72,73,74,75,
            76,77,78,79,80,81,82,83,84,85,
            86,87,88,89,90,91,92,93,94,95,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,0,72,73,74,75,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,0,71,72,73,
            74,75,76,77,78,79,80,81,82,83,
            84,85,86,87,88,89,90,91,92,93,
            94,95,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            68,69,70,0,72,73,74,75,76,77,
            78,79,80,81,82,83,84,85,86,87,
            88,89,90,91,92,93,94,95,0,1,
            2,3,4,5,6,7,8,9,10,11,
            12,13,14,15,16,17,18,19,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,39,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,56,57,58,59,60,61,
            62,63,64,65,66,67,68,69,70,71,
            72,73,74,75,76,77,78,0,80,81,
            82,83,84,85,86,87,88,89,11,0,
            13,0,0,0,96,97,0,99,100,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,17,18,19,20,
            21,22,23,24,25,26,27,28,29,30,
            31,32,33,34,35,36,37,38,39,40,
            41,42,43,44,45,46,47,48,49,50,
            51,52,53,54,55,56,57,58,59,60,
            61,62,63,64,72,0,73,71,0,70,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,0,1,2,3,4,
            5,6,7,8,9,10,11,12,13,14,
            15,16,17,18,19,20,21,22,23,24,
            25,26,27,28,29,30,31,32,33,34,
            35,36,37,38,39,40,41,42,43,44,
            45,46,47,48,49,50,51,52,53,54,
            55,56,57,58,59,60,61,62,63,64,
            0,1,2,3,4,5,6,7,8,9,
            10,11,0,13,0,1,2,3,4,5,
            6,7,8,9,10,0,1,2,3,4,
            5,6,7,8,9,10,0,1,2,3,
            4,5,6,7,8,9,10,0,1,2,
            3,4,5,6,7,8,9,10,0,0,
            0,0,0,0,0,65,0,1,2,3,
            4,5,6,7,8,9,10,17,66,0,
            68,67,0,0,0,0,0,0,74,0,
            1,2,3,4,5,6,7,8,9,10,
            0,1,2,3,4,5,6,7,8,9,
            10,0,0,0,0,0,0,0,0,0,
            0,0,0,12,12,14,15,16,69,18,
            66,67,11,75,0,0,0,0,0,0,
            0,0,0,0,65,0,0,0,0,0,
            68,0,0,0,71,96,97,0,99,100,
            98,98,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,70,71,98,98,98,0,0,0,0,
            79,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            457,500,500,500,500,500,500,500,500,500,
            500,500,500,500,500,500,500,500,500,500,
            500,500,500,500,500,500,500,500,500,500,
            500,500,500,500,500,500,500,500,500,500,
            500,500,500,500,500,500,500,500,500,500,
            500,500,500,500,500,500,500,500,500,500,
            500,500,500,500,500,500,500,500,500,500,
            500,500,500,500,500,428,500,500,500,500,
            500,500,500,500,500,500,500,499,500,500,
            500,500,500,500,500,500,500,500,44,500,
            500,457,498,498,498,498,498,498,498,498,
            498,498,498,498,498,498,498,498,498,498,
            498,498,498,498,498,498,498,498,498,498,
            498,498,498,498,498,498,498,498,498,498,
            498,498,498,498,498,498,498,498,498,498,
            498,498,498,498,498,498,498,498,498,498,
            498,498,498,498,498,498,498,498,498,498,
            498,498,498,498,498,498,503,498,498,498,
            498,498,498,498,498,498,498,498,464,498,
            498,498,498,498,498,498,498,498,498,457,
            498,498,6,505,505,505,505,505,505,505,
            505,505,505,505,505,505,505,505,505,505,
            505,505,505,505,505,505,505,505,505,505,
            505,505,505,505,505,505,505,505,505,505,
            505,505,505,505,505,505,505,505,505,505,
            505,505,505,505,505,505,505,505,505,505,
            505,505,505,505,505,505,505,505,505,505,
            505,505,505,505,505,505,505,505,505,505,
            505,505,505,505,505,505,505,505,505,505,
            505,505,505,505,505,505,505,505,505,505,
            457,457,457,505,457,764,764,764,764,764,
            764,764,764,764,764,764,764,764,764,764,
            764,764,764,764,764,764,764,764,764,764,
            764,764,764,764,764,764,764,764,764,764,
            764,764,764,764,764,764,764,764,764,764,
            764,764,764,764,764,764,764,764,764,764,
            764,764,764,764,764,764,764,764,764,764,
            764,764,764,764,769,764,764,764,764,764,
            764,764,764,424,764,764,764,764,764,764,
            764,764,764,764,764,764,764,764,764,764,
            310,440,440,440,440,440,440,440,440,440,
            440,440,440,440,440,440,440,440,440,440,
            440,440,440,440,440,440,440,440,440,440,
            440,440,440,440,440,440,440,440,440,440,
            440,440,440,440,440,440,440,440,440,440,
            440,440,440,440,440,440,440,440,440,440,
            440,440,440,440,440,440,440,440,440,440,
            440,457,440,440,440,440,440,440,440,424,
            440,440,440,440,440,440,440,440,440,440,
            440,440,440,440,440,440,457,419,419,419,
            419,419,419,419,419,419,419,419,419,419,
            419,419,419,419,419,419,419,419,419,419,
            419,419,419,419,419,419,419,419,419,419,
            419,419,419,419,419,419,419,419,419,419,
            419,419,419,419,419,419,419,419,419,419,
            419,419,419,419,419,419,419,419,419,419,
            419,419,419,419,419,419,457,419,419,419,
            419,419,419,419,419,424,419,419,419,419,
            419,419,419,419,419,419,419,419,419,419,
            419,419,311,766,766,766,766,766,766,766,
            766,766,766,766,766,766,766,766,766,766,
            766,766,766,766,766,766,766,766,766,766,
            766,766,766,766,766,766,766,766,766,766,
            766,766,766,766,766,766,766,766,766,766,
            766,766,766,766,766,766,766,766,766,766,
            766,766,766,766,766,766,766,766,766,766,
            766,766,766,457,766,766,766,766,766,766,
            766,424,766,766,766,766,766,766,766,766,
            766,766,766,766,766,766,766,766,457,436,
            436,436,436,436,436,436,436,436,436,427,
            427,427,427,427,427,427,427,427,427,427,
            427,427,427,427,427,427,427,427,427,427,
            427,427,427,427,427,427,427,427,427,427,
            427,427,427,427,427,427,427,427,427,427,
            427,427,427,427,427,427,427,427,427,427,
            427,427,427,360,398,401,474,437,351,342,
            333,366,466,468,483,338,487,4,480,481,
            478,479,493,484,379,400,470,471,412,457,
            412,457,34,28,437,437,457,437,437,457,
            363,363,363,363,363,363,363,363,363,363,
            442,442,442,442,442,442,442,442,442,442,
            442,442,442,442,442,442,442,442,442,442,
            442,442,442,442,442,442,442,442,442,442,
            442,442,442,442,442,442,442,442,442,442,
            442,442,442,442,442,442,442,442,442,442,
            442,442,442,442,492,457,486,459,457,351,
            1,618,618,618,618,618,618,618,618,618,
            618,617,617,617,617,617,617,617,617,617,
            617,617,617,617,617,617,617,617,617,617,
            617,617,617,617,617,617,617,617,617,617,
            617,617,617,617,617,617,617,617,617,617,
            617,617,617,617,617,617,617,617,617,617,
            617,617,617,617,617,313,618,618,618,618,
            618,618,618,618,618,618,617,617,617,617,
            617,617,617,617,617,617,617,617,617,617,
            617,617,617,617,617,617,617,617,617,617,
            617,617,617,617,617,617,617,617,617,617,
            617,617,617,617,617,617,617,617,617,617,
            617,617,617,617,617,617,617,617,617,617,
            3,507,507,507,507,507,507,507,507,507,
            507,412,16,412,457,324,324,324,324,324,
            324,324,324,324,324,457,382,382,382,382,
            382,382,382,382,382,382,457,385,385,385,
            385,385,385,385,385,385,385,54,507,507,
            507,507,507,507,507,507,507,507,12,8,
            457,457,457,159,10,406,53,507,507,507,
            507,507,507,507,507,507,507,415,477,31,
            476,449,15,308,457,49,157,162,447,56,
            507,507,507,507,507,507,507,507,507,507,
            55,507,507,507,507,507,507,507,507,507,
            507,457,457,457,457,457,457,457,457,457,
            457,457,457,759,425,755,758,757,615,756,
            482,504,490,323,457,457,457,457,457,457,
            457,457,457,457,489,457,457,457,457,457,
            475,457,457,457,311,615,615,457,615,615,
            456,1,457,457,457,457,457,457,457,457,
            457,457,457,457,457,457,457,457,457,457,
            457,760,761,3,8,1,457,457,457,457,
            762
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int getErrorSymbol() { return 0; }
    public final int getScopeUbound() { return 0; }
    public final int getScopeSize() { return 0; }
    public final int getMaxNameLength() { return 0; }

    public final static int
           NUM_STATES        = 40,
           NT_OFFSET         = 102,
           LA_STATE_OFFSET   = 770,
           MAX_LA            = 1,
           NUM_RULES         = 313,
           NUM_NONTERMINALS  = 38,
           NUM_SYMBOLS       = 140,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 314,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 98,
           EOLT_SYMBOL       = 103,
           ACCEPT_ACTION     = 456,
           ERROR_ACTION      = 457;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
