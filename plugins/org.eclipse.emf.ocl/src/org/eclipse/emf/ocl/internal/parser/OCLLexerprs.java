/**
* <copyright>
*
* Copyright (c) 2005, 2006 IBM Corporation and others.
* All rights reserved.   This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   IBM - Initial API and implementation
*
* </copyright>
*
* $Id: OCLLexerprs.java,v 1.4 2006/05/26 18:13:04 cdamus Exp $
*/

package org.eclipse.emf.ocl.internal.parser;

public class OCLLexerprs implements lpg.lpgjavaruntime.ParseTable, OCLLexersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            1,3,3,3,1,1,1,1,5,1,
            1,1,1,1,1,1,1,1,1,2,
            2,2,1,1,1,1,2,1,1,1,
            2,1,1,2,4,1,2,1,1,1,
            2,2,3,2,2,0,1,2,2,2,
            1,2,1,2,3,2,3,3,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,2,3,1,1,1,1,1,2,
            1,2,2,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,2,
            2,2,2,2,2,2,2,2,1,2,
            1,2,0,1,3,3,3,3,3,3,
            3,4,4,3
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            20,20,20,20,20,20,20,20,20,20,
            20,20,20,20,20,20,20,20,20,20,
            20,20,20,20,20,20,20,20,20,20,
            20,20,20,20,20,20,20,20,20,21,
            22,22,22,25,25,25,25,26,26,24,
            24,6,6,33,33,28,13,13,13,7,
            7,7,7,7,2,2,2,2,3,3,
            3,3,3,3,3,3,3,3,3,3,
            3,3,3,3,3,3,3,3,3,3,
            3,3,3,3,4,4,4,4,4,4,
            4,4,4,4,4,4,4,4,4,4,
            4,4,4,4,4,4,4,4,4,4,
            1,1,1,1,1,1,1,1,1,1,
            35,35,35,35,35,35,35,35,36,36,
            36,36,36,36,36,36,36,36,36,36,
            34,34,37,37,37,15,15,38,38,27,
            27,12,12,12,12,30,30,30,30,30,
            30,30,30,30,30,30,30,30,30,30,
            30,30,30,30,30,30,30,30,30,30,
            30,30,30,30,17,17,17,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            17,17,18,18,18,18,18,18,18,18,
            18,18,18,18,18,18,18,18,18,18,
            18,18,18,18,18,18,18,18,18,18,
            8,8,8,8,8,8,8,8,8,8,
            8,8,8,8,8,8,8,8,8,8,
            8,8,8,8,8,8,8,8,14,14,
            14,14,29,29,29,29,29,29,29,29,
            19,19,19,19,19,9,9,9,9,9,
            5,5,5,5,5,5,5,5,5,31,
            31,11,11,10,10,16,23,23,23,23,
            23,23,23,23,23,404,480,479,479,479,
            1016,463,481,1018,343,1062,99,432,1064,343,
            1069,482,160,1051,52,330,5,6,7,466,
            1073,52,335,477,506,483,483,483,483,483,
            1067,396,483,483,440,415,506,483,483,483,
            483,483,1088,52,483,483,454,415,506,483,
            483,483,483,483,1099,52,483,483,456,415,
            602,442,442,442,442,442,1,45,45,45,
            45,1029,372,45,1068,1040,384,372,442,442,
            45,384,1065,45,1113,698,312,312,312,312,
            312,442,448,312,312,794,350,471,471,471,
            1070,350,872,163,162,162,162,471,1063,1111,
            771,471,308,310,310,310,310,310,103,43,
            43,43,43,1110,1071,43,1112,1116,1117,1118,
            310,310,43,1004,52,43,205,50,50,50,
            50,938,163,162,162,162,42,486,333,1114,
            1119,1120,1121,1066,499,499,499,499,499,499,
            41,499,333,499,499,50,50,499,499
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,96,97,0,0,
            100,101,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            68,69,70,71,72,73,74,75,76,77,
            78,79,80,81,82,83,84,85,86,87,
            88,89,90,91,92,93,94,95,96,97,
            0,0,100,101,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,55,
            56,57,58,59,60,61,62,63,64,65,
            66,67,68,69,70,71,72,73,74,75,
            76,77,78,79,80,81,82,83,84,85,
            86,87,88,89,90,91,92,93,94,95,
            96,97,0,0,0,0,102,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,47,48,49,50,51,52,
            53,54,55,56,57,58,59,60,61,62,
            63,64,65,66,67,68,69,70,71,72,
            73,74,75,76,77,78,79,80,81,82,
            83,84,85,86,87,88,89,90,91,92,
            93,94,95,0,1,2,3,4,5,6,
            7,8,9,10,11,12,13,14,15,16,
            17,18,19,20,21,22,23,24,25,26,
            27,28,29,30,31,32,33,34,35,36,
            37,38,39,40,41,42,43,44,45,46,
            47,48,49,50,51,52,53,54,55,56,
            57,58,59,60,61,62,63,64,65,66,
            67,68,69,70,71,72,73,74,75,76,
            77,78,79,80,81,0,83,84,85,86,
            87,88,89,90,0,0,11,0,13,96,
            97,98,0,100,101,0,1,2,3,4,
            5,6,7,8,9,10,11,12,13,14,
            15,16,17,18,19,20,21,22,23,24,
            25,26,27,28,29,30,31,32,33,34,
            35,36,37,38,39,40,41,42,43,44,
            45,46,47,48,49,50,51,52,53,54,
            55,56,57,58,59,60,61,62,63,64,
            65,66,67,68,69,70,71,72,0,74,
            75,76,77,78,79,80,81,82,83,84,
            85,86,87,88,89,90,91,92,93,94,
            95,0,1,2,3,4,5,6,7,8,
            9,10,11,12,13,14,15,16,17,18,
            19,20,21,22,23,24,25,26,27,28,
            29,30,31,32,33,34,35,36,37,38,
            39,40,41,42,43,44,45,46,47,48,
            49,50,51,52,53,54,55,56,57,58,
            59,60,61,62,63,64,65,66,67,68,
            69,70,71,0,73,74,75,76,77,78,
            79,80,81,82,83,84,85,86,87,88,
            89,90,91,92,93,94,95,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,47,48,49,50,51,52,
            53,54,55,56,57,58,59,60,61,62,
            63,64,65,66,67,68,69,70,71,72,
            0,74,75,76,77,78,79,80,81,82,
            83,84,85,86,87,88,89,90,91,92,
            93,94,95,0,1,2,3,4,5,6,
            7,8,9,10,11,12,13,14,15,16,
            17,18,0,20,21,22,23,24,25,26,
            27,28,29,30,31,32,33,34,35,36,
            37,38,39,40,41,42,43,44,45,46,
            47,48,49,50,51,52,53,54,55,56,
            57,58,59,60,61,62,63,64,65,66,
            67,0,69,70,0,72,0,0,98,76,
            77,0,1,2,3,4,5,6,7,8,
            9,10,11,12,13,14,15,16,17,18,
            0,20,21,22,23,24,25,26,27,28,
            29,30,31,32,33,34,35,36,37,38,
            39,40,41,42,43,44,45,46,47,48,
            49,50,51,52,53,54,55,56,57,58,
            59,60,61,62,63,64,65,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,0,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,47,48,49,50,51,52,
            53,54,55,56,57,58,59,60,61,62,
            63,64,65,0,1,2,3,4,5,6,
            7,8,9,10,11,0,13,0,1,2,
            3,4,5,6,7,8,9,10,0,1,
            2,3,4,5,6,7,8,9,10,0,
            1,2,3,4,5,6,7,8,9,10,
            0,1,2,3,4,5,6,7,8,9,
            10,0,0,0,0,0,0,0,0,0,
            0,68,0,1,2,3,4,5,6,7,
            8,9,10,19,67,17,69,0,1,2,
            3,4,5,6,7,8,9,10,0,1,
            2,3,4,5,6,7,8,9,10,0,
            0,0,0,0,99,0,0,0,0,0,
            0,12,12,14,15,16,11,18,66,67,
            66,19,71,0,68,19,19,74,73,70,
            0,0,75,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,96,97,0,
            0,100,101,98,0,0,0,0,98,0,
            0,0,0,0,0,0,0,0,0,0,
            0,72,73,0,73,0,0,0,0,0,
            0,82,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,98,0,0,
            0,0,99,0,0,0,0,99,99,99,
            0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            499,544,544,544,544,544,544,544,544,544,
            544,544,544,544,544,544,544,544,544,544,
            544,544,544,544,544,544,544,544,544,544,
            544,544,544,544,544,544,544,544,544,544,
            544,544,544,544,544,544,544,544,544,544,
            544,544,544,544,544,544,544,544,544,544,
            544,544,544,544,544,544,544,544,544,544,
            448,544,544,544,544,544,544,543,544,544,
            544,544,544,544,544,544,544,544,544,544,
            544,544,544,544,544,544,544,544,46,499,
            544,544,499,542,542,542,542,542,542,542,
            542,542,542,542,542,542,542,542,542,542,
            542,542,542,542,542,542,542,542,542,542,
            542,542,542,542,542,542,542,542,542,542,
            542,542,542,542,542,542,542,542,542,542,
            542,542,542,542,542,542,542,542,542,542,
            542,542,542,542,542,542,542,542,542,542,
            542,542,547,542,542,542,542,542,542,508,
            542,542,542,542,542,542,542,542,542,542,
            542,542,542,542,542,542,542,542,542,542,
            499,499,542,542,8,549,549,549,549,549,
            549,549,549,549,549,549,549,549,549,549,
            549,549,549,549,549,549,549,549,549,549,
            549,549,549,549,549,549,549,549,549,549,
            549,549,549,549,549,549,549,549,549,549,
            549,549,549,549,549,549,549,549,549,549,
            549,549,549,549,549,549,549,549,549,549,
            549,549,549,549,549,549,549,549,549,549,
            549,549,549,549,549,549,549,549,549,549,
            549,549,549,549,549,549,549,549,549,549,
            549,549,499,499,499,499,549,499,809,809,
            809,809,809,809,809,809,809,809,809,809,
            809,809,809,809,809,809,809,809,809,809,
            809,809,809,809,809,809,809,809,809,809,
            809,809,809,809,809,809,809,809,809,809,
            809,809,809,809,809,809,809,809,809,809,
            809,809,809,809,809,809,809,809,809,809,
            809,809,809,809,809,809,809,809,809,814,
            809,809,809,809,809,809,809,809,809,453,
            809,809,809,809,809,809,809,809,809,809,
            809,809,809,499,480,480,480,480,480,480,
            480,480,480,480,479,479,479,479,479,479,
            479,479,518,479,479,479,479,479,479,479,
            479,479,479,479,479,479,479,479,479,479,
            479,479,479,479,479,479,479,479,479,479,
            479,479,479,479,479,479,479,479,479,479,
            479,479,479,479,479,479,479,479,479,414,
            438,360,510,512,481,390,378,338,404,412,
            430,527,340,354,531,6,524,525,522,523,
            537,528,514,515,499,499,333,499,333,481,
            481,366,499,481,481,313,483,483,483,483,
            483,483,483,483,483,483,483,483,483,483,
            483,483,483,483,483,483,483,483,483,483,
            483,483,483,483,483,483,483,483,483,483,
            483,483,483,483,483,483,483,483,483,483,
            483,483,483,483,483,483,483,483,483,483,
            483,483,483,483,483,483,483,483,483,483,
            483,483,483,483,483,483,483,483,499,483,
            483,483,483,483,483,483,483,453,483,483,
            483,483,483,483,483,483,483,483,483,483,
            483,499,442,442,442,442,442,442,442,442,
            442,442,442,442,442,442,442,442,442,442,
            442,442,442,442,442,442,442,442,442,442,
            442,442,442,442,442,442,442,442,442,442,
            442,442,442,442,442,442,442,442,442,442,
            442,442,442,442,442,442,442,442,442,442,
            442,442,442,442,442,442,442,442,442,442,
            442,442,442,499,442,442,442,442,442,442,
            442,442,442,453,442,442,442,442,442,442,
            442,442,442,442,442,442,442,314,811,811,
            811,811,811,811,811,811,811,811,811,811,
            811,811,811,811,811,811,811,811,811,811,
            811,811,811,811,811,811,811,811,811,811,
            811,811,811,811,811,811,811,811,811,811,
            811,811,811,811,811,811,811,811,811,811,
            811,811,811,811,811,811,811,811,811,811,
            811,811,811,811,811,811,811,811,811,811,
            499,811,811,811,811,811,811,811,811,453,
            811,811,811,811,811,811,811,811,811,811,
            811,811,811,499,350,350,350,350,350,350,
            350,350,350,350,471,471,471,471,471,471,
            471,471,499,471,471,471,471,471,471,471,
            471,471,471,471,471,471,471,471,471,471,
            471,471,471,471,471,471,471,471,471,471,
            471,471,471,471,471,471,471,471,471,471,
            471,471,471,471,471,471,471,471,471,458,
            817,499,816,818,499,390,499,499,503,459,
            819,1,662,662,662,662,662,662,662,662,
            662,662,661,661,661,661,661,661,661,661,
            499,661,661,661,661,661,661,661,661,661,
            661,661,661,661,661,661,661,661,661,661,
            661,661,661,661,661,661,661,661,661,661,
            661,661,661,661,661,661,661,661,661,661,
            661,661,661,661,661,661,661,316,662,662,
            662,662,662,662,662,662,662,662,661,661,
            661,661,661,661,661,661,499,661,661,661,
            661,661,661,661,661,661,661,661,661,661,
            661,661,661,661,661,661,661,661,661,661,
            661,661,661,661,661,661,661,661,661,661,
            661,661,661,661,661,661,661,661,661,661,
            661,661,661,5,551,551,551,551,551,551,
            551,551,551,551,333,499,333,499,343,343,
            343,343,343,343,343,343,343,343,499,372,
            372,372,372,372,372,372,372,372,372,499,
            384,384,384,384,384,384,384,384,384,384,
            56,551,551,551,551,551,551,551,551,551,
            551,10,12,36,18,311,33,30,499,14,
            499,425,55,551,551,551,551,551,551,551,
            551,551,551,520,405,439,401,58,551,551,
            551,551,551,551,551,551,551,551,57,551,
            551,551,551,551,551,551,551,551,551,499,
            499,499,17,161,498,499,324,321,51,159,
            164,803,457,799,802,801,534,800,526,548,
            521,519,659,499,533,822,821,536,314,336,
            499,499,530,499,499,499,499,499,499,499,
            499,499,499,499,499,499,499,659,659,499,
            499,659,659,314,499,499,499,499,502,499,
            499,499,499,499,499,499,499,499,499,499,
            499,804,805,499,501,499,499,499,499,499,
            499,807,499,499,499,499,499,499,499,499,
            499,499,499,499,499,499,499,806,499,499,
            499,499,1,499,499,499,499,5,10,1
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int getErrorSymbol() { return 0; }
    public final int getScopeUbound() { return 0; }
    public final int getScopeSize() { return 0; }
    public final int getMaxNameLength() { return 0; }

    public final static int
           NUM_STATES        = 46,
           NT_OFFSET         = 103,
           LA_STATE_OFFSET   = 823,
           MAX_LA            = 1,
           NUM_RULES         = 324,
           NUM_NONTERMINALS  = 38,
           NUM_SYMBOLS       = 141,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 325,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 99,
           EOLT_SYMBOL       = 104,
           ACCEPT_ACTION     = 498,
           ERROR_ACTION      = 499;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
