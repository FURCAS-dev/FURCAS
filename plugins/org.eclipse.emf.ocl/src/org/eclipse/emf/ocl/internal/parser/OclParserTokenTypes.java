/**
 * <copyright>
 *
 * Copyright (c) 2005 IBM Corporation and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   IBM - Initial API and implementation
 *
 * </copyright>
 *
 * $Id$
 */

// $ANTLR : "OCLGrammar.g" -> "OclLexer.java"$

package org.eclipse.emf.ocl.internal.parser;


/**
 * ANTLR-generated parser class.
 *
 * IMPORTANT:  Instructions for eliminating compiler warnings.
 *
 * After regenerating the parser from this file, do the following:
 *
 * On the OclParser.java file:
 * 
 * 1.  Do an "Aurora Tools -> Fix NON-NLS for current file"
 * 2.  Remove the unused antlr.* imports (do not Ctrl+Shift+O otherwise
 *     you will lose this comment).
 * 3.  Find the uncommented empty block warning and fill the block with:
 *
 *    // empty block generated by ANTLR
 *
 * On the OclParserTokenTypes.java file:
 *
 * 4.  Ctrl+Shift+O to remove the unused imports (all of them are unused).
 *
 * On the OclLexer.java file:
 *
 * 5.  Do an "Aurora Tools -> Fix NON-NLS for current file"
 * 6.  In method nextToken(), remove unread local vars
 *     _thRetToken (several occurrences) and _token.
 * 7.  Search and replace "int _saveIndex;" with nothing (all occurrences).
 * 8.  Search and replace "(char)LA(" with "LA(" (all occurrences).
 * 9.  Ctrl+Shift+O to remove the unused imports.
 * 10. Find the uncommented empty block warnings and fill the blocks with:
 *
 *    // empty block generated by ANTLR
 *
 * 11. That's it!  You're clean
 */

public interface OclParserTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int LITERAL_package = 4;
	int LITERAL_endpackage = 5;
	int PATHNAME = 6;
	int NAME = 7;
	int NUMERICPATHNAME = 8;
	int LITERAL_context = 9;
	int COLON = 10;
	int LPAREN = 11;
	int RPAREN = 12;
	int COMMA = 13;
	int LITERAL_pre = 14;
	int LITERAL_post = 15;
	int LITERAL_body = 16;
	int LITERAL_inv = 17;
	int LITERAL_implies = 18;
	int LITERAL_and = 19;
	int LITERAL_or = 20;
	int LITERAL_xor = 21;
	int EQUALS = 22;
	int NEQUALS = 23;
	int GT = 24;
	int GE = 25;
	int LT = 26;
	int LE = 27;
	int LITERAL_if = 28;
	int LITERAL_then = 29;
	int LITERAL_else = 30;
	int LITERAL_endif = 31;
	int PLUS = 32;
	int MINUS = 33;
	int MULTIPLY = 34;
	int DIVIDE = 35;
	int LITERAL_not = 36;
	int DOT = 37;
	int ARROW = 38;
	int PRE = 39;
	int LBRACKET = 40;
	int RBRACKET = 41;
	int LITERAL_let = 42;
	int LITERAL_Integer = 43;
	int LITERAL_String = 44;
	int LITERAL_Real = 45;
	int LITERAL_Boolean = 46;
	int LITERAL_OclAny = 47;
	int LITERAL_OclVoid = 48;
	int LITERAL_Set = 49;
	int LITERAL_Bag = 50;
	int LITERAL_Sequence = 51;
	int LITERAL_Collection = 52;
	int LITERAL_OrderedSet = 53;
	int LITERAL_Tuple = 54;
	int LITERAL_in = 55;
	int NUMBER_LITERAL = 56;
	int REAL_LITERAL = 57;
	int LITERAL_true = 58;
	int LITERAL_false = 59;
	int STRING_LITERAL = 60;
	int LBRACE = 61;
	int RBRACE = 62;
	int DOTDOT = 63;
	int LITERAL_forAll = 64;
	int LITERAL_exists = 65;
	int LITERAL_isUnique = 66;
	int LITERAL_any = 67;
	int LITERAL_one = 68;
	int LITERAL_collect = 69;
	int LITERAL_select = 70;
	int LITERAL_reject = 71;
	int LITERAL_collectNested = 72;
	int LITERAL_sortedBy = 73;
	int BAR = 74;
	int LITERAL_iterate = 75;
	int SEMICOLON = 76;
	int LITERAL_oclAsType = 77;
	int LITERAL_oclIsKindOf = 78;
	int LITERAL_oclIsTypeOf = 79;
	int LITERAL_closure = 80;
	int LITERAL_closureAll = 81;
	int OPERATION_EXPR = 82;
	int WS = 83;
	int SL_COMMENT = 84;
	int DOUBLECOLON = 85;
	int EXPONENT = 86;
	int NUMERIC_URL = 87;
	int NUMBER_OR_REAL_OR_RANGE_OR_OPERATION = 88;
	int DIGIT = 89;
	int ESC = 90;
	int HEX_DIGIT = 91;
	int NONQUOTED_NAME = 92;
	int QUOTED_NAME = 93;
	int NAMEORDOTTEDNAME = 94;
	int NAME_OR_PATHNAME = 95;
}
