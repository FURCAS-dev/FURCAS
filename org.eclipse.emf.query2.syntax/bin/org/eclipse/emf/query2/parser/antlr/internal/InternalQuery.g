/*
* generated by Xtext
*/
grammar InternalQuery;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.emf.query2.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.emf.query2.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.emf.query2.services.QueryGrammarAccess;

}

@parser::members {
 
 	private QueryGrammarAccess grammarAccess;
 	
    public InternalQueryParser(TokenStream input, IAstFactory factory, QueryGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/eclipse/emf/query2/parser/antlr/internal/InternalQuery.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	} 
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getModelRule(), currentNode); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getImportsImportParserRuleCall_0_0(), currentNode); 
	    }
	    lv_imports_0=ruleImport 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "imports", lv_imports_0, "Import", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getDefaultQueryMQLqueryParserRuleCall_1_0(), currentNode); 
	    }
	    lv_defaultQuery_1=ruleMQLquery 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "defaultQuery", lv_defaultQuery_1, "MQLquery", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getNamedQueriesNamedQueryParserRuleCall_2_0(), currentNode); 
	    }
	    lv_namedQueries_2=ruleNamedQuery 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "namedQueries", lv_namedQueries_2, "NamedQuery", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*);





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getImportRule(), currentNode); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('import' 
    {
        createLeafNode(grammarAccess.getImportAccess().getImportKeyword_0(), null); 
    }
(	
	
	    lv_impURI_1=	RULE_STRING
	{
		createLeafNode(grammarAccess.getImportAccess().getImpURISTRINGTerminalRuleCall_1_0(), "impURI"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImportRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "impURI", lv_impURI_1, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleNamedQuery
entryRuleNamedQuery returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getNamedQueryRule(), currentNode); }
	 iv_ruleNamedQuery=ruleNamedQuery 
	 { $current=$iv_ruleNamedQuery.current; } 
	 EOF 
;

// Rule NamedQuery
ruleNamedQuery returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_name_0=	RULE_ID
	{
		createLeafNode(grammarAccess.getNamedQueryAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNamedQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)':' 
    {
        createLeafNode(grammarAccess.getNamedQueryAccess().getColonKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getNamedQueryAccess().getQueryMQLqueryParserRuleCall_2_0(), currentNode); 
	    }
	    lv_query_2=ruleMQLquery 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNamedQueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "query", lv_query_2, "MQLquery", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleMQLquery
entryRuleMQLquery returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getMQLqueryRule(), currentNode); }
	 iv_ruleMQLquery=ruleMQLquery 
	 { $current=$iv_ruleMQLquery.current; } 
	 EOF 
;

// Rule MQLquery
ruleMQLquery returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('from' 
    {
        createLeafNode(grammarAccess.getMQLqueryAccess().getFromKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getMQLqueryAccess().getFromEntriesFromEntryParserRuleCall_1_0(), currentNode); 
	    }
	    lv_fromEntries_1=ruleFromEntry 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMQLqueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "fromEntries", lv_fromEntries_1, "FromEntry", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getMQLqueryAccess().getCommaKeyword_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getMQLqueryAccess().getFromEntriesFromEntryParserRuleCall_2_1_0(), currentNode); 
	    }
	    lv_fromEntries_3=ruleFromEntry 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMQLqueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "fromEntries", lv_fromEntries_3, "FromEntry", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*'select' 
    {
        createLeafNode(grammarAccess.getMQLqueryAccess().getSelectKeyword_3(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getMQLqueryAccess().getSelectEntriesSelectEntryParserRuleCall_4_0(), currentNode); 
	    }
	    lv_selectEntries_5=ruleSelectEntry 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMQLqueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "selectEntries", lv_selectEntries_5, "SelectEntry", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getMQLqueryAccess().getCommaKeyword_5_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getMQLqueryAccess().getSelectEntriesSelectEntryParserRuleCall_5_1_0(), currentNode); 
	    }
	    lv_selectEntries_7=ruleSelectEntry 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMQLqueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "selectEntries", lv_selectEntries_7, "SelectEntry", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*('where' 
    {
        createLeafNode(grammarAccess.getMQLqueryAccess().getWhereKeyword_6_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getMQLqueryAccess().getWhereEntryWhereEntryParserRuleCall_6_1_0(), currentNode); 
	    }
	    lv_whereEntry_9=ruleWhereEntry 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMQLqueryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "whereEntry", lv_whereEntry_9, "WhereEntry", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?);





// Entry rule entryRuleSelectEntry
entryRuleSelectEntry returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSelectEntryRule(), currentNode); }
	 iv_ruleSelectEntry=ruleSelectEntry 
	 { $current=$iv_ruleSelectEntry.current; } 
	 EOF 
;

// Rule SelectEntry
ruleSelectEntry returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectEntryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getSelectEntryAccess().getSelectFromEntryCrossReference_0_0(), "select"); 
	}

		// TODO assign feature to currentNode
	
)('.' 
    {
        createLeafNode(grammarAccess.getSelectEntryAccess().getFullStopKeyword_1_0(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectEntryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getSelectEntryAccess().getAttributeEAttributeCrossReference_1_1_0(), "attribute"); 
	}

		// TODO assign feature to currentNode
	
))?);





// Entry rule entryRuleFromEntry
entryRuleFromEntry returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFromEntryRule(), currentNode); }
	 iv_ruleFromEntry=ruleFromEntry 
	 { $current=$iv_ruleFromEntry.current; } 
	 EOF 
;

// Rule FromEntry
ruleFromEntry returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getFromEntryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getFromEntryAccess().getTypeEClassCrossReference_0_0(), "type"); 
	}

		// TODO assign feature to currentNode
	
)((	
	
	    lv_withoutsubtypes_1='withoutsubtypes' 
    {
        createLeafNode(grammarAccess.getFromEntryAccess().getWithoutsubtypesWithoutsubtypesKeyword_1_0_0(), "withoutsubtypes"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFromEntryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "withoutsubtypes", true, "withoutsubtypes", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)('{' 
    {
        createLeafNode(grammarAccess.getFromEntryAccess().getLeftCurlyBracketKeyword_1_1_0(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getFromEntryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getFromEntryAccess().getWithoutsubtypesTypesEClassCrossReference_1_1_1_0(), "withoutsubtypesTypes"); 
	}

		// TODO assign feature to currentNode
	
)(',' 
    {
        createLeafNode(grammarAccess.getFromEntryAccess().getCommaKeyword_1_1_2_0(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getFromEntryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getFromEntryAccess().getWithoutsubtypesTypesEClassCrossReference_1_1_2_1_0(), "withoutsubtypesTypes"); 
	}

		// TODO assign feature to currentNode
	
))*'}' 
    {
        createLeafNode(grammarAccess.getFromEntryAccess().getRightCurlyBracketKeyword_1_1_3(), null); 
    }
)?)?'as' 
    {
        createLeafNode(grammarAccess.getFromEntryAccess().getAsKeyword_2(), null); 
    }
(	
	
	    lv_alias_8=	RULE_ID
	{
		createLeafNode(grammarAccess.getFromEntryAccess().getAliasIDTerminalRuleCall_3_0(), "alias"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFromEntryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "alias", lv_alias_8, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFromEntryAccess().getScopeClauseScopeClauseParserRuleCall_4_0(), currentNode); 
	    }
	    lv_scopeClause_9=ruleScopeClause 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFromEntryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "scopeClause", lv_scopeClause_9, "ScopeClause", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?);





// Entry rule entryRuleScopeClause
entryRuleScopeClause returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getScopeClauseRule(), currentNode); }
	 iv_ruleScopeClause=ruleScopeClause 
	 { $current=$iv_ruleScopeClause.current; } 
	 EOF 
;

// Rule ScopeClause
ruleScopeClause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getScopeClauseAccess().getResourceScopeParserRuleCall_0(), currentNode); 
    }
    this_ResourceScope_0=ruleResourceScope
    { 
        $current = $this_ResourceScope_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getScopeClauseAccess().getElementScopeParserRuleCall_1(), currentNode); 
    }
    this_ElementScope_1=ruleElementScope
    { 
        $current = $this_ElementScope_1.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleResourceScope
entryRuleResourceScope returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getResourceScopeRule(), currentNode); }
	 iv_ruleResourceScope=ruleResourceScope 
	 { $current=$iv_ruleResourceScope.current; } 
	 EOF 
;

// Rule ResourceScope
ruleResourceScope returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_notIn_0='not' 
    {
        createLeafNode(grammarAccess.getResourceScopeAccess().getNotInNotKeyword_0_0(), "notIn"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getResourceScopeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "notIn", true, "not", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?'in' 
    {
        createLeafNode(grammarAccess.getResourceScopeAccess().getInKeyword_1(), null); 
    }
'resources' 
    {
        createLeafNode(grammarAccess.getResourceScopeAccess().getResourcesKeyword_2(), null); 
    }
'{' 
    {
        createLeafNode(grammarAccess.getResourceScopeAccess().getLeftCurlyBracketKeyword_3(), null); 
    }
(	
	
	    lv_uris_4=	RULE_STRING
	{
		createLeafNode(grammarAccess.getResourceScopeAccess().getUrisSTRINGTerminalRuleCall_4_0(), "uris"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getResourceScopeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "uris", lv_uris_4, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getResourceScopeAccess().getCommaKeyword_5_0(), null); 
    }
(	
	
	    lv_uris_6=	RULE_STRING
	{
		createLeafNode(grammarAccess.getResourceScopeAccess().getUrisSTRINGTerminalRuleCall_5_1_0(), "uris"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getResourceScopeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "uris", lv_uris_6, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))*'}' 
    {
        createLeafNode(grammarAccess.getResourceScopeAccess().getRightCurlyBracketKeyword_6(), null); 
    }
);





// Entry rule entryRuleElementScope
entryRuleElementScope returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getElementScopeRule(), currentNode); }
	 iv_ruleElementScope=ruleElementScope 
	 { $current=$iv_ruleElementScope.current; } 
	 EOF 
;

// Rule ElementScope
ruleElementScope returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_notIn_0='not' 
    {
        createLeafNode(grammarAccess.getElementScopeAccess().getNotInNotKeyword_0_0(), "notIn"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElementScopeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "notIn", true, "not", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?'in' 
    {
        createLeafNode(grammarAccess.getElementScopeAccess().getInKeyword_1(), null); 
    }
'elements' 
    {
        createLeafNode(grammarAccess.getElementScopeAccess().getElementsKeyword_2(), null); 
    }
'{' 
    {
        createLeafNode(grammarAccess.getElementScopeAccess().getLeftCurlyBracketKeyword_3(), null); 
    }
(	
	
	    lv_uris_4=	RULE_STRING
	{
		createLeafNode(grammarAccess.getElementScopeAccess().getUrisSTRINGTerminalRuleCall_4_0(), "uris"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElementScopeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "uris", lv_uris_4, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getElementScopeAccess().getCommaKeyword_5_0(), null); 
    }
(	
	
	    lv_uris_6=	RULE_STRING
	{
		createLeafNode(grammarAccess.getElementScopeAccess().getUrisSTRINGTerminalRuleCall_5_1_0(), "uris"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElementScopeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "uris", lv_uris_6, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))*'}' 
    {
        createLeafNode(grammarAccess.getElementScopeAccess().getRightCurlyBracketKeyword_6(), null); 
    }
);





// Entry rule entryRuleWhereEntry
entryRuleWhereEntry returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getWhereEntryRule(), currentNode); }
	 iv_ruleWhereEntry=ruleWhereEntry 
	 { $current=$iv_ruleWhereEntry.current; } 
	 EOF 
;

// Rule WhereEntry
ruleWhereEntry returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getWhereEntryAccess().getAndWhereEntryParserRuleCall_0(), currentNode); 
    }
    this_AndWhereEntry_0=ruleAndWhereEntry
    { 
        $current = $this_AndWhereEntry_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getWhereEntryAccess().getOrWhereEntryEntriesAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "entries", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getWhereEntryAccess().getOrWhereEntryEntriesAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)('or' 
    {
        createLeafNode(grammarAccess.getWhereEntryAccess().getOrKeyword_1_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getWhereEntryAccess().getEntriesAndWhereEntryParserRuleCall_1_1_1_0(), currentNode); 
	    }
	    lv_entries_3=ruleAndWhereEntry 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWhereEntryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "entries", lv_entries_3, "AndWhereEntry", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))+)?);





// Entry rule entryRuleAndWhereEntry
entryRuleAndWhereEntry returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAndWhereEntryRule(), currentNode); }
	 iv_ruleAndWhereEntry=ruleAndWhereEntry 
	 { $current=$iv_ruleAndWhereEntry.current; } 
	 EOF 
;

// Rule AndWhereEntry
ruleAndWhereEntry returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAndWhereEntryAccess().getConcreteWhereEntryParserRuleCall_0(), currentNode); 
    }
    this_ConcreteWhereEntry_0=ruleConcreteWhereEntry
    { 
        $current = $this_ConcreteWhereEntry_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getAndWhereEntryAccess().getAndWhereEntryEntriesAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "entries", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAndWhereEntryAccess().getAndWhereEntryEntriesAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)('and' 
    {
        createLeafNode(grammarAccess.getAndWhereEntryAccess().getAndKeyword_1_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAndWhereEntryAccess().getEntriesConcreteWhereEntryParserRuleCall_1_1_1_0(), currentNode); 
	    }
	    lv_entries_3=ruleConcreteWhereEntry 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndWhereEntryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "entries", lv_entries_3, "ConcreteWhereEntry", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))+)?);





// Entry rule entryRuleConcreteWhereEntry
entryRuleConcreteWhereEntry returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getConcreteWhereEntryRule(), currentNode); }
	 iv_ruleConcreteWhereEntry=ruleConcreteWhereEntry 
	 { $current=$iv_ruleConcreteWhereEntry.current; } 
	 EOF 
;

// Rule ConcreteWhereEntry
ruleConcreteWhereEntry returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getConcreteWhereEntryAccess().getParWhereEntryParserRuleCall_0(), currentNode); 
    }
    this_ParWhereEntry_0=ruleParWhereEntry
    { 
        $current = $this_ParWhereEntry_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getConcreteWhereEntryAccess().getExpressionWhereEntryParserRuleCall_1(), currentNode); 
    }
    this_ExpressionWhereEntry_1=ruleExpressionWhereEntry
    { 
        $current = $this_ExpressionWhereEntry_1.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleParWhereEntry
entryRuleParWhereEntry returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getParWhereEntryRule(), currentNode); }
	 iv_ruleParWhereEntry=ruleParWhereEntry 
	 { $current=$iv_ruleParWhereEntry.current; } 
	 EOF 
;

// Rule ParWhereEntry
ruleParWhereEntry returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('(' 
    {
        createLeafNode(grammarAccess.getParWhereEntryAccess().getLeftParenthesisKeyword_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getParWhereEntryAccess().getWhereEntryParserRuleCall_1(), currentNode); 
    }
    this_WhereEntry_1=ruleWhereEntry
    { 
        $current = $this_WhereEntry_1.current; 
        currentNode = currentNode.getParent();
    }
')' 
    {
        createLeafNode(grammarAccess.getParWhereEntryAccess().getRightParenthesisKeyword_2(), null); 
    }
);





// Entry rule entryRuleExpressionWhereEntry
entryRuleExpressionWhereEntry returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getExpressionWhereEntryRule(), currentNode); }
	 iv_ruleExpressionWhereEntry=ruleExpressionWhereEntry 
	 { $current=$iv_ruleExpressionWhereEntry.current; } 
	 EOF 
;

// Rule ExpressionWhereEntry
ruleExpressionWhereEntry returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getExpressionWhereEntryAccess().getLhsAliasAttributeExpressionParserRuleCall_0_0(), currentNode); 
	    }
	    lv_lhs_0=ruleAliasAttributeExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionWhereEntryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "lhs", lv_lhs_0, "AliasAttributeExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getExpressionWhereEntryAccess().getOperatorOperatorEnumRuleCall_1_0(), currentNode); 
	    }
	    lv_operator_1=ruleOperator 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionWhereEntryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "operator", lv_operator_1, "Operator", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getExpressionWhereEntryAccess().getRhsExpressionParserRuleCall_2_0(), currentNode); 
	    }
	    lv_rhs_2=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionWhereEntryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "rhs", lv_rhs_2, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleAliasAttributeExpression
entryRuleAliasAttributeExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAliasAttributeExpressionRule(), currentNode); }
	 iv_ruleAliasAttributeExpression=ruleAliasAttributeExpression 
	 { $current=$iv_ruleAliasAttributeExpression.current; } 
	 EOF 
;

// Rule AliasAttributeExpression
ruleAliasAttributeExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getAliasAttributeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getAliasAttributeExpressionAccess().getAliasFromEntryCrossReference_0_0(), "alias"); 
	}

		// TODO assign feature to currentNode
	
)('.' 
    {
        createLeafNode(grammarAccess.getAliasAttributeExpressionAccess().getFullStopKeyword_1_0(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getAliasAttributeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getAliasAttributeExpressionAccess().getAttributeEStructuralFeatureCrossReference_1_1_0(), "attribute"); 
	}

		// TODO assign feature to currentNode
	
))?);





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getExpressionRule(), currentNode); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getAliasAttributeExpressionParserRuleCall_0(), currentNode); 
    }
    this_AliasAttributeExpression_0=ruleAliasAttributeExpression
    { 
        $current = $this_AliasAttributeExpression_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getDoubleExpressionParserRuleCall_1(), currentNode); 
    }
    this_DoubleExpression_1=ruleDoubleExpression
    { 
        $current = $this_DoubleExpression_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getLongExpressionParserRuleCall_2(), currentNode); 
    }
    this_LongExpression_2=ruleLongExpression
    { 
        $current = $this_LongExpression_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getStringExpressionParserRuleCall_3(), currentNode); 
    }
    this_StringExpression_3=ruleStringExpression
    { 
        $current = $this_StringExpression_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getNullExpressionParserRuleCall_4(), currentNode); 
    }
    this_NullExpression_4=ruleNullExpression
    { 
        $current = $this_NullExpression_4.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getBooleanExpressionParserRuleCall_5(), currentNode); 
    }
    this_BooleanExpression_5=ruleBooleanExpression
    { 
        $current = $this_BooleanExpression_5.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getQueryExpressionParserRuleCall_6(), currentNode); 
    }
    this_QueryExpression_6=ruleQueryExpression
    { 
        $current = $this_QueryExpression_6.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleDoubleExpression
entryRuleDoubleExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getDoubleExpressionRule(), currentNode); }
	 iv_ruleDoubleExpression=ruleDoubleExpression 
	 { $current=$iv_ruleDoubleExpression.current; } 
	 EOF 
;

// Rule DoubleExpression
ruleDoubleExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    lv_value_0=	RULE_SIGNED_DOUBLE
	{
		createLeafNode(grammarAccess.getDoubleExpressionAccess().getValueSIGNED_DOUBLETerminalRuleCall_0(), "value"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDoubleExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_0, "SIGNED_DOUBLE", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
);





// Entry rule entryRuleLongExpression
entryRuleLongExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getLongExpressionRule(), currentNode); }
	 iv_ruleLongExpression=ruleLongExpression 
	 { $current=$iv_ruleLongExpression.current; } 
	 EOF 
;

// Rule LongExpression
ruleLongExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    lv_value_0=	RULE_SINGED_LONG
	{
		createLeafNode(grammarAccess.getLongExpressionAccess().getValueSINGED_LONGTerminalRuleCall_0(), "value"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLongExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_0, "SINGED_LONG", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
);





// Entry rule entryRuleStringExpression
entryRuleStringExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getStringExpressionRule(), currentNode); }
	 iv_ruleStringExpression=ruleStringExpression 
	 { $current=$iv_ruleStringExpression.current; } 
	 EOF 
;

// Rule StringExpression
ruleStringExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    lv_value_0=	RULE_STRING
	{
		createLeafNode(grammarAccess.getStringExpressionAccess().getValueSTRINGTerminalRuleCall_0(), "value"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStringExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_0, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
);





// Entry rule entryRuleNullExpression
entryRuleNullExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getNullExpressionRule(), currentNode); }
	 iv_ruleNullExpression=ruleNullExpression 
	 { $current=$iv_ruleNullExpression.current; } 
	 EOF 
;

// Rule NullExpression
ruleNullExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    lv_value_0='null' 
    {
        createLeafNode(grammarAccess.getNullExpressionAccess().getValueNullKeyword_0(), "value"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNullExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", /* lv_value_0 */ input.LT(-1), "null", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
);





// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBooleanExpressionRule(), currentNode); }
	 iv_ruleBooleanExpression=ruleBooleanExpression 
	 { $current=$iv_ruleBooleanExpression.current; } 
	 EOF 
;

// Rule BooleanExpression
ruleBooleanExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_true_0='true' 
    {
        createLeafNode(grammarAccess.getBooleanExpressionAccess().getTrueTrueKeyword_0_0(), "true"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "true", true, "true", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)
    |'false' 
    {
        createLeafNode(grammarAccess.getBooleanExpressionAccess().getFalseKeyword_1(), null); 
    }
);





// Entry rule entryRuleQueryExpression
entryRuleQueryExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getQueryExpressionRule(), currentNode); }
	 iv_ruleQueryExpression=ruleQueryExpression 
	 { $current=$iv_ruleQueryExpression.current; } 
	 EOF 
;

// Rule QueryExpression
ruleQueryExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('(' 
    {
        createLeafNode(grammarAccess.getQueryExpressionAccess().getLeftParenthesisKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getQueryExpressionAccess().getValueMQLqueryParserRuleCall_1_0(), currentNode); 
	    }
	    lv_value_1=ruleMQLquery 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQueryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_1, "MQLquery", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)')' 
    {
        createLeafNode(grammarAccess.getQueryExpressionAccess().getRightParenthesisKeyword_2(), null); 
    }
);





// Rule Operator
ruleOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'<' 
	{
        $current = grammarAccess.getOperatorAccess().getLessThenEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getLessThenEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'>' 
	{
        $current = grammarAccess.getOperatorAccess().getGreaterThenEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getGreaterThenEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'<=' 
	{
        $current = grammarAccess.getOperatorAccess().getLessEqualEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getLessEqualEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'>=' 
	{
        $current = grammarAccess.getOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3(), null); 
    }
)
    |(	'=' 
	{
        $current = grammarAccess.getOperatorAccess().getEqualEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getEqualEnumLiteralDeclaration_4(), null); 
    }
)
    |(	'!=' 
	{
        $current = grammarAccess.getOperatorAccess().getNotEqualEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getNotEqualEnumLiteralDeclaration_5(), null); 
    }
)
    |(	'like' 
	{
        $current = grammarAccess.getOperatorAccess().getLikeEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getLikeEnumLiteralDeclaration_6(), null); 
    }
)
    |(	'not like' 
	{
        $current = grammarAccess.getOperatorAccess().getNotLikeEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getNotLikeEnumLiteralDeclaration_7(), null); 
    }
)
    |(	'not in' 
	{
        $current = grammarAccess.getOperatorAccess().getNotInEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getNotInEnumLiteralDeclaration_8(), null); 
    }
)
    |(	'in' 
	{
        $current = grammarAccess.getOperatorAccess().getInEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getOperatorAccess().getInEnumLiteralDeclaration_9(), null); 
    }
));



RULE_SINGED_LONG : '-'? ('0'..'9')+;

RULE_SIGNED_DOUBLE : '-'? ('0'..'9')+ ('.' ('0'..'9')+)?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;


