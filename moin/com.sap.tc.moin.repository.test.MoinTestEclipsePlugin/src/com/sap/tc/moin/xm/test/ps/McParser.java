/**
 * Generated by the MOIN XM Generator Version 1.0 .
 */

package com.sap.tc.moin.xm.test.ps;

import com.sap.tc.moin.repository.xm.XmCustomException;
import com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler;
import com.sap.tc.moin.repository.xm.parser.NodeType;
import com.sap.tc.moin.repository.xm.parser.PModelElementHandle;
import com.sap.tc.moin.testcases.mc.logicalsystem.LogicalSystem;
import com.sap.tc.moin.testcases.mc.servicereferences.ServiceReferenceAssociation;

/**
 * Parser handler for XML documents valid to the XML schema"file:/C:/japro/moin_dev/moin/moin.test/dev/src/_com.sap.tc.moin.testcases.xm/libm/api/com/sap/tc/moin/xm/test/ps/mc.xsd"
 * .
 */
public class McParser extends com.sap.tc.moin.repository.xm.parser.XmParserHandlerAbstract {

    /** Prefix for the no-namespace. */
    protected static final java.lang.String PREFIX_ = ""; //$NON-NLS-1$

    /** Prefix for the namespace "http://www.sap.com/webas/2007/03/esoa/config". */
    protected static final java.lang.String PREFIX_ns1 = "ns1"; //$NON-NLS-1$

    /**
     * Prefix for the namespace
     * "http://www.sap.com/webas/2007/03/esoa/config/mc".
     */
    protected static final java.lang.String PREFIX_ns2 = "ns2"; //$NON-NLS-1$

    /**
     * Prefix for the namespace
     * "http://www.sap.com/webas/2007/03/esoa/config/system".
     */
    protected static final java.lang.String PREFIX_ns3 = "ns3"; //$NON-NLS-1$


    /* Local names of the XML elements. */
    protected static final java.lang.String ELEMENT_mass_configuration = "mass-configuration"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_logical_systems = "logical-systems"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_logical_system = "logical-system"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_name = "name"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_description = "description"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_origin = "origin"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_value = "value"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_key = "key"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_context_restriction = "context-restriction"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_reference = "reference"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_namespace = "namespace"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_logical_system_name = "logical-system-name"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_service_references = "service-references"; //$NON-NLS-1$


    /* Local names of the XML attributes. */
    protected static final java.lang.String ATTRIBUTE_type = "type"; //$NON-NLS-1$


    /**
     * Constructor. Calls the methods {@link #registerPrefixes()} and
     * {@link #registerHandlers()}.
     */
    public McParser( ) {

        super( );
        registerPrefixes( );
        registerHandlers( );
    }

    /**
     * Registers the prefixes for the namespaces. For each namespace in the
     * source XML document a prefix must be registered.
     */
    protected void registerPrefixes( ) {

        registerPrefixForNamespace( "http://www.sap.com/webas/2007/03/esoa/config", PREFIX_ns1 ); //$NON-NLS-1$
        registerPrefixForNamespace( "http://www.sap.com/webas/2007/03/esoa/config/mc", PREFIX_ns2 ); //$NON-NLS-1$
        registerPrefixForNamespace( "http://www.sap.com/webas/2007/03/esoa/config/system", PREFIX_ns3 ); //$NON-NLS-1$    


        // to test the calling of the following method, the generated code was modified
        this.getPrefixToNamespace( );
    }

    /**
     * Registers sub-handler instances to which this handler will dispatch the
     * SAX events. The qualified class name of the sub-handler classes are used
     * as registration IDs.
     * <p>
     * If you want to replace an instance with the registration ID
     * "com.sap.example.NodeTest" by your own implementation "MyNode" then you
     * have to call the method
     * {@link com.sap.tc.moin.repository.xm.parser.XmParserHandlerAbstract#registerHandler(java.lang.String, com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler)}
     * with id ="com.sap.example.NodeTest" and handler="new MyNode(this)".
     * <p>
     * If you want that a certain XML element with its sub-elements is not
     * mapped to MOIN entities, then you must unregister the corresponding
     * sub-handler; use the method
     * {@link com.sap.tc.moin.repository.xm.parser.XmParserHandlerAbstract#unregisterHandler(java.lang.String)}
     * .
     */
    protected void registerHandlers( ) {

        registerHandler( Ns2EMass_configuration.class.getName( ), new Ns2EMass_configuration( this ) );
        registerHandler( LNs2EMass_configuration_L_Ns2Logical_systems.class.getName( ), new LNs2EMass_configuration_L_Ns2Logical_systems( this ) );
        registerHandler( Ns3CLogicalSystem.class.getName( ), new Ns3CLogicalSystem( this ) );
        registerHandler( Ns3CClassificationSystemValue.class.getName( ), new Ns3CClassificationSystemValue( this ) );
        registerHandler( Ns1EService_references.class.getName( ), new Ns1EService_references( this ) );
        registerHandler( Ns1CServiceReference.class.getName( ), new Ns1CServiceReference( this ) );


        // the following lines have been added to the generated code in order to test the unregistration
        /**********************/
        String id = "id"; //$NON-NLS-1$
        final ComplexTypeHandler handler = new Ns2EMass_configuration( this );
        this.registerHandler( id, handler );
        final ComplexTypeHandler result = this.unregisterHandler( id );
        if ( result == handler ) {
            // o.k.
        } else {
            throw new IllegalStateException( "Could not unregister complex type handler" ); //$NON-NLS-1$
        }
        /**********************/
    }

    @Override
    public com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler getRootComplexTypeHandler( final java.lang.String localName, final java.lang.String prefix ) throws com.sap.tc.moin.repository.xm.XmException {

        // the lines marked between ******* are added to test the call of some methods
        /****************/
        final String localName1 = this.getStack( ).getLocalName( 1 );
        final String prefix1 = this.getStack( ).getPrefix( 1 );
        if ( !localName.equals( localName1 ) ) {
            throw new XmCustomException( "Local name " + localName1 + " is different from expected " + localName ); //$NON-NLS-1$ //$NON-NLS-2$
        }
        if ( !prefix.equals( prefix1 ) ) {
            throw new XmCustomException( "Prefix " + prefix1 + " is different from expected " + prefix ); //$NON-NLS-1$ //$NON-NLS-2$
        }

        if ( this.getStack( ).getIndex( 1 ) != this.getStack( ).getCurrentIndex( ) ) {
            throw new XmCustomException( "Indexes are different" ); //$NON-NLS-1$
        }

        final String uniquePath = this.getStack( ).getUniquePath( );
        final String expectedUniquePath = "/" + prefix + ":" + localName1; //$NON-NLS-1$ //$NON-NLS-2$
        if ( expectedUniquePath.equals( uniquePath ) ) {
            // o.k.   
        } else {
            throw new XmCustomException( "Expected unique path " + expectedUniquePath + " is not identical with calculated " + uniquePath ); //$NON-NLS-1$//$NON-NLS-2$
        }

        this.getStack( ).toString( );

        if ( !NodeType.Element.equals( this.getStack( ).getNodeType( ) ) ) {
            throw new XmCustomException( "Expected node type element is different from received " + this.getStack( ).getNodeType( ) ); //$NON-NLS-1$
        }

        this.getHelper( ).getPrefix2NamespaceMap( );
        this.getHelper( ).getNamespace2PrefixMap( );
        this.getHelper( ).getTypeInfoProvider( );
        /***************/


        if ( PREFIX_ns2.equals( prefix ) ) {
            if ( ELEMENT_mass_configuration.equals( localName ) ) {
                return getHandler( Ns2EMass_configuration.class.getName( ) );
            }

        }

        return null;
    }

    /* --------------------------- sub-handlers ---------------- */

    /**
     * Handler for global element declaration
     * "mass-configuration (http://www.sap.com/webas/2007/03/esoa/config/mc)".
     */
    public static class Ns2EMass_configuration extends com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler {

        public Ns2EMass_configuration( final com.sap.tc.moin.repository.xm.parser.XmParserHandlerAbstract parser ) {

            super( parser );
        }

        @Override
        public void elementStarted( final String value ) {

            //createOrGetModelElementAndPutToTopStackEntry( com.sap.webas.v2007.v03.esoa.config.mc.MassConfiguration.CLASS_DESCRIPTOR, getClass( ).getName( ) );
        }

        @Override
        public com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler getChild( final java.lang.String childName, final java.lang.String childPrefix ) {

            if ( PREFIX_ns2.equals( childPrefix ) ) {
                if ( ELEMENT_logical_systems.equals( childName ) ) {
                    return getHandler( LNs2EMass_configuration_L_Ns2Logical_systems.class.getName( ) );
                }

            }

            if ( PREFIX_ns1.equals( childPrefix ) ) {
                if ( ELEMENT_service_references.equals( childName ) ) {
                    return getHandler( Ns1EService_references.class.getName( ) );
                }

            }

            return null;
        }

        @Override
        public void childClosed( final com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler child, final String childPrefix, final String childLocalName ) throws com.sap.tc.moin.repository.xm.XmException {

//            if ( this.getChild( ELEMENT_logical_systems, PREFIX_ns2 ) == child ) {
//                createLink( child.getClass( ).getName( ), this.getClass( ).getName( ), com.sap.webas.v2007.v03.esoa.config.mc.MassConfigurationLogicalSystems.ASSOCIATION_DESCRIPTOR, "logicalSystems" ); //$NON-NLS-1$
//            } else if ( this.getChild( ELEMENT_service_references, PREFIX_ns1 ) == child ) {
//                createLink( child.getClass( ).getName( ), this.getClass( ).getName( ), com.sap.webas.v2007.v03.esoa.config.mc.MassConfigurationServiceReferences.ASSOCIATION_DESCRIPTOR, "serviceReferences" ); //$NON-NLS-1$
//            }

        }
    }

    /**
     * Handler for local element declaration
     * "logical-systems (http://www.sap.com/webas/2007/03/esoa/config/mc)".
     */
    public static class LNs2EMass_configuration_L_Ns2Logical_systems extends com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler {

        public LNs2EMass_configuration_L_Ns2Logical_systems( final com.sap.tc.moin.repository.xm.parser.XmParserHandlerAbstract parser ) {

            super( parser );
        }

        @Override
        public void elementStarted( final String value ) {

//            createOrGetModelElementAndPutToTopStackEntry( com.sap.tc.moin.testcases.mc.l.LogicalSystems.CLASS_DESCRIPTOR, getClass( ).getName( ) );
        }

        @Override
        public com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler getChild( final java.lang.String childName, final java.lang.String childPrefix ) {

            if ( PREFIX_ns2.equals( childPrefix ) ) {
                if ( ELEMENT_logical_system.equals( childName ) ) {
                    return getHandler( Ns3CLogicalSystem.class.getName( ) );
                }

            }

            return null;
        }

        @Override
        public void childClosed( final com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler child, final String childPrefix, final String childLocalName ) throws com.sap.tc.moin.repository.xm.XmException {

//            if ( this.getChild( ELEMENT_logical_system, PREFIX_ns2 ) == child ) {
//                createLink( child.getClass( ).getName( ), this.getClass( ).getName( ), com.sap.webas.v2007.v03.esoa.config.mc.LogicalSystemsLogicalSystem.ASSOCIATION_DESCRIPTOR, "logicalSystem" ); //$NON-NLS-1$
//            }
        }
    }

    /**
     * Handler for global complex type definition
     * "LogicalSystem (http://www.sap.com/webas/2007/03/esoa/config/system)".
     */
    public static class Ns3CLogicalSystem extends com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler {

        public Ns3CLogicalSystem( final com.sap.tc.moin.repository.xm.parser.XmParserHandlerAbstract parser ) {

            super( parser );
        }

        @Override
        public void elementStarted( final String value ) {

            //createOrGetModelElementAndPutToTopStackEntry( com.sap.tc.moin.testcases.mc.logicalsystem.LogicalSystem.CLASS_DESCRIPTOR, getClass( ).getName( ) );
        }

        @Override
        public com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler getChild( final java.lang.String childName, final java.lang.String childPrefix ) {

            if ( PREFIX_ns3.equals( childPrefix ) ) {
                if ( ELEMENT_value.equals( childName ) ) {
                    return getHandler( Ns3CClassificationSystemValue.class.getName( ) );
                }
                if ( ELEMENT_context_restriction.equals( childName ) ) {
                    return getHandler( Ns3CClassificationSystemValue.class.getName( ) );
                }

            }

            return null;
        }

        @Override
        public boolean addSimpleElementOrAttribute( final java.lang.String localName, final java.lang.String prefix, final com.sap.tc.moin.repository.xm.parser.NodeType type, final java.lang.String value ) throws com.sap.tc.moin.repository.xm.XmException {

            if ( com.sap.tc.moin.repository.xm.parser.NodeType.Element.equals( type ) ) {
                if ( PREFIX_ns3.equals( prefix ) ) {
                    if ( ELEMENT_name.equals( localName ) ) {
                        final PModelElementHandle logicalSystem = this.getHelper( ).getOrCreateModelElement( LogicalSystem.CLASS_DESCRIPTOR, value );
                        this.getStack( ).putModelElement( 2, this.getClass( ).getName( ), logicalSystem );
                        setOrAddAttributeValue( this.getClass( ).getName( ), com.sap.tc.moin.testcases.mc.logicalsystem.LogicalSystem.DESCRIPTORS.NAME( ), value );
                        return true;
                    }
                    if ( ELEMENT_description.equals( localName ) ) {
                        setOrAddAttributeValue( this.getClass( ).getName( ), com.sap.tc.moin.testcases.mc.logicalsystem.LogicalSystem.DESCRIPTORS.DESCRIPTION( ), value );
                        return true;
                    }
                    if ( ELEMENT_origin.equals( localName ) ) {
                        getParser( ).setOrAddAttributeValue( this.getClass( ).getName( ), com.sap.tc.moin.testcases.mc.logicalsystem.LogicalSystem.DESCRIPTORS.ORIGIN( ), value );
                        return true;
                    }
                }

            }
            return false;
        }

        @Override
        public void childClosed( final com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler childHandler, final java.lang.String childPrefix, final java.lang.String childLocalName ) throws com.sap.tc.moin.repository.xm.XmException {

            if ( PREFIX_ns3.equals( childPrefix ) ) {
                if ( ELEMENT_value.equals( childLocalName ) ) {
                    // createLink( childHandler.getClass( ).getName( ), this.getClass( ).getName( ), com.sap.tc.moin.testcases.mc.logicalsystem.SystemClassificationAssociation.ASSOCIATION_DESCRIPTOR, "systemClassification" ); //$NON-NLS-1$
                    final PModelElementHandle system = this.getStack( ).getModelElement( 2, this.getClass( ).getName( ) );
                    final PModelElementHandle value = this.getStack( ).getModelElement( childHandler.getClass( ).getName( ) );
                    this.getHelper( ).createLink( com.sap.tc.moin.testcases.mc.logicalsystem.SystemClassificationAssociation.ASSOCIATION_DESCRIPTOR, "system", value, system ); //$NON-NLS-1$
                } else if ( ELEMENT_context_restriction.equals( childLocalName ) ) {
                    createLink( childHandler.getClass( ).getName( ), this.getClass( ).getName( ), com.sap.tc.moin.testcases.mc.logicalsystem.ContextClassificationAssociation.ASSOCIATION_DESCRIPTOR, "contextRestrictionClassifications" ); //$NON-NLS-1$
                }
            }

        }
    }

    /**
     * Handler for global complex type definition"ClassificationSystemValue (http://www.sap.com/webas/2007/03/esoa/config/system)"
     * .
     */
    public static class Ns3CClassificationSystemValue extends com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler {

        public Ns3CClassificationSystemValue( final com.sap.tc.moin.repository.xm.parser.XmParserHandlerAbstract parser ) {

            super( parser );
        }

        @Override
        public void elementStarted( final String value ) {

            createOrGetModelElementAndPutToTopStackEntry( com.sap.tc.moin.testcases.mc.logicalsystem.ClassificationSystemValue.CLASS_DESCRIPTOR, getClass( ).getName( ) );
        }

        @Override
        public boolean addSimpleElementOrAttribute( final java.lang.String localName, final java.lang.String prefix, final com.sap.tc.moin.repository.xm.parser.NodeType type, final java.lang.String value ) throws com.sap.tc.moin.repository.xm.XmException {

            if ( com.sap.tc.moin.repository.xm.parser.NodeType.Element.equals( type ) ) {
                if ( PREFIX_ns3.equals( prefix ) ) {
                    if ( ELEMENT_key.equals( localName ) ) {
                        setOrAddAttributeValue( this.getClass( ).getName( ), com.sap.tc.moin.testcases.mc.logicalsystem.ClassificationSystemValue.DESCRIPTORS.KEY( ), value );
                        return true;
                    }
                    if ( ELEMENT_value.equals( localName ) ) {
                        setOrAddAttributeValue( this.getClass( ).getName( ), com.sap.tc.moin.testcases.mc.logicalsystem.ClassificationSystemValue.DESCRIPTORS.VALUE( ), value );
                        return true;
                    }
                }

            }
            return false;
        }
    }

    /**
     * Handler for global element declaration
     * "service-references (http://www.sap.com/webas/2007/03/esoa/config)".
     */
    public static class Ns1EService_references extends com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler {

        public Ns1EService_references( final com.sap.tc.moin.repository.xm.parser.XmParserHandlerAbstract parser ) {

            super( parser );
        }

        @Override
        public void elementStarted( final String value ) {

            //createOrGetModelElementAndPutToTopStackEntry( com.sap.webas.v2007.v03.esoa.config.ServiceReferences.CLASS_DESCRIPTOR, getClass( ).getName( ) );
        }

        @Override
        public com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler getChild( final java.lang.String childName, final java.lang.String childPrefix ) {

            if ( PREFIX_ns1.equals( childPrefix ) ) {
                if ( ELEMENT_reference.equals( childName ) ) {
                    return getHandler( Ns1CServiceReference.class.getName( ) );
                }

            }

            return null;
        }

        @Override
        public void childClosed( final com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler child, final String childPrefix, final String childLocalName ) throws com.sap.tc.moin.repository.xm.XmException {

//            if ( this.getChild( ELEMENT_reference, PREFIX_ns1 ) == child ) {
//                createLink( child.getClass( ).getName( ), this.getClass( ).getName( ), com.sap.webas.v2007.v03.esoa.config.ServiceReferencesServiceReference.ASSOCIATION_DESCRIPTOR, "serviceReference" ); //$NON-NLS-1$
//            }
        }
    }

    /**
     * Handler for global complex type definition
     * "ServiceReference (http://www.sap.com/webas/2007/03/esoa/config)".
     */
    public static class Ns1CServiceReference extends com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler {


        public Ns1CServiceReference( final com.sap.tc.moin.repository.xm.parser.XmParserHandlerAbstract parser ) {

            super( parser );
        }

        @Override
        public void elementStarted( final String value ) {

            createOrGetModelElementAndPutToTopStackEntry( com.sap.tc.moin.testcases.mc.servicereferences.ServiceReference.CLASS_DESCRIPTOR, getClass( ).getName( ) );
        }

        @Override
        public boolean addSimpleElementOrAttribute( final java.lang.String localName, final java.lang.String prefix, final com.sap.tc.moin.repository.xm.parser.NodeType type, final java.lang.String value ) throws com.sap.tc.moin.repository.xm.XmException {

            if ( com.sap.tc.moin.repository.xm.parser.NodeType.Element.equals( type ) ) {
                if ( PREFIX_ns1.equals( prefix ) ) {
                    if ( ELEMENT_name.equals( localName ) ) {
                        this.getStack( ).putProperty( 2, "name", value ); //$NON-NLS-1$
                        //setOrAddAttributeValue( this.getClass( ).getName( ), com.sap.tc.moin.testcases.mc.servicereferences.ServiceReference.DESCRIPTORS.NAME( ), value );
                        return true;
                    }
                    if ( ELEMENT_namespace.equals( localName ) ) {
                        setOrAddAttributeValue( this.getClass( ).getName( ), com.sap.tc.moin.testcases.mc.servicereferences.ServiceReference.DESCRIPTORS.NAME( ), value + "#" + this.getStack( ).getProperty( 2, "name" ) ); //$NON-NLS-1$ //$NON-NLS-2$
                        return true;
                    }
                    if ( ELEMENT_logical_system_name.equals( localName ) ) {
                        this.getHelper( ).createLink( ServiceReferenceAssociation.ASSOCIATION_DESCRIPTOR, "logicalSystem", this.getStack( ).getModelElement( 2, this.getClass( ).getName( ) ), LogicalSystem.CLASS_DESCRIPTOR, value ); //$NON-NLS-1$
                        //setOrAddAttributeValue( this.getClass( ).getName( ), com.sap.tc.moin.testcases.mc.servicereferences.ServiceReference.DESCRIPTORS.LOGICAL_SYSTEM_NAME( ), value );
                        return true;
                    }
                }

            }
            if ( com.sap.tc.moin.repository.xm.parser.NodeType.Attribute.equals( type ) ) {
                if ( PREFIX_.equals( prefix ) ) {
                    if ( ATTRIBUTE_type.equals( localName ) ) {
                        setOrAddAttributeValue( this.getClass( ).getName( ), com.sap.tc.moin.testcases.mc.servicereferences.ServiceReference.DESCRIPTORS.PORTTYPE_QNAME( ), value );
                        // the lines between ********** are added to test the call a method
                        /**************/
                        final String uniquePath = this.getStack( ).getUniquePath( );
                        if ( !uniquePath.endsWith( "@type" ) ) { //$NON-NLS-1$
                            throw new XmCustomException( "Unique path " + uniquePath + " does not end with \"@type\"" ); //$NON-NLS-1$//$NON-NLS-2$
                        }

                        this.getStack( ).putProperty( "property", "test" ); //$NON-NLS-1$ //$NON-NLS-2$
                        final String result = this.getStack( ).getProperty( "property" ); //$NON-NLS-1$
                        if ( !"test".equals( result ) ) { //$NON-NLS-1$
                            throw new XmCustomException( "Property \"" + result + "\" is different from \"test\"" ); //$NON-NLS-1$ //$NON-NLS-2$
                        }

                        /*************/
                        return true;
                    }
                }

            }
            return false;
        }
    }

}