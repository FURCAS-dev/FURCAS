/**
 * Generated by the MOIN XM Generator Version 1.0 .
 */

package com.sap.tc.moin.xm.test.ps;

/**
 * Parser handler for XML documents valid to the XML schema"file:/C:/japro/moin_dev/moin/moin.test/dev/src/_com.sap.tc.moin.testcases.xm/libm/api/com/sap/tc/moin/xm/test/ps/test.xsd"
 * .
 */
public class TestParser extends com.sap.tc.moin.repository.xm.parser.XmParserHandlerAbstract {

    /** Prefix for the no-namespace. */
    protected static final java.lang.String PREFIX_ = ""; //$NON-NLS-1$

    /** Prefix for the namespace "http://sap.com/moin/xm/test". */
    protected static final java.lang.String PREFIX_ns1 = "ns1"; //$NON-NLS-1$


    /* Local names of the XML elements. */
    protected static final java.lang.String ELEMENT_test = "test"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_boolean = "boolean"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_double = "double"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_float = "float"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_int = "int"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_long = "long"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_multiBoolean = "multiBoolean"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_multiDouble = "multiDouble"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_multiFloat = "multiFloat"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_multiInteger = "multiInteger"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_multiLong = "multiLong"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_multiString = "multiString"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_NonStringAndMultiAttributes = "NonStringAndMultiAttributes"; //$NON-NLS-1$


    /**
     * Constructor. Calls the methods {@link #registerPrefixes()} and
     * {@link #registerHandlers()}.
     */
    public TestParser( ) {

        super( );
        registerPrefixes( );
        registerHandlers( );
    }

    /**
     * Registers the prefixes for the namespaces. For each namespace in the
     * source XML document a prefix must be registered.
     */
    protected void registerPrefixes( ) {

        registerPrefixForNamespace( "http://sap.com/moin/xm/test", PREFIX_ns1 ); //$NON-NLS-1$    
    }

    /**
     * Registers sub-handler instances to which this handler will dispatch the
     * SAX events. The qualified class name of the sub-handler classes are used
     * as registration IDs.
     * <p>
     * If you want to replace an instance with the registration ID
     * "com.sap.example.NodeTest" by your own implementation "MyNode" then you
     * have to call the method
     * {@link com.sap.tc.moin.repository.xm.parser.XmParserHandlerAbstract#registerHandler(java.lang.String, com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler)}
     * with id ="com.sap.example.NodeTest" and handler="new MyNode(this)".
     * <p>
     * If you want that a certain XML element with its sub-elements is not
     * mapped to MOIN entities, then you must unregister the corresponding
     * sub-handler; use the method
     * {@link com.sap.tc.moin.repository.xm.parser.XmParserHandlerAbstract#unregisterHandler(java.lang.String)}
     * .
     */
    protected void registerHandlers( ) {

        registerHandler( Ns1ETest.class.getName( ), new Ns1ETest( this ) );
        registerHandler( Ns1ENonStringAndMultiAttributes.class.getName( ), new Ns1ENonStringAndMultiAttributes( this ) );
    }

    @Override
    public com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler getRootComplexTypeHandler( final java.lang.String localName, final java.lang.String prefix ) throws com.sap.tc.moin.repository.xm.XmException {

        if ( PREFIX_ns1.equals( prefix ) ) {
            if ( ELEMENT_test.equals( localName ) ) {
                return getHandler( Ns1ETest.class.getName( ) );
            }

        }
        return null;
    }

    /* --------------------------- sub-handlers ---------------- */

    /**
     * Handler for global element declaration
     * "test (http://sap.com/moin/xm/test)".
     */
    public static class Ns1ETest extends com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler {

        public Ns1ETest( final com.sap.tc.moin.repository.xm.parser.XmParserHandlerAbstract parser ) {

            super( parser );
        }

        @Override
        public void elementStarted( final String value ) {

            // createOrGetModelElementAndPutToTopStackEntry( com.sap.tc.moin.testcases.mc.test..CLASS_DESCRIPTOR, getClass( ).getName( ) );
        }

        @Override
        public com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler getChild( final java.lang.String childName, final java.lang.String childPrefix ) {

            if ( PREFIX_ns1.equals( childPrefix ) ) {
                if ( ELEMENT_NonStringAndMultiAttributes.equals( childName ) ) {
                    return getHandler( Ns1ENonStringAndMultiAttributes.class.getName( ) );
                }

            }

            return null;
        }

        @Override
        public void childClosed( final com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler child, final java.lang.String childPrefix, final java.lang.String childLocalName ) throws com.sap.tc.moin.repository.xm.XmException {

//            if ( this.getChild( ELEMENT_NonStringAndMultiAttributes, PREFIX_ns1 ) == child ) {
//                createLink( child.getClass( ).getName( ), this.getClass( ).getName( ), com.sap.moin.xm.test.TestNonStringAndMultiAttributes.ASSOCIATION_DESCRIPTOR, "nonStringAndMultiAttributes" ); //$NON-NLS-1$
//            }
        }
    }

    /**
     * Handler for global element declaration
     * "NonStringAndMultiAttributes (http://sap.com/moin/xm/test)".
     */
    public static class Ns1ENonStringAndMultiAttributes extends com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler {

        public Ns1ENonStringAndMultiAttributes( final com.sap.tc.moin.repository.xm.parser.XmParserHandlerAbstract parser ) {

            super( parser );
        }

        @Override
        public void elementStarted( final String value ) {

            // generated code is changed for testing the logical key creation, there is only one instance
            createOrGetModelElementAndPutToTopStackEntry( com.sap.tc.moin.testcases.mc.test.NonStringAndMultiAttributes.CLASS_DESCRIPTOR, getClass( ).getName( ), "instance" ); //$NON-NLS-1$
        }

        @Override
        public boolean addSimpleElementOrAttribute( final java.lang.String localName, final java.lang.String prefix, final com.sap.tc.moin.repository.xm.parser.NodeType type, final java.lang.String value ) throws com.sap.tc.moin.repository.xm.XmException {

            if ( com.sap.tc.moin.repository.xm.parser.NodeType.Element.equals( type ) ) {
                if ( PREFIX_ns1.equals( prefix ) ) {
                    if ( ELEMENT_boolean.equals( localName ) ) {
                        setOrAddAttributeValue( this.getClass( ).getName( ), com.sap.tc.moin.testcases.mc.test.NonStringAndMultiAttributes.DESCRIPTORS.A_BOOLEAN( ), value );
                        return true;
                    }
                    if ( ELEMENT_double.equals( localName ) ) {
                        setOrAddAttributeValue( this.getClass( ).getName( ), com.sap.tc.moin.testcases.mc.test.NonStringAndMultiAttributes.DESCRIPTORS.A_DOUBLE( ), value );
                        return true;
                    }
                    if ( ELEMENT_float.equals( localName ) ) {
                        setOrAddAttributeValue( this.getClass( ).getName( ), com.sap.tc.moin.testcases.mc.test.NonStringAndMultiAttributes.DESCRIPTORS.A_FLOAT( ), value );
                        return true;
                    }
                    if ( ELEMENT_int.equals( localName ) ) {
                        setOrAddAttributeValue( this.getClass( ).getName( ), com.sap.tc.moin.testcases.mc.test.NonStringAndMultiAttributes.DESCRIPTORS.A_INTEGER( ), value );
                        return true;
                    }
                    if ( ELEMENT_long.equals( localName ) ) {
                        setOrAddAttributeValue( this.getClass( ).getName( ), com.sap.tc.moin.testcases.mc.test.NonStringAndMultiAttributes.DESCRIPTORS.A_LONG( ), value );
                        return true;
                    }
                    if ( ELEMENT_multiBoolean.equals( localName ) ) {
                        setOrAddAttributeValue( this.getClass( ).getName( ), com.sap.tc.moin.testcases.mc.test.NonStringAndMultiAttributes.DESCRIPTORS.MULTI_BOOLEAN( ), value );
                        return true;
                    }
                    if ( ELEMENT_multiDouble.equals( localName ) ) {
                        setOrAddAttributeValue( this.getClass( ).getName( ), com.sap.tc.moin.testcases.mc.test.NonStringAndMultiAttributes.DESCRIPTORS.MULTI_DOUBLE( ), value );
                        return true;
                    }
                    if ( ELEMENT_multiFloat.equals( localName ) ) {
                        setOrAddAttributeValue( this.getClass( ).getName( ), com.sap.tc.moin.testcases.mc.test.NonStringAndMultiAttributes.DESCRIPTORS.MULTI_FLOAT( ), value );
                        return true;
                    }
                    if ( ELEMENT_multiInteger.equals( localName ) ) {
                        setOrAddAttributeValue( this.getClass( ).getName( ), com.sap.tc.moin.testcases.mc.test.NonStringAndMultiAttributes.DESCRIPTORS.MULTI_INTEGER( ), value );
                        return true;
                    }
                    if ( ELEMENT_multiLong.equals( localName ) ) {
                        setOrAddAttributeValue( this.getClass( ).getName( ), com.sap.tc.moin.testcases.mc.test.NonStringAndMultiAttributes.DESCRIPTORS.MULTI_LONG( ), value );
                        return true;
                    }
                    if ( ELEMENT_multiString.equals( localName ) ) {
                        setOrAddAttributeValue( this.getClass( ).getName( ), com.sap.tc.moin.testcases.mc.test.NonStringAndMultiAttributes.DESCRIPTORS.MULTI_STRING( ), value );
                        return true;
                    }
                }

            }
            return false;
        }
    }

}