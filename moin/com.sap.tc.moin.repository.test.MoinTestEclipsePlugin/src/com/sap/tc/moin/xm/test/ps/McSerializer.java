/**
 * Generated by the MOIN XM Generator Version 1.0 .
 */

package com.sap.tc.moin.xm.test.ps;

import java.util.Collection;

import com.sap.tc.moin.repository.MRI;
import com.sap.tc.moin.repository.xm.XmCustomException;
import com.sap.tc.moin.repository.xm.serializer.SModelElementHandle;
import com.sap.tc.moin.testcases.mc.logicalsystem.ClassificationSystemValue;
import com.sap.tc.moin.testcases.mc.logicalsystem.ContextClassificationAssociation;
import com.sap.tc.moin.testcases.mc.logicalsystem.LogicalSystem;
import com.sap.tc.moin.testcases.mc.logicalsystem.SystemClassificationAssociation;
import com.sap.tc.moin.testcases.mc.servicereferences.ServiceReference;
import com.sap.tc.moin.testcases.mc.servicereferences.ServiceReferenceAssociation;

/**
 * XM Serializer for XML documents which are valid to the XML schema"file:/C:/japro/moin_dev/moin/moin.test/dev/src/_com.sap.tc.moin.testcases.xm/libm/api/com/sap/tc/moin/xm/test/ps/mc.xsd"
 * .
 */
public class McSerializer extends com.sap.tc.moin.repository.xm.serializer.XmCustomSerializerAbstract {

    /** Prefix for the no-namespace. */
    protected static final java.lang.String PREFIX_ = ""; //$NON-NLS-1$

    /** Prefix for the namespace "http://www.sap.com/webas/2007/03/esoa/config". */
    protected static final java.lang.String PREFIX_ns1 = "ns1"; //$NON-NLS-1$

    /**
     * Prefix for the namespace
     * "http://www.sap.com/webas/2007/03/esoa/config/mc".
     */
    protected static final java.lang.String PREFIX_ns2 = "ns2"; //$NON-NLS-1$

    /**
     * Prefix for the namespace
     * "http://www.sap.com/webas/2007/03/esoa/config/system".
     */
    protected static final java.lang.String PREFIX_ns3 = "ns3"; //$NON-NLS-1$


    /* Qualified names of the XML elements. */
    protected static final java.lang.String ELEMENT_ns2_mass_configuration = PREFIX_ns2 + ":mass-configuration"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns2_logical_systems = PREFIX_ns2 + ":logical-systems"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns2_logical_system = PREFIX_ns2 + ":logical-system"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns3_name = PREFIX_ns3 + ":name"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns3_description = PREFIX_ns3 + ":description"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns3_origin = PREFIX_ns3 + ":origin"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns3_value = PREFIX_ns3 + ":value"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns3_key = PREFIX_ns3 + ":key"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns3_context_restriction = PREFIX_ns3 + ":context-restriction"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns1_reference = PREFIX_ns1 + ":reference"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns1_name = PREFIX_ns1 + ":name"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns1_namespace = PREFIX_ns1 + ":namespace"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns1_logical_system_name = PREFIX_ns1 + ":logical-system-name"; //$NON-NLS-1$

    protected static final java.lang.String ELEMENT_ns1_service_references = PREFIX_ns1 + ":service-references"; //$NON-NLS-1$


    /* Qualified names of the XML attributes. */
    protected static final java.lang.String ATTRIBUTE__type = PREFIX_ + "type"; //$NON-NLS-1$


    /**
     * Constructor. Calls the method {@link #registerPrefixes()}.
     */
    public McSerializer( ) {

        super( );
        registerPrefixes( );
    }

    /**
     * Registers the prefixes for the namespaces. For each namespace a prefix
     * must be registered. The registered prefixe definitions are written to the
     * output stream by the first call of the method
     * {@link #startTag(java.lang.String)}.
     */
    protected void registerPrefixes( ) {

        registerPrefixForNamespace( "http://www.sap.com/webas/2007/03/esoa/config", PREFIX_ns1 ); //$NON-NLS-1$
        registerPrefixForNamespace( "http://www.sap.com/webas/2007/03/esoa/config/mc", PREFIX_ns2 ); //$NON-NLS-1$
        registerPrefixForNamespace( "http://www.sap.com/webas/2007/03/esoa/config/system", PREFIX_ns3 ); //$NON-NLS-1$    

        // the following lines where added to the generated code to test a method call
        this.getPrefixToNamesapceMap( );

    }

    @Override
    protected void execute( ) throws com.sap.tc.moin.repository.xm.XmException {

//        for ( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle modelElement : getModelElements( com.sap.webas.v2007.v03.esoa.config.mc.MassConfiguration.CLASS_DESCRIPTOR ) ) {
        startTag( ELEMENT_ns2_mass_configuration );
        // the following lines between ******* are added to test the call of a method
        /************/
        if ( !ELEMENT_ns2_mass_configuration.equals( this.getHelper( ).getOutputHandler( ).getCurTag( ) ) ) {
            throw new XmCustomException( "Current tag " + this.getHelper( ).getOutputHandler( ).getCurTag( ) + " is not equal to " + ELEMENT_ns2_mass_configuration ); //$NON-NLS-1$//$NON-NLS-2$
        }
        final String currentPath = this.getHelper( ).getOutputHandler( ).getCurPath( );
        final String expectedPath = "/" + ELEMENT_ns2_mass_configuration + '/'; //$NON-NLS-1$
        if ( !expectedPath.equals( currentPath ) ) {
            throw new XmCustomException( "Expected path \"" + expectedPath + "\" is not identical with received \"" + currentPath + "\"" ); //$NON-NLS-1$ //$NON-NLS-2$//$NON-NLS-3$
        }
        this.getHelper( ).getPri( );
        /***********/
        writeNs2EMass_configuration( null );
        closeTag( );
//        }
    }

    /**
     * Writes the content model of the global element declaration
     * "mass-configuration (http://www.sap.com/webas/2007/03/esoa/config/mc)" to
     * the output stream.
     * 
     * @param modelElement model element from which attribute values or links
     * are read
     * @throws com.sap.tc.moin.repository.xm.XmException can be used for error
     * handling, this implementation does not throw such an exception
     * @throws NullpointerException if the parameter is <code>null</code>
     */
    protected void writeNs2EMass_configuration( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle modelElement ) throws com.sap.tc.moin.repository.xm.XmException {

//        for ( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle linkedModelElement : getLinks( modelElement, com.sap.webas.v2007.v03.esoa.config.mc.MassConfigurationLogicalSystems.ASSOCIATION_DESCRIPTOR, "logicalSystems" ) ) { //$NON-NLS-1$
        Collection<SModelElementHandle> systems = getModelElements( LogicalSystem.CLASS_DESCRIPTOR );
        if ( systems != null && systems.size( ) > 0 ) {
            // the following line  between ******** was added to test the call of methods
            /****************/
            final SModelElementHandle handle = systems.iterator( ).next( );
            final MRI mri = handle.getMri( );
            if ( !handle.equals( this.getHelper( ).getModelElement( mri ) ) ) {
                throw new XmCustomException( "model elements are not equal" ); //$NON-NLS-1$
            }
            if ( !handle.equals( this.getHelper( ).getModelElement( mri.getLri( ) ) ) ) {
                throw new XmCustomException( "model elements are not equal" ); //$NON-NLS-1$
            }
            /****************/
            startTag( ELEMENT_ns2_logical_systems );
            writeLNs2EMass_configuration_L_Ns2Logical_systems( null );
            closeTag( );
        }
//        }
//        for ( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle linkedModelElement : getLinks( modelElement, com.sap.webas.v2007.v03.esoa.config.mc.MassConfigurationServiceReferences.ASSOCIATION_DESCRIPTOR, "serviceReferences" ) ) { //$NON-NLS-1$
        Collection<SModelElementHandle> references = getModelElements( ServiceReference.CLASS_DESCRIPTOR );
        if ( references != null && references.size( ) > 0 ) {
            startTag( ELEMENT_ns1_service_references );
            writeNs1EService_references( null );
            closeTag( );
        }
//        }
    }

    /**
     * Writes the content model of the local element declaration
     * "logical-systems (http://www.sap.com/webas/2007/03/esoa/config/mc)" to
     * the output stream.
     * 
     * @param modelElement model element from which attribute values or links
     * are read
     * @throws com.sap.tc.moin.repository.xm.XmException can be used for error
     * handling, this implementation does not throw such an exception
     * @throws NullpointerException if the parameter is <code>null</code>
     */
    protected void writeLNs2EMass_configuration_L_Ns2Logical_systems( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle modelElement ) throws com.sap.tc.moin.repository.xm.XmException {

        for ( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle linkedModelElement : getModelElements( LogicalSystem.CLASS_DESCRIPTOR ) ) {
            startTag( ELEMENT_ns2_logical_system );
            writeNs3CLogicalSystem( linkedModelElement );
            closeTag( );
            // the following lines marked with ******** were added to test the call of some methods
            /**************************/
            final String attributeValue = (String) linkedModelElement.getAttribute( LogicalSystem.DESCRIPTORS.NAME( ) );
            final SModelElementHandle sHandle = this.getHelper( ).getModelElement( LogicalSystem.CLASS_DESCRIPTOR, attributeValue );
            if ( !linkedModelElement.equals( sHandle ) ) {
                throw new XmCustomException( "model elements are different" ); //$NON-NLS-1$
            }
            /*************************/
        }
    }

    /**
     * Writes the content model of the global complex type definition
     * "LogicalSystem (http://www.sap.com/webas/2007/03/esoa/config/system)" to
     * the output stream.
     * 
     * @param modelElement model element from which attribute values or links
     * are read
     * @throws com.sap.tc.moin.repository.xm.XmException can be used for error
     * handling, this implementation does not throw such an exception
     * @throws NullpointerException if the parameter is <code>null</code>
     */
    protected void writeNs3CLogicalSystem( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle modelElement ) throws com.sap.tc.moin.repository.xm.XmException {

        addElement( ELEMENT_ns3_name, modelElement, LogicalSystem.DESCRIPTORS.NAME( ) );
        addElement( ELEMENT_ns3_description, modelElement, LogicalSystem.DESCRIPTORS.DESCRIPTION( ) );
        addElement( ELEMENT_ns3_origin, modelElement, LogicalSystem.DESCRIPTORS.ORIGIN( ) );
        for ( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle linkedModelElement : getLinks( modelElement, SystemClassificationAssociation.ASSOCIATION_DESCRIPTOR, "systemClassification" ) ) { //$NON-NLS-1$
            startTag( ELEMENT_ns3_value );
            writeNs3CClassificationSystemValue( linkedModelElement );
            closeTag( );
        }
        for ( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle linkedModelElement : getLinks( modelElement, ContextClassificationAssociation.ASSOCIATION_DESCRIPTOR, "contextRestrictionClassifications" ) ) { //$NON-NLS-1$
            startTag( ELEMENT_ns3_context_restriction );
            writeNs3CClassificationSystemValue( linkedModelElement );
            closeTag( );
        }
    }

    /**
     * Writes the content model of the global complex type definition"ClassificationSystemValue (http://www.sap.com/webas/2007/03/esoa/config/system)"
     * to the output stream.
     * 
     * @param modelElement model element from which attribute values or links
     * are read
     * @throws com.sap.tc.moin.repository.xm.XmException can be used for error
     * handling, this implementation does not throw such an exception
     * @throws NullpointerException if the parameter is <code>null</code>
     */
    protected void writeNs3CClassificationSystemValue( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle modelElement ) throws com.sap.tc.moin.repository.xm.XmException {


        addElement( ELEMENT_ns3_key, modelElement, ClassificationSystemValue.DESCRIPTORS.KEY( ) );
        addElement( ELEMENT_ns3_value, modelElement, ClassificationSystemValue.DESCRIPTORS.VALUE( ) );

        // the following lines was added to the generated code to test the call of a method
        this.getHelper( ).getOutputHandler( ).getCurPath( );
    }

    /**
     * Writes the content model of the global element declaration
     * "service-references (http://www.sap.com/webas/2007/03/esoa/config)" to
     * the output stream.
     * 
     * @param modelElement model element from which attribute values or links
     * are read
     * @throws com.sap.tc.moin.repository.xm.XmException can be used for error
     * handling, this implementation does not throw such an exception
     * @throws NullpointerException if the parameter is <code>null</code>
     */
    protected void writeNs1EService_references( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle modelElement ) throws com.sap.tc.moin.repository.xm.XmException {

        for ( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle linkedModelElement : getModelElements( ServiceReference.CLASS_DESCRIPTOR ) ) {
            startTag( ELEMENT_ns1_reference );
            writeNs1CServiceReference( linkedModelElement );
            closeTag( );
        }
    }

    /**
     * Writes the content model of the global complex type definition
     * "ServiceReference (http://www.sap.com/webas/2007/03/esoa/config)" to the
     * output stream.
     * 
     * @param modelElement model element from which attribute values or links
     * are read
     * @throws com.sap.tc.moin.repository.xm.XmException can be used for error
     * handling, this implementation does not throw such an exception
     * @throws NullpointerException if the parameter is <code>null</code>
     */
    protected void writeNs1CServiceReference( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle modelElement ) throws com.sap.tc.moin.repository.xm.XmException {

        final String concatName = (String) modelElement.getAttribute( ServiceReference.DESCRIPTORS.NAME( ) );
        final String[] namespaceName = concatName.split( "#" ); //$NON-NLS-1$

        addAttribute( ATTRIBUTE__type, modelElement, ServiceReference.DESCRIPTORS.PORTTYPE_QNAME( ) );
        this.getHelper( ).getOutputHandler( ).addElement( ELEMENT_ns1_name, namespaceName[1] );
        this.getHelper( ).getOutputHandler( ).addElement( ELEMENT_ns1_namespace, namespaceName[0] );
        for ( SModelElementHandle logicalSystem : this.getLinks( modelElement, ServiceReferenceAssociation.ASSOCIATION_DESCRIPTOR, "logicalSystem" ) ) { //$NON-NLS-1$
            this.getHelper( ).getOutputHandler( ).addElement( ELEMENT_ns1_logical_system_name, logicalSystem.getAttribute( LogicalSystem.DESCRIPTORS.NAME( ) ) );
        }
        //addElement( ELEMENT_ns1_name, modelElement, com.sap.webas.v2007.v03.esoa.config.ServiceReference.DESCRIPTORS.NAME( ) );
        //addElement( ELEMENT_ns1_namespace, modelElement, com.sap.webas.v2007.v03.esoa.config.ServiceReference.DESCRIPTORS.NAMESPACE( ) );       
        //addElement( ELEMENT_ns1_logical_system_name, modelElement, com.sap.webas.v2007.v03.esoa.config.ServiceReference.DESCRIPTORS.LOGICAL_SYSTEM_NAME( ) );
    }


}