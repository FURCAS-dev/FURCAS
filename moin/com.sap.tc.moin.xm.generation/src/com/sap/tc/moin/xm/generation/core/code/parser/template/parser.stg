group parser;

/**
 * @param template com.sap.tc.moin.xm.core.generation.parser.template.XmParserHandlerTemplate
 */
parser(template) ::= <<
$template:javaHeader()$$\n$
/**
 * Parser handler for XML documents valid to the XML schema "$template.SchemaName$".
 */
$template:javaPublicClassHeader()$ {

     /** Prefix for the no-namespace.  */
    protected static final java.lang.String PREFIX_ = ""; //\$NON-NLS-1\$
    
$if (template.Prefixes)$
    $template.prefixes:prefixConstant(); separator="\n"$
    $\n$
$endif$
$if (template.LocalElementNames)$
    /* Local names of the XML elements. */
    $template.LocalElementNames:localElementNameConstant(); separator="\n"$
    $\n$
$endif$
$if (template.LocalAttributeNames)$
    /*Local names of the XML attributes. */
    $template.LocalAttributeNames:localAttributeNameConstant(); separator="\n"$
    $\n$
$endif$
    $constructor(template.JavaName)$

    $registerPrefixes(template.prefixes)$

    $registerHandlers(template.SubHandlers)$
    
    $rootElementStarted(template.QualifiedRootDocumentJmiClassName)$
    
$if (template.RootElements)$
    $rootHandler(template.RootElements)$
    $\n$
$endif$
$if (template.XmlSimpleRootElementToMoinAttributeName)$
    $addSimpleRootElement(template)$
    $\n$
$endif$
$if (template.ChildAssociations)$
    $rootElementClosed(template)$
    $\n$
$endif$
        
    /* --------------------------- sub-handlers ---------------- */
    
$if (template.SubHandlers)$
    $template.SubHandlers:subHandlers(); separator="\n"$
$endif$  

}
>>

/**
 * @param template com.sap.tc.moin.xm.generation.core.code.util.PrefixAndNamespace
 */
prefixConstant(template) ::=<<
/** Prefix for the namespace "$template.Namespace$". */
protected static final java.lang.String PREFIX_$template.Prefix$ = "$template.Prefix$"; //\$NON-NLS-1\$$\n$
>>

/**
 * @param template com.sap.tc.moin.xm.generation.core.code.parser.template.JavaNameAndName
 */
localElementNameConstant(template) ::=<<
protected static final java.lang.String ELEMENT_$template.JavaName$ = "$template.Name$"; //\$NON-NLS-1\$$\n$
>>

/**
 * @param template com.sap.tc.moin.xm.generation.core.code.parser.template.JavaNameAndName
 */
localAttributeNameConstant(template) ::=<<
protected static final java.lang.String ATTRIBUTE_$template.JavaName$ = "$template.Name$"; //\$NON-NLS-1\$$\n$
>>

constructor(template) ::= <<
/**
 * Constructor. Calls the methods {@link #registerPrefixes()} and
 * {@link #registerHandlers()}.
 */
public $template$( ) {

    super();
    registerPrefixes( );
    registerHandlers( );   
}
>>

registerPrefixes(template) ::= <<
/**
 * Registers the prefixes for the namespaces. For each namespace in the
 * source XML document a prefix must be registered.
 */
protected void registerPrefixes( ) {
$if (template)$

    $template:registerPrefix(); separator="\n"$
$endif$    
}
>>

/**
 * @param template com.sap.tc.moin.xm.generation.core.code.util.PrefixAndNamespace
 */
registerPrefix(template) ::= <<
registerPrefixForNamespace( "$template.namespace$", PREFIX_$template.prefix$ ); //\$NON-NLS-1\$
>>

registerHandlers(template) ::= <<
/**
 * Registers sub-handler instances to which this handler will dispatch the
 * SAX events. The qualified class name of the sub-handler classes are used
 * as registration IDs.
 * <p>
 * If you want to replace an instance with the registration ID
 * "com.sap.example.NodeTest" by your own implementation "MyNode" then you
 * have to call the method
 * {@link com.sap.tc.moin.repository.xm.parser.XmParserHandlerAbstract#registerHandler(java.lang.String, com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler)}
 * with id ="com.sap.example.NodeTest" and handler="new MyNode(this)".
 * <p>
 * If you want that a certain XML element with its sub-elements is not
 * mapped to MOIN entities, then you must unregister the corresponding
 * sub-handler; use the method
 * {@link com.sap.tc.moin.repository.xm.parser.XmParserHandlerAbstract#unregisterHandler(java.lang.String)} .
 */
protected void registerHandlers( ) {
$if (template)$

    $template:registerHandler(); separator="\n"$
$endif$   
}
>>

/**
 * @param template com.sap.tc.moin.xm.generation.core.code.parser.template.XmHandlerTemplate
 */
registerHandler(template) ::=<<
registerHandler($template.ClassName$.class.getName( ), new $template.ClassName$( this ) );
>>

rootHandler(template) ::= <<
@Override
protected com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler getRootComplexTypeHandler( final java.lang.String localName, final java.lang.String prefix ) throws com.sap.tc.moin.repository.xm.XmException {
    $if (template)$ 
    $template:rootHandlerPrefixCondition()$
    $endif$ 
    return null;
}
>>


/**
 * @param template com.sap.tc.moin.xm.generation.core.code.parser.template.PrefixToElementHandlers
 */
rootHandlerPrefixCondition(template) ::=<<
if ( PREFIX_$template.prefix$.equals( prefix ) ) {
    $template.Elements:rootHandlerElementCondition()$
}$\n$
>>


/**
 * @param template com.sap.tc.moin.xm.generation.core.code.parser.template.ElementNameAndHandlerClassName
 */
rootHandlerElementCondition(template) ::=<<
if ( ELEMENT_$template.ElementLocalName$.equals( localName ) ) {
    return getHandler( $template.HandlerClassName$.class.getName( ) );
}$\n$
>>

/**
 * @param template com.sap.tc.moin.xm.generation.core.code.parser.template.XmHandlerTemplate
 */
subHandlers(template) ::=<<
/**
 * Handler for $template.XmlEntityQName$.
 */
public static class $template.className$ extends com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler {

    public $template.className$( final com.sap.tc.moin.repository.xm.parser.XmParserHandlerAbstract parser ) {

        super( parser );
    }
    $if (template.QualifiedJavaClassName)$ 
    $elementStarted(template)$
    $endif$
    $if (template.Childs)$ 
    $getChilds(template)$
    $endif$
    $if (template.AddSimpleElementOrAttribute)$ 
    $addSimpleElementOrAttribute(template)$
    $endif$
    $if (template.ChildAssociations)$ 
    $childClosed(template)$
    $endif$
}
>>

/**
 * @param template com.sap.tc.moin.xm.generation.core.code.parser.template.XmHandlerTemplate
 */
elementStarted(template) ::=<<
@Override
public void elementStarted(final java.lang.String value ) {
$if (template.SimpleContent)$ 
    $elementStartedSimpleContent(template)$$\n$
$else$

    createOrGetModelElementAndPutToTopStackEntry( $template.QualifiedJavaClassName$.CLASS_DESCRIPTOR, getClass( ).getName( ) );$\n$
$endif$
}
>>


/**
 * @param template java.lang.String
 */
rootElementStarted(template) ::=<<
@Override
protected void rootElementStarted( ) {

    createOrGetModelElementAndPutToTopStackEntry( $template$.CLASS_DESCRIPTOR, getClass( ).getName( ) );
}
>>


/**
 * @param template com.sap.tc.moin.xm.generation.core.code.parser.template.XmHandlerTemplate
 */
elementStartedSimpleContent(template) ::=<<
final com.sap.tc.moin.repository.xm.parser.PModelElementHandle modelElement = createOrGetModelElementAndPutToTopStackEntry( $template.QualifiedJavaClassName$.CLASS_DESCRIPTOR, getClass( ).getName( ) );
// simple content
modelElement.setOrAddAttribute($template.QualifiedJavaClassName$.DESCRIPTORS.VALUE(), value);
>>





/**
 * @param template com.sap.tc.moin.xm.generation.core.code.parser.template.XmHandlerTemplate
 */
getChilds(template) ::=<<
@Override
public com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler getChild( final java.lang.String childName, final java.lang.String childPrefix ) {
    
    $template.Childs:prefixOfChilds(); separator="\n"$
    return null;
}
>>

/**
 * @param template com.sap.tc.moin.xm.generation.core.code.parser.template.PrefixToElementHandlers
 */
prefixOfChilds(template) ::=<<
if ( PREFIX_$template.prefix$.equals( childPrefix ) ) {
    $template.Elements:getHandlerForElement()$
}$\n$
>>

/**
 * @param template com.sap.tc.moin.xm.generation.core.code.parser.template.ElementNameAndHandlerClassName
 */
getHandlerForElement(template) ::=<<
if ( ELEMENT_$template.ElementLocalName$.equals( childName ) ) {
    return getHandler( $template.handlerClassName$.class.getName( ) );
}$\n$
>>

/**
 * @param template com.sap.tc.moin.xm.generation.core.code.parser.template.XmHandlerTemplate
 */
addSimpleElementOrAttribute(template) ::=<<
@Override
public boolean addSimpleElementOrAttribute( final java.lang.String localName, final java.lang.String prefix, final com.sap.tc.moin.repository.xm.parser.NodeType type, final java.lang.String value ) throws com.sap.tc.moin.repository.xm.XmException{

$if (template.XmlSimpleElementToMoinAttributeNameMap)$
    if ( com.sap.tc.moin.repository.xm.parser.NodeType.Element.equals( type ) ) {
        $template.XmlSimpleElementToMoinAttributeNameMap:prefixToSimpleXmlElment(); separator="\n"$
    }$\n$
$endif$
$if (template.XmlAttributeToMoinAttributeNameMap)$
    if ( com.sap.tc.moin.repository.xm.parser.NodeType.Attribute.equals( type ) ) {
        $template.XmlAttributeToMoinAttributeNameMap:prefixToXmlAttribute(); separator="\n"$     
    }$\n$
$endif$
    return false;
}	
>>

/**
 * @param template com.sap.tc.moin.xm.generation.core.code.parser.template.XmParserHandlerTemplate
 */
addSimpleRootElement(template) ::=<<
@Override
protected boolean addSimpleRootElement( final java.lang.String localName, final java.lang.String prefix, final java.lang.String value ) throws com.sap.tc.moin.repository.xm.XmException{

    $template.XmlSimpleRootElementToMoinAttributeName:prefixToSimpleXmlElment(); separator="\n"$
    return false;
}	
>>


/**
 * @param template com.sap.tc.moin.xm.generation.core.code.parser.template.PrefixToSimpleElementOrAttribute
 */
prefixToSimpleXmlElment(template) ::=<<
if ( PREFIX_$template.prefix$.equals( prefix ) ) {
   $template.moinAttributes:xmlElementToMoinAttribute();separator="\n"$  
}$\n$	
>>

/**
 * @param template com.sap.tc.moin.xm.generation.core.code.parser.template.PrefixToSimpleElementOrAttribute
 */
prefixToXmlAttribute(template) ::=<<
if ( PREFIX_$template.prefix$.equals( prefix ) ) {
   $template.moinAttributes:xmlAttributeToMoinAttribute();separator="\n"$  
}$\n$	
>>

/**
 * @param template com.sap.tc.moin.xm.generation.core.code.parser.template.XmlElementOrAttributeNameToMoinAttributeName
 */
xmlElementToMoinAttribute(template) ::=<<
if ( ELEMENT_$template.localXmlElementOrAttributeName$.equals( localName ) ) {
    $setOrAddAttributeValue(template)$
}
>>

/**
 * @param template com.sap.tc.moin.xm.generation.core.code.parser.template.XmlElementOrAttributeNameToMoinAttributeName
 */
xmlAttributeToMoinAttribute(template) ::=<<
if ( ATTRIBUTE_$template.localXmlElementOrAttributeName$.equals( localName ) ) {
    $setOrAddAttributeValue(template)$
}
>>

/**
 * @param template com.sap.tc.moin.xm.generation.core.code.parser.template.XmlElementOrAttributeNameToMoinAttributeName
 */
setOrAddAttributeValue(template) ::=<<
$if (template.ForRootElement)$
setOrAddAttributeValue( getStack( ).getModelElement( getClass( ).getName( ) ), $template.QualifiedJavaClassName$.DESCRIPTORS.$template.UpperCaseMoinAttributeName$( ), value );
return true;
$else$
setOrAddAttributeValue( getClass( ).getName( ), $template.QualifiedJavaClassName$.DESCRIPTORS.$template.UpperCaseMoinAttributeName$( ), value );
return true;
$endif$ 	
>>

/**
 * @param template com.sap.tc.moin.xm.generation.core.code.parser.template.XmHandlerTemplate
 */
childClosed(template) ::=<<
@Override
public void childClosed( final com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler childHandler, final java.lang.String childPrefix, final java.lang.String childLocalName ) throws com.sap.tc.moin.repository.xm.XmException {
    $first(template.ChildAssociations):firstPrefixCreateLink()$
    $rest(template.ChildAssociations):restPrefixCreateLink()$
}
>>

/**
 * @param template com.sap.tc.moin.xm.generation.core.code.parser.template.XmParserHandlerTemplate
 */
rootElementClosed(template) ::=<<
@Override
protected void rootElementClosed( final com.sap.tc.moin.repository.xm.parser.ComplexTypeHandler childHandler, final java.lang.String childPrefix, final java.lang.String childLocalName ) throws com.sap.tc.moin.repository.xm.XmException {

    $first(template.ChildAssociations):firstPrefixCreateLink()$
    $rest(template.ChildAssociations):restPrefixCreateLink()$
}
>>

/**
 * @param template com.sap.tc.moin.xm.generation.core.code.parser.template.PrefixToChildAssociation
 */
firstPrefixCreateLink(template) ::=<<
if ( PREFIX_$template.Prefix$.equals( childPrefix ) ) {
    $first(template.ChildAssociations):firstCreateLink()$
    $rest(template.ChildAssociations):restCreateLink()$
}
>>

/**
 * @param template com.sap.tc.moin.xm.generation.core.code.parser.template.PrefixToChildAssociation
 */
restPrefixCreateLink(template) ::=<<
else if ( PREFIX_$template.Prefix$.equals( childPrefix ) ) {
    $first(template.ChildAssociations):firstCreateLink()$
    $rest(template.ChildAssociations):restCreateLink()$
}$\n$
>>

/**
 * @param template com.sap.tc.moin.xm.generation.core.code.parser.template.ChildAssociation
 */
firstCreateLink(template) ::=<<
if ( ELEMENT_$template.LocalName$.equals( childLocalName ) ) {
$if (template.ForRootElementClosed)$
    createLink( getStack( ).getModelElement( childHandler.getClass( ).getName( ) ), getStack( ).getModelElement( getClass( ).getName( ) ), $template.QualifiedJavaClassName$.ASSOCIATION_DESCRIPTOR, "$template.ReferencedEndName$" ); //\$NON-NLS-1\$
}
$else$
    createLink( childHandler.getClass( ).getName( ), getClass( ).getName( ), $template.QualifiedJavaClassName$.ASSOCIATION_DESCRIPTOR, "$template.ReferencedEndName$" ); //\$NON-NLS-1\$
}
$endif$
>>

/**
 * @param template com.sap.tc.moin.xm.generation.core.code.parser.template.ChildAssociation
 */
restCreateLink(template) ::=<<
else if ( ELEMENT_$template.LocalName$.equals( childLocalName ) ) {
$if (template.ForRootElementClosed)$
    createLink( getStack( ).getModelElement( childHandler.getClass( ).getName( ) ), getStack( ).getModelElement( getClass( ).getName( ) ), $template.QualifiedJavaClassName$.ASSOCIATION_DESCRIPTOR, "$template.ReferencedEndName$" ); //\$NON-NLS-1\$
}$\n$
$else$
    createLink( childHandler.getClass( ).getName( ), getClass( ).getName( ), $template.QualifiedJavaClassName$.ASSOCIATION_DESCRIPTOR, "$template.ReferencedEndName$" ); //\$NON-NLS-1\$
}$\n$
$endif$
>>

javaHeader(template) ::= <<
$template.Preamble$
package $template.PackageName$;
>>

/**
 * @param template com.sap.tc.moin.xm.generation.core.code.template.XmParserHandlerTemplate
 */
javaPublicClassHeader(template) ::= <<
public class $template.JavaName$$if (template.Extends)$ extends $template.Extends; separator=","$$endif$$if (template.Implements)$ implements $template.Implements; separator=","$$endif$
>>



