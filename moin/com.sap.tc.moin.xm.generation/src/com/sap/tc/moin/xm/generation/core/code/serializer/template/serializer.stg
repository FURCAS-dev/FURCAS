group serializer;

/**
 * @param template com.sap.tc.moin.xm.generation.core.code.serializer.template.XmSerializerTemplate
 */
serializer(template) ::= <<
$template:javaHeader()$$\n$
/**
 * XM Serializer for XML documents which are valid to the XML schema
 * "$template.SchemaName$".
 */
$template:javaPublicClassHeader()$ {

     /** Prefix for the no-namespace.  */
    protected static final java.lang.String PREFIX_ = ""; //\$NON-NLS-1\$
    
$if (template.Prefixes)$
    $template.prefixes:prefixConstant(); separator="\n"$
    $\n$
$endif$
$if (template.ElementQNames)$
    /* Qualified names of the XML elements. */
    $template.ElementQNames:elementQNameConstant(); separator="\n"$
    $\n$
$endif$
$if (template.AttributeQNames)$
    /*Qualified names of the XML attributes. */
    $template.AttributeQNames:attributeQNameConstant(); separator="\n"$
    $\n$
$endif$
    $constructor(template.JavaName)$

    $registerPrefixes(template.prefixes)$
    
    $executeMethod(template)$
    
$if (template.ComplexTypeMethods)$
    $template.ComplexTypeMethods:complexTypeMethod(); separator="\n"$
$endif$  

$if (template.SubstitutionGroupMethods)$
    $template.SubstitutionGroupMethods:substitutionGroupMethod(); separator="\n"$
$endif$    
}
>>

/**
 * @param template com.sap.tc.moin.xm.generation.core.code.util.PrefixAndNamespace
 */
prefixConstant(template) ::=<<
/** Prefix for the namespace "$template.Namespace$". */
protected static final java.lang.String PREFIX_$template.Prefix$ = "$template.Prefix$"; //\$NON-NLS-1\$$\n$
>>


elementQNameConstant(template) ::=<<
protected static final java.lang.String ELEMENT_$template.Prefix$_$template.JavaLocalPart$ = PREFIX_$template.Prefix$ + "$template.QName$"; //\$NON-NLS-1\$$\n$
>>

attributeQNameConstant(template) ::=<<
protected static final java.lang.String ATTRIBUTE_$template.Prefix$_$template.JavaLocalPart$ = PREFIX_$template.Prefix$ + "$template.QName$"; //\$NON-NLS-1\$$\n$
>>

constructor(template) ::= <<
/**
 * Constructor. Calls the method {@link #registerPrefixes()}.
 */
public $template$( ) {

    super();
    registerPrefixes( );  
}
>>

registerPrefixes(template) ::= <<
/**
 * Registers the prefixes for the namespaces. For each namespace a prefix
 * must be registered. The registered prefix definitions are written to the output
 * stream by the first call of the method {@link #startTag(java.lang.String)}.
 */
protected void registerPrefixes( ) {
$if (template)$

    $template:registerPrefix(); separator="\n"$
$endif$    
}
>>

/**
 * @param template com.sap.tc.moin.xm.generation.core.code.util.PrefixAndNamespace
 */
registerPrefix(template) ::= <<
registerPrefixForNamespace( "$template.namespace$", PREFIX_$template.prefix$ ); //\$NON-NLS-1\$
>>

/**
 * @param template com.sap.tc.moin.xm.generation.core.code.serializer.template.XmSerializerTemplate
*/
executeMethod(template) ::=<<
@Override
protected void execute( ) throws com.sap.tc.moin.repository.xm.XmException {

    for ( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle modelElement : getModelElements( $template.QualifiedClassNameOfRootMoinClass$.CLASS_DESCRIPTOR ) ) {
       $template.MethodNameOfRootComplexType$( modelElement );
    }
}
>>

/**
 * @param template com.sap.tc.moin.xm.generation.core.code.serializer.template.ComplexTypeMethod
 */
complexTypeMethod(template) ::=<<
/**
 * Writes the content model of the $template.XmlEntityQName$ to the output stream.
 * 
 * @param modelElement model element from which attribute values or links are read
 * @throws com.sap.tc.moin.repository.xm.XmException can be used for error
 * handling, this implementation does not throw such an exception
 * @throws NullpointerException if the parameter is <code>null</code> 
 */
protected void $template.MethodName$( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle modelElement ) throws com.sap.tc.moin.repository.xm.XmException {

$if (template.XmlAttributes)$
	$template.XmlAttributes:xmlAttribute(); separator="\n"$

$endif$
$if (template.SimpleContent)$
    // simple content
    putValue(modelElement, $template.QualifiedClassNameOfParameter$.DESCRIPTORS.VALUE( ) );$\n$
$endif$
$if (template.Childs)$
	$template.Childs:child(); separator="\n";$

$endif$
}$\n$
>>

/**
 * @param template com.sap.tc.moin.xm.generation.core.code.serializer.template.ChildElement
 */
child(template) ::=<<
$if (template.SimpleElement)$
$simpleElement(template)$
$else$
$association(template)$
$endif$
>>

/**
 * @param template com.sap.tc.moin.xm.generation.core.code.serializer.template.SimpleElementOrAttribute
 */
xmlAttribute(template) ::=<<
addAttribute( ATTRIBUTE_$template.QName.Prefix$_$template.QName.JavaLocalPart$, modelElement, $template.QualifiedModelElementClassName$.DESCRIPTORS.$template.UpperCaseAttributeName$( ) );
>>

/**
 * @param template com.sap.tc.moin.xm.generation.core.code.serializer.template.SimpleElementOrAttribute
 */
simpleElement(template) ::=<<
addElement( ELEMENT_$template.QName.Prefix$_$template.QName.JavaLocalPart$, modelElement, $template.QualifiedModelElementClassName$.DESCRIPTORS.$template.UpperCaseAttributeName$( ) );
>>

/**
 * @param template com.sap.tc.moin.xm.generation.core.code.serializer.template.Association
 */
association(template) ::=<<
for ( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle linkedModelElement : getLinks( modelElement, $template.QualifiedAssociationClassName$.ASSOCIATION_DESCRIPTOR, "$template.EndName$" ) ) { //\$NON-NLS-1\$
$if (template.ElementQName)$
    startTag( ELEMENT_$template.ElementQName.Prefix$_$template.ElementQName.JavaLocalPart$ );
    $template.MethodName$( linkedModelElement ); 
    closeTag( );$\n$
$else$
	$template.MethodName$( linkedModelElement );$\n$
$endif$
}	
>>

/**
 * @param template com.sap.tc.moin.xm.generation.core.code.serializer.template.SubstitutionGroupMethod
 */
substitutionGroupMethod(template) ::=<<
/**
 * Writes the different members of the substitution group
 * "$template.SubstitutionGroupHead$" to the output
 * stream.
 * 
 * @param modelElement model element which correspond to a member of the substitution group
 * @throws com.sap.tc.moin.repository.xm.XmException can be used for error
 * handling, this implementation does not throw such an exception
 * @throws java.lang.IllegalArgumentException if <tt>modelElement</tt> has not the correct type
 */
protected void $template.MethodName$( final com.sap.tc.moin.repository.xm.serializer.SModelElementHandle modelElement ) throws com.sap.tc.moin.repository.xm.XmException {

$if (template.MethodCalls)$
    $first(template.MethodCalls):firstMethodCall(); separator="\n";$
    $rest(template.MethodCalls):restMethodCall(); separator="\n";$
    } else {
        throw new java.lang.IllegalArgumentException( "modelElement has not the correct type" ); //\$NON-NLS-1\$
    }$\n$
$endif$
}	
>>

/**
 * @param template com.sap.tc.moin.xm.generation.core.code.serializer.template.ElementMethodNameAndParameterType
 */
firstMethodCall(template) ::=<<
if ( $template.ParameterType$.CLASS_DESCRIPTOR.equals( modelElement.getType( ) ) ) {
    startTag( ELEMENT_$template.ElementQName.Prefix$_$template.ElementQName.JavaLocalPart$ );
    $template.ElementMethodName$( modelElement );
    closeTag( );
>>

/**
 * @param template com.sap.tc.moin.xm.generation.core.code.serializer.template.ElementMethodNameAndParameterType
 */
restMethodCall(template) ::=<<
}else if ( $template.ParameterType$.CLASS_DESCRIPTOR.equals( modelElement.getType( ) ) ) {
    startTag( ELEMENT_$template.ElementQName.Prefix$_$template.ElementQName.JavaLocalPart$ );
    $template.ElementMethodName$( modelElement );
    closeTag( );
>>

javaHeader(template) ::= <<
$template.Preamble$
package $template.PackageName$;
>>

/**
 * @param template com.sap.tc.moin.xm.generation.core.code.template.XmParserHandlerTemplate
 */
javaPublicClassHeader(template) ::= <<
public class $template.JavaName$$if (template.Extends)$ extends $template.Extends; separator=","$$endif$$if (template.Implements)$ implements $template.Implements; separator=","$$endif$
>>

