/**
 * Generated by the MOIN Generator Version 3.0
 **/

package com.sap.ide.metamodel.dictionary.datatype.__impl;

public class ADb2UdbAs400PropertyDbViewWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<com.sap.ide.metamodel.dictionary.datatype.ADb2UdbAs400PropertyDbView> implements com.sap.ide.metamodel.dictionary.datatype.ADb2UdbAs400PropertyDbView,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The ADb2UdbAs400PropertyDbView wrapper
     */
    public ADb2UdbAs400PropertyDbViewWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, com.sap.ide.metamodel.dictionary.datatype.__impl.ADb2UdbAs400PropertyDbViewImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private com.sap.ide.metamodel.dictionary.datatype.__impl.ADb2UdbAs400PropertyDbViewImpl getCastWrappedObject() {
        return (com.sap.ide.metamodel.dictionary.datatype.__impl.ADb2UdbAs400PropertyDbViewImpl) getWrappedObject();
    }

    public com.sap.ide.metamodel.dictionary.datatype.ADb2UdbAs400PropertyDbView unwrap() {
        return (com.sap.ide.metamodel.dictionary.datatype.ADb2UdbAs400PropertyDbView) getWrappedObject();
    }
    
    public boolean exists(com.sap.ide.metamodel.dictionary.datatype.DtDb2UdbAs400ViewProperty _Db2UdbAs400Property, com.sap.ide.metamodel.dictionary.datatype.DtDbView _DbView) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Db2UdbAs400Property), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _DbView));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Db2UdbAs400Property), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _DbView)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.ide.metamodel.dictionary.datatype.DtDb2UdbAs400ViewProperty getDb2UdbAs400Property(com.sap.ide.metamodel.dictionary.datatype.DtDbView _DbView) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.ide.metamodel.dictionary.datatype.DtDb2UdbAs400ViewProperty) wrapResult(getCastWrappedObject().getDb2UdbAs400Property(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _DbView)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.ide.metamodel.dictionary.datatype.DtDb2UdbAs400ViewProperty) wrapResult(getCastWrappedObject().getDb2UdbAs400Property(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _DbView))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.ide.metamodel.dictionary.datatype.DtDbView getDbView(com.sap.ide.metamodel.dictionary.datatype.DtDb2UdbAs400ViewProperty _Db2UdbAs400Property) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.ide.metamodel.dictionary.datatype.DtDbView) wrapResult(getCastWrappedObject().getDbView(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Db2UdbAs400Property)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.ide.metamodel.dictionary.datatype.DtDbView) wrapResult(getCastWrappedObject().getDbView(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Db2UdbAs400Property))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(com.sap.ide.metamodel.dictionary.datatype.DtDb2UdbAs400ViewProperty _Db2UdbAs400Property, com.sap.ide.metamodel.dictionary.datatype.DtDbView _DbView) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Db2UdbAs400Property), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _DbView));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Db2UdbAs400Property), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _DbView)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(com.sap.ide.metamodel.dictionary.datatype.DtDb2UdbAs400ViewProperty _Db2UdbAs400Property, com.sap.ide.metamodel.dictionary.datatype.DtDbView _DbView) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Db2UdbAs400Property), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _DbView));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Db2UdbAs400Property), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _DbView)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<com.sap.ide.metamodel.dictionary.datatype.ADb2UdbAs400PropertyDbView> get___JmiInterface() {
        return com.sap.ide.metamodel.dictionary.datatype.ADb2UdbAs400PropertyDbView.class;
    }

    protected String metaObjectToString() {
        return "com.sap.ide.metamodel.dictionary.datatype.ADb2UdbAs400PropertyDbView (Java Type)\nDictionary.datatype.A_Db2UdbAs400Property_DbView (MOF Type)"; //$NON-NLS-1$
    }    
}