/**
 * Generated by the MOIN Generator Version 3.0
 **/

package com.sap.ide.metamodel.dictionary.datatype.__impl;

public class AUsedTypeDtListWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<com.sap.ide.metamodel.dictionary.datatype.AUsedTypeDtList> implements com.sap.ide.metamodel.dictionary.datatype.AUsedTypeDtList,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AUsedTypeDtList wrapper
     */
    public AUsedTypeDtListWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, com.sap.ide.metamodel.dictionary.datatype.__impl.AUsedTypeDtListImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private com.sap.ide.metamodel.dictionary.datatype.__impl.AUsedTypeDtListImpl getCastWrappedObject() {
        return (com.sap.ide.metamodel.dictionary.datatype.__impl.AUsedTypeDtListImpl) getWrappedObject();
    }

    public com.sap.ide.metamodel.dictionary.datatype.AUsedTypeDtList unwrap() {
        return (com.sap.ide.metamodel.dictionary.datatype.AUsedTypeDtList) getWrappedObject();
    }
    
    public boolean exists(com.sap.ide.metamodel.dictionary.datatype.DtDataType _UsedType, com.sap.ide.metamodel.dictionary.datatype.DtList _DtList) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _UsedType), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _DtList));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _UsedType), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _DtList)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.ide.metamodel.dictionary.datatype.DtDataType getUsedType(com.sap.ide.metamodel.dictionary.datatype.DtList _DtList) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.ide.metamodel.dictionary.datatype.DtDataType) wrapResult(getCastWrappedObject().getUsedType(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _DtList)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.ide.metamodel.dictionary.datatype.DtDataType) wrapResult(getCastWrappedObject().getUsedType(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _DtList))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.ide.metamodel.dictionary.datatype.DtList getDtList(com.sap.ide.metamodel.dictionary.datatype.DtDataType _UsedType) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.ide.metamodel.dictionary.datatype.DtList) wrapResult(getCastWrappedObject().getDtList(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _UsedType)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.ide.metamodel.dictionary.datatype.DtList) wrapResult(getCastWrappedObject().getDtList(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _UsedType))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(com.sap.ide.metamodel.dictionary.datatype.DtDataType _UsedType, com.sap.ide.metamodel.dictionary.datatype.DtList _DtList) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _UsedType), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _DtList));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _UsedType), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _DtList)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(com.sap.ide.metamodel.dictionary.datatype.DtDataType _UsedType, com.sap.ide.metamodel.dictionary.datatype.DtList _DtList) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _UsedType), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _DtList));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _UsedType), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _DtList)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<com.sap.ide.metamodel.dictionary.datatype.AUsedTypeDtList> get___JmiInterface() {
        return com.sap.ide.metamodel.dictionary.datatype.AUsedTypeDtList.class;
    }

    protected String metaObjectToString() {
        return "com.sap.ide.metamodel.dictionary.datatype.AUsedTypeDtList (Java Type)\nDictionary.datatype.A_UsedType_dtList (MOF Type)"; //$NON-NLS-1$
    }    
}