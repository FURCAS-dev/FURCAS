/**
 * Generated by the MOIN Generator Version 3.0
 **/

package com.sap.ide.metamodel.dictionary.datatype;

public final class DatabaseEnumEnum implements com.sap.ide.metamodel.dictionary.datatype.DatabaseEnum
{
    private static final long serialVersionUID = 1L;
    
    private final static String ENUMLABELNOTFOUNDPATTERN = "Enumeration label \"{0}\" is not defined for enumeration \"{1}\""; //$NON-NLS-1$

    private static final java.util.List<String> __QUALIFIED_NAME = java.util.Collections.unmodifiableList(java.util.Arrays.asList(new String[] { "Dictionary", "datatype", "DatabaseEnum" })); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$

    public static final DatabaseEnumEnum ORACLE = new DatabaseEnumEnum("Oracle"); //$NON-NLS-1$
    public static final DatabaseEnumEnum DB2 = new DatabaseEnumEnum("Db2"); //$NON-NLS-1$
    public static final DatabaseEnumEnum DB4 = new DatabaseEnumEnum("Db4"); //$NON-NLS-1$
    public static final DatabaseEnumEnum DB6 = new DatabaseEnumEnum("Db6"); //$NON-NLS-1$
    public static final DatabaseEnumEnum SAPDB = new DatabaseEnumEnum("Sapdb"); //$NON-NLS-1$
    public static final DatabaseEnumEnum MSSQL = new DatabaseEnumEnum("Mssql"); //$NON-NLS-1$

    private static java.util.Map<String, DatabaseEnum> __labelIds = new java.util.HashMap<String, DatabaseEnum>();
    private java.lang.String __literalName;

    static {
       __labelIds.put("Oracle", ORACLE); //$NON-NLS-1$
       __labelIds.put("Db2", DB2); //$NON-NLS-1$
       __labelIds.put("Db4", DB4); //$NON-NLS-1$
       __labelIds.put("Db6", DB6); //$NON-NLS-1$
       __labelIds.put("Sapdb", SAPDB); //$NON-NLS-1$
       __labelIds.put("Mssql", MSSQL); //$NON-NLS-1$
    }

    // constructor is private
    private DatabaseEnumEnum(java.lang.String literalName){
        this.__literalName = literalName;
    }

    public static DatabaseEnum forName(java.lang.String value) {
        DatabaseEnum result = __labelIds.get(value);
        if(result != null) {
            return result;
        }
        String message = new java.text.MessageFormat( ENUMLABELNOTFOUNDPATTERN ).format( new String[] { value, "DatabaseEnumEnum" } ); //$NON-NLS-1$
        throw new java.lang.IllegalArgumentException(message);
    }

    public java.util.List<java.lang.String> refTypeName() {
        return __QUALIFIED_NAME;
    }

    @java.lang.Override
    public java.lang.String toString() {
        return this.__literalName;
    }

    /* this is required by the specification */
    protected java.lang.Object readResolve() throws java.io.ObjectStreamException {
        try {
            return forName(__literalName);
        }
        catch(java.lang.IllegalArgumentException iae) {
            java.io.InvalidObjectException ioe = new java.io.InvalidObjectException(iae.getMessage());
            ioe.initCause(iae);
            throw ioe;
        }
    }
}