/**
 * Generated by the MOIN Generator Version 3.0
 **/

package com.sap.ide.metamodel.dictionary.datatype.__impl;

public class DtTypeComponentWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefObjectWrapperImpl<com.sap.ide.metamodel.dictionary.datatype.__impl.DtTypeComponentImpl> implements com.sap.ide.metamodel.dictionary.datatype.DtTypeComponent,com.sap.tc.moin.repository.Partitionable {


    static {
    }

    public DtTypeComponentWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, com.sap.ide.metamodel.dictionary.datatype.__impl.DtTypeComponentImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    @SuppressWarnings("unused")
    private com.sap.ide.metamodel.dictionary.datatype.__impl.DtTypeComponentImpl getCastWrappedObject() {
        return (com.sap.ide.metamodel.dictionary.datatype.__impl.DtTypeComponentImpl) getWrappedObject();
    }
    
    public com.sap.ide.metamodel.dictionary.datatype.__impl.DtTypeComponentImpl unwrap() {
        return (com.sap.ide.metamodel.dictionary.datatype.__impl.DtTypeComponentImpl) getWrappedObject();
    }
        
    // methods for attributes
     
    // methods for references
    public com.sap.ide.metamodel.dictionary.datatype.DtScalarType getScalarType() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.ide.metamodel.dictionary.datatype.DtScalarType) wrapResult(getCastWrappedObject().getScalarType(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.ide.metamodel.dictionary.datatype.DtScalarType) wrapResult(getCastWrappedObject().getScalarType(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setScalarType(com.sap.ide.metamodel.dictionary.datatype.DtScalarType newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setScalarType(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setScalarType(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

   
    // methods for modeled operations
    
    // methods for internal modeled operations

    // reflective methods
    

    // get the JMI interface
    @SuppressWarnings("unchecked")
    public java.lang.Class<com.sap.ide.metamodel.dictionary.datatype.DtTypeComponent> get___JmiInterface() {
        return com.sap.ide.metamodel.dictionary.datatype.DtTypeComponent.class;
    }

    // to String
    protected String metaObjectToString() {
        return "com.sap.ide.metamodel.dictionary.datatype.DtTypeComponent (Java Type)\nDictionary.datatype.DtTypeComponent (MOF Type)"; //$NON-NLS-1$
    }    
}