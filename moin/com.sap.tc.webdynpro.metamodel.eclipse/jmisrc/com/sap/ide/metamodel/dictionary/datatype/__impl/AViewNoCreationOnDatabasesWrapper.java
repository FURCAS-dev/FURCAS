/**
 * Generated by the MOIN Generator Version 3.0
 **/

package com.sap.ide.metamodel.dictionary.datatype.__impl;

public class AViewNoCreationOnDatabasesWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<com.sap.ide.metamodel.dictionary.datatype.AViewNoCreationOnDatabases> implements com.sap.ide.metamodel.dictionary.datatype.AViewNoCreationOnDatabases,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AViewNoCreationOnDatabases wrapper
     */
    public AViewNoCreationOnDatabasesWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, com.sap.ide.metamodel.dictionary.datatype.__impl.AViewNoCreationOnDatabasesImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private com.sap.ide.metamodel.dictionary.datatype.__impl.AViewNoCreationOnDatabasesImpl getCastWrappedObject() {
        return (com.sap.ide.metamodel.dictionary.datatype.__impl.AViewNoCreationOnDatabasesImpl) getWrappedObject();
    }

    public com.sap.ide.metamodel.dictionary.datatype.AViewNoCreationOnDatabases unwrap() {
        return (com.sap.ide.metamodel.dictionary.datatype.AViewNoCreationOnDatabases) getWrappedObject();
    }
    
    public boolean exists(com.sap.ide.metamodel.dictionary.datatype.DtDbView _View, com.sap.ide.metamodel.dictionary.datatype.DtNoCreateCondition _NoCreationOnDatabases) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _View), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _NoCreationOnDatabases));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _View), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _NoCreationOnDatabases)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.ide.metamodel.dictionary.datatype.DtDbView getView(com.sap.ide.metamodel.dictionary.datatype.DtNoCreateCondition _NoCreationOnDatabases) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.ide.metamodel.dictionary.datatype.DtDbView) wrapResult(getCastWrappedObject().getView(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _NoCreationOnDatabases)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.ide.metamodel.dictionary.datatype.DtDbView) wrapResult(getCastWrappedObject().getView(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _NoCreationOnDatabases))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.List getNoCreationOnDatabases(com.sap.ide.metamodel.dictionary.datatype.DtDbView _View) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.List) wrapResult(getCastWrappedObject().getNoCreationOnDatabases(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _View)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.List) wrapResult(getCastWrappedObject().getNoCreationOnDatabases(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _View))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(com.sap.ide.metamodel.dictionary.datatype.DtDbView _View, com.sap.ide.metamodel.dictionary.datatype.DtNoCreateCondition _NoCreationOnDatabases) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _View), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _NoCreationOnDatabases));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _View), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _NoCreationOnDatabases)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(com.sap.ide.metamodel.dictionary.datatype.DtDbView _View, com.sap.ide.metamodel.dictionary.datatype.DtNoCreateCondition _NoCreationOnDatabases) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _View), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _NoCreationOnDatabases));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _View), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _NoCreationOnDatabases)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<com.sap.ide.metamodel.dictionary.datatype.AViewNoCreationOnDatabases> get___JmiInterface() {
        return com.sap.ide.metamodel.dictionary.datatype.AViewNoCreationOnDatabases.class;
    }

    protected String metaObjectToString() {
        return "com.sap.ide.metamodel.dictionary.datatype.AViewNoCreationOnDatabases (Java Type)\nDictionary.datatype.A_View_NoCreationOnDatabases (MOF Type)"; //$NON-NLS-1$
    }    
}