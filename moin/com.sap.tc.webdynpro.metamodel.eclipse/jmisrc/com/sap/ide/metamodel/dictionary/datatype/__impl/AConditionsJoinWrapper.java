/**
 * Generated by the MOIN Generator Version 3.0
 **/

package com.sap.ide.metamodel.dictionary.datatype.__impl;

public class AConditionsJoinWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<com.sap.ide.metamodel.dictionary.datatype.AConditionsJoin> implements com.sap.ide.metamodel.dictionary.datatype.AConditionsJoin,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AConditionsJoin wrapper
     */
    public AConditionsJoinWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, com.sap.ide.metamodel.dictionary.datatype.__impl.AConditionsJoinImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private com.sap.ide.metamodel.dictionary.datatype.__impl.AConditionsJoinImpl getCastWrappedObject() {
        return (com.sap.ide.metamodel.dictionary.datatype.__impl.AConditionsJoinImpl) getWrappedObject();
    }

    public com.sap.ide.metamodel.dictionary.datatype.AConditionsJoin unwrap() {
        return (com.sap.ide.metamodel.dictionary.datatype.AConditionsJoin) getWrappedObject();
    }
    
    public boolean exists(com.sap.ide.metamodel.dictionary.datatype.DtJoinCondition _Conditions, com.sap.ide.metamodel.dictionary.datatype.DtJoin _Join) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Conditions), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Join));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Conditions), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Join)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.List getConditions(com.sap.ide.metamodel.dictionary.datatype.DtJoin _Join) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.List) wrapResult(getCastWrappedObject().getConditions(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Join)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.List) wrapResult(getCastWrappedObject().getConditions(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Join))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.ide.metamodel.dictionary.datatype.DtJoin getJoin(com.sap.ide.metamodel.dictionary.datatype.DtJoinCondition _Conditions) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.ide.metamodel.dictionary.datatype.DtJoin) wrapResult(getCastWrappedObject().getJoin(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Conditions)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.ide.metamodel.dictionary.datatype.DtJoin) wrapResult(getCastWrappedObject().getJoin(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Conditions))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(com.sap.ide.metamodel.dictionary.datatype.DtJoinCondition _Conditions, com.sap.ide.metamodel.dictionary.datatype.DtJoin _Join) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Conditions), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Join));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Conditions), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Join)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(com.sap.ide.metamodel.dictionary.datatype.DtJoinCondition _Conditions, com.sap.ide.metamodel.dictionary.datatype.DtJoin _Join) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Conditions), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Join));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Conditions), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Join)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<com.sap.ide.metamodel.dictionary.datatype.AConditionsJoin> get___JmiInterface() {
        return com.sap.ide.metamodel.dictionary.datatype.AConditionsJoin.class;
    }

    protected String metaObjectToString() {
        return "com.sap.ide.metamodel.dictionary.datatype.AConditionsJoin (Java Type)\nDictionary.datatype.A_Conditions_Join (MOF Type)"; //$NON-NLS-1$
    }    
}