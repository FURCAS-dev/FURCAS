/**
 * Generated by the MOIN Generator Version 3.0
 **/

package com.sap.ide.metamodel.common.diagram.__impl;

public class AElementsAbstractDiagramWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<com.sap.ide.metamodel.common.diagram.AElementsAbstractDiagram> implements com.sap.ide.metamodel.common.diagram.AElementsAbstractDiagram,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AElementsAbstractDiagram wrapper
     */
    public AElementsAbstractDiagramWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, com.sap.ide.metamodel.common.diagram.__impl.AElementsAbstractDiagramImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private com.sap.ide.metamodel.common.diagram.__impl.AElementsAbstractDiagramImpl getCastWrappedObject() {
        return (com.sap.ide.metamodel.common.diagram.__impl.AElementsAbstractDiagramImpl) getWrappedObject();
    }

    public com.sap.ide.metamodel.common.diagram.AElementsAbstractDiagram unwrap() {
        return (com.sap.ide.metamodel.common.diagram.AElementsAbstractDiagram) getWrappedObject();
    }
    
    public boolean exists(com.sap.ide.metamodel.common.diagram.DiagramElement _Elements, com.sap.ide.metamodel.common.diagram.AbstractDiagram _AbstractDiagram) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Elements), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AbstractDiagram));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Elements), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AbstractDiagram)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.List getElements(com.sap.ide.metamodel.common.diagram.AbstractDiagram _AbstractDiagram) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (java.util.List) wrapResult(getCastWrappedObject().getElements(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AbstractDiagram)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (java.util.List) wrapResult(getCastWrappedObject().getElements(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AbstractDiagram))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.ide.metamodel.common.diagram.AbstractDiagram getAbstractDiagram(com.sap.ide.metamodel.common.diagram.DiagramElement _Elements) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.ide.metamodel.common.diagram.AbstractDiagram) wrapResult(getCastWrappedObject().getAbstractDiagram(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Elements)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.ide.metamodel.common.diagram.AbstractDiagram) wrapResult(getCastWrappedObject().getAbstractDiagram(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Elements))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(com.sap.ide.metamodel.common.diagram.DiagramElement _Elements, com.sap.ide.metamodel.common.diagram.AbstractDiagram _AbstractDiagram) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Elements), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AbstractDiagram));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Elements), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AbstractDiagram)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(com.sap.ide.metamodel.common.diagram.DiagramElement _Elements, com.sap.ide.metamodel.common.diagram.AbstractDiagram _AbstractDiagram) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Elements), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AbstractDiagram));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Elements), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _AbstractDiagram)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    @SuppressWarnings("unchecked")
    public java.lang.Class<com.sap.ide.metamodel.common.diagram.AElementsAbstractDiagram> get___JmiInterface() {
        return com.sap.ide.metamodel.common.diagram.AElementsAbstractDiagram.class;
    }

    protected String metaObjectToString() {
        return "com.sap.ide.metamodel.common.diagram.AElementsAbstractDiagram (Java Type)\nCommon.diagram.A_Elements_abstractDiagram (MOF Type)"; //$NON-NLS-1$
    }    
}