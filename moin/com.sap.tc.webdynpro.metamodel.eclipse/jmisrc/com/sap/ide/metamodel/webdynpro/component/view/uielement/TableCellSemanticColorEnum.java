/**
 * Generated by the MOIN Generator Version 3.0
 **/

package com.sap.ide.metamodel.webdynpro.component.view.uielement;

public final class TableCellSemanticColorEnum implements com.sap.ide.metamodel.webdynpro.component.view.uielement.TableCellSemanticColor
{
    private static final long serialVersionUID = 1L;
    
    private final static String ENUMLABELNOTFOUNDPATTERN = "Enumeration label \"{0}\" is not defined for enumeration \"{1}\""; //$NON-NLS-1$

    private static final java.util.List<String> __QUALIFIED_NAME = java.util.Collections.unmodifiableList(java.util.Arrays.asList(new String[] { "WebDynpro", "component", "view", "uielement", "TableCellSemanticColor" })); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$

    public static final TableCellSemanticColorEnum BADVALUE_DARK = new TableCellSemanticColorEnum("badvalue_dark"); //$NON-NLS-1$
    public static final TableCellSemanticColorEnum BADVALUE_LIGHT = new TableCellSemanticColorEnum("badvalue_light"); //$NON-NLS-1$
    public static final TableCellSemanticColorEnum BADVALUE_MEDIUM = new TableCellSemanticColorEnum("badvalue_medium"); //$NON-NLS-1$
    public static final TableCellSemanticColorEnum CRITICALVALUE_DARK = new TableCellSemanticColorEnum("criticalvalue_dark"); //$NON-NLS-1$
    public static final TableCellSemanticColorEnum CRITICALVALUE_LIGHT = new TableCellSemanticColorEnum("criticalvalue_light"); //$NON-NLS-1$
    public static final TableCellSemanticColorEnum CRITICALVALUE_MEDIUM = new TableCellSemanticColorEnum("criticalvalue_medium"); //$NON-NLS-1$
    public static final TableCellSemanticColorEnum GOODVALUE_DARK = new TableCellSemanticColorEnum("goodvalue_dark"); //$NON-NLS-1$
    public static final TableCellSemanticColorEnum GOODVALUE_LIGHT = new TableCellSemanticColorEnum("goodvalue_light"); //$NON-NLS-1$
    public static final TableCellSemanticColorEnum GOODVALUE_MEDIUM = new TableCellSemanticColorEnum("goodvalue_medium"); //$NON-NLS-1$
    public static final TableCellSemanticColorEnum GROUP_HIGHLIGHTED = new TableCellSemanticColorEnum("group_highlighted"); //$NON-NLS-1$
    public static final TableCellSemanticColorEnum GROUP_HIGHLIGHTED_LIGHT = new TableCellSemanticColorEnum("group_highlighted_light"); //$NON-NLS-1$
    public static final TableCellSemanticColorEnum GROUP_LEVEL1 = new TableCellSemanticColorEnum("group_level1"); //$NON-NLS-1$
    public static final TableCellSemanticColorEnum GROUP_LEVEL2 = new TableCellSemanticColorEnum("group_level2"); //$NON-NLS-1$
    public static final TableCellSemanticColorEnum GROUP_LEVEL3 = new TableCellSemanticColorEnum("group_level3"); //$NON-NLS-1$
    public static final TableCellSemanticColorEnum KEY_MEDIUM = new TableCellSemanticColorEnum("key_medium"); //$NON-NLS-1$
    public static final TableCellSemanticColorEnum MARKED = new TableCellSemanticColorEnum("marked"); //$NON-NLS-1$
    public static final TableCellSemanticColorEnum NEGATIVE = new TableCellSemanticColorEnum("negative"); //$NON-NLS-1$
    public static final TableCellSemanticColorEnum POSITIVE = new TableCellSemanticColorEnum("positive"); //$NON-NLS-1$
    public static final TableCellSemanticColorEnum STANDARD = new TableCellSemanticColorEnum("standard"); //$NON-NLS-1$
    public static final TableCellSemanticColorEnum SUBTOTAL = new TableCellSemanticColorEnum("subtotal"); //$NON-NLS-1$
    public static final TableCellSemanticColorEnum SUBTOTAL_LIGHT = new TableCellSemanticColorEnum("subtotal_light"); //$NON-NLS-1$
    public static final TableCellSemanticColorEnum TOTAL = new TableCellSemanticColorEnum("total"); //$NON-NLS-1$

    private static java.util.Map<String, TableCellSemanticColor> __labelIds = new java.util.HashMap<String, TableCellSemanticColor>();
    private java.lang.String __literalName;

    static {
       __labelIds.put("badvalue_dark", BADVALUE_DARK); //$NON-NLS-1$
       __labelIds.put("badvalue_light", BADVALUE_LIGHT); //$NON-NLS-1$
       __labelIds.put("badvalue_medium", BADVALUE_MEDIUM); //$NON-NLS-1$
       __labelIds.put("criticalvalue_dark", CRITICALVALUE_DARK); //$NON-NLS-1$
       __labelIds.put("criticalvalue_light", CRITICALVALUE_LIGHT); //$NON-NLS-1$
       __labelIds.put("criticalvalue_medium", CRITICALVALUE_MEDIUM); //$NON-NLS-1$
       __labelIds.put("goodvalue_dark", GOODVALUE_DARK); //$NON-NLS-1$
       __labelIds.put("goodvalue_light", GOODVALUE_LIGHT); //$NON-NLS-1$
       __labelIds.put("goodvalue_medium", GOODVALUE_MEDIUM); //$NON-NLS-1$
       __labelIds.put("group_highlighted", GROUP_HIGHLIGHTED); //$NON-NLS-1$
       __labelIds.put("group_highlighted_light", GROUP_HIGHLIGHTED_LIGHT); //$NON-NLS-1$
       __labelIds.put("group_level1", GROUP_LEVEL1); //$NON-NLS-1$
       __labelIds.put("group_level2", GROUP_LEVEL2); //$NON-NLS-1$
       __labelIds.put("group_level3", GROUP_LEVEL3); //$NON-NLS-1$
       __labelIds.put("key_medium", KEY_MEDIUM); //$NON-NLS-1$
       __labelIds.put("marked", MARKED); //$NON-NLS-1$
       __labelIds.put("negative", NEGATIVE); //$NON-NLS-1$
       __labelIds.put("positive", POSITIVE); //$NON-NLS-1$
       __labelIds.put("standard", STANDARD); //$NON-NLS-1$
       __labelIds.put("subtotal", SUBTOTAL); //$NON-NLS-1$
       __labelIds.put("subtotal_light", SUBTOTAL_LIGHT); //$NON-NLS-1$
       __labelIds.put("total", TOTAL); //$NON-NLS-1$
    }

    // constructor is private
    private TableCellSemanticColorEnum(java.lang.String literalName){
        this.__literalName = literalName;
    }

    public static TableCellSemanticColor forName(java.lang.String value) {
        TableCellSemanticColor result = __labelIds.get(value);
        if(result != null) {
            return result;
        }
        String message = new java.text.MessageFormat( ENUMLABELNOTFOUNDPATTERN ).format( new String[] { value, "TableCellSemanticColorEnum" } ); //$NON-NLS-1$
        throw new java.lang.IllegalArgumentException(message);
    }

    public java.util.List<java.lang.String> refTypeName() {
        return __QUALIFIED_NAME;
    }

    @java.lang.Override
    public java.lang.String toString() {
        return this.__literalName;
    }

    /* this is required by the specification */
    protected java.lang.Object readResolve() throws java.io.ObjectStreamException {
        try {
            return forName(__literalName);
        }
        catch(java.lang.IllegalArgumentException iae) {
            java.io.InvalidObjectException ioe = new java.io.InvalidObjectException(iae.getMessage());
            ioe.initCause(iae);
            throw ioe;
        }
    }
}