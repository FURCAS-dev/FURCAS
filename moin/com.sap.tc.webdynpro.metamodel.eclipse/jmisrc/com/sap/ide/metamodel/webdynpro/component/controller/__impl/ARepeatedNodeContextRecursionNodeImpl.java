/**
 * Generated by the MOIN Generator Version 3.0
 **/

package com.sap.ide.metamodel.webdynpro.component.controller.__impl;

public final class ARepeatedNodeContextRecursionNodeImpl extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationImpl
{
    // default constructor
    public ARepeatedNodeContextRecursionNodeImpl() {
        super();
    }

    // specific constructor
    public ARepeatedNodeContextRecursionNodeImpl(java.lang.Object workspace, java.lang.String mofId, com.sap.tc.moin.repository.mmi.reflect.RefPackage immediatePackage, com.sap.tc.moin.repository.mmi.reflect.RefObject metaObject) {
        super(workspace, mofId, immediatePackage, metaObject);
    }
    
    public boolean exists(com.sap.tc.moin.repository.mmi.reflect.RefBaseObject _RepeatedNode, com.sap.tc.moin.repository.mmi.reflect.RefBaseObject _ContextRecursionNode) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        return exists(get___CurrentConnection(), _RepeatedNode, _ContextRecursionNode);
    }
    public boolean exists(com.sap.tc.moin.repository.core.CoreConnection connection, com.sap.tc.moin.repository.mmi.reflect.RefBaseObject _RepeatedNode, com.sap.tc.moin.repository.mmi.reflect.RefBaseObject _ContextRecursionNode) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        return ___existsMult1( connection, _ContextRecursionNode, _RepeatedNode, "45DDACEE388A8AEAB76E451207639D7D6B72DEA4"); //$NON-NLS-1$
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefBaseObject getRepeatedNode(com.sap.tc.moin.repository.mmi.reflect.RefBaseObject _ContextRecursionNode) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        return getRepeatedNode(get___CurrentConnection(), _ContextRecursionNode);
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefBaseObject getRepeatedNode(com.sap.tc.moin.repository.core.CoreConnection connection, com.sap.tc.moin.repository.mmi.reflect.RefBaseObject _ContextRecursionNode) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        return (com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) ___getElementAtOtherLinkEnd( connection, (com.sap.tc.moin.repository.core.CorePartitionable) _ContextRecursionNode, "45DDACEE388A8AEAB76E451207639D7D6B72DEA4"); //$NON-NLS-1$
    }
    public java.util.Collection<com.sap.tc.moin.repository.mmi.reflect.RefBaseObject> getContextRecursionNode(com.sap.tc.moin.repository.mmi.reflect.RefBaseObject _RepeatedNode) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        return getContextRecursionNode(get___CurrentConnection(), _RepeatedNode);
    }
    public java.util.Collection<com.sap.tc.moin.repository.mmi.reflect.RefBaseObject> getContextRecursionNode(com.sap.tc.moin.repository.core.CoreConnection connection, com.sap.tc.moin.repository.mmi.reflect.RefBaseObject _RepeatedNode) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        return (java.util.Collection<com.sap.tc.moin.repository.mmi.reflect.RefBaseObject>) ___queryElementsAtOtherLinkEnd( connection, (com.sap.tc.moin.repository.core.CorePartitionable) _RepeatedNode, get___EndAndMetaObject( 0 ) );
    }
    public boolean add(com.sap.tc.moin.repository.mmi.reflect.RefBaseObject _RepeatedNode, com.sap.tc.moin.repository.mmi.reflect.RefBaseObject _ContextRecursionNode) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
          return refAddLink((com.sap.tc.moin.repository.mmi.reflect.RefObject)_RepeatedNode, (com.sap.tc.moin.repository.mmi.reflect.RefObject)_ContextRecursionNode);
    }
    public boolean add(com.sap.tc.moin.repository.core.CoreConnection connection, com.sap.tc.moin.repository.mmi.reflect.RefBaseObject _RepeatedNode, com.sap.tc.moin.repository.mmi.reflect.RefBaseObject _ContextRecursionNode) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
          return refAddLink(connection, (com.sap.tc.moin.repository.mmi.reflect.RefObject)_RepeatedNode, (com.sap.tc.moin.repository.mmi.reflect.RefObject)_ContextRecursionNode);
    }
    public boolean remove(com.sap.tc.moin.repository.mmi.reflect.RefBaseObject _RepeatedNode, com.sap.tc.moin.repository.mmi.reflect.RefBaseObject _ContextRecursionNode) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        return refRemoveLink((com.sap.tc.moin.repository.mmi.reflect.RefObject)_RepeatedNode, (com.sap.tc.moin.repository.mmi.reflect.RefObject)_ContextRecursionNode);
    }
    public boolean remove(com.sap.tc.moin.repository.core.CoreConnection connection, com.sap.tc.moin.repository.mmi.reflect.RefBaseObject _RepeatedNode, com.sap.tc.moin.repository.mmi.reflect.RefBaseObject _ContextRecursionNode) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        return refRemoveLink(connection, (com.sap.tc.moin.repository.mmi.reflect.RefObject)_RepeatedNode, (com.sap.tc.moin.repository.mmi.reflect.RefObject)_ContextRecursionNode);
    }
    public boolean refLinkExists(com.sap.tc.moin.repository.core.CoreConnection connection, com.sap.tc.moin.repository.mmi.reflect.RefObject firstEnd, com.sap.tc.moin.repository.mmi.reflect.RefObject secondEnd) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        if ( firstEnd == null || secondEnd == null ) { return false; }
        checkTypesForRefLinkExists( connection, firstEnd, secondEnd );
        return exists( connection, (com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) firstEnd, (com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) secondEnd );
    }

    @SuppressWarnings("unchecked")
    public java.lang.Class<com.sap.ide.metamodel.webdynpro.component.controller.ARepeatedNodeContextRecursionNode> get___JmiInterface() {
        return com.sap.ide.metamodel.webdynpro.component.controller.ARepeatedNodeContextRecursionNode.class;
    }
    
    @Override
    public com.sap.tc.moin.repository.spi.core.Wrapper<com.sap.ide.metamodel.webdynpro.component.controller.ARepeatedNodeContextRecursionNode> createWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, boolean synchronize) {
        return new com.sap.ide.metamodel.webdynpro.component.controller.__impl.ARepeatedNodeContextRecursionNodeWrapper(conn, this, synchronize);
    }
}