/**
 * Generated by the MOIN Generator Version 3.0
 **/

package com.sap.ide.metamodel.webdynpro.component.view.uielement;

public final class BusinessGraphicsTypeEnum implements com.sap.ide.metamodel.webdynpro.component.view.uielement.BusinessGraphicsType
{
    private static final long serialVersionUID = 1L;
    
    private final static String ENUMLABELNOTFOUNDPATTERN = "Enumeration label \"{0}\" is not defined for enumeration \"{1}\""; //$NON-NLS-1$

    private static final java.util.List<String> __QUALIFIED_NAME = java.util.Collections.unmodifiableList(java.util.Arrays.asList(new String[] { "WebDynpro", "component", "view", "uielement", "BusinessGraphicsType" })); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$

    public static final BusinessGraphicsTypeEnum AREA = new BusinessGraphicsTypeEnum("area"); //$NON-NLS-1$
    public static final BusinessGraphicsTypeEnum BARS = new BusinessGraphicsTypeEnum("bars"); //$NON-NLS-1$
    public static final BusinessGraphicsTypeEnum COLUMNS = new BusinessGraphicsTypeEnum("columns"); //$NON-NLS-1$
    public static final BusinessGraphicsTypeEnum DOUGHNUT = new BusinessGraphicsTypeEnum("doughnut"); //$NON-NLS-1$
    public static final BusinessGraphicsTypeEnum GANTT = new BusinessGraphicsTypeEnum("gantt"); //$NON-NLS-1$
    public static final BusinessGraphicsTypeEnum LINES = new BusinessGraphicsTypeEnum("lines"); //$NON-NLS-1$
    public static final BusinessGraphicsTypeEnum PIE = new BusinessGraphicsTypeEnum("pie"); //$NON-NLS-1$
    public static final BusinessGraphicsTypeEnum PIPELINE = new BusinessGraphicsTypeEnum("pipeline"); //$NON-NLS-1$
    public static final BusinessGraphicsTypeEnum POLAR = new BusinessGraphicsTypeEnum("polar"); //$NON-NLS-1$
    public static final BusinessGraphicsTypeEnum PORTFOLIO = new BusinessGraphicsTypeEnum("portfolio"); //$NON-NLS-1$
    public static final BusinessGraphicsTypeEnum PROFILE_AREA = new BusinessGraphicsTypeEnum("profile_area"); //$NON-NLS-1$
    public static final BusinessGraphicsTypeEnum PROFILES = new BusinessGraphicsTypeEnum("profiles"); //$NON-NLS-1$
    public static final BusinessGraphicsTypeEnum RADAR = new BusinessGraphicsTypeEnum("radar"); //$NON-NLS-1$
    public static final BusinessGraphicsTypeEnum SCATTER = new BusinessGraphicsTypeEnum("scatter"); //$NON-NLS-1$
    public static final BusinessGraphicsTypeEnum SPEEDOMETER = new BusinessGraphicsTypeEnum("speedometer"); //$NON-NLS-1$
    public static final BusinessGraphicsTypeEnum SPLIT_PIE = new BusinessGraphicsTypeEnum("split_pie"); //$NON-NLS-1$
    public static final BusinessGraphicsTypeEnum STACKED_AREA = new BusinessGraphicsTypeEnum("stacked_area"); //$NON-NLS-1$
    public static final BusinessGraphicsTypeEnum STACKED_BARS = new BusinessGraphicsTypeEnum("stacked_bars"); //$NON-NLS-1$
    public static final BusinessGraphicsTypeEnum STACKED_COLUMNS = new BusinessGraphicsTypeEnum("stacked_columns"); //$NON-NLS-1$
    public static final BusinessGraphicsTypeEnum STACKED_LINES = new BusinessGraphicsTypeEnum("stacked_lines"); //$NON-NLS-1$
    public static final BusinessGraphicsTypeEnum STACKED_PROFILE_AREA = new BusinessGraphicsTypeEnum("stacked_profile_area"); //$NON-NLS-1$
    public static final BusinessGraphicsTypeEnum STACKED_PROFILES = new BusinessGraphicsTypeEnum("stacked_profiles"); //$NON-NLS-1$
    public static final BusinessGraphicsTypeEnum STACKED_RADAR = new BusinessGraphicsTypeEnum("stacked_radar"); //$NON-NLS-1$
    public static final BusinessGraphicsTypeEnum TIME_SCATTER = new BusinessGraphicsTypeEnum("time_scatter"); //$NON-NLS-1$
    public static final BusinessGraphicsTypeEnum MTA = new BusinessGraphicsTypeEnum("mta"); //$NON-NLS-1$

    private static java.util.Map<String, BusinessGraphicsType> __labelIds = new java.util.HashMap<String, BusinessGraphicsType>();
    private java.lang.String __literalName;

    static {
       __labelIds.put("area", AREA); //$NON-NLS-1$
       __labelIds.put("bars", BARS); //$NON-NLS-1$
       __labelIds.put("columns", COLUMNS); //$NON-NLS-1$
       __labelIds.put("doughnut", DOUGHNUT); //$NON-NLS-1$
       __labelIds.put("gantt", GANTT); //$NON-NLS-1$
       __labelIds.put("lines", LINES); //$NON-NLS-1$
       __labelIds.put("pie", PIE); //$NON-NLS-1$
       __labelIds.put("pipeline", PIPELINE); //$NON-NLS-1$
       __labelIds.put("polar", POLAR); //$NON-NLS-1$
       __labelIds.put("portfolio", PORTFOLIO); //$NON-NLS-1$
       __labelIds.put("profile_area", PROFILE_AREA); //$NON-NLS-1$
       __labelIds.put("profiles", PROFILES); //$NON-NLS-1$
       __labelIds.put("radar", RADAR); //$NON-NLS-1$
       __labelIds.put("scatter", SCATTER); //$NON-NLS-1$
       __labelIds.put("speedometer", SPEEDOMETER); //$NON-NLS-1$
       __labelIds.put("split_pie", SPLIT_PIE); //$NON-NLS-1$
       __labelIds.put("stacked_area", STACKED_AREA); //$NON-NLS-1$
       __labelIds.put("stacked_bars", STACKED_BARS); //$NON-NLS-1$
       __labelIds.put("stacked_columns", STACKED_COLUMNS); //$NON-NLS-1$
       __labelIds.put("stacked_lines", STACKED_LINES); //$NON-NLS-1$
       __labelIds.put("stacked_profile_area", STACKED_PROFILE_AREA); //$NON-NLS-1$
       __labelIds.put("stacked_profiles", STACKED_PROFILES); //$NON-NLS-1$
       __labelIds.put("stacked_radar", STACKED_RADAR); //$NON-NLS-1$
       __labelIds.put("time_scatter", TIME_SCATTER); //$NON-NLS-1$
       __labelIds.put("mta", MTA); //$NON-NLS-1$
    }

    // constructor is private
    private BusinessGraphicsTypeEnum(java.lang.String literalName){
        this.__literalName = literalName;
    }

    public static BusinessGraphicsType forName(java.lang.String value) {
        BusinessGraphicsType result = __labelIds.get(value);
        if(result != null) {
            return result;
        }
        String message = new java.text.MessageFormat( ENUMLABELNOTFOUNDPATTERN ).format( new String[] { value, "BusinessGraphicsTypeEnum" } ); //$NON-NLS-1$
        throw new java.lang.IllegalArgumentException(message);
    }

    public java.util.List<java.lang.String> refTypeName() {
        return __QUALIFIED_NAME;
    }

    @java.lang.Override
    public java.lang.String toString() {
        return this.__literalName;
    }

    /* this is required by the specification */
    protected java.lang.Object readResolve() throws java.io.ObjectStreamException {
        try {
            return forName(__literalName);
        }
        catch(java.lang.IllegalArgumentException iae) {
            java.io.InvalidObjectException ioe = new java.io.InvalidObjectException(iae.getMessage());
            ioe.initCause(iae);
            throw ioe;
        }
    }
}