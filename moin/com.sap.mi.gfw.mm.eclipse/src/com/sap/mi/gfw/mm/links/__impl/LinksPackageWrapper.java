/**
 * Generated by the MOIN Generator Version 3.0
 **/

package com.sap.mi.gfw.mm.links.__impl;

public class LinksPackageWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefPackageWrapperImpl<com.sap.mi.gfw.mm.links.__impl.LinksPackageImpl> implements com.sap.mi.gfw.mm.links.LinksPackage,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The LinksPackage wrapper
     */
    public LinksPackageWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, com.sap.mi.gfw.mm.links.__impl.LinksPackageImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    private com.sap.mi.gfw.mm.links.__impl.LinksPackageImpl getCastWrappedObject() {
        return (com.sap.mi.gfw.mm.links.__impl.LinksPackageImpl) getWrappedObject();
    }
    
    public com.sap.mi.gfw.mm.links.__impl.LinksPackageImpl unwrap() {
        return (com.sap.mi.gfw.mm.links.__impl.LinksPackageImpl) getWrappedObject();
    }
    
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getPictogramLink()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getPictogramLink(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getPictogramLink(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getDiagramLink()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getDiagramLink(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.tc.moin.repository.mmi.reflect.RefClass) wrapResult(getCastWrappedObject().getDiagramLink(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.mi.gfw.mm.links.DiagramLinkReferencesPictogramLinks getDiagramLinkReferencesPictogramLinks()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.mi.gfw.mm.links.DiagramLinkReferencesPictogramLinks) wrapResult(getCastWrappedObject().getDiagramLinkReferencesPictogramLinks(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.mi.gfw.mm.links.DiagramLinkReferencesPictogramLinks) wrapResult(getCastWrappedObject().getDiagramLinkReferencesPictogramLinks(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.mi.gfw.mm.links.PictogramElementContainsPictogramLink getPictogramElementContainsPictogramLink()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.mi.gfw.mm.links.PictogramElementContainsPictogramLink) wrapResult(getCastWrappedObject().getPictogramElementContainsPictogramLink(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.mi.gfw.mm.links.PictogramElementContainsPictogramLink) wrapResult(getCastWrappedObject().getPictogramElementContainsPictogramLink(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.mi.gfw.mm.links.DiagramLinkReferencesDiagram getDiagramLinkReferencesDiagram()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.mi.gfw.mm.links.DiagramLinkReferencesDiagram) wrapResult(getCastWrappedObject().getDiagramLinkReferencesDiagram(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.mi.gfw.mm.links.DiagramLinkReferencesDiagram) wrapResult(getCastWrappedObject().getDiagramLinkReferencesDiagram(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.mi.gfw.mm.links.PictogramLinkReferencesBusinessObjects getPictogramLinkReferencesBusinessObjects()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.mi.gfw.mm.links.PictogramLinkReferencesBusinessObjects) wrapResult(getCastWrappedObject().getPictogramLinkReferencesBusinessObjects(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.mi.gfw.mm.links.PictogramLinkReferencesBusinessObjects) wrapResult(getCastWrappedObject().getPictogramLinkReferencesBusinessObjects(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    // methods for structure type creators
    
    public java.lang.Class<com.sap.mi.gfw.mm.links.LinksPackage> get___JmiInterface() {
        return com.sap.mi.gfw.mm.links.LinksPackage.class;
    }
    
    protected String metaObjectToString() {
        return "com.sap.mi.gfw.mm.links.LinksPackage (Java Type)\nlinks (MOF Type)"; //$NON-NLS-1$
    }
}