/**
 * Generated by the MOIN Generator Version 3.0
 **/

package com.sap.tc.moin.testcases.case020.__impl;

public class HasSuper2Wrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<com.sap.tc.moin.testcases.case020.HasSuper2> implements com.sap.tc.moin.testcases.case020.HasSuper2,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The HasSuper2 wrapper
     */
    public HasSuper2Wrapper(com.sap.tc.moin.repository.core.CoreConnection conn, com.sap.tc.moin.testcases.case020.__impl.HasSuper2Impl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private com.sap.tc.moin.testcases.case020.__impl.HasSuper2Impl getCastWrappedObject() {
        return (com.sap.tc.moin.testcases.case020.__impl.HasSuper2Impl) getWrappedObject();
    }

    public com.sap.tc.moin.testcases.case020.HasSuper2 unwrap() {
        return (com.sap.tc.moin.testcases.case020.HasSuper2) getWrappedObject();
    }
    
    public boolean exists(com.sap.tc.moin.testcases.case020.Super2 _S2, com.sap.tc.moin.testcases.case020.A20 _A20) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _S2), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _A20));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _S2), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _A20)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.tc.moin.testcases.case020.Super2 getS2(com.sap.tc.moin.testcases.case020.A20 _A20) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.tc.moin.testcases.case020.Super2) wrapResult(getCastWrappedObject().getS2(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _A20)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.tc.moin.testcases.case020.Super2) wrapResult(getCastWrappedObject().getS2(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _A20))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.tc.moin.testcases.case020.A20 getA20(com.sap.tc.moin.testcases.case020.Super2 _S2) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.tc.moin.testcases.case020.A20) wrapResult(getCastWrappedObject().getA20(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _S2)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.tc.moin.testcases.case020.A20) wrapResult(getCastWrappedObject().getA20(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _S2))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(com.sap.tc.moin.testcases.case020.Super2 _S2, com.sap.tc.moin.testcases.case020.A20 _A20) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _S2), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _A20));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _S2), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _A20)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(com.sap.tc.moin.testcases.case020.Super2 _S2, com.sap.tc.moin.testcases.case020.A20 _A20) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _S2), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _A20));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _S2), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _A20)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<com.sap.tc.moin.testcases.case020.HasSuper2> get___JmiInterface() {
        return com.sap.tc.moin.testcases.case020.HasSuper2.class;
    }

    protected String metaObjectToString() {
        return "com.sap.tc.moin.testcases.case020.HasSuper2 (Java Type)\ntestcases.case020.hasSuper2 (MOF Type)"; //$NON-NLS-1$
    }    
}