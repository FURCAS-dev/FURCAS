/**
 * Generated by the MOIN Generator Version 3.0
 **/

package com.sap.tc.moin.testcases.case010.__impl;

public class NotNavigableToNavigableWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<com.sap.tc.moin.testcases.case010.NotNavigableToNavigable> implements com.sap.tc.moin.testcases.case010.NotNavigableToNavigable,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The NotNavigableToNavigable wrapper
     */
    public NotNavigableToNavigableWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, com.sap.tc.moin.testcases.case010.__impl.NotNavigableToNavigableImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private com.sap.tc.moin.testcases.case010.__impl.NotNavigableToNavigableImpl getCastWrappedObject() {
        return (com.sap.tc.moin.testcases.case010.__impl.NotNavigableToNavigableImpl) getWrappedObject();
    }

    public com.sap.tc.moin.testcases.case010.NotNavigableToNavigable unwrap() {
        return (com.sap.tc.moin.testcases.case010.NotNavigableToNavigable) getWrappedObject();
    }
    
    public boolean exists(com.sap.tc.moin.testcases.case010.A10 _NotNavigable, com.sap.tc.moin.testcases.case010.B10 _Navigable) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _NotNavigable), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Navigable));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _NotNavigable), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Navigable)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.tc.moin.testcases.case010.A10 getNotNavigable(com.sap.tc.moin.testcases.case010.B10 _Navigable) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.tc.moin.testcases.case010.A10) wrapResult(getCastWrappedObject().getNotNavigable(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Navigable)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.tc.moin.testcases.case010.A10) wrapResult(getCastWrappedObject().getNotNavigable(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Navigable))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.tc.moin.testcases.case010.B10 getNavigable(com.sap.tc.moin.testcases.case010.A10 _NotNavigable) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return (com.sap.tc.moin.testcases.case010.B10) wrapResult(getCastWrappedObject().getNavigable(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _NotNavigable)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return (com.sap.tc.moin.testcases.case010.B10) wrapResult(getCastWrappedObject().getNavigable(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _NotNavigable))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(com.sap.tc.moin.testcases.case010.A10 _NotNavigable, com.sap.tc.moin.testcases.case010.B10 _Navigable) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _NotNavigable), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Navigable));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _NotNavigable), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Navigable)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(com.sap.tc.moin.testcases.case010.A10 _NotNavigable, com.sap.tc.moin.testcases.case010.B10 _Navigable) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _NotNavigable), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Navigable));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _NotNavigable), unwrapArg((com.sap.tc.moin.repository.mmi.reflect.RefBaseObject) _Navigable)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<com.sap.tc.moin.testcases.case010.NotNavigableToNavigable> get___JmiInterface() {
        return com.sap.tc.moin.testcases.case010.NotNavigableToNavigable.class;
    }

    protected String metaObjectToString() {
        return "com.sap.tc.moin.testcases.case010.NotNavigableToNavigable (Java Type)\ntestcases.case010.NotNavigableToNavigable (MOF Type)"; //$NON-NLS-1$
    }    
}