/**
   * This file is generated for MOIN-OCL with LPG. 
   */

package com.sap.tc.moin.ocl.parser.gen;

public class OclParserGenprs implements lpg.lpgjavaruntime.ParseTable, OclParserGensym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            1,0,1,1,3,1,1,3,1,1,
            2,2,1,0,2,0,1,1,3,1,
            1,1,1,1,1,1,1,1,1,1,
            1,4,1,1,1,1,1,4,1,1,
            1,1,0,1,1,1,1,2,4,0,
            1,1,2,1,1,1,4,1,2,3,
            3,3,1,2,4,4,4,1,3,3,
            1,2,4,4,4,5,1,1,4,0,
            1,1,3,4,4,1,1,3,1,3,
            1,3,3,3,1,3,3,3,3,3,
            3,1,1,7,1,3,3,1,3,3,
            1,2,2,1,2,1,1,1,3,2,
            2,2,1,1,3,3,3,3,3,3,
            3,3,3,3,3,3,3,3,3,3,
            3,3,3,2,3,3,0,1,3,1,
            1,4,4,4,4,4,4,4,4,4,
            4,1,3,5,6,0,1,1,1,1,
            1,4,0,1,1,3,2,3,1,0,
            1,0,2,1,1,1,1,1,1,1,
            1,1,1,1,4,1,1,1,3,8,
            -1,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-121,0,0,0,0,-3,
            0,0,0,0,0,0,-124,-2,0,0,
            0,-79,0,0,0,0,-80,0,0,-39,
            -123,-11,-12,0,0,0,0,-82,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-89,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -32,-34,-35,0,-40,-41,-42,-43,-44,-49,
            -52,-53,0,-54,-55,-56,0,0,-165,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-90,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-57,0,
            0,-169,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-5,0,0,0,-170,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-60,0,0,0,-171,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-6,0,0,0,-172,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-86,
            0,0,0,-173,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-7,0,0,
            0,-174,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-103,0,0,0,-175,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-8,0,0,0,-176,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-104,0,0,0,-177,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-9,
            0,0,0,-178,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-106,0,0,
            0,-120,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-13,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-122,
            -126,-127,-128,-129,-130,-131,-133,0,-36,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-58,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-59,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -113,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-114,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-115,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-116,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-118,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -119,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-152,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-163,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-164,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-179,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -181,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-183,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-184,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-200,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-203,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -206,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-211,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-212,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-99,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-100,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-101,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-102,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-93,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-94,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-95,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -96,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-97,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-98,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-37,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-38,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-91,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-92,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-125,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-83,0,0,0,0,0,0,0,
            0,0,-87,0,0,0,0,-132,-48,-112,
            -85,0,0,-111,0,0,0,0,0,0,
            0,0,0,-88,0,0,0,0,-117,0,
            0,-202,0,0,-51,-10,0,-135,-84,0,
            -4,0,0,-46,0,0,-136,-110,-107,-137,
            0,0,0,0,-109,0,0,0,0,-81,
            0,0,0,0,-50,0,-45,0,-138,-153,
            0,0,0,-167,0,0,-14,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-105,0,0,
            0,0,-187,0,-166,0,0,0,0,0,
            0,0,-168,0,0,0,0,0,-190,0,
            0,-205,0,-210,-15,-139,-16,-47,-17,-18,
            0,-19,-20,0,-21,0,0,-22,0,-23,
            0,-24,-25,0,-26,-27,-28,-29,0,-30,
            0,0,0,-31,-33,-61,0,0,0,0,
            0,0,0,0,0,0,0,-62,0,-63,
            -64,0,-65,0,-66,0,0,-67,0,0,
            0,0,0,0,-68,-69,-70,0,0,-71,
            0,-72,-73,-74,-75,-76,-77,-78,-108,-134,
            -159,-156,0,-180,0,0,-140,0,-141,0,
            -142,-143,0,-144,-145,-146,-147,-148,-149,0,
            0,0,-150,-151,0,-154,0,0,0,0,
            0,0,0,0,-155,-157,-158,-160,0,-161,
            -162,0,-182,-185,-186,-188,-189,-191,0,0,
            -192,-193,-194,-195,-196,-197,-198,-199,-201,-204,
            -207,-208,-209,-213,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            63,1,39,39,2,2,3,4,4,52,
            52,36,38,41,41,46,53,53,47,47,
            5,5,5,8,8,8,8,8,8,8,
            8,8,6,9,9,9,9,9,7,64,
            64,64,64,64,66,66,66,65,65,55,
            67,67,54,54,42,42,42,43,68,68,
            48,48,44,69,69,49,49,49,70,70,
            45,72,72,50,50,50,56,31,31,32,
            73,73,51,51,40,71,11,11,11,33,
            33,30,30,30,30,29,29,29,29,29,
            29,29,26,26,28,27,27,27,25,25,
            25,12,12,12,13,13,14,14,14,14,
            74,74,74,58,58,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,35,35,59,57,57,60,
            75,75,77,77,77,77,77,77,77,77,
            77,77,37,37,37,78,34,15,15,15,
            15,15,17,79,79,80,80,61,61,82,
            62,62,81,81,16,16,16,16,21,22,
            23,24,24,19,20,18,63,34,76,76,
            78,1,331,7,2165,6,87,20,21,22,
            332,117,118,108,260,114,116,167,168,169,
            170,171,184,185,186,187,336,95,335,103,
            337,339,42,77,338,49,331,7,2251,6,
            49,340,2019,52,54,55,56,619,285,44,
            45,46,49,340,8,2054,47,49,340,5,
            492,607,468,580,248,196,2138,41,64,331,
            7,2165,6,87,20,21,22,332,117,118,
            108,260,114,116,167,168,169,170,171,184,
            185,186,187,336,95,335,103,337,339,247,
            77,338,325,331,7,2165,6,87,20,21,
            22,332,117,118,108,260,114,116,167,168,
            169,170,171,184,185,186,187,2226,177,175,
            261,117,480,540,115,431,552,467,554,536,
            11,589,595,1209,596,600,601,860,861,223,
            331,7,2165,6,87,20,21,22,332,117,
            118,108,260,114,116,167,168,169,170,171,
            184,185,186,187,336,95,335,103,337,339,
            247,77,338,325,331,7,2165,6,87,20,
            21,22,332,117,118,108,260,114,116,167,
            168,169,170,171,184,185,186,187,2227,612,
            176,261,171,2129,7,2165,6,87,20,21,
            22,332,117,118,108,260,114,116,167,168,
            169,170,171,184,185,186,187,336,95,335,
            103,337,339,162,77,338,112,3,2257,2256,
            171,2129,7,2165,6,87,20,21,22,332,
            117,118,108,260,114,116,167,168,169,170,
            171,184,185,186,187,336,95,335,103,337,
            339,162,77,338,578,341,2257,2258,171,2129,
            7,2165,6,87,20,21,22,332,117,118,
            108,260,114,116,167,168,169,170,171,184,
            185,186,187,336,95,335,103,337,339,162,
            77,338,112,3,2257,2261,171,2129,7,2165,
            6,87,20,21,22,332,117,118,108,260,
            114,116,167,168,169,170,171,184,185,186,
            187,336,95,335,103,337,339,162,77,338,
            624,342,2257,2262,171,2129,7,2165,6,87,
            20,21,22,332,117,118,108,260,114,116,
            167,168,169,170,171,184,185,186,187,336,
            95,335,103,337,339,162,77,338,112,3,
            2257,2263,171,2129,7,2165,6,87,20,21,
            22,332,117,118,108,260,114,116,167,168,
            169,170,171,184,185,186,187,336,95,335,
            103,337,339,162,77,338,587,344,2257,2264,
            171,2129,7,2165,6,87,20,21,22,332,
            117,118,108,260,114,116,167,168,169,170,
            171,184,185,186,187,336,95,335,103,337,
            339,162,77,338,112,3,2257,2265,171,2129,
            7,2165,6,87,20,21,22,332,117,118,
            108,260,114,116,167,168,169,170,171,184,
            185,186,187,336,95,335,103,337,339,162,
            77,338,335,345,2257,2266,171,2129,7,2165,
            6,87,20,21,22,332,117,118,108,260,
            114,116,167,168,169,170,171,184,185,186,
            187,336,95,335,103,337,339,162,77,338,
            112,3,2257,2267,171,2129,7,2165,6,87,
            20,21,22,332,117,118,108,260,114,116,
            167,168,169,170,171,184,185,186,187,336,
            95,335,103,337,339,162,77,338,233,346,
            2257,2268,119,331,7,2165,6,87,20,21,
            22,332,117,118,108,260,114,116,167,168,
            169,170,171,184,185,186,187,336,95,335,
            103,337,339,198,77,338,171,331,7,2165,
            6,87,20,21,22,332,117,118,108,260,
            114,116,167,168,169,170,171,184,185,186,
            187,336,95,335,103,337,339,484,77,338,
            598,625,630,628,634,636,637,643,2250,171,
            331,7,2165,6,87,20,21,22,332,117,
            118,108,260,114,116,167,168,169,170,171,
            184,185,186,187,336,95,335,103,337,339,
            560,77,338,171,331,7,2165,6,87,20,
            21,22,332,117,118,108,260,114,116,167,
            168,169,170,171,184,185,186,187,336,95,
            335,103,337,339,61,77,338,171,331,7,
            2165,6,87,20,21,22,332,117,118,108,
            260,114,116,167,168,169,170,171,184,185,
            186,187,336,95,335,103,337,339,60,77,
            338,171,331,7,2165,6,87,20,21,22,
            332,117,118,108,260,114,116,167,168,169,
            170,171,184,185,186,187,336,95,335,103,
            337,339,75,77,338,171,331,7,2165,6,
            87,20,21,22,332,117,118,108,260,114,
            116,167,168,169,170,171,184,185,186,187,
            336,95,335,103,337,339,74,77,338,171,
            331,7,2165,6,87,20,21,22,332,117,
            118,108,260,114,116,167,168,169,170,171,
            184,185,186,187,336,95,335,103,337,339,
            73,77,338,171,331,7,2165,6,87,20,
            21,22,332,117,118,108,260,114,116,167,
            168,169,170,171,184,185,186,187,336,95,
            335,103,337,339,67,77,338,171,331,7,
            2165,6,87,20,21,22,332,117,118,108,
            260,114,116,167,168,169,170,171,184,185,
            186,187,336,95,335,103,337,339,65,77,
            338,171,331,7,2165,6,87,20,21,22,
            332,117,118,108,260,114,116,167,168,169,
            170,171,184,185,186,187,336,95,335,103,
            337,339,2248,77,338,171,331,7,2165,6,
            87,20,21,22,332,117,118,108,260,114,
            116,167,168,169,170,171,184,185,186,187,
            336,95,335,103,337,339,79,77,338,171,
            331,7,2165,6,87,20,21,22,332,117,
            118,108,260,114,116,167,168,169,170,171,
            184,185,186,187,336,95,335,103,337,339,
            178,77,338,171,331,7,2165,6,87,20,
            21,22,332,117,118,108,260,114,116,167,
            168,169,170,171,184,185,186,187,336,95,
            335,103,337,339,183,77,338,171,331,7,
            2165,6,87,20,21,22,332,117,118,108,
            260,114,116,167,168,169,170,171,184,185,
            186,187,336,95,335,103,337,339,84,77,
            338,171,331,7,2165,6,87,20,21,22,
            332,117,118,108,260,114,116,167,168,169,
            170,171,184,185,186,187,336,95,335,103,
            337,339,69,77,338,171,331,7,2165,6,
            87,20,21,22,332,117,118,108,260,114,
            116,167,168,169,170,171,184,185,186,187,
            336,95,335,103,337,339,2269,77,338,171,
            331,7,2165,6,87,20,21,22,332,117,
            118,108,260,114,116,167,168,169,170,171,
            184,185,186,187,336,95,335,103,337,339,
            199,77,338,171,331,7,2165,6,87,20,
            21,22,332,117,118,108,260,114,116,167,
            168,169,170,171,184,185,186,187,336,95,
            335,103,337,339,85,77,338,171,331,7,
            2165,6,87,20,21,22,332,117,118,108,
            260,114,116,167,168,169,170,171,184,185,
            186,187,336,95,335,103,337,339,2272,77,
            338,171,331,7,2165,6,87,20,21,22,
            332,117,118,108,260,114,116,167,168,169,
            170,171,184,185,186,187,336,95,335,103,
            337,339,163,77,338,171,331,7,2165,6,
            87,20,21,22,332,117,118,108,260,114,
            116,167,168,169,170,171,184,185,186,187,
            336,95,335,103,337,339,2274,77,338,171,
            331,7,2165,6,87,20,21,22,332,117,
            118,108,260,114,116,167,168,169,170,171,
            184,185,186,187,336,95,335,103,337,339,
            164,77,338,275,331,7,2165,6,87,20,
            21,22,332,117,118,108,260,114,116,167,
            168,169,170,171,184,185,186,187,336,95,
            335,103,337,2228,275,331,7,2165,6,87,
            20,21,22,332,117,118,108,260,114,116,
            167,168,169,170,171,184,185,186,187,336,
            95,335,103,2229,275,331,7,2165,6,87,
            20,21,22,332,117,118,108,260,114,116,
            167,168,169,170,171,184,185,186,187,336,
            95,335,103,2233,275,331,7,2165,6,87,
            20,21,22,332,117,118,108,260,114,116,
            167,168,169,170,171,184,185,186,187,336,
            95,335,103,2234,275,331,7,2165,6,87,
            20,21,22,332,117,118,108,260,114,116,
            167,168,169,170,171,184,185,186,187,336,
            101,335,103,275,331,7,2165,6,87,20,
            21,22,332,117,118,108,260,114,116,167,
            168,169,170,171,184,185,186,187,336,100,
            335,103,275,331,7,2165,6,87,20,21,
            22,332,117,118,108,260,114,116,167,168,
            169,170,171,184,185,186,187,336,99,335,
            103,275,331,7,2165,6,87,20,21,22,
            332,117,118,108,260,114,116,167,168,169,
            170,171,184,185,186,187,336,98,335,103,
            275,331,7,2165,6,87,20,21,22,332,
            117,118,108,260,114,116,167,168,169,170,
            171,184,185,186,187,336,97,335,103,275,
            331,7,2165,6,87,20,21,22,332,117,
            118,108,260,114,116,167,168,169,170,171,
            184,185,186,187,336,96,335,103,325,331,
            7,2165,6,87,20,21,22,332,117,118,
            113,260,114,116,167,168,169,170,171,184,
            185,186,187,325,331,7,2165,6,87,20,
            21,22,332,117,118,112,260,114,116,167,
            168,169,170,171,184,185,186,187,325,331,
            7,2165,6,87,20,21,22,332,117,118,
            110,260,114,116,167,168,169,170,171,184,
            185,186,187,325,331,7,2165,6,87,20,
            21,22,332,117,118,109,260,114,116,167,
            168,169,170,171,184,185,186,187,373,331,
            7,2165,6,87,20,21,22,332,117,118,
            112,260,114,116,167,168,169,170,171,184,
            185,186,187,487,331,7,10,6,9,20,
            21,22,863,421,331,7,2210,6,641,586,
            538,616,2018,123,487,331,7,10,6,9,
            20,21,22,863,444,331,7,2210,6,49,
            2211,2247,49,2108,123,529,112,3,644,614,
            2108,49,340,2045,114,862,15,647,543,593,
            649,52,54,55,56,616,2018,867,17,64,
            565,121,124,2059,866,489,12,49,2108,653,
            49,2108,2271,2058,565,409,788,499,122,712,
            150,151,120,124,63,2246,53,54,55,56,
            81,53,54,55,56,125,58,2075,613,66,
            68,867,17,613,2020,49,2018,712,2245,125,
            712,2166,865,49,2113,71,2212,88,636,527,
            148,83,49,2134,613,499,655,499,572,499,
            499,146,499,499,148,499,13,2209,499,2236,
            499,13,499,499,2270,499,499,499,499,2254,
            499,867,19,2255,499,499,470,13,2273,2178,
            11,2180,13,2181,2183,11,2185,2188,470,2195,
            470,470,2196,470,2197,470,2200,2202,470,2203,
            2204,2205,2206,48,2207,470,470,470,2208,2070,
            470,143,470,470,470,470,470,470,470,498,
            499,574,548,142,641,141,140,657,139,659,
            138,662,666,137,668,670,557,570,545,477,
            136,135,134,488,526,133,219,132,131,130,
            129,128,127,126,2084,674,271,675,642,2253,
            573,664,76,422,678,278,679,567,680,72,
            59,681,685,686,692,693,694,698,700,687,
            702,705,706,707,708,2277,2277
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,0,4,5,6,7,8,9,
            0,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,0,49,
            0,51,4,53,54,55,56,57,58,59,
            60,61,52,0,1,2,66,4,5,6,
            7,8,9,0,11,12,13,14,15,16,
            17,18,19,20,21,22,23,24,25,26,
            27,28,29,30,31,32,33,34,35,36,
            37,38,39,40,41,42,43,44,45,46,
            47,0,49,0,51,4,0,0,0,1,
            2,3,4,5,6,7,8,9,65,11,
            12,13,14,15,16,17,18,19,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,39,40,41,
            42,43,44,45,46,47,53,49,52,51,
            0,1,2,0,4,5,6,7,8,9,
            64,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,0,49,
            2,51,0,1,2,0,4,5,6,7,
            8,9,0,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            0,49,2,51,0,1,2,0,4,5,
            6,7,8,9,0,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,90,49,0,1,2,50,4,5,
            6,7,8,9,0,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,0,1,2,91,4,5,6,7,
            8,9,48,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            0,0,2,2,4,5,6,7,8,9,
            0,11,12,13,14,15,16,17,18,19,
            20,21,22,0,0,2,16,4,5,6,
            7,8,9,23,11,12,13,14,15,16,
            17,18,19,20,21,22,0,0,2,0,
            1,5,6,7,8,9,0,10,2,0,
            1,5,6,7,8,9,0,0,0,2,
            4,0,5,6,7,8,9,0,0,79,
            80,81,82,83,84,85,86,87,88,89,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,0,0,2,0,1,
            5,6,7,8,9,0,10,0,10,0,
            1,62,0,55,0,57,58,0,13,14,
            15,0,55,0,57,58,0,13,14,15,
            69,70,11,12,0,1,0,11,12,0,
            72,0,0,0,48,3,50,0,52,0,
            11,12,54,10,56,0,0,59,0,10,
            64,54,0,56,0,0,59,0,10,0,
            0,62,60,61,10,10,0,60,61,10,
            10,0,0,0,48,0,50,4,0,4,
            48,10,10,0,0,52,3,0,1,0,
            77,67,3,0,1,0,0,66,53,3,
            0,0,0,0,1,53,0,1,0,1,
            10,74,0,1,0,1,0,1,0,1,
            63,0,1,0,78,0,1,0,1,0,
            1,65,48,0,0,1,3,0,0,0,
            0,3,3,3,0,0,0,3,3,71,
            48,0,0,0,3,3,3,0,63,0,
            3,0,3,2,0,0,0,0,3,0,
            3,0,0,0,0,0,75,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,68,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            73,0,0,0,50,0,50,0,0,0,
            0,0,76,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            43,869,2153,2277,2278,2143,2142,2140,2139,2152,
            4,2148,2145,2137,2135,2087,2150,2156,2155,2157,
            2164,2160,2158,1903,2310,2311,2312,2314,2313,2301,
            2300,2302,2303,2304,2305,333,2306,2307,2308,2467,
            2465,2466,2363,1878,2468,2469,2470,2471,2277,826,
            2277,2077,2278,2051,2046,598,674,522,446,750,
            262,263,257,173,869,2153,240,2278,2143,2142,
            2140,2139,2152,2277,2148,2145,2137,2135,2087,2150,
            2156,2155,2157,2164,2160,2158,1978,2310,2311,2312,
            2314,2313,2301,2300,2302,2303,2304,2305,333,2306,
            2307,2308,2467,2465,2466,2363,1878,2468,2469,2470,
            2471,2,826,40,2077,2278,4,2277,2277,869,
            2153,2421,2278,2143,2142,2140,2139,2152,180,2148,
            2145,2137,2135,2087,2150,2156,2155,2157,2164,2160,
            2158,1903,2310,2311,2312,2314,2313,2301,2300,2302,
            2303,2304,2305,333,2306,2307,2308,2467,2465,2466,
            2363,1878,2468,2469,2470,2471,2051,826,257,2077,
            2277,869,2153,2277,2278,2143,2142,2140,2139,2152,
            252,2148,2145,2137,2135,2087,2150,2156,2155,2157,
            2164,2160,2158,1903,2310,2311,2312,2314,2313,2301,
            2300,2302,2303,2304,2305,333,2306,2307,2308,2467,
            2465,2466,2363,1878,2468,2469,2470,2471,2277,826,
            1277,2077,180,869,2153,2277,2278,2143,2142,2140,
            2139,2152,2277,2148,2145,2137,2135,2087,2150,2156,
            2155,2157,2164,2160,2158,1978,2310,2311,2312,2314,
            2313,2301,2300,2302,2303,2304,2305,333,2306,2307,
            2308,2467,2465,2466,2363,1878,2468,2469,2470,2471,
            2277,826,1311,2077,2277,869,2153,2277,2278,2143,
            2142,2140,2139,2152,2277,2148,2145,2137,2135,2087,
            2150,2156,2155,2157,2164,2160,2158,1903,2310,2311,
            2312,2314,2313,2301,2300,2302,2303,2304,2305,333,
            2306,2307,2308,2467,2465,2466,2363,1878,2468,2469,
            2470,2471,2326,826,2277,869,2153,1447,2278,2143,
            2142,2140,2139,2152,82,2148,2145,2137,2135,2087,
            2150,2156,2155,2157,2164,2160,2158,1903,2310,2311,
            2312,2314,2313,2301,2300,2302,2303,2304,2305,333,
            2306,2307,2308,2467,2465,2466,2363,1878,2468,2469,
            2470,2471,181,869,2153,2276,2278,2143,2142,2140,
            2139,2152,2080,2148,2145,2137,2135,2087,2150,2156,
            2155,2157,2164,2160,2158,1903,2310,2311,2312,2314,
            2313,2301,2300,2302,2303,2304,2305,333,2306,2307,
            2308,2467,2465,2466,2363,1878,2468,2469,2470,2471,
            2277,2277,2153,1413,2278,2143,2142,2140,2139,2152,
            102,2148,2145,2137,2135,2087,2150,2156,2155,2157,
            2164,2160,2158,2277,2277,2153,383,2278,2143,2142,
            2140,2139,2152,302,2148,2145,2137,2135,2087,2150,
            2156,2155,2157,2164,2160,2158,91,2277,1849,2277,
            792,1791,1762,1733,1704,1820,94,903,1849,2277,
            2003,1791,1762,1733,1704,1820,2277,93,2277,1849,
            2278,111,1791,1762,1733,1704,1820,70,166,2048,
            2225,2224,2222,2219,2221,2217,2136,2079,2060,2057,
            2310,2311,2312,2314,2313,2301,2300,2302,2303,2304,
            2305,864,2306,2307,2308,92,4,1849,2277,2065,
            1791,1762,1733,1704,1820,89,2024,62,2024,2277,
            2021,268,2277,598,90,522,446,57,1674,1644,
            1614,105,598,78,522,446,107,1674,1644,1614,
            2034,2013,1953,1928,147,792,2277,1953,1928,106,
            2474,39,2277,4,14,2422,14,2277,257,2277,
            1953,1928,2046,2024,674,50,2277,750,2277,937,
            252,2046,51,674,2277,2277,750,2277,971,2277,
            2277,2049,262,263,1005,1039,2277,262,263,1073,
            2039,2277,14,80,2132,16,1481,2278,182,2278,
            1379,1107,2024,2277,174,257,2396,2277,2003,2277,
            1583,235,2309,2277,2021,2277,2277,240,2051,2315,
            2277,2277,18,2277,2123,2051,2277,412,2277,450,
            2024,1141,2277,488,2277,526,2277,564,2277,602,
            2449,2277,640,2277,1175,2277,678,2277,716,2277,
            754,2456,349,2277,2277,2065,2214,2277,2277,2277,
            2277,2438,2437,2436,2277,2277,2277,2435,2434,1243,
            2115,2277,2277,2277,2433,2432,2431,2277,2472,2277,
            2430,11,2429,1277,2277,2277,2277,2277,2442,2277,
            2477,2277,2277,2277,2277,2277,1345,2277,2277,2277,
            2277,2277,2277,2277,2277,2277,2277,2277,2277,2277,
            2277,2426,2277,2277,2277,2277,2277,2277,2277,2277,
            2277,2277,2277,2277,2277,2277,2277,2277,2277,2277,
            2042,2277,2277,2277,1515,2277,1549,2277,2277,2277,
            2277,2277,2381
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            1,351,114,114,207,207,207,207,207,207,
            303,303,12,311,311,311,311,311,311,311,
            311,311,311,311,311,311,311,311,311,311,
            311,116,167,160,160,12,14,14,170,174,
            172,176,185,182,114,308,350,204,163,156,
            299,303,303,303,303,303,303,12,12,210,
            345,345,345,345,345,345,345,345,345,345,
            345,345,345,345,345,345,345,345,114,114,
            168,66,99,305,262,263,268,40,14,14,
            14,14,13,13,13,13,13,13,13,13,
            13,13,214,212,314,205,204,153,262,356,
            99,200,12,12,12,12,114,12,12,216,
            114,62,64,60,69,61,263,345,345,62,
            263,303,265,167,345,345,345,345,345,345,
            345,345,345,345,345,172,172,182,176,176,
            176,12,114,58,263,353,58,345,343,359,
            265,361,12,12,67,114,168,114,12,12,
            12,12,12,12,12,12,12,12,12,303,
            12,58,12,12,319,348,317,263,363,321,
            263,263,263,263,263,263,263,263,263,12,
            366,114,12,318,114,12,348,263,348,347,
            12,12,263
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            91,61,60,54,59,56,55,57,58,53,
            66,51,49,47,46,35,24,25,26,28,
            27,40,41,39,44,45,42,30,29,31,
            32,33,34,36,37,38,1,23,43,20,
            21,22,19,17,18,9,16,11,12,5,
            6,7,8,13,14,15,4,2,0,71,
            48,63,0,65,0,63,49,51,65,47,
            46,40,41,39,44,45,20,21,22,19,
            17,18,2,9,16,11,12,5,6,7,
            8,13,14,15,42,1,23,43,30,29,
            31,32,33,34,36,37,38,35,24,25,
            26,28,27,4,0,5,6,2,7,8,
            9,1,3,63,67,68,48,69,16,23,
            11,12,70,71,50,72,73,74,75,76,
            13,14,15,77,78,54,56,59,60,61,
            52,64,53,90,91,55,57,58,0,1,
            62,0,68,10,73,52,72,1,67,69,
            70,11,12,16,23,2,9,5,6,7,
            8,13,14,15,3,63,48,71,50,74,
            75,76,78,55,57,58,60,61,77,91,
            54,59,56,53,90,0,10,4,0,74,
            0,63,48,78,0,49,47,46,35,24,
            25,26,28,27,40,41,39,44,45,20,
            21,22,19,17,18,2,9,16,11,12,
            5,6,7,8,13,14,15,42,30,29,
            31,32,33,34,36,37,38,1,23,43,
            51,4,3,0,3,48,0,80,81,82,
            84,83,85,86,87,88,89,79,20,21,
            22,19,17,18,2,9,16,11,12,5,
            6,7,8,13,14,15,4,0,54,59,
            56,1,10,0,63,4,0,91,53,0,
            1,72,0,2,10,0,10,2,73,0,
            5,6,2,7,8,9,3,67,69,16,
            23,11,12,70,72,13,14,15,77,48,
            50,64,10,52,1,0,10,50,0,66,
            91,0,53,90,91,61,60,0,75,0,
            68,0,50,48,0,76,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            1,5,4,29,16,16,16,16,16,16,
            5,5,3,47,47,47,47,47,47,47,
            47,47,47,47,47,47,47,47,47,47,
            47,5,47,5,5,3,3,3,8,5,
            5,5,5,5,44,35,51,21,5,42,
            32,5,5,5,5,5,5,3,3,5,
            40,40,40,40,40,40,40,40,40,40,
            40,40,40,40,40,40,40,40,4,4,
            39,12,3,44,25,5,18,4,3,3,
            3,3,3,3,3,3,3,3,3,3,
            3,3,5,5,49,5,35,53,25,37,
            3,23,3,3,3,3,28,3,3,3,
            4,5,10,6,3,5,5,5,5,5,
            5,33,5,47,5,5,5,5,5,5,
            5,5,5,5,5,5,5,5,5,5,
            5,3,44,5,5,55,5,5,33,5,
            5,5,3,3,12,25,39,44,3,3,
            3,3,3,3,3,3,3,3,3,33,
            3,5,3,3,5,5,49,5,5,49,
            5,5,5,5,5,5,5,5,5,3,
            5,44,3,5,4,3,5,5,5,49,
            3,3,5
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            65,54,9,1,0,81,0,74,0,82,
            0,9,1,62,0,39,0,1,75,0,
            54,0,49,0,46,1,0,70,1,56,
            0,69,38,0,42,0,68,0,57,35,
            0,72,0,1,40,0,34,0,41,0,
            55,0,50,0,48,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            7,3,8,93,1,2,4,5,6,14,
            21,22,38,39,40,19,63,64,65,66,
            67,68,20,47,48,49,50,51,69,70,
            71,72,73,74,75,76,77,78,29,30,
            31,33,41,45,46,79,80,13,34,25,
            43,15,86,81,82,83,84,85,89,90,
            91,9,10,18,32,87,11,12,16,23,
            24,26,27,35,36,37,42,44,52,53,
            54,55,56,57,58,59,60,61,62,88,
            92,17,94
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            95,96,97,0,0,0,0,0,103,0,
            0,125,126,0,0,0,0,0,0,0,
            0,0,0,0,124,122,123,0,121,120,
            106,0,117,0,130,99,132,100,0,119,
            0,111,0,0,0,101,102,107,108,109,
            118,98,0,105,110,115,0,128,0,0,
            134,0,0,0,104,0,0,112,113,114,
            0,116,0,127,129,131,0,0,0,133,
            0,135,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            1,87,31,11,96,21,27,41,45,49,
            53,57,61,65,69,73,77,120,124,37,
            81,84,114,105
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            9,94,9,17,101,25,25,9,9,9,
            9,9,9,9,9,9,9,9,9,17,
            9,9,117,108
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            78,28,78,78,28,18,17,77,77,77,
            77,77,77,77,77,77,77,7,6,78,
            35,14,32,28
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            3,76,3,50,75,63,63,3,3,3,
            3,3,3,3,3,3,3,3,3,50,
            3,3,78,74
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            1,33,1,1,33,26,26,1,1,1,
            1,1,1,1,1,1,1,24,24,1,
            3,26,43,33
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            124,50,133,73,129,1,79,0,8,0,
            133,73,129,1,79,0,25,106,8,0,
            166,62,35,0,10,0,172,62,102,0,
            124,50,133,1,79,0,133,1,79,0,
            130,1,89,0,130,1,88,0,130,1,
            87,0,130,1,86,0,130,1,85,0,
            130,1,83,0,130,1,84,0,130,1,
            82,0,130,1,81,0,130,1,80,0,
            169,1,0,124,1,0,124,75,124,74,
            124,49,0,37,0,124,74,124,49,0,
            36,106,37,0,124,49,0,35,106,36,
            106,37,0,144,51,0,44,106,0,146,
            1,35,0,145,1,102,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            2013,0,2084,2070,2208,2207,2206,2205,2204,2203,
            2202,2200,2197,2196,2195,2188,2185,2183,2181,2180,
            2178,2166,0,2024,2003,1978,1953,1928,383,302,
            1903,1878,1674,1644,1614,1583,1849,1820,1791,1762,
            1733,1704,1549,1515,1481,1447,1413,1379,1345,1311,
            1277,754,716,678,640,602,564,526,488,450,
            412,349,1243,1209,1175,792,1141,1107,1073,1039,
            1005,971,268,937,903,869,826,201,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,156,66,53,58,57,55,56,59,54,
            60,61,49,15,14,13,8,7,6,5,
            12,11,16,9,2,18,17,19,22,21,
            20,94,96,102,35,1,43,23,106,120,
            118,122,126,123,51,147,158,95,94,149,
            95,132,132,132,132,132,132,10,10,124,
            127,127,127,127,127,127,127,127,127,127,
            127,127,127,127,127,127,127,127,64,52,
            127,62,1,62,1,124,70,69,23,16,
            12,11,8,7,6,5,9,2,77,15,
            14,13,144,133,94,160,147,165,1,131,
            10,162,10,10,10,10,10,10,74,1,
            67,172,155,124,23,173,145,102,35,166,
            146,94,139,96,79,89,88,87,86,85,
            83,84,82,81,80,118,118,123,122,122,
            122,78,48,134,146,161,149,95,94,124,
            169,96,175,71,48,48,127,1,1,1,
            1,1,1,1,1,1,1,1,2,3,
            2,131,75,48,129,133,94,130,129,94,
            130,130,130,130,130,130,130,130,130,2,
            124,73,50,134,48,50,133,124,129,94,
            50,50,124
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "", //$NON-NLS-1$
            ">", //$NON-NLS-1$
            "<", //$NON-NLS-1$
            "=", //$NON-NLS-1$
            ">=", //$NON-NLS-1$
            "<=", //$NON-NLS-1$
            "<>", //$NON-NLS-1$
            "(", //$NON-NLS-1$
            ")", //$NON-NLS-1$
            "{", //$NON-NLS-1$
            "}", //$NON-NLS-1$
            "[", //$NON-NLS-1$
            "]", //$NON-NLS-1$
            ",", //$NON-NLS-1$
            ":", //$NON-NLS-1$
            "::", //$NON-NLS-1$
            ".", //$NON-NLS-1$
            "!", //$NON-NLS-1$
            "#", //$NON-NLS-1$
            "+", //$NON-NLS-1$
            "-", //$NON-NLS-1$
            "*", //$NON-NLS-1$
            "/", //$NON-NLS-1$
            "->", //$NON-NLS-1$
            "..", //$NON-NLS-1$
            "|", //$NON-NLS-1$
            "@pre", //$NON-NLS-1$
            ";", //$NON-NLS-1$
            "$empty", //$NON-NLS-1$
            "STRING_LITERAL", //$NON-NLS-1$
            "INTEGER_LITERAL", //$NON-NLS-1$
            "REAL_LITERAL", //$NON-NLS-1$
            "INTEGER_RANGE_START", //$NON-NLS-1$
            "self", //$NON-NLS-1$
            "if", //$NON-NLS-1$
            "then", //$NON-NLS-1$
            "else", //$NON-NLS-1$
            "endif", //$NON-NLS-1$
            "and", //$NON-NLS-1$
            "or", //$NON-NLS-1$
            "xor", //$NON-NLS-1$
            "not", //$NON-NLS-1$
            "implies", //$NON-NLS-1$
            "let", //$NON-NLS-1$
            "in", //$NON-NLS-1$
            "true", //$NON-NLS-1$
            "false", //$NON-NLS-1$
            "Set", //$NON-NLS-1$
            "Bag", //$NON-NLS-1$
            "Sequence", //$NON-NLS-1$
            "Collection", //$NON-NLS-1$
            "OrderedSet", //$NON-NLS-1$
            "iterate", //$NON-NLS-1$
            "forAll", //$NON-NLS-1$
            "exists", //$NON-NLS-1$
            "isUnique", //$NON-NLS-1$
            "any", //$NON-NLS-1$
            "one", //$NON-NLS-1$
            "collect", //$NON-NLS-1$
            "select", //$NON-NLS-1$
            "reject", //$NON-NLS-1$
            "collectNested", //$NON-NLS-1$
            "sortedBy", //$NON-NLS-1$
            "oclIsKindOf", //$NON-NLS-1$
            "oclIsTypeOf", //$NON-NLS-1$
            "oclAsType", //$NON-NLS-1$
            "oclIsUndefined", //$NON-NLS-1$
            "oclIsInvalid", //$NON-NLS-1$
            "allInstances", //$NON-NLS-1$
            "String", //$NON-NLS-1$
            "Integer", //$NON-NLS-1$
            "Real", //$NON-NLS-1$
            "Float", //$NON-NLS-1$
            "Double", //$NON-NLS-1$
            "Boolean", //$NON-NLS-1$
            "Tuple", //$NON-NLS-1$
            "OclAny", //$NON-NLS-1$
            "OclVoid", //$NON-NLS-1$
            "OclInvalid", //$NON-NLS-1$
            "null", //$NON-NLS-1$
            "invalid", //$NON-NLS-1$
            "inv", //$NON-NLS-1$
            "pre", //$NON-NLS-1$
            "exp", //$NON-NLS-1$
            "post", //$NON-NLS-1$
            "body", //$NON-NLS-1$
            "context", //$NON-NLS-1$
            "package", //$NON-NLS-1$
            "endpackage", //$NON-NLS-1$
            "def", //$NON-NLS-1$
            "derive", //$NON-NLS-1$
            "init", //$NON-NLS-1$
            "EOF_TOKEN", //$NON-NLS-1$
            "IDENTIFIER", //$NON-NLS-1$
            "ERROR_TOKEN", //$NON-NLS-1$
            "identifier", //$NON-NLS-1$
            "sPathName", //$NON-NLS-1$
            "pathName", //$NON-NLS-1$
            "typePathName", //$NON-NLS-1$
            "variableDeclaration", //$NON-NLS-1$
            "withTypeExpression", //$NON-NLS-1$
            "variableDeclarationWithType", //$NON-NLS-1$
            "variableDeclarationWithTypeN", //$NON-NLS-1$
            "collectionKind", //$NON-NLS-1$
            "packageDeclarationN", //$NON-NLS-1$
            "contextDeclarationN", //$NON-NLS-1$
            "oclExpression", //$NON-NLS-1$
            "initOrDerValue", //$NON-NLS-1$
            "invOrDef", //$NON-NLS-1$
            "prePostOrBodyDecl", //$NON-NLS-1$
            "packageDeclaration", //$NON-NLS-1$
            "contextDeclaration", //$NON-NLS-1$
            "initOrDerValueN", //$NON-NLS-1$
            "invOrDefN", //$NON-NLS-1$
            "defExpression", //$NON-NLS-1$
            "operation", //$NON-NLS-1$
            "prePostOrBodyDeclN", //$NON-NLS-1$
            "logicalExpression", //$NON-NLS-1$
            "variableAssignmentN", //$NON-NLS-1$
            "variableAssignment", //$NON-NLS-1$
            "booleanExpression", //$NON-NLS-1$
            "relationalExpression", //$NON-NLS-1$
            "compareableExpression", //$NON-NLS-1$
            "additiveExpression", //$NON-NLS-1$
            "multiplicativeExpression", //$NON-NLS-1$
            "unaryExpression", //$NON-NLS-1$
            "postfixExpression", //$NON-NLS-1$
            "propertyInvocation", //$NON-NLS-1$
            "propertyCall", //$NON-NLS-1$
            "loopExp", //$NON-NLS-1$
            "arguments", //$NON-NLS-1$
            "argumentN", //$NON-NLS-1$
            "iterContents", //$NON-NLS-1$
            "collectionLiteralPartN", //$NON-NLS-1$
            "collectionLiteralPart", //$NON-NLS-1$
            "integerLiteralRange" //$NON-NLS-1$
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 93,
           SCOPE_UBOUND      = 23,
           SCOPE_SIZE        = 24,
           MAX_NAME_LENGTH   = 28;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 213,
           NT_OFFSET         = 93,
           LA_STATE_OFFSET   = 2477,
           MAX_LA            = 1,
           NUM_RULES         = 200,
           NUM_NONTERMINALS  = 83,
           NUM_SYMBOLS       = 176,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 201,
           IDENTIFIER_SYMBOL = 4,
           EOFT_SYMBOL       = 91,
           EOLT_SYMBOL       = 91,
           ACCEPT_ACTION     = 2276,
           ERROR_ACTION      = 2277;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
