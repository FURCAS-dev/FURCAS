/**
 * Generated by the MOIN Generator Version 3.0
 **/

package org.omg.ocl.attaching.__impl;

public class ClassifierInvariantWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<org.omg.ocl.attaching.ClassifierInvariant> implements org.omg.ocl.attaching.ClassifierInvariant,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The ClassifierInvariant wrapper
     */
    public ClassifierInvariantWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, org.omg.ocl.attaching.__impl.ClassifierInvariantImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private org.omg.ocl.attaching.__impl.ClassifierInvariantImpl getCastWrappedObject() {
        return (org.omg.ocl.attaching.__impl.ClassifierInvariantImpl) getWrappedObject();
    }

    public org.omg.ocl.attaching.ClassifierInvariant unwrap() {
        return (org.omg.ocl.attaching.ClassifierInvariant) getWrappedObject();
    }
    
    public boolean exists(org.omg.ocl.attaching.OclConstraint _Invariants, com.sap.tc.moin.repository.mmi.model.Classifier _InvariantOf) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg(_Invariants), unwrapArg(_InvariantOf));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg(_Invariants), unwrapArg(_InvariantOf)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection<org.omg.ocl.attaching.OclConstraint> getInvariants(com.sap.tc.moin.repository.mmi.model.Classifier _InvariantOf) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return  wrapResult(getCastWrappedObject().getInvariants(connection, unwrapArg(_InvariantOf)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return  wrapResult(getCastWrappedObject().getInvariants(connection, unwrapArg(_InvariantOf))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection<com.sap.tc.moin.repository.mmi.model.Classifier> getInvariantOf(org.omg.ocl.attaching.OclConstraint _Invariants) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return  wrapResult(getCastWrappedObject().getInvariantOf(connection, unwrapArg(_Invariants)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return  wrapResult(getCastWrappedObject().getInvariantOf(connection, unwrapArg(_Invariants))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(org.omg.ocl.attaching.OclConstraint _Invariants, com.sap.tc.moin.repository.mmi.model.Classifier _InvariantOf) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg(_Invariants), unwrapArg(_InvariantOf));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg(_Invariants), unwrapArg(_InvariantOf)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(org.omg.ocl.attaching.OclConstraint _Invariants, com.sap.tc.moin.repository.mmi.model.Classifier _InvariantOf) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg(_Invariants), unwrapArg(_InvariantOf));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg(_Invariants), unwrapArg(_InvariantOf)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<org.omg.ocl.attaching.ClassifierInvariant> get___JmiInterface() {
        return org.omg.ocl.attaching.ClassifierInvariant.class;
    }

    protected String metaObjectToString() {
        return "org.omg.ocl.attaching.ClassifierInvariant (Java Type)\nOCL.Attaching.ClassifierInvariant (MOF Type)"; //$NON-NLS-1$
    }    
}