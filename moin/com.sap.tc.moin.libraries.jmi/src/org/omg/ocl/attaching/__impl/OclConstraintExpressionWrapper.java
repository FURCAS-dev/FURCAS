/**
 * Generated by the MOIN Generator Version 3.0
 **/

package org.omg.ocl.attaching.__impl;

public class OclConstraintExpressionWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<org.omg.ocl.attaching.OclConstraintExpression> implements org.omg.ocl.attaching.OclConstraintExpression,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The OclConstraintExpression wrapper
     */
    public OclConstraintExpressionWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, org.omg.ocl.attaching.__impl.OclConstraintExpressionImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private org.omg.ocl.attaching.__impl.OclConstraintExpressionImpl getCastWrappedObject() {
        return (org.omg.ocl.attaching.__impl.OclConstraintExpressionImpl) getWrappedObject();
    }

    public org.omg.ocl.attaching.OclConstraintExpression unwrap() {
        return (org.omg.ocl.attaching.OclConstraintExpression) getWrappedObject();
    }
    
    public boolean exists(org.omg.ocl.expressions.OclExpression _OclExpression, org.omg.ocl.attaching.OclConstraint _OclConstraint) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg(_OclExpression), unwrapArg(_OclConstraint));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg(_OclExpression), unwrapArg(_OclConstraint)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public org.omg.ocl.expressions.OclExpression getOclExpression(org.omg.ocl.attaching.OclConstraint _OclConstraint) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return  wrapResult(getCastWrappedObject().getOclExpression(connection, unwrapArg(_OclConstraint)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return  wrapResult(getCastWrappedObject().getOclExpression(connection, unwrapArg(_OclConstraint))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public org.omg.ocl.attaching.OclConstraint getOclConstraint(org.omg.ocl.expressions.OclExpression _OclExpression) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return  wrapResult(getCastWrappedObject().getOclConstraint(connection, unwrapArg(_OclExpression)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return  wrapResult(getCastWrappedObject().getOclConstraint(connection, unwrapArg(_OclExpression))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(org.omg.ocl.expressions.OclExpression _OclExpression, org.omg.ocl.attaching.OclConstraint _OclConstraint) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg(_OclExpression), unwrapArg(_OclConstraint));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg(_OclExpression), unwrapArg(_OclConstraint)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(org.omg.ocl.expressions.OclExpression _OclExpression, org.omg.ocl.attaching.OclConstraint _OclConstraint) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg(_OclExpression), unwrapArg(_OclConstraint));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg(_OclExpression), unwrapArg(_OclConstraint)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<org.omg.ocl.attaching.OclConstraintExpression> get___JmiInterface() {
        return org.omg.ocl.attaching.OclConstraintExpression.class;
    }

    protected String metaObjectToString() {
        return "org.omg.ocl.attaching.OclConstraintExpression (Java Type)\nOCL.Attaching.OclConstraintExpression (MOF Type)"; //$NON-NLS-1$
    }    
}