/**
 * Generated by the MOIN Generator Version 3.0
 **/

package org.omg.ocl.__impl;

public class OclPackageWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefPackageWrapperImpl<org.omg.ocl.__impl.OclPackageImpl> implements org.omg.ocl.OclPackage,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The OclPackage wrapper
     */
    public OclPackageWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, org.omg.ocl.__impl.OclPackageImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    private org.omg.ocl.__impl.OclPackageImpl getCastWrappedObject() {
        return (org.omg.ocl.__impl.OclPackageImpl) getWrappedObject();
    }
    
    public org.omg.ocl.__impl.OclPackageImpl unwrap() {
        return (org.omg.ocl.__impl.OclPackageImpl) getWrappedObject();
    }
    
    public org.omg.ocl.types.TypesPackage getTypes()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return  wrapResult(getCastWrappedObject().getTypes(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return  wrapResult(getCastWrappedObject().getTypes(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public org.omg.ocl.expressions.ExpressionsPackage getExpressions()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return  wrapResult(getCastWrappedObject().getExpressions(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return  wrapResult(getCastWrappedObject().getExpressions(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public org.omg.ocl.attaching.AttachingPackage getAttaching()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return  wrapResult(getCastWrappedObject().getAttaching(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return  wrapResult(getCastWrappedObject().getAttaching(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public org.omg.ocl.stdlibrary.StdLibraryPackage getStdLibrary()
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return  wrapResult(getCastWrappedObject().getStdLibrary(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return  wrapResult(getCastWrappedObject().getStdLibrary(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    // methods for structure type creators
    
    public java.lang.Class<org.omg.ocl.OclPackage> get___JmiInterface() {
        return org.omg.ocl.OclPackage.class;
    }
    
    protected String metaObjectToString() {
        return "org.omg.ocl.OclPackage (Java Type)\nOCL (MOF Type)"; //$NON-NLS-1$
    }
}