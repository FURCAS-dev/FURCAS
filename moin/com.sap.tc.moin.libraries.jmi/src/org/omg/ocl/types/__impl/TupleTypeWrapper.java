/**
 * Generated by the MOIN Generator Version 3.0
 **/

package org.omg.ocl.types.__impl;

public class TupleTypeWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefObjectWrapperImpl<org.omg.ocl.types.__impl.TupleTypeImpl> implements org.omg.ocl.types.TupleType,com.sap.tc.moin.repository.Partitionable {

        
    private static final java.util.Map<java.lang.String, java.lang.Integer> OPERATION_IDS;
    
    static {
        
        OPERATION_IDS = new java.util.HashMap<java.lang.String, java.lang.Integer>();
        OPERATION_IDS.put("findRequiredElements", Integer.valueOf(0)); //$NON-NLS-1$
        OPERATION_IDS.put("isRequiredBecause", Integer.valueOf(1)); //$NON-NLS-1$
        OPERATION_IDS.put("isFrozen", Integer.valueOf(2)); //$NON-NLS-1$
        OPERATION_IDS.put("isVisible", Integer.valueOf(3)); //$NON-NLS-1$
        OPERATION_IDS.put("lookupElement", Integer.valueOf(4)); //$NON-NLS-1$
        OPERATION_IDS.put("resolveQualifiedName", Integer.valueOf(5)); //$NON-NLS-1$
        OPERATION_IDS.put("findElementsByType", Integer.valueOf(6)); //$NON-NLS-1$
        OPERATION_IDS.put("nameIsValid", Integer.valueOf(7)); //$NON-NLS-1$
        OPERATION_IDS.put("allSupertypes", Integer.valueOf(8)); //$NON-NLS-1$
        OPERATION_IDS.put("lookupElementExtended", Integer.valueOf(9)); //$NON-NLS-1$
        OPERATION_IDS.put("findElementsByTypeExtended", Integer.valueOf(10)); //$NON-NLS-1$
    }

    public TupleTypeWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, org.omg.ocl.types.__impl.TupleTypeImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    private org.omg.ocl.types.__impl.TupleTypeImpl getCastWrappedObject() {
        return (org.omg.ocl.types.__impl.TupleTypeImpl) getWrappedObject();
    }
    
    private org.omg.ocl.types.__impl.TupleTypeImpl getCastWrappedObject(com.sap.tc.moin.repository.core.CorePartitionable resolved) {
        return (org.omg.ocl.types.__impl.TupleTypeImpl) resolved;
    }
    
    public org.omg.ocl.types.__impl.TupleTypeImpl unwrap() {
        return (org.omg.ocl.types.__impl.TupleTypeImpl) getWrappedObject();
    }
        
    // methods for attributes
    public java.lang.String getName() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        com.sap.tc.moin.repository.core.CorePartitionable resolved = mriReference.getIfResolved();
        if (resolved != null) {
            return getCastWrappedObject(resolved).getName();
        }
            try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().getName();
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().getName(); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public void setName(java.lang.String newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setName(connection, newValue);
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setName(connection, newValue);
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public java.util.List<java.lang.String> getQualifiedName() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return  wrapResult(getCastWrappedObject().getQualifiedName(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return  wrapResult(getCastWrappedObject().getQualifiedName(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public java.lang.String getAnnotation() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        com.sap.tc.moin.repository.core.CorePartitionable resolved = mriReference.getIfResolved();
        if (resolved != null) {
            return getCastWrappedObject(resolved).getAnnotation();
        }
            try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().getAnnotation();
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().getAnnotation(); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public void setAnnotation(java.lang.String newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setAnnotation(connection, newValue);
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setAnnotation(connection, newValue);
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public boolean isRoot() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        com.sap.tc.moin.repository.core.CorePartitionable resolved = mriReference.getIfResolved();
        if (resolved != null) {
            return getCastWrappedObject(resolved).isRoot();
        }
            try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().isRoot();
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().isRoot(); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public void setRoot(boolean newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setRoot(connection, newValue);
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setRoot(connection, newValue);
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public boolean isLeaf() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        com.sap.tc.moin.repository.core.CorePartitionable resolved = mriReference.getIfResolved();
        if (resolved != null) {
            return getCastWrappedObject(resolved).isLeaf();
        }
            try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().isLeaf();
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().isLeaf(); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public void setLeaf(boolean newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setLeaf(connection, newValue);
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setLeaf(connection, newValue);
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public boolean isAbstract() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        com.sap.tc.moin.repository.core.CorePartitionable resolved = mriReference.getIfResolved();
        if (resolved != null) {
            return getCastWrappedObject(resolved).isAbstract();
        }
            try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().isAbstract();
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().isAbstract(); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public void setAbstract(boolean newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setAbstract(connection, newValue);
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setAbstract(connection, newValue);
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public com.sap.tc.moin.repository.mmi.model.VisibilityKind getVisibility() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        com.sap.tc.moin.repository.core.CorePartitionable resolved = mriReference.getIfResolved();
        if (resolved != null) {
            return getCastWrappedObject(resolved).getVisibility();
        }
            try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().getVisibility();
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().getVisibility(); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public void setVisibility(com.sap.tc.moin.repository.mmi.model.VisibilityKind newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setVisibility(connection, newValue);
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setVisibility(connection, newValue);
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

     
    // methods for references
    public java.util.Collection<com.sap.tc.moin.repository.mmi.model.ModelElement> getRequiredElements() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return  wrapResult(getCastWrappedObject().getRequiredElements(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return  wrapResult(getCastWrappedObject().getRequiredElements(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public com.sap.tc.moin.repository.mmi.model.Namespace getContainer() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return  wrapResult(getCastWrappedObject().getContainer(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return  wrapResult(getCastWrappedObject().getContainer(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setContainer(com.sap.tc.moin.repository.mmi.model.Namespace newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setContainer(connection, unwrapArg(newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setContainer(connection, unwrapArg(newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public java.util.Collection<com.sap.tc.moin.repository.mmi.model.Constraint> getConstraints() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return  wrapResult(getCastWrappedObject().getConstraints(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return  wrapResult(getCastWrappedObject().getConstraints(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public java.util.List<com.sap.tc.moin.repository.mmi.model.ModelElement> getContents() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return  wrapResult(getCastWrappedObject().getContents(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return  wrapResult(getCastWrappedObject().getContents(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



    public java.util.List<com.sap.tc.moin.repository.mmi.model.GeneralizableElement> getSupertypes() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return  wrapResult(getCastWrappedObject().getSupertypes(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return  wrapResult(getCastWrappedObject().getSupertypes(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }



   
    // methods for modeled operations
    public java.util.Collection<com.sap.tc.moin.repository.mmi.model.ModelElement> findRequiredElements(java.util.Collection<? extends java.lang.String> kinds, boolean recursive) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(2);
        try {
            parameterList.add(kinds);
            parameterList.add(recursive);
            return (java.util.Collection<com.sap.tc.moin.repository.mmi.model.ModelElement>)___invokeOperation(connection, 0, "45ED2E294BCAFBE3507348AD004AFDD40264E06F", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public boolean isRequiredBecause(com.sap.tc.moin.repository.mmi.model.ModelElement otherElement, java.lang.String[] reason) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(2);
        try {
            parameterList.add(otherElement);
            parameterList.add(reason);
            return (java.lang.Boolean)___invokeOperation(connection, 1, "45ED2E297DF5E990114B49CA0CBEA8DA07C6AA4B", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public boolean isFrozen() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.lang.Boolean)___invokeOperation(connection, 2, "45ED2E29B53D3F263FF6443821FCFDF1E84D3C01", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public boolean isVisible(com.sap.tc.moin.repository.mmi.model.ModelElement otherElement) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(1);
        try {
            parameterList.add(otherElement);
            return (java.lang.Boolean)___invokeOperation(connection, 3, "45ED2E296CA3E56677D84D5B064884CBEE6CF6C5", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public com.sap.tc.moin.repository.mmi.model.ModelElement lookupElement(java.lang.String name) throws com.sap.tc.moin.repository.mmi.model.NameNotFoundException, com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(1);
        try {
            parameterList.add(name);
            return (com.sap.tc.moin.repository.mmi.model.ModelElement)___invokeOperation(connection, 4, "45ED2E29A46B2E1F1D41471439D8EAC7374C9062", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            if (ex instanceof com.sap.tc.moin.repository.mmi.model.NameNotFoundException) {
                throw (com.sap.tc.moin.repository.mmi.model.NameNotFoundException) ex;
            }
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public com.sap.tc.moin.repository.mmi.model.ModelElement resolveQualifiedName(java.util.List<? extends java.lang.String> qualifiedName) throws com.sap.tc.moin.repository.mmi.model.NameNotResolvedException, com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(1);
        try {
            parameterList.add(qualifiedName);
            return (com.sap.tc.moin.repository.mmi.model.ModelElement)___invokeOperation(connection, 5, "45ED2E292F758C846F324B3934EACA27EDF2BA8F", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            if (ex instanceof com.sap.tc.moin.repository.mmi.model.NameNotResolvedException) {
                throw (com.sap.tc.moin.repository.mmi.model.NameNotResolvedException) ex;
            }
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public java.util.List<com.sap.tc.moin.repository.mmi.model.ModelElement> findElementsByType(com.sap.tc.moin.repository.mmi.model.MofClass ofType, boolean includeSubtypes) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(2);
        try {
            parameterList.add(ofType);
            parameterList.add(includeSubtypes);
            return (java.util.List<com.sap.tc.moin.repository.mmi.model.ModelElement>)___invokeOperation(connection, 6, "45ED2E29FE526480A67A4FE319299BE18CA5FDAE", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public boolean nameIsValid(java.lang.String proposedName) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(1);
        try {
            parameterList.add(proposedName);
            return (java.lang.Boolean)___invokeOperation(connection, 7, "45ED2E295F11447845674A07026F84A92D9EF0C9", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public java.util.List<com.sap.tc.moin.repository.mmi.model.GeneralizableElement> allSupertypes() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(0);
        try {
            return (java.util.List<com.sap.tc.moin.repository.mmi.model.GeneralizableElement>)___invokeOperation(connection, 8, "45ED2E29DE792241B29746940E65C693F6378D89", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public com.sap.tc.moin.repository.mmi.model.ModelElement lookupElementExtended(java.lang.String name) throws com.sap.tc.moin.repository.mmi.model.NameNotFoundException, com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(1);
        try {
            parameterList.add(name);
            return (com.sap.tc.moin.repository.mmi.model.ModelElement)___invokeOperation(connection, 9, "45ED2E2904550ECA7F554F3A08CDBA4EAACE323A", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            if (ex instanceof com.sap.tc.moin.repository.mmi.model.NameNotFoundException) {
                throw (com.sap.tc.moin.repository.mmi.model.NameNotFoundException) ex;
            }
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    public java.util.List<com.sap.tc.moin.repository.mmi.model.ModelElement> findElementsByTypeExtended(com.sap.tc.moin.repository.mmi.model.MofClass ofType, boolean includeSubtypes) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>(2);
        try {
            parameterList.add(ofType);
            parameterList.add(includeSubtypes);
            return (java.util.List<com.sap.tc.moin.repository.mmi.model.ModelElement>)___invokeOperation(connection, 10, "45ED2E2909D6D1FC5B304CE622B9899C6C573146", parameterList); //$NON-NLS-1$
        } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
        }
    }

    
    // methods for internal modeled operations
    private java.util.Collection<com.sap.tc.moin.repository.mmi.model.ModelElement> invoke__findRequiredElements(com.sap.tc.moin.repository.core.CoreConnection connection, java.util.Collection<? extends java.lang.String> kinds, boolean recursive) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        // begin of implementation provided in tag org.omg.sap2mof.OperationCodeJava
        // ModelElement.findRequiredElements
        return com.sap.tc.moin.repository.core.jmi.util.MoinMetamodelCode.findRequiredElements(connection, this, this, kinds, recursive);
        // end of implementation provided in tag org.omg.sap2mof.OperationCodeJava
    }
    private boolean invoke__isRequiredBecause(com.sap.tc.moin.repository.core.CoreConnection connection, com.sap.tc.moin.repository.mmi.model.ModelElement otherElement, java.lang.String[] reason) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        // begin of implementation provided in tag org.omg.sap2mof.OperationCodeJava
        // ModelElement.isRequiredBecause
        return com.sap.tc.moin.repository.core.jmi.util.MoinMetamodelCode.isRequiredBecause(connection, this, this, otherElement, reason);
        // end of implementation provided in tag org.omg.sap2mof.OperationCodeJava
    }
    private boolean invoke__isFrozen(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        // begin of implementation provided in tag org.omg.sap2mof.OperationCodeJava
        // ModelElement.isFrozen
        return com.sap.tc.moin.repository.core.jmi.util.MoinMetamodelCode.isFrozen(connection, this, this);

        // end of implementation provided in tag org.omg.sap2mof.OperationCodeJava
    }
    private boolean invoke__isVisible(com.sap.tc.moin.repository.core.CoreConnection connection, com.sap.tc.moin.repository.mmi.model.ModelElement otherElement) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        // begin of implementation provided in tag org.omg.sap2mof.OperationCodeJava
        // ModelElement.isVisible
        return com.sap.tc.moin.repository.core.jmi.util.MoinMetamodelCode.isVisible(connection, this, this, otherElement);
        // end of implementation provided in tag org.omg.sap2mof.OperationCodeJava
    }
    private com.sap.tc.moin.repository.mmi.model.ModelElement invoke__lookupElement(com.sap.tc.moin.repository.core.CoreConnection connection, java.lang.String name) throws com.sap.tc.moin.repository.mmi.model.NameNotFoundException, com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        // begin of implementation provided in tag org.omg.sap2mof.OperationCodeJava
        // Namespace.lookupElement
        return com.sap.tc.moin.repository.core.jmi.util.MoinMetamodelCode.lookupElement(connection, this, this, name);
        // end of implementation provided in tag org.omg.sap2mof.OperationCodeJava
    }
    private com.sap.tc.moin.repository.mmi.model.ModelElement invoke__resolveQualifiedName(com.sap.tc.moin.repository.core.CoreConnection connection, java.util.List<? extends java.lang.String> qualifiedName) throws com.sap.tc.moin.repository.mmi.model.NameNotResolvedException, com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        // begin of implementation provided in tag org.omg.sap2mof.OperationCodeJava
        // Namespace.resolveQualifiedName
        return com.sap.tc.moin.repository.core.jmi.util.MoinMetamodelCode.resolveQualifiedName(connection, this, this, qualifiedName);
        // end of implementation provided in tag org.omg.sap2mof.OperationCodeJava
    }
    private java.util.List<com.sap.tc.moin.repository.mmi.model.ModelElement> invoke__findElementsByType(com.sap.tc.moin.repository.core.CoreConnection connection, com.sap.tc.moin.repository.mmi.model.MofClass ofType, boolean includeSubtypes) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        // begin of implementation provided in tag org.omg.sap2mof.OperationCodeJava
        // Namespace.findElementsByType
        return com.sap.tc.moin.repository.core.jmi.util.MoinMetamodelCode.findElementsByType(connection, this, this, ofType, includeSubtypes);
        // end of implementation provided in tag org.omg.sap2mof.OperationCodeJava
    }
    private boolean invoke__nameIsValid(com.sap.tc.moin.repository.core.CoreConnection connection, java.lang.String proposedName) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        // begin of implementation provided in tag org.omg.sap2mof.OperationCodeJava
        // Namespace.nameIsValid
        return com.sap.tc.moin.repository.core.jmi.util.MoinMetamodelCode.nameIsValid(connection, this, this, proposedName);
        // end of implementation provided in tag org.omg.sap2mof.OperationCodeJava
    }
    private java.util.List<com.sap.tc.moin.repository.mmi.model.GeneralizableElement> invoke__allSupertypes(com.sap.tc.moin.repository.core.CoreConnection connection) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        // begin of implementation provided in tag org.omg.sap2mof.OperationCodeJava
        // GeneralizableElement.allSupertypes
        return com.sap.tc.moin.repository.core.jmi.util.MoinMetamodelCode.allSupertypes(connection, this, this);
        // end of implementation provided in tag org.omg.sap2mof.OperationCodeJava
    }
    private com.sap.tc.moin.repository.mmi.model.ModelElement invoke__lookupElementExtended(com.sap.tc.moin.repository.core.CoreConnection connection, java.lang.String name) throws com.sap.tc.moin.repository.mmi.model.NameNotFoundException, com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        // begin of implementation provided in tag org.omg.sap2mof.OperationCodeJava
        // GeneralizableElement.lookupElementExtended
        return com.sap.tc.moin.repository.core.jmi.util.MoinMetamodelCode.lookupElementExtended(connection, this, this, name);
        // end of implementation provided in tag org.omg.sap2mof.OperationCodeJava
    }
    private java.util.List<com.sap.tc.moin.repository.mmi.model.ModelElement> invoke__findElementsByTypeExtended(com.sap.tc.moin.repository.core.CoreConnection connection, com.sap.tc.moin.repository.mmi.model.MofClass ofType, boolean includeSubtypes) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        // begin of implementation provided in tag org.omg.sap2mof.OperationCodeJava
        // GeneralizableElement.findElementsByTypeExtended
        return com.sap.tc.moin.repository.core.jmi.util.MoinMetamodelCode.findElementsByTypeExtended(connection, this, this, ofType, includeSubtypes);
        // end of implementation provided in tag org.omg.sap2mof.OperationCodeJava
    }

    // reflective methods
    @Override
    public Object refInvokeOperation(com.sap.tc.moin.repository.core.CoreConnection connection, java.lang.String requestedOperation, java.util.List<? extends Object> args) throws com.sap.tc.moin.repository.mmi.reflect.RefException {
        if (requestedOperation == null) {
            throw new com.sap.tc.moin.repository.mmi.reflect.InvalidNameException(requestedOperation);
        }
        java.lang.Integer operationId = OPERATION_IDS.get(requestedOperation);
        if (operationId == null) {
            throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException(requestedOperation, refMetaObject(), "refInvokeOperation(String)"); //$NON-NLS-1$
        }
        switch (operationId) {
                
            case 0:
                return ___invokeOperation( connection, operationId, "45ED2E294BCAFBE3507348AD004AFDD40264E06F", args ); //$NON-NLS-1$    
                
            case 1:
                return ___invokeOperation( connection, operationId, "45ED2E297DF5E990114B49CA0CBEA8DA07C6AA4B", args ); //$NON-NLS-1$    
                
            case 2:
                return ___invokeOperation( connection, operationId, "45ED2E29B53D3F263FF6443821FCFDF1E84D3C01", args ); //$NON-NLS-1$    
                
            case 3:
                return ___invokeOperation( connection, operationId, "45ED2E296CA3E56677D84D5B064884CBEE6CF6C5", args ); //$NON-NLS-1$    
                
            case 4:
                return ___invokeOperation( connection, operationId, "45ED2E29A46B2E1F1D41471439D8EAC7374C9062", args ); //$NON-NLS-1$    
                
            case 5:
                return ___invokeOperation( connection, operationId, "45ED2E292F758C846F324B3934EACA27EDF2BA8F", args ); //$NON-NLS-1$    
                
            case 6:
                return ___invokeOperation( connection, operationId, "45ED2E29FE526480A67A4FE319299BE18CA5FDAE", args ); //$NON-NLS-1$    
                
            case 7:
                return ___invokeOperation( connection, operationId, "45ED2E295F11447845674A07026F84A92D9EF0C9", args ); //$NON-NLS-1$    
                
            case 8:
                return ___invokeOperation( connection, operationId, "45ED2E29DE792241B29746940E65C693F6378D89", args ); //$NON-NLS-1$    
                
            case 9:
                return ___invokeOperation( connection, operationId, "45ED2E2904550ECA7F554F3A08CDBA4EAACE323A", args ); //$NON-NLS-1$    
                
            case 10:
                return ___invokeOperation( connection, operationId, "45ED2E2909D6D1FC5B304CE622B9899C6C573146", args ); //$NON-NLS-1$    
            default:
                throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException(requestedOperation, refMetaObject(), "refInvokeOperation(String)"); //$NON-NLS-1$
        }
    }
    
    @Override
    public Object invoke___Operation(com.sap.tc.moin.repository.core.CoreConnection connection, int operationId, java.util.List<? extends Object> args) throws com.sap.tc.moin.repository.mmi.reflect.RefException {
        switch (operationId) {
                
            case 0:
                return invoke__findRequiredElements(connection, (java.util.Collection) args.get(0), (java.lang.Boolean) args.get(1));    
                
            case 1:
                return invoke__isRequiredBecause(connection, (com.sap.tc.moin.repository.mmi.model.ModelElement) args.get(0), (java.lang.String[]) args.get(1));    
                
            case 2:
                return invoke__isFrozen(connection);    
                
            case 3:
                return invoke__isVisible(connection, (com.sap.tc.moin.repository.mmi.model.ModelElement) args.get(0));    
                
            case 4:
                return invoke__lookupElement(connection, (java.lang.String) args.get(0));    
                
            case 5:
                return invoke__resolveQualifiedName(connection, (java.util.List) args.get(0));    
                
            case 6:
                return invoke__findElementsByType(connection, (com.sap.tc.moin.repository.mmi.model.MofClass) args.get(0), (java.lang.Boolean) args.get(1));    
                
            case 7:
                return invoke__nameIsValid(connection, (java.lang.String) args.get(0));    
                
            case 8:
                return invoke__allSupertypes(connection);    
                
            case 9:
                return invoke__lookupElementExtended(connection, (java.lang.String) args.get(0));    
                
            case 10:
                return invoke__findElementsByTypeExtended(connection, (com.sap.tc.moin.repository.mmi.model.MofClass) args.get(0), (java.lang.Boolean) args.get(1));    
            default:
                throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException( operationId, refMetaObject( ), "invoke___Operation(int)"); //$NON-NLS-1$
        }
    
    }    

    // get the JMI interface
    public java.lang.Class<org.omg.ocl.types.TupleType> get___JmiInterface() {
        return org.omg.ocl.types.TupleType.class;
    }

    // to String
    protected String metaObjectToString() {
        return "org.omg.ocl.types.TupleType (Java Type)\nOCL.Types.TupleType (MOF Type)"; //$NON-NLS-1$
    }    
}