/**
 * Generated by the MOIN Generator Version 3.0
 **/

package org.omg.ocl.expressions.__impl;

public class AThenExpressionIfExpWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<org.omg.ocl.expressions.AThenExpressionIfExp> implements org.omg.ocl.expressions.AThenExpressionIfExp,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AThenExpressionIfExp wrapper
     */
    public AThenExpressionIfExpWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, org.omg.ocl.expressions.__impl.AThenExpressionIfExpImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private org.omg.ocl.expressions.__impl.AThenExpressionIfExpImpl getCastWrappedObject() {
        return (org.omg.ocl.expressions.__impl.AThenExpressionIfExpImpl) getWrappedObject();
    }

    public org.omg.ocl.expressions.AThenExpressionIfExp unwrap() {
        return (org.omg.ocl.expressions.AThenExpressionIfExp) getWrappedObject();
    }
    
    public boolean exists(org.omg.ocl.expressions.OclExpression _ThenExpression, org.omg.ocl.expressions.IfExp _IfExp) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg(_ThenExpression), unwrapArg(_IfExp));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg(_ThenExpression), unwrapArg(_IfExp)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public org.omg.ocl.expressions.OclExpression getThenExpression(org.omg.ocl.expressions.IfExp _IfExp) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return  wrapResult(getCastWrappedObject().getThenExpression(connection, unwrapArg(_IfExp)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return  wrapResult(getCastWrappedObject().getThenExpression(connection, unwrapArg(_IfExp))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public org.omg.ocl.expressions.IfExp getIfExp(org.omg.ocl.expressions.OclExpression _ThenExpression) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return  wrapResult(getCastWrappedObject().getIfExp(connection, unwrapArg(_ThenExpression)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return  wrapResult(getCastWrappedObject().getIfExp(connection, unwrapArg(_ThenExpression))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(org.omg.ocl.expressions.OclExpression _ThenExpression, org.omg.ocl.expressions.IfExp _IfExp) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg(_ThenExpression), unwrapArg(_IfExp));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg(_ThenExpression), unwrapArg(_IfExp)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(org.omg.ocl.expressions.OclExpression _ThenExpression, org.omg.ocl.expressions.IfExp _IfExp) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg(_ThenExpression), unwrapArg(_IfExp));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg(_ThenExpression), unwrapArg(_IfExp)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<org.omg.ocl.expressions.AThenExpressionIfExp> get___JmiInterface() {
        return org.omg.ocl.expressions.AThenExpressionIfExp.class;
    }

    protected String metaObjectToString() {
        return "org.omg.ocl.expressions.AThenExpressionIfExp (Java Type)\nOCL.Expressions.A_thenExpression_ifExp (MOF Type)"; //$NON-NLS-1$
    }    
}