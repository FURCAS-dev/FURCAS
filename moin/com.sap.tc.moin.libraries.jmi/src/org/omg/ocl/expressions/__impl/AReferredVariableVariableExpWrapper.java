/**
 * Generated by the MOIN Generator Version 3.0
 **/

package org.omg.ocl.expressions.__impl;

public class AReferredVariableVariableExpWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<org.omg.ocl.expressions.AReferredVariableVariableExp> implements org.omg.ocl.expressions.AReferredVariableVariableExp,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AReferredVariableVariableExp wrapper
     */
    public AReferredVariableVariableExpWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, org.omg.ocl.expressions.__impl.AReferredVariableVariableExpImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private org.omg.ocl.expressions.__impl.AReferredVariableVariableExpImpl getCastWrappedObject() {
        return (org.omg.ocl.expressions.__impl.AReferredVariableVariableExpImpl) getWrappedObject();
    }

    public org.omg.ocl.expressions.AReferredVariableVariableExp unwrap() {
        return (org.omg.ocl.expressions.AReferredVariableVariableExp) getWrappedObject();
    }
    
    public boolean exists(org.omg.ocl.expressions.VariableDeclaration _ReferredVariable, org.omg.ocl.expressions.VariableExp _VariableExp) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg(_ReferredVariable), unwrapArg(_VariableExp));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg(_ReferredVariable), unwrapArg(_VariableExp)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public org.omg.ocl.expressions.VariableDeclaration getReferredVariable(org.omg.ocl.expressions.VariableExp _VariableExp) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return  wrapResult(getCastWrappedObject().getReferredVariable(connection, unwrapArg(_VariableExp)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return  wrapResult(getCastWrappedObject().getReferredVariable(connection, unwrapArg(_VariableExp))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection<org.omg.ocl.expressions.VariableExp> getVariableExp(org.omg.ocl.expressions.VariableDeclaration _ReferredVariable) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return  wrapResult(getCastWrappedObject().getVariableExp(connection, unwrapArg(_ReferredVariable)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return  wrapResult(getCastWrappedObject().getVariableExp(connection, unwrapArg(_ReferredVariable))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(org.omg.ocl.expressions.VariableDeclaration _ReferredVariable, org.omg.ocl.expressions.VariableExp _VariableExp) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg(_ReferredVariable), unwrapArg(_VariableExp));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg(_ReferredVariable), unwrapArg(_VariableExp)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(org.omg.ocl.expressions.VariableDeclaration _ReferredVariable, org.omg.ocl.expressions.VariableExp _VariableExp) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg(_ReferredVariable), unwrapArg(_VariableExp));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg(_ReferredVariable), unwrapArg(_VariableExp)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<org.omg.ocl.expressions.AReferredVariableVariableExp> get___JmiInterface() {
        return org.omg.ocl.expressions.AReferredVariableVariableExp.class;
    }

    protected String metaObjectToString() {
        return "org.omg.ocl.expressions.AReferredVariableVariableExp (Java Type)\nOCL.Expressions.A_referredVariable_variableExp (MOF Type)"; //$NON-NLS-1$
    }    
}