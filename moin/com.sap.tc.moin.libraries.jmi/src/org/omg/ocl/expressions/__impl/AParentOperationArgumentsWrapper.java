/**
 * Generated by the MOIN Generator Version 3.0
 **/

package org.omg.ocl.expressions.__impl;

public class AParentOperationArgumentsWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<org.omg.ocl.expressions.AParentOperationArguments> implements org.omg.ocl.expressions.AParentOperationArguments,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The AParentOperationArguments wrapper
     */
    public AParentOperationArgumentsWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, org.omg.ocl.expressions.__impl.AParentOperationArgumentsImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private org.omg.ocl.expressions.__impl.AParentOperationArgumentsImpl getCastWrappedObject() {
        return (org.omg.ocl.expressions.__impl.AParentOperationArgumentsImpl) getWrappedObject();
    }

    public org.omg.ocl.expressions.AParentOperationArguments unwrap() {
        return (org.omg.ocl.expressions.AParentOperationArguments) getWrappedObject();
    }
    
    public boolean exists(org.omg.ocl.expressions.OperationCallExp _ParentOperation, org.omg.ocl.expressions.OclExpression _Arguments) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg(_ParentOperation), unwrapArg(_Arguments));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg(_ParentOperation), unwrapArg(_Arguments)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public org.omg.ocl.expressions.OperationCallExp getParentOperation(org.omg.ocl.expressions.OclExpression _Arguments) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return  wrapResult(getCastWrappedObject().getParentOperation(connection, unwrapArg(_Arguments)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return  wrapResult(getCastWrappedObject().getParentOperation(connection, unwrapArg(_Arguments))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.List<org.omg.ocl.expressions.OclExpression> getArguments(org.omg.ocl.expressions.OperationCallExp _ParentOperation) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return  wrapResult(getCastWrappedObject().getArguments(connection, unwrapArg(_ParentOperation)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return  wrapResult(getCastWrappedObject().getArguments(connection, unwrapArg(_ParentOperation))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(org.omg.ocl.expressions.OperationCallExp _ParentOperation, org.omg.ocl.expressions.OclExpression _Arguments) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg(_ParentOperation), unwrapArg(_Arguments));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg(_ParentOperation), unwrapArg(_Arguments)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(org.omg.ocl.expressions.OperationCallExp _ParentOperation, org.omg.ocl.expressions.OclExpression _Arguments) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg(_ParentOperation), unwrapArg(_Arguments));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg(_ParentOperation), unwrapArg(_Arguments)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<org.omg.ocl.expressions.AParentOperationArguments> get___JmiInterface() {
        return org.omg.ocl.expressions.AParentOperationArguments.class;
    }

    protected String metaObjectToString() {
        return "org.omg.ocl.expressions.AParentOperationArguments (Java Type)\nOCL.Expressions.A_parentOperation_arguments (MOF Type)"; //$NON-NLS-1$
    }    
}