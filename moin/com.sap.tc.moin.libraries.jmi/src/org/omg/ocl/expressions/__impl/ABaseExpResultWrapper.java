/**
 * Generated by the MOIN Generator Version 3.0
 **/

package org.omg.ocl.expressions.__impl;

public class ABaseExpResultWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<org.omg.ocl.expressions.ABaseExpResult> implements org.omg.ocl.expressions.ABaseExpResult,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The ABaseExpResult wrapper
     */
    public ABaseExpResultWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, org.omg.ocl.expressions.__impl.ABaseExpResultImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private org.omg.ocl.expressions.__impl.ABaseExpResultImpl getCastWrappedObject() {
        return (org.omg.ocl.expressions.__impl.ABaseExpResultImpl) getWrappedObject();
    }

    public org.omg.ocl.expressions.ABaseExpResult unwrap() {
        return (org.omg.ocl.expressions.ABaseExpResult) getWrappedObject();
    }
    
    public boolean exists(org.omg.ocl.expressions.IterateExp _BaseExp, org.omg.ocl.expressions.VariableDeclaration _Result) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg(_BaseExp), unwrapArg(_Result));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg(_BaseExp), unwrapArg(_Result)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public org.omg.ocl.expressions.IterateExp getBaseExp(org.omg.ocl.expressions.VariableDeclaration _Result) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return  wrapResult(getCastWrappedObject().getBaseExp(connection, unwrapArg(_Result)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return  wrapResult(getCastWrappedObject().getBaseExp(connection, unwrapArg(_Result))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public org.omg.ocl.expressions.VariableDeclaration getResult(org.omg.ocl.expressions.IterateExp _BaseExp) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return  wrapResult(getCastWrappedObject().getResult(connection, unwrapArg(_BaseExp)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return  wrapResult(getCastWrappedObject().getResult(connection, unwrapArg(_BaseExp))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(org.omg.ocl.expressions.IterateExp _BaseExp, org.omg.ocl.expressions.VariableDeclaration _Result) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg(_BaseExp), unwrapArg(_Result));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg(_BaseExp), unwrapArg(_Result)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(org.omg.ocl.expressions.IterateExp _BaseExp, org.omg.ocl.expressions.VariableDeclaration _Result) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg(_BaseExp), unwrapArg(_Result));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg(_BaseExp), unwrapArg(_Result)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<org.omg.ocl.expressions.ABaseExpResult> get___JmiInterface() {
        return org.omg.ocl.expressions.ABaseExpResult.class;
    }

    protected String metaObjectToString() {
        return "org.omg.ocl.expressions.ABaseExpResult (Java Type)\nOCL.Expressions.A_baseExp_result (MOF Type)"; //$NON-NLS-1$
    }    
}