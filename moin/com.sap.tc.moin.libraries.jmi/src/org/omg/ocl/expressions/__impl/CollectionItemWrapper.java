/**
 * Generated by the MOIN Generator Version 3.0
 **/

package org.omg.ocl.expressions.__impl;

public class CollectionItemWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefObjectWrapperImpl<org.omg.ocl.expressions.__impl.CollectionItemImpl> implements org.omg.ocl.expressions.CollectionItem,com.sap.tc.moin.repository.Partitionable {

    
    static {
    }

    public CollectionItemWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, org.omg.ocl.expressions.__impl.CollectionItemImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    private org.omg.ocl.expressions.__impl.CollectionItemImpl getCastWrappedObject() {
        return (org.omg.ocl.expressions.__impl.CollectionItemImpl) getWrappedObject();
    }
    
    public org.omg.ocl.expressions.__impl.CollectionItemImpl unwrap() {
        return (org.omg.ocl.expressions.__impl.CollectionItemImpl) getWrappedObject();
    }
        
    // methods for attributes
     
    // methods for references
    public com.sap.tc.moin.repository.mmi.model.Classifier getType() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return  wrapResult(getCastWrappedObject().getType(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return  wrapResult(getCastWrappedObject().getType(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setType(com.sap.tc.moin.repository.mmi.model.Classifier newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setType(connection, unwrapArg(newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setType(connection, unwrapArg(newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public org.omg.ocl.expressions.OclExpression getItem() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return  wrapResult(getCastWrappedObject().getItem(connection));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return  wrapResult(getCastWrappedObject().getItem(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

    public void setItem(org.omg.ocl.expressions.OclExpression newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    getCastWrappedObject().setItem(connection, unwrapArg(newValue));
                }       
            }
            else {
                assertConnectionAlive();
                attachConnectionIfRequired();
                getCastWrappedObject().setItem(connection, unwrapArg(newValue));
            } 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }

   
    // methods for modeled operations
    
    // methods for internal modeled operations

    // reflective methods
    

    // get the JMI interface
    public java.lang.Class<org.omg.ocl.expressions.CollectionItem> get___JmiInterface() {
        return org.omg.ocl.expressions.CollectionItem.class;
    }

    // to String
    protected String metaObjectToString() {
        return "org.omg.ocl.expressions.CollectionItem (Java Type)\nOCL.Expressions.CollectionItem (MOF Type)"; //$NON-NLS-1$
    }    
}