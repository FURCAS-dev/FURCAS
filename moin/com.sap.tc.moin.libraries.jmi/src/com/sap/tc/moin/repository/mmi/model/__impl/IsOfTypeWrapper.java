/**
 * Generated by the MOIN Generator Version 3.0
 **/

package com.sap.tc.moin.repository.mmi.model.__impl;

public class IsOfTypeWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<com.sap.tc.moin.repository.mmi.model.IsOfType> implements com.sap.tc.moin.repository.mmi.model.IsOfType,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The IsOfType wrapper
     */
    public IsOfTypeWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, com.sap.tc.moin.repository.mmi.model.__impl.IsOfTypeImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private com.sap.tc.moin.repository.mmi.model.__impl.IsOfTypeImpl getCastWrappedObject() {
        return (com.sap.tc.moin.repository.mmi.model.__impl.IsOfTypeImpl) getWrappedObject();
    }

    public com.sap.tc.moin.repository.mmi.model.IsOfType unwrap() {
        return (com.sap.tc.moin.repository.mmi.model.IsOfType) getWrappedObject();
    }
    
    public boolean exists(com.sap.tc.moin.repository.mmi.model.Classifier _Type, com.sap.tc.moin.repository.mmi.model.TypedElement _TypedElements) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg(_Type), unwrapArg(_TypedElements));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg(_Type), unwrapArg(_TypedElements)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.tc.moin.repository.mmi.model.Classifier getType(com.sap.tc.moin.repository.mmi.model.TypedElement _TypedElements) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return  wrapResult(getCastWrappedObject().getType(connection, unwrapArg(_TypedElements)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return  wrapResult(getCastWrappedObject().getType(connection, unwrapArg(_TypedElements))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection<com.sap.tc.moin.repository.mmi.model.TypedElement> getTypedElements(com.sap.tc.moin.repository.mmi.model.Classifier _Type) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return  wrapResult(getCastWrappedObject().getTypedElements(connection, unwrapArg(_Type)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return  wrapResult(getCastWrappedObject().getTypedElements(connection, unwrapArg(_Type))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(com.sap.tc.moin.repository.mmi.model.Classifier _Type, com.sap.tc.moin.repository.mmi.model.TypedElement _TypedElements) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg(_Type), unwrapArg(_TypedElements));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg(_Type), unwrapArg(_TypedElements)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(com.sap.tc.moin.repository.mmi.model.Classifier _Type, com.sap.tc.moin.repository.mmi.model.TypedElement _TypedElements) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg(_Type), unwrapArg(_TypedElements));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg(_Type), unwrapArg(_TypedElements)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<com.sap.tc.moin.repository.mmi.model.IsOfType> get___JmiInterface() {
        return com.sap.tc.moin.repository.mmi.model.IsOfType.class;
    }

    protected String metaObjectToString() {
        return "com.sap.tc.moin.repository.mmi.model.IsOfType (Java Type)\nModel.IsOfType (MOF Type)"; //$NON-NLS-1$
    }    
}