/**
 * Generated by the MOIN Generator Version 3.0
 **/

package com.sap.tc.moin.repository.mmi.model.__impl;

public class ExposesWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<com.sap.tc.moin.repository.mmi.model.Exposes> implements com.sap.tc.moin.repository.mmi.model.Exposes,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The Exposes wrapper
     */
    public ExposesWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, com.sap.tc.moin.repository.mmi.model.__impl.ExposesImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private com.sap.tc.moin.repository.mmi.model.__impl.ExposesImpl getCastWrappedObject() {
        return (com.sap.tc.moin.repository.mmi.model.__impl.ExposesImpl) getWrappedObject();
    }

    public com.sap.tc.moin.repository.mmi.model.Exposes unwrap() {
        return (com.sap.tc.moin.repository.mmi.model.Exposes) getWrappedObject();
    }
    
    public boolean exists(com.sap.tc.moin.repository.mmi.model.Reference _Referrer, com.sap.tc.moin.repository.mmi.model.AssociationEnd _ExposedEnd) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg(_Referrer), unwrapArg(_ExposedEnd));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg(_Referrer), unwrapArg(_ExposedEnd)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection<com.sap.tc.moin.repository.mmi.model.Reference> getReferrer(com.sap.tc.moin.repository.mmi.model.AssociationEnd _ExposedEnd) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return  wrapResult(getCastWrappedObject().getReferrer(connection, unwrapArg(_ExposedEnd)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return  wrapResult(getCastWrappedObject().getReferrer(connection, unwrapArg(_ExposedEnd))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.tc.moin.repository.mmi.model.AssociationEnd getExposedEnd(com.sap.tc.moin.repository.mmi.model.Reference _Referrer) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return  wrapResult(getCastWrappedObject().getExposedEnd(connection, unwrapArg(_Referrer)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return  wrapResult(getCastWrappedObject().getExposedEnd(connection, unwrapArg(_Referrer))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(com.sap.tc.moin.repository.mmi.model.Reference _Referrer, com.sap.tc.moin.repository.mmi.model.AssociationEnd _ExposedEnd) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg(_Referrer), unwrapArg(_ExposedEnd));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg(_Referrer), unwrapArg(_ExposedEnd)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(com.sap.tc.moin.repository.mmi.model.Reference _Referrer, com.sap.tc.moin.repository.mmi.model.AssociationEnd _ExposedEnd) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg(_Referrer), unwrapArg(_ExposedEnd));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg(_Referrer), unwrapArg(_ExposedEnd)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<com.sap.tc.moin.repository.mmi.model.Exposes> get___JmiInterface() {
        return com.sap.tc.moin.repository.mmi.model.Exposes.class;
    }

    protected String metaObjectToString() {
        return "com.sap.tc.moin.repository.mmi.model.Exposes (Java Type)\nModel.Exposes (MOF Type)"; //$NON-NLS-1$
    }    
}