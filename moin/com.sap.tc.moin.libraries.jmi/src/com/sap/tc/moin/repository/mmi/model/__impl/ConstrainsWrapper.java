/**
 * Generated by the MOIN Generator Version 3.0
 **/

package com.sap.tc.moin.repository.mmi.model.__impl;

public class ConstrainsWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefAssociationWrapperImpl<com.sap.tc.moin.repository.mmi.model.Constrains> implements com.sap.tc.moin.repository.mmi.model.Constrains,com.sap.tc.moin.repository.Partitionable
{

    /**
     * The Constrains wrapper
     */
    public ConstrainsWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, com.sap.tc.moin.repository.mmi.model.__impl.ConstrainsImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private com.sap.tc.moin.repository.mmi.model.__impl.ConstrainsImpl getCastWrappedObject() {
        return (com.sap.tc.moin.repository.mmi.model.__impl.ConstrainsImpl) getWrappedObject();
    }

    public com.sap.tc.moin.repository.mmi.model.Constrains unwrap() {
        return (com.sap.tc.moin.repository.mmi.model.Constrains) getWrappedObject();
    }
    
    public boolean exists(com.sap.tc.moin.repository.mmi.model.Constraint _Constraint, com.sap.tc.moin.repository.mmi.model.ModelElement _ConstrainedElement) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().exists(connection, unwrapArg(_Constraint), unwrapArg(_ConstrainedElement));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().exists(connection, unwrapArg(_Constraint), unwrapArg(_ConstrainedElement)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection<com.sap.tc.moin.repository.mmi.model.Constraint> getConstraint(com.sap.tc.moin.repository.mmi.model.ModelElement _ConstrainedElement) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return  wrapResult(getCastWrappedObject().getConstraint(connection, unwrapArg(_ConstrainedElement)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return  wrapResult(getCastWrappedObject().getConstraint(connection, unwrapArg(_ConstrainedElement))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public java.util.Collection<com.sap.tc.moin.repository.mmi.model.ModelElement> getConstrainedElement(com.sap.tc.moin.repository.mmi.model.Constraint _Constraint) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronizationManager.acquireReadLock();
                try {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return  wrapResult(getCastWrappedObject().getConstrainedElement(connection, unwrapArg(_Constraint)));
                } finally {
                    synchronizationManager.releaseReadLock();
                }
       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return  wrapResult(getCastWrappedObject().getConstrainedElement(connection, unwrapArg(_Constraint))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean add(com.sap.tc.moin.repository.mmi.model.Constraint _Constraint, com.sap.tc.moin.repository.mmi.model.ModelElement _ConstrainedElement) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().add(connection, unwrapArg(_Constraint), unwrapArg(_ConstrainedElement));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().add(connection, unwrapArg(_Constraint), unwrapArg(_ConstrainedElement)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public boolean remove(com.sap.tc.moin.repository.mmi.model.Constraint _Constraint, com.sap.tc.moin.repository.mmi.model.ModelElement _ConstrainedElement) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return getCastWrappedObject().remove(connection, unwrapArg(_Constraint), unwrapArg(_ConstrainedElement));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return getCastWrappedObject().remove(connection, unwrapArg(_Constraint), unwrapArg(_ConstrainedElement)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }   

    public java.lang.Class<com.sap.tc.moin.repository.mmi.model.Constrains> get___JmiInterface() {
        return com.sap.tc.moin.repository.mmi.model.Constrains.class;
    }

    protected String metaObjectToString() {
        return "com.sap.tc.moin.repository.mmi.model.Constrains (Java Type)\nModel.Constrains (MOF Type)"; //$NON-NLS-1$
    }    
}