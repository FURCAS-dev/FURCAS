/**
 * Generated by the MOIN JMI Generator Version 3.0
 **/

package com.sap.tc.moin.repository.mmi.model.__impl;

public final class MofClassClassWrapper extends com.sap.tc.moin.repository.core.jmi.reflect.RefClassWrapperImpl<com.sap.tc.moin.repository.mmi.model.__impl.MofClassClassImpl> implements com.sap.tc.moin.repository.mmi.model.MofClassClass,com.sap.tc.moin.repository.Partitionable {

    
    static {
    }

    public MofClassClassWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, com.sap.tc.moin.repository.mmi.model.__impl.MofClassClassImpl baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private com.sap.tc.moin.repository.mmi.model.__impl.MofClassClassImpl getCastWrappedObject() {
        return (com.sap.tc.moin.repository.mmi.model.__impl.MofClassClassImpl) getWrappedObject();
    }
    
    public com.sap.tc.moin.repository.mmi.model.__impl.MofClassClassImpl unwrap() {
        return (com.sap.tc.moin.repository.mmi.model.__impl.MofClassClassImpl) getWrappedObject();
    }
    
    public com.sap.tc.moin.repository.mmi.model.MofClass createMofClass() throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return  wrapResult(getCastWrappedObject().createMofClass(connection));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return  wrapResult(getCastWrappedObject().createMofClass(connection)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.tc.moin.repository.mmi.model.MofClass createMofClassInPartition(com.sap.tc.moin.repository.ModelPartition partition) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return  wrapResult(getCastWrappedObject().createMofClassInPartition(connection, unwrapArg(partition)));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return  wrapResult(getCastWrappedObject().createMofClassInPartition(connection, unwrapArg(partition))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.tc.moin.repository.mmi.model.MofClass createMofClass(java.lang.String name, java.lang.String annotation, boolean isRoot, boolean isLeaf, boolean isAbstract, com.sap.tc.moin.repository.mmi.model.VisibilityKind visibility, boolean isSingleton) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return  wrapResult(getCastWrappedObject().createMofClass(connection, name, annotation, isRoot, isLeaf, isAbstract, visibility, isSingleton));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return  wrapResult(getCastWrappedObject().createMofClass(connection, name, annotation, isRoot, isLeaf, isAbstract, visibility, isSingleton)); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }
    public com.sap.tc.moin.repository.mmi.model.MofClass createMofClassInPartition(java.lang.String name, java.lang.String annotation, boolean isRoot, boolean isLeaf, boolean isAbstract, com.sap.tc.moin.repository.mmi.model.VisibilityKind visibility, boolean isSingleton, com.sap.tc.moin.repository.ModelPartition partition) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
    {
        try {
            if (synchronize) {
                synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                    assertConnectionAlive();
                    attachConnectionIfRequired();
                    return  wrapResult(getCastWrappedObject().createMofClassInPartition(connection, name, annotation, isRoot, isLeaf, isAbstract, visibility, isSingleton, unwrapArg(partition)));
                }       
            }
            assertConnectionAlive();
            attachConnectionIfRequired();
            return  wrapResult(getCastWrappedObject().createMofClassInPartition(connection, name, annotation, isRoot, isLeaf, isAbstract, visibility, isSingleton, unwrapArg(partition))); 
        } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            wrapJmiExceptionArgs(ex);
            throw ex;
        }
    }    

    // methods for static attributes
    

    // methods for modeled static operations

    // methods for structure type creators

    
    // methods for internal modeled operations

    // reflective methods
    

    // get the JMI interface
    public java.lang.Class<com.sap.tc.moin.repository.mmi.model.MofClassClass> get___JmiInterface() {
        return com.sap.tc.moin.repository.mmi.model.MofClassClass.class;
    }
    
    // to String
    protected String metaObjectToString() {
        return "com.sap.tc.moin.repository.mmi.model.MofClassClass (Java Type)\nModel.Class (MOF Type)"; //$NON-NLS-1$
    }    
}