<?xml version = '1.0' encoding = 'ISO-8859-1' ?>
<!-- <!DOCTYPE XMI SYSTEM 'Model1311.DTD' > -->
<XMI xmi.version = '1.1' xmlns:Model='omg.org/mof.Model/1.3' timestamp = 'Fri Mar 06 11:04:05 2009' >
 <XMI.header>
  <XMI.documentation>[#patched 49 times on Fri Mar 06 11:05:53 CET 2009#]
   <XMI.exporter>Unisys.JCR.1</XMI.exporter>
   <XMI.exporterVersion>1.3.2</XMI.exporterVersion>
  </XMI.documentation>
  <XMI.metamodel xmi.name = 'org.omg.mof.Model' xmi.version = '1.3'/>
 </XMI.header>
<XMI.content>
<!-- ==================== Model    [Package] ==================== -->
<Model:Package xmi.id = 'a39A2BDA60064' 
  name = 'Model' annotation = '' 
  isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' >
  <Model:Namespace.contents>
    <!-- ==================== Model.org.omg.mof.idl_prefix=com.sap.tc.moin.repository.mmi    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.205' 
      name = 'org.omg.mof.idl_prefix=com.sap.tc.moin.repository.mmi' annotation = '' 
      tagId = 'org.omg.mof.idl_prefix' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>com.sap.tc.moin.repository.mmi</XMI.any>
      </Model:Tag.values>
      <Model:Tag.elements>
        <Model:ModelElement xml:link = 'simple' href = 'Model.xml|a39A2BDA60064'/>
      </Model:Tag.elements>
    </Model:Tag>
    <!-- ==================== Model.org.omg.xmi.namespace=Model    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.206' 
      name = 'org.omg.xmi.namespace=Model' annotation = '' 
      tagId = 'org.omg.xmi.namespace' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>Model</XMI.any>
      </Model:Tag.values>
      <Model:Tag.elements>
        <Model:ModelElement xml:link = 'simple' href = 'Model.xml|a39A2BDA60064'/>
      </Model:Tag.elements>
    </Model:Tag>
    <!-- ==================== Model.javax.jmi.packagePrefix=com.sap.tc.moin.repository.mmi    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.207' 
      name = 'javax.jmi.packagePrefix=com.sap.tc.moin.repository.mmi' annotation = '' 
      tagId = 'javax.jmi.packagePrefix' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>com.sap.tc.moin.repository.mmi</XMI.any>
      </Model:Tag.values>
      <Model:Tag.elements>
        <Model:ModelElement xml:link = 'simple' href = 'Model.xml|a39A2BDA60064'/>
      </Model:Tag.elements>
    </Model:Tag>
    <!-- ==================== Model.ModelElement    [Class] ==================== -->
    <Model:Class xmi.id = 'a39A2BDA60093' 
      name = 'ModelElement' annotation = '' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' 
      isSingleton = 'false' >
      <Model:ModelElement.constraints>
        <Model:Constraint xmi.idref = 'a39A2BDA60094'/>  <!-- Model.ModelElement.MustBeContainedUnlessPackage -->
      </Model:ModelElement.constraints>
      <Model:Namespace.contents>
        <!-- ==================== Model.ModelElement.name    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a39A2BDA600B2' 
          name = 'name' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60394'/>
          </Model:TypedElement.type>
        </Model:Attribute>
        <!-- ==================== Model.ModelElement.qualifiedName    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a39A2BDA600B3' 
          name = 'qualifiedName' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'false' 
          isDerived = 'true' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '-1' is_ordered = 'true' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60394'/>
          </Model:TypedElement.type>
        </Model:Attribute>
        <!-- ==================== Model.ModelElement.annotation    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a39A2BDA600B4' 
          name = 'annotation' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60394'/>
          </Model:TypedElement.type>
        </Model:Attribute>
        <!-- ==================== Model.ModelElement.requiredElements    [Reference] ==================== -->
        <Model:Reference xmi.id = 'a39A2BDA600B5' 
          name = 'requiredElements' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'false' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xmi.idref = 'a39A2BDA60093'/>  <!-- Model.ModelElement -->
          </Model:TypedElement.type>
          <Model:Reference.referencedEnd>
            <Model:AssociationEnd xmi.idref = 'a39A2BDA700D3'/>
          </Model:Reference.referencedEnd>
        </Model:Reference>
        <!-- ==================== Model.ModelElement.container    [Reference] ==================== -->
        <Model:Reference xmi.id = 'a39A2BDA60100' 
          name = 'container' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xmi.idref = 'a39A2BDA60123'/>  <!-- Model.Namespace -->
          </Model:TypedElement.type>
          <Model:Reference.referencedEnd>
            <Model:AssociationEnd xmi.idref = 'a39A2BDA700F1'/>
          </Model:Reference.referencedEnd>
        </Model:Reference>
        <!-- ==================== Model.ModelElement.constraints    [Reference] ==================== -->
        <Model:Reference xmi.id = 'a39A2BDA60102' 
          name = 'constraints' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xmi.idref = 'a39A2BDA60345'/>  <!-- Model.Constraint -->
          </Model:TypedElement.type>
          <Model:Reference.referencedEnd>
            <Model:AssociationEnd xmi.idref = 'a39A2BDA7013F'/>
          </Model:Reference.referencedEnd>
        </Model:Reference>
        <!-- ==================== Model.ModelElement.findRequiredElements    [Operation] ==================== -->
        <Model:Operation xmi.id = 'a39A2BDA600E9' 
          name = 'findRequiredElements' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isQuery = 'true' >
          <Model:Namespace.contents>
            <Model:Parameter xmi.id = 'XX.1' 
              name = '*return' annotation = '' 
              direction = 'return_dir' >
              <Model:Parameter.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:Parameter.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a39A2BDA60093'/>  <!-- Model.ModelElement -->
              </Model:TypedElement.type>
            </Model:Parameter>
            <Model:Parameter xmi.id = 'XX.2' 
              name = 'kinds' annotation = '' 
              direction = 'in_dir' >
              <Model:Parameter.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '-1' is_ordered = 'false' is_unique = 'true' />
              </Model:Parameter.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60394'/>
              </Model:TypedElement.type>
            </Model:Parameter>
            <Model:Parameter xmi.id = 'XX.3' 
              name = 'recursive' annotation = '' 
              direction = 'in_dir' >
              <Model:Parameter.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:Parameter.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
              </Model:TypedElement.type>
            </Model:Parameter>
          </Model:Namespace.contents>
        </Model:Operation>
        <!-- ==================== Model.ModelElement.isRequiredBecause    [Operation] ==================== -->
        <Model:Operation xmi.id = 'a39A2BDA600F2' 
          name = 'isRequiredBecause' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isQuery = 'true' >
          <Model:Namespace.contents>
            <Model:Parameter xmi.id = 'XX.4' 
              name = '*return' annotation = '' 
              direction = 'return_dir' >
              <Model:Parameter.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:Parameter.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
              </Model:TypedElement.type>
            </Model:Parameter>
            <Model:Parameter xmi.id = 'XX.5' 
              name = 'otherElement' annotation = '' 
              direction = 'in_dir' >
              <Model:Parameter.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:Parameter.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a39A2BDA60093'/>  <!-- Model.ModelElement -->
              </Model:TypedElement.type>
            </Model:Parameter>
            <Model:Parameter xmi.id = 'XX.6' 
              name = 'reason' annotation = '' 
              direction = 'out_dir' >
              <Model:Parameter.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:Parameter.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60394'/>
              </Model:TypedElement.type>
            </Model:Parameter>
          </Model:Namespace.contents>
        </Model:Operation>
        <!-- ==================== Model.ModelElement.isFrozen    [Operation] ==================== -->
        <Model:Operation xmi.id = 'a39A2BDA60115' 
          name = 'isFrozen' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isQuery = 'true' >
          <Model:Namespace.contents>
            <Model:Parameter xmi.id = 'XX.7' 
              name = '*return' annotation = '' 
              direction = 'return_dir' >
              <Model:Parameter.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:Parameter.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
              </Model:TypedElement.type>
            </Model:Parameter>
          </Model:Namespace.contents>
        </Model:Operation>
        <!-- ==================== Model.ModelElement.isVisible    [Operation] ==================== -->
        <Model:Operation xmi.id = 'a39A2BDA6011F' 
          name = 'isVisible' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isQuery = 'true' >
          <Model:Namespace.contents>
            <Model:Parameter xmi.id = 'XX.8' 
              name = '*return' annotation = '' 
              direction = 'return_dir' >
              <Model:Parameter.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:Parameter.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
              </Model:TypedElement.type>
            </Model:Parameter>
            <Model:Parameter xmi.id = 'XX.9' 
              name = 'otherElement' annotation = '' 
              direction = 'in_dir' >
              <Model:Parameter.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:Parameter.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a39A2BDA60093'/>  <!-- Model.ModelElement -->
              </Model:TypedElement.type>
            </Model:Parameter>
          </Model:Namespace.contents>
        </Model:Operation>
        <!-- ==================== Model.ModelElement.ContainerDep    [Constant] ==================== -->
        <Model:Constant xmi.id = 'a39A2BDA600C2' 
          name = 'ContainerDep' annotation = '' >
          <Model:Constant.value>
            <XMI.any xmi.type = 'wstring' xmi.name = ''>container</XMI.any>
          </Model:Constant.value>
          <Model:TypedElement.type>
            <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60394'/>
          </Model:TypedElement.type>
        </Model:Constant>
        <!-- ==================== Model.ModelElement.ContentsDep    [Constant] ==================== -->
        <Model:Constant xmi.id = 'a39A2BDA600C4' 
          name = 'ContentsDep' annotation = '' >
          <Model:Constant.value>
            <XMI.any xmi.type = 'wstring' xmi.name = ''>contents</XMI.any>
          </Model:Constant.value>
          <Model:TypedElement.type>
            <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60394'/>
          </Model:TypedElement.type>
        </Model:Constant>
        <!-- ==================== Model.ModelElement.SignatureDep    [Constant] ==================== -->
        <Model:Constant xmi.id = 'a39A2BDA600C6' 
          name = 'SignatureDep' annotation = '' >
          <Model:Constant.value>
            <XMI.any xmi.type = 'wstring' xmi.name = ''>signature</XMI.any>
          </Model:Constant.value>
          <Model:TypedElement.type>
            <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60394'/>
          </Model:TypedElement.type>
        </Model:Constant>
        <!-- ==================== Model.ModelElement.ConstraintDep    [Constant] ==================== -->
        <Model:Constant xmi.id = 'a39A2BDA600C8' 
          name = 'ConstraintDep' annotation = '' >
          <Model:Constant.value>
            <XMI.any xmi.type = 'wstring' xmi.name = ''>constraint</XMI.any>
          </Model:Constant.value>
          <Model:TypedElement.type>
            <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60394'/>
          </Model:TypedElement.type>
        </Model:Constant>
        <!-- ==================== Model.ModelElement.ConstrainedElementsDep    [Constant] ==================== -->
        <Model:Constant xmi.id = 'a39A2BDA600D2' 
          name = 'ConstrainedElementsDep' annotation = '' >
          <Model:Constant.value>
            <XMI.any xmi.type = 'wstring' xmi.name = ''>constrained elements</XMI.any>
          </Model:Constant.value>
          <Model:TypedElement.type>
            <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60394'/>
          </Model:TypedElement.type>
        </Model:Constant>
        <!-- ==================== Model.ModelElement.SpecializationDep    [Constant] ==================== -->
        <Model:Constant xmi.id = 'a39A2BDA600D4' 
          name = 'SpecializationDep' annotation = '' >
          <Model:Constant.value>
            <XMI.any xmi.type = 'wstring' xmi.name = ''>specialization</XMI.any>
          </Model:Constant.value>
          <Model:TypedElement.type>
            <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60394'/>
          </Model:TypedElement.type>
        </Model:Constant>
        <!-- ==================== Model.ModelElement.ImportDep    [Constant] ==================== -->
        <Model:Constant xmi.id = 'a39A2BDA600D6' 
          name = 'ImportDep' annotation = '' >
          <Model:Constant.value>
            <XMI.any xmi.type = 'wstring' xmi.name = ''>import</XMI.any>
          </Model:Constant.value>
          <Model:TypedElement.type>
            <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60394'/>
          </Model:TypedElement.type>
        </Model:Constant>
        <!-- ==================== Model.ModelElement.TypeDefinitionDep    [Constant] ==================== -->
        <Model:Constant xmi.id = 'a39A2BDA600D8' 
          name = 'TypeDefinitionDep' annotation = '' >
          <Model:Constant.value>
            <XMI.any xmi.type = 'wstring' xmi.name = ''>type definition</XMI.any>
          </Model:Constant.value>
          <Model:TypedElement.type>
            <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60394'/>
          </Model:TypedElement.type>
        </Model:Constant>
        <!-- ==================== Model.ModelElement.ReferencedEndsDep    [Constant] ==================== -->
        <Model:Constant xmi.id = 'a39A2BDA600E1' 
          name = 'ReferencedEndsDep' annotation = '' >
          <Model:Constant.value>
            <XMI.any xmi.type = 'wstring' xmi.name = ''>referenced ends</XMI.any>
          </Model:Constant.value>
          <Model:TypedElement.type>
            <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60394'/>
          </Model:TypedElement.type>
        </Model:Constant>
        <!-- ==================== Model.ModelElement.TaggedElementsDep    [Constant] ==================== -->
        <Model:Constant xmi.id = 'a39A2BDA600E3' 
          name = 'TaggedElementsDep' annotation = '' >
          <Model:Constant.value>
            <XMI.any xmi.type = 'wstring' xmi.name = ''>tagged elements</XMI.any>
          </Model:Constant.value>
          <Model:TypedElement.type>
            <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60394'/>
          </Model:TypedElement.type>
        </Model:Constant>
        <!-- ==================== Model.ModelElement.IndirectDep    [Constant] ==================== -->
        <Model:Constant xmi.id = 'a39A2BDA600E5' 
          name = 'IndirectDep' annotation = '' >
          <Model:Constant.value>
            <XMI.any xmi.type = 'wstring' xmi.name = ''>indirect</XMI.any>
          </Model:Constant.value>
          <Model:TypedElement.type>
            <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60394'/>
          </Model:TypedElement.type>
        </Model:Constant>
        <!-- ==================== Model.ModelElement.AllDep    [Constant] ==================== -->
        <Model:Constant xmi.id = 'a39A2BDA600E7' 
          name = 'AllDep' annotation = '' >
          <Model:Constant.value>
            <XMI.any xmi.type = 'wstring' xmi.name = ''>all</XMI.any>
          </Model:Constant.value>
          <Model:TypedElement.type>
            <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60394'/>
          </Model:TypedElement.type>
        </Model:Constant>
        <!-- ==================== Model.ModelElement.MustBeContainedUnlessPackage    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a39A2BDA60094' 
          name = 'MustBeContainedUnlessPackage' annotation = '' 
          language = 'OCL' evaluationPolicy = 'deferred' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context ModelElement 
inv:
  not self.oclIsTypeOf(Package) implies
  self.container -&gt; size() = 1</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA60093'/>  <!-- Model.ModelElement -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== Model.org.omg.mof.idl_version=1.4    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.208' 
      name = 'org.omg.mof.idl_version=1.4' annotation = '' 
      tagId = 'org.omg.mof.idl_version' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>1.4</XMI.any>
      </Model:Tag.values>
      <Model:Tag.elements>
        <Model:ModelElement xmi.idref = 'a39A2BDA60093'/>  <!-- Model.ModelElement -->
        <Model:ModelElement xmi.idref = 'a39A2BDA600B2'/>  <!-- Model.ModelElement.name -->
        <Model:ModelElement xmi.idref = 'a39A2BDA600B3'/>  <!-- Model.ModelElement.qualifiedName -->
        <Model:ModelElement xmi.idref = 'a39A2BDA600B4'/>  <!-- Model.ModelElement.annotation -->
        <Model:ModelElement xmi.idref = 'a39A2BDA600E9'/>  <!-- Model.ModelElement.findRequiredElements -->
        <Model:ModelElement xmi.idref = 'a39A2BDA600F2'/>  <!-- Model.ModelElement.isRequiredBecause -->
        <Model:ModelElement xmi.idref = 'a39A2BDA60123'/>  <!-- Model.Namespace -->
        <Model:ModelElement xmi.idref = 'a39A2BDA6013E'/>  <!-- Model.Namespace.lookupElement -->
        <Model:ModelElement xmi.idref = 'a39A2BDA60140'/>  <!-- Model.Namespace.resolveQualifiedName -->
        <Model:ModelElement xmi.idref = 'a39A2BDA60150'/>  <!-- Model.Namespace.nameIsValid -->
        <Model:ModelElement xmi.idref = 'a39A2BDA60123'/>  <!-- Model.Namespace -->
        <Model:ModelElement xmi.idref = 'a39A2BDA60123'/>  <!-- Model.Namespace -->
        <Model:ModelElement xmi.idref = 'a39A2BDA60152'/>  <!-- Model.GeneralizableElement -->
        <Model:ModelElement xmi.idref = 'a39A2BDA601A0'/>  <!-- Model.TypedElement -->
        <Model:ModelElement xmi.idref = 'a39A2BDA601B3'/>  <!-- Model.Classifier -->
        <Model:ModelElement xmi.idref = 'a39A2BDA601BB'/>  <!-- Model.Class -->
        <Model:ModelElement xmi.idref = 'a39A2BDA601CD'/>  <!-- Model.DataType -->
        <Model:ModelElement xmi.idref = 'a39A2BDA601EE'/>  <!-- Model.Feature -->
        <Model:ModelElement xmi.idref = 'a39A2BDA6021B'/>  <!-- Model.StructuralFeature -->
        <Model:ModelElement xmi.idref = 'a39A2BDA6021E'/>  <!-- Model.Attribute -->
        <Model:ModelElement xmi.idref = 'a39A2BDA60229'/>  <!-- Model.Reference -->
        <Model:ModelElement xmi.idref = 'a39A2BDA6025C'/>  <!-- Model.BehavioralFeature -->
        <Model:ModelElement xmi.idref = 'a39A2BDA6025D'/>  <!-- Model.Operation -->
        <Model:ModelElement xmi.idref = 'a39A2BDA6027A'/>  <!-- Model.Exception -->
        <Model:ModelElement xmi.idref = 'a39A2BDA60289'/>  <!-- Model.Association -->
        <Model:ModelElement xmi.idref = 'a39A2BDA602B7'/>  <!-- Model.AssociationEnd -->
        <Model:ModelElement xmi.idref = 'a39A2BDA602E4'/>  <!-- Model.Package -->
        <Model:ModelElement xmi.idref = 'a39A2BDA60342'/>  <!-- Model.Parameter -->
        <Model:ModelElement xmi.idref = 'a39A2BDA60345'/>  <!-- Model.Constraint -->
        <Model:ModelElement xmi.idref = 'a39A2BDA60355'/>  <!-- Model.Constraint.expression -->
        <Model:ModelElement xmi.idref = 'a39A2BDA60356'/>  <!-- Model.Constraint.language -->
        <Model:ModelElement xmi.idref = 'a39A2BDA60367'/>  <!-- Model.Constant -->
        <Model:ModelElement xmi.idref = 'a39A2BDA60377'/>  <!-- Model.Constant.value -->
        <Model:ModelElement xmi.idref = 'a39A2BDA60380'/>  <!-- Model.Tag -->
        <Model:ModelElement xmi.idref = 'a39A2BDA60381'/>  <!-- Model.Tag.tagId -->
        <Model:ModelElement xmi.idref = 'a39A2BDA60382'/>  <!-- Model.Tag.values -->
        <Model:ModelElement xmi.idref = 'a3B539954037F'/>  <!-- Model.PrimitiveType -->
        <Model:ModelElement xmi.idref = 'a3B53996401C9'/>  <!-- Model.StructureType -->
        <Model:ModelElement xmi.idref = 'a3B53996C0351'/>  <!-- Model.EnumerationType -->
        <Model:ModelElement xmi.idref = 'a3B5399810012'/>  <!-- Model.AliasType -->
        <Model:ModelElement xmi.idref = 'a3B5399B20258'/>  <!-- Model.StructureField -->
        <Model:ModelElement xmi.idref = 'a39A2BDA700B2'/>  <!-- Model.AttachesTo -->
        <Model:ModelElement xmi.idref = 'a39A2BDA700D1'/>  <!-- Model.DependsOn -->
        <Model:ModelElement xmi.idref = 'a39A2BDA700F0'/>  <!-- Model.Contains -->
        <Model:ModelElement xmi.idref = 'a39A2BDA7010F'/>  <!-- Model.Generalizes -->
        <Model:ModelElement xmi.idref = 'a39A2BDA7011F'/>  <!-- Model.Aliases -->
        <Model:ModelElement xmi.idref = 'a39A2BDA7013E'/>  <!-- Model.Constrains -->
        <Model:ModelElement xmi.idref = 'a39A2BDA7015E'/>  <!-- Model.CanRaise -->
        <Model:ModelElement xmi.idref = 'a39A2BDA7016D'/>  <!-- Model.Exposes -->
        <Model:ModelElement xmi.idref = 'a39A2BDA7018C'/>  <!-- Model.RefersTo -->
        <Model:ModelElement xmi.idref = 'a39A2BDA7019C'/>  <!-- Model.IsOfType -->
      </Model:Tag.elements>
    </Model:Tag>
    <!-- ==================== Model.com.urep.jcr.mof.object_name=true    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.209' 
      name = 'com.urep.jcr.mof.object_name=true' annotation = '' 
      tagId = 'com.urep.jcr.mof.object_name' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>true</XMI.any>
      </Model:Tag.values>
      <Model:Tag.elements>
        <Model:ModelElement xmi.idref = 'a39A2BDA600B2'/>  <!-- Model.ModelElement.name -->
        <Model:ModelElement xmi.idref = 'a39A2BDA60381'/>  <!-- Model.Tag.tagId -->
      </Model:Tag.elements>
    </Model:Tag>
    <Model:Import xmi.id = 'G.210' 
      name = 'PrimitiveTypes' annotation = '' 
      visibility = 'public_vis' isClustered = 'false' >
      <Model:Import.importedNamespace>
        <Model:Namespace xml:link = 'simple' href = 'PrimitiveTypes.xml|a3B5389EE0204'/>
      </Model:Import.importedNamespace>
    </Model:Import>
    <!-- ==================== Model.org.omg.sap2mof.DerivationCodeJava=// ModelElement.getQualifiedName...    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.211' 
      name = 'org.omg.sap2mof.DerivationCodeJava=// ModelElement.getQualifiedName...' annotation = '' 
      tagId = 'org.omg.sap2mof.DerivationCodeJava' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>// ModelElement.getQualifiedName
return com.sap.tc.moin.repository.core.jmi.util.MoinMetamodelCode.getQualifiedName(connection, this, this);</XMI.any>
      </Model:Tag.values>
      <Model:Tag.elements>
        <Model:ModelElement xmi.idref = 'a39A2BDA600B3'/>  <!-- Model.ModelElement.qualifiedName -->
      </Model:Tag.elements>
    </Model:Tag>
    <!-- ==================== Model.org.omg.sap2mof.OperationCodeJava=// ModelElement.findRequiredElements...    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.212' 
      name = 'org.omg.sap2mof.OperationCodeJava=// ModelElement.findRequiredElements...' annotation = '' 
      tagId = 'org.omg.sap2mof.OperationCodeJava' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>// ModelElement.findRequiredElements
return com.sap.tc.moin.repository.core.jmi.util.MoinMetamodelCode.findRequiredElements(connection, this, this, kinds, recursive);</XMI.any>
      </Model:Tag.values>
      <Model:Tag.elements>
        <Model:ModelElement xmi.idref = 'a39A2BDA600E9'/>  <!-- Model.ModelElement.findRequiredElements -->
      </Model:Tag.elements>
    </Model:Tag>
    <!-- ==================== Model.org.omg.sap2mof.OperationCodeJava=// ModelElement.isRequiredBecause...    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.213' 
      name = 'org.omg.sap2mof.OperationCodeJava=// ModelElement.isRequiredBecause...' annotation = '' 
      tagId = 'org.omg.sap2mof.OperationCodeJava' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>// ModelElement.isRequiredBecause
return com.sap.tc.moin.repository.core.jmi.util.MoinMetamodelCode.isRequiredBecause(connection, this, this, otherElement, reason);</XMI.any>
      </Model:Tag.values>
      <Model:Tag.elements>
        <Model:ModelElement xmi.idref = 'a39A2BDA600F2'/>  <!-- Model.ModelElement.isRequiredBecause -->
      </Model:Tag.elements>
    </Model:Tag>
    <!-- ==================== Model.org.omg.sap2mof.OperationCodeJava=// ModelElement.isFrozen...    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.214' 
      name = 'org.omg.sap2mof.OperationCodeJava=// ModelElement.isFrozen...' annotation = '' 
      tagId = 'org.omg.sap2mof.OperationCodeJava' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>// ModelElement.isFrozen
return com.sap.tc.moin.repository.core.jmi.util.MoinMetamodelCode.isFrozen(connection, this, this);
</XMI.any>
      </Model:Tag.values>
      <Model:Tag.elements>
        <Model:ModelElement xmi.idref = 'a39A2BDA60115'/>  <!-- Model.ModelElement.isFrozen -->
      </Model:Tag.elements>
    </Model:Tag>
    <!-- ==================== Model.org.omg.sap2mof.OperationCodeJava=// ModelElement.isVisible...    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.215' 
      name = 'org.omg.sap2mof.OperationCodeJava=// ModelElement.isVisible...' annotation = '' 
      tagId = 'org.omg.sap2mof.OperationCodeJava' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>// ModelElement.isVisible
return com.sap.tc.moin.repository.core.jmi.util.MoinMetamodelCode.isVisible(connection, this, this, otherElement);</XMI.any>
      </Model:Tag.values>
      <Model:Tag.elements>
        <Model:ModelElement xmi.idref = 'a39A2BDA6011F'/>  <!-- Model.ModelElement.isVisible -->
      </Model:Tag.elements>
    </Model:Tag>
    <!-- ==================== Model.javax.jmi.substituteName=CONTAINERDEP    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.216' 
      name = 'javax.jmi.substituteName=CONTAINERDEP' annotation = '' 
      tagId = 'javax.jmi.substituteName' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>CONTAINERDEP</XMI.any>
      </Model:Tag.values>
      <Model:Tag.elements>
        <Model:ModelElement xmi.idref = 'a39A2BDA600C2'/>  <!-- Model.ModelElement.ContainerDep -->
      </Model:Tag.elements>
    </Model:Tag>
    <!-- ==================== Model.javax.jmi.substituteName=CONTENTSDEP    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.217' 
      name = 'javax.jmi.substituteName=CONTENTSDEP' annotation = '' 
      tagId = 'javax.jmi.substituteName' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>CONTENTSDEP</XMI.any>
      </Model:Tag.values>
      <Model:Tag.elements>
        <Model:ModelElement xmi.idref = 'a39A2BDA600C4'/>  <!-- Model.ModelElement.ContentsDep -->
      </Model:Tag.elements>
    </Model:Tag>
    <!-- ==================== Model.javax.jmi.substituteName=SIGNATUREDEP    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.218' 
      name = 'javax.jmi.substituteName=SIGNATUREDEP' annotation = '' 
      tagId = 'javax.jmi.substituteName' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>SIGNATUREDEP</XMI.any>
      </Model:Tag.values>
      <Model:Tag.elements>
        <Model:ModelElement xmi.idref = 'a39A2BDA600C6'/>  <!-- Model.ModelElement.SignatureDep -->
      </Model:Tag.elements>
    </Model:Tag>
    <!-- ==================== Model.javax.jmi.substituteName=CONSTRAINTDEP    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.219' 
      name = 'javax.jmi.substituteName=CONSTRAINTDEP' annotation = '' 
      tagId = 'javax.jmi.substituteName' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>CONSTRAINTDEP</XMI.any>
      </Model:Tag.values>
      <Model:Tag.elements>
        <Model:ModelElement xmi.idref = 'a39A2BDA600C8'/>  <!-- Model.ModelElement.ConstraintDep -->
      </Model:Tag.elements>
    </Model:Tag>
    <!-- ==================== Model.javax.jmi.substituteName=CONSTRAINEDELEMENTSDEP    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.220' 
      name = 'javax.jmi.substituteName=CONSTRAINEDELEMENTSDEP' annotation = '' 
      tagId = 'javax.jmi.substituteName' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>CONSTRAINEDELEMENTSDEP</XMI.any>
      </Model:Tag.values>
      <Model:Tag.elements>
        <Model:ModelElement xmi.idref = 'a39A2BDA600D2'/>  <!-- Model.ModelElement.ConstrainedElementsDep -->
      </Model:Tag.elements>
    </Model:Tag>
    <!-- ==================== Model.javax.jmi.substituteName=SPECIALIZATIONDEP    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.221' 
      name = 'javax.jmi.substituteName=SPECIALIZATIONDEP' annotation = '' 
      tagId = 'javax.jmi.substituteName' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>SPECIALIZATIONDEP</XMI.any>
      </Model:Tag.values>
      <Model:Tag.elements>
        <Model:ModelElement xmi.idref = 'a39A2BDA600D4'/>  <!-- Model.ModelElement.SpecializationDep -->
      </Model:Tag.elements>
    </Model:Tag>
    <!-- ==================== Model.javax.jmi.substituteName=IMPORTDEP    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.222' 
      name = 'javax.jmi.substituteName=IMPORTDEP' annotation = '' 
      tagId = 'javax.jmi.substituteName' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>IMPORTDEP</XMI.any>
      </Model:Tag.values>
      <Model:Tag.elements>
        <Model:ModelElement xmi.idref = 'a39A2BDA600D6'/>  <!-- Model.ModelElement.ImportDep -->
      </Model:Tag.elements>
    </Model:Tag>
    <!-- ==================== Model.javax.jmi.substituteName=TYPEDEFINITIONDEP    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.223' 
      name = 'javax.jmi.substituteName=TYPEDEFINITIONDEP' annotation = '' 
      tagId = 'javax.jmi.substituteName' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>TYPEDEFINITIONDEP</XMI.any>
      </Model:Tag.values>
      <Model:Tag.elements>
        <Model:ModelElement xmi.idref = 'a39A2BDA600D8'/>  <!-- Model.ModelElement.TypeDefinitionDep -->
      </Model:Tag.elements>
    </Model:Tag>
    <!-- ==================== Model.javax.jmi.substituteName=REFERENCEDENDSDEP    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.224' 
      name = 'javax.jmi.substituteName=REFERENCEDENDSDEP' annotation = '' 
      tagId = 'javax.jmi.substituteName' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>REFERENCEDENDSDEP</XMI.any>
      </Model:Tag.values>
      <Model:Tag.elements>
        <Model:ModelElement xmi.idref = 'a39A2BDA600E1'/>  <!-- Model.ModelElement.ReferencedEndsDep -->
      </Model:Tag.elements>
    </Model:Tag>
    <!-- ==================== Model.javax.jmi.substituteName=TAGGEDELEMENTSDEP    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.225' 
      name = 'javax.jmi.substituteName=TAGGEDELEMENTSDEP' annotation = '' 
      tagId = 'javax.jmi.substituteName' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>TAGGEDELEMENTSDEP</XMI.any>
      </Model:Tag.values>
      <Model:Tag.elements>
        <Model:ModelElement xmi.idref = 'a39A2BDA600E3'/>  <!-- Model.ModelElement.TaggedElementsDep -->
      </Model:Tag.elements>
    </Model:Tag>
    <!-- ==================== Model.javax.jmi.substituteName=INDIRECTDEP    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.226' 
      name = 'javax.jmi.substituteName=INDIRECTDEP' annotation = '' 
      tagId = 'javax.jmi.substituteName' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>INDIRECTDEP</XMI.any>
      </Model:Tag.values>
      <Model:Tag.elements>
        <Model:ModelElement xmi.idref = 'a39A2BDA600E5'/>  <!-- Model.ModelElement.IndirectDep -->
      </Model:Tag.elements>
    </Model:Tag>
    <!-- ==================== Model.javax.jmi.substituteName=ALLDEP    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.227' 
      name = 'javax.jmi.substituteName=ALLDEP' annotation = '' 
      tagId = 'javax.jmi.substituteName' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>ALLDEP</XMI.any>
      </Model:Tag.values>
      <Model:Tag.elements>
        <Model:ModelElement xmi.idref = 'a39A2BDA600E7'/>  <!-- Model.ModelElement.AllDep -->
      </Model:Tag.elements>
    </Model:Tag>
    <!-- ==================== Model.VisibilityKind    [DataType] ==================== -->
    <Model:DataType xmi.id = 'a39A2BDA60121' 
      name = 'VisibilityKind' annotation = '' 
      isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' >
      <Model:DataType.typeCode>
        <XMI.CorbaTypeCode>
          <XMI.CorbaTcEnum xmi.tcName = 'VisibilityKind'>
          <XMI.CorbaTcEnumLabel xmi.tcName = 'public_vis'/>
          <XMI.CorbaTcEnumLabel xmi.tcName = 'protected_vis'/>
          <XMI.CorbaTcEnumLabel xmi.tcName = 'private_vis'/>
          </XMI.CorbaTcEnum>
        </XMI.CorbaTypeCode>
      </Model:DataType.typeCode>
    </Model:DataType>
    <!-- ==================== Model.Namespace    [Class] ==================== -->
    <Model:Class xmi.id = 'a39A2BDA60123' 
      name = 'Namespace' annotation = '' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' 
      isSingleton = 'false' >
      <Model:ModelElement.constraints>
        <Model:Constraint xmi.idref = 'a39A2BDA60124'/>  <!-- Model.Namespace.ContentNamesMustNotCollide -->
      </Model:ModelElement.constraints>
      <Model:GeneralizableElement.supertypes>
        <Model:GeneralizableElement xmi.idref = 'a39A2BDA60093'/>  <!-- Model.ModelElement -->
      </Model:GeneralizableElement.supertypes>
      <Model:Namespace.contents>
        <!-- ==================== Model.Namespace.contents    [Reference] ==================== -->
        <Model:Reference xmi.id = 'a39A2BDA60135' 
          name = 'contents' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'true' is_unique = 'true' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xmi.idref = 'a39A2BDA60093'/>  <!-- Model.ModelElement -->
          </Model:TypedElement.type>
          <Model:Reference.referencedEnd>
            <Model:AssociationEnd xmi.idref = 'a39A2BDA700F2'/>
          </Model:Reference.referencedEnd>
        </Model:Reference>
        <!-- ==================== Model.Namespace.lookupElement    [Operation] ==================== -->
        <Model:Operation xmi.id = 'a39A2BDA6013E' 
          name = 'lookupElement' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isQuery = 'true' >
          <Model:Operation.exceptions>
            <Model:Exception xmi.idref = 'a39A2BDA60131'/>  <!-- Model.Namespace.NameNotFound -->
          </Model:Operation.exceptions>
          <Model:Namespace.contents>
            <Model:Parameter xmi.id = 'XX.10' 
              name = '*return' annotation = '' 
              direction = 'return_dir' >
              <Model:Parameter.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:Parameter.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a39A2BDA60093'/>  <!-- Model.ModelElement -->
              </Model:TypedElement.type>
            </Model:Parameter>
            <Model:Parameter xmi.id = 'XX.11' 
              name = 'name' annotation = '' 
              direction = 'in_dir' >
              <Model:Parameter.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:Parameter.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60394'/>
              </Model:TypedElement.type>
            </Model:Parameter>
          </Model:Namespace.contents>
        </Model:Operation>
        <!-- ==================== Model.Namespace.resolveQualifiedName    [Operation] ==================== -->
        <Model:Operation xmi.id = 'a39A2BDA60140' 
          name = 'resolveQualifiedName' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isQuery = 'true' >
          <Model:Operation.exceptions>
            <Model:Exception xmi.idref = 'a39A2BDA60133'/>  <!-- Model.Namespace.NameNotResolved -->
          </Model:Operation.exceptions>
          <Model:Namespace.contents>
            <Model:Parameter xmi.id = 'XX.12' 
              name = '*return' annotation = '' 
              direction = 'return_dir' >
              <Model:Parameter.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:Parameter.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a39A2BDA60093'/>  <!-- Model.ModelElement -->
              </Model:TypedElement.type>
            </Model:Parameter>
            <Model:Parameter xmi.id = 'XX.13' 
              name = 'qualifiedName' annotation = '' 
              direction = 'in_dir' >
              <Model:Parameter.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '-1' is_ordered = 'true' is_unique = 'false' />
              </Model:Parameter.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60394'/>
              </Model:TypedElement.type>
            </Model:Parameter>
          </Model:Namespace.contents>
        </Model:Operation>
        <!-- ==================== Model.Namespace.findElementsByType    [Operation] ==================== -->
        <Model:Operation xmi.id = 'a39A2BDA60142' 
          name = 'findElementsByType' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isQuery = 'true' >
          <Model:Namespace.contents>
            <Model:Parameter xmi.id = 'XX.14' 
              name = '*return' annotation = '' 
              direction = 'return_dir' >
              <Model:Parameter.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'true' is_unique = 'true' />
              </Model:Parameter.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a39A2BDA60093'/>  <!-- Model.ModelElement -->
              </Model:TypedElement.type>
            </Model:Parameter>
            <Model:Parameter xmi.id = 'XX.15' 
              name = 'ofType' annotation = '' 
              direction = 'in_dir' >
              <Model:Parameter.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:Parameter.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a39A2BDA601BB'/>  <!-- Model.Class -->
              </Model:TypedElement.type>
            </Model:Parameter>
            <Model:Parameter xmi.id = 'XX.16' 
              name = 'includeSubtypes' annotation = '' 
              direction = 'in_dir' >
              <Model:Parameter.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:Parameter.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
              </Model:TypedElement.type>
            </Model:Parameter>
          </Model:Namespace.contents>
        </Model:Operation>
        <!-- ==================== Model.Namespace.nameIsValid    [Operation] ==================== -->
        <Model:Operation xmi.id = 'a39A2BDA60150' 
          name = 'nameIsValid' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isQuery = 'true' >
          <Model:Namespace.contents>
            <Model:Parameter xmi.id = 'XX.17' 
              name = '*return' annotation = '' 
              direction = 'return_dir' >
              <Model:Parameter.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:Parameter.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
              </Model:TypedElement.type>
            </Model:Parameter>
            <Model:Parameter xmi.id = 'XX.18' 
              name = 'proposedName' annotation = '' 
              direction = 'in_dir' >
              <Model:Parameter.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:Parameter.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60394'/>
              </Model:TypedElement.type>
            </Model:Parameter>
          </Model:Namespace.contents>
        </Model:Operation>
        <!-- ==================== Model.Namespace.NameNotFound    [Exception] ==================== -->
        <Model:Exception xmi.id = 'a39A2BDA60131' 
          name = 'NameNotFound' annotation = '' 
          scope = 'classifier_level' visibility = 'public_vis' >
          <Model:Namespace.contents>
            <Model:Parameter xmi.id = 'XX.19' 
              name = 'name' annotation = '' 
              direction = 'out_dir' >
              <Model:Parameter.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:Parameter.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60394'/>
              </Model:TypedElement.type>
            </Model:Parameter>
          </Model:Namespace.contents>
        </Model:Exception>
        <!-- ==================== Model.Namespace.NameNotResolved    [Exception] ==================== -->
        <Model:Exception xmi.id = 'a39A2BDA60133' 
          name = 'NameNotResolved' annotation = '' 
          scope = 'classifier_level' visibility = 'public_vis' >
          <Model:Namespace.contents>
            <Model:Parameter xmi.id = 'XX.20' 
              name = 'explanation' annotation = '' 
              direction = 'out_dir' >
              <Model:Parameter.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:Parameter.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60394'/>
              </Model:TypedElement.type>
            </Model:Parameter>
            <Model:Parameter xmi.id = 'XX.21' 
              name = 'restOfName' annotation = '' 
              direction = 'out_dir' >
              <Model:Parameter.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'true' is_unique = 'false' />
              </Model:Parameter.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60394'/>
              </Model:TypedElement.type>
            </Model:Parameter>
          </Model:Namespace.contents>
        </Model:Exception>
        <!-- ==================== Model.Namespace.ContentNamesMustNotCollide    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a39A2BDA60124' 
          name = 'ContentNamesMustNotCollide' annotation = '' 
          language = 'OCL' evaluationPolicy = 'immediate' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Namespace
inv: 
  self.contents-&gt;forAll(e1, e2 | e1.name = e2.name implies
  e1 = e2)</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA60123'/>  <!-- Model.Namespace -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== Model.org.omg.sap2mof.OperationCodeJava=// Namespace.lookupElement...    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.228' 
      name = 'org.omg.sap2mof.OperationCodeJava=// Namespace.lookupElement...' annotation = '' 
      tagId = 'org.omg.sap2mof.OperationCodeJava' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>// Namespace.lookupElement
return com.sap.tc.moin.repository.core.jmi.util.MoinMetamodelCode.lookupElement(connection, this, this, name);</XMI.any>
      </Model:Tag.values>
      <Model:Tag.elements>
        <Model:ModelElement xmi.idref = 'a39A2BDA6013E'/>  <!-- Model.Namespace.lookupElement -->
      </Model:Tag.elements>
    </Model:Tag>
    <!-- ==================== Model.org.omg.sap2mof.OperationCodeJava=// Namespace.resolveQualifiedName...    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.229' 
      name = 'org.omg.sap2mof.OperationCodeJava=// Namespace.resolveQualifiedName...' annotation = '' 
      tagId = 'org.omg.sap2mof.OperationCodeJava' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>// Namespace.resolveQualifiedName
return com.sap.tc.moin.repository.core.jmi.util.MoinMetamodelCode.resolveQualifiedName(connection, this, this, qualifiedName);</XMI.any>
      </Model:Tag.values>
      <Model:Tag.elements>
        <Model:ModelElement xmi.idref = 'a39A2BDA60140'/>  <!-- Model.Namespace.resolveQualifiedName -->
      </Model:Tag.elements>
    </Model:Tag>
    <!-- ==================== Model.org.omg.sap2mof.OperationCodeJava=// Namespace.findElementsByType...    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.230' 
      name = 'org.omg.sap2mof.OperationCodeJava=// Namespace.findElementsByType...' annotation = '' 
      tagId = 'org.omg.sap2mof.OperationCodeJava' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>// Namespace.findElementsByType
return com.sap.tc.moin.repository.core.jmi.util.MoinMetamodelCode.findElementsByType(connection, this, this, ofType, includeSubtypes);</XMI.any>
      </Model:Tag.values>
      <Model:Tag.elements>
        <Model:ModelElement xmi.idref = 'a39A2BDA60142'/>  <!-- Model.Namespace.findElementsByType -->
      </Model:Tag.elements>
    </Model:Tag>
    <!-- ==================== Model.org.omg.sap2mof.OperationCodeJava=// Namespace.nameIsValid...    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.231' 
      name = 'org.omg.sap2mof.OperationCodeJava=// Namespace.nameIsValid...' annotation = '' 
      tagId = 'org.omg.sap2mof.OperationCodeJava' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>// Namespace.nameIsValid
return com.sap.tc.moin.repository.core.jmi.util.MoinMetamodelCode.nameIsValid(connection, this, this, proposedName);</XMI.any>
      </Model:Tag.values>
      <Model:Tag.elements>
        <Model:ModelElement xmi.idref = 'a39A2BDA60150'/>  <!-- Model.Namespace.nameIsValid -->
      </Model:Tag.elements>
    </Model:Tag>
    <!-- ==================== Model.GeneralizableElement    [Class] ==================== -->
    <Model:Class xmi.id = 'a39A2BDA60152' 
      name = 'GeneralizableElement' annotation = '' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' 
      isSingleton = 'false' >
      <Model:ModelElement.constraints>
        <Model:Constraint xmi.idref = 'a466435C8005D'/>  <!-- Model.GeneralizableElement.DiamondRuleMustBeObeyed -->
        <Model:Constraint xmi.idref = 'a47B99C730229'/>  <!-- Model.GeneralizableElement.IsRootInitIsTrue -->
        <Model:Constraint xmi.idref = 'a47B99CBA0276'/>  <!-- Model.GeneralizableElement.IsLeafInitIsTrue -->
        <Model:Constraint xmi.idref = 'a39A2BDA60153'/>  <!-- Model.GeneralizableElement.SupertypeMustNotBeSelf -->
        <Model:Constraint xmi.idref = 'a39A2BDA60162'/>  <!-- Model.GeneralizableElement.ContentsMustNotCollideWithSupertypes -->
        <Model:Constraint xmi.idref = 'a39A2BDA60170'/>  <!-- Model.GeneralizableElement.NoSupertypesAllowedForRoot -->
        <Model:Constraint xmi.idref = 'a39A2BDA6017E'/>  <!-- Model.GeneralizableElement.NoSubtypesAllowedForLeaf -->
      </Model:ModelElement.constraints>
      <Model:GeneralizableElement.supertypes>
        <Model:GeneralizableElement xmi.idref = 'a39A2BDA60123'/>  <!-- Model.Namespace -->
      </Model:GeneralizableElement.supertypes>
      <Model:Namespace.contents>
        <!-- ==================== Model.GeneralizableElement.isRoot    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a39A2BDA60181' 
          name = 'isRoot' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
          </Model:TypedElement.type>
        </Model:Attribute>
        <!-- ==================== Model.GeneralizableElement.isLeaf    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a39A2BDA60182' 
          name = 'isLeaf' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
          </Model:TypedElement.type>
        </Model:Attribute>
        <!-- ==================== Model.GeneralizableElement.isAbstract    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a39A2BDA60183' 
          name = 'isAbstract' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
          </Model:TypedElement.type>
        </Model:Attribute>
        <!-- ==================== Model.GeneralizableElement.visibility    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a39A2BDA6018C' 
          name = 'visibility' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xmi.idref = 'a39A2BDA60121'/>  <!-- Model.VisibilityKind -->
          </Model:TypedElement.type>
        </Model:Attribute>
        <!-- ==================== Model.GeneralizableElement.supertypes    [Reference] ==================== -->
        <Model:Reference xmi.id = 'a39A2BDA6018D' 
          name = 'supertypes' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'true' is_unique = 'true' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xmi.idref = 'a39A2BDA60152'/>  <!-- Model.GeneralizableElement -->
          </Model:TypedElement.type>
          <Model:Reference.referencedEnd>
            <Model:AssociationEnd xmi.idref = 'a39A2BDA70110'/>
          </Model:Reference.referencedEnd>
        </Model:Reference>
        <!-- ==================== Model.GeneralizableElement.allSupertypes    [Operation] ==================== -->
        <Model:Operation xmi.id = 'a39A2BDA6018F' 
          name = 'allSupertypes' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isQuery = 'true' >
          <Model:Namespace.contents>
            <Model:Parameter xmi.id = 'XX.22' 
              name = '*return' annotation = '' 
              direction = 'return_dir' >
              <Model:Parameter.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'true' is_unique = 'true' />
              </Model:Parameter.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a39A2BDA60152'/>  <!-- Model.GeneralizableElement -->
              </Model:TypedElement.type>
            </Model:Parameter>
          </Model:Namespace.contents>
        </Model:Operation>
        <!-- ==================== Model.GeneralizableElement.lookupElementExtended    [Operation] ==================== -->
        <Model:Operation xmi.id = 'a39A2BDA60190' 
          name = 'lookupElementExtended' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isQuery = 'true' >
          <Model:Operation.exceptions>
            <Model:Exception xmi.idref = 'a39A2BDA60131'/>  <!-- Model.Namespace.NameNotFound -->
          </Model:Operation.exceptions>
          <Model:Namespace.contents>
            <Model:Parameter xmi.id = 'XX.23' 
              name = '*return' annotation = '' 
              direction = 'return_dir' >
              <Model:Parameter.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:Parameter.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a39A2BDA60093'/>  <!-- Model.ModelElement -->
              </Model:TypedElement.type>
            </Model:Parameter>
            <Model:Parameter xmi.id = 'XX.24' 
              name = 'name' annotation = '' 
              direction = 'in_dir' >
              <Model:Parameter.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:Parameter.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60394'/>
              </Model:TypedElement.type>
            </Model:Parameter>
          </Model:Namespace.contents>
        </Model:Operation>
        <!-- ==================== Model.GeneralizableElement.findElementsByTypeExtended    [Operation] ==================== -->
        <Model:Operation xmi.id = 'a39A2BDA6019D' 
          name = 'findElementsByTypeExtended' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isQuery = 'true' >
          <Model:Namespace.contents>
            <Model:Parameter xmi.id = 'XX.25' 
              name = '*return' annotation = '' 
              direction = 'return_dir' >
              <Model:Parameter.multiplicity>
                <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'true' is_unique = 'true' />
              </Model:Parameter.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a39A2BDA60093'/>  <!-- Model.ModelElement -->
              </Model:TypedElement.type>
            </Model:Parameter>
            <Model:Parameter xmi.id = 'XX.26' 
              name = 'ofType' annotation = '' 
              direction = 'in_dir' >
              <Model:Parameter.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:Parameter.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a39A2BDA601BB'/>  <!-- Model.Class -->
              </Model:TypedElement.type>
            </Model:Parameter>
            <Model:Parameter xmi.id = 'XX.27' 
              name = 'includeSubtypes' annotation = '' 
              direction = 'in_dir' >
              <Model:Parameter.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:Parameter.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
              </Model:TypedElement.type>
            </Model:Parameter>
          </Model:Namespace.contents>
        </Model:Operation>
        <!-- ==================== Model.GeneralizableElement.SupertypeMustNotBeSelf    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a39A2BDA60153' 
          name = 'SupertypeMustNotBeSelf' annotation = '' 
          language = 'OCL' evaluationPolicy = 'immediate' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context GeneralizableElement
inv:
  self.allSupertypes() -&gt; forAll(s | s &lt;&gt; self)</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA60152'/>  <!-- Model.GeneralizableElement -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
        <!-- ==================== Model.GeneralizableElement.ContentsMustNotCollideWithSupertypes    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a39A2BDA60162' 
          name = 'ContentsMustNotCollideWithSupertypes' annotation = '' 
          language = 'OCL' evaluationPolicy = 'immediate' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context GeneralizableElement
inv:
  let superContents = self.allSupertypes() -&gt; 
  collect(s | s.contents) in 
  self.contents -&gt; 
  forAll(m1 | 
  superContents -&gt; 
  forAll(m2 | 
  m1.name = m2.name implies m1 = m2))</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA60152'/>  <!-- Model.GeneralizableElement -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
        <!-- ==================== Model.GeneralizableElement.NoSupertypesAllowedForRoot    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a39A2BDA60170' 
          name = 'NoSupertypesAllowedForRoot' annotation = '' 
          language = 'OCL' evaluationPolicy = 'immediate' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context GeneralizableElement
inv: 
  self.isRoot implies self.supertypes -&gt; isEmpty()</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA60152'/>  <!-- Model.GeneralizableElement -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
        <!-- ==================== Model.GeneralizableElement.NoSubtypesAllowedForLeaf    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a39A2BDA6017E' 
          name = 'NoSubtypesAllowedForLeaf' annotation = '' 
          language = 'OCL' evaluationPolicy = 'immediate' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context GeneralizableElement
inv: 
  self.supertypes -&gt; forAll(s | not s.isLeaf)</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA60152'/>  <!-- Model.GeneralizableElement -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
        <!-- ==================== Model.GeneralizableElement.DiamondRuleMustBeObeyed    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a466435C8005D' 
          name = 'DiamondRuleMustBeObeyed' annotation = '' 
          language = 'OCL' evaluationPolicy = 'deferred' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context GeneralizableElement
inv:
let superNamespaces =
self.supertypes -&gt; collect(s | s.extendedNamespace()) in
superNamespaces -&gt; asSet() -&gt; isUnique(s | s.name)</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA60152'/>  <!-- Model.GeneralizableElement -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
        <!-- ==================== Model.GeneralizableElement.IsRootInitIsTrue    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a47B99C730229' 
          name = 'IsRootInitIsTrue' annotation = '' 
          language = 'OCLInit' evaluationPolicy = 'deferred' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context GeneralizableElement::isRoot:Boolean
init: true</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA60152'/>  <!-- Model.GeneralizableElement -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
        <!-- ==================== Model.GeneralizableElement.IsLeafInitIsTrue    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a47B99CBA0276' 
          name = 'IsLeafInitIsTrue' annotation = '' 
          language = 'OCLInit' evaluationPolicy = 'deferred' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context GeneralizableElement::isLeaf:Boolean
init: true</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA60152'/>  <!-- Model.GeneralizableElement -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== Model.org.omg.sap2mof.OperationCodeJava=// GeneralizableElement.allSupertypes...    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.232' 
      name = 'org.omg.sap2mof.OperationCodeJava=// GeneralizableElement.allSupertypes...' annotation = '' 
      tagId = 'org.omg.sap2mof.OperationCodeJava' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>// GeneralizableElement.allSupertypes
return com.sap.tc.moin.repository.core.jmi.util.MoinMetamodelCode.allSupertypes(connection, this, this);</XMI.any>
      </Model:Tag.values>
      <Model:Tag.elements>
        <Model:ModelElement xmi.idref = 'a39A2BDA6018F'/>  <!-- Model.GeneralizableElement.allSupertypes -->
      </Model:Tag.elements>
    </Model:Tag>
    <!-- ==================== Model.org.omg.sap2mof.OperationCodeJava=// GeneralizableElement.lookupElementExtended...    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.233' 
      name = 'org.omg.sap2mof.OperationCodeJava=// GeneralizableElement.lookupElementExtended...' annotation = '' 
      tagId = 'org.omg.sap2mof.OperationCodeJava' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>// GeneralizableElement.lookupElementExtended
return com.sap.tc.moin.repository.core.jmi.util.MoinMetamodelCode.lookupElementExtended(connection, this, this, name);</XMI.any>
      </Model:Tag.values>
      <Model:Tag.elements>
        <Model:ModelElement xmi.idref = 'a39A2BDA60190'/>  <!-- Model.GeneralizableElement.lookupElementExtended -->
      </Model:Tag.elements>
    </Model:Tag>
    <!-- ==================== Model.org.omg.sap2mof.OperationCodeJava=// GeneralizableElement.findElementsByTypeExtended...    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.234' 
      name = 'org.omg.sap2mof.OperationCodeJava=// GeneralizableElement.findElementsByTypeExtended...' annotation = '' 
      tagId = 'org.omg.sap2mof.OperationCodeJava' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>// GeneralizableElement.findElementsByTypeExtended
return com.sap.tc.moin.repository.core.jmi.util.MoinMetamodelCode.findElementsByTypeExtended(connection, this, this, ofType, includeSubtypes);</XMI.any>
      </Model:Tag.values>
      <Model:Tag.elements>
        <Model:ModelElement xmi.idref = 'a39A2BDA6019D'/>  <!-- Model.GeneralizableElement.findElementsByTypeExtended -->
      </Model:Tag.elements>
    </Model:Tag>
    <!-- ==================== Model.TypedElement    [Class] ==================== -->
    <Model:Class xmi.id = 'a39A2BDA601A0' 
      name = 'TypedElement' annotation = '' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' 
      isSingleton = 'false' >
      <Model:ModelElement.constraints>
        <Model:Constraint xmi.idref = 'a39A2BDA601A1'/>  <!-- Model.TypedElement.AssociationsCannotBeTypes -->
      </Model:ModelElement.constraints>
      <Model:GeneralizableElement.supertypes>
        <Model:GeneralizableElement xmi.idref = 'a39A2BDA60093'/>  <!-- Model.ModelElement -->
      </Model:GeneralizableElement.supertypes>
      <Model:Namespace.contents>
        <!-- ==================== Model.TypedElement.type    [Reference] ==================== -->
        <Model:Reference xmi.id = 'a39A2BDA601B1' 
          name = 'type' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xmi.idref = 'a39A2BDA601B3'/>  <!-- Model.Classifier -->
          </Model:TypedElement.type>
          <Model:Reference.referencedEnd>
            <Model:AssociationEnd xmi.idref = 'a39A2BDA7019D'/>
          </Model:Reference.referencedEnd>
        </Model:Reference>
        <!-- ==================== Model.TypedElement.AssociationsCannotBeTypes    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a39A2BDA601A1' 
          name = 'AssociationsCannotBeTypes' annotation = '' 
          language = 'OCL' evaluationPolicy = 'immediate' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context TypedElement
inv: 
  not self.type.oclIsKindOf(Association)</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA601A0'/>  <!-- Model.TypedElement -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== Model.Classifier    [Class] ==================== -->
    <Model:Class xmi.id = 'a39A2BDA601B3' 
      name = 'Classifier' annotation = '' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' 
      isSingleton = 'false' >
      <Model:GeneralizableElement.supertypes>
        <Model:GeneralizableElement xmi.idref = 'a39A2BDA60152'/>  <!-- Model.GeneralizableElement -->
      </Model:GeneralizableElement.supertypes>
    </Model:Class>
    <!-- ==================== Model.Class    [Class] ==================== -->
    <Model:Class xmi.id = 'a39A2BDA601BB' 
      name = 'Class' annotation = '' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' >
      <Model:ModelElement.constraints>
        <Model:Constraint xmi.idref = 'a47B99D1D006A'/>  <!-- Model.Class.IsLeafInitIsFalse -->
        <Model:Constraint xmi.idref = 'a47B99D24038B'/>  <!-- Model.Class.IsRootInitIsFalse -->
        <Model:Constraint xmi.idref = 'a39A2BDA601BC'/>  <!-- Model.Class.ClassContainmentRules -->
        <Model:Constraint xmi.idref = 'a39A2BDA601BF'/>  <!-- Model.Class.AbstractClassesCannotBeSingleton -->
        <Model:Constraint xmi.idref = 'a470DCDF001E4'/>  <!-- Model.Class.NoSingletonsAllowed -->
      </Model:ModelElement.constraints>
      <Model:GeneralizableElement.supertypes>
        <Model:GeneralizableElement xmi.idref = 'a39A2BDA601B3'/>  <!-- Model.Classifier -->
      </Model:GeneralizableElement.supertypes>
      <Model:Namespace.contents>
        <!-- ==================== Model.Class.isSingleton    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a39A2BDA601C2' 
          name = 'isSingleton' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
          </Model:TypedElement.type>
        </Model:Attribute>
        <!-- ==================== Model.Class.ClassContainmentRules    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a39A2BDA601BC' 
          name = 'ClassContainmentRules' annotation = '' 
          language = 'OCL' evaluationPolicy = 'immediate' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Class 
inv:
  self.contents-&gt;forAll(e | 
&#x0009; e.oclIsTypeOf(Class) or 
&#x0009; e.oclIsKindOf(DataType) or 
&#x0009; e.oclIsTypeOf(Attribute) or 
&#x0009; e.oclIsTypeOf(Reference) or 
&#x0009; e.oclIsTypeOf(Operation) or 
&#x0009; e.oclIsTypeOf(Exception) or 
&#x0009; e.oclIsTypeOf(Constant) or 
&#x0009; e.oclIsKindOf(Constraint) or 
&#x0009; e.oclIsTypeOf(Tag))</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA601BB'/>  <!-- Model.Class -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
        <!-- ==================== Model.Class.AbstractClassesCannotBeSingleton    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a39A2BDA601BF' 
          name = 'AbstractClassesCannotBeSingleton' annotation = '' 
          language = 'OCL' evaluationPolicy = 'deferred' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Class 
inv: 
  self.isAbstract implies not self.isSingleton</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA601BB'/>  <!-- Model.Class -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
        <!-- ==================== Model.Class.NoSingletonsAllowed    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a470DCDF001E4' 
          name = 'NoSingletonsAllowed' annotation = '' 
          language = 'OCL' evaluationPolicy = 'deferred' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Class 
inv: 
  not self.isSingleton</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA601BB'/>  <!-- Model.Class -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
        <!-- ==================== Model.Class.IsLeafInitIsFalse    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a47B99D1D006A' 
          name = 'IsLeafInitIsFalse' annotation = '' 
          language = 'OCLInit' evaluationPolicy = 'deferred' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context GeneralizableElement::isLeaf:Boolean
init: false</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA601BB'/>  <!-- Model.Class -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
        <!-- ==================== Model.Class.IsRootInitIsFalse    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a47B99D24038B' 
          name = 'IsRootInitIsFalse' annotation = '' 
          language = 'OCLInit' evaluationPolicy = 'deferred' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context GeneralizableElement::isRoot:Boolean
init: false</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA601BB'/>  <!-- Model.Class -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== Model.javax.jmi.substituteName=MofClass    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.235' 
      name = 'javax.jmi.substituteName=MofClass' annotation = '' 
      tagId = 'javax.jmi.substituteName' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>MofClass</XMI.any>
      </Model:Tag.values>
      <Model:Tag.elements>
        <Model:ModelElement xmi.idref = 'a39A2BDA601BB'/>  <!-- Model.Class -->
      </Model:Tag.elements>
    </Model:Tag>
    <!-- ==================== Model.DataType    [Class] ==================== -->
    <Model:Class xmi.id = 'a39A2BDA601CD' 
      name = 'DataType' annotation = '' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' 
      isSingleton = 'false' >
      <Model:ModelElement.constraints>
        <Model:Constraint xmi.idref = 'a39A2BDA601CE'/>  <!-- Model.DataType.DataTypeContainmentRules -->
        <Model:Constraint xmi.idref = 'a39A2BDA601DD'/>  <!-- Model.DataType.DataTypesHaveNoSupertypes -->
        <Model:Constraint xmi.idref = 'a39A2BDA601E0'/>  <!-- Model.DataType.DataTypesCannotBeAbstract -->
        <Model:Constraint xmi.idref = 'a479DBCEC0242'/>  <!-- Model.DataType.DataTypeMustBeRootAndLeaf -->
      </Model:ModelElement.constraints>
      <Model:GeneralizableElement.supertypes>
        <Model:GeneralizableElement xmi.idref = 'a39A2BDA601B3'/>  <!-- Model.Classifier -->
      </Model:GeneralizableElement.supertypes>
      <Model:Namespace.contents>
        <!-- ==================== Model.DataType.DataTypeContainmentRules    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a39A2BDA601CE' 
          name = 'DataTypeContainmentRules' annotation = '' 
          language = 'OCL' evaluationPolicy = 'immediate' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context DataType
inv: 
  if
    self.oclIsTypeOf(StructureType) 
  then
    self.contents-&gt;forAll(e | 
&#x0009; e.oclIsTypeOf(AliasType) or 
&#x0009; e.oclIsKindOf(Constraint) or 
&#x0009; e.oclIsTypeOf(Tag) or 
&#x0009; e.oclIsTypeOf(StructureField)) 
  else 
    if
      self.oclIsTypeOf(TupleType)
    then
      self.contents-&gt;forAll(e | 
  &#x0009; e.oclIsTypeOf(AliasType) or 
  &#x0009; e.oclIsKindOf(Constraint) or 
  &#x0009; e.oclIsTypeOf(Tag) or
                 e.oclIsTypeOf(Attribute))
    else
      self.contents-&gt;forAll(e | 
  &#x0009; e.oclIsTypeOf(AliasType) or 
  &#x0009; e.oclIsKindOf(Constraint) or 
  &#x0009; e.oclIsTypeOf(Tag)) 
    endif
  endif</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA601CD'/>  <!-- Model.DataType -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
        <!-- ==================== Model.DataType.DataTypesHaveNoSupertypes    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a39A2BDA601DD' 
          name = 'DataTypesHaveNoSupertypes' annotation = '' 
          language = 'OCL' evaluationPolicy = 'immediate' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context DataType
inv: self.oclAsType(Model::StructureType).oclIsUndefined()
implies
self.supertypes -&gt; isEmpty()</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA601CD'/>  <!-- Model.DataType -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
        <!-- ==================== Model.DataType.DataTypesCannotBeAbstract    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a39A2BDA601E0' 
          name = 'DataTypesCannotBeAbstract' annotation = '' 
          language = 'OCL' evaluationPolicy = 'immediate' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context DataType
inv:
  not self.isAbstract</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA601CD'/>  <!-- Model.DataType -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
        <!-- ==================== Model.DataType.DataTypeMustBeRootAndLeaf    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a479DBCEC0242' 
          name = 'DataTypeMustBeRootAndLeaf' annotation = '' 
          language = 'OCL' evaluationPolicy = 'deferred' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context DataType
inv: self.oclAsType(Model::StructureType).oclIsUndefined()
implies
(self.isRoot and self.isLeaf)</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA601CD'/>  <!-- Model.DataType -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== Model.ScopeKind    [DataType] ==================== -->
    <Model:DataType xmi.id = 'a39A2BDA601EC' 
      name = 'ScopeKind' annotation = '' 
      isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' >
      <Model:DataType.typeCode>
        <XMI.CorbaTypeCode>
          <XMI.CorbaTcEnum xmi.tcName = 'ScopeKind'>
          <XMI.CorbaTcEnumLabel xmi.tcName = 'instance_level'/>
          <XMI.CorbaTcEnumLabel xmi.tcName = 'classifier_level'/>
          </XMI.CorbaTcEnum>
        </XMI.CorbaTypeCode>
      </Model:DataType.typeCode>
    </Model:DataType>
    <!-- ==================== Model.Feature    [Class] ==================== -->
    <Model:Class xmi.id = 'a39A2BDA601EE' 
      name = 'Feature' annotation = '' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' 
      isSingleton = 'false' >
      <Model:GeneralizableElement.supertypes>
        <Model:GeneralizableElement xmi.idref = 'a39A2BDA60093'/>  <!-- Model.ModelElement -->
      </Model:GeneralizableElement.supertypes>
      <Model:Namespace.contents>
        <!-- ==================== Model.Feature.scope    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a39A2BDA601EF' 
          name = 'scope' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xmi.idref = 'a39A2BDA601EC'/>  <!-- Model.ScopeKind -->
          </Model:TypedElement.type>
        </Model:Attribute>
        <!-- ==================== Model.Feature.visibility    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a39A2BDA601FA' 
          name = 'visibility' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xmi.idref = 'a39A2BDA60121'/>  <!-- Model.VisibilityKind -->
          </Model:TypedElement.type>
        </Model:Attribute>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== Model.Unbounded    [Constant] ==================== -->
    <Model:Constant xmi.id = 'a39A2BDA601FB' 
      name = 'Unbounded' annotation = '' >
      <Model:Constant.value>
        <XMI.any xmi.type = 'long' xmi.name = ''>-1</XMI.any>
      </Model:Constant.value>
      <Model:TypedElement.type>
        <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a3B538AB300B3'/>
      </Model:TypedElement.type>
    </Model:Constant>
    <!-- ==================== Model.MultiplicityType    [Class] ==================== -->
    <Model:Class xmi.id = 'a39A2BDA601FD' 
      name = 'MultiplicityType' annotation = '' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' >
      <Model:ModelElement.constraints>
        <Model:Constraint xmi.idref = 'a39A2BDA601FF'/>  <!-- Model.MultiplicityType.LowerCannotBeNegativeOrUnbounded -->
        <Model:Constraint xmi.idref = 'a39A2BDA60209'/>  <!-- Model.MultiplicityType.LowerCannotExceedUpper -->
        <Model:Constraint xmi.idref = 'a39A2BDA6020C'/>  <!-- Model.MultiplicityType.UpperMustBePositive -->
        <Model:Constraint xmi.idref = 'a39A2BDA6020F'/>  <!-- Model.MultiplicityType.MustBeUnorderedNonunique -->
      </Model:ModelElement.constraints>
      <Model:Namespace.contents>
        <!-- ==================== Model.MultiplicityType.lower    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a3B538FCE003A' 
          name = 'lower' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a3B538AB300B3'/>
          </Model:TypedElement.type>
        </Model:Attribute>
        <!-- ==================== Model.MultiplicityType.upper    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a3B538FED005D' 
          name = 'upper' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a3B538AB300B3'/>
          </Model:TypedElement.type>
        </Model:Attribute>
        <!-- ==================== Model.MultiplicityType.isOrdered    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a3B538FF00314' 
          name = 'isOrdered' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
          </Model:TypedElement.type>
        </Model:Attribute>
        <!-- ==================== Model.MultiplicityType.isUnique    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a3B538FFE01B6' 
          name = 'isUnique' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
          </Model:TypedElement.type>
        </Model:Attribute>
        <!-- ==================== Model.MultiplicityType.LowerCannotBeNegativeOrUnbounded    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a39A2BDA601FF' 
          name = 'LowerCannotBeNegativeOrUnbounded' annotation = '' 
          language = 'OCL' evaluationPolicy = 'immediate' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context MultiplicityType
inv:
  self.lower &gt;= 0 and self.lower &lt;&gt; Model::Unbounded</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA601FD'/>  <!-- Model.MultiplicityType -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
        <!-- ==================== Model.MultiplicityType.LowerCannotExceedUpper    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a39A2BDA60209' 
          name = 'LowerCannotExceedUpper' annotation = '' 
          language = 'OCL' evaluationPolicy = 'immediate' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context MultiplicityType
inv:
  self.lower &lt;= self.upper or self.upper = Model::Unbounded</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA601FD'/>  <!-- Model.MultiplicityType -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
        <!-- ==================== Model.MultiplicityType.UpperMustBePositive    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a39A2BDA6020C' 
          name = 'UpperMustBePositive' annotation = '' 
          language = 'OCL' evaluationPolicy = 'immediate' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context MultiplicityType
inv:
  self.upper &gt;= 1 or self.upper = Model::Unbounded</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA601FD'/>  <!-- Model.MultiplicityType -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
        <!-- ==================== Model.MultiplicityType.MustBeUnorderedNonunique    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a39A2BDA6020F' 
          name = 'MustBeUnorderedNonunique' annotation = '' 
          language = 'OCL' evaluationPolicy = 'immediate' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context MultiplicityType
inv:
  self.upper = 1 implies
  (not self.isOrdered and not self.%isUnique)</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA601FD'/>  <!-- Model.MultiplicityType -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== Model.org.omg.sap2mof.isStructureType=True    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.236' 
      name = 'org.omg.sap2mof.isStructureType=True' annotation = '' 
      tagId = 'org.omg.sap2mof.isStructureType' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>True</XMI.any>
      </Model:Tag.values>
      <Model:Tag.elements>
        <Model:ModelElement xmi.idref = 'a39A2BDA601FD'/>  <!-- Model.MultiplicityType -->
      </Model:Tag.elements>
    </Model:Tag>
    <!-- ==================== Model.StructuralFeature    [Class] ==================== -->
    <Model:Class xmi.id = 'a39A2BDA6021B' 
      name = 'StructuralFeature' annotation = '' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' 
      isSingleton = 'false' >
      <Model:ModelElement.constraints>
        <Model:Constraint xmi.idref = 'a470F6B9B0251'/>  <!-- Model.StructuralFeature.StructuralFeatureName -->
      </Model:ModelElement.constraints>
      <Model:GeneralizableElement.supertypes>
        <Model:GeneralizableElement xmi.idref = 'a39A2BDA601EE'/>  <!-- Model.Feature -->
        <Model:GeneralizableElement xmi.idref = 'a39A2BDA601A0'/>  <!-- Model.TypedElement -->
      </Model:GeneralizableElement.supertypes>
      <Model:Namespace.contents>
        <!-- ==================== Model.StructuralFeature.multiplicity    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a39A2BDA6021C' 
          name = 'multiplicity' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xmi.idref = 'a39A2BDA601FD'/>  <!-- Model.MultiplicityType -->
          </Model:TypedElement.type>
        </Model:Attribute>
        <!-- ==================== Model.StructuralFeature.isChangeable    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a39A2BDA6021D' 
          name = 'isChangeable' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
          </Model:TypedElement.type>
        </Model:Attribute>
        <!-- ==================== Model.StructuralFeature.StructuralFeatureName    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a470F6B9B0251' 
          name = 'StructuralFeatureName' annotation = '' 
          language = 'OCL' evaluationPolicy = 'immediate' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context StructuralFeature
inv:
self.name.size() &gt; 2 implies ( 
self.name.subString(1,2)&lt;&gt;('__') and
self.name.subString(1,3)&lt;&gt;('___') )</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA6021B'/>  <!-- Model.StructuralFeature -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== Model.Attribute    [Class] ==================== -->
    <Model:Class xmi.id = 'a39A2BDA6021E' 
      name = 'Attribute' annotation = '' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' >
      <Model:ModelElement.constraints>
        <Model:Constraint xmi.idref = 'a46285B1A001C'/>  <!-- Model.Attribute.AttributesMustNotBeStatic -->
        <Model:Constraint xmi.idref = 'a479D98F902FD'/>  <!-- Model.Attribute.AttributesMustNotBeDerived -->
      </Model:ModelElement.constraints>
      <Model:GeneralizableElement.supertypes>
        <Model:GeneralizableElement xmi.idref = 'a39A2BDA6021B'/>  <!-- Model.StructuralFeature -->
      </Model:GeneralizableElement.supertypes>
      <Model:Namespace.contents>
        <!-- ==================== Model.Attribute.isDerived    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a39A2BDA6021F' 
          name = 'isDerived' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
          </Model:TypedElement.type>
        </Model:Attribute>
        <!-- ==================== Model.Attribute.AttributesMustNotBeStatic    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a46285B1A001C' 
          name = 'AttributesMustNotBeStatic' annotation = '' 
          language = 'OCL' evaluationPolicy = 'immediate' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Attribute
inv:
self.scope = ScopeKind::instance_level</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA6021E'/>  <!-- Model.Attribute -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
        <!-- ==================== Model.Attribute.AttributesMustNotBeDerived    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a479D98F902FD' 
          name = 'AttributesMustNotBeDerived' annotation = '' 
          language = 'OCL' evaluationPolicy = 'immediate' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Attribute
inv: not self.isDerived</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA6021E'/>  <!-- Model.Attribute -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== Model.org.omg.mof.idl_substitute_name=MofAttribute    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.237' 
      name = 'org.omg.mof.idl_substitute_name=MofAttribute' annotation = '' 
      tagId = 'org.omg.mof.idl_substitute_name' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>MofAttribute</XMI.any>
      </Model:Tag.values>
      <Model:Tag.elements>
        <Model:ModelElement xmi.idref = 'a39A2BDA6021E'/>  <!-- Model.Attribute -->
      </Model:Tag.elements>
    </Model:Tag>
    <!-- ==================== Model.Reference    [Class] ==================== -->
    <Model:Class xmi.id = 'a39A2BDA60229' 
      name = 'Reference' annotation = '' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' >
      <Model:ModelElement.constraints>
        <Model:Constraint xmi.idref = 'a39A2BDA6022A'/>  <!-- Model.Reference.ReferenceMultiplicityMustMatchEnd -->
        <Model:Constraint xmi.idref = 'a39A2BDA6022D'/>  <!-- Model.Reference.ReferenceMustBeInstanceScoped -->
        <Model:Constraint xmi.idref = 'a39A2BDA60238'/>  <!-- Model.Reference.ChangeableReferenceMustHaveChangeableEnd -->
        <Model:Constraint xmi.idref = 'a39A2BDA6023B'/>  <!-- Model.Reference.ReferenceTypeMustMatchEndType -->
        <Model:Constraint xmi.idref = 'a39A2BDA6023E'/>  <!-- Model.Reference.ReferencedEndMustBeNavigable -->
        <Model:Constraint xmi.idref = 'a39A2BDA60249'/>  <!-- Model.Reference.ContainerMustMatchExposedType -->
      </Model:ModelElement.constraints>
      <Model:GeneralizableElement.supertypes>
        <Model:GeneralizableElement xmi.idref = 'a39A2BDA6021B'/>  <!-- Model.StructuralFeature -->
      </Model:GeneralizableElement.supertypes>
      <Model:Namespace.contents>
        <!-- ==================== Model.Reference.exposedEnd    [Reference] ==================== -->
        <Model:Reference xmi.id = 'a39A2BDA60258' 
          name = 'exposedEnd' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xmi.idref = 'a39A2BDA602B7'/>  <!-- Model.AssociationEnd -->
          </Model:TypedElement.type>
          <Model:Reference.referencedEnd>
            <Model:AssociationEnd xmi.idref = 'a39A2BDA7016F'/>
          </Model:Reference.referencedEnd>
        </Model:Reference>
        <!-- ==================== Model.Reference.referencedEnd    [Reference] ==================== -->
        <Model:Reference xmi.id = 'a39A2BDA6025A' 
          name = 'referencedEnd' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xmi.idref = 'a39A2BDA602B7'/>  <!-- Model.AssociationEnd -->
          </Model:TypedElement.type>
          <Model:Reference.referencedEnd>
            <Model:AssociationEnd xmi.idref = 'a39A2BDA7018E'/>
          </Model:Reference.referencedEnd>
        </Model:Reference>
        <!-- ==================== Model.Reference.ReferenceMultiplicityMustMatchEnd    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a39A2BDA6022A' 
          name = 'ReferenceMultiplicityMustMatchEnd' annotation = '' 
          language = 'OCL' evaluationPolicy = 'deferred' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Reference
inv:
  self.multiplicity.lower = self.referencedEnd.multiplicity.lower
  and
    self.multiplicity.upper = self.referencedEnd.multiplicity.upper
  and
    self.multiplicity.isOrdered = self.referencedEnd.multiplicity.isOrdered
  and 
    self.multiplicity.%isUnique = self.referencedEnd.multiplicity.%isUnique</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA60229'/>  <!-- Model.Reference -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
        <!-- ==================== Model.Reference.ReferenceMustBeInstanceScoped    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a39A2BDA6022D' 
          name = 'ReferenceMustBeInstanceScoped' annotation = '' 
          language = 'OCL' evaluationPolicy = 'immediate' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Reference
inv:
  self.scope = ScopeKind::instance_level</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA60229'/>  <!-- Model.Reference -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
        <!-- ==================== Model.Reference.ChangeableReferenceMustHaveChangeableEnd    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a39A2BDA60238' 
          name = 'ChangeableReferenceMustHaveChangeableEnd' annotation = '' 
          language = 'OCL' evaluationPolicy = 'deferred' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Reference
inv: 
  self.isChangeable = self.referencedEnd.isChangeable</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA60229'/>  <!-- Model.Reference -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
        <!-- ==================== Model.Reference.ReferenceTypeMustMatchEndType    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a39A2BDA6023B' 
          name = 'ReferenceTypeMustMatchEndType' annotation = '' 
          language = 'OCL' evaluationPolicy = 'deferred' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Reference
inv:
  self.type = self.referencedEnd.type</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA60229'/>  <!-- Model.Reference -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
        <!-- ==================== Model.Reference.ReferencedEndMustBeNavigable    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a39A2BDA6023E' 
          name = 'ReferencedEndMustBeNavigable' annotation = '' 
          language = 'OCL' evaluationPolicy = 'deferred' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Reference
inv:
  self.referencedEnd.isNavigable</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA60229'/>  <!-- Model.Reference -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
        <!-- ==================== Model.Reference.ContainerMustMatchExposedType    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a39A2BDA60249' 
          name = 'ContainerMustMatchExposedType' annotation = '' 
          language = 'OCL' evaluationPolicy = 'deferred' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Reference
inv:
  if (self.container.oclIsKindOf(GeneralizableElement))
  then
    let otherType = self.referencedEnd.otherEnd().type in 
      let superTypes = 
       self.container.oclAsType(GeneralizableElement).allSupertypes() in
         (self.container = otherType) or superTypes-&gt;includes(otherType) 
  else
    false
  endif</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA60229'/>  <!-- Model.Reference -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== Model.BehavioralFeature    [Class] ==================== -->
    <Model:Class xmi.id = 'a39A2BDA6025C' 
      name = 'BehavioralFeature' annotation = '' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'true' visibility = 'public_vis' 
      isSingleton = 'false' >
      <Model:GeneralizableElement.supertypes>
        <Model:GeneralizableElement xmi.idref = 'a39A2BDA601EE'/>  <!-- Model.Feature -->
        <Model:GeneralizableElement xmi.idref = 'a39A2BDA60123'/>  <!-- Model.Namespace -->
      </Model:GeneralizableElement.supertypes>
    </Model:Class>
    <!-- ==================== Model.Operation    [Class] ==================== -->
    <Model:Class xmi.id = 'a39A2BDA6025D' 
      name = 'Operation' annotation = '' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' >
      <Model:ModelElement.constraints>
        <Model:Constraint xmi.idref = 'a47B9AADF006E'/>  <!-- Model.Operation.IsQueryInitIsTrue -->
        <Model:Constraint xmi.idref = 'a39A2BDA6025E'/>  <!-- Model.Operation.OperationContainmentRules -->
        <Model:Constraint xmi.idref = 'a39A2BDA60268'/>  <!-- Model.Operation.OperationsHaveAtMostOneReturn -->
      </Model:ModelElement.constraints>
      <Model:GeneralizableElement.supertypes>
        <Model:GeneralizableElement xmi.idref = 'a39A2BDA6025C'/>  <!-- Model.BehavioralFeature -->
      </Model:GeneralizableElement.supertypes>
      <Model:Namespace.contents>
        <!-- ==================== Model.Operation.isQuery    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a39A2BDA60277' 
          name = 'isQuery' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
          </Model:TypedElement.type>
        </Model:Attribute>
        <!-- ==================== Model.Operation.exceptions    [Reference] ==================== -->
        <Model:Reference xmi.id = 'a39A2BDA60278' 
          name = 'exceptions' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'true' is_unique = 'true' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xmi.idref = 'a39A2BDA6027A'/>  <!-- Model.Exception -->
          </Model:TypedElement.type>
          <Model:Reference.referencedEnd>
            <Model:AssociationEnd xmi.idref = 'a39A2BDA70160'/>
          </Model:Reference.referencedEnd>
        </Model:Reference>
        <!-- ==================== Model.Operation.OperationContainmentRules    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a39A2BDA6025E' 
          name = 'OperationContainmentRules' annotation = '' 
          language = 'OCL' evaluationPolicy = 'immediate' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Operation
inv:
  self.contents-&gt;forAll(e | 
&#x0009; e.oclIsTypeOf(Parameter) or 
&#x0009; e.oclIsKindOf(Constraint) or 
&#x0009; e.oclIsTypeOf(Tag))</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA6025D'/>  <!-- Model.Operation -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
        <!-- ==================== Model.Operation.OperationsHaveAtMostOneReturn    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a39A2BDA60268' 
          name = 'OperationsHaveAtMostOneReturn' annotation = '' 
          language = 'OCL' evaluationPolicy = 'immediate' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Operation
inv:
  self.contents -&gt; 
    select(c | c.oclIsTypeOf(Parameter)) -&gt;
      select(p : ModelElement | p.oclAsType(Parameter).direction =
      DirectionKind::return_dir) -&gt; size() &lt; 2</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA6025D'/>  <!-- Model.Operation -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
        <!-- ==================== Model.Operation.IsQueryInitIsTrue    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a47B9AADF006E' 
          name = 'IsQueryInitIsTrue' annotation = '' 
          language = 'OCLInit' evaluationPolicy = 'deferred' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Operation::isQuery:Boolean
init: true</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA6025D'/>  <!-- Model.Operation -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== Model.Exception    [Class] ==================== -->
    <Model:Class xmi.id = 'a39A2BDA6027A' 
      name = 'Exception' annotation = '' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' >
      <Model:ModelElement.constraints>
        <Model:Constraint xmi.idref = 'a39A2BDA6027B'/>  <!-- Model.Exception.ExceptionContainmentRules -->
        <Model:Constraint xmi.idref = 'a39A2BDA60286'/>  <!-- Model.Exception.ExceptionsHaveOnlyOutParameters -->
      </Model:ModelElement.constraints>
      <Model:GeneralizableElement.supertypes>
        <Model:GeneralizableElement xmi.idref = 'a39A2BDA6025C'/>  <!-- Model.BehavioralFeature -->
      </Model:GeneralizableElement.supertypes>
      <Model:Namespace.contents>
        <!-- ==================== Model.Exception.ExceptionContainmentRules    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a39A2BDA6027B' 
          name = 'ExceptionContainmentRules' annotation = '' 
          language = 'OCL' evaluationPolicy = 'immediate' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Exception
inv: 
  self.contents-&gt;forAll(e | 
&#x0009; e.oclIsTypeOf(Parameter) or 
&#x0009; e.oclIsTypeOf(Tag))</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA6027A'/>  <!-- Model.Exception -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
        <!-- ==================== Model.Exception.ExceptionsHaveOnlyOutParameters    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a39A2BDA60286' 
          name = 'ExceptionsHaveOnlyOutParameters' annotation = '' 
          language = 'OCL' evaluationPolicy = 'immediate' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Exception
inv:
  self.contents -&gt; 
    select(c | c.oclIsTypeOf(Parameter)) -&gt; 
      forAll(p : ModelElement | p.oclAsType(Parameter).direction = 
      DirectionKind::out_dir)</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA6027A'/>  <!-- Model.Exception -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== Model.org.omg.mof.idl_substitute_name=MofException    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.238' 
      name = 'org.omg.mof.idl_substitute_name=MofException' annotation = '' 
      tagId = 'org.omg.mof.idl_substitute_name' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>MofException</XMI.any>
      </Model:Tag.values>
      <Model:Tag.elements>
        <Model:ModelElement xmi.idref = 'a39A2BDA6027A'/>  <!-- Model.Exception -->
      </Model:Tag.elements>
    </Model:Tag>
    <!-- ==================== Model.javax.jmi.substituteName=MofException    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.239' 
      name = 'javax.jmi.substituteName=MofException' annotation = '' 
      tagId = 'javax.jmi.substituteName' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>MofException</XMI.any>
      </Model:Tag.values>
      <Model:Tag.elements>
        <Model:ModelElement xmi.idref = 'a39A2BDA6027A'/>  <!-- Model.Exception -->
      </Model:Tag.elements>
    </Model:Tag>
    <!-- ==================== Model.Association    [Class] ==================== -->
    <Model:Class xmi.id = 'a39A2BDA60289' 
      name = 'Association' annotation = '' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' >
      <Model:ModelElement.constraints>
        <Model:Constraint xmi.idref = 'a46285B690195'/>  <!-- Model.Association.DerivedAssocEndsMustMatchChangeability -->
        <Model:Constraint xmi.idref = 'a39A2BDA6028A'/>  <!-- Model.Association.AssociationContainmentRules -->
        <Model:Constraint xmi.idref = 'a39A2BDA6028D'/>  <!-- Model.Association.AssociationsHaveNoSupertypes -->
        <Model:Constraint xmi.idref = 'a39A2BDA60298'/>  <!-- Model.Association.AssociationMustBeRootAndLeaf -->
        <Model:Constraint xmi.idref = 'a39A2BDA6029B'/>  <!-- Model.Association.AssociationsCannotBeAbstract -->
        <Model:Constraint xmi.idref = 'a39A2BDA602A7'/>  <!-- Model.Association.AssociationsMustBePublic -->
        <Model:Constraint xmi.idref = 'a39A2BDA602AA'/>  <!-- Model.Association.AssociationsMustBeBinary -->
        <Model:Constraint xmi.idref = 'a479D995D0138'/>  <!-- Model.Association.AssociationsMustNotBeDerived -->
      </Model:ModelElement.constraints>
      <Model:GeneralizableElement.supertypes>
        <Model:GeneralizableElement xmi.idref = 'a39A2BDA601B3'/>  <!-- Model.Classifier -->
      </Model:GeneralizableElement.supertypes>
      <Model:Namespace.contents>
        <!-- ==================== Model.Association.isDerived    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a39A2BDA602AD' 
          name = 'isDerived' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
          </Model:TypedElement.type>
        </Model:Attribute>
        <!-- ==================== Model.Association.AssociationContainmentRules    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a39A2BDA6028A' 
          name = 'AssociationContainmentRules' annotation = '' 
          language = 'OCL' evaluationPolicy = 'immediate' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Association
inv:
  self.contents-&gt;forAll(e | 
&#x0009; e.oclIsTypeOf(AssociationEnd) or 
&#x0009; e.oclIsKindOf(Constraint) or 
&#x0009; e.oclIsTypeOf(Tag))</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA60289'/>  <!-- Model.Association -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
        <!-- ==================== Model.Association.AssociationsHaveNoSupertypes    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a39A2BDA6028D' 
          name = 'AssociationsHaveNoSupertypes' annotation = '' 
          language = 'OCL' evaluationPolicy = 'immediate' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Association
inv:
  self.supertypes -&gt; isEmpty()</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA60289'/>  <!-- Model.Association -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
        <!-- ==================== Model.Association.AssociationMustBeRootAndLeaf    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a39A2BDA60298' 
          name = 'AssociationMustBeRootAndLeaf' annotation = '' 
          language = 'OCL' evaluationPolicy = 'immediate' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Association
inv:
  self.isRoot and self.isLeaf</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA60289'/>  <!-- Model.Association -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
        <!-- ==================== Model.Association.AssociationsCannotBeAbstract    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a39A2BDA6029B' 
          name = 'AssociationsCannotBeAbstract' annotation = '' 
          language = 'OCL' evaluationPolicy = 'immediate' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Association
inv:
  not self.isAbstract</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA60289'/>  <!-- Model.Association -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
        <!-- ==================== Model.Association.AssociationsMustBePublic    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a39A2BDA602A7' 
          name = 'AssociationsMustBePublic' annotation = '' 
          language = 'OCL' evaluationPolicy = 'immediate' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Association
inv:
  self.visibility = VisibilityKind::public_vis</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA60289'/>  <!-- Model.Association -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
        <!-- ==================== Model.Association.AssociationsMustBeBinary    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a39A2BDA602AA' 
          name = 'AssociationsMustBeBinary' annotation = '' 
          language = 'OCL' evaluationPolicy = 'immediate' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Association
inv:
  self.contents -&gt; 
    select(c | c.oclIsTypeOf(AssociationEnd)) -&gt; size() = 2</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA60289'/>  <!-- Model.Association -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
        <!-- ==================== Model.Association.DerivedAssocEndsMustMatchChangeability    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a46285B690195' 
          name = 'DerivedAssocEndsMustMatchChangeability' annotation = '' 
          language = 'OCL' evaluationPolicy = 'deferred' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Association
inv:

if self.isDerived
-- this check is only for derived associations
then
-- get the ends
    let ends: Sequence(ModelElement) =
        self.contents-&gt;
        select(t | t.oclIsKindOf(AssociationEnd))-&gt;asSequence()
    in
-- compare the changeability
    ends-&gt;at(1).oclAsType(AssociationEnd).isChangeable
        = ends-&gt;at(2).oclAsType(AssociationEnd).isChangeable
else
-- non-derived associations are not checked
    true
endif</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA60289'/>  <!-- Model.Association -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
        <!-- ==================== Model.Association.AssociationsMustNotBeDerived    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a479D995D0138' 
          name = 'AssociationsMustNotBeDerived' annotation = '' 
          language = 'OCL' evaluationPolicy = 'immediate' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Association
inv: not self.isDerived</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA60289'/>  <!-- Model.Association -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== Model.AggregationKind    [DataType] ==================== -->
    <Model:DataType xmi.id = 'a39A2BDA602B5' 
      name = 'AggregationKind' annotation = '' 
      isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' >
      <Model:DataType.typeCode>
        <XMI.CorbaTypeCode>
          <XMI.CorbaTcEnum xmi.tcName = 'AggregationKind'>
          <XMI.CorbaTcEnumLabel xmi.tcName = 'none'/>
          <XMI.CorbaTcEnumLabel xmi.tcName = 'shared'/>
          <XMI.CorbaTcEnumLabel xmi.tcName = 'composite'/>
          </XMI.CorbaTcEnum>
        </XMI.CorbaTypeCode>
      </Model:DataType.typeCode>
    </Model:DataType>
    <!-- ==================== Model.AssociationEnd    [Class] ==================== -->
    <Model:Class xmi.id = 'a39A2BDA602B7' 
      name = 'AssociationEnd' annotation = '' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' >
      <Model:ModelElement.constraints>
        <Model:Constraint xmi.idref = 'a462628A101AF'/>  <!-- Model.AssociationEnd.OrderedEndsRequireStorageOnOtherEnd -->
        <Model:Constraint xmi.idref = 'a46285FD701C8'/>  <!-- Model.AssociationEnd.CompositeAssociationEndsUpperBoundIs1 -->
        <Model:Constraint xmi.idref = 'a47B98DB30012'/>  <!-- Model.AssociationEnd.IsNavigableInitIsTrue -->
        <Model:Constraint xmi.idref = 'a39A2BDA602B8'/>  <!-- Model.AssociationEnd.EndTypeMustBeClass -->
        <Model:Constraint xmi.idref = 'a39A2BDA602BB'/>  <!-- Model.AssociationEnd.EndsMustBeUnique -->
        <Model:Constraint xmi.idref = 'a39A2BDA602C7'/>  <!-- Model.AssociationEnd.CannotHaveTwoOrderedEnds -->
        <Model:Constraint xmi.idref = 'a39A2BDA602CA'/>  <!-- Model.AssociationEnd.CannotHaveTwoAggregateEnds -->
      </Model:ModelElement.constraints>
      <Model:GeneralizableElement.supertypes>
        <Model:GeneralizableElement xmi.idref = 'a39A2BDA601A0'/>  <!-- Model.TypedElement -->
      </Model:GeneralizableElement.supertypes>
      <Model:Namespace.contents>
        <!-- ==================== Model.AssociationEnd.isNavigable    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a39A2BDA602D5' 
          name = 'isNavigable' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
          </Model:TypedElement.type>
        </Model:Attribute>
        <!-- ==================== Model.AssociationEnd.aggregation    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a39A2BDA602D6' 
          name = 'aggregation' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xmi.idref = 'a39A2BDA602B5'/>  <!-- Model.AggregationKind -->
          </Model:TypedElement.type>
        </Model:Attribute>
        <!-- ==================== Model.AssociationEnd.multiplicity    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a39A2BDA602D7' 
          name = 'multiplicity' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xmi.idref = 'a39A2BDA601FD'/>  <!-- Model.MultiplicityType -->
          </Model:TypedElement.type>
        </Model:Attribute>
        <!-- ==================== Model.AssociationEnd.isChangeable    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a39A2BDA602D8' 
          name = 'isChangeable' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
          </Model:TypedElement.type>
        </Model:Attribute>
        <!-- ==================== Model.AssociationEnd.otherEnd    [Operation] ==================== -->
        <Model:Operation xmi.id = 'a39A2BDA602D9' 
          name = 'otherEnd' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isQuery = 'true' >
          <Model:Namespace.contents>
            <Model:Parameter xmi.id = 'XX.28' 
              name = '*return' annotation = '' 
              direction = 'return_dir' >
              <Model:Parameter.multiplicity>
                <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
              </Model:Parameter.multiplicity>
              <Model:TypedElement.type>
                <Model:Classifier xmi.idref = 'a39A2BDA602B7'/>  <!-- Model.AssociationEnd -->
              </Model:TypedElement.type>
            </Model:Parameter>
          </Model:Namespace.contents>
        </Model:Operation>
        <!-- ==================== Model.AssociationEnd.EndTypeMustBeClass    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a39A2BDA602B8' 
          name = 'EndTypeMustBeClass' annotation = '' 
          language = 'OCL' evaluationPolicy = 'immediate' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context AssociationEnd
inv:
  self.type.oclIsTypeOf(Class)</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA602B7'/>  <!-- Model.AssociationEnd -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
        <!-- ==================== Model.AssociationEnd.EndsMustBeUnique    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a39A2BDA602BB' 
          name = 'EndsMustBeUnique' annotation = '' 
          language = 'OCL' evaluationPolicy = 'immediate' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context AssociationEnd
inv:
  (self.multiplicity.upper &gt; 1 or
  self.multiplicity.upper = Model::Unbounded) implies
  self.multiplicity.%isUnique</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA602B7'/>  <!-- Model.AssociationEnd -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
        <!-- ==================== Model.AssociationEnd.CannotHaveTwoOrderedEnds    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a39A2BDA602C7' 
          name = 'CannotHaveTwoOrderedEnds' annotation = '' 
          language = 'OCL' evaluationPolicy = 'deferred' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context AssociationEnd
inv:
  self.multiplicity.isOrdered implies
  not self.otherEnd().multiplicity.isOrdered</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA602B7'/>  <!-- Model.AssociationEnd -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
        <!-- ==================== Model.AssociationEnd.CannotHaveTwoAggregateEnds    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a39A2BDA602CA' 
          name = 'CannotHaveTwoAggregateEnds' annotation = '' 
          language = 'OCL' evaluationPolicy = 'deferred' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context AssociationEnd
inv:
  self.aggregation &lt;&gt; AggregationKind::none implies
  self.otherEnd().aggregation = AggregationKind::none</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA602B7'/>  <!-- Model.AssociationEnd -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
        <!-- ==================== Model.AssociationEnd.OrderedEndsRequireStorageOnOtherEnd    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a462628A101AF' 
          name = 'OrderedEndsRequireStorageOnOtherEnd' annotation = '' 
          language = 'OCL' evaluationPolicy = 'deferred' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context AssociationEnd
inv:
if self.multiplicity.isOrdered then
-- an AssociationEnd may not be ordered if the other end does not have storage
-- he other end may become stored because
-- 1) explicitly: there is a "Storage" tag on the other end with value "true"
-- 2) the other end's type has a reference that has this end as referencedEnd AND
--     the "Storage" tag (on the other end) does not exist or it has value "if_reference"
-- First we get the other end's type, loop over its references and see if one of them expose this

let exposedEnds:Set(AssociationEnd) =
    self.otherEnd().type.contents-&gt;
        select(t | t.oclIsKindOf(Reference))-&gt;
            iterate(theElement: ModelElement;
                    theValues: Set(AssociationEnd) = Set{}
                    |
                     theValues-&gt;union
                        (theElement.oclAsType(Reference).referencedEnd.asSet())
                   )
in


let exposingReferenceFound = exposedEnds-&gt;includes(self) in

let tagFound: Boolean = false in
-- Now we check if the find the "Storage" tag and get the values
let values:Set(String) =
    self.otherEnd().tag-&gt;iterate(theTag: Tag; 
                      theValues:Set(String) = Set{} 
                      |
                      if theTag.tagId = 'org.omg.sap2mof.store'
                      then
                          let tagFound = true in
                          theValues-&gt;union(theTag.values-&gt;asSet())
                      else
                          theValues-&gt;union(theValues)
                      endif
                     )
in

let trueValueFound = values-&gt;exists(val | val='yes') in
let ifRefValueFound = values-&gt;exists(val | val='if_reference') in

trueValueFound
or
( exposingReferenceFound and not tagFound )
or
( exposingReferenceFound and ifRefValueFound )


else
-- not ordered, skip all other checks
true
endif</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA602B7'/>  <!-- Model.AssociationEnd -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
        <!-- ==================== Model.AssociationEnd.CompositeAssociationEndsUpperBoundIs1    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a46285FD701C8' 
          name = 'CompositeAssociationEndsUpperBoundIs1' annotation = '' 
          language = 'OCL' evaluationPolicy = 'deferred' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context AssociationEnd
inv:
self.aggregation = AggregationKind::composite implies self.multiplicity.upper = 1</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA602B7'/>  <!-- Model.AssociationEnd -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
        <!-- ==================== Model.AssociationEnd.IsNavigableInitIsTrue    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a47B98DB30012' 
          name = 'IsNavigableInitIsTrue' annotation = '' 
          language = 'OCLInit' evaluationPolicy = 'deferred' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context AssociationEnd::isNavigable:Boolean
init: true</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA602B7'/>  <!-- Model.AssociationEnd -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== Model.org.omg.sap2mof.OperationCodeJava=// AssociationEnd.otherEnd...    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.240' 
      name = 'org.omg.sap2mof.OperationCodeJava=// AssociationEnd.otherEnd...' annotation = '' 
      tagId = 'org.omg.sap2mof.OperationCodeJava' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>// AssociationEnd.otherEnd
return com.sap.tc.moin.repository.core.jmi.util.MoinMetamodelCode.otherEnd(connection, this);</XMI.any>
      </Model:Tag.values>
      <Model:Tag.elements>
        <Model:ModelElement xmi.idref = 'a39A2BDA602D9'/>  <!-- Model.AssociationEnd.otherEnd -->
      </Model:Tag.elements>
    </Model:Tag>
    <!-- ==================== Model.Package    [Class] ==================== -->
    <Model:Class xmi.id = 'a39A2BDA602E4' 
      name = 'Package' annotation = '' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' >
      <Model:ModelElement.constraints>
        <Model:Constraint xmi.idref = 'a39A2BDA602E5'/>  <!-- Model.Package.PackageContainmentRules -->
        <Model:Constraint xmi.idref = 'a39A2BDA602E8'/>  <!-- Model.Package.PackagesCannotBeAbstract -->
        <Model:Constraint xmi.idref = 'a479D9A8A001F'/>  <!-- Model.Package.PackageMustBeRootAndLeaf -->
      </Model:ModelElement.constraints>
      <Model:GeneralizableElement.supertypes>
        <Model:GeneralizableElement xmi.idref = 'a39A2BDA60152'/>  <!-- Model.GeneralizableElement -->
      </Model:GeneralizableElement.supertypes>
      <Model:Namespace.contents>
        <!-- ==================== Model.Package.PackageContainmentRules    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a39A2BDA602E5' 
          name = 'PackageContainmentRules' annotation = '' 
          language = 'OCL' evaluationPolicy = 'immediate' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Package
inv:
  self.contents-&gt;forAll(e | 
&#x0009; e.oclIsTypeOf(Package) or 
&#x0009; e.oclIsTypeOf(Class) or 
&#x0009; e.oclIsKindOf(DataType) or 
&#x0009; e.oclIsTypeOf(Association) or 
&#x0009; e.oclIsTypeOf(Exception) or 
&#x0009; e.oclIsTypeOf(Constant) or 
&#x0009; e.oclIsKindOf(Constraint) or 
&#x0009; e.oclIsTypeOf(Import) or 
&#x0009; e.oclIsKindOf(OCL::Expressions::OclExpression) or 
&#x0009; e.oclIsKindOf(OCL::Expressions::VariableDeclaration) or 
&#x0009; e.oclIsTypeOf(Tag))</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA602E4'/>  <!-- Model.Package -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
        <!-- ==================== Model.Package.PackagesCannotBeAbstract    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a39A2BDA602E8' 
          name = 'PackagesCannotBeAbstract' annotation = '' 
          language = 'OCL' evaluationPolicy = 'immediate' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Package
inv: 
  not self.isAbstract</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA602E4'/>  <!-- Model.Package -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
        <!-- ==================== Model.Package.PackageMustBeRootAndLeaf    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a479D9A8A001F' 
          name = 'PackageMustBeRootAndLeaf' annotation = '' 
          language = 'OCL' evaluationPolicy = 'deferred' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Package
inv:
  self.isRoot and self.isLeaf</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA602E4'/>  <!-- Model.Package -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== Model.javax.jmi.substituteName=MofPackage    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.241' 
      name = 'javax.jmi.substituteName=MofPackage' annotation = '' 
      tagId = 'javax.jmi.substituteName' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>MofPackage</XMI.any>
      </Model:Tag.values>
      <Model:Tag.elements>
        <Model:ModelElement xmi.idref = 'a39A2BDA602E4'/>  <!-- Model.Package -->
      </Model:Tag.elements>
    </Model:Tag>
    <!-- ==================== Model.Import    [Class] ==================== -->
    <Model:Class xmi.id = 'a39A2BDA60308' 
      name = 'Import' annotation = '' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' >
      <Model:ModelElement.constraints>
        <Model:Constraint xmi.idref = 'a39A2BDA60316'/>  <!-- Model.Import.CanOnlyImportPackagesAndClasses -->
        <Model:Constraint xmi.idref = 'a39A2BDA60319'/>  <!-- Model.Import.CannotImportSelf -->
        <Model:Constraint xmi.idref = 'a39A2BDA60325'/>  <!-- Model.Import.CannotImportNestedComponents -->
        <Model:Constraint xmi.idref = 'a39A2BDA60328'/>  <!-- Model.Import.NestedPackagesCannotImport -->
      </Model:ModelElement.constraints>
      <Model:GeneralizableElement.supertypes>
        <Model:GeneralizableElement xmi.idref = 'a39A2BDA60093'/>  <!-- Model.ModelElement -->
      </Model:GeneralizableElement.supertypes>
      <Model:Namespace.contents>
        <!-- ==================== Model.Import.visibility    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a39A2BDA60332' 
          name = 'visibility' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xmi.idref = 'a39A2BDA60121'/>  <!-- Model.VisibilityKind -->
          </Model:TypedElement.type>
        </Model:Attribute>
        <!-- ==================== Model.Import.isClustered    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a39A2BDA60333' 
          name = 'isClustered' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60392'/>
          </Model:TypedElement.type>
        </Model:Attribute>
        <!-- ==================== Model.Import.importedNamespace    [Reference] ==================== -->
        <Model:Reference xmi.id = 'a39A2BDA60334' 
          name = 'importedNamespace' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xmi.idref = 'a39A2BDA60123'/>  <!-- Model.Namespace -->
          </Model:TypedElement.type>
          <Model:Reference.referencedEnd>
            <Model:AssociationEnd xmi.idref = 'a39A2BDA70121'/>
          </Model:Reference.referencedEnd>
        </Model:Reference>
        <!-- ==================== Model.Import.CanOnlyImportPackagesAndClasses    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a39A2BDA60316' 
          name = 'CanOnlyImportPackagesAndClasses' annotation = '' 
          language = 'OCL' evaluationPolicy = 'immediate' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Import
inv:
  self.imported.oclIsTypeOf(Class) or
  self.imported.oclIsTypeOf(Package)</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA60308'/>  <!-- Model.Import -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
        <!-- ==================== Model.Import.CannotImportSelf    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a39A2BDA60319' 
          name = 'CannotImportSelf' annotation = '' 
          language = 'OCL' evaluationPolicy = 'deferred' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Import
inv:
  self.container &lt;&gt; self.imported</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA60308'/>  <!-- Model.Import -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
        <!-- ==================== Model.Import.CannotImportNestedComponents    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a39A2BDA60325' 
          name = 'CannotImportNestedComponents' annotation = '' 
          language = 'OCL' evaluationPolicy = 'deferred' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Import
inv:
  not self.container.contents -&gt; includes(self.imported)</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA60308'/>  <!-- Model.Import -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
        <!-- ==================== Model.Import.NestedPackagesCannotImport    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a39A2BDA60328' 
          name = 'NestedPackagesCannotImport' annotation = '' 
          language = 'OCL' evaluationPolicy = 'deferred' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Import
inv:
         self.container -&gt; notEmpty() implies
         self.container.container -&gt; isEmpty()</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA60308'/>  <!-- Model.Import -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== Model.DirectionKind    [DataType] ==================== -->
    <Model:DataType xmi.id = 'a39A2BDA60336' 
      name = 'DirectionKind' annotation = '' 
      isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' >
      <Model:DataType.typeCode>
        <XMI.CorbaTypeCode>
          <XMI.CorbaTcEnum xmi.tcName = 'DirectionKind'>
          <XMI.CorbaTcEnumLabel xmi.tcName = 'in_dir'/>
          <XMI.CorbaTcEnumLabel xmi.tcName = 'out_dir'/>
          <XMI.CorbaTcEnumLabel xmi.tcName = 'inout_dir'/>
          <XMI.CorbaTcEnumLabel xmi.tcName = 'return_dir'/>
          </XMI.CorbaTcEnum>
        </XMI.CorbaTypeCode>
      </Model:DataType.typeCode>
    </Model:DataType>
    <!-- ==================== Model.Parameter    [Class] ==================== -->
    <Model:Class xmi.id = 'a39A2BDA60342' 
      name = 'Parameter' annotation = '' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' >
      <Model:GeneralizableElement.supertypes>
        <Model:GeneralizableElement xmi.idref = 'a39A2BDA601A0'/>  <!-- Model.TypedElement -->
      </Model:GeneralizableElement.supertypes>
      <Model:Namespace.contents>
        <!-- ==================== Model.Parameter.direction    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a39A2BDA60343' 
          name = 'direction' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xmi.idref = 'a39A2BDA60336'/>  <!-- Model.DirectionKind -->
          </Model:TypedElement.type>
        </Model:Attribute>
        <!-- ==================== Model.Parameter.multiplicity    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a39A2BDA60344' 
          name = 'multiplicity' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xmi.idref = 'a39A2BDA601FD'/>  <!-- Model.MultiplicityType -->
          </Model:TypedElement.type>
        </Model:Attribute>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== Model.Constraint    [Class] ==================== -->
    <Model:Class xmi.id = 'a39A2BDA60345' 
      name = 'Constraint' annotation = '' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' >
      <Model:ModelElement.constraints>
        <Model:Constraint xmi.idref = 'a4663FB8702EE'/>  <!-- Model.Constraint.ConstraintsLimitedToContainer -->
        <Model:Constraint xmi.idref = 'a39A2BDA60346'/>  <!-- Model.Constraint.CannotConstrainThisElement -->
      </Model:ModelElement.constraints>
      <Model:GeneralizableElement.supertypes>
        <Model:GeneralizableElement xmi.idref = 'a39A2BDA60093'/>  <!-- Model.ModelElement -->
      </Model:GeneralizableElement.supertypes>
      <Model:Namespace.contents>
        <!-- ==================== Model.Constraint.expression    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a39A2BDA60355' 
          name = 'expression' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60394'/>
          </Model:TypedElement.type>
        </Model:Attribute>
        <!-- ==================== Model.Constraint.language    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a39A2BDA60356' 
          name = 'language' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60394'/>
          </Model:TypedElement.type>
        </Model:Attribute>
        <!-- ==================== Model.Constraint.evaluationPolicy    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a39A2BDA60362' 
          name = 'evaluationPolicy' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xmi.idref = 'a39A2BDA60357'/>  <!-- Model.Constraint.EvaluationKind -->
          </Model:TypedElement.type>
        </Model:Attribute>
        <!-- ==================== Model.Constraint.constrainedElements    [Reference] ==================== -->
        <Model:Reference xmi.id = 'a39A2BDA60363' 
          name = 'constrainedElements' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xmi.idref = 'a39A2BDA60093'/>  <!-- Model.ModelElement -->
          </Model:TypedElement.type>
          <Model:Reference.referencedEnd>
            <Model:AssociationEnd xmi.idref = 'a39A2BDA70140'/>
          </Model:Reference.referencedEnd>
        </Model:Reference>
        <!-- ==================== Model.Constraint.EvaluationKind    [DataType] ==================== -->
        <Model:DataType xmi.id = 'a39A2BDA60357' 
          name = 'EvaluationKind' annotation = '' 
          isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' >
          <Model:DataType.typeCode>
            <XMI.CorbaTypeCode>
              <XMI.CorbaTcEnum xmi.tcName = 'EvaluationKind'>
              <XMI.CorbaTcEnumLabel xmi.tcName = 'immediate'/>
              <XMI.CorbaTcEnumLabel xmi.tcName = 'deferred'/>
              </XMI.CorbaTcEnum>
            </XMI.CorbaTypeCode>
          </Model:DataType.typeCode>
        </Model:DataType>
        <!-- ==================== Model.Constraint.CannotConstrainThisElement    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a39A2BDA60346' 
          name = 'CannotConstrainThisElement' annotation = '' 
          language = 'OCL' evaluationPolicy = 'immediate' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Constraint
inv:
  self.constrainedElements -&gt;
&#x0009; forAll(c | 
&#x0009; not ( 
&#x0009; c.oclIsKindOf(Constraint) or 
&#x0009; c.oclIsTypeOf(Tag) or 
&#x0009; c.oclIsTypeOf(Import) or 
&#x0009; c.oclIsTypeOf(Constant)))</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA60345'/>  <!-- Model.Constraint -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
        <!-- ==================== Model.Constraint.ConstraintsLimitedToContainer    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a4663FB8702EE' 
          name = 'ConstraintsLimitedToContainer' annotation = '' 
          language = 'OCL' evaluationPolicy = 'deferred' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Constraint
inv:
self.constrainedElements -&gt;
forAll(c | self.container = c or 
self.container.extendedNamespace() -&gt;
includes(c))</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA60345'/>  <!-- Model.Constraint -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== Model.Constant    [Class] ==================== -->
    <Model:Class xmi.id = 'a39A2BDA60367' 
      name = 'Constant' annotation = '' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' >
      <Model:ModelElement.constraints>
        <Model:Constraint xmi.idref = 'a39A2BDA60374'/>  <!-- Model.Constant.ConstantsTypeMustBePrimitive -->
      </Model:ModelElement.constraints>
      <Model:GeneralizableElement.supertypes>
        <Model:GeneralizableElement xmi.idref = 'a39A2BDA601A0'/>  <!-- Model.TypedElement -->
      </Model:GeneralizableElement.supertypes>
      <Model:Namespace.contents>
        <!-- ==================== Model.Constant.value    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a39A2BDA60377' 
          name = 'value' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60394'/>
          </Model:TypedElement.type>
        </Model:Attribute>
        <!-- ==================== Model.Constant.ConstantsTypeMustBePrimitive    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a39A2BDA60374' 
          name = 'ConstantsTypeMustBePrimitive' annotation = '' 
          language = 'OCL' evaluationPolicy = 'immediate' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context Constant
inv:
  self.type.oclIsTypeOf(PrimitiveType)</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a39A2BDA60367'/>  <!-- Model.Constant -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== Model.Tag    [Class] ==================== -->
    <Model:Class xmi.id = 'a39A2BDA60380' 
      name = 'Tag' annotation = '' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' >
      <Model:GeneralizableElement.supertypes>
        <Model:GeneralizableElement xmi.idref = 'a39A2BDA60093'/>  <!-- Model.ModelElement -->
      </Model:GeneralizableElement.supertypes>
      <Model:Namespace.contents>
        <!-- ==================== Model.Tag.tagId    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a39A2BDA60381' 
          name = 'tagId' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60394'/>
          </Model:TypedElement.type>
        </Model:Attribute>
        <!-- ==================== Model.Tag.values    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a39A2BDA60382' 
          name = 'values' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'true' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60394'/>
          </Model:TypedElement.type>
        </Model:Attribute>
        <!-- ==================== Model.Tag.elements    [Reference] ==================== -->
        <Model:Reference xmi.id = 'a39A2BDA60383' 
          name = 'elements' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xmi.idref = 'a39A2BDA60093'/>  <!-- Model.ModelElement -->
          </Model:TypedElement.type>
          <Model:Reference.referencedEnd>
            <Model:AssociationEnd xmi.idref = 'a39A2BDA700B3'/>
          </Model:Reference.referencedEnd>
        </Model:Reference>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== Model.PrimitiveType    [Class] ==================== -->
    <Model:Class xmi.id = 'a3B539954037F' 
      name = 'PrimitiveType' annotation = '' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' >
      <Model:GeneralizableElement.supertypes>
        <Model:GeneralizableElement xmi.idref = 'a39A2BDA601CD'/>  <!-- Model.DataType -->
      </Model:GeneralizableElement.supertypes>
    </Model:Class>
    <!-- ==================== Model.StructureType    [Class] ==================== -->
    <Model:Class xmi.id = 'a3B53996401C9' 
      name = 'StructureType' annotation = '' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' >
      <Model:ModelElement.constraints>
        <Model:Constraint xmi.idref = 'a3B5AA5770382'/>  <!-- Model.StructureType.MustHaveFields -->
      </Model:ModelElement.constraints>
      <Model:GeneralizableElement.supertypes>
        <Model:GeneralizableElement xmi.idref = 'a39A2BDA601CD'/>  <!-- Model.DataType -->
      </Model:GeneralizableElement.supertypes>
      <Model:Namespace.contents>
        <!-- ==================== Model.StructureType.MustHaveFields    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a3B5AA5770382' 
          name = 'MustHaveFields' annotation = '' 
          language = 'OCL' evaluationPolicy = 'deferred' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context StructureType
inv:
  self.allSupertypes()-&gt;isEmpty()
  implies
  self.contents -&gt; exists(c | c.oclIsTypeOf(StructureField))</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a3B53996401C9'/>  <!-- Model.StructureType -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== Model.EnumerationType    [Class] ==================== -->
    <Model:Class xmi.id = 'a3B53996C0351' 
      name = 'EnumerationType' annotation = '' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' >
      <Model:GeneralizableElement.supertypes>
        <Model:GeneralizableElement xmi.idref = 'a39A2BDA601CD'/>  <!-- Model.DataType -->
      </Model:GeneralizableElement.supertypes>
      <Model:Namespace.contents>
        <!-- ==================== Model.EnumerationType.labels    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a3B539A2F00EF' 
          name = 'labels' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '-1' is_ordered = 'true' is_unique = 'true' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xml:link = 'simple' href = 'PrimitiveTypes.xml|a39A2BDA60394'/>
          </Model:TypedElement.type>
        </Model:Attribute>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== Model.AliasType    [Class] ==================== -->
    <Model:Class xmi.id = 'a3B5399810012' 
      name = 'AliasType' annotation = '' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' >
      <Model:GeneralizableElement.supertypes>
        <Model:GeneralizableElement xmi.idref = 'a39A2BDA601CD'/>  <!-- Model.DataType -->
        <Model:GeneralizableElement xmi.idref = 'a39A2BDA601A0'/>  <!-- Model.TypedElement -->
      </Model:GeneralizableElement.supertypes>
    </Model:Class>
    <!-- ==================== Model.StructureField    [Class] ==================== -->
    <Model:Class xmi.id = 'a3B5399B20258' 
      name = 'StructureField' annotation = '' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' >
      <Model:ModelElement.constraints>
        <Model:Constraint xmi.idref = 'a462859B90168'/>  <!-- Model.StructureField.StructureFieldsCannotBeObjectValued -->
      </Model:ModelElement.constraints>
      <Model:GeneralizableElement.supertypes>
        <Model:GeneralizableElement xmi.idref = 'a39A2BDA601A0'/>  <!-- Model.TypedElement -->
      </Model:GeneralizableElement.supertypes>
      <Model:Namespace.contents>
        <!-- ==================== Model.StructureField.StructureFieldsCannotBeObjectValued    [Constraint] ==================== -->
        <Model:Constraint xmi.id = 'a462859B90168' 
          name = 'StructureFieldsCannotBeObjectValued' annotation = '' 
          language = 'OCL' evaluationPolicy = 'deferred' >
          <Model:Constraint.expression>
            <XMI.any xmi.type = 'string' xmi.name = ''>context StructureField
inv:
self.type.oclIsKindOf(PrimitiveType) or
self.type.oclIsKindOf(EnumerationType) or
self.type.oclIsKindOf(StructureType) or
self.type.oclIsKindOf(Constraint)</XMI.any>
          </Model:Constraint.expression>
          <Model:Constraint.constrainedElements>
            <Model:ModelElement xmi.idref = 'a3B5399B20258'/>  <!-- Model.StructureField -->
          </Model:Constraint.constrainedElements>
        </Model:Constraint>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== Model.CollectionType    [Class] ==================== -->
    <Model:Class xmi.id = 'a49B0F3720104' 
      name = 'CollectionType' annotation = '' 
      isRoot = 'false' isLeaf = 'false' isAbstract = 'false' visibility = 'public_vis' 
      isSingleton = 'false' >
      <Model:GeneralizableElement.supertypes>
        <Model:GeneralizableElement xmi.idref = 'a39A2BDA601A0'/>  <!-- Model.TypedElement -->
        <Model:GeneralizableElement xmi.idref = 'a39A2BDA601CD'/>  <!-- Model.DataType -->
      </Model:GeneralizableElement.supertypes>
      <Model:Namespace.contents>
        <!-- ==================== Model.CollectionType.multiplicity    [Attribute] ==================== -->
        <Model:Attribute xmi.id = 'a49B0F38803D3' 
          name = 'multiplicity' annotation = '' 
          scope = 'instance_level' visibility = 'public_vis' 
          isChangeable = 'true' 
          isDerived = 'false' >
          <Model:StructuralFeature.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:StructuralFeature.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xmi.idref = 'a39A2BDA601FD'/>  <!-- Model.MultiplicityType -->
          </Model:TypedElement.type>
        </Model:Attribute>
      </Model:Namespace.contents>
    </Model:Class>
    <!-- ==================== Model.AttachesTo    [Association] ==================== -->
    <Model:Association xmi.id = 'a39A2BDA700B2' 
      name = 'AttachesTo' annotation = '' 
      isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
      isDerived = 'false' >
      <Model:Namespace.contents>
        <Model:AssociationEnd xmi.id = 'a39A2BDA700B3' 
          name = 'modelElement' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:AssociationEnd.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xmi.idref = 'a39A2BDA60093'/>  <!-- Model.ModelElement -->
          </Model:TypedElement.type>
        </Model:AssociationEnd>
        <Model:AssociationEnd xmi.id = 'a39A2BDA700B4' 
          name = 'tag' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:AssociationEnd.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xmi.idref = 'a39A2BDA60380'/>  <!-- Model.Tag -->
          </Model:TypedElement.type>
        </Model:AssociationEnd>
      </Model:Namespace.contents>
    </Model:Association>
    <!-- ==================== Model.org.omg.sap2mof.store=no    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.242' 
      name = 'org.omg.sap2mof.store=no' annotation = '' 
      tagId = 'org.omg.sap2mof.store' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>no</XMI.any>
      </Model:Tag.values>
      <Model:Tag.elements>
        <Model:ModelElement xmi.idref = 'a39A2BDA700B3'/>
        <Model:ModelElement xmi.idref = 'a39A2BDA700D3'/>
        <Model:ModelElement xmi.idref = 'a39A2BDA700F2'/>
        <Model:ModelElement xmi.idref = 'a39A2BDA70110'/>
        <Model:ModelElement xmi.idref = 'a39A2BDA70121'/>
        <Model:ModelElement xmi.idref = 'a39A2BDA70140'/>
        <Model:ModelElement xmi.idref = 'a39A2BDA70160'/>
        <Model:ModelElement xmi.idref = 'a39A2BDA7016F'/>
        <Model:ModelElement xmi.idref = 'a39A2BDA7018E'/>
        <Model:ModelElement xmi.idref = 'a39A2BDA7019D'/>
      </Model:Tag.elements>
    </Model:Tag>
    <!-- ==================== Model.org.omg.sap2mof.store=yes    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.243' 
      name = 'org.omg.sap2mof.store=yes' annotation = '' 
      tagId = 'org.omg.sap2mof.store' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>yes</XMI.any>
      </Model:Tag.values>
      <Model:Tag.elements>
        <Model:ModelElement xmi.idref = 'a39A2BDA700B4'/>
        <Model:ModelElement xmi.idref = 'a39A2BDA700D2'/>
        <Model:ModelElement xmi.idref = 'a39A2BDA700F1'/>
        <Model:ModelElement xmi.idref = 'a39A2BDA70111'/>
        <Model:ModelElement xmi.idref = 'a39A2BDA70120'/>
        <Model:ModelElement xmi.idref = 'a39A2BDA7013F'/>
        <Model:ModelElement xmi.idref = 'a39A2BDA7015F'/>
        <Model:ModelElement xmi.idref = 'a39A2BDA7016E'/>
        <Model:ModelElement xmi.idref = 'a39A2BDA7018D'/>
        <Model:ModelElement xmi.idref = 'a39A2BDA7019E'/>
      </Model:Tag.elements>
    </Model:Tag>
    <!-- ==================== Model.DependsOn    [Association] ==================== -->
    <Model:Association xmi.id = 'a39A2BDA700D1' 
      name = 'DependsOn' annotation = '' 
      isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
      isDerived = 'true' >
      <Model:Namespace.contents>
        <Model:AssociationEnd xmi.id = 'a39A2BDA700D2' 
          name = 'dependent' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'false' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:AssociationEnd.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xmi.idref = 'a39A2BDA60093'/>  <!-- Model.ModelElement -->
          </Model:TypedElement.type>
        </Model:AssociationEnd>
        <Model:AssociationEnd xmi.id = 'a39A2BDA700D3' 
          name = 'provider' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'false' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:AssociationEnd.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xmi.idref = 'a39A2BDA60093'/>  <!-- Model.ModelElement -->
          </Model:TypedElement.type>
        </Model:AssociationEnd>
      </Model:Namespace.contents>
    </Model:Association>
    <!-- ==================== Model.org.omg.sap2mof.DerivationCodeJava=// DependsOn.getDependent...    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.244' 
      name = 'org.omg.sap2mof.DerivationCodeJava=// DependsOn.getDependent...' annotation = '' 
      tagId = 'org.omg.sap2mof.DerivationCodeJava' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>// DependsOn.getDependent
return com.sap.tc.moin.repository.core.jmi.util.MoinMetamodelCode.getDependent(connection, this, _Provider);</XMI.any>
      </Model:Tag.values>
      <Model:Tag.elements>
        <Model:ModelElement xmi.idref = 'a39A2BDA700D2'/>
      </Model:Tag.elements>
    </Model:Tag>
    <!-- ==================== Model.org.omg.sap2mof.DerivationCodeJava=// DependsOn.getProvider...    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.245' 
      name = 'org.omg.sap2mof.DerivationCodeJava=// DependsOn.getProvider...' annotation = '' 
      tagId = 'org.omg.sap2mof.DerivationCodeJava' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>// DependsOn.getProvider
return com.sap.tc.moin.repository.core.jmi.util.MoinMetamodelCode.getProvider(connection, this, _Dependent);</XMI.any>
      </Model:Tag.values>
      <Model:Tag.elements>
        <Model:ModelElement xmi.idref = 'a39A2BDA700D3'/>
      </Model:Tag.elements>
    </Model:Tag>
    <!-- ==================== Model.Contains    [Association] ==================== -->
    <Model:Association xmi.id = 'a39A2BDA700F0' 
      name = 'Contains' annotation = '' 
      isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
      isDerived = 'false' >
      <Model:Namespace.contents>
        <Model:AssociationEnd xmi.id = 'a39A2BDA700F1' 
          name = 'container' annotation = '' 
          isNavigable = 'true' aggregation = 'composite' isChangeable = 'true' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:AssociationEnd.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xmi.idref = 'a39A2BDA60123'/>  <!-- Model.Namespace -->
          </Model:TypedElement.type>
        </Model:AssociationEnd>
        <Model:AssociationEnd xmi.id = 'a39A2BDA700F2' 
          name = 'containedElement' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'true' is_unique = 'true' />
          </Model:AssociationEnd.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xmi.idref = 'a39A2BDA60093'/>  <!-- Model.ModelElement -->
          </Model:TypedElement.type>
        </Model:AssociationEnd>
      </Model:Namespace.contents>
    </Model:Association>
    <!-- ==================== Model.Generalizes    [Association] ==================== -->
    <Model:Association xmi.id = 'a39A2BDA7010F' 
      name = 'Generalizes' annotation = '' 
      isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
      isDerived = 'false' >
      <Model:Namespace.contents>
        <Model:AssociationEnd xmi.id = 'a39A2BDA70110' 
          name = 'supertype' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'true' is_unique = 'true' />
          </Model:AssociationEnd.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xmi.idref = 'a39A2BDA60152'/>  <!-- Model.GeneralizableElement -->
          </Model:TypedElement.type>
        </Model:AssociationEnd>
        <Model:AssociationEnd xmi.id = 'a39A2BDA70111' 
          name = 'subtype' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:AssociationEnd.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xmi.idref = 'a39A2BDA60152'/>  <!-- Model.GeneralizableElement -->
          </Model:TypedElement.type>
        </Model:AssociationEnd>
      </Model:Namespace.contents>
    </Model:Association>
    <!-- ==================== Model.Aliases    [Association] ==================== -->
    <Model:Association xmi.id = 'a39A2BDA7011F' 
      name = 'Aliases' annotation = '' 
      isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
      isDerived = 'false' >
      <Model:Namespace.contents>
        <Model:AssociationEnd xmi.id = 'a39A2BDA70120' 
          name = 'importer' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:AssociationEnd.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xmi.idref = 'a39A2BDA60308'/>  <!-- Model.Import -->
          </Model:TypedElement.type>
        </Model:AssociationEnd>
        <Model:AssociationEnd xmi.id = 'a39A2BDA70121' 
          name = 'imported' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:AssociationEnd.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xmi.idref = 'a39A2BDA60123'/>  <!-- Model.Namespace -->
          </Model:TypedElement.type>
        </Model:AssociationEnd>
      </Model:Namespace.contents>
    </Model:Association>
    <!-- ==================== Model.Constrains    [Association] ==================== -->
    <Model:Association xmi.id = 'a39A2BDA7013E' 
      name = 'Constrains' annotation = '' 
      isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
      isDerived = 'false' >
      <Model:Namespace.contents>
        <Model:AssociationEnd xmi.id = 'a39A2BDA7013F' 
          name = 'constraint' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:AssociationEnd.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xmi.idref = 'a39A2BDA60345'/>  <!-- Model.Constraint -->
          </Model:TypedElement.type>
        </Model:AssociationEnd>
        <Model:AssociationEnd xmi.id = 'a39A2BDA70140' 
          name = 'constrainedElement' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:AssociationEnd.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xmi.idref = 'a39A2BDA60093'/>  <!-- Model.ModelElement -->
          </Model:TypedElement.type>
        </Model:AssociationEnd>
      </Model:Namespace.contents>
    </Model:Association>
    <!-- ==================== Model.CanRaise    [Association] ==================== -->
    <Model:Association xmi.id = 'a39A2BDA7015E' 
      name = 'CanRaise' annotation = '' 
      isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
      isDerived = 'false' >
      <Model:Namespace.contents>
        <Model:AssociationEnd xmi.id = 'a39A2BDA7015F' 
          name = 'operation' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:AssociationEnd.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xmi.idref = 'a39A2BDA6025D'/>  <!-- Model.Operation -->
          </Model:TypedElement.type>
        </Model:AssociationEnd>
        <Model:AssociationEnd xmi.id = 'a39A2BDA70160' 
          name = 'except' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'true' is_unique = 'true' />
          </Model:AssociationEnd.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xmi.idref = 'a39A2BDA6027A'/>  <!-- Model.Exception -->
          </Model:TypedElement.type>
        </Model:AssociationEnd>
      </Model:Namespace.contents>
    </Model:Association>
    <!-- ==================== Model.Exposes    [Association] ==================== -->
    <Model:Association xmi.id = 'a39A2BDA7016D' 
      name = 'Exposes' annotation = '' 
      isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
      isDerived = 'true' >
      <Model:Namespace.contents>
        <Model:AssociationEnd xmi.id = 'a39A2BDA7016E' 
          name = 'referrer' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:AssociationEnd.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xmi.idref = 'a39A2BDA60229'/>  <!-- Model.Reference -->
          </Model:TypedElement.type>
        </Model:AssociationEnd>
        <Model:AssociationEnd xmi.id = 'a39A2BDA7016F' 
          name = 'exposedEnd' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:AssociationEnd.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xmi.idref = 'a39A2BDA602B7'/>  <!-- Model.AssociationEnd -->
          </Model:TypedElement.type>
        </Model:AssociationEnd>
      </Model:Namespace.contents>
    </Model:Association>
    <!-- ==================== Model.org.omg.sap2mof.OperationCodeAddJava=// Exposes.add...    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.246' 
      name = 'org.omg.sap2mof.OperationCodeAddJava=// Exposes.add...' annotation = '' 
      tagId = 'org.omg.sap2mof.OperationCodeAddJava' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>// Exposes.add
return com.sap.tc.moin.repository.core.jmi.util.MoinMetamodelCode.add(connection, this, _Referrer, _ExposedEnd, _AddedViaReference);</XMI.any>
      </Model:Tag.values>
      <Model:Tag.elements>
        <Model:ModelElement xmi.idref = 'a39A2BDA7016D'/>  <!-- Model.Exposes -->
      </Model:Tag.elements>
    </Model:Tag>
    <!-- ==================== Model.org.omg.sap2mof.OperationCodeRemoveJava=// Exposes.remove...    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.247' 
      name = 'org.omg.sap2mof.OperationCodeRemoveJava=// Exposes.remove...' annotation = '' 
      tagId = 'org.omg.sap2mof.OperationCodeRemoveJava' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>// Exposes.remove
return com.sap.tc.moin.repository.core.jmi.util.MoinMetamodelCode.remove(connection, this, _Referrer, _ExposedEnd);</XMI.any>
      </Model:Tag.values>
      <Model:Tag.elements>
        <Model:ModelElement xmi.idref = 'a39A2BDA7016D'/>  <!-- Model.Exposes -->
      </Model:Tag.elements>
    </Model:Tag>
    <!-- ==================== Model.org.omg.sap2mof.DerivationCodeJava=// Exposes.getReferrer...    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.248' 
      name = 'org.omg.sap2mof.DerivationCodeJava=// Exposes.getReferrer...' annotation = '' 
      tagId = 'org.omg.sap2mof.DerivationCodeJava' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>// Exposes.getReferrer
return com.sap.tc.moin.repository.core.jmi.util.MoinMetamodelCode.getReferrer(connection, this, _ExposedEnd);</XMI.any>
      </Model:Tag.values>
      <Model:Tag.elements>
        <Model:ModelElement xmi.idref = 'a39A2BDA7016E'/>
      </Model:Tag.elements>
    </Model:Tag>
    <!-- ==================== Model.org.omg.sap2mof.DerivationCodeJava=// Exposes.getExposedEnd...    [Tag] ==================== -->
    <Model:Tag xmi.id = 'G.249' 
      name = 'org.omg.sap2mof.DerivationCodeJava=// Exposes.getExposedEnd...' annotation = '' 
      tagId = 'org.omg.sap2mof.DerivationCodeJava' >
      <Model:Tag.values>
        <XMI.any xmi.type = 'string' xmi.name = ''>// Exposes.getExposedEnd
return com.sap.tc.moin.repository.core.jmi.util.MoinMetamodelCode.getExposedEnd(connection, this, _Referrer);</XMI.any>
      </Model:Tag.values>
      <Model:Tag.elements>
        <Model:ModelElement xmi.idref = 'a39A2BDA7016F'/>
      </Model:Tag.elements>
    </Model:Tag>
    <!-- ==================== Model.RefersTo    [Association] ==================== -->
    <Model:Association xmi.id = 'a39A2BDA7018C' 
      name = 'RefersTo' annotation = '' 
      isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
      isDerived = 'false' >
      <Model:Namespace.contents>
        <Model:AssociationEnd xmi.id = 'a39A2BDA7018D' 
          name = 'referent' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:AssociationEnd.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xmi.idref = 'a39A2BDA60229'/>  <!-- Model.Reference -->
          </Model:TypedElement.type>
        </Model:AssociationEnd>
        <Model:AssociationEnd xmi.id = 'a39A2BDA7018E' 
          name = 'referencedEnd' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:AssociationEnd.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xmi.idref = 'a39A2BDA602B7'/>  <!-- Model.AssociationEnd -->
          </Model:TypedElement.type>
        </Model:AssociationEnd>
      </Model:Namespace.contents>
    </Model:Association>
    <!-- ==================== Model.IsOfType    [Association] ==================== -->
    <Model:Association xmi.id = 'a39A2BDA7019C' 
      name = 'IsOfType' annotation = '' 
      isRoot = 'true' isLeaf = 'true' isAbstract = 'false' visibility = 'public_vis' 
      isDerived = 'false' >
      <Model:Namespace.contents>
        <Model:AssociationEnd xmi.id = 'a39A2BDA7019D' 
          name = 'type' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '1' upper = '1' is_ordered = 'false' is_unique = 'false' />
          </Model:AssociationEnd.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xmi.idref = 'a39A2BDA601B3'/>  <!-- Model.Classifier -->
          </Model:TypedElement.type>
        </Model:AssociationEnd>
        <Model:AssociationEnd xmi.id = 'a39A2BDA7019E' 
          name = 'typedElements' annotation = '' 
          isNavigable = 'true' aggregation = 'none' isChangeable = 'true' >
          <Model:AssociationEnd.multiplicity>
            <Model:MultiplicityType lower = '0' upper = '-1' is_ordered = 'false' is_unique = 'true' />
          </Model:AssociationEnd.multiplicity>
          <Model:TypedElement.type>
            <Model:Classifier xmi.idref = 'a39A2BDA601A0'/>  <!-- Model.TypedElement -->
          </Model:TypedElement.type>
        </Model:AssociationEnd>
      </Model:Namespace.contents>
    </Model:Association>
  </Model:Namespace.contents>
</Model:Package>
</XMI.content>
</XMI>
