/**
 * Generated by the MOIN Generator Version 3.0
 **/

package com.sap.tc.moin.repository.mmi.model;

/**
 * This interface is not intended to be implemented by clients.
 */
public interface GeneralizableElement extends com.sap.tc.moin.repository.mmi.model.Namespace {

    /**
     * Descriptors for all features of this MofClass and its supertypes.
     */
    public static final Descriptors DESCRIPTORS = new Descriptors( );

    // class extent descriptor
    /**
     * Extent descriptor
     */
    public final com.sap.tc.moin.repository.mmi.descriptors.ClassDescriptor<com.sap.tc.moin.repository.mmi.reflect.RefClass, com.sap.tc.moin.repository.mmi.model.GeneralizableElement> CLASS_DESCRIPTOR = new com.sap.tc.moin.repository.mmi.descriptors.ClassDescriptor<com.sap.tc.moin.repository.mmi.reflect.RefClass, com.sap.tc.moin.repository.mmi.model.GeneralizableElement>("45ED2E293BF1CDEB8C034ACB19B697CC6F84EAC6", "sap.com/tc/moin/mof_1.4", "Model", "GeneralizableElement"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ 

    
    // attributes
    public boolean isRoot() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public void setRoot(boolean newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public boolean isLeaf() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public void setLeaf(boolean newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public boolean isAbstract() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public void setAbstract(boolean newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public com.sap.tc.moin.repository.mmi.model.VisibilityKind getVisibility() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public void setVisibility(com.sap.tc.moin.repository.mmi.model.VisibilityKind newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;

    // references
    public java.util.List<com.sap.tc.moin.repository.mmi.model.GeneralizableElement> getSupertypes() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;

    // operations
    public java.util.List<com.sap.tc.moin.repository.mmi.model.GeneralizableElement> allSupertypes() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public com.sap.tc.moin.repository.mmi.model.ModelElement lookupElementExtended(java.lang.String name) throws com.sap.tc.moin.repository.mmi.reflect.JmiException, com.sap.tc.moin.repository.mmi.model.NameNotFoundException;
    public java.util.List<com.sap.tc.moin.repository.mmi.model.ModelElement> findElementsByTypeExtended(com.sap.tc.moin.repository.mmi.model.MofClass ofType, boolean includeSubtypes) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;


    public static final class Descriptors {
        Descriptors( ) { 
        }
        /**
         * Returns the descriptor for the <code>name</code> attribute.
         * @return  the descriptor for the <code>name</code> attribute
         */
        public com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,com.sap.tc.moin.repository.mmi.model.ModelElement,java.lang.String> NAME( ) {
            return com.sap.tc.moin.repository.mmi.model.ModelElement.DESCRIPTORS.NAME( );
        }
        /**
         * Returns the descriptor for the <code>annotation</code> attribute.
         * @return  the descriptor for the <code>annotation</code> attribute
         */
        public com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,com.sap.tc.moin.repository.mmi.model.ModelElement,java.lang.String> ANNOTATION( ) {
            return com.sap.tc.moin.repository.mmi.model.ModelElement.DESCRIPTORS.ANNOTATION( );
        }
        private com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,com.sap.tc.moin.repository.mmi.model.GeneralizableElement,java.lang.Boolean> __isRoot;
        /**
         * Returns the descriptor for the <code>isRoot</code> attribute.
         * @return  the descriptor for the <code>isRoot</code> attribute
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,com.sap.tc.moin.repository.mmi.model.GeneralizableElement,java.lang.Boolean> IS_ROOT( ) {
            if ( __isRoot == null ) {
                __isRoot = new com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,com.sap.tc.moin.repository.mmi.model.GeneralizableElement,java.lang.Boolean>( "45ED2E2991D8B6D1DA374D042C2BAFDABC74B7E8", "sap.com/tc/moin/mof_1.4", new java.lang.String[] { "Model", "GeneralizableElement", "isRoot" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ 
            }
            return __isRoot;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,com.sap.tc.moin.repository.mmi.model.GeneralizableElement,java.lang.Boolean> __isLeaf;
        /**
         * Returns the descriptor for the <code>isLeaf</code> attribute.
         * @return  the descriptor for the <code>isLeaf</code> attribute
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,com.sap.tc.moin.repository.mmi.model.GeneralizableElement,java.lang.Boolean> IS_LEAF( ) {
            if ( __isLeaf == null ) {
                __isLeaf = new com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,com.sap.tc.moin.repository.mmi.model.GeneralizableElement,java.lang.Boolean>( "45ED2E29605183D820EC494D0F2EF9790437F623", "sap.com/tc/moin/mof_1.4", new java.lang.String[] { "Model", "GeneralizableElement", "isLeaf" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ 
            }
            return __isLeaf;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,com.sap.tc.moin.repository.mmi.model.GeneralizableElement,java.lang.Boolean> __isAbstract;
        /**
         * Returns the descriptor for the <code>isAbstract</code> attribute.
         * @return  the descriptor for the <code>isAbstract</code> attribute
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,com.sap.tc.moin.repository.mmi.model.GeneralizableElement,java.lang.Boolean> IS_ABSTRACT( ) {
            if ( __isAbstract == null ) {
                __isAbstract = new com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,com.sap.tc.moin.repository.mmi.model.GeneralizableElement,java.lang.Boolean>( "45ED2E291967C1626A394277315396297D4A6EAE", "sap.com/tc/moin/mof_1.4", new java.lang.String[] { "Model", "GeneralizableElement", "isAbstract" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ 
            }
            return __isAbstract;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,com.sap.tc.moin.repository.mmi.model.GeneralizableElement,com.sap.tc.moin.repository.mmi.model.VisibilityKind> __visibility;
        /**
         * Returns the descriptor for the <code>visibility</code> attribute.
         * @return  the descriptor for the <code>visibility</code> attribute
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,com.sap.tc.moin.repository.mmi.model.GeneralizableElement,com.sap.tc.moin.repository.mmi.model.VisibilityKind> VISIBILITY( ) {
            if ( __visibility == null ) {
                __visibility = new com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,com.sap.tc.moin.repository.mmi.model.GeneralizableElement,com.sap.tc.moin.repository.mmi.model.VisibilityKind>( "45ED2E29D230CF36D7B349633C15A57B25E06E3D", "sap.com/tc/moin/mof_1.4", new java.lang.String[] { "Model", "GeneralizableElement", "visibility" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ 
            }
            return __visibility;
        }
        /**
         * Returns the descriptor for the <code>requiredElements</code> reference.
         * @return  the descriptor for the <code>requiredElements</code> reference
         */
        public com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,com.sap.tc.moin.repository.mmi.model.ModelElement,java.util.Collection<com.sap.tc.moin.repository.mmi.model.ModelElement>> REQUIRED_ELEMENTS( ) {
            return com.sap.tc.moin.repository.mmi.model.ModelElement.DESCRIPTORS.REQUIRED_ELEMENTS( );
        }
        /**
         * Returns the descriptor for the <code>container</code> reference.
         * @return  the descriptor for the <code>container</code> reference
         */
        public com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,com.sap.tc.moin.repository.mmi.model.ModelElement,com.sap.tc.moin.repository.mmi.model.Namespace> CONTAINER( ) {
            return com.sap.tc.moin.repository.mmi.model.ModelElement.DESCRIPTORS.CONTAINER( );
        }
        /**
         * Returns the descriptor for the <code>constraints</code> reference.
         * @return  the descriptor for the <code>constraints</code> reference
         */
        public com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,com.sap.tc.moin.repository.mmi.model.ModelElement,java.util.Collection<com.sap.tc.moin.repository.mmi.model.Constraint>> CONSTRAINTS( ) {
            return com.sap.tc.moin.repository.mmi.model.ModelElement.DESCRIPTORS.CONSTRAINTS( );
        }
        /**
         * Returns the descriptor for the <code>contents</code> reference.
         * @return  the descriptor for the <code>contents</code> reference
         */
        public com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,com.sap.tc.moin.repository.mmi.model.Namespace,java.util.List<com.sap.tc.moin.repository.mmi.model.ModelElement>> CONTENTS( ) {
            return com.sap.tc.moin.repository.mmi.model.Namespace.DESCRIPTORS.CONTENTS( );
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,com.sap.tc.moin.repository.mmi.model.GeneralizableElement,java.util.List<com.sap.tc.moin.repository.mmi.model.GeneralizableElement>> __supertypes;
        /**
         * Returns the descriptor for the <code>supertypes</code> reference.
         * @return  the descriptor for the <code>supertypes</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,com.sap.tc.moin.repository.mmi.model.GeneralizableElement,java.util.List<com.sap.tc.moin.repository.mmi.model.GeneralizableElement>> SUPERTYPES( ) {
            if ( __supertypes == null ) {
                __supertypes = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,com.sap.tc.moin.repository.mmi.model.GeneralizableElement,java.util.List<com.sap.tc.moin.repository.mmi.model.GeneralizableElement>>( "45ED2E29D436EF951649417B2259FBBA4B83CA6C", "sap.com/tc/moin/mof_1.4", new java.lang.String[] { "Model", "GeneralizableElement", "supertypes" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ 
            }
            return __supertypes;
        }
        /**
         * Returns the descriptor for the <code>findRequiredElements</code> operation.
         * @return  the descriptor for the <code>findRequiredElements</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,com.sap.tc.moin.repository.mmi.model.ModelElement,java.util.Collection<com.sap.tc.moin.repository.mmi.model.ModelElement>> FIND_REQUIRED_ELEMENTS( ) {
            return com.sap.tc.moin.repository.mmi.model.ModelElement.DESCRIPTORS.FIND_REQUIRED_ELEMENTS( );
        }
        /**
         * Returns the descriptor for the <code>isRequiredBecause</code> operation.
         * @return  the descriptor for the <code>isRequiredBecause</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,com.sap.tc.moin.repository.mmi.model.ModelElement,java.lang.Boolean> IS_REQUIRED_BECAUSE( ) {
            return com.sap.tc.moin.repository.mmi.model.ModelElement.DESCRIPTORS.IS_REQUIRED_BECAUSE( );
        }
        /**
         * Returns the descriptor for the <code>isFrozen</code> operation.
         * @return  the descriptor for the <code>isFrozen</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,com.sap.tc.moin.repository.mmi.model.ModelElement,java.lang.Boolean> IS_FROZEN( ) {
            return com.sap.tc.moin.repository.mmi.model.ModelElement.DESCRIPTORS.IS_FROZEN( );
        }
        /**
         * Returns the descriptor for the <code>isVisible</code> operation.
         * @return  the descriptor for the <code>isVisible</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,com.sap.tc.moin.repository.mmi.model.ModelElement,java.lang.Boolean> IS_VISIBLE( ) {
            return com.sap.tc.moin.repository.mmi.model.ModelElement.DESCRIPTORS.IS_VISIBLE( );
        }
        /**
         * Returns the descriptor for the <code>lookupElement</code> operation.
         * @return  the descriptor for the <code>lookupElement</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,com.sap.tc.moin.repository.mmi.model.Namespace,com.sap.tc.moin.repository.mmi.model.ModelElement> LOOKUP_ELEMENT( ) {
            return com.sap.tc.moin.repository.mmi.model.Namespace.DESCRIPTORS.LOOKUP_ELEMENT( );
        }
        /**
         * Returns the descriptor for the <code>resolveQualifiedName</code> operation.
         * @return  the descriptor for the <code>resolveQualifiedName</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,com.sap.tc.moin.repository.mmi.model.Namespace,com.sap.tc.moin.repository.mmi.model.ModelElement> RESOLVE_QUALIFIED_NAME( ) {
            return com.sap.tc.moin.repository.mmi.model.Namespace.DESCRIPTORS.RESOLVE_QUALIFIED_NAME( );
        }
        /**
         * Returns the descriptor for the <code>findElementsByType</code> operation.
         * @return  the descriptor for the <code>findElementsByType</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,com.sap.tc.moin.repository.mmi.model.Namespace,java.util.List<com.sap.tc.moin.repository.mmi.model.ModelElement>> FIND_ELEMENTS_BY_TYPE( ) {
            return com.sap.tc.moin.repository.mmi.model.Namespace.DESCRIPTORS.FIND_ELEMENTS_BY_TYPE( );
        }
        /**
         * Returns the descriptor for the <code>nameIsValid</code> operation.
         * @return  the descriptor for the <code>nameIsValid</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,com.sap.tc.moin.repository.mmi.model.Namespace,java.lang.Boolean> NAME_IS_VALID( ) {
            return com.sap.tc.moin.repository.mmi.model.Namespace.DESCRIPTORS.NAME_IS_VALID( );
        }
        private com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,com.sap.tc.moin.repository.mmi.model.GeneralizableElement,java.util.List<com.sap.tc.moin.repository.mmi.model.GeneralizableElement>> __allSupertypes;
        /**
         * Returns the descriptor for the <code>allSupertypes</code> operation.
         * @return  the descriptor for the <code>allSupertypes</code> operation
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,com.sap.tc.moin.repository.mmi.model.GeneralizableElement,java.util.List<com.sap.tc.moin.repository.mmi.model.GeneralizableElement>> ALL_SUPERTYPES( ) {
            if ( __allSupertypes == null ) {
                __allSupertypes = new com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,com.sap.tc.moin.repository.mmi.model.GeneralizableElement,java.util.List<com.sap.tc.moin.repository.mmi.model.GeneralizableElement>>( "45ED2E29DE792241B29746940E65C693F6378D89", "sap.com/tc/moin/mof_1.4", new java.lang.String[] { "Model", "GeneralizableElement", "allSupertypes" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ 
            }
            return __allSupertypes;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,com.sap.tc.moin.repository.mmi.model.GeneralizableElement,com.sap.tc.moin.repository.mmi.model.ModelElement> __lookupElementExtended;
        /**
         * Returns the descriptor for the <code>lookupElementExtended</code> operation.
         * @return  the descriptor for the <code>lookupElementExtended</code> operation
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,com.sap.tc.moin.repository.mmi.model.GeneralizableElement,com.sap.tc.moin.repository.mmi.model.ModelElement> LOOKUP_ELEMENT_EXTENDED( ) {
            if ( __lookupElementExtended == null ) {
                __lookupElementExtended = new com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,com.sap.tc.moin.repository.mmi.model.GeneralizableElement,com.sap.tc.moin.repository.mmi.model.ModelElement>( "45ED2E2904550ECA7F554F3A08CDBA4EAACE323A", "sap.com/tc/moin/mof_1.4", new java.lang.String[] { "Model", "GeneralizableElement", "lookupElementExtended" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ 
            }
            return __lookupElementExtended;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,com.sap.tc.moin.repository.mmi.model.GeneralizableElement,java.util.List<com.sap.tc.moin.repository.mmi.model.ModelElement>> __findElementsByTypeExtended;
        /**
         * Returns the descriptor for the <code>findElementsByTypeExtended</code> operation.
         * @return  the descriptor for the <code>findElementsByTypeExtended</code> operation
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,com.sap.tc.moin.repository.mmi.model.GeneralizableElement,java.util.List<com.sap.tc.moin.repository.mmi.model.ModelElement>> FIND_ELEMENTS_BY_TYPE_EXTENDED( ) {
            if ( __findElementsByTypeExtended == null ) {
                __findElementsByTypeExtended = new com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,com.sap.tc.moin.repository.mmi.model.GeneralizableElement,java.util.List<com.sap.tc.moin.repository.mmi.model.ModelElement>>( "45ED2E2909D6D1FC5B304CE622B9899C6C573146", "sap.com/tc/moin/mof_1.4", new java.lang.String[] { "Model", "GeneralizableElement", "findElementsByTypeExtended" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ 
            }
            return __findElementsByTypeExtended;
        }
    }
}    