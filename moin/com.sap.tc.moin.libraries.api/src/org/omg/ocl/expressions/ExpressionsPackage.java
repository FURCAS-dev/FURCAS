/**
 * Generated by the MOIN Generator Version 3.0
 **/

package org.omg.ocl.expressions;

/**
 * The basic structure in the package consists of the classes
 * OclExpression, PropertyCallExp and VariableExp. An OclExpression always has a type, which is usually not
 * explicitly modeled, but derived. Each PropertyCallExp has exactly one source, identified by an OclExpression. In this
 * section we use the term 'property', which is a generalization of Feature, AssociationEnd and predefined iterating OCL
 * collection operations.
 * <p>
 * A ModelPropertyCallExp generalizes all propertycalls that refer to Features or associations or AssociationEnds in
 * the metamodel to which the expressions are attached. 
 * <p>
 * Most of the remainder of the expressions package consists of a specification of the different subclasses of
 * PropertyCallExp and their specific structure. From the metamodel it can be deduced that an OCL expression always starts with a variable or literal, on which a property is recusively applied
 * This interface is not intended to be implemented by clients.
 */
public interface ExpressionsPackage extends com.sap.tc.moin.repository.mmi.reflect.RefPackage
{
    /**
     * Extent descriptor
     */
    public final com.sap.tc.moin.repository.mmi.descriptors.PackageDescriptor<org.omg.ocl.expressions.ExpressionsPackage> PACKAGE_DESCRIPTOR = new com.sap.tc.moin.repository.mmi.descriptors.PackageDescriptor<org.omg.ocl.expressions.ExpressionsPackage>("45ED2E29A88CB5D07979457726DDBA8CB4E42880", "sap.com/tc/moin/mof_1.4", "OCL", "Expressions"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ 
    // classes
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getOclExpression();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getPropertyCallExp();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getLiteralExp();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getIfExp();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getVariableExp();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getModelPropertyCallExp();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getLoopExp();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getIteratorExp();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getIterateExp();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getVariableDeclaration();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getAttributeCallExp();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getNavigationCallExp();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getOperationCallExp();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getAssociationEndCallExp();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getPrimitiveLiteralExp();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getStringLiteralExp();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getNumericLiteralExp();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getBooleanLiteralExp();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getTupleLiteralExp();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getCollectionLiteralExp();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getEnumLiteralExp();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getIntegerLiteralExp();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getRealLiteralExp();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getCollectionLiteralPart();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getCollectionRange();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getCollectionItem();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getLetExp();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getTypeExp();
    public com.sap.tc.moin.repository.mmi.reflect.RefClass getOclNamedElement();
    // associations
    public org.omg.ocl.expressions.AReferredVariableVariableExp getAReferredVariableVariableExp();
    public org.omg.ocl.expressions.ALoopExprIterators getALoopExprIterators();
    public org.omg.ocl.expressions.ABaseExpResult getABaseExpResult();
    public org.omg.ocl.expressions.AAppliedPropertySource getAAppliedPropertySource();
    public org.omg.ocl.expressions.ALoopExpBody getALoopExpBody();
    public org.omg.ocl.expressions.AReferredAttributeAttributeCallExp getAReferredAttributeAttributeCallExp();
    public org.omg.ocl.expressions.AReferredAssociationEndAssociationEndCallExp getAReferredAssociationEndAssociationEndCallExp();
    public org.omg.ocl.expressions.AReferredOperationOperationCallExp getAReferredOperationOperationCallExp();
    public org.omg.ocl.expressions.AParentOperationArguments getAParentOperationArguments();
    public org.omg.ocl.expressions.ANavigationSourceNavigationCallExp getANavigationSourceNavigationCallExp();
    public org.omg.ocl.expressions.AConditionIfExp getAConditionIfExp();
    public org.omg.ocl.expressions.AThenExpressionIfExp getAThenExpressionIfExp();
    public org.omg.ocl.expressions.AElseExpressionIfExp getAElseExpressionIfExp();
    public org.omg.ocl.expressions.ATuplePartTupleLiteralExp getATuplePartTupleLiteralExp();
    public org.omg.ocl.expressions.AReferredEnumEnumLiteralExp getAReferredEnumEnumLiteralExp();
    public org.omg.ocl.expressions.APartsCollectionLiteralExp getAPartsCollectionLiteralExp();
    public org.omg.ocl.expressions.AItemCollectionItem getAItemCollectionItem();
    public org.omg.ocl.expressions.ALastCollectionRange getALastCollectionRange();
    public org.omg.ocl.expressions.AFirstCollectionRange getAFirstCollectionRange();
    public org.omg.ocl.expressions.AInLetExp getAInLetExp();
    public org.omg.ocl.expressions.AVariableLetExp getAVariableLetExp();
    public org.omg.ocl.expressions.AInitExpressionInitializedVariable getAInitExpressionInitializedVariable();
    public org.omg.ocl.expressions.ATypeCollectionLiteralPart getATypeCollectionLiteralPart();
    public org.omg.ocl.expressions.ATypeVariableDeclaration getATypeVariableDeclaration();
    public org.omg.ocl.expressions.ATypeOclExpression getATypeOclExpression();
    public org.omg.ocl.expressions.AReferredTypeTypeExp getAReferredTypeTypeExp();
}