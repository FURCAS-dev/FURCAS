/**
 * Generated by the MOIN Generator Version 3.0
 **/

package org.omg.ocl.attaching;

/**
 * A specific type of constraint that has its expression given as an OclExpression. The expression and language attribute are redefined as derived attributes, returning the concrete syntax representation of the OCL expression in the getter and parsing the concrete syntax into an OclExpression, respectively, and the language attribute always returning "OCL."
 * This interface is not intended to be implemented by clients.
 */
public interface OclConstraint extends com.sap.tc.moin.repository.mmi.model.Constraint {

    /**
     * Descriptors for all features of this MofClass and its supertypes.
     */
    public static final Descriptors DESCRIPTORS = new Descriptors( );

    // class extent descriptor
    /**
     * Extent descriptor
     */
    public final com.sap.tc.moin.repository.mmi.descriptors.ClassDescriptor<com.sap.tc.moin.repository.mmi.reflect.RefClass, org.omg.ocl.attaching.OclConstraint> CLASS_DESCRIPTOR = new com.sap.tc.moin.repository.mmi.descriptors.ClassDescriptor<com.sap.tc.moin.repository.mmi.reflect.RefClass, org.omg.ocl.attaching.OclConstraint>("45ED2E296BF3BA190A154A871BE194593FC488D2", "sap.com/tc/moin/mof_1.4", "OCL", "Attaching", "OclConstraint"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ 

    
    // references
    public org.omg.ocl.expressions.OclExpression getOclExpression() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public void setOclExpression(org.omg.ocl.expressions.OclExpression newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public java.util.Collection<com.sap.tc.moin.repository.mmi.model.Classifier> getInvariantOf() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public java.util.Collection<com.sap.tc.moin.repository.mmi.model.Operation> getPreconditionFor() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public java.util.Collection<com.sap.tc.moin.repository.mmi.model.Operation> getPostconditionFor() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public java.util.List<org.omg.ocl.expressions.OclExpression> getViolationMessageExpression() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public com.sap.tc.moin.repository.mmi.model.Attribute getInitializedAttribute() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public void setInitializedAttribute(com.sap.tc.moin.repository.mmi.model.Attribute newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public com.sap.tc.moin.repository.mmi.model.TypedElement getInitializedElement() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public void setInitializedElement(com.sap.tc.moin.repository.mmi.model.TypedElement newValue) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;


    public static final class Descriptors {
        Descriptors( ) { 
        }
        /**
         * Returns the descriptor for the <code>name</code> attribute.
         * @return  the descriptor for the <code>name</code> attribute
         */
        public com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,com.sap.tc.moin.repository.mmi.model.ModelElement,java.lang.String> NAME( ) {
            return com.sap.tc.moin.repository.mmi.model.ModelElement.DESCRIPTORS.NAME( );
        }
        /**
         * Returns the descriptor for the <code>annotation</code> attribute.
         * @return  the descriptor for the <code>annotation</code> attribute
         */
        public com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,com.sap.tc.moin.repository.mmi.model.ModelElement,java.lang.String> ANNOTATION( ) {
            return com.sap.tc.moin.repository.mmi.model.ModelElement.DESCRIPTORS.ANNOTATION( );
        }
        /**
         * Returns the descriptor for the <code>expression</code> attribute.
         * @return  the descriptor for the <code>expression</code> attribute
         */
        public com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,com.sap.tc.moin.repository.mmi.model.Constraint,java.lang.String> EXPRESSION( ) {
            return com.sap.tc.moin.repository.mmi.model.Constraint.DESCRIPTORS.EXPRESSION( );
        }
        /**
         * Returns the descriptor for the <code>language</code> attribute.
         * @return  the descriptor for the <code>language</code> attribute
         */
        public com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,com.sap.tc.moin.repository.mmi.model.Constraint,java.lang.String> LANGUAGE( ) {
            return com.sap.tc.moin.repository.mmi.model.Constraint.DESCRIPTORS.LANGUAGE( );
        }
        /**
         * Returns the descriptor for the <code>evaluationPolicy</code> attribute.
         * @return  the descriptor for the <code>evaluationPolicy</code> attribute
         */
        public com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,com.sap.tc.moin.repository.mmi.model.Constraint,com.sap.tc.moin.repository.mmi.model.EvaluationKind> EVALUATION_POLICY( ) {
            return com.sap.tc.moin.repository.mmi.model.Constraint.DESCRIPTORS.EVALUATION_POLICY( );
        }
        /**
         * Returns the descriptor for the <code>requiredElements</code> reference.
         * @return  the descriptor for the <code>requiredElements</code> reference
         */
        public com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,com.sap.tc.moin.repository.mmi.model.ModelElement,java.util.Collection<com.sap.tc.moin.repository.mmi.model.ModelElement>> REQUIRED_ELEMENTS( ) {
            return com.sap.tc.moin.repository.mmi.model.ModelElement.DESCRIPTORS.REQUIRED_ELEMENTS( );
        }
        /**
         * Returns the descriptor for the <code>container</code> reference.
         * @return  the descriptor for the <code>container</code> reference
         */
        public com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,com.sap.tc.moin.repository.mmi.model.ModelElement,com.sap.tc.moin.repository.mmi.model.Namespace> CONTAINER( ) {
            return com.sap.tc.moin.repository.mmi.model.ModelElement.DESCRIPTORS.CONTAINER( );
        }
        /**
         * Returns the descriptor for the <code>constraints</code> reference.
         * @return  the descriptor for the <code>constraints</code> reference
         */
        public com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,com.sap.tc.moin.repository.mmi.model.ModelElement,java.util.Collection<com.sap.tc.moin.repository.mmi.model.Constraint>> CONSTRAINTS( ) {
            return com.sap.tc.moin.repository.mmi.model.ModelElement.DESCRIPTORS.CONSTRAINTS( );
        }
        /**
         * Returns the descriptor for the <code>constrainedElements</code> reference.
         * @return  the descriptor for the <code>constrainedElements</code> reference
         */
        public com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,com.sap.tc.moin.repository.mmi.model.Constraint,java.util.Collection<com.sap.tc.moin.repository.mmi.model.ModelElement>> CONSTRAINED_ELEMENTS( ) {
            return com.sap.tc.moin.repository.mmi.model.Constraint.DESCRIPTORS.CONSTRAINED_ELEMENTS( );
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,org.omg.ocl.attaching.OclConstraint,org.omg.ocl.expressions.OclExpression> __oclExpression;
        /**
         * Returns the descriptor for the <code>oclExpression</code> reference.
         * @return  the descriptor for the <code>oclExpression</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,org.omg.ocl.attaching.OclConstraint,org.omg.ocl.expressions.OclExpression> OCL_EXPRESSION( ) {
            if ( __oclExpression == null ) {
                __oclExpression = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,org.omg.ocl.attaching.OclConstraint,org.omg.ocl.expressions.OclExpression>( "45ED2E297622EAA652044E34163BDAF04E691BAA", "sap.com/tc/moin/mof_1.4", new java.lang.String[] { "OCL", "Attaching", "OclConstraint", "oclExpression" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __oclExpression;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,org.omg.ocl.attaching.OclConstraint,java.util.Collection<com.sap.tc.moin.repository.mmi.model.Classifier>> __invariantOf;
        /**
         * Returns the descriptor for the <code>invariantOf</code> reference.
         * @return  the descriptor for the <code>invariantOf</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,org.omg.ocl.attaching.OclConstraint,java.util.Collection<com.sap.tc.moin.repository.mmi.model.Classifier>> INVARIANT_OF( ) {
            if ( __invariantOf == null ) {
                __invariantOf = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,org.omg.ocl.attaching.OclConstraint,java.util.Collection<com.sap.tc.moin.repository.mmi.model.Classifier>>( "45ED2E29AB65EC615A5D49030181C8777642A905", "sap.com/tc/moin/mof_1.4", new java.lang.String[] { "OCL", "Attaching", "OclConstraint", "invariantOf" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __invariantOf;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,org.omg.ocl.attaching.OclConstraint,java.util.Collection<com.sap.tc.moin.repository.mmi.model.Operation>> __preconditionFor;
        /**
         * Returns the descriptor for the <code>preconditionFor</code> reference.
         * @return  the descriptor for the <code>preconditionFor</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,org.omg.ocl.attaching.OclConstraint,java.util.Collection<com.sap.tc.moin.repository.mmi.model.Operation>> PRECONDITION_FOR( ) {
            if ( __preconditionFor == null ) {
                __preconditionFor = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,org.omg.ocl.attaching.OclConstraint,java.util.Collection<com.sap.tc.moin.repository.mmi.model.Operation>>( "45ED2E29BB143C628A1E42813BC6D5945E81AF2D", "sap.com/tc/moin/mof_1.4", new java.lang.String[] { "OCL", "Attaching", "OclConstraint", "preconditionFor" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __preconditionFor;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,org.omg.ocl.attaching.OclConstraint,java.util.Collection<com.sap.tc.moin.repository.mmi.model.Operation>> __postconditionFor;
        /**
         * Returns the descriptor for the <code>postconditionFor</code> reference.
         * @return  the descriptor for the <code>postconditionFor</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,org.omg.ocl.attaching.OclConstraint,java.util.Collection<com.sap.tc.moin.repository.mmi.model.Operation>> POSTCONDITION_FOR( ) {
            if ( __postconditionFor == null ) {
                __postconditionFor = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,org.omg.ocl.attaching.OclConstraint,java.util.Collection<com.sap.tc.moin.repository.mmi.model.Operation>>( "45ED2E290E2B83EBEC1A42A833A8B4ECFA673A61", "sap.com/tc/moin/mof_1.4", new java.lang.String[] { "OCL", "Attaching", "OclConstraint", "postconditionFor" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __postconditionFor;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,org.omg.ocl.attaching.OclConstraint,java.util.List<org.omg.ocl.expressions.OclExpression>> __violationMessageExpression;
        /**
         * Returns the descriptor for the <code>violationMessageExpression</code> reference.
         * @return  the descriptor for the <code>violationMessageExpression</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,org.omg.ocl.attaching.OclConstraint,java.util.List<org.omg.ocl.expressions.OclExpression>> VIOLATION_MESSAGE_EXPRESSION( ) {
            if ( __violationMessageExpression == null ) {
                __violationMessageExpression = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,org.omg.ocl.attaching.OclConstraint,java.util.List<org.omg.ocl.expressions.OclExpression>>( "465EBE21AA3F04900F7111DCCDC300199904B925", "sap.com/tc/moin/mof_1.4", new java.lang.String[] { "OCL", "Attaching", "OclConstraint", "violationMessageExpression" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __violationMessageExpression;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,org.omg.ocl.attaching.OclConstraint,com.sap.tc.moin.repository.mmi.model.Attribute> __initializedAttribute;
        /**
         * Returns the descriptor for the <code>initializedAttribute</code> reference.
         * @return  the descriptor for the <code>initializedAttribute</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,org.omg.ocl.attaching.OclConstraint,com.sap.tc.moin.repository.mmi.model.Attribute> INITIALIZED_ATTRIBUTE( ) {
            if ( __initializedAttribute == null ) {
                __initializedAttribute = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,org.omg.ocl.attaching.OclConstraint,com.sap.tc.moin.repository.mmi.model.Attribute>( "47CFA6A89B395BC0EB5411DCBB6C00199904B925", "sap.com/tc/moin/mof_1.4", new java.lang.String[] { "OCL", "Attaching", "OclConstraint", "initializedAttribute" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __initializedAttribute;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,org.omg.ocl.attaching.OclConstraint,com.sap.tc.moin.repository.mmi.model.TypedElement> __initializedElement;
        /**
         * Returns the descriptor for the <code>initializedElement</code> reference.
         * @return  the descriptor for the <code>initializedElement</code> reference
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,org.omg.ocl.attaching.OclConstraint,com.sap.tc.moin.repository.mmi.model.TypedElement> INITIALIZED_ELEMENT( ) {
            if ( __initializedElement == null ) {
                __initializedElement = new com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,org.omg.ocl.attaching.OclConstraint,com.sap.tc.moin.repository.mmi.model.TypedElement>( "486E16B04485CCE049C411DDC88400199904B925", "sap.com/tc/moin/mof_1.4", new java.lang.String[] { "OCL", "Attaching", "OclConstraint", "initializedElement" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __initializedElement;
        }
        /**
         * Returns the descriptor for the <code>findRequiredElements</code> operation.
         * @return  the descriptor for the <code>findRequiredElements</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,com.sap.tc.moin.repository.mmi.model.ModelElement,java.util.Collection<com.sap.tc.moin.repository.mmi.model.ModelElement>> FIND_REQUIRED_ELEMENTS( ) {
            return com.sap.tc.moin.repository.mmi.model.ModelElement.DESCRIPTORS.FIND_REQUIRED_ELEMENTS( );
        }
        /**
         * Returns the descriptor for the <code>isRequiredBecause</code> operation.
         * @return  the descriptor for the <code>isRequiredBecause</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,com.sap.tc.moin.repository.mmi.model.ModelElement,java.lang.Boolean> IS_REQUIRED_BECAUSE( ) {
            return com.sap.tc.moin.repository.mmi.model.ModelElement.DESCRIPTORS.IS_REQUIRED_BECAUSE( );
        }
        /**
         * Returns the descriptor for the <code>isFrozen</code> operation.
         * @return  the descriptor for the <code>isFrozen</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,com.sap.tc.moin.repository.mmi.model.ModelElement,java.lang.Boolean> IS_FROZEN( ) {
            return com.sap.tc.moin.repository.mmi.model.ModelElement.DESCRIPTORS.IS_FROZEN( );
        }
        /**
         * Returns the descriptor for the <code>isVisible</code> operation.
         * @return  the descriptor for the <code>isVisible</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,com.sap.tc.moin.repository.mmi.model.ModelElement,java.lang.Boolean> IS_VISIBLE( ) {
            return com.sap.tc.moin.repository.mmi.model.ModelElement.DESCRIPTORS.IS_VISIBLE( );
        }
    }
}    