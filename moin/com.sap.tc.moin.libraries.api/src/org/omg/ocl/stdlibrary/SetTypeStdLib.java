/**
 * Generated by the MOIN Generator Version 3.0
 **/

package org.omg.ocl.stdlibrary;

/**
 * This interface is not intended to be implemented by clients.
 */
public interface SetTypeStdLib extends org.omg.ocl.stdlibrary.CollectionTypeStdLib {

    /**
     * Descriptors for all features of this MofClass and its supertypes.
     */
    public static final Descriptors DESCRIPTORS = new Descriptors( );

    // class extent descriptor
    /**
     * Extent descriptor
     */
    public final com.sap.tc.moin.repository.mmi.descriptors.ClassDescriptor<com.sap.tc.moin.repository.mmi.reflect.RefClass, org.omg.ocl.stdlibrary.SetTypeStdLib> CLASS_DESCRIPTOR = new com.sap.tc.moin.repository.mmi.descriptors.ClassDescriptor<com.sap.tc.moin.repository.mmi.reflect.RefClass, org.omg.ocl.stdlibrary.SetTypeStdLib>("45ED2E2983B5E1A17ED545372F4BEB032F90AF7F", "sap.com/tc/moin/mof_1.4", "OCL", "StdLibrary", "SetTypeStdLib"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ 

    
    // operations
    public org.omg.ocl.types.CollectionType union(org.omg.ocl.types.CollectionType s) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public boolean equalsStdLib(org.omg.ocl.types.SetType s) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public org.omg.ocl.types.CollectionType intersection(org.omg.ocl.types.CollectionType s) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public org.omg.ocl.types.SetType n(org.omg.ocl.types.SetType s) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public org.omg.ocl.types.SetType including(com.sap.tc.moin.repository.mmi.model.Classifier o) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public org.omg.ocl.types.SetType excluding(com.sap.tc.moin.repository.mmi.model.Classifier o) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public org.omg.ocl.types.SetType symmetricDifference(org.omg.ocl.types.SetType s) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public org.omg.ocl.types.SetType flatten() throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
    public org.omg.ocl.types.SetType minusStdLib(org.omg.ocl.types.SetType s) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;


    public static final class Descriptors {
        Descriptors( ) { 
        }
        /**
         * Returns the descriptor for the <code>name</code> attribute.
         * @return  the descriptor for the <code>name</code> attribute
         */
        public com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,com.sap.tc.moin.repository.mmi.model.ModelElement,java.lang.String> NAME( ) {
            return com.sap.tc.moin.repository.mmi.model.ModelElement.DESCRIPTORS.NAME( );
        }
        /**
         * Returns the descriptor for the <code>annotation</code> attribute.
         * @return  the descriptor for the <code>annotation</code> attribute
         */
        public com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,com.sap.tc.moin.repository.mmi.model.ModelElement,java.lang.String> ANNOTATION( ) {
            return com.sap.tc.moin.repository.mmi.model.ModelElement.DESCRIPTORS.ANNOTATION( );
        }
        /**
         * Returns the descriptor for the <code>isRoot</code> attribute.
         * @return  the descriptor for the <code>isRoot</code> attribute
         */
        public com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,com.sap.tc.moin.repository.mmi.model.GeneralizableElement,java.lang.Boolean> IS_ROOT( ) {
            return com.sap.tc.moin.repository.mmi.model.GeneralizableElement.DESCRIPTORS.IS_ROOT( );
        }
        /**
         * Returns the descriptor for the <code>isLeaf</code> attribute.
         * @return  the descriptor for the <code>isLeaf</code> attribute
         */
        public com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,com.sap.tc.moin.repository.mmi.model.GeneralizableElement,java.lang.Boolean> IS_LEAF( ) {
            return com.sap.tc.moin.repository.mmi.model.GeneralizableElement.DESCRIPTORS.IS_LEAF( );
        }
        /**
         * Returns the descriptor for the <code>isAbstract</code> attribute.
         * @return  the descriptor for the <code>isAbstract</code> attribute
         */
        public com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,com.sap.tc.moin.repository.mmi.model.GeneralizableElement,java.lang.Boolean> IS_ABSTRACT( ) {
            return com.sap.tc.moin.repository.mmi.model.GeneralizableElement.DESCRIPTORS.IS_ABSTRACT( );
        }
        /**
         * Returns the descriptor for the <code>visibility</code> attribute.
         * @return  the descriptor for the <code>visibility</code> attribute
         */
        public com.sap.tc.moin.repository.mmi.descriptors.AttributeDescriptor<com.sap.tc.moin.repository.mmi.model.Attribute,com.sap.tc.moin.repository.mmi.model.GeneralizableElement,com.sap.tc.moin.repository.mmi.model.VisibilityKind> VISIBILITY( ) {
            return com.sap.tc.moin.repository.mmi.model.GeneralizableElement.DESCRIPTORS.VISIBILITY( );
        }
        /**
         * Returns the descriptor for the <code>requiredElements</code> reference.
         * @return  the descriptor for the <code>requiredElements</code> reference
         */
        public com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,com.sap.tc.moin.repository.mmi.model.ModelElement,java.util.Collection<com.sap.tc.moin.repository.mmi.model.ModelElement>> REQUIRED_ELEMENTS( ) {
            return com.sap.tc.moin.repository.mmi.model.ModelElement.DESCRIPTORS.REQUIRED_ELEMENTS( );
        }
        /**
         * Returns the descriptor for the <code>container</code> reference.
         * @return  the descriptor for the <code>container</code> reference
         */
        public com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,com.sap.tc.moin.repository.mmi.model.ModelElement,com.sap.tc.moin.repository.mmi.model.Namespace> CONTAINER( ) {
            return com.sap.tc.moin.repository.mmi.model.ModelElement.DESCRIPTORS.CONTAINER( );
        }
        /**
         * Returns the descriptor for the <code>constraints</code> reference.
         * @return  the descriptor for the <code>constraints</code> reference
         */
        public com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,com.sap.tc.moin.repository.mmi.model.ModelElement,java.util.Collection<com.sap.tc.moin.repository.mmi.model.Constraint>> CONSTRAINTS( ) {
            return com.sap.tc.moin.repository.mmi.model.ModelElement.DESCRIPTORS.CONSTRAINTS( );
        }
        /**
         * Returns the descriptor for the <code>contents</code> reference.
         * @return  the descriptor for the <code>contents</code> reference
         */
        public com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,com.sap.tc.moin.repository.mmi.model.Namespace,java.util.List<com.sap.tc.moin.repository.mmi.model.ModelElement>> CONTENTS( ) {
            return com.sap.tc.moin.repository.mmi.model.Namespace.DESCRIPTORS.CONTENTS( );
        }
        /**
         * Returns the descriptor for the <code>supertypes</code> reference.
         * @return  the descriptor for the <code>supertypes</code> reference
         */
        public com.sap.tc.moin.repository.mmi.descriptors.ReferenceDescriptor<com.sap.tc.moin.repository.mmi.model.Reference,com.sap.tc.moin.repository.mmi.model.GeneralizableElement,java.util.List<com.sap.tc.moin.repository.mmi.model.GeneralizableElement>> SUPERTYPES( ) {
            return com.sap.tc.moin.repository.mmi.model.GeneralizableElement.DESCRIPTORS.SUPERTYPES( );
        }
        /**
         * Returns the descriptor for the <code>findRequiredElements</code> operation.
         * @return  the descriptor for the <code>findRequiredElements</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,com.sap.tc.moin.repository.mmi.model.ModelElement,java.util.Collection<com.sap.tc.moin.repository.mmi.model.ModelElement>> FIND_REQUIRED_ELEMENTS( ) {
            return com.sap.tc.moin.repository.mmi.model.ModelElement.DESCRIPTORS.FIND_REQUIRED_ELEMENTS( );
        }
        /**
         * Returns the descriptor for the <code>isRequiredBecause</code> operation.
         * @return  the descriptor for the <code>isRequiredBecause</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,com.sap.tc.moin.repository.mmi.model.ModelElement,java.lang.Boolean> IS_REQUIRED_BECAUSE( ) {
            return com.sap.tc.moin.repository.mmi.model.ModelElement.DESCRIPTORS.IS_REQUIRED_BECAUSE( );
        }
        /**
         * Returns the descriptor for the <code>isFrozen</code> operation.
         * @return  the descriptor for the <code>isFrozen</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,com.sap.tc.moin.repository.mmi.model.ModelElement,java.lang.Boolean> IS_FROZEN( ) {
            return com.sap.tc.moin.repository.mmi.model.ModelElement.DESCRIPTORS.IS_FROZEN( );
        }
        /**
         * Returns the descriptor for the <code>isVisible</code> operation.
         * @return  the descriptor for the <code>isVisible</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,com.sap.tc.moin.repository.mmi.model.ModelElement,java.lang.Boolean> IS_VISIBLE( ) {
            return com.sap.tc.moin.repository.mmi.model.ModelElement.DESCRIPTORS.IS_VISIBLE( );
        }
        /**
         * Returns the descriptor for the <code>lookupElement</code> operation.
         * @return  the descriptor for the <code>lookupElement</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,com.sap.tc.moin.repository.mmi.model.Namespace,com.sap.tc.moin.repository.mmi.model.ModelElement> LOOKUP_ELEMENT( ) {
            return com.sap.tc.moin.repository.mmi.model.Namespace.DESCRIPTORS.LOOKUP_ELEMENT( );
        }
        /**
         * Returns the descriptor for the <code>resolveQualifiedName</code> operation.
         * @return  the descriptor for the <code>resolveQualifiedName</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,com.sap.tc.moin.repository.mmi.model.Namespace,com.sap.tc.moin.repository.mmi.model.ModelElement> RESOLVE_QUALIFIED_NAME( ) {
            return com.sap.tc.moin.repository.mmi.model.Namespace.DESCRIPTORS.RESOLVE_QUALIFIED_NAME( );
        }
        /**
         * Returns the descriptor for the <code>findElementsByType</code> operation.
         * @return  the descriptor for the <code>findElementsByType</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,com.sap.tc.moin.repository.mmi.model.Namespace,java.util.List<com.sap.tc.moin.repository.mmi.model.ModelElement>> FIND_ELEMENTS_BY_TYPE( ) {
            return com.sap.tc.moin.repository.mmi.model.Namespace.DESCRIPTORS.FIND_ELEMENTS_BY_TYPE( );
        }
        /**
         * Returns the descriptor for the <code>nameIsValid</code> operation.
         * @return  the descriptor for the <code>nameIsValid</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,com.sap.tc.moin.repository.mmi.model.Namespace,java.lang.Boolean> NAME_IS_VALID( ) {
            return com.sap.tc.moin.repository.mmi.model.Namespace.DESCRIPTORS.NAME_IS_VALID( );
        }
        /**
         * Returns the descriptor for the <code>allSupertypes</code> operation.
         * @return  the descriptor for the <code>allSupertypes</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,com.sap.tc.moin.repository.mmi.model.GeneralizableElement,java.util.List<com.sap.tc.moin.repository.mmi.model.GeneralizableElement>> ALL_SUPERTYPES( ) {
            return com.sap.tc.moin.repository.mmi.model.GeneralizableElement.DESCRIPTORS.ALL_SUPERTYPES( );
        }
        /**
         * Returns the descriptor for the <code>lookupElementExtended</code> operation.
         * @return  the descriptor for the <code>lookupElementExtended</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,com.sap.tc.moin.repository.mmi.model.GeneralizableElement,com.sap.tc.moin.repository.mmi.model.ModelElement> LOOKUP_ELEMENT_EXTENDED( ) {
            return com.sap.tc.moin.repository.mmi.model.GeneralizableElement.DESCRIPTORS.LOOKUP_ELEMENT_EXTENDED( );
        }
        /**
         * Returns the descriptor for the <code>findElementsByTypeExtended</code> operation.
         * @return  the descriptor for the <code>findElementsByTypeExtended</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,com.sap.tc.moin.repository.mmi.model.GeneralizableElement,java.util.List<com.sap.tc.moin.repository.mmi.model.ModelElement>> FIND_ELEMENTS_BY_TYPE_EXTENDED( ) {
            return com.sap.tc.moin.repository.mmi.model.GeneralizableElement.DESCRIPTORS.FIND_ELEMENTS_BY_TYPE_EXTENDED( );
        }
        /**
         * Returns the descriptor for the <code>size</code> operation.
         * @return  the descriptor for the <code>size</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,org.omg.ocl.stdlibrary.CollectionTypeStdLib,java.lang.Integer> SIZE( ) {
            return org.omg.ocl.stdlibrary.CollectionTypeStdLib.DESCRIPTORS.SIZE( );
        }
        /**
         * Returns the descriptor for the <code>includes</code> operation.
         * @return  the descriptor for the <code>includes</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,org.omg.ocl.stdlibrary.CollectionTypeStdLib,java.lang.Boolean> INCLUDES( ) {
            return org.omg.ocl.stdlibrary.CollectionTypeStdLib.DESCRIPTORS.INCLUDES( );
        }
        /**
         * Returns the descriptor for the <code>excludes</code> operation.
         * @return  the descriptor for the <code>excludes</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,org.omg.ocl.stdlibrary.CollectionTypeStdLib,java.lang.Boolean> EXCLUDES( ) {
            return org.omg.ocl.stdlibrary.CollectionTypeStdLib.DESCRIPTORS.EXCLUDES( );
        }
        /**
         * Returns the descriptor for the <code>count</code> operation.
         * @return  the descriptor for the <code>count</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,org.omg.ocl.stdlibrary.CollectionTypeStdLib,java.lang.Integer> COUNT( ) {
            return org.omg.ocl.stdlibrary.CollectionTypeStdLib.DESCRIPTORS.COUNT( );
        }
        /**
         * Returns the descriptor for the <code>includesAll</code> operation.
         * @return  the descriptor for the <code>includesAll</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,org.omg.ocl.stdlibrary.CollectionTypeStdLib,java.lang.Boolean> INCLUDES_ALL( ) {
            return org.omg.ocl.stdlibrary.CollectionTypeStdLib.DESCRIPTORS.INCLUDES_ALL( );
        }
        /**
         * Returns the descriptor for the <code>excludesAll</code> operation.
         * @return  the descriptor for the <code>excludesAll</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,org.omg.ocl.stdlibrary.CollectionTypeStdLib,java.lang.Boolean> EXCLUDES_ALL( ) {
            return org.omg.ocl.stdlibrary.CollectionTypeStdLib.DESCRIPTORS.EXCLUDES_ALL( );
        }
        /**
         * Returns the descriptor for the <code>isEmpty</code> operation.
         * @return  the descriptor for the <code>isEmpty</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,org.omg.ocl.stdlibrary.CollectionTypeStdLib,java.lang.Boolean> IS_EMPTY( ) {
            return org.omg.ocl.stdlibrary.CollectionTypeStdLib.DESCRIPTORS.IS_EMPTY( );
        }
        /**
         * Returns the descriptor for the <code>notEmpty</code> operation.
         * @return  the descriptor for the <code>notEmpty</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,org.omg.ocl.stdlibrary.CollectionTypeStdLib,java.lang.Boolean> NOT_EMPTY( ) {
            return org.omg.ocl.stdlibrary.CollectionTypeStdLib.DESCRIPTORS.NOT_EMPTY( );
        }
        /**
         * Returns the descriptor for the <code>sum</code> operation.
         * @return  the descriptor for the <code>sum</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,org.omg.ocl.stdlibrary.CollectionTypeStdLib,com.sap.tc.moin.repository.mmi.model.Classifier> SUM( ) {
            return org.omg.ocl.stdlibrary.CollectionTypeStdLib.DESCRIPTORS.SUM( );
        }
        /**
         * Returns the descriptor for the <code>product</code> operation.
         * @return  the descriptor for the <code>product</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,org.omg.ocl.stdlibrary.CollectionTypeStdLib,org.omg.ocl.types.SetType> PRODUCT( ) {
            return org.omg.ocl.stdlibrary.CollectionTypeStdLib.DESCRIPTORS.PRODUCT( );
        }
        /**
         * Returns the descriptor for the <code>asSet</code> operation.
         * @return  the descriptor for the <code>asSet</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,org.omg.ocl.stdlibrary.CollectionTypeStdLib,org.omg.ocl.types.SetType> AS_SET( ) {
            return org.omg.ocl.stdlibrary.CollectionTypeStdLib.DESCRIPTORS.AS_SET( );
        }
        /**
         * Returns the descriptor for the <code>asBag</code> operation.
         * @return  the descriptor for the <code>asBag</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,org.omg.ocl.stdlibrary.CollectionTypeStdLib,org.omg.ocl.types.BagType> AS_BAG( ) {
            return org.omg.ocl.stdlibrary.CollectionTypeStdLib.DESCRIPTORS.AS_BAG( );
        }
        /**
         * Returns the descriptor for the <code>asOrderedSet</code> operation.
         * @return  the descriptor for the <code>asOrderedSet</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,org.omg.ocl.stdlibrary.CollectionTypeStdLib,org.omg.ocl.types.OrderedSetType> AS_ORDERED_SET( ) {
            return org.omg.ocl.stdlibrary.CollectionTypeStdLib.DESCRIPTORS.AS_ORDERED_SET( );
        }
        /**
         * Returns the descriptor for the <code>asSequence</code> operation.
         * @return  the descriptor for the <code>asSequence</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,org.omg.ocl.stdlibrary.CollectionTypeStdLib,org.omg.ocl.types.SequenceType> AS_SEQUENCE( ) {
            return org.omg.ocl.stdlibrary.CollectionTypeStdLib.DESCRIPTORS.AS_SEQUENCE( );
        }
        /**
         * Returns the descriptor for the <code>oclIsUndefined</code> operation.
         * @return  the descriptor for the <code>oclIsUndefined</code> operation
         */
        public com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,org.omg.ocl.stdlibrary.CollectionTypeStdLib,java.lang.Boolean> OCL_IS_UNDEFINED( ) {
            return org.omg.ocl.stdlibrary.CollectionTypeStdLib.DESCRIPTORS.OCL_IS_UNDEFINED( );
        }
        private com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,org.omg.ocl.stdlibrary.SetTypeStdLib,org.omg.ocl.types.CollectionType> __union;
        /**
         * Returns the descriptor for the <code>union</code> operation.
         * @return  the descriptor for the <code>union</code> operation
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,org.omg.ocl.stdlibrary.SetTypeStdLib,org.omg.ocl.types.CollectionType> UNION( ) {
            if ( __union == null ) {
                __union = new com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,org.omg.ocl.stdlibrary.SetTypeStdLib,org.omg.ocl.types.CollectionType>( "45ED2E29C741EA48210243D529DBF18C07BD870A", "sap.com/tc/moin/mof_1.4", new java.lang.String[] { "OCL", "StdLibrary", "SetTypeStdLib", "union" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __union;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,org.omg.ocl.stdlibrary.SetTypeStdLib,java.lang.Boolean> __equalsStdLib;
        /**
         * Returns the descriptor for the <code>equalsStdLib</code> operation.
         * @return  the descriptor for the <code>equalsStdLib</code> operation
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,org.omg.ocl.stdlibrary.SetTypeStdLib,java.lang.Boolean> EQUALS_STD_LIB( ) {
            if ( __equalsStdLib == null ) {
                __equalsStdLib = new com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,org.omg.ocl.stdlibrary.SetTypeStdLib,java.lang.Boolean>( "45ED2E290EB2C4D68BBA460C02CAF952AA2E420C", "sap.com/tc/moin/mof_1.4", new java.lang.String[] { "OCL", "StdLibrary", "SetTypeStdLib", "equalsStdLib" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __equalsStdLib;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,org.omg.ocl.stdlibrary.SetTypeStdLib,org.omg.ocl.types.CollectionType> __intersection;
        /**
         * Returns the descriptor for the <code>intersection</code> operation.
         * @return  the descriptor for the <code>intersection</code> operation
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,org.omg.ocl.stdlibrary.SetTypeStdLib,org.omg.ocl.types.CollectionType> INTERSECTION( ) {
            if ( __intersection == null ) {
                __intersection = new com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,org.omg.ocl.stdlibrary.SetTypeStdLib,org.omg.ocl.types.CollectionType>( "45ED2E291A9C202CE5F74A78383FFBCDD4676BBB", "sap.com/tc/moin/mof_1.4", new java.lang.String[] { "OCL", "StdLibrary", "SetTypeStdLib", "intersection" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __intersection;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,org.omg.ocl.stdlibrary.SetTypeStdLib,org.omg.ocl.types.SetType> __n;
        /**
         * Returns the descriptor for the <code>n</code> operation.
         * @return  the descriptor for the <code>n</code> operation
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,org.omg.ocl.stdlibrary.SetTypeStdLib,org.omg.ocl.types.SetType> N( ) {
            if ( __n == null ) {
                __n = new com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,org.omg.ocl.stdlibrary.SetTypeStdLib,org.omg.ocl.types.SetType>( "45ED2E293F4B7B2CBD3B4008329ADA3E048B51E1", "sap.com/tc/moin/mof_1.4", new java.lang.String[] { "OCL", "StdLibrary", "SetTypeStdLib", "n" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __n;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,org.omg.ocl.stdlibrary.SetTypeStdLib,org.omg.ocl.types.SetType> __including;
        /**
         * Returns the descriptor for the <code>including</code> operation.
         * @return  the descriptor for the <code>including</code> operation
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,org.omg.ocl.stdlibrary.SetTypeStdLib,org.omg.ocl.types.SetType> INCLUDING( ) {
            if ( __including == null ) {
                __including = new com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,org.omg.ocl.stdlibrary.SetTypeStdLib,org.omg.ocl.types.SetType>( "45ED2E29B1B789DC984B4F7E03DDE4C7DEB83BC0", "sap.com/tc/moin/mof_1.4", new java.lang.String[] { "OCL", "StdLibrary", "SetTypeStdLib", "including" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __including;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,org.omg.ocl.stdlibrary.SetTypeStdLib,org.omg.ocl.types.SetType> __excluding;
        /**
         * Returns the descriptor for the <code>excluding</code> operation.
         * @return  the descriptor for the <code>excluding</code> operation
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,org.omg.ocl.stdlibrary.SetTypeStdLib,org.omg.ocl.types.SetType> EXCLUDING( ) {
            if ( __excluding == null ) {
                __excluding = new com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,org.omg.ocl.stdlibrary.SetTypeStdLib,org.omg.ocl.types.SetType>( "45ED2E29E5F95AFC55874DEB0C6CC625D8BFCBA0", "sap.com/tc/moin/mof_1.4", new java.lang.String[] { "OCL", "StdLibrary", "SetTypeStdLib", "excluding" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __excluding;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,org.omg.ocl.stdlibrary.SetTypeStdLib,org.omg.ocl.types.SetType> __symmetricDifference;
        /**
         * Returns the descriptor for the <code>symmetricDifference</code> operation.
         * @return  the descriptor for the <code>symmetricDifference</code> operation
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,org.omg.ocl.stdlibrary.SetTypeStdLib,org.omg.ocl.types.SetType> SYMMETRIC_DIFFERENCE( ) {
            if ( __symmetricDifference == null ) {
                __symmetricDifference = new com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,org.omg.ocl.stdlibrary.SetTypeStdLib,org.omg.ocl.types.SetType>( "45ED2E2989DE9A04D374483B1D3EFC587BFD3F13", "sap.com/tc/moin/mof_1.4", new java.lang.String[] { "OCL", "StdLibrary", "SetTypeStdLib", "symmetricDifference" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __symmetricDifference;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,org.omg.ocl.stdlibrary.SetTypeStdLib,org.omg.ocl.types.SetType> __flatten;
        /**
         * Returns the descriptor for the <code>flatten</code> operation.
         * @return  the descriptor for the <code>flatten</code> operation
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,org.omg.ocl.stdlibrary.SetTypeStdLib,org.omg.ocl.types.SetType> FLATTEN( ) {
            if ( __flatten == null ) {
                __flatten = new com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,org.omg.ocl.stdlibrary.SetTypeStdLib,org.omg.ocl.types.SetType>( "45ED2E29EF9B6404CA7F40591D2CACE6AFC53BA2", "sap.com/tc/moin/mof_1.4", new java.lang.String[] { "OCL", "StdLibrary", "SetTypeStdLib", "flatten" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __flatten;
        }
        private com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,org.omg.ocl.stdlibrary.SetTypeStdLib,org.omg.ocl.types.SetType> __minusStdLib;
        /**
         * Returns the descriptor for the <code>minusStdLib</code> operation.
         * @return  the descriptor for the <code>minusStdLib</code> operation
         */
        public synchronized com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,org.omg.ocl.stdlibrary.SetTypeStdLib,org.omg.ocl.types.SetType> MINUS_STD_LIB( ) {
            if ( __minusStdLib == null ) {
                __minusStdLib = new com.sap.tc.moin.repository.mmi.descriptors.OperationDescriptor<com.sap.tc.moin.repository.mmi.model.Operation,org.omg.ocl.stdlibrary.SetTypeStdLib,org.omg.ocl.types.SetType>( "45ED2E29400CA67DC13A424D350AE6D2826BAE16", "sap.com/tc/moin/mof_1.4", new java.lang.String[] { "OCL", "StdLibrary", "SetTypeStdLib", "minusStdLib" } ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ 
            }
            return __minusStdLib;
        }
    }
}    