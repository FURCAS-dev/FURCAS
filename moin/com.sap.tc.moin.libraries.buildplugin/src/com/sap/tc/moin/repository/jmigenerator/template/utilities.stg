group utilities;

javaHeader(template) ::= <<
$template.Preamble$
package $template.PackageName$;
>>

javaDoc(template) ::= <<
$if (template.javadoc)$
/**
$template.javadoc.Description:javaDocLine(); separator="\n"$
$if (template.Interface)$
 * This interface is not intended to be implemented by clients.$\n$
$endif$
 */
$else$
$if (template.Interface)$
/**
 * This interface is not intended to be implemented by clients.
 */
$endif$
$endif$
>>

javaDocLine(line) ::= <<
$! empty lines end with <p> !$
 * $if (!line.empty)$$line$$else$<p>$endif$
>>

/**
 * @param op com.sap.tc.moin.repository.jmigenerator.template.JmiGeneratorClassOperation
 */
operationInterface(op) ::= <<
$op:javaDoc()$
$operationInterfaceInternal(op)$
>>

/**
 * @param op com.sap.tc.moin.repository.jmigenerator.template.JmiGeneratorClassOperation
 */
operationInterfaceInternal(op) ::= <<
$op.Visibility$ $op.Type$$if (op.TypeParameter)$<$op.TypeParameter$>$endif$ $op.AccessorName$($if (op.Parameters)$$op.Parameters:param(); separator=", "$$else$$endif$)$if (op.Exceptions)$ throws $op.Exceptions; separator=", "$$else$$endif$;
>>

/**
 * @param op com.sap.tc.moin.repository.jmigenerator.template.JmiGeneratorClassOperation
 */
operationHeader(op) ::= <<
$op.Visibility$ $op.Type$$if (op.TypeParameter)$<$op.TypeParameter$>$endif$ $op.AccessorName$($if (op.Parameters)$$op.Parameters:param(); separator=", "$$else$$endif$)$if (op.Exceptions)$ throws $op.Exceptions; separator=", "$$else$$endif$
>>

/**
 * @param op com.sap.tc.moin.repository.jmigenerator.template.JmiGeneratorClassOperation
 */
operationImpl(op) ::= <<
$operationHeader(op)$
{
    $op.Body:body(); separator="\n"$
}
>>

featureId(template) ::= <<
$if (template.FeatureIds)$    
public static final java.util.Map<java.lang.String, java.lang.Integer> FEATURE_IDS;$\n$
$endif$
$if (template.OperationIds)$    
private static final java.util.Map<java.lang.String, java.lang.Integer> OPERATION_IDS;$\n$
$endif$

static {
$if (template.FeatureIds)$    
    FEATURE_IDS = new java.util.HashMap<java.lang.String, java.lang.Integer>($template.FeatureIdsMapCapacity$);
    $template.FeatureIds:feature(); separator="\n"$$\n$
$endif$
$if (template.OperationIds)$    
    OPERATION_IDS = new java.util.HashMap<java.lang.String, java.lang.Integer>($template.OperationIdsMapCapacity$);
    $template.OperationIds:operation(); separator="\n"$$\n$
$endif$
}
>>

feature(f) ::= <<
FEATURE_IDS.put("$f$", Integer.valueOf($i0$)); $nonnls1()$
>>

operation(op) ::= <<
OPERATION_IDS.put("$op$", Integer.valueOf($i0$)); $nonnls1()$
>>

constant(constant) ::= <<
$constant:javaDoc()$
$constant.Visibility$ final $constant.Type$ $constant.Name$ = $constant.Value$;$if (constant.String)$ //\$NON-NLS-1\$$endif$
>>

attributeDecl(att) ::= <<
private $att.Type$$if (att.TypeParameter)$<$att.TypeParameter$>$endif$ $att.Name$$if(att.Value)$ = $att.Value$$endif$;
>>

featureGetValue(feature) ::= <<
case $feature.FeatureIndex$: 
    result = $feature.AccessorName$($if (!feature.SingleValuedNonObjectTyped)$connection$endif$);
    break;
>>

featureSetValueInternal(feature) ::= <<
$if (!feature.Reference)$
case $feature.FeatureIndex$:
$if (feature.ObjectTyped)$
    $feature.MutatorNameInternal$(session, value);     
$else$
    $feature.MutatorNameInternal$(($feature.JavaType$$if (feature.JavaTypeParameter)$<$feature.JavaTypeParameter$>$endif$) value);     
$endif$

    break;
$endif$
>>

featureAddOrSetValueInternal(feature) ::= <<
$if (!feature.Reference)$
case $feature.FeatureIndex$:
$if (feature.ObjectTyped)$
$if (feature.Multiple)$
    $feature.MutatorNameInternal$SingleValue(session, value);     
$else$
    $feature.MutatorNameInternal$(session, value);     
$endif$    
$else$
$if (feature.Multiple)$
    $feature.MutatorNameInternal$SingleValue(($feature.JavaTypeParameter$) value);     
$else$
    $feature.MutatorNameInternal$(($feature.JavaType$$if (feature.JavaTypeParameter)$<$feature.JavaTypeParameter$>$endif$) value);     
$endif$
$endif$

    break;
$endif$
>>

/**
 * @param template com.sap.tc.moin.repository.jmigenerator.template.JmiGeneratorTypedElementInitialization
 */
typedElementInitialize(typedElement) ::= <<
$typedElement.InitializationCode$;
>>

javaInterfaceHeader(template) ::= <<
public interface $template.JavaName$$if (template.Extends)$ extends $template.Extends; separator=","$$endif$
>>

javaPublicClassHeader(template) ::= <<
public class $template.JavaName$$if (template.Extends)$ extends $template.Extends; separator=","$$endif$$if (template.Implements)$ implements $template.Implements; separator=","$$endif$
>>

javaPublicFinalClassHeader(template) ::= <<
$if (!template.NeedsNonFinal)$public final class $template.JavaName$$if (template.Extends)$ extends $template.Extends; separator=","$$endif$$if (template.Implements)$ implements $template.Implements; separator=","$$endif$$else$$javaPublicClassHeader(template)$$endif$
>>

/**
 * @param op com.sap.tc.moin.repository.jmigenerator.template.JmiGeneratorClassOperation
 */
creatorForStructInterface(op) ::= <<
$op:javaDoc()$
public $op.Type$ $op.AccessorName$($if (op.HasCoreConnection)$com.sap.tc.moin.repository.core.CoreConnection connection, $else$$endif$com.sap.tc.moin.repository.mmi.descriptors.StructureFieldContainer<? super $op.Type$> structureFieldContainer) throws com.sap.tc.moin.repository.mmi.reflect.JmiException;
>>

/**
 * @param op com.sap.tc.moin.repository.jmigenerator.template.JmiGeneratorClassOperation
 */
creatorForStructImpl(op) ::= <<
public $op.Type$ $op.AccessorName$($if (op.HasCoreConnection)$com.sap.tc.moin.repository.core.CoreConnection connection, $else$$endif$com.sap.tc.moin.repository.mmi.descriptors.StructureFieldContainer<? super $op.Type$> structureFieldContainer) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
{
    $op.TypeTemplate.PackageName$.$op.TypeTemplate.JavaName$ result = new $op.TypeTemplate.PackageName$.$op.TypeTemplate.JavaName$($coreConnection(op)$.getSession().getWorkspace(), (com.sap.tc.moin.repository.mmi.model.ModelElement) get___MetamodelElement("$op.StructureTypeMofId$")); $nonnls1()$
    result.initialize___Values($coreConnection(op)$);
    $if (op.TypeTemplate.TranslatableText)$
    result.set___Value($op.Type$.DESCRIPTORS.TRANS_UNIT_ID().getName(), com.sap.tc.moin.repository.core.jmi.util.MoinMetamodelCode.createGUID());
    $endif$
    if (structureFieldContainer != null) {
        java.util.Map<?, Object> fields = structureFieldContainer.getFields();
        for (java.util.Map.Entry<?, Object> field : fields.entrySet()) {
            java.lang.String fieldName = ((com.sap.tc.moin.repository.mmi.descriptors.StructureFieldDescriptor<?, ? super $op.Type$, ?>)field.getKey()).getName();
            if ($op.TypeTemplate.PackageName$.$op.TypeTemplate.JavaName$.FEATURE_IDS.containsKey(fieldName)) {
                result.set___Value(fieldName, field.getValue());
            }
        }
    }
    return result;
}
>>

jmiInterface(template) ::= <<
@SuppressWarnings("unchecked")
public java.lang.Class<$template.Interface.PackageName$.$template.Interface.JavaName$> get___JmiInterface() {
    return $template.Interface.PackageName$.$template.Interface.JavaName$.class;
}
>>

createRefEnum(template) ::= <<
$if (template.Enums)$
public com.sap.tc.moin.repository.mmi.reflect.RefEnum create___RefEnum(com.sap.tc.moin.repository.mmi.model.EnumerationType enumType, String name) {
    com.sap.tc.moin.repository.mmi.reflect.RefEnum result = null;
    java.lang.String enumName = enumType.getName();
    $first(template.Enums):createRefEnumLine()$
    $rest(template.Enums):createMoreRefEnumLines(); separator="\n"$
    return result;
}
$endif$
>>

createRefEnumLine(enum) ::= <<
  if (enumName.equals("$enum.Name$")) { $nonnls1()$
    result = $enum.Type$.forName(name);
  }
>>

createRefStruct(template) ::= <<
$if (template.Structs)$
public com.sap.tc.moin.repository.mmi.reflect.RefStruct create___RefStruct(Object workspace, com.sap.tc.moin.repository.mmi.model.StructureType structType) {
    com.sap.tc.moin.repository.mmi.reflect.RefStruct result = null;
    String structName = structType.getName();
    try {
        $first(template.Structs):createStructLine()$
        $rest(template.Structs):createMoreStructLines(); separator="\n"$
    return result;
    }
    catch(java.lang.Exception ex) {
       throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
    }
}
$endif$
>>

createMoreRefEnumLines(enum) ::= <<
  else if (enumName.equals("$enum.Name$")) { $nonnls1()$
    result = $enum.Type$.forName(name);
  }
>>

createStructLine(struc) ::= <<
    if (structName.equals("$struc.Name$")) { $nonnls1()$
      result = new $struc.Type$(workspace, structType);
    }
>>

createMoreStructLines(struc) ::= <<
    else if (structName.equals("$struc.Name$")) { $nonnls1()$
      result = new $struc.Type$(workspace, structType);
    }
>>

/*************************  referenced internally *************************/

param(par) ::= <<
$par.Type$$if (par.TypeParameter)$<? extends $par.TypeParameter$>$endif$$if (par.Array)$[]$endif$ $par.Name$
>>

body(bod) ::=<<
$bod$
>>

strucTypeSetters(proxy) ::= <<
$proxy.Features: strucTypeSetter()$
>>

strucTypeSetter(feature) ::= <<
$! $if (feature.Changeable)$ !$
result.$feature.MutatorNameInternal$($feature.JmiName$);
$! $endif$ !$
>>

/******************** wrapper stuff ************************/

operationForDelegationWithStructureFieldContainer(op) ::= <<
$if (op.Multiple)$
$if (!op.Setter)$
$operationDelegationWithStructureFieldContainer(op)$
$endif$
$else$
$operationDelegationWithStructureFieldContainer(op)$
$endif$
>>

operationForDelegation(op) ::= <<
$if (op.Multiple)$
$if (!op.Setter)$
$operationDelegation(op)$
$endif$
$else$
$operationDelegation(op)$
$endif$
>>

operationDelegationWithStructureFieldContainer(op) ::= <<
$if (!op.HasCoreConnection)$
public $op.Type$ $op.AccessorName$(com.sap.tc.moin.repository.mmi.descriptors.StructureFieldContainer<? super $op.Type$> structureFieldContainer) throws com.sap.tc.moin.repository.mmi.reflect.JmiException
{
    try {
        if (synchronize) {
            synchronizationManager.acquireReadLock();
            try {
                assertConnectionAlive();
                attachConnectionIfRequired();
                return wrapResult(getCastWrappedObject().$op.AccessorName$(connection, structureFieldContainer));
            } finally {
                synchronizationManager.releaseReadLock();
            }
        }
        assertConnectionAlive();
        attachConnectionIfRequired();
        return wrapResult(getCastWrappedObject().$op.AccessorName$(connection, structureFieldContainer));
    } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
        wrapJmiExceptionArgs(ex);
        throw ex;
    }
}
$endif$
>>

operationDelegation(op) ::= <<
$if (!op.HasCoreConnection)$
$operationHeader(op)$
{
$if (op.NoSyncIfResolved)$
    com.sap.tc.moin.repository.core.CorePartitionable resolved = mriReference.getIfResolved();
    if (resolved != null) {
        return getCastWrappedObject(resolved).$op.AccessorName$();
    }
    
$endif$
    try {
        if (synchronize) {
$if(op.Setter)$
            synchronized (synchronizationManager.getProhibitWriteSyncObject()) {
                assertConnectionAlive();
                attachConnectionIfRequired();
$if(op.Void)$                $else$                return $if(op.WrapResult)$$if (template.BelongsToMof)$$else$$if (op.Type)$($op.Type$$if (op.TypeParameter)$<$op.TypeParameter$>$endif$)$endif$$endif$ wrapResult($endif$$endif$getCastWrappedObject().$op.AccessorName$($if (op.Parameters)$connection, $op.Parameters:parameterUnwrap(); separator=", "$$else$connection$endif$)$if(op.Void)$$else$$if(op.WrapResult)$)$endif$$endif$;
            }       
$else$
            synchronizationManager.acquireReadLock();
            try {
                assertConnectionAlive();
                attachConnectionIfRequired();
$if(op.Void)$                $else$                return $if(op.WrapResult)$$if (template.BelongsToMof)$$else$$if (op.Type)$($op.Type$$if (op.TypeParameter)$<$op.TypeParameter$>$endif$)$endif$$endif$ wrapResult($endif$$endif$getCastWrappedObject().$op.AccessorName$($if (op.Parameters)$$if(op.NeedsToPassCoreConnectionInWrapper)$connection, $endif$$op.Parameters:parameterUnwrap(); separator=", "$$else$$if(op.NeedsToPassCoreConnectionInWrapper)$connection$endif$$endif$)$if(op.Void)$$else$$if(op.WrapResult)$)$endif$$endif$;
            } finally {
                synchronizationManager.releaseReadLock();
            }
   
$endif$

        }
$if(op.Void)$
        else {
            assertConnectionAlive();
            attachConnectionIfRequired();
            getCastWrappedObject().$op.AccessorName$($if (op.Parameters)$connection, $op.Parameters:parameterUnwrap(); separator=", "$$else$connection$endif$);
        }
$else$
        assertConnectionAlive();
        attachConnectionIfRequired();
        return $if(op.WrapResult)$$if (template.BelongsToMof)$$else$$if (op.Type)$($op.Type$$if (op.TypeParameter)$<$op.TypeParameter$>$endif$)$endif$$endif$ wrapResult($endif$getCastWrappedObject().$op.AccessorName$($if (op.Parameters)$$if(op.NeedsToPassCoreConnectionInWrapper)$connection, $endif$$op.Parameters:parameterUnwrap(); separator=", "$$else$$if(op.NeedsToPassCoreConnectionInWrapper)$connection$endif$$endif$)$if(op.WrapResult)$)$endif$;
$endif$ 
    } catch (com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
        wrapJmiExceptionArgs(ex);
        throw ex;
    }
}
$endif$
>>

parameterUnwrap(par) ::= <<
$if (par.NeedsToBeUnwrapped)$
unwrapArg($if (template.BelongsToMof)$$par.name$$else$($if (par.PartitionParameter)$com.sap.tc.moin.repository.ModelPartition$else$$if (par.Multiple)$$par.Type$$else$com.sap.tc.moin.repository.mmi.reflect.RefBaseObject$endif$$endif$) $par.Name$$endif$)
$else$
$par.Name$
$endif$
>>

coreConnection(op) ::= <<
$if (op.HasCoreConnection)$connection$else$get___CurrentConnection()$endif$
>>

nonnls1() ::= <<
//\$NON-NLS-1\$
>>

nonnls2() ::= <<
//\$NON-NLS-1\$ //\$NON-NLS-2\$
>>

nonnlsdyn(constant) ::= <<
//\$NON-NLS-$i$\$
>>

