group package:utilities;

/***************************** The Package Interface ************************/

/**
 * @param template com.sap.tc.moin.repository.jmigenerator.template.JmiGeneratorPackageInterfaceTemplate
 */
PackageInterface(template) ::= <<
$template:javaHeader()$$\n$
$template:javaDoc()$
$javaInterfaceHeader(template)$
{
$if (template.PackageExtentDescriptorConstant)$
    $template.PackageExtentDescriptorConstant:constant()$ $template.PackageExtentDescriptorConstant.components:nonnlsdyn(); separator = " "$ $\n$
$endif$
$if (template.Constants)$
    // constants
    $template.Constants:constant(); separator="\n"$$\n$
$endif$
$if (template.RefPackages)$
    // packages
    $template.RefPackages:getRefPackage(); separator="\n"$$\n$
$endif$
$if (template.RefClasses)$
    // classes
    $template.RefClasses:getRefPackage(); separator="\n"$$\n$
$endif$
$if (template.RefAssociations)$
    // associations
    $template.RefAssociations:getRefPackage(); separator="\n"$$\n$
$endif$
$if (template.StructureTypes)$
    // structure type creators
    $template.StructureTypes:creatorForStructInterface(); separator="\n"$$\n$
$endif$
}
>>

/***************************** The internal Package Interface ************************/

/**
 * @param template com.sap.tc.moin.repository.jmigenerator.template.impl.JmiGeneratorPackageInterfaceInternalTemplateImpl
 */
PackageInterfaceInternal(template) ::= <<
$template:javaHeader()$

$javaInterfaceHeader(template)$
{
$if (template.RefPackages)$
    // packages
    $template.RefPackages:getRefPackageInternal(); separator="\n"$$\n$
$endif$
$if (template.RefClasses)$
    // classes
    $template.RefClasses:getRefPackageInternal(); separator="\n"$$\n$
$endif$
$if (template.RefAssociations)$
    // associations
    $template.RefAssociations:getRefPackageInternal(); separator="\n"$$\n$
$endif$
$if (template.StructureTypes)$
    // structure type creators
    $template.StructureTypes:creatorForStructInterface(); separator="\n"$$\n$
$endif$
}
>>

/***************************** The Package Implementation ************************/

/**
 * @param template com.sap.tc.moin.repository.jmigenerator.template.JmiGeneratorPackageImplTemplate
 */
PackageClass(template) ::= <<
$template:javaHeader()$

$javaPublicFinalClassHeader(template)$
{
    $featureId(template)$

    // constructors    
    public $template.JavaName$()
    {
        super();
    }
    public $template.JavaName$(java.lang.Object workspace, java.lang.String mofId, com.sap.tc.moin.repository.mmi.reflect.RefPackage immediatePackage, com.sap.tc.moin.repository.mmi.reflect.RefObject metaObject)
    {
        super(workspace, mofId, immediatePackage, metaObject);
    }
    // internal enumeration creators
    $createRefEnum(template)$
    // internal structure type creators
    $createRefStruct(template)$
    // nested packages
    $template.RefPackages:getRefPackageImpl(); separator="\n"$
    // classes
    $template.RefClasses:getRefClassImpl(); separator="\n"$
    // associations
    $template.RefAssociations:getRefAssocImpl(); separator="\n"$
    // structure type creators
    $template.StructureTypes:creatorForStructImpl(); separator="\n"$

    protected java.lang.Object create___Extent(java.lang.Object workspace, java.lang.String mofId, com.sap.tc.moin.repository.mmi.reflect.RefPackage immediatePackage, com.sap.tc.moin.repository.mmi.reflect.RefObject metaObject) {
        java.lang.String name = ((com.sap.tc.moin.repository.mmi.model.ModelElement) metaObject).getName();
$if (template.FeatureIds)$
        com.sap.tc.moin.repository.mmi.reflect.RefBaseObject result = null;
        try {
            switch (FEATURE_IDS.get(name)) {
                $template.Features:extent(); separator="\n"$
                default:
                    throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException(name, null, "create___Extent()"); $nonnls1()$
        }
$if(!template.Features)$
        return null;
$endif$
        }
        catch(com.sap.tc.moin.repository.mmi.reflect.JmiException ex) {
            throw ex;
        }
        catch(java.lang.Exception ex) {
            throw new com.sap.tc.moin.repository.mmi.reflect.JmiException(ex);
        }
$else$
        throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException(name, null, "create___Extent()"); $nonnls1()$
$endif$        
    }

    $jmiInterface(template)$
    
    protected void initialize() {
        if (___refPackages == null) {
            ___refPackages = new java.util.ArrayList<RefPackageAndName>($length(template.RefPackages)$);
            ___refPackagesByName = new java.util.HashMap<String, RefPackageAndName>();
            @SuppressWarnings("unused")
            java.lang.String name = ""; $nonnls1()$
            @SuppressWarnings("unused")
            RefPackageAndName rpan = null;
            $template.RefPackages:refPackageInitializer(); separator="\n"$
        }
  
        if (___refClasses == null) {
            ___refClasses = new java.util.ArrayList<RefClassAndName>($length(template.RefClasses)$);
            ___refClassesByName = new java.util.HashMap<String, RefClassAndName>();
            java.lang.String name = ""; $nonnls1()$
            RefClassAndName rcan = null;
            $template.RefClasses:refClassInitializer(); separator="\n"$
        }
  
        if (___refAssociations == null) {
            ___refAssociations = new java.util.ArrayList<RefAssociationAndName>($length(template.RefAssociations)$);
            ___refAssociationsByName = new java.util.HashMap<String, RefAssociationAndName>();
            @SuppressWarnings("unused")
            java.lang.String name = ""; $nonnls1()$
            @SuppressWarnings("unused")
            RefAssociationAndName raan = null;
            $template.RefAssociations:refAssociationInitializer(); separator="\n"$
        }
    }
    
    @Override
    public com.sap.tc.moin.repository.spi.core.Wrapper<$template.PackageName$.$template.JavaName$> createWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, boolean synchronize) {
        return new $template.Wrapper.packageName$.$template.Wrapper.JavaName$(conn, this, synchronize);
    }

}
>>

/***************************** The Package Wrapper ************************/

/**
 * @param template com.sap.tc.moin.repository.jmigenerator.template.impl.JmiGeneratorPackageWrapperTemplateImpl
 */
PackageWrapper(template) ::= <<
$template:javaHeader()$

$javaPublicClassHeader(template)$
{

    /**
     * The $template.Interface.JavaName$ wrapper
     */
    public $template.JavaName$(com.sap.tc.moin.repository.core.CoreConnection conn, $template.Implementation.PackageName$.$template.Implementation.JavaName$ baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    private $template.Implementation.PackageName$.$template.Implementation.JavaName$ getCastWrappedObject() {
        return ($template.Implementation.PackageName$.$template.Implementation.JavaName$) getWrappedObject();
    }
    
    public $template.Implementation.PackageName$.$template.Implementation.JavaName$ unwrap() {
        return ($template.Implementation.PackageName$.$template.Implementation.JavaName$) getWrappedObject();
    }
    
    $template.Implementation.RefPackages:operationForDelegation(); separator="\n"$
    $template.Implementation.RefClasses:operationForDelegation(); separator="\n"$
    $template.Implementation.RefAssociations:operationForDelegation(); separator="\n"$
    // methods for structure type creators
    $template.Implementation.StructureTypes:operationForDelegationWithStructureFieldContainer(); separator="\n"$
    
    $jmiInterface(template)$
    
    protected String metaObjectToString() {
        return "$template.metaObjectToString$"; $nonnls1()$
    }
}
>>

/*********************** Internal templates ********************/

getRefPackage(rp) ::= <<
public $rp.JavaProxyInterfaceType$ $rp.AccessorName$();
>>

getRefPackageInternal(rp) ::= <<
public $rp.JavaProxyInterfaceType$ $rp.AccessorName$(com.sap.tc.moin.repository.core.CoreConnection connection);
>>

refClassInitializer(rcan) ::= <<
name = "$rcan.Name$"; $nonnls1()$
rcan = new RefClassAndName(name, "$rcan.JavaInterfaceType$"); $nonnls1()$
___refClasses.add(rcan);
___refClassesByName.put(name, rcan);
>>

refAssociationInitializer(raan) ::= <<
name = "$raan.Name$"; $nonnls1()$
raan = new RefAssociationAndName(name, "$raan.JavaInterfaceType$"); $nonnls1()$
___refAssociations.add(raan);
___refAssociationsByName.put(name, raan);
>>

extent(e) ::= <<
case $i0$:
$if (e.ClassProxyGenerated)$
    return new $e.JavaProxyImplementationType$(workspace, mofId, immediatePackage, metaObject);
$else$
$if (e.MofClass)$
$if (e.MofClassAbstract)$
    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject);
$else$
    return new com.sap.tc.moin.repository.core.jmi.reflect.RefClassImpl(workspace, mofId, immediatePackage, metaObject, Class.forName("$e.JavaImplementationType$")); $nonnls1()$
$endif$
$else$
    return new $e.JavaProxyImplementationType$(workspace, mofId, immediatePackage, metaObject);
$endif$
$endif$

>>

refPackageInitializer(rpan) ::= <<
name = "$rpan.Name$"; $nonnls1()$
rpan = new RefPackageAndName(name, "$rpan.JavaInterfaceType$", $rpan.Imported$); $nonnls1()$
___refPackages.add(rpan);
___refPackagesByName.put(name, rpan);
>>

getRefPackageImpl(rp) ::= <<
$if (template.BelongsToMof)$
public $rp.JavaProxyInterfaceType$ $rp.AccessorName$() {
    return ($rp.JavaProxyInterfaceType$) refPackage("$rp.Name$"); $nonnls1()$
}
$endif$
public $if (template.BelongsToMof)$$rp.JavaProxyInterfaceType$$else$com.sap.tc.moin.repository.mmi.reflect.RefPackage$endif$ $rp.AccessorName$(com.sap.tc.moin.repository.core.CoreConnection connection) {
    return $if (template.BelongsToMof)$($rp.JavaProxyInterfaceType$)$endif$ refPackage(connection, "$rp.Name$"); $nonnls1()$
}
>>

getRefClassImpl(rp) ::= <<
$if (template.BelongsToMof)$
public $rp.JavaProxyInterfaceType$ $rp.AccessorName$() {
    return ($rp.JavaProxyInterfaceType$) refClass("$rp.Name$"); $nonnls1()$
}
$endif$
public $if (template.BelongsToMof)$$rp.JavaProxyInterfaceType$$else$com.sap.tc.moin.repository.mmi.reflect.RefClass$endif$ $rp.AccessorName$(com.sap.tc.moin.repository.core.CoreConnection connection) {
    return $if (template.BelongsToMof)$($rp.JavaProxyInterfaceType$)$endif$ refClass(connection, "$rp.Name$"); $nonnls1()$
}
>>

getRefAssocImpl(rp) ::= <<
$if (template.BelongsToMof)$
public $rp.JavaProxyInterfaceType$ $rp.AccessorName$() {
    return ($rp.JavaProxyInterfaceType$) refAssociation("$rp.Name$"); $nonnls1()$
}
$endif$
public $if (template.BelongsToMof)$$rp.JavaProxyInterfaceType$$else$com.sap.tc.moin.repository.mmi.reflect.RefAssociation$endif$ $rp.AccessorName$(com.sap.tc.moin.repository.core.CoreConnection connection) {
    return $if (template.BelongsToMof)$($rp.JavaProxyInterfaceType$)$endif$ refAssociation(connection, "$rp.Name$"); $nonnls1()$
}
>>

operationHeader(feature) ::= <<
$if (feature.SubstituteName)$
$op.Visibility$ $op.Type$ $op.AccessorName$($if (op.Parameters)$$op.Parameters:param(); separator=", "$$else$$endif$)$if (op.Exceptions)$ throws $op.Exceptions; separator=", "$$else$$endif$
$else$
public $feature.JavaProxyInterfaceType$ $feature.AccessorName$()
$endif$
>>







