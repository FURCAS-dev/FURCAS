group class:utilities;

/********************* The Class Interface ***********************/

/**
 * @param template com.sap.tc.moin.repository.jmigenerator.template.JmiGeneratorClassInterfaceTemplate
 */
ClassInterface(template) ::= <<
$template:javaHeader()$$\n$
$template:javaDoc()$
$javaInterfaceHeader(template)$ {

    /**
     * Descriptors for all features of this MofClass and its supertypes.
     */
    public static final Descriptors DESCRIPTORS = new Descriptors( );

    // class extent descriptor
    $template.ClassExtentDescriptorConstant:constant()$ $template.ClassExtentDescriptorConstant.components:nonnlsdyn(); separator = " "$ $\n$
    
$if (template.Constants)$
    // constants
    $template.Constants:constant(); separator="\n"$
    $\n$
$endif$
$if (template.AttributeOperations)$
    // attributes
    $template.AttributeOperations:operationInterface(); separator="\n"$
    $\n$
$endif$
$if (template.ReferenceOperations)$
    // references
    $template.ReferenceOperations:operationInterface(); separator="\n"$
    $\n$
$endif$
$if (template.Operations)$
    // operations
    $template.Operations:operationInterface(); separator="\n"$
    $\n$
$endif$

    public static final class Descriptors {
        Descriptors( ) { 
        }
        $template.DescriptorsBody$
    }
}    
>>

/********************* The internal Class Interface ***********************/

/**
 * @param template com.sap.tc.moin.repository.jmigenerator.template.JmiGeneratorClassInterfaceTemplate
 */
ClassInterfaceInternal(template) ::= <<
$template:javaHeader()$

$javaInterfaceHeader(template)$ {

$if (template.AttributeOperations)$
    // attributes
    $template.AttributeOperations:operationInterfaceInternal(); separator="\n"$
$endif$    

$if (template.ReferenceOperations)$
    // references
    $template.ReferenceOperations:operationInterfaceInternal(); separator="\n"$
$endif$    

$if (template.Operations)$
    // operations
    $template.Operations:operationInterfaceInternal(); separator="\n"$
$endif$
 
}    
>>

/********************* The Class Proxy Interface ********************** */

/**
 * @param template com.sap.tc.moin.repository.jmigenerator.template.JmiGeneratorClassProxyInterfaceTemplate
 */
ClassProxyInterface(template) ::= <<
$template:javaHeader()$
$template:javaDoc()$
@Deprecated
public interface $template.JavaName$$if (template.Extends)$ extends $template.Extends; separator=","$$endif$ { 

    // class extent descriptor   
    $template.ClassExtentDescriptorConstant:constant()$ $template.ClassExtentDescriptorConstant.components:nonnlsdyn(); separator = " "$ $\n$
    
$if (template.Constructors)$
    // class creators
    $template.Constructors:operationInterface(); separator="\n"$
$endif$    

$if (template.AttributeOperations)$
    // attributes
    $template.AttributeOperations:operationInterface(); separator="\n"$
$endif$

$if (template.Operations)$
    // operations
    $template.Operations:operationInterface(); separator="\n"$
$endif$    

$if (template.StructureTypes)$
    // structure type creators
    $template.StructureTypes:creatorForStructInterface(); separator="\n"$
$endif$
}
>>

/********************* The internal Class Proxy Interface ********************** */

/**
 * @param template com.sap.tc.moin.repository.jmigenerator.template.JmiGeneratorClassProxyInterfaceTemplate
 */
ClassProxyInterfaceInternal(template) ::= <<
$template:javaHeader()$

$javaInterfaceHeader(template)$ { 

$if (template.Constructors)$
    // class creators
    $template.Constructors:operationInterface(); separator="\n"$
$endif$    

$if (template.AttributeOperations)$
    // attributes
    $template.AttributeOperations:operationInterface(); separator="\n"$
$endif$

$if (template.Operations)$
    // operations
    $template.Operations:operationInterface(); separator="\n"$
$endif$    

$if (template.StructureTypes)$
    // structure type creators
    $template.StructureTypes:creatorForStructInterface(); separator="\n"$
$endif$
}
>>

/********************* The Class Implementation ********************** */

/**
 * @param template com.sap.tc.moin.repository.jmigenerator.template.JmiGeneratorClassImplTemplate
 */
ClassImpl(template) ::= <<
$template:javaHeader()$

$javaPublicFinalClassHeader(template)$ {

    $featureId(template)$
    
$if (template.AttributeDeclarations)$    
    // variable declarations
    $template.AttributeDeclarations:attributeDecl(); separator="\n";$
    $\n$
$endif$
$if (template.MultiplicityOneLinkVariables)$
    // links for multiplicity-1 association ends
    $template.MultiplicityOneLinkVariables.keys: {k | private com.sap.tc.moin.repository.core.EndStorageLink $template.MultiplicityOneLinkVariables.(k)$;}; separator="\n"$
    $\n$
$endif$
$if (template.MultiplicityManyLinkVariables)$
    // links for multiplicity-n association ends
    $template.MultiplicityManyLinkVariables.keys: {k | private java.util.Collection<com.sap.tc.moin.repository.core.EndStorageLink> $template.MultiplicityManyLinkVariables.(k)$;}; separator="\n"$
    $\n$
$endif$
$if (template.MultiplicityOneAttributeLinkVariables)$
    // links for multiplicity-1 object-valued attributes
    $template.MultiplicityOneAttributeLinkVariables.keys: {k | private com.sap.tc.moin.repository.core.EndStorageLink $template.MultiplicityOneAttributeLinkVariables.(k)$;}; separator="\n"$
    $\n$
$endif$
$if (template.MultiplicityManyAttributeLinkVariables)$
    // links for multiplicity-n object-valued attributes
    $template.MultiplicityManyAttributeLinkVariables.keys: {k | private java.util.Collection<com.sap.tc.moin.repository.core.EndStorageLink> $template.MultiplicityManyAttributeLinkVariables.(k)$;}; separator="\n"$
    $\n$
$endif$
    // default constructor
    public $template.JavaName$() {
        super();
    }
    
    // specific constructor
    public $template.JavaName$(java.lang.Object workspace, String mofId, com.sap.tc.moin.repository.mmi.reflect.RefPackage immediatePackage, com.sap.tc.moin.repository.mmi.reflect.RefObject metaObject, com.sap.tc.moin.repository.mmi.reflect.RefClass refClass) {
        super(workspace, mofId, immediatePackage, metaObject, refClass);
    }
    
$if (template.AttributeOperations)$
    // methods for attributes
    $template.AttributeOperations:operationForAttribute(); separator="\n"$
    $\n$
$endif$
$if (template.ReferenceOperations)$
    // methods for references
    $template.ReferenceOperations:operationForReference(); separator="\n"$
    $\n$
$endif$
$if (template.Operations)$
    // methods for modeled operations
    $template.Operations:operationForModeledOperation(); separator="\n"$
    $\n$
$endif$
    // methods for internal attribute setter
    $template.InternalSetterFeatures:internalAttributeSetters(); separator="\n"$

$if (template.Operations)$
    // methods for internal modeled operations
    $template.InternalModeledOperations:operationImpl(); separator="\n"$
    $\n$
$endif$
    // reflective methods
    $refGetAndSet(template)$

$if (template.MultiplicityOneLinkVariables)$
    public void set___AssociationLink( String associationEndMofId, com.sap.tc.moin.repository.core.EndStorageLink value ) {
        $template.MultiplicityOneLinkVariables.keys: {k | if ( associationEndMofId == "$k$" ) { $template.MultiplicityOneLinkVariables.(k)$ = value; return; } //\$NON-NLS-1\$ }; separator="\n"$
    }
    
    public com.sap.tc.moin.repository.core.EndStorageLink get___AssociationLink( String associationEndMofId ) {
        $template.MultiplicityOneLinkVariables.keys: {k | if ( associationEndMofId == "$k$" ) { return $template.MultiplicityOneLinkVariables.(k)$; } //\$NON-NLS-1\$ }; separator="\n"$
        return null;
    }
$endif$

$if (template.MultiplicityOneAttributeLinkVariables)$
    public void set___AttributeLink( String attributeMofId, com.sap.tc.moin.repository.core.EndStorageLink value ) {
        $template.MultiplicityOneAttributeLinkVariables.keys: {k | if ( attributeMofId == "$k$" ) { $template.MultiplicityOneAttributeLinkVariables.(k)$ = value; return; } //\$NON-NLS-1\$ }; separator="\n"$
    }

    public com.sap.tc.moin.repository.core.EndStorageLink get___AttributeLink( String attributeMofId ) {
        $template.MultiplicityOneAttributeLinkVariables.keys: {k | if ( attributeMofId == "$k$" ) { return $template.MultiplicityOneAttributeLinkVariables.(k)$; } //\$NON-NLS-1\$ }; separator="\n"$
        return null;
    }
$endif$

$if (template.HasLinkVariables)$
    public java.util.List<com.sap.tc.moin.repository.core.EndStorageLink> get___AllStoredLinks( ) {
        java.util.List<com.sap.tc.moin.repository.core.EndStorageLink> result = null;
        $template.MultiplicityOneLinkVariables.keys: {k | if ( $template.MultiplicityOneLinkVariables.(k)$ != null ) { if ( result == null ) result = new java.util.ArrayList<com.sap.tc.moin.repository.core.EndStorageLink>( ); result.add( $template.MultiplicityOneLinkVariables.(k)$); } }; separator="\n"$
        $template.MultiplicityManyLinkVariables.keys: {k | if ( $template.MultiplicityManyLinkVariables.(k)$ != null ) { if ( result == null ) result = new java.util.ArrayList<com.sap.tc.moin.repository.core.EndStorageLink>( ); result.addAll( $template.MultiplicityManyLinkVariables.(k)$); } }; separator="\n"$
        $template.MultiplicityOneAttributeLinkVariables.keys: {k | if ( $template.MultiplicityOneAttributeLinkVariables.(k)$ != null ) { if ( result == null ) result = new java.util.ArrayList<com.sap.tc.moin.repository.core.EndStorageLink>( ); result.add( $template.MultiplicityOneAttributeLinkVariables.(k)$); } }; separator="\n"$
        $template.MultiplicityManyAttributeLinkVariables.keys: {k | if ( $template.MultiplicityManyAttributeLinkVariables.(k)$ != null ) { if ( result == null ) result = new java.util.ArrayList<com.sap.tc.moin.repository.core.EndStorageLink>( ); result.addAll( $template.MultiplicityManyAttributeLinkVariables.(k)$); } }; separator="\n"$
        return result;$\n$
    }

    public java.util.List<com.sap.tc.moin.repository.core.EndStorageLink> get___AllStoredAssociationLinks( ) {
        java.util.List<com.sap.tc.moin.repository.core.EndStorageLink> result = null;
        $template.MultiplicityOneLinkVariables.keys: {k | if ( $template.MultiplicityOneLinkVariables.(k)$ != null ) { if ( result == null ) result = new java.util.ArrayList<com.sap.tc.moin.repository.core.EndStorageLink>( ); result.add( $template.MultiplicityOneLinkVariables.(k)$); } }; separator="\n"$
        $template.MultiplicityManyLinkVariables.keys: {k | if ( $template.MultiplicityManyLinkVariables.(k)$ != null ) { if ( result == null ) result = new java.util.ArrayList<com.sap.tc.moin.repository.core.EndStorageLink>( ); result.addAll( $template.MultiplicityManyLinkVariables.(k)$); } }; separator="\n"$
        return result;$\n$
    }
$endif$

$if (template.MultiplicityManyLinkVariables)$
    public java.util.Collection<com.sap.tc.moin.repository.core.EndStorageLink> get___AssociationLinks( String associationEndMofId ) {
        $template.MultiplicityManyLinkVariables.keys: {k | if ( associationEndMofId == "$k$" ) { return $template.MultiplicityManyLinkVariables.(k)$; } //\$NON-NLS-1\$ }; separator="\n"$
        return null;
    }

    public void set___AssociationLinks( java.util.Collection<com.sap.tc.moin.repository.core.EndStorageLink> links, String associationEndMofId ) {
        $template.MultiplicityManyLinkVariables.keys: {k | if ( associationEndMofId == "$k$" ) { $template.MultiplicityManyLinkVariables.(k)$ = links; return; } //\$NON-NLS-1\$ }; separator="\n"$
    }    
$endif$

$if (template.MultiplicityManyAttributeLinkVariables)$
    public java.util.Collection<com.sap.tc.moin.repository.core.EndStorageLink> get___AttributeLinks( String attributeMofId ) {
        $template.MultiplicityManyAttributeLinkVariables.keys: {k | if ( attributeMofId == "$k$" ) { return $template.MultiplicityManyAttributeLinkVariables.(k)$; } //\$NON-NLS-1\$ }; separator="\n"$
        return null;
    }

    public void set___AttributeLinks( java.util.Collection<com.sap.tc.moin.repository.core.EndStorageLink> links, String attributeMofId ) {
        $template.MultiplicityManyAttributeLinkVariables.keys: {k | if ( attributeMofId == "$k$" ) { $template.MultiplicityManyAttributeLinkVariables.(k)$ = links; return; } //\$NON-NLS-1\$ }; separator="\n"$
    }
$endif$

$if (template.HasLinkVariables)$
    public java.util.List<com.sap.tc.moin.repository.core.EndStorageLink> clear___AllLinks( ) {
        reset___CompositeParentLink( );
        java.util.List<com.sap.tc.moin.repository.core.EndStorageLink> result = null;
        $template.MultiplicityOneLinkVariables.keys: {k | if ( $template.MultiplicityOneLinkVariables.(k)$ != null ) { if ( result == null ) result = new java.util.ArrayList<com.sap.tc.moin.repository.core.EndStorageLink>( ); result.add( $template.MultiplicityOneLinkVariables.(k)$); $template.MultiplicityOneLinkVariables.(k)$ = null; } }; separator="\n"$
        $template.MultiplicityManyLinkVariables.keys: {k | if ( $template.MultiplicityManyLinkVariables.(k)$ != null ) { if ( result == null ) result = new java.util.ArrayList<com.sap.tc.moin.repository.core.EndStorageLink>( ); result.addAll( $template.MultiplicityManyLinkVariables.(k)$); $template.MultiplicityManyLinkVariables.(k)$ = null; } }; separator="\n"$
        $template.MultiplicityOneAttributeLinkVariables.keys: {k | if ( $template.MultiplicityOneAttributeLinkVariables.(k)$ != null ) { if ( result == null ) result = new java.util.ArrayList<com.sap.tc.moin.repository.core.EndStorageLink>( ); result.add( $template.MultiplicityOneAttributeLinkVariables.(k)$); $template.MultiplicityOneAttributeLinkVariables.(k)$ = null; } }; separator="\n"$
        $template.MultiplicityManyAttributeLinkVariables.keys: {k | if ( $template.MultiplicityManyAttributeLinkVariables.(k)$ != null ) { if ( result == null ) result = new java.util.ArrayList<com.sap.tc.moin.repository.core.EndStorageLink>( ); result.addAll( $template.MultiplicityManyAttributeLinkVariables.(k)$); $template.MultiplicityManyAttributeLinkVariables.(k)$ = null; } }; separator="\n"$
        return result;$\n$
    }
$endif$

$if (template.Operations)$
    // reflective methods
    $refInvokeOperation(template)$
    $\n$    
$endif$
    // get the JMI interface
    $jmiInterface(template)$

    $if (template.Wrapper)$
    // create the wrapper
    @Override
    public com.sap.tc.moin.repository.spi.core.Wrapper<$template.PackageName$.$template.JavaName$> createWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, boolean synchronize) {
        return new $template.Wrapper.packageName$.$template.Wrapper.JavaName$(conn, this, synchronize);
    }
    $endif$
    
}
>>

/********************* The Class Wrapper ***********************/

/**
 * @param template com.sap.tc.moin.repository.jmigenerator.template.JmiGeneratorWrapperTemplate
 */
ClassWrapper(template) ::= <<
$template:javaHeader()$

$javaPublicClassHeader(template)$ {

    $featureId(template)$

    public $template.JavaName$(com.sap.tc.moin.repository.core.CoreConnection conn, $template.Implementation.PackageName$.$template.Implementation.JavaName$ baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }

    @SuppressWarnings("unused")
    private $template.Implementation.PackageName$.$template.Implementation.JavaName$ getCastWrappedObject() {
        return ($template.Implementation.PackageName$.$template.Implementation.JavaName$) getWrappedObject();
    }
    
$if (template.Implementation.AttributeOperations)$
    private $template.Implementation.PackageName$.$template.Implementation.JavaName$ getCastWrappedObject(com.sap.tc.moin.repository.core.CorePartitionable resolved) {
        return ($template.Implementation.PackageName$.$template.Implementation.JavaName$) resolved;
    }
    
$endif$

    public $template.Implementation.PackageName$.$template.Implementation.JavaName$ unwrap() {
        return ($template.Implementation.PackageName$.$template.Implementation.JavaName$) getWrappedObject();
    }
        
    // methods for attributes
    $template.Implementation.AttributeOperations:operationForDelegation(); separator="\n"$
     
    // methods for references
    $template.Implementation.ReferenceOperations:operationForDelegation(); separator="\n"$
   
    // methods for modeled operations
    $template.Operations:operationForModeledOperationForWrapper(); separator="\n"$
    
    // methods for internal modeled operations
    $template.InternalModeledOperations:operationImpl(); separator="\n"$

    // reflective methods
    $refInvokeOperation(template)$    

    // get the JMI interface
    $jmiInterface(template)$

    // to String
    protected String metaObjectToString() {
        return "$template.metaObjectToString$"; $nonnls1()$
    }    
}
>>

/********************* The Class Proxy Implementation ********************** */

/**
 * @param template com.sap.tc.moin.repository.jmigenerator.template.JmiGeneratorClassProxyImplTemplate
 */
ClassProxyImpl(template) ::= <<
$template:javaHeader()$

$javaPublicFinalClassHeader(template)$ {

    $featureId(template)$

    // static variable declarations
    $template.AttributeDeclarations:attributeDecl(); separator="\n";$
    
    // default constructor
    public $template.JavaName$() {
        super();
    }

    // specific constructor
    public $template.JavaName$(java.lang.Object workspace, java.lang.String mofId, com.sap.tc.moin.repository.mmi.reflect.RefPackage immediatePackage, com.sap.tc.moin.repository.mmi.reflect.RefObject metaObject) {
        super(workspace, mofId, immediatePackage, metaObject);
    }

    // object creators
    $template.Constructors:operationForConstructor(); separator="\n"$

    // methods for static attributes
    $template.AttributeOperations:operationForAttribute(); separator="\n"$    
    
    // methods for modeled static operations
    $template.Operations:operationForModeledOperation(); separator="\n"$
    
    // methods for structure type creators
    $template.StructureTypes:creatorForStructImpl(); separator="\n"$

    // methods for internal modeled operations
    $template.InternalModeledOperations:operationImpl(); separator="\n"$

    // internal enumeration creators
    $createRefEnum(template)$

    // internal structure type creators
    $createRefStruct(template)$

    // reflective methods
    $refGetAndSet(template)$

    // for performance reasons overwrite method
    public boolean is___Singleton() {
        return $if(template.Singleton)$true$else$false$endif$;
    }
    // for performance reasons overwrite method
    public boolean is___Abstract() {
        return $if(template.Abstract)$true$else$false$endif$;
    }

    public com.sap.tc.moin.repository.mmi.reflect.RefObject get___Instance() throws com.sap.tc.moin.repository.mmi.reflect.JmiException {
$if(template.ClassImpl.Abstract)$
        // abstract class
        return null;
$else$
        return new $template.ClassImpl.PackageName$.$template.ClassImpl.JavaName$();
$endif$
    
    }

    // get the JMI interface
    $jmiInterface(template)$
        
    $template.InternalSetterFeatures:internalAttributeSetters(); separator="\n"$
    
    // reflective methods
    $refInvokeOperation(template)$    

    @Override
    public com.sap.tc.moin.repository.spi.core.Wrapper<$template.ClassImpl.PackageName$.$template.JavaName$> createWrapper(com.sap.tc.moin.repository.core.CoreConnection conn, boolean synchronize) {
        return new $template.Wrapper.packageName$.$template.Wrapper.JavaName$(conn, this, synchronize);
    }   

}
>>

/********************* The Class Proxy Wrapper ***********************/

/**
 * @param template com.sap.tc.moin.repository.jmigenerator.template.JmiGeneratorWrapperTemplate
 */
ClassProxyWrapper(template) ::= <<
$template:javaHeader()$

$javaPublicFinalClassHeader(template)$ {

    $featureId(template)$

    public $template.JavaName$(com.sap.tc.moin.repository.core.CoreConnection conn, $template.Implementation.PackageName$.$template.Implementation.JavaName$ baseObject, boolean synchronize) {
        super(conn, baseObject, synchronize);
    }
    
    private $template.Implementation.PackageName$.$template.Implementation.JavaName$ getCastWrappedObject() {
        return ($template.Implementation.PackageName$.$template.Implementation.JavaName$) getWrappedObject();
    }
    
$if (template.Interface.AttributeOperations)$
    private $template.Implementation.PackageName$.$template.Implementation.JavaName$ getCastWrappedObject(com.sap.tc.moin.repository.core.CorePartitionable resolved) {
        return ($template.Implementation.PackageName$.$template.Implementation.JavaName$) resolved;
    }
    
$endif$

    public $template.Implementation.PackageName$.$template.Implementation.JavaName$ unwrap() {
        return ($template.Implementation.PackageName$.$template.Implementation.JavaName$) getWrappedObject();
    }
    
    $template.Interface.Constructors:operationDelegation(); separator="\n"$    

    // methods for static attributes
    $template.Interface.AttributeOperations:operationDelegation(); separator="\n"$    

    // methods for modeled static operations
    $template.Operations:operationForModeledOperationForWrapper(); separator="\n"$

    // methods for structure type creators
    $template.Interface.StructureTypes:operationForDelegationWithStructureFieldContainer(); separator="\n"$
    
    // methods for internal modeled operations
    $template.InternalModeledOperations:operationImpl(); separator="\n"$

    // reflective methods
    $refInvokeOperation(template)$    

    // get the JMI interface
    $jmiInterface(template)$
    
    // to String
    protected String metaObjectToString() {
        return "$template.metaObjectToString$"; $nonnls1()$
    }    
}
>>

/****************** Sub templates *********************/

parNameToList(par) ::= <<
parameterList.add($par.Name$);
>>

operationForConstructor(op) ::= <<
$if (template.BelongsToMof)$$operationHeader(op)$$else$$operationHeaderForClassImpl(op)$$endif$ {
$if (op.ParametersExceptForCoreConnectionAndModelPartition)$
    java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>($length(op.ParametersExceptForCoreConnectionAndModelPartition)$);
    $op.ParametersExceptForCoreConnectionAndModelPartition:parNameToList(); separator="\n"$
$if (op.hasModelPartition)$
    return ($if (template.BelongsToMof)$$op.Type$$else$com.sap.tc.moin.repository.mmi.reflect.RefBaseObject$endif$) refCreateInstanceInPartition($coreConnection(op)$, parameterList, partition);
$else$
    return ($if (template.BelongsToMof)$$op.Type$$else$com.sap.tc.moin.repository.mmi.reflect.RefBaseObject$endif$) refCreateInstance($coreConnection(op)$, parameterList);
$endif$

$else$

$if (op.hasModelPartition)$
    $if (template.BelongsToMof)$$op.Type$$else$com.sap.tc.moin.repository.mmi.reflect.RefBaseObject$endif$ result = ($if (template.BelongsToMof)$$op.Type$$else$com.sap.tc.moin.repository.mmi.reflect.RefBaseObject$endif$) refCreateInstanceInPartition($coreConnection(op)$, (java.util.List<? extends Object>)null, partition);
$if (op.ClassImplTemplate.AttributeInitializations)$
    (($op.ClassImplTemplate.PackageName$.$op.ClassImplTemplate.JavaName$) result).initialize___Values($coreConnection(op)$);$\n$
$endif$
    return result;
$else$
    $if (template.BelongsToMof)$$op.Type$$else$com.sap.tc.moin.repository.mmi.reflect.RefBaseObject$endif$ result = ($if (template.BelongsToMof)$$op.Type$$else$com.sap.tc.moin.repository.mmi.reflect.RefBaseObject$endif$) refCreateInstance($coreConnection(op)$, (java.util.List<? extends Object>)null);
$if (op.ClassImplTemplate.AttributeInitializations)$
    (($op.ClassImplTemplate.PackageName$.$op.ClassImplTemplate.JavaName$) result).initialize___Values($coreConnection(op)$);$\n$
$endif$
    return result;
$endif$

$endif$

}
>>

operationForReference(op) ::= <<
$if (op.Multiple)$
$if (op.Setter)$
$else$
$referenceOp(op)$
$endif$
$else$
$referenceOp(op)$
$endif$
>>

referenceOp(op) ::= <<
$if (template.BelongsToMof)$$operationHeader(op)$$else$$operationHeaderForImpl(op)$$endif$
{
$if(op.Derived)$
   com.sap.tc.moin.repository.mmi.model.Association association = (com.sap.tc.moin.repository.mmi.model.Association) get___MetamodelElementByMofId($coreConnection(op)$, "$op.AttributeOrAssociationMofId$"); $nonnls1()$
   $op.AssociationImplementationType$ associationExtent = ($op.AssociationImplementationType$) get___JmiHelper().getRefAssociationForAssociation($coreConnection(op)$, association);
   return associationExtent.get$op.AssociationEndName$($coreConnection(op)$, this);
$else$
  $if(op.Setter)$
$operationToSetter(op)$$\n$
  $else$
  $if (op.Multiple)$
  $if (op.LinkVariableName)$
    return ($if (template.BelongsToMof)$$op.Type$$if (op.TypeParameter)$<$op.TypeParameter$>$endif$$else$$op.Type$$endif$) ___getElementsAtOtherLinkEnd( $coreConnection(op)$, this, get___EndAndMetaObject( "$op.AttributeOrAssociationMofId$" /* attribute or association */, $op.EndNumberOfToEnd$ ) ) ; $nonnls1()$$\n$
  $else$
    return ($if (template.BelongsToMof)$$op.Type$$if (op.TypeParameter)$<$op.TypeParameter$>$endif$$else$$op.Type$$endif$) ___queryElementsAtOtherLinkEnd( $coreConnection(op)$, this, get___EndAndMetaObject( "$op.AttributeOrAssociationMofId$" /* attribute or association */, $op.EndNumberOfToEnd$ ) ); $nonnls1()$$\n$
  $endif$
  $else$
  $if (op.LinkVariableName)$
    return ($if (template.BelongsToMof)$$op.Type$$if (op.TypeParameter)$<$op.TypeParameter$>$endif$$else$com.sap.tc.moin.repository.mmi.reflect.RefBaseObject$endif$) ___getElementAtOtherLinkEnd( $coreConnection(op)$, $op.LinkVariableName$);$\n$
  $else$
    com.sap.tc.moin.repository.core.EndAndMetaObject endAndMetaObject = get___EndAndMetaObject( "$op.AttributeOrAssociationMofId$" /* attribute or association */, $op.EndNumberOfToEnd$ ); $nonnls1()$
    $if (op.ReferencedEndComposite)$
    return ($if (template.BelongsToMof)$$op.Type$$if (op.TypeParameter)$<$op.TypeParameter$>$endif$$else$com.sap.tc.moin.repository.mmi.reflect.RefBaseObject$endif$) get___CompositeParentForEndAndMetaObject( $coreConnection(op)$, endAndMetaObject );
    $else$
    return ($if (template.BelongsToMof)$$op.Type$$if (op.TypeParameter)$<$op.TypeParameter$>$endif$$else$com.sap.tc.moin.repository.mmi.reflect.RefBaseObject$endif$) ___queryElementAtOtherLinkEnd( $coreConnection(op)$, this, endAndMetaObject );$\n$
    $endif$
  $endif$
  $endif$   
$endif$
$endif$

}
>>

operationForModeledOperation(op) ::= <<
$operationHeader(op)$
{
    java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>($length(op.ParametersExceptForCoreConnectionAndModelPartition)$);
    try {
        $op.ParametersExceptForCoreConnectionAndModelPartition:parNameToList(); separator="\n"$
$if (op.Void)$
$if (op.HasCoreConnection)$
        ___invokeOperation(connection, $op.OperationIndex$, "$op.OperationMofId$", parameterList); $nonnls1()$$\n$
$else$
        ___invokeOperation(get___CurrentConnection(), $op.OperationIndex$, "$op.OperationMofId$", parameterList); $nonnls1()$$\n$
$endif$
$else$
$if (op.HasCoreConnection)$
        return ($op.JavaType$$if (op.TypeParameter)$<$op.TypeParameter$>$endif$)___invokeOperation(connection, $op.OperationIndex$, "$op.OperationMofId$", parameterList); $nonnls1()$$\n$
$else$
        return ($op.JavaType$$if (op.TypeParameter)$<$op.TypeParameter$>$endif$)___invokeOperation(get___CurrentConnection(), $op.OperationIndex$, "$op.OperationMofId$", parameterList); $nonnls1()$$\n$
$endif$
$endif$
    }
    catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
        $if (op.Exceptions)$
        $op.MofExceptions:ifInstanceOfAndRethrow(); separator="\n"$
        $endif$
        throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
    }
}
>>

operationForModeledOperationForWrapper(op) ::= <<
$if (!op.HasCoreConnection)$
$operationHeader(op)$
{
    java.util.List<java.lang.Object> parameterList = new java.util.ArrayList<java.lang.Object>($length(op.ParametersExceptForCoreConnectionAndModelPartition)$);
    try {
        $op.ParametersExceptForCoreConnectionAndModelPartition:parNameToList(); separator="\n"$
$if (op.Void)$
        ___invokeOperation(connection, $op.OperationIndex$, "$op.OperationMofId$", parameterList); $nonnls1()$$\n$
$else$
        return ($op.JavaType$$if (op.TypeParameter)$<$op.TypeParameter$>$endif$)___invokeOperation(connection, $op.OperationIndex$, "$op.OperationMofId$", parameterList); $nonnls1()$$\n$
$endif$
    } catch ( com.sap.tc.moin.repository.mmi.reflect.RefException ex ) {
        $if (op.Exceptions)$
        $op.MofExceptions:ifInstanceOfAndRethrow(); separator="\n"$
        $endif$
        throw new com.sap.tc.moin.repository.mmi.reflect.JmiException( ex );
    }
}
$endif$
>>

operationForAttribute(op) ::= <<
$if (op.Multiple)$
$if (op.Setter)$
$else$
$attributeOp(op)$
$endif$
$else$
$attributeOp(op)$
$endif$
>>

attributeOp(op) ::= <<
$if (template.BelongsToMof)$$operationHeader(op)$$else$$operationHeaderForImpl(op)$$endif$
{
$if (op.Body)$
$!the new line here is vital because the body can contain a comment line as last line!$
$op.Body:body(); separator="\n"$$\n$
$else$
  $if (op.Setter)$
$operationToSetter(op)$$\n$
  $else$
    $if (op.ObjectTyped)$
    $if (op.Multiple)$
    return ($if (template.BelongsToMof)$$op.Type$$if (op.TypeParameter)$<$op.TypeParameter$>$endif$$else$$op.Type$$endif$) ___getElementsAtOtherLinkEnd( $coreConnection(op)$, this, get___EndAndMetaObject( "$op.AttributeOrAssociationMofId$" /* attribute or association */, 1 )); $nonnls1()$$\n$
    $else$
    return ($if (template.BelongsToMof)$$op.Type$$if (op.TypeParameter)$<$op.TypeParameter$>$endif$$else$com.sap.tc.moin.repository.mmi.reflect.RefBaseObject$endif$) ___getElementAtOtherLinkEnd( $coreConnection(op)$, $op.LinkVariableName$);$\n$
    $endif$
    $else$
    $if (op.Multiple)$
    if ($op.VariableName$ == null) {
        com.sap.tc.moin.repository.mmi.model.Attribute attribute = null;
        attribute = (com.sap.tc.moin.repository.mmi.model.Attribute) get___MetamodelElementByMofId($coreConnection(op)$, "$op.AttributeOrAssociationMofId$"); $nonnls1()$
        $op.VariableName$ = this.<$op.TypeParameter$>create___MultiValuedAttributesList(attribute);
    }
    $endif$
    return $op.VariableName$;$\n$
    $endif$
  $endif$
$endif$
}
>>

featureSetValue(feature) ::= <<
$! $if (feature.Changeable)$ !$
$! $else$ !$
case $feature.FeatureIndex$:
$featureToSetter(feature)$
    break;
$! $endif$ !$        
>>

featureToSetter(feature) ::= <<
        $if (feature.Reference)$
          $if (feature.Reference.AssociationDerived)$
    ___changeReferenceDerived(connection, $feature.FeatureIndex$, "$feature.ReferenceMofId$", value); $nonnls2()$
          $else$
    ___changeReference(connection, "$feature.AttributeOrAssociationMofId$" /* mofId of association */, "$feature.ReferenceMofId$" /* mofId of reference */, value, $feature.ToEndNumber$); $nonnls2()$
          $endif$     
        $else$
            $if (feature.Attribute.Derived)$
    ___changeAttributeDerived(connection, $feature.FeatureIndex$, "$feature.AttributeOrAssociationMofId$", value); $nonnls1()$
            $else$
              $if (feature.ObjectTyped)$
    ___changeObjectAttribute(connection, "$feature.AttributeOrAssociationMofId$", value); $nonnls1()$
              $else$
    ___changeDataTypeAttribute(connection, $feature.FeatureIndex$, "$feature.AttributeOrAssociationMofId$", $feature.Attribute.VariableName$, value); $nonnls1()$
              $endif$
          $endif$
        $endif$
>>

operationToSetter(op) ::= <<
        $if (op.Reference)$
          $if (op.Derived)$
    ___changeReferenceDerived($coreConnection(op)$, $op.FeatureIndex$, "$op.ReferenceMofId$", newValue); $nonnls1()$
          $else$
    ___changeReference($coreConnection(op)$, /* mofId of association */ "$op.AttributeOrAssociationMofId$", /* mofId of reference */ "$op.ReferenceMofId$" , newValue, $op.EndNumberOfToEnd$); $nonnls2()$
          $endif$
        $else$
          $if (op.ObjectTyped)$
    ___changeObjectAttribute($coreConnection(op)$, "$op.AttributeOrAssociationMofId$", newValue); $nonnls1()$
          $else$
            $if (op.Derived)$ 
    ___changeAttributeDerived($coreConnection(op)$, $op.FeatureIndex$, "$op.AttributeOrAssociationMofId$", newValue); $nonnls1()$
            $else$
    ___changeDataTypeAttribute($coreConnection(op)$, $op.FeatureIndex$, "$op.AttributeOrAssociationMofId$", $op.VariableName$, newValue); $nonnls1()$
            $endif$
          $endif$
        $endif$
>>

/* 
 * Creates internal setters ("set__<attributeName>")
 * 
 * This is necessary for all attributes, not just changeables
 */
internalAttributeSetters(feature) ::= <<
  $if (feature.Reference)$
    $if (feature.Operation)$
$operationImpl(feature.Operation)$
    $endif$
  $else$
    $if (feature.ObjectTyped)$
private void $feature.MutatorNameInternal$(com.sap.tc.moin.repository.core.CoreSession session, java.lang.Object newValue) {
    ___loadLinks(session, "$feature.AttributeOrAssociationMofId$" /* "$feature.name$" */, newValue, $feature.ToEndNumber$); $nonnls2()$
}
$if (feature.Multiple)$
private void $feature.MutatorNameInternal$SingleValue(com.sap.tc.moin.repository.core.CoreSession session, java.lang.Object newValue) {
    ___loadLinks(session, "$feature.AttributeOrAssociationMofId$" /* "$feature.name$" */, newValue, $feature.ToEndNumber$); $nonnls2()$
}
$endif$
    $else$
      $if (feature.Operation)$    
$operationImpl(feature.Operation)$
      $else$
private void $feature.MutatorNameInternal$($feature.JavaImplementationType$$if (feature.JavaTypeParameter)$<$feature.JavaTypeParameter$>$endif$ newValue) {
        $if (feature.Multiple)$
    if ($feature.Attribute.VariableName$ == null) {
        com.sap.tc.moin.repository.mmi.model.Attribute attribute = null;
        attribute = (com.sap.tc.moin.repository.mmi.model.Attribute) get___MetamodelElement("$feature.AttributeOrAssociationMofId$"); $nonnls1()$
        $feature.Attribute.VariableName$ = this.<$feature.JavaTypeParameter$>create___MultiValuedAttributesList(attribute); 
    }
    ((com.sap.tc.moin.repository.core.MultiValuedAttributesList<$feature.JavaTypeParameter$>)$feature.Attribute.VariableName$).___replace(newValue); 
        $else$
$feature.Attribute.VariableName$ = newValue;
        $endif$
}
$if (feature.Multiple)$
private void $feature.MutatorNameInternal$SingleValue($feature.JavaTypeParameter$ newValue) {
    if ($feature.Attribute.VariableName$ == null) {
        com.sap.tc.moin.repository.mmi.model.Attribute attribute = null;
        attribute = (com.sap.tc.moin.repository.mmi.model.Attribute) get___MetamodelElement("$feature.AttributeOrAssociationMofId$"); $nonnls1()$
        $feature.Attribute.VariableName$ = this.<$feature.JavaTypeParameter$>create___MultiValuedAttributesList(attribute); 
    }
    ((com.sap.tc.moin.repository.core.MultiValuedAttributesList<$feature.JavaTypeParameter$>)$feature.Attribute.VariableName$).___add(newValue); 
}
$endif$
      $endif$
    $endif$
  $endif$
>>

refGetAndSet(template) ::= <<
$if (template.FeatureIds)$
public java.lang.Object refGetValue(com.sap.tc.moin.repository.core.CoreConnection connection, java.lang.String featureName) {
    if (featureName == null) {
        throw new com.sap.tc.moin.repository.mmi.reflect.InvalidNameException(featureName);
    }
    java.lang.Object result = null;
    java.lang.Integer featureId = FEATURE_IDS.get(featureName);
    if (featureId == null) {
        throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException(featureName, refMetaObject(), "refGetValue(String)"); $nonnls1()$
    }
    switch (featureId) {
        $template.Features: featureGetValue(); separator="\n"$
    default:
        throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException(featureName, refMetaObject(), "refGetValue(String)"); $nonnls1()$
    }
    $if(template.Features)$
    return result;
    $endif$
}

public void refSetValue(com.sap.tc.moin.repository.core.CoreConnection connection, java.lang.String featureName, java.lang.Object value) {
    if (featureName == null) {
        throw new com.sap.tc.moin.repository.mmi.reflect.InvalidNameException(featureName);
    }
    java.lang.Integer featureId = FEATURE_IDS.get(featureName);
    if (featureId == null) {
        throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException(featureName, refMetaObject(), "refSetValue(String)"); $nonnls1()$
    }
    switch (featureId) {
        $template.Features: featureSetValue(); separator="\n"$
    default:
        throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException(featureName, null, "refSetValue(String)"); $nonnls1()$
    }
}

public void set___Value(com.sap.tc.moin.repository.core.CoreSession session, java.lang.String featureName, java.lang.Object value) {
    switch (FEATURE_IDS.get(featureName)) {
        $template.InternalSetterFeatures: featureSetValueInternal(); separator="\n"$
        default:
            throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException(featureName, refMetaObject(), "set___Value(String)"); $nonnls1()$
    }
}

public void set___Value(com.sap.tc.moin.repository.core.CoreSession session, int featureId, java.lang.Object value) {
    switch (featureId) {
        $template.InternalSetterFeatures: featureSetValueInternal(); separator="\n"$
        default:
            throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException(featureId, refMetaObject(), "set___Value(int)"); $nonnls1()$
    }
}

public void addOrSet___Value(com.sap.tc.moin.repository.core.CoreSession session, java.lang.String featureName, java.lang.Object value) {
    switch (FEATURE_IDS.get(featureName)) {
        $template.InternalSetterFeatures: featureAddOrSetValueInternal(); separator="\n"$
        default:
            throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException(featureName, refMetaObject(), "addOrSet___Value(String)"); $nonnls1()$
    }
}
$endif$    

$if (template.AttributeInitializations)$
public void initialize___Values(com.sap.tc.moin.repository.core.CoreConnection connection) {
    $template.AttributeInitializations: typedElementInitialize(); separator="\n"$
}
$endif$
>>

refInvokeOperation(template) ::= <<
$if (template.OperationIds)$
@Override
public Object refInvokeOperation(com.sap.tc.moin.repository.core.CoreConnection connection, java.lang.String requestedOperation, java.util.List<? extends Object> args) throws com.sap.tc.moin.repository.mmi.reflect.RefException {
    if (requestedOperation == null) {
        throw new com.sap.tc.moin.repository.mmi.reflect.InvalidNameException(requestedOperation);
    }
    java.lang.Integer operationId = OPERATION_IDS.get(requestedOperation);
    if (operationId == null) {
        throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException(requestedOperation, refMetaObject(), "refInvokeOperation(String)"); $nonnls1()$
    }
    switch (operationId) {
        $template.Operations: call___InvokeOperation(); separator="\n"$
        default:
            throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException(requestedOperation, refMetaObject(), "refInvokeOperation(String)"); $nonnls1()$
    }
}

@Override
public Object invoke___Operation(com.sap.tc.moin.repository.core.CoreConnection connection, int operationId, java.util.List<? extends Object> args) throws com.sap.tc.moin.repository.mmi.reflect.RefException {
    switch (operationId) {
        $template.Operations: callInvoke__Operation(); separator="\n"$
        default:
            throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException( operationId, refMetaObject( ), "invoke___Operation(int)"); $nonnls1()$
    }$\n$
}
$endif$
>>

call___InvokeOperation(operation) ::= <<
$if (operation.HasCoreConnection)$
case $operation.OperationIndex$:
    return ___invokeOperation( connection, operationId, "$operation.operationMofId$", args ); $nonnls1()$
$endif$    
>>

callInvoke__Operation(operation) ::= <<
$if (operation.HasCoreConnection)$
case $operation.OperationIndex$:
$if (operation.Void)$
$if (operation.ParametersExceptForCoreConnection)$    invoke__$operation.AccessorName$(connection, $operation.ParametersExceptForCoreConnection:castParam(); separator=", "$);$else$    invoke__$operation.AccessorName$(connection);$endif$
    return null;
$else$
$if (operation.ParametersExceptForCoreConnection)$    return invoke__$operation.AccessorName$(connection, $operation.ParametersExceptForCoreConnection:castParam(); separator=", "$);$else$    return invoke__$operation.AccessorName$(connection);$endif$
$endif$
$endif$    
>>

checkArgumentType(parameter) ::= <<
if (args.get($i0$) != null && !(args.get($i0$) instanceof $if (parameter.Array)$$parameter.Type$[]$else$$parameter.JavaType$$endif$)) {
    throw new com.sap.tc.moin.repository.mmi.reflect.TypeMismatchException($if (parameter.Array)$$parameter.Type$[]$else$$parameter.JavaType$$endif$.class, null, null, "Argument $i0$ is of wrong type " + args.get($i0$).getClass().getName());
}
>>

castParam(parameter) ::= <<
$if (parameter.Array)$
($parameter.Type$[]) args.get($i0$)
$else$
($parameter.JavaType$) args.get($i0$)
$endif$
>>

linkVariable_1(variableName) ::= <<
private com.sap.tc.moin.repository.core.EndStorageLink $variableName$;
>>

ifInstanceOfAndRethrow(exception) ::= <<
if (ex instanceof $exception$) {
    throw ($exception$) ex;
}
>>

operationHeaderForImpl(op) ::= <<
$op.Visibility$ $if (op.Void)$void$else$$if (op.OperationForReferenceOrObjectValuedAttribute)$$if (op.Multiple)$$op.Type$$else$com.sap.tc.moin.repository.mmi.reflect.RefBaseObject$endif$$else$$op.Type$$if (op.TypeParameter)$<$op.TypeParameter$>$endif$$endif$$endif$ $op.AccessorName$($if (op.Parameters)$$op.Parameters:paramForImpl(); separator=", "$$else$$endif$)$if (op.Exceptions)$ throws $op.Exceptions; separator=", "$$else$$endif$
>>

paramForImpl(par) ::= <<
$if (par.Operation.OperationForReferenceOrObjectValuedAttribute)$com.sap.tc.moin.repository.mmi.reflect.RefBaseObject$else$$par.Type$$if (par.TypeParameter)$<? extends $par.TypeParameter$>$endif$$if (par.Array)$[]$endif$$endif$ $par.Name$
>>

operationHeaderForClassImpl(op) ::= <<
$op.Visibility$ com.sap.tc.moin.repository.mmi.reflect.RefBaseObject $op.AccessorName$($if (op.Parameters)$$op.Parameters:paramForClassImpl(); separator=", "$$else$$endif$)$if (op.Exceptions)$ throws $op.Exceptions; separator=", "$$else$$endif$
>>

paramForClassImpl(par) ::= <<
$if (par.ObjectTyped)$$if (par.Multiple)$$par.Type$$else$com.sap.tc.moin.repository.mmi.reflect.RefBaseObject$endif$$else$$par.Type$$if (par.TypeParameter)$<? extends $par.TypeParameter$>$endif$$if (par.Array)$[]$endif$$endif$ $par.Name$
>>
