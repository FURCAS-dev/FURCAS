group structype:utilities;

/***************************** The StructureType Interface ************************/

/**
 * @param template com.sap.tc.moin.repository.jmigenerator.template.JmiGeneratorStructureTypeInterfaceTemplate
 */
StructureTypeInterface(template) ::= <<
$template:javaHeader()$$\n$
$template:javaDoc()$
public interface $template.JavaName$$if (template.Extends)$ extends $template.Extends; separator=", "$$endif$
{
    /**
     * Descriptors for all structure fields of this StructureType and its supertypes.
     */
    public static final Descriptors DESCRIPTORS = new Descriptors( );

    $template.Fields:operationInterface(); separator="\n"$

    public static final class Descriptors {
        Descriptors( ) { 
        }
        $template.DescriptorsBody$
    }
}
>>

/***************************** The StructureType Implementation ************************/

/**
 * @param template com.sap.tc.moin.repository.jmigenerator.template.JmiGeneratorStructureTypeImplTemplate
 */
StructureTypeImpl(template) ::= <<
$template:javaHeader()$

public final class $template.JavaName$$if (template.Extends)$ extends $template.Extends; separator=","$$endif$$if (template.Implements)$ implements $template.Implements; separator=","$$endif$
{
    private static final long serialVersionUID = 1L;

    private static final java.util.List<String> QUALIFIED_NAME = java.util.Collections.unmodifiableList(java.util.Arrays.asList(new String[] { $template.QualifiedNameForStringArrayInitializer$ })); $template.QualifiedName:nonnlsdyn(); separator=" "$
    
    private static final java.util.List<String> STRUCTURE_FIELD_NAMES = java.util.Collections.unmodifiableList(java.util.Arrays.asList(new String[] { $template.FieldNamesForStringArrayInitializer$ })); $template.Fields:nonnlsdyn(); separator=" "$

    $featureId(template)$

    // default constructor
    public $template.JavaName$() {
        super();
    }
    // JMI constructor
    public $template.JavaName$(java.lang.Object workspace, com.sap.tc.moin.repository.mmi.reflect.RefObject metaObject) {
        super(workspace, metaObject);
    }

    protected java.util.List<String> ___getTypeName() {
        return QUALIFIED_NAME;
    }

    protected java.util.List<String> ___getFieldNames() {
        return STRUCTURE_FIELD_NAMES;
    }

    // variable declarations
    $template.AttributeDeclarations:attributeDecl(); separator="\n";$
    // fields
    $template.Fields:operationImpl(); separator="\n"$

    $refGetValue(template)$

    $template.Features: refAttributeSetters(); separator="\n"$
    $refSetValueInternal(template)$
}
>>

/********************* Sub-templates *********************/

/**
 * @param operation com.sap.tc.moin.repository.jmigenerator.template.JmiGeneratorClassOperation
 */
operationImpl(operation) ::= <<
$operation.Visibility$ $operation.Type$ $operation.AccessorName$($if (operation.Parameters)$$operation.Parameters:param(); separator=", "$$else$$endif$) throws $if (operation.Exceptions)$$operation.Exceptions$ $else$ JmiException$endif$
{
    return $operation.VariableName$;
}
>>

/**
 * @param template com.sap.tc.moin.repository.jmigenerator.template.JmiGeneratorStructureTypeImplTemplate
 */
refGetValue(template) ::= <<
// get a value
public Object refGetValue(String featureName) {
$if (template.FeatureIds)$
    Object result = null;
    java.lang.Integer featureId = FEATURE_IDS.get(featureName);
    if (featureId == null) {
        throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException(featureName, get___MetaObject(), "refGetValue(String)"); $nonnls1()$
    }
    switch (featureId) {
        $template.Features: featureGetValue(); separator="\n"$
        default:
            throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException(featureName, null, "refGetValue(String)"); $nonnls1()$
    }
    return result;
$else$
    throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException(featureName, get___MetaObject(), "refGetValue(String)"); $nonnls1()$
$endif$
}

$if (template.FieldInitializations)$
public void initialize___Values(com.sap.tc.moin.repository.core.CoreConnection connection) {
    $template.FieldInitializations: typedElementInitialize(); separator="\n"$
}
$endif$
>>

/**
 * @param template com.sap.tc.moin.repository.jmigenerator.template.JmiGeneratorStructureTypeImplTemplate
 */
refSetValueInternal(template) ::= <<
// set the value internally
public void set___Value(String featureName, Object value) {
$if (template.FeatureIds)$
    switch (FEATURE_IDS.get(featureName)) {
        $template.Features: featureSetValueInternal(); separator="\n"$
        default:
            throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException(featureName, null, "set___Value(String)"); $nonnls1()$
    }
$else$
    throw new com.sap.tc.moin.repository.mmi.reflect.InvalidCallException(featureName, null, "set___Value(String)"); $nonnls1()$
$endif$
}
>>

/**
 * @param feature com.sap.tc.moin.repository.jmigenerator.template.JmiGeneratorFeature
 */
refAttributeSetters(feature) ::= <<
public void $feature.MutatorNameInternal$($feature.JavaImplementationType$ newValue) {
    $feature.Attribute.VariableName$ = newValue;
}
>>

