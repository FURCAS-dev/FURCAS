grammar org.eclipse.emf.query2.Query hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate query "http://www.eclipse.org/emf/query2/Query"

Model:
	(imports+=Import)*
	(defaultQuery=MQLquery)?
	(namedQueries+=NamedQuery)*
;

Import :
	'import' importURI=STRING;

NamedQuery:
	name=ID ":" query=MQLquery
;

MQLquery :
	"select" selectEntries+=SelectEntry ("," selectEntries+=SelectEntry)* "from" fromEntries+=FromEntry ("," fromEntries+=FromEntry)* ("where" whereEntry=WhereEntry)?
;

SelectEntry:
	select=[FromEntry] ("." attribute=[ecore::EAttribute])?
; 

FromEntry:
	type=[ecore::EClass] (withoutsubtypes?="withoutsubtypes")? "as" alias=ID (scopeClause=ScopeClause)?
;

ScopeClause:
	ResourceScope | ElementScope
;

ResourceScope:
	(notIn?="not")? "in" "resources" "{" uris+=STRING ("," uris+=STRING)* "}"
;

ElementScope:
	(notIn?="not")? "in" "elements" "{" uris+=STRING ("," uris+=STRING)* "}"
;

WhereEntry returns WhereEntry:
	AndWhereEntry ({OrWhereEntry.entries+=current} 
    	("or" entries+=AndWhereEntry)+)?
;
 
AndWhereEntry returns WhereEntry:
	ConcreteWhereEntry ({AndWhereEntry.entries+=current} 
    	("and" entries+=ConcreteWhereEntry)+)?

;

ConcreteWhereEntry returns WhereEntry:
	ParWhereEntry | AttributeWhereEntry | ReferenceWhereEntry | AliasWhereEntry | NullWhereEntry
;

ParWhereEntry  returns WhereEntry:
	"(" WhereEntry ")"
;

AttributeWhereEntry:
	NumericAttributeWhereEntry | StringAttributeWhereEntry | BooleanAttributeWhereEntry | VariableWhereEntry
;

NumericAttributeWhereEntry:
	DoubleWhereEntry | LongWhereEntry
;

DoubleWhereEntry:
	alias=[FromEntry] "." attribute=[ecore::EAttribute] operator=NumericOperator value=SIGNED_DOUBLE
;

LongWhereEntry:
	alias=[FromEntry] "." attribute=[ecore::EAttribute] operator=NumericOperator value=SINGED_LONG
;

VariableWhereEntry:
	alias=[FromEntry] "." attribute=[ecore::EAttribute] operator=NumericOperator rightAlias=[FromEntry]"." rightAttribute=[ecore::EAttribute]
;

enum NumericOperator:
	lessThen="<" | greaterThen=">" | lessEqual="<=" | greaterEqual=">=" | equal="=" | notEqual="!="
;

StringAttributeWhereEntry:
	alias=[FromEntry] "." attribute=[ecore::EAttribute] operator=StringOperator pattern=STRING
;

enum StringOperator:
	equal="=" | notEqual="!=" | like="like" | notLike="notlike"
;

BooleanAttributeWhereEntry:
	alias=[FromEntry] "." attribute=[ecore::EAttribute] operator=BooleanOperator (isTrue?="true" | "false")
;

enum BooleanOperator:
	equal="=" | notEqual="!="
;

ReferenceWhereEntry:
	ReferenceAliasWhereEntry | SubselectWhereEntry
;

NullWhereEntry:
	alias=[FromEntry] "." feature=[ecore::EStructuralFeature] operator=BooleanOperator "null"
;

ReferenceAliasWhereEntry:
	alias=[FromEntry] "." reference=[ecore::EReference] "=" rightAlias=[FromEntry]  
;

SubselectWhereEntry:
	alias=[FromEntry] "." reference=[ecore::EReference] (notIn?="not")? "in" "("subQuery=MQLquery")"  
;

AliasWhereEntry:
	alias=[FromEntry] "=" rightAlias=[FromEntry]
;


terminal SINGED_LONG returns ecore::ELong: '-'?('0'..'9')+;	
terminal SIGNED_DOUBLE returns ecore::EDouble: '-'?('0'..'9')+ ('.' ('0'..'9')+)?;

terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
terminal STRING	: 
			'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
			"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
		; 
terminal ML_COMMENT	: '/*' -> '*/';
terminal SL_COMMENT 	: '//' !('\n'|'\r')* ('\r'? '\n')?;

terminal WS			: (' '|'\t'|'\r'|'\n')+;