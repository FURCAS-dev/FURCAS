/*
* generated by Xtext
*/

package org.eclipse.emf.query2.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;


@Singleton
public class QueryGrammarAccess implements IGrammarAccess {
	
	
	public class ModelElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cDefaultQueryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefaultQueryMQLqueryParserRuleCall_1_0 = (RuleCall)cDefaultQueryAssignment_1.eContents().get(0);
		private final Assignment cNamedQueriesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNamedQueriesNamedQueryParserRuleCall_2_0 = (RuleCall)cNamedQueriesAssignment_2.eContents().get(0);
		
		//Model:
		//  imports+=Import* defaultQuery=MQLquery? namedQueries+=NamedQuery*;
		public ParserRule getRule() { return rule; }

		//imports+=Import* defaultQuery=MQLquery? namedQueries+=NamedQuery*
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//defaultQuery=MQLquery?
		public Assignment getDefaultQueryAssignment_1() { return cDefaultQueryAssignment_1; }

		//MQLquery
		public RuleCall getDefaultQueryMQLqueryParserRuleCall_1_0() { return cDefaultQueryMQLqueryParserRuleCall_1_0; }

		//namedQueries+=NamedQuery*
		public Assignment getNamedQueriesAssignment_2() { return cNamedQueriesAssignment_2; }

		//NamedQuery
		public RuleCall getNamedQueriesNamedQueryParserRuleCall_2_0() { return cNamedQueriesNamedQueryParserRuleCall_2_0; }
	}

	public class ImportElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImpURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImpURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImpURIAssignment_1.eContents().get(0);
		
		//Import:
		//  "import" impURI=STRING;
		public ParserRule getRule() { return rule; }

		//"import" impURI=STRING
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//impURI=STRING
		public Assignment getImpURIAssignment_1() { return cImpURIAssignment_1; }

		//STRING
		public RuleCall getImpURISTRINGTerminalRuleCall_1_0() { return cImpURISTRINGTerminalRuleCall_1_0; }
	}

	public class NamedQueryElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamedQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cQueryAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cQueryMQLqueryParserRuleCall_2_0 = (RuleCall)cQueryAssignment_2.eContents().get(0);
		
		//NamedQuery:
		//  name=ID ":" query=MQLquery;
		public ParserRule getRule() { return rule; }

		//name=ID ":" query=MQLquery
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//query=MQLquery
		public Assignment getQueryAssignment_2() { return cQueryAssignment_2; }

		//MQLquery
		public RuleCall getQueryMQLqueryParserRuleCall_2_0() { return cQueryMQLqueryParserRuleCall_2_0; }
	}

	public class MQLqueryElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MQLquery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFromKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFromEntriesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFromEntriesFromEntryParserRuleCall_1_0 = (RuleCall)cFromEntriesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFromEntriesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFromEntriesFromEntryParserRuleCall_2_1_0 = (RuleCall)cFromEntriesAssignment_2_1.eContents().get(0);
		private final Keyword cSelectKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSelectEntriesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSelectEntriesSelectEntryParserRuleCall_4_0 = (RuleCall)cSelectEntriesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSelectEntriesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cSelectEntriesSelectEntryParserRuleCall_5_1_0 = (RuleCall)cSelectEntriesAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cWhereKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cWhereEntryAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cWhereEntryWhereEntryParserRuleCall_6_1_0 = (RuleCall)cWhereEntryAssignment_6_1.eContents().get(0);
		
		//MQLquery:
		//  "from" fromEntries+=FromEntry ("," fromEntries+=FromEntry)* "select" selectEntries+=
		//  SelectEntry ("," selectEntries+=SelectEntry)* ("where" whereEntry=WhereEntry)?;
		public ParserRule getRule() { return rule; }

		//"from" fromEntries+=FromEntry ("," fromEntries+=FromEntry)* "select" selectEntries+=
		//SelectEntry ("," selectEntries+=SelectEntry)* ("where" whereEntry=WhereEntry)?
		public Group getGroup() { return cGroup; }

		//"from"
		public Keyword getFromKeyword_0() { return cFromKeyword_0; }

		//fromEntries+=FromEntry
		public Assignment getFromEntriesAssignment_1() { return cFromEntriesAssignment_1; }

		//FromEntry
		public RuleCall getFromEntriesFromEntryParserRuleCall_1_0() { return cFromEntriesFromEntryParserRuleCall_1_0; }

		//("," fromEntries+=FromEntry)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//fromEntries+=FromEntry
		public Assignment getFromEntriesAssignment_2_1() { return cFromEntriesAssignment_2_1; }

		//FromEntry
		public RuleCall getFromEntriesFromEntryParserRuleCall_2_1_0() { return cFromEntriesFromEntryParserRuleCall_2_1_0; }

		//"select"
		public Keyword getSelectKeyword_3() { return cSelectKeyword_3; }

		//selectEntries+=SelectEntry
		public Assignment getSelectEntriesAssignment_4() { return cSelectEntriesAssignment_4; }

		//SelectEntry
		public RuleCall getSelectEntriesSelectEntryParserRuleCall_4_0() { return cSelectEntriesSelectEntryParserRuleCall_4_0; }

		//("," selectEntries+=SelectEntry)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//selectEntries+=SelectEntry
		public Assignment getSelectEntriesAssignment_5_1() { return cSelectEntriesAssignment_5_1; }

		//SelectEntry
		public RuleCall getSelectEntriesSelectEntryParserRuleCall_5_1_0() { return cSelectEntriesSelectEntryParserRuleCall_5_1_0; }

		//("where" whereEntry=WhereEntry)?
		public Group getGroup_6() { return cGroup_6; }

		//"where"
		public Keyword getWhereKeyword_6_0() { return cWhereKeyword_6_0; }

		//whereEntry=WhereEntry
		public Assignment getWhereEntryAssignment_6_1() { return cWhereEntryAssignment_6_1; }

		//WhereEntry
		public RuleCall getWhereEntryWhereEntryParserRuleCall_6_1_0() { return cWhereEntryWhereEntryParserRuleCall_6_1_0; }
	}

	public class SelectEntryElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSelectAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSelectFromEntryCrossReference_0_0 = (CrossReference)cSelectAssignment_0.eContents().get(0);
		private final RuleCall cSelectFromEntryIDTerminalRuleCall_0_0_1 = (RuleCall)cSelectFromEntryCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAttributeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cAttributeEAttributeCrossReference_1_1_0 = (CrossReference)cAttributeAssignment_1_1.eContents().get(0);
		private final RuleCall cAttributeEAttributeIDTerminalRuleCall_1_1_0_1 = (RuleCall)cAttributeEAttributeCrossReference_1_1_0.eContents().get(1);
		
		//SelectEntry:
		//  select=[FromEntry] ("." attribute=[ecore::EAttribute])?;
		public ParserRule getRule() { return rule; }

		//select=[FromEntry] ("." attribute=[ecore::EAttribute])?
		public Group getGroup() { return cGroup; }

		//select=[FromEntry]
		public Assignment getSelectAssignment_0() { return cSelectAssignment_0; }

		//[FromEntry]
		public CrossReference getSelectFromEntryCrossReference_0_0() { return cSelectFromEntryCrossReference_0_0; }

		//ID
		public RuleCall getSelectFromEntryIDTerminalRuleCall_0_0_1() { return cSelectFromEntryIDTerminalRuleCall_0_0_1; }

		//("." attribute=[ecore::EAttribute])?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//attribute=[ecore::EAttribute]
		public Assignment getAttributeAssignment_1_1() { return cAttributeAssignment_1_1; }

		//[ecore::EAttribute]
		public CrossReference getAttributeEAttributeCrossReference_1_1_0() { return cAttributeEAttributeCrossReference_1_1_0; }

		//ID
		public RuleCall getAttributeEAttributeIDTerminalRuleCall_1_1_0_1() { return cAttributeEAttributeIDTerminalRuleCall_1_1_0_1; }
	}

	public class FromEntryElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FromEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeEClassCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeEClassIDTerminalRuleCall_0_0_1 = (RuleCall)cTypeEClassCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cWithoutsubtypesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cWithoutsubtypesWithoutsubtypesKeyword_1_0_0 = (Keyword)cWithoutsubtypesAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cWithoutsubtypesTypesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final CrossReference cWithoutsubtypesTypesEClassCrossReference_1_1_1_0 = (CrossReference)cWithoutsubtypesTypesAssignment_1_1_1.eContents().get(0);
		private final RuleCall cWithoutsubtypesTypesEClassIDTerminalRuleCall_1_1_1_0_1 = (RuleCall)cWithoutsubtypesTypesEClassCrossReference_1_1_1_0.eContents().get(1);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Assignment cWithoutsubtypesTypesAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final CrossReference cWithoutsubtypesTypesEClassCrossReference_1_1_2_1_0 = (CrossReference)cWithoutsubtypesTypesAssignment_1_1_2_1.eContents().get(0);
		private final RuleCall cWithoutsubtypesTypesEClassIDTerminalRuleCall_1_1_2_1_0_1 = (RuleCall)cWithoutsubtypesTypesEClassCrossReference_1_1_2_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAliasAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAliasIDTerminalRuleCall_3_0 = (RuleCall)cAliasAssignment_3.eContents().get(0);
		private final Assignment cScopeClauseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cScopeClauseScopeClauseParserRuleCall_4_0 = (RuleCall)cScopeClauseAssignment_4.eContents().get(0);
		
		//FromEntry:
		//  type=[ecore::EClass] (withoutsubtypes?="withoutsubtypes" ("{" withoutsubtypesTypes
		//  +=[ecore::EClass] ("," withoutsubtypesTypes+=[ecore::EClass])* "}")?)? "as" alias=ID
		//  scopeClause=ScopeClause?;
		public ParserRule getRule() { return rule; }

		//type=[ecore::EClass] (withoutsubtypes?="withoutsubtypes" ("{" withoutsubtypesTypes
		//+=[ecore::EClass] ("," withoutsubtypesTypes+=[ecore::EClass])* "}")?)? "as" alias=ID
		//scopeClause=ScopeClause?
		public Group getGroup() { return cGroup; }

		//type=[ecore::EClass]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[ecore::EClass]
		public CrossReference getTypeEClassCrossReference_0_0() { return cTypeEClassCrossReference_0_0; }

		//ID
		public RuleCall getTypeEClassIDTerminalRuleCall_0_0_1() { return cTypeEClassIDTerminalRuleCall_0_0_1; }

		//(withoutsubtypes?="withoutsubtypes" ("{" withoutsubtypesTypes+=[ecore::EClass] (","
		//withoutsubtypesTypes+=[ecore::EClass])* "}")?)?
		public Group getGroup_1() { return cGroup_1; }

		//withoutsubtypes?="withoutsubtypes"
		public Assignment getWithoutsubtypesAssignment_1_0() { return cWithoutsubtypesAssignment_1_0; }

		//"withoutsubtypes"
		public Keyword getWithoutsubtypesWithoutsubtypesKeyword_1_0_0() { return cWithoutsubtypesWithoutsubtypesKeyword_1_0_0; }

		//("{" withoutsubtypesTypes+=[ecore::EClass] ("," withoutsubtypesTypes+=[ecore::
		//EClass])* "}")?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_1_0() { return cLeftCurlyBracketKeyword_1_1_0; }

		//withoutsubtypesTypes+=[ecore::EClass]
		public Assignment getWithoutsubtypesTypesAssignment_1_1_1() { return cWithoutsubtypesTypesAssignment_1_1_1; }

		//[ecore::EClass]
		public CrossReference getWithoutsubtypesTypesEClassCrossReference_1_1_1_0() { return cWithoutsubtypesTypesEClassCrossReference_1_1_1_0; }

		//ID
		public RuleCall getWithoutsubtypesTypesEClassIDTerminalRuleCall_1_1_1_0_1() { return cWithoutsubtypesTypesEClassIDTerminalRuleCall_1_1_1_0_1; }

		//("," withoutsubtypesTypes+=[ecore::EClass])*
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }

		//","
		public Keyword getCommaKeyword_1_1_2_0() { return cCommaKeyword_1_1_2_0; }

		//withoutsubtypesTypes+=[ecore::EClass]
		public Assignment getWithoutsubtypesTypesAssignment_1_1_2_1() { return cWithoutsubtypesTypesAssignment_1_1_2_1; }

		//[ecore::EClass]
		public CrossReference getWithoutsubtypesTypesEClassCrossReference_1_1_2_1_0() { return cWithoutsubtypesTypesEClassCrossReference_1_1_2_1_0; }

		//ID
		public RuleCall getWithoutsubtypesTypesEClassIDTerminalRuleCall_1_1_2_1_0_1() { return cWithoutsubtypesTypesEClassIDTerminalRuleCall_1_1_2_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_1_3() { return cRightCurlyBracketKeyword_1_1_3; }

		//"as"
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }

		//alias=ID
		public Assignment getAliasAssignment_3() { return cAliasAssignment_3; }

		//ID
		public RuleCall getAliasIDTerminalRuleCall_3_0() { return cAliasIDTerminalRuleCall_3_0; }

		//scopeClause=ScopeClause?
		public Assignment getScopeClauseAssignment_4() { return cScopeClauseAssignment_4; }

		//ScopeClause
		public RuleCall getScopeClauseScopeClauseParserRuleCall_4_0() { return cScopeClauseScopeClauseParserRuleCall_4_0; }
	}

	public class ScopeClauseElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScopeClause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cResourceScopeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cElementScopeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ScopeClause:
		//  ResourceScope|ElementScope;
		public ParserRule getRule() { return rule; }

		//ResourceScope|ElementScope
		public Alternatives getAlternatives() { return cAlternatives; }

		//ResourceScope
		public RuleCall getResourceScopeParserRuleCall_0() { return cResourceScopeParserRuleCall_0; }

		//ElementScope
		public RuleCall getElementScopeParserRuleCall_1() { return cElementScopeParserRuleCall_1; }
	}

	public class ResourceScopeElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResourceScope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNotInAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNotInNotKeyword_0_0 = (Keyword)cNotInAssignment_0.eContents().get(0);
		private final Keyword cInKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cResourcesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUrisAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUrisSTRINGTerminalRuleCall_4_0 = (RuleCall)cUrisAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cUrisAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cUrisSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cUrisAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ResourceScope:
		//  notIn?="not"? "in" "resources" "{" uris+=STRING ("," uris+=STRING)* "}";
		public ParserRule getRule() { return rule; }

		//notIn?="not"? "in" "resources" "{" uris+=STRING ("," uris+=STRING)* "}"
		public Group getGroup() { return cGroup; }

		//notIn?="not"?
		public Assignment getNotInAssignment_0() { return cNotInAssignment_0; }

		//"not"
		public Keyword getNotInNotKeyword_0_0() { return cNotInNotKeyword_0_0; }

		//"in"
		public Keyword getInKeyword_1() { return cInKeyword_1; }

		//"resources"
		public Keyword getResourcesKeyword_2() { return cResourcesKeyword_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//uris+=STRING
		public Assignment getUrisAssignment_4() { return cUrisAssignment_4; }

		//STRING
		public RuleCall getUrisSTRINGTerminalRuleCall_4_0() { return cUrisSTRINGTerminalRuleCall_4_0; }

		//("," uris+=STRING)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//uris+=STRING
		public Assignment getUrisAssignment_5_1() { return cUrisAssignment_5_1; }

		//STRING
		public RuleCall getUrisSTRINGTerminalRuleCall_5_1_0() { return cUrisSTRINGTerminalRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ElementScopeElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementScope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNotInAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNotInNotKeyword_0_0 = (Keyword)cNotInAssignment_0.eContents().get(0);
		private final Keyword cInKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cElementsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUrisAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUrisSTRINGTerminalRuleCall_4_0 = (RuleCall)cUrisAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cUrisAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cUrisSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cUrisAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ElementScope:
		//  notIn?="not"? "in" "elements" "{" uris+=STRING ("," uris+=STRING)* "}";
		public ParserRule getRule() { return rule; }

		//notIn?="not"? "in" "elements" "{" uris+=STRING ("," uris+=STRING)* "}"
		public Group getGroup() { return cGroup; }

		//notIn?="not"?
		public Assignment getNotInAssignment_0() { return cNotInAssignment_0; }

		//"not"
		public Keyword getNotInNotKeyword_0_0() { return cNotInNotKeyword_0_0; }

		//"in"
		public Keyword getInKeyword_1() { return cInKeyword_1; }

		//"elements"
		public Keyword getElementsKeyword_2() { return cElementsKeyword_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//uris+=STRING
		public Assignment getUrisAssignment_4() { return cUrisAssignment_4; }

		//STRING
		public RuleCall getUrisSTRINGTerminalRuleCall_4_0() { return cUrisSTRINGTerminalRuleCall_4_0; }

		//("," uris+=STRING)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//uris+=STRING
		public Assignment getUrisAssignment_5_1() { return cUrisAssignment_5_1; }

		//STRING
		public RuleCall getUrisSTRINGTerminalRuleCall_5_1_0() { return cUrisSTRINGTerminalRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class WhereEntryElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhereEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndWhereEntryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrWhereEntryEntriesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cOrKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cEntriesAndWhereEntryParserRuleCall_1_1_1_0 = (RuleCall)cEntriesAssignment_1_1_1.eContents().get(0);
		
		//WhereEntry:
		//  AndWhereEntry ({OrWhereEntry.entries+=current} ("or" entries+=AndWhereEntry)+)?;
		public ParserRule getRule() { return rule; }

		//AndWhereEntry ({OrWhereEntry.entries+=current} ("or" entries+=AndWhereEntry)+)?
		public Group getGroup() { return cGroup; }

		//AndWhereEntry
		public RuleCall getAndWhereEntryParserRuleCall_0() { return cAndWhereEntryParserRuleCall_0; }

		//({OrWhereEntry.entries+=current} ("or" entries+=AndWhereEntry)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{OrWhereEntry.entries+=current}
		public Action getOrWhereEntryEntriesAction_1_0() { return cOrWhereEntryEntriesAction_1_0; }

		//("or" entries+=AndWhereEntry)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"or"
		public Keyword getOrKeyword_1_1_0() { return cOrKeyword_1_1_0; }

		//entries+=AndWhereEntry
		public Assignment getEntriesAssignment_1_1_1() { return cEntriesAssignment_1_1_1; }

		//AndWhereEntry
		public RuleCall getEntriesAndWhereEntryParserRuleCall_1_1_1_0() { return cEntriesAndWhereEntryParserRuleCall_1_1_1_0; }
	}

	public class AndWhereEntryElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndWhereEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConcreteWhereEntryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndWhereEntryEntriesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cAndKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cEntriesConcreteWhereEntryParserRuleCall_1_1_1_0 = (RuleCall)cEntriesAssignment_1_1_1.eContents().get(0);
		
		//AndWhereEntry returns WhereEntry:
		//  ConcreteWhereEntry ({AndWhereEntry.entries+=current} ("and" entries+=
		//  ConcreteWhereEntry)+)?;
		public ParserRule getRule() { return rule; }

		//ConcreteWhereEntry ({AndWhereEntry.entries+=current} ("and" entries+=
		//ConcreteWhereEntry)+)?
		public Group getGroup() { return cGroup; }

		//ConcreteWhereEntry
		public RuleCall getConcreteWhereEntryParserRuleCall_0() { return cConcreteWhereEntryParserRuleCall_0; }

		//({AndWhereEntry.entries+=current} ("and" entries+=ConcreteWhereEntry)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{AndWhereEntry.entries+=current}
		public Action getAndWhereEntryEntriesAction_1_0() { return cAndWhereEntryEntriesAction_1_0; }

		//("and" entries+=ConcreteWhereEntry)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"and"
		public Keyword getAndKeyword_1_1_0() { return cAndKeyword_1_1_0; }

		//entries+=ConcreteWhereEntry
		public Assignment getEntriesAssignment_1_1_1() { return cEntriesAssignment_1_1_1; }

		//ConcreteWhereEntry
		public RuleCall getEntriesConcreteWhereEntryParserRuleCall_1_1_1_0() { return cEntriesConcreteWhereEntryParserRuleCall_1_1_1_0; }
	}

	public class ConcreteWhereEntryElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConcreteWhereEntry");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParWhereEntryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionWhereEntryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConcreteWhereEntry returns WhereEntry:
		//  ParWhereEntry|ExpressionWhereEntry;
		public ParserRule getRule() { return rule; }

		//ParWhereEntry|ExpressionWhereEntry
		public Alternatives getAlternatives() { return cAlternatives; }

		//ParWhereEntry
		public RuleCall getParWhereEntryParserRuleCall_0() { return cParWhereEntryParserRuleCall_0; }

		//ExpressionWhereEntry
		public RuleCall getExpressionWhereEntryParserRuleCall_1() { return cExpressionWhereEntryParserRuleCall_1; }
	}

	public class ParWhereEntryElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParWhereEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cWhereEntryParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ParWhereEntry returns WhereEntry:
		//  "(" WhereEntry ")";
		public ParserRule getRule() { return rule; }

		//"(" WhereEntry ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//WhereEntry
		public RuleCall getWhereEntryParserRuleCall_1() { return cWhereEntryParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class ExpressionWhereEntryElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionWhereEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLhsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLhsAliasAttributeExpressionParserRuleCall_0_0 = (RuleCall)cLhsAssignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cRhsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRhsExpressionParserRuleCall_2_0 = (RuleCall)cRhsAssignment_2.eContents().get(0);
		
		//ExpressionWhereEntry:
		//  lhs=AliasAttributeExpression operator=Operator rhs=Expression;
		public ParserRule getRule() { return rule; }

		//lhs=AliasAttributeExpression operator=Operator rhs=Expression
		public Group getGroup() { return cGroup; }

		//lhs=AliasAttributeExpression
		public Assignment getLhsAssignment_0() { return cLhsAssignment_0; }

		//AliasAttributeExpression
		public RuleCall getLhsAliasAttributeExpressionParserRuleCall_0_0() { return cLhsAliasAttributeExpressionParserRuleCall_0_0; }

		//operator=Operator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_1_0() { return cOperatorOperatorEnumRuleCall_1_0; }

		//rhs=Expression
		public Assignment getRhsAssignment_2() { return cRhsAssignment_2; }

		//Expression
		public RuleCall getRhsExpressionParserRuleCall_2_0() { return cRhsExpressionParserRuleCall_2_0; }
	}

	public class AliasAttributeExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AliasAttributeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAliasAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cAliasFromEntryCrossReference_0_0 = (CrossReference)cAliasAssignment_0.eContents().get(0);
		private final RuleCall cAliasFromEntryIDTerminalRuleCall_0_0_1 = (RuleCall)cAliasFromEntryCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAttributeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cAttributeEStructuralFeatureCrossReference_1_1_0 = (CrossReference)cAttributeAssignment_1_1.eContents().get(0);
		private final RuleCall cAttributeEStructuralFeatureIDTerminalRuleCall_1_1_0_1 = (RuleCall)cAttributeEStructuralFeatureCrossReference_1_1_0.eContents().get(1);
		
		//AliasAttributeExpression:
		//  alias=[FromEntry] ("." attribute=[ecore::EStructuralFeature])?;
		public ParserRule getRule() { return rule; }

		//alias=[FromEntry] ("." attribute=[ecore::EStructuralFeature])?
		public Group getGroup() { return cGroup; }

		//alias=[FromEntry]
		public Assignment getAliasAssignment_0() { return cAliasAssignment_0; }

		//[FromEntry]
		public CrossReference getAliasFromEntryCrossReference_0_0() { return cAliasFromEntryCrossReference_0_0; }

		//ID
		public RuleCall getAliasFromEntryIDTerminalRuleCall_0_0_1() { return cAliasFromEntryIDTerminalRuleCall_0_0_1; }

		//("." attribute=[ecore::EStructuralFeature])?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//attribute=[ecore::EStructuralFeature]
		public Assignment getAttributeAssignment_1_1() { return cAttributeAssignment_1_1; }

		//[ecore::EStructuralFeature]
		public CrossReference getAttributeEStructuralFeatureCrossReference_1_1_0() { return cAttributeEStructuralFeatureCrossReference_1_1_0; }

		//ID
		public RuleCall getAttributeEStructuralFeatureIDTerminalRuleCall_1_1_0_1() { return cAttributeEStructuralFeatureIDTerminalRuleCall_1_1_0_1; }
	}

	public class ExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAliasAttributeExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDoubleExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLongExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStringExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNullExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBooleanExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cQueryExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Expression:
		//  AliasAttributeExpression|DoubleExpression|LongExpression|StringExpression|
		//  NullExpression|BooleanExpression|QueryExpression;
		public ParserRule getRule() { return rule; }

		//AliasAttributeExpression|DoubleExpression|LongExpression|StringExpression|
		//NullExpression|BooleanExpression|QueryExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//AliasAttributeExpression
		public RuleCall getAliasAttributeExpressionParserRuleCall_0() { return cAliasAttributeExpressionParserRuleCall_0; }

		//DoubleExpression
		public RuleCall getDoubleExpressionParserRuleCall_1() { return cDoubleExpressionParserRuleCall_1; }

		//LongExpression
		public RuleCall getLongExpressionParserRuleCall_2() { return cLongExpressionParserRuleCall_2; }

		//StringExpression
		public RuleCall getStringExpressionParserRuleCall_3() { return cStringExpressionParserRuleCall_3; }

		//NullExpression
		public RuleCall getNullExpressionParserRuleCall_4() { return cNullExpressionParserRuleCall_4; }

		//BooleanExpression
		public RuleCall getBooleanExpressionParserRuleCall_5() { return cBooleanExpressionParserRuleCall_5; }

		//QueryExpression
		public RuleCall getQueryExpressionParserRuleCall_6() { return cQueryExpressionParserRuleCall_6; }
	}

	public class DoubleExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoubleExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSIGNED_DOUBLETerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//DoubleExpression:
		//  value=SIGNED_DOUBLE;
		public ParserRule getRule() { return rule; }

		//value=SIGNED_DOUBLE
		public Assignment getValueAssignment() { return cValueAssignment; }

		//SIGNED_DOUBLE
		public RuleCall getValueSIGNED_DOUBLETerminalRuleCall_0() { return cValueSIGNED_DOUBLETerminalRuleCall_0; }
	}

	public class LongExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LongExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSINGED_LONGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//LongExpression:
		//  value=SINGED_LONG;
		public ParserRule getRule() { return rule; }

		//value=SINGED_LONG
		public Assignment getValueAssignment() { return cValueAssignment; }

		//SINGED_LONG
		public RuleCall getValueSINGED_LONGTerminalRuleCall_0() { return cValueSINGED_LONGTerminalRuleCall_0; }
	}

	public class StringExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringExpression:
		//  value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class NullExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NullExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cValueNullKeyword_0 = (Keyword)cValueAssignment.eContents().get(0);
		
		//NullExpression:
		//  value="null";
		public ParserRule getRule() { return rule; }

		//value="null"
		public Assignment getValueAssignment() { return cValueAssignment; }

		//"null"
		public Keyword getValueNullKeyword_0() { return cValueNullKeyword_0; }
	}

	public class BooleanExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTrueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cTrueTrueKeyword_0_0 = (Keyword)cTrueAssignment_0.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BooleanExpression:
		//  true?="true"|"false";
		public ParserRule getRule() { return rule; }

		//true?="true"|"false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//true?="true"
		public Assignment getTrueAssignment_0() { return cTrueAssignment_0; }

		//"true"
		public Keyword getTrueTrueKeyword_0_0() { return cTrueTrueKeyword_0_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class QueryExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QueryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueMQLqueryParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//QueryExpression:
		//  "(" value=MQLquery ")";
		public ParserRule getRule() { return rule; }

		//"(" value=MQLquery ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//value=MQLquery
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//MQLquery
		public RuleCall getValueMQLqueryParserRuleCall_1_0() { return cValueMQLqueryParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	
	
	public class OperatorElements implements IEnumRuleAccess {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLessThenEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLessThenLessThanSignKeyword_0_0 = (Keyword)cLessThenEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterThenEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThenGreaterThanSignKeyword_1_0 = (Keyword)cGreaterThenEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLessEqualEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLessEqualLessThanSignEqualsSignKeyword_2_0 = (Keyword)cLessEqualEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterEqualEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGreaterEqualGreaterThanSignEqualsSignKeyword_3_0 = (Keyword)cGreaterEqualEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cEqualEqualsSignKeyword_4_0 = (Keyword)cEqualEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cNotEqualEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cNotEqualExclamationMarkEqualsSignKeyword_5_0 = (Keyword)cNotEqualEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cLikeEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cLikeLikeKeyword_6_0 = (Keyword)cLikeEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cNotLikeEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cNotLikeNotLikeKeyword_7_0 = (Keyword)cNotLikeEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cNotInEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cNotInNotInKeyword_8_0 = (Keyword)cNotInEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cInEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cInInKeyword_9_0 = (Keyword)cInEnumLiteralDeclaration_9.eContents().get(0);
		
		//enum Operator:
		//  lessThen="<" | greaterThen=">" | lessEqual="<=" | greaterEqual=">=" | equal="=" | notEqual
		//  ="!=" | like | notLike="not like" | notIn="not in" | in;
		public EnumRule getRule() { return rule; }

		//lessThen="<" | greaterThen=">" | lessEqual="<=" | greaterEqual=">=" | equal="=" | notEqual
		//="!=" | like | notLike="not like" | notIn="not in" | in
		public Alternatives getAlternatives() { return cAlternatives; }

		//lessThen="<"
		public EnumLiteralDeclaration getLessThenEnumLiteralDeclaration_0() { return cLessThenEnumLiteralDeclaration_0; }

		//"<"
		public Keyword getLessThenLessThanSignKeyword_0_0() { return cLessThenLessThanSignKeyword_0_0; }

		//greaterThen=">"
		public EnumLiteralDeclaration getGreaterThenEnumLiteralDeclaration_1() { return cGreaterThenEnumLiteralDeclaration_1; }

		//">"
		public Keyword getGreaterThenGreaterThanSignKeyword_1_0() { return cGreaterThenGreaterThanSignKeyword_1_0; }

		//lessEqual="<="
		public EnumLiteralDeclaration getLessEqualEnumLiteralDeclaration_2() { return cLessEqualEnumLiteralDeclaration_2; }

		//"<="
		public Keyword getLessEqualLessThanSignEqualsSignKeyword_2_0() { return cLessEqualLessThanSignEqualsSignKeyword_2_0; }

		//greaterEqual=">="
		public EnumLiteralDeclaration getGreaterEqualEnumLiteralDeclaration_3() { return cGreaterEqualEnumLiteralDeclaration_3; }

		//">="
		public Keyword getGreaterEqualGreaterThanSignEqualsSignKeyword_3_0() { return cGreaterEqualGreaterThanSignEqualsSignKeyword_3_0; }

		//equal="="
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_4() { return cEqualEnumLiteralDeclaration_4; }

		//"="
		public Keyword getEqualEqualsSignKeyword_4_0() { return cEqualEqualsSignKeyword_4_0; }

		//notEqual="!="
		public EnumLiteralDeclaration getNotEqualEnumLiteralDeclaration_5() { return cNotEqualEnumLiteralDeclaration_5; }

		//"!="
		public Keyword getNotEqualExclamationMarkEqualsSignKeyword_5_0() { return cNotEqualExclamationMarkEqualsSignKeyword_5_0; }

		//like
		public EnumLiteralDeclaration getLikeEnumLiteralDeclaration_6() { return cLikeEnumLiteralDeclaration_6; }

		//"like"
		public Keyword getLikeLikeKeyword_6_0() { return cLikeLikeKeyword_6_0; }

		//notLike="not like"
		public EnumLiteralDeclaration getNotLikeEnumLiteralDeclaration_7() { return cNotLikeEnumLiteralDeclaration_7; }

		//"not like"
		public Keyword getNotLikeNotLikeKeyword_7_0() { return cNotLikeNotLikeKeyword_7_0; }

		//notIn="not in"
		public EnumLiteralDeclaration getNotInEnumLiteralDeclaration_8() { return cNotInEnumLiteralDeclaration_8; }

		//"not in"
		public Keyword getNotInNotInKeyword_8_0() { return cNotInNotInKeyword_8_0; }

		//in
		public EnumLiteralDeclaration getInEnumLiteralDeclaration_9() { return cInEnumLiteralDeclaration_9; }

		//"in"
		public Keyword getInInKeyword_9_0() { return cInInKeyword_9_0; }
	}
	
	private ModelElements pModel;
	private ImportElements pImport;
	private NamedQueryElements pNamedQuery;
	private MQLqueryElements pMQLquery;
	private SelectEntryElements pSelectEntry;
	private FromEntryElements pFromEntry;
	private ScopeClauseElements pScopeClause;
	private ResourceScopeElements pResourceScope;
	private ElementScopeElements pElementScope;
	private WhereEntryElements pWhereEntry;
	private AndWhereEntryElements pAndWhereEntry;
	private ConcreteWhereEntryElements pConcreteWhereEntry;
	private ParWhereEntryElements pParWhereEntry;
	private ExpressionWhereEntryElements pExpressionWhereEntry;
	private AliasAttributeExpressionElements pAliasAttributeExpression;
	private ExpressionElements pExpression;
	private DoubleExpressionElements pDoubleExpression;
	private LongExpressionElements pLongExpression;
	private StringExpressionElements pStringExpression;
	private NullExpressionElements pNullExpression;
	private BooleanExpressionElements pBooleanExpression;
	private QueryExpressionElements pQueryExpression;
	private OperatorElements unknownRuleOperator;
	private TerminalRule tSINGED_LONG;
	private TerminalRule tSIGNED_DOUBLE;
	private TerminalRule tID;
	private TerminalRule tSTRING;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public QueryGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	//Model:
	//  imports+=Import* defaultQuery=MQLquery? namedQueries+=NamedQuery*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Import:
	//  "import" impURI=STRING;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//NamedQuery:
	//  name=ID ":" query=MQLquery;
	public NamedQueryElements getNamedQueryAccess() {
		return (pNamedQuery != null) ? pNamedQuery : (pNamedQuery = new NamedQueryElements());
	}
	
	public ParserRule getNamedQueryRule() {
		return getNamedQueryAccess().getRule();
	}

	//MQLquery:
	//  "from" fromEntries+=FromEntry ("," fromEntries+=FromEntry)* "select" selectEntries+=
	//  SelectEntry ("," selectEntries+=SelectEntry)* ("where" whereEntry=WhereEntry)?;
	public MQLqueryElements getMQLqueryAccess() {
		return (pMQLquery != null) ? pMQLquery : (pMQLquery = new MQLqueryElements());
	}
	
	public ParserRule getMQLqueryRule() {
		return getMQLqueryAccess().getRule();
	}

	//SelectEntry:
	//  select=[FromEntry] ("." attribute=[ecore::EAttribute])?;
	public SelectEntryElements getSelectEntryAccess() {
		return (pSelectEntry != null) ? pSelectEntry : (pSelectEntry = new SelectEntryElements());
	}
	
	public ParserRule getSelectEntryRule() {
		return getSelectEntryAccess().getRule();
	}

	//FromEntry:
	//  type=[ecore::EClass] (withoutsubtypes?="withoutsubtypes" ("{" withoutsubtypesTypes
	//  +=[ecore::EClass] ("," withoutsubtypesTypes+=[ecore::EClass])* "}")?)? "as" alias=ID
	//  scopeClause=ScopeClause?;
	public FromEntryElements getFromEntryAccess() {
		return (pFromEntry != null) ? pFromEntry : (pFromEntry = new FromEntryElements());
	}
	
	public ParserRule getFromEntryRule() {
		return getFromEntryAccess().getRule();
	}

	//ScopeClause:
	//  ResourceScope|ElementScope;
	public ScopeClauseElements getScopeClauseAccess() {
		return (pScopeClause != null) ? pScopeClause : (pScopeClause = new ScopeClauseElements());
	}
	
	public ParserRule getScopeClauseRule() {
		return getScopeClauseAccess().getRule();
	}

	//ResourceScope:
	//  notIn?="not"? "in" "resources" "{" uris+=STRING ("," uris+=STRING)* "}";
	public ResourceScopeElements getResourceScopeAccess() {
		return (pResourceScope != null) ? pResourceScope : (pResourceScope = new ResourceScopeElements());
	}
	
	public ParserRule getResourceScopeRule() {
		return getResourceScopeAccess().getRule();
	}

	//ElementScope:
	//  notIn?="not"? "in" "elements" "{" uris+=STRING ("," uris+=STRING)* "}";
	public ElementScopeElements getElementScopeAccess() {
		return (pElementScope != null) ? pElementScope : (pElementScope = new ElementScopeElements());
	}
	
	public ParserRule getElementScopeRule() {
		return getElementScopeAccess().getRule();
	}

	//WhereEntry:
	//  AndWhereEntry ({OrWhereEntry.entries+=current} ("or" entries+=AndWhereEntry)+)?;
	public WhereEntryElements getWhereEntryAccess() {
		return (pWhereEntry != null) ? pWhereEntry : (pWhereEntry = new WhereEntryElements());
	}
	
	public ParserRule getWhereEntryRule() {
		return getWhereEntryAccess().getRule();
	}

	//AndWhereEntry returns WhereEntry:
	//  ConcreteWhereEntry ({AndWhereEntry.entries+=current} ("and" entries+=
	//  ConcreteWhereEntry)+)?;
	public AndWhereEntryElements getAndWhereEntryAccess() {
		return (pAndWhereEntry != null) ? pAndWhereEntry : (pAndWhereEntry = new AndWhereEntryElements());
	}
	
	public ParserRule getAndWhereEntryRule() {
		return getAndWhereEntryAccess().getRule();
	}

	//ConcreteWhereEntry returns WhereEntry:
	//  ParWhereEntry|ExpressionWhereEntry;
	public ConcreteWhereEntryElements getConcreteWhereEntryAccess() {
		return (pConcreteWhereEntry != null) ? pConcreteWhereEntry : (pConcreteWhereEntry = new ConcreteWhereEntryElements());
	}
	
	public ParserRule getConcreteWhereEntryRule() {
		return getConcreteWhereEntryAccess().getRule();
	}

	//ParWhereEntry returns WhereEntry:
	//  "(" WhereEntry ")";
	public ParWhereEntryElements getParWhereEntryAccess() {
		return (pParWhereEntry != null) ? pParWhereEntry : (pParWhereEntry = new ParWhereEntryElements());
	}
	
	public ParserRule getParWhereEntryRule() {
		return getParWhereEntryAccess().getRule();
	}

	//ExpressionWhereEntry:
	//  lhs=AliasAttributeExpression operator=Operator rhs=Expression;
	public ExpressionWhereEntryElements getExpressionWhereEntryAccess() {
		return (pExpressionWhereEntry != null) ? pExpressionWhereEntry : (pExpressionWhereEntry = new ExpressionWhereEntryElements());
	}
	
	public ParserRule getExpressionWhereEntryRule() {
		return getExpressionWhereEntryAccess().getRule();
	}

	//AliasAttributeExpression:
	//  alias=[FromEntry] ("." attribute=[ecore::EStructuralFeature])?;
	public AliasAttributeExpressionElements getAliasAttributeExpressionAccess() {
		return (pAliasAttributeExpression != null) ? pAliasAttributeExpression : (pAliasAttributeExpression = new AliasAttributeExpressionElements());
	}
	
	public ParserRule getAliasAttributeExpressionRule() {
		return getAliasAttributeExpressionAccess().getRule();
	}

	//Expression:
	//  AliasAttributeExpression|DoubleExpression|LongExpression|StringExpression|
	//  NullExpression|BooleanExpression|QueryExpression;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//DoubleExpression:
	//  value=SIGNED_DOUBLE;
	public DoubleExpressionElements getDoubleExpressionAccess() {
		return (pDoubleExpression != null) ? pDoubleExpression : (pDoubleExpression = new DoubleExpressionElements());
	}
	
	public ParserRule getDoubleExpressionRule() {
		return getDoubleExpressionAccess().getRule();
	}

	//LongExpression:
	//  value=SINGED_LONG;
	public LongExpressionElements getLongExpressionAccess() {
		return (pLongExpression != null) ? pLongExpression : (pLongExpression = new LongExpressionElements());
	}
	
	public ParserRule getLongExpressionRule() {
		return getLongExpressionAccess().getRule();
	}

	//StringExpression:
	//  value=STRING;
	public StringExpressionElements getStringExpressionAccess() {
		return (pStringExpression != null) ? pStringExpression : (pStringExpression = new StringExpressionElements());
	}
	
	public ParserRule getStringExpressionRule() {
		return getStringExpressionAccess().getRule();
	}

	//NullExpression:
	//  value="null";
	public NullExpressionElements getNullExpressionAccess() {
		return (pNullExpression != null) ? pNullExpression : (pNullExpression = new NullExpressionElements());
	}
	
	public ParserRule getNullExpressionRule() {
		return getNullExpressionAccess().getRule();
	}

	//BooleanExpression:
	//  true?="true"|"false";
	public BooleanExpressionElements getBooleanExpressionAccess() {
		return (pBooleanExpression != null) ? pBooleanExpression : (pBooleanExpression = new BooleanExpressionElements());
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}

	//QueryExpression:
	//  "(" value=MQLquery ")";
	public QueryExpressionElements getQueryExpressionAccess() {
		return (pQueryExpression != null) ? pQueryExpression : (pQueryExpression = new QueryExpressionElements());
	}
	
	public ParserRule getQueryExpressionRule() {
		return getQueryExpressionAccess().getRule();
	}

	//enum Operator:
	//  lessThen="<" | greaterThen=">" | lessEqual="<=" | greaterEqual=">=" | equal="=" | notEqual
	//  ="!=" | like | notLike="not like" | notIn="not in" | in;
	public OperatorElements getOperatorAccess() {
		return (unknownRuleOperator != null) ? unknownRuleOperator : (unknownRuleOperator = new OperatorElements());
	}
	
	public EnumRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}

	//terminal SINGED_LONG returns ecore::ELong:
	//  "-"? "0".."9"+;
	public TerminalRule getSINGED_LONGRule() {
		return (tSINGED_LONG != null) ? tSINGED_LONG : (tSINGED_LONG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SINGED_LONG"));
	} 

	//terminal SIGNED_DOUBLE returns ecore::EDouble:
	//  "-"? "0".."9"+ ("." "0".."9"+)?;
	public TerminalRule getSIGNED_DOUBLERule() {
		return (tSIGNED_DOUBLE != null) ? tSIGNED_DOUBLE : (tSIGNED_DOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SIGNED_DOUBLE"));
	} 

	//terminal ID:
	//  "^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal STRING:
	//  "\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" |
	//  "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal ML_COMMENT:
	//  "/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//  "//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//  (" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 
}
