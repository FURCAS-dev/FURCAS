/*
* generated by Xtext
*/
package org.eclipse.emf.query2.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.eclipse.emf.query2.services.QueryGrammarAccess;

import com.google.inject.Inject;

public class QueryParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private QueryGrammarAccess grammarAccess;
		
	public QueryGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_Group(this, this, 0, inst);
			case 1: return new Import_Group(this, this, 1, inst);
			case 2: return new NamedQuery_Group(this, this, 2, inst);
			case 3: return new MQLquery_Group(this, this, 3, inst);
			case 4: return new SelectEntry_Group(this, this, 4, inst);
			case 5: return new FromEntry_Group(this, this, 5, inst);
			case 6: return new ScopeClause_Alternatives(this, this, 6, inst);
			case 7: return new ResourceScope_Group(this, this, 7, inst);
			case 8: return new ElementScope_Group(this, this, 8, inst);
			case 9: return new WhereEntry_Group(this, this, 9, inst);
			case 10: return new AndWhereEntry_Group(this, this, 10, inst);
			case 11: return new ConcreteWhereEntry_Alternatives(this, this, 11, inst);
			case 12: return new ParWhereEntry_Group(this, this, 12, inst);
			case 13: return new AbstractAliasWhereEntry_Alternatives(this, this, 13, inst);
			case 14: return new AttributeWhereEntry_Alternatives(this, this, 14, inst);
			case 15: return new NumericAttributeWhereEntry_Alternatives(this, this, 15, inst);
			case 16: return new DoubleWhereEntry_Group(this, this, 16, inst);
			case 17: return new LongWhereEntry_Group(this, this, 17, inst);
			case 18: return new VariableWhereEntry_Group(this, this, 18, inst);
			case 19: return new StringAttributeWhereEntry_Group(this, this, 19, inst);
			case 20: return new BooleanAttributeWhereEntry_Group(this, this, 20, inst);
			case 21: return new ReferenceWhereEntry_Alternatives(this, this, 21, inst);
			case 22: return new NullWhereEntry_Group(this, this, 22, inst);
			case 23: return new ReferenceAliasWhereEntry_Group(this, this, 23, inst);
			case 24: return new SubselectWhereEntry_Group(this, this, 24, inst);
			case 25: return new AliasWhereEntry_Group(this, this, 25, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Model ****************
 *
 * Model:
 *   imports+=Import* defaultQuery=MQLquery? namedQueries+=NamedQuery*;
 *
 **/

// imports+=Import* defaultQuery=MQLquery? namedQueries+=NamedQuery*
protected class Model_Group extends GroupToken {
	
	public Model_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_NamedQueriesAssignment_2(parent, this, 0, inst);
			case 1: return new Model_DefaultQueryAssignment_1(parent, this, 1, inst);
			case 2: return new Model_ImportsAssignment_0(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getModelRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// imports+=Import*
protected class Model_ImportsAssignment_0 extends AssignmentToken  {
	
	public Model_ImportsAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getImportsAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("imports",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("imports");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getImportRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getImportsImportParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_ImportsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// defaultQuery=MQLquery?
protected class Model_DefaultQueryAssignment_1 extends AssignmentToken  {
	
	public Model_DefaultQueryAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getDefaultQueryAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MQLquery_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("defaultQuery",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("defaultQuery");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMQLqueryRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getDefaultQueryMQLqueryParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_ImportsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// namedQueries+=NamedQuery*
protected class Model_NamedQueriesAssignment_2 extends AssignmentToken  {
	
	public Model_NamedQueriesAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getNamedQueriesAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NamedQuery_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("namedQueries",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("namedQueries");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNamedQueryRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getNamedQueriesNamedQueryParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_NamedQueriesAssignment_2(parent, next, actIndex, consumed);
			case 1: return new Model_DefaultQueryAssignment_1(parent, next, actIndex, consumed);
			case 2: return new Model_ImportsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 3, consumed);
		}	
	}	
}


/************ end Rule Model ****************/


/************ begin Rule Import ****************
 *
 * Import:
 *   "import" importURI=STRING;
 *
 **/

// "import" importURI=STRING
protected class Import_Group extends GroupToken {
	
	public Import_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getImportAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_ImportURIAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getImportRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "import"
protected class Import_ImportKeyword_0 extends KeywordToken  {
	
	public Import_ImportKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getImportAccess().getImportKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// importURI=STRING
protected class Import_ImportURIAssignment_1 extends AssignmentToken  {
	
	public Import_ImportURIAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getImportAccess().getImportURIAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_ImportKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("importURI",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("importURI");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Import ****************/


/************ begin Rule NamedQuery ****************
 *
 * NamedQuery:
 *   name=ID ":" query=MQLquery;
 *
 **/

// name=ID ":" query=MQLquery
protected class NamedQuery_Group extends GroupToken {
	
	public NamedQuery_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getNamedQueryAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NamedQuery_QueryAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getNamedQueryRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=ID
protected class NamedQuery_NameAssignment_0 extends AssignmentToken  {
	
	public NamedQuery_NameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getNamedQueryAccess().getNameAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getNamedQueryAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// ":"
protected class NamedQuery_ColonKeyword_1 extends KeywordToken  {
	
	public NamedQuery_ColonKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getNamedQueryAccess().getColonKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NamedQuery_NameAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// query=MQLquery
protected class NamedQuery_QueryAssignment_2 extends AssignmentToken  {
	
	public NamedQuery_QueryAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getNamedQueryAccess().getQueryAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MQLquery_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("query",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("query");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMQLqueryRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getNamedQueryAccess().getQueryMQLqueryParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NamedQuery_ColonKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule NamedQuery ****************/


/************ begin Rule MQLquery ****************
 *
 * MQLquery:
 *   "select" selectEntries+=SelectEntry ("," selectEntries+=SelectEntry)* "from"
 *   fromEntries+=FromEntry ("," fromEntries+=FromEntry)* ("where" whereEntry=WhereEntry)
 *   ?;
 *
 **/

// "select" selectEntries+=SelectEntry ("," selectEntries+=SelectEntry)* "from"
// fromEntries+=FromEntry ("," fromEntries+=FromEntry)* ("where" whereEntry=WhereEntry)
// ?
protected class MQLquery_Group extends GroupToken {
	
	public MQLquery_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getMQLqueryAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MQLquery_Group_6(parent, this, 0, inst);
			case 1: return new MQLquery_Group_5(parent, this, 1, inst);
			case 2: return new MQLquery_FromEntriesAssignment_4(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getMQLqueryRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "select"
protected class MQLquery_SelectKeyword_0 extends KeywordToken  {
	
	public MQLquery_SelectKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMQLqueryAccess().getSelectKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// selectEntries+=SelectEntry
protected class MQLquery_SelectEntriesAssignment_1 extends AssignmentToken  {
	
	public MQLquery_SelectEntriesAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMQLqueryAccess().getSelectEntriesAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SelectEntry_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("selectEntries",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("selectEntries");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSelectEntryRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getMQLqueryAccess().getSelectEntriesSelectEntryParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MQLquery_SelectKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," selectEntries+=SelectEntry)*
protected class MQLquery_Group_2 extends GroupToken {
	
	public MQLquery_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getMQLqueryAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MQLquery_SelectEntriesAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class MQLquery_CommaKeyword_2_0 extends KeywordToken  {
	
	public MQLquery_CommaKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMQLqueryAccess().getCommaKeyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MQLquery_Group_2(parent, this, 0, inst);
			case 1: return new MQLquery_SelectEntriesAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// selectEntries+=SelectEntry
protected class MQLquery_SelectEntriesAssignment_2_1 extends AssignmentToken  {
	
	public MQLquery_SelectEntriesAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMQLqueryAccess().getSelectEntriesAssignment_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SelectEntry_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("selectEntries",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("selectEntries");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSelectEntryRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getMQLqueryAccess().getSelectEntriesSelectEntryParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MQLquery_CommaKeyword_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "from"
protected class MQLquery_FromKeyword_3 extends KeywordToken  {
	
	public MQLquery_FromKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMQLqueryAccess().getFromKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MQLquery_Group_2(parent, this, 0, inst);
			case 1: return new MQLquery_SelectEntriesAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// fromEntries+=FromEntry
protected class MQLquery_FromEntriesAssignment_4 extends AssignmentToken  {
	
	public MQLquery_FromEntriesAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMQLqueryAccess().getFromEntriesAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FromEntry_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("fromEntries",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("fromEntries");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFromEntryRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getMQLqueryAccess().getFromEntriesFromEntryParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MQLquery_FromKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," fromEntries+=FromEntry)*
protected class MQLquery_Group_5 extends GroupToken {
	
	public MQLquery_Group_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getMQLqueryAccess().getGroup_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MQLquery_FromEntriesAssignment_5_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class MQLquery_CommaKeyword_5_0 extends KeywordToken  {
	
	public MQLquery_CommaKeyword_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMQLqueryAccess().getCommaKeyword_5_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MQLquery_Group_5(parent, this, 0, inst);
			case 1: return new MQLquery_FromEntriesAssignment_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// fromEntries+=FromEntry
protected class MQLquery_FromEntriesAssignment_5_1 extends AssignmentToken  {
	
	public MQLquery_FromEntriesAssignment_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMQLqueryAccess().getFromEntriesAssignment_5_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FromEntry_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("fromEntries",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("fromEntries");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFromEntryRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getMQLqueryAccess().getFromEntriesFromEntryParserRuleCall_5_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MQLquery_CommaKeyword_5_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("where" whereEntry=WhereEntry)?
protected class MQLquery_Group_6 extends GroupToken {
	
	public MQLquery_Group_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getMQLqueryAccess().getGroup_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MQLquery_WhereEntryAssignment_6_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "where"
protected class MQLquery_WhereKeyword_6_0 extends KeywordToken  {
	
	public MQLquery_WhereKeyword_6_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMQLqueryAccess().getWhereKeyword_6_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MQLquery_Group_5(parent, this, 0, inst);
			case 1: return new MQLquery_FromEntriesAssignment_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// whereEntry=WhereEntry
protected class MQLquery_WhereEntryAssignment_6_1 extends AssignmentToken  {
	
	public MQLquery_WhereEntryAssignment_6_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMQLqueryAccess().getWhereEntryAssignment_6_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WhereEntry_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("whereEntry",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("whereEntry");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getWhereEntryRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getMQLqueryAccess().getWhereEntryWhereEntryParserRuleCall_6_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MQLquery_WhereKeyword_6_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule MQLquery ****************/


/************ begin Rule SelectEntry ****************
 *
 * SelectEntry:
 *   select=[FromEntry] ("." attribute=[ecore::EAttribute])?;
 *
 **/

// select=[FromEntry] ("." attribute=[ecore::EAttribute])?
protected class SelectEntry_Group extends GroupToken {
	
	public SelectEntry_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSelectEntryAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SelectEntry_Group_1(parent, this, 0, inst);
			case 1: return new SelectEntry_SelectAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSelectEntryRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// select=[FromEntry]
protected class SelectEntry_SelectAssignment_0 extends AssignmentToken  {
	
	public SelectEntry_SelectAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectEntryAccess().getSelectAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("select",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("select");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSelectEntryAccess().getSelectFromEntryCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getSelectEntryAccess().getSelectFromEntryCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ("." attribute=[ecore::EAttribute])?
protected class SelectEntry_Group_1 extends GroupToken {
	
	public SelectEntry_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSelectEntryAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SelectEntry_AttributeAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "."
protected class SelectEntry_FullStopKeyword_1_0 extends KeywordToken  {
	
	public SelectEntry_FullStopKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSelectEntryAccess().getFullStopKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SelectEntry_SelectAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// attribute=[ecore::EAttribute]
protected class SelectEntry_AttributeAssignment_1_1 extends AssignmentToken  {
	
	public SelectEntry_AttributeAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSelectEntryAccess().getAttributeAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SelectEntry_FullStopKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("attribute",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("attribute");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSelectEntryAccess().getAttributeEAttributeCrossReference_1_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getSelectEntryAccess().getAttributeEAttributeCrossReference_1_1_0(); 
				return obj;
			}
		}
		return null;
	}

}



/************ end Rule SelectEntry ****************/


/************ begin Rule FromEntry ****************
 *
 * FromEntry:
 *   type=[ecore::EClass] withoutsubtypes?="withoutsubtypes"? "as" alias=ID scopeClause=
 *   ScopeClause?;
 *
 **/

// type=[ecore::EClass] withoutsubtypes?="withoutsubtypes"? "as" alias=ID scopeClause=
// ScopeClause?
protected class FromEntry_Group extends GroupToken {
	
	public FromEntry_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFromEntryAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FromEntry_ScopeClauseAssignment_4(parent, this, 0, inst);
			case 1: return new FromEntry_AliasAssignment_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFromEntryRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// type=[ecore::EClass]
protected class FromEntry_TypeAssignment_0 extends AssignmentToken  {
	
	public FromEntry_TypeAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFromEntryAccess().getTypeAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFromEntryAccess().getTypeEClassCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getFromEntryAccess().getTypeEClassCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// withoutsubtypes?="withoutsubtypes"?
protected class FromEntry_WithoutsubtypesAssignment_1 extends AssignmentToken  {
	
	public FromEntry_WithoutsubtypesAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFromEntryAccess().getWithoutsubtypesAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FromEntry_TypeAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("withoutsubtypes",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("withoutsubtypes");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getFromEntryAccess().getWithoutsubtypesWithoutsubtypesKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// "as"
protected class FromEntry_AsKeyword_2 extends KeywordToken  {
	
	public FromEntry_AsKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFromEntryAccess().getAsKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FromEntry_WithoutsubtypesAssignment_1(parent, this, 0, inst);
			case 1: return new FromEntry_TypeAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// alias=ID
protected class FromEntry_AliasAssignment_3 extends AssignmentToken  {
	
	public FromEntry_AliasAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFromEntryAccess().getAliasAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FromEntry_AsKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("alias",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("alias");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFromEntryAccess().getAliasIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// scopeClause=ScopeClause?
protected class FromEntry_ScopeClauseAssignment_4 extends AssignmentToken  {
	
	public FromEntry_ScopeClauseAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFromEntryAccess().getScopeClauseAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ScopeClause_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("scopeClause",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("scopeClause");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getScopeClauseRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFromEntryAccess().getScopeClauseScopeClauseParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FromEntry_AliasAssignment_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule FromEntry ****************/


/************ begin Rule ScopeClause ****************
 *
 * ScopeClause:
 *   ResourceScope|ElementScope;
 *
 **/

// ResourceScope|ElementScope
protected class ScopeClause_Alternatives extends AlternativesToken {

	public ScopeClause_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getScopeClauseAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ScopeClause_ResourceScopeParserRuleCall_0(parent, this, 0, inst);
			case 1: return new ScopeClause_ElementScopeParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getScopeClauseRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ResourceScope
protected class ScopeClause_ResourceScopeParserRuleCall_0 extends RuleCallToken {
	
	public ScopeClause_ResourceScopeParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getScopeClauseAccess().getResourceScopeParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ResourceScope_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ResourceScope_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getResourceScopeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ElementScope
protected class ScopeClause_ElementScopeParserRuleCall_1 extends RuleCallToken {
	
	public ScopeClause_ElementScopeParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getScopeClauseAccess().getElementScopeParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementScope_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ElementScope_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getElementScopeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ScopeClause ****************/


/************ begin Rule ResourceScope ****************
 *
 * ResourceScope:
 *   notIn?="not"? "in" "resources" "{" uris+=STRING ("," uris+=STRING)* "}";
 *
 **/

// notIn?="not"? "in" "resources" "{" uris+=STRING ("," uris+=STRING)* "}"
protected class ResourceScope_Group extends GroupToken {
	
	public ResourceScope_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getResourceScopeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ResourceScope_RightCurlyBracketKeyword_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getResourceScopeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// notIn?="not"?
protected class ResourceScope_NotInAssignment_0 extends AssignmentToken  {
	
	public ResourceScope_NotInAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getResourceScopeAccess().getNotInAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("notIn",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("notIn");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getResourceScopeAccess().getNotInNotKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// "in"
protected class ResourceScope_InKeyword_1 extends KeywordToken  {
	
	public ResourceScope_InKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getResourceScopeAccess().getInKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ResourceScope_NotInAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// "resources"
protected class ResourceScope_ResourcesKeyword_2 extends KeywordToken  {
	
	public ResourceScope_ResourcesKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getResourceScopeAccess().getResourcesKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ResourceScope_InKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class ResourceScope_LeftCurlyBracketKeyword_3 extends KeywordToken  {
	
	public ResourceScope_LeftCurlyBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getResourceScopeAccess().getLeftCurlyBracketKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ResourceScope_ResourcesKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// uris+=STRING
protected class ResourceScope_UrisAssignment_4 extends AssignmentToken  {
	
	public ResourceScope_UrisAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getResourceScopeAccess().getUrisAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ResourceScope_LeftCurlyBracketKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("uris",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("uris");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getResourceScopeAccess().getUrisSTRINGTerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// ("," uris+=STRING)*
protected class ResourceScope_Group_5 extends GroupToken {
	
	public ResourceScope_Group_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getResourceScopeAccess().getGroup_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ResourceScope_UrisAssignment_5_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class ResourceScope_CommaKeyword_5_0 extends KeywordToken  {
	
	public ResourceScope_CommaKeyword_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getResourceScopeAccess().getCommaKeyword_5_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ResourceScope_Group_5(parent, this, 0, inst);
			case 1: return new ResourceScope_UrisAssignment_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// uris+=STRING
protected class ResourceScope_UrisAssignment_5_1 extends AssignmentToken  {
	
	public ResourceScope_UrisAssignment_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getResourceScopeAccess().getUrisAssignment_5_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ResourceScope_CommaKeyword_5_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("uris",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("uris");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getResourceScopeAccess().getUrisSTRINGTerminalRuleCall_5_1_0();
			return obj;
		}
		return null;
	}

}


// "}"
protected class ResourceScope_RightCurlyBracketKeyword_6 extends KeywordToken  {
	
	public ResourceScope_RightCurlyBracketKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getResourceScopeAccess().getRightCurlyBracketKeyword_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ResourceScope_Group_5(parent, this, 0, inst);
			case 1: return new ResourceScope_UrisAssignment_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ResourceScope ****************/


/************ begin Rule ElementScope ****************
 *
 * ElementScope:
 *   notIn?="not"? "in" "elements" "{" uris+=STRING ("," uris+=STRING)* "}";
 *
 **/

// notIn?="not"? "in" "elements" "{" uris+=STRING ("," uris+=STRING)* "}"
protected class ElementScope_Group extends GroupToken {
	
	public ElementScope_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getElementScopeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementScope_RightCurlyBracketKeyword_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getElementScopeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// notIn?="not"?
protected class ElementScope_NotInAssignment_0 extends AssignmentToken  {
	
	public ElementScope_NotInAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getElementScopeAccess().getNotInAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("notIn",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("notIn");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getElementScopeAccess().getNotInNotKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// "in"
protected class ElementScope_InKeyword_1 extends KeywordToken  {
	
	public ElementScope_InKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getElementScopeAccess().getInKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementScope_NotInAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// "elements"
protected class ElementScope_ElementsKeyword_2 extends KeywordToken  {
	
	public ElementScope_ElementsKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getElementScopeAccess().getElementsKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementScope_InKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class ElementScope_LeftCurlyBracketKeyword_3 extends KeywordToken  {
	
	public ElementScope_LeftCurlyBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getElementScopeAccess().getLeftCurlyBracketKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementScope_ElementsKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// uris+=STRING
protected class ElementScope_UrisAssignment_4 extends AssignmentToken  {
	
	public ElementScope_UrisAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getElementScopeAccess().getUrisAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementScope_LeftCurlyBracketKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("uris",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("uris");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getElementScopeAccess().getUrisSTRINGTerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// ("," uris+=STRING)*
protected class ElementScope_Group_5 extends GroupToken {
	
	public ElementScope_Group_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getElementScopeAccess().getGroup_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementScope_UrisAssignment_5_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class ElementScope_CommaKeyword_5_0 extends KeywordToken  {
	
	public ElementScope_CommaKeyword_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getElementScopeAccess().getCommaKeyword_5_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementScope_Group_5(parent, this, 0, inst);
			case 1: return new ElementScope_UrisAssignment_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// uris+=STRING
protected class ElementScope_UrisAssignment_5_1 extends AssignmentToken  {
	
	public ElementScope_UrisAssignment_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getElementScopeAccess().getUrisAssignment_5_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementScope_CommaKeyword_5_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("uris",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("uris");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getElementScopeAccess().getUrisSTRINGTerminalRuleCall_5_1_0();
			return obj;
		}
		return null;
	}

}


// "}"
protected class ElementScope_RightCurlyBracketKeyword_6 extends KeywordToken  {
	
	public ElementScope_RightCurlyBracketKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getElementScopeAccess().getRightCurlyBracketKeyword_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementScope_Group_5(parent, this, 0, inst);
			case 1: return new ElementScope_UrisAssignment_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ElementScope ****************/


/************ begin Rule WhereEntry ****************
 *
 * WhereEntry:
 *   AndWhereEntry ({OrWhereEntry.entries+=current} ("or" entries+=AndWhereEntry)+)?;
 *
 **/

// AndWhereEntry ({OrWhereEntry.entries+=current} ("or" entries+=AndWhereEntry)+)?
protected class WhereEntry_Group extends GroupToken {
	
	public WhereEntry_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getWhereEntryAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WhereEntry_Group_1(parent, this, 0, inst);
			case 1: return new WhereEntry_AndWhereEntryParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getWhereEntryRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// AndWhereEntry
protected class WhereEntry_AndWhereEntryParserRuleCall_0 extends RuleCallToken {
	
	public WhereEntry_AndWhereEntryParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getWhereEntryAccess().getAndWhereEntryParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndWhereEntry_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(AndWhereEntry_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAndWhereEntryRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({OrWhereEntry.entries+=current} ("or" entries+=AndWhereEntry)+)?
protected class WhereEntry_Group_1 extends GroupToken {
	
	public WhereEntry_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getWhereEntryAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WhereEntry_Group_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {OrWhereEntry.entries+=current}
protected class WhereEntry_OrWhereEntryEntriesAction_1_0 extends ActionToken  {

	public WhereEntry_OrWhereEntryEntriesAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getWhereEntryAccess().getOrWhereEntryEntriesAction_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WhereEntry_AndWhereEntryParserRuleCall_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getWhereEntryAccess().getOrWhereEntryEntriesAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("entries", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("entries")) return null;
		return getDescr((EObject) val);
	}
}

// ("or" entries+=AndWhereEntry)+
protected class WhereEntry_Group_1_1 extends GroupToken {
	
	public WhereEntry_Group_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getWhereEntryAccess().getGroup_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WhereEntry_EntriesAssignment_1_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "or"
protected class WhereEntry_OrKeyword_1_1_0 extends KeywordToken  {
	
	public WhereEntry_OrKeyword_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getWhereEntryAccess().getOrKeyword_1_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WhereEntry_Group_1_1(parent, this, 0, inst);
			case 1: return new WhereEntry_OrWhereEntryEntriesAction_1_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// entries+=AndWhereEntry
protected class WhereEntry_EntriesAssignment_1_1_1 extends AssignmentToken  {
	
	public WhereEntry_EntriesAssignment_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getWhereEntryAccess().getEntriesAssignment_1_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndWhereEntry_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("entries",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("entries");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAndWhereEntryRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getWhereEntryAccess().getEntriesAndWhereEntryParserRuleCall_1_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WhereEntry_OrKeyword_1_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




/************ end Rule WhereEntry ****************/


/************ begin Rule AndWhereEntry ****************
 *
 * AndWhereEntry returns WhereEntry:
 *   ConcreteWhereEntry ({AndWhereEntry.entries+=current} ("and" entries+=
 *   ConcreteWhereEntry)+)?;
 *
 **/

// ConcreteWhereEntry ({AndWhereEntry.entries+=current} ("and" entries+=
// ConcreteWhereEntry)+)?
protected class AndWhereEntry_Group extends GroupToken {
	
	public AndWhereEntry_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAndWhereEntryAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndWhereEntry_Group_1(parent, this, 0, inst);
			case 1: return new AndWhereEntry_ConcreteWhereEntryParserRuleCall_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAndWhereEntryRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ConcreteWhereEntry
protected class AndWhereEntry_ConcreteWhereEntryParserRuleCall_0 extends RuleCallToken {
	
	public AndWhereEntry_ConcreteWhereEntryParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getAndWhereEntryAccess().getConcreteWhereEntryParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConcreteWhereEntry_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ConcreteWhereEntry_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getConcreteWhereEntryRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({AndWhereEntry.entries+=current} ("and" entries+=ConcreteWhereEntry)+)?
protected class AndWhereEntry_Group_1 extends GroupToken {
	
	public AndWhereEntry_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAndWhereEntryAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndWhereEntry_Group_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {AndWhereEntry.entries+=current}
protected class AndWhereEntry_AndWhereEntryEntriesAction_1_0 extends ActionToken  {

	public AndWhereEntry_AndWhereEntryEntriesAction_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getAndWhereEntryAccess().getAndWhereEntryEntriesAction_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndWhereEntry_ConcreteWhereEntryParserRuleCall_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getAndWhereEntryAccess().getAndWhereEntryEntriesAction_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("entries", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("entries")) return null;
		return getDescr((EObject) val);
	}
}

// ("and" entries+=ConcreteWhereEntry)+
protected class AndWhereEntry_Group_1_1 extends GroupToken {
	
	public AndWhereEntry_Group_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAndWhereEntryAccess().getGroup_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndWhereEntry_EntriesAssignment_1_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "and"
protected class AndWhereEntry_AndKeyword_1_1_0 extends KeywordToken  {
	
	public AndWhereEntry_AndKeyword_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAndWhereEntryAccess().getAndKeyword_1_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndWhereEntry_Group_1_1(parent, this, 0, inst);
			case 1: return new AndWhereEntry_AndWhereEntryEntriesAction_1_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// entries+=ConcreteWhereEntry
protected class AndWhereEntry_EntriesAssignment_1_1_1 extends AssignmentToken  {
	
	public AndWhereEntry_EntriesAssignment_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAndWhereEntryAccess().getEntriesAssignment_1_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConcreteWhereEntry_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("entries",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("entries");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConcreteWhereEntryRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAndWhereEntryAccess().getEntriesConcreteWhereEntryParserRuleCall_1_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AndWhereEntry_AndKeyword_1_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




/************ end Rule AndWhereEntry ****************/


/************ begin Rule ConcreteWhereEntry ****************
 *
 * ConcreteWhereEntry returns WhereEntry:
 *   ParWhereEntry|AbstractAliasWhereEntry;
 *
 **/

// ParWhereEntry|AbstractAliasWhereEntry
protected class ConcreteWhereEntry_Alternatives extends AlternativesToken {

	public ConcreteWhereEntry_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getConcreteWhereEntryAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConcreteWhereEntry_ParWhereEntryParserRuleCall_0(parent, this, 0, inst);
			case 1: return new ConcreteWhereEntry_AbstractAliasWhereEntryParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getConcreteWhereEntryRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ParWhereEntry
protected class ConcreteWhereEntry_ParWhereEntryParserRuleCall_0 extends RuleCallToken {
	
	public ConcreteWhereEntry_ParWhereEntryParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getConcreteWhereEntryAccess().getParWhereEntryParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParWhereEntry_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ParWhereEntry_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getParWhereEntryRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// AbstractAliasWhereEntry
protected class ConcreteWhereEntry_AbstractAliasWhereEntryParserRuleCall_1 extends RuleCallToken {
	
	public ConcreteWhereEntry_AbstractAliasWhereEntryParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getConcreteWhereEntryAccess().getAbstractAliasWhereEntryParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AbstractAliasWhereEntry_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(AbstractAliasWhereEntry_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAbstractAliasWhereEntryRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ConcreteWhereEntry ****************/


/************ begin Rule ParWhereEntry ****************
 *
 * ParWhereEntry returns WhereEntry:
 *   "(" WhereEntry ")";
 *
 **/

// "(" WhereEntry ")"
protected class ParWhereEntry_Group extends GroupToken {
	
	public ParWhereEntry_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getParWhereEntryAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParWhereEntry_RightParenthesisKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getParWhereEntryRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "("
protected class ParWhereEntry_LeftParenthesisKeyword_0 extends KeywordToken  {
	
	public ParWhereEntry_LeftParenthesisKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getParWhereEntryAccess().getLeftParenthesisKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// WhereEntry
protected class ParWhereEntry_WhereEntryParserRuleCall_1 extends RuleCallToken {
	
	public ParWhereEntry_WhereEntryParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getParWhereEntryAccess().getWhereEntryParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new WhereEntry_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(WhereEntry_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getWhereEntryRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParWhereEntry_LeftParenthesisKeyword_0(parent, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// ")"
protected class ParWhereEntry_RightParenthesisKeyword_2 extends KeywordToken  {
	
	public ParWhereEntry_RightParenthesisKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getParWhereEntryAccess().getRightParenthesisKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ParWhereEntry_WhereEntryParserRuleCall_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ParWhereEntry ****************/


/************ begin Rule AbstractAliasWhereEntry ****************
 *
 * AbstractAliasWhereEntry:
 *   AttributeWhereEntry|ReferenceWhereEntry|AliasWhereEntry|NullWhereEntry;
 *
 **/

// AttributeWhereEntry|ReferenceWhereEntry|AliasWhereEntry|NullWhereEntry
protected class AbstractAliasWhereEntry_Alternatives extends AlternativesToken {

	public AbstractAliasWhereEntry_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getAbstractAliasWhereEntryAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AbstractAliasWhereEntry_AttributeWhereEntryParserRuleCall_0(parent, this, 0, inst);
			case 1: return new AbstractAliasWhereEntry_ReferenceWhereEntryParserRuleCall_1(parent, this, 1, inst);
			case 2: return new AbstractAliasWhereEntry_AliasWhereEntryParserRuleCall_2(parent, this, 2, inst);
			case 3: return new AbstractAliasWhereEntry_NullWhereEntryParserRuleCall_3(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAbstractAliasWhereEntryRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// AttributeWhereEntry
protected class AbstractAliasWhereEntry_AttributeWhereEntryParserRuleCall_0 extends RuleCallToken {
	
	public AbstractAliasWhereEntry_AttributeWhereEntryParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getAbstractAliasWhereEntryAccess().getAttributeWhereEntryParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeWhereEntry_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(AttributeWhereEntry_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAttributeWhereEntryRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ReferenceWhereEntry
protected class AbstractAliasWhereEntry_ReferenceWhereEntryParserRuleCall_1 extends RuleCallToken {
	
	public AbstractAliasWhereEntry_ReferenceWhereEntryParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getAbstractAliasWhereEntryAccess().getReferenceWhereEntryParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ReferenceWhereEntry_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ReferenceWhereEntry_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getReferenceWhereEntryRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// AliasWhereEntry
protected class AbstractAliasWhereEntry_AliasWhereEntryParserRuleCall_2 extends RuleCallToken {
	
	public AbstractAliasWhereEntry_AliasWhereEntryParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getAbstractAliasWhereEntryAccess().getAliasWhereEntryParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AliasWhereEntry_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(AliasWhereEntry_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAliasWhereEntryRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// NullWhereEntry
protected class AbstractAliasWhereEntry_NullWhereEntryParserRuleCall_3 extends RuleCallToken {
	
	public AbstractAliasWhereEntry_NullWhereEntryParserRuleCall_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getAbstractAliasWhereEntryAccess().getNullWhereEntryParserRuleCall_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NullWhereEntry_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(NullWhereEntry_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getNullWhereEntryRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule AbstractAliasWhereEntry ****************/


/************ begin Rule AttributeWhereEntry ****************
 *
 * AttributeWhereEntry:
 *   NumericAttributeWhereEntry|StringAttributeWhereEntry|BooleanAttributeWhereEntry|
 *   VariableWhereEntry;
 *
 **/

// NumericAttributeWhereEntry|StringAttributeWhereEntry|BooleanAttributeWhereEntry|
// VariableWhereEntry
protected class AttributeWhereEntry_Alternatives extends AlternativesToken {

	public AttributeWhereEntry_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getAttributeWhereEntryAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeWhereEntry_NumericAttributeWhereEntryParserRuleCall_0(parent, this, 0, inst);
			case 1: return new AttributeWhereEntry_StringAttributeWhereEntryParserRuleCall_1(parent, this, 1, inst);
			case 2: return new AttributeWhereEntry_BooleanAttributeWhereEntryParserRuleCall_2(parent, this, 2, inst);
			case 3: return new AttributeWhereEntry_VariableWhereEntryParserRuleCall_3(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAttributeWhereEntryRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// NumericAttributeWhereEntry
protected class AttributeWhereEntry_NumericAttributeWhereEntryParserRuleCall_0 extends RuleCallToken {
	
	public AttributeWhereEntry_NumericAttributeWhereEntryParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getAttributeWhereEntryAccess().getNumericAttributeWhereEntryParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NumericAttributeWhereEntry_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(NumericAttributeWhereEntry_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getNumericAttributeWhereEntryRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// StringAttributeWhereEntry
protected class AttributeWhereEntry_StringAttributeWhereEntryParserRuleCall_1 extends RuleCallToken {
	
	public AttributeWhereEntry_StringAttributeWhereEntryParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getAttributeWhereEntryAccess().getStringAttributeWhereEntryParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringAttributeWhereEntry_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(StringAttributeWhereEntry_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getStringAttributeWhereEntryRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// BooleanAttributeWhereEntry
protected class AttributeWhereEntry_BooleanAttributeWhereEntryParserRuleCall_2 extends RuleCallToken {
	
	public AttributeWhereEntry_BooleanAttributeWhereEntryParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getAttributeWhereEntryAccess().getBooleanAttributeWhereEntryParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BooleanAttributeWhereEntry_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(BooleanAttributeWhereEntry_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getBooleanAttributeWhereEntryRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// VariableWhereEntry
protected class AttributeWhereEntry_VariableWhereEntryParserRuleCall_3 extends RuleCallToken {
	
	public AttributeWhereEntry_VariableWhereEntryParserRuleCall_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getAttributeWhereEntryAccess().getVariableWhereEntryParserRuleCall_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VariableWhereEntry_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(VariableWhereEntry_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getVariableWhereEntryRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule AttributeWhereEntry ****************/


/************ begin Rule NumericAttributeWhereEntry ****************
 *
 * NumericAttributeWhereEntry:
 *   DoubleWhereEntry|LongWhereEntry;
 *
 **/

// DoubleWhereEntry|LongWhereEntry
protected class NumericAttributeWhereEntry_Alternatives extends AlternativesToken {

	public NumericAttributeWhereEntry_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getNumericAttributeWhereEntryAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NumericAttributeWhereEntry_DoubleWhereEntryParserRuleCall_0(parent, this, 0, inst);
			case 1: return new NumericAttributeWhereEntry_LongWhereEntryParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getNumericAttributeWhereEntryRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// DoubleWhereEntry
protected class NumericAttributeWhereEntry_DoubleWhereEntryParserRuleCall_0 extends RuleCallToken {
	
	public NumericAttributeWhereEntry_DoubleWhereEntryParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getNumericAttributeWhereEntryAccess().getDoubleWhereEntryParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DoubleWhereEntry_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(DoubleWhereEntry_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDoubleWhereEntryRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// LongWhereEntry
protected class NumericAttributeWhereEntry_LongWhereEntryParserRuleCall_1 extends RuleCallToken {
	
	public NumericAttributeWhereEntry_LongWhereEntryParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getNumericAttributeWhereEntryAccess().getLongWhereEntryParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LongWhereEntry_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(LongWhereEntry_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getLongWhereEntryRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule NumericAttributeWhereEntry ****************/


/************ begin Rule DoubleWhereEntry ****************
 *
 * DoubleWhereEntry:
 *   alias=[FromEntry] "." attribute=[ecore::EAttribute] operator=NumericOperator value=
 *   SIGNED_DOUBLE;
 *
 **/

// alias=[FromEntry] "." attribute=[ecore::EAttribute] operator=NumericOperator value=
// SIGNED_DOUBLE
protected class DoubleWhereEntry_Group extends GroupToken {
	
	public DoubleWhereEntry_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getDoubleWhereEntryAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DoubleWhereEntry_ValueAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDoubleWhereEntryRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// alias=[FromEntry]
protected class DoubleWhereEntry_AliasAssignment_0 extends AssignmentToken  {
	
	public DoubleWhereEntry_AliasAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDoubleWhereEntryAccess().getAliasAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("alias",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("alias");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDoubleWhereEntryAccess().getAliasFromEntryCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getDoubleWhereEntryAccess().getAliasFromEntryCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "."
protected class DoubleWhereEntry_FullStopKeyword_1 extends KeywordToken  {
	
	public DoubleWhereEntry_FullStopKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDoubleWhereEntryAccess().getFullStopKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DoubleWhereEntry_AliasAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// attribute=[ecore::EAttribute]
protected class DoubleWhereEntry_AttributeAssignment_2 extends AssignmentToken  {
	
	public DoubleWhereEntry_AttributeAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDoubleWhereEntryAccess().getAttributeAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DoubleWhereEntry_FullStopKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("attribute",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("attribute");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDoubleWhereEntryAccess().getAttributeEAttributeCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getDoubleWhereEntryAccess().getAttributeEAttributeCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}

// operator=NumericOperator
protected class DoubleWhereEntry_OperatorAssignment_3 extends AssignmentToken  {
	
	public DoubleWhereEntry_OperatorAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDoubleWhereEntryAccess().getOperatorAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DoubleWhereEntry_AttributeAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("operator",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("operator");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getDoubleWhereEntryAccess().getOperatorNumericOperatorEnumRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// value=SIGNED_DOUBLE
protected class DoubleWhereEntry_ValueAssignment_4 extends AssignmentToken  {
	
	public DoubleWhereEntry_ValueAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDoubleWhereEntryAccess().getValueAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DoubleWhereEntry_OperatorAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDoubleWhereEntryAccess().getValueSIGNED_DOUBLETerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule DoubleWhereEntry ****************/


/************ begin Rule LongWhereEntry ****************
 *
 * LongWhereEntry:
 *   alias=[FromEntry] "." attribute=[ecore::EAttribute] operator=NumericOperator value=
 *   SINGED_LONG;
 *
 **/

// alias=[FromEntry] "." attribute=[ecore::EAttribute] operator=NumericOperator value=
// SINGED_LONG
protected class LongWhereEntry_Group extends GroupToken {
	
	public LongWhereEntry_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLongWhereEntryAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LongWhereEntry_ValueAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLongWhereEntryRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// alias=[FromEntry]
protected class LongWhereEntry_AliasAssignment_0 extends AssignmentToken  {
	
	public LongWhereEntry_AliasAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLongWhereEntryAccess().getAliasAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("alias",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("alias");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLongWhereEntryAccess().getAliasFromEntryCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getLongWhereEntryAccess().getAliasFromEntryCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "."
protected class LongWhereEntry_FullStopKeyword_1 extends KeywordToken  {
	
	public LongWhereEntry_FullStopKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLongWhereEntryAccess().getFullStopKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LongWhereEntry_AliasAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// attribute=[ecore::EAttribute]
protected class LongWhereEntry_AttributeAssignment_2 extends AssignmentToken  {
	
	public LongWhereEntry_AttributeAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLongWhereEntryAccess().getAttributeAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LongWhereEntry_FullStopKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("attribute",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("attribute");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLongWhereEntryAccess().getAttributeEAttributeCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getLongWhereEntryAccess().getAttributeEAttributeCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}

// operator=NumericOperator
protected class LongWhereEntry_OperatorAssignment_3 extends AssignmentToken  {
	
	public LongWhereEntry_OperatorAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLongWhereEntryAccess().getOperatorAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LongWhereEntry_AttributeAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("operator",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("operator");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getLongWhereEntryAccess().getOperatorNumericOperatorEnumRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// value=SINGED_LONG
protected class LongWhereEntry_ValueAssignment_4 extends AssignmentToken  {
	
	public LongWhereEntry_ValueAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getLongWhereEntryAccess().getValueAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LongWhereEntry_OperatorAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getLongWhereEntryAccess().getValueSINGED_LONGTerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule LongWhereEntry ****************/


/************ begin Rule VariableWhereEntry ****************
 *
 * VariableWhereEntry:
 *   alias=[FromEntry] "." attribute=[ecore::EAttribute] operator=NumericOperator
 *   rightAlias=[FromEntry] "." rightAttribute=[ecore::EAttribute];
 *
 **/

// alias=[FromEntry] "." attribute=[ecore::EAttribute] operator=NumericOperator
// rightAlias=[FromEntry] "." rightAttribute=[ecore::EAttribute]
protected class VariableWhereEntry_Group extends GroupToken {
	
	public VariableWhereEntry_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getVariableWhereEntryAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VariableWhereEntry_RightAttributeAssignment_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getVariableWhereEntryRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// alias=[FromEntry]
protected class VariableWhereEntry_AliasAssignment_0 extends AssignmentToken  {
	
	public VariableWhereEntry_AliasAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableWhereEntryAccess().getAliasAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("alias",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("alias");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVariableWhereEntryAccess().getAliasFromEntryCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getVariableWhereEntryAccess().getAliasFromEntryCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "."
protected class VariableWhereEntry_FullStopKeyword_1 extends KeywordToken  {
	
	public VariableWhereEntry_FullStopKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getVariableWhereEntryAccess().getFullStopKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VariableWhereEntry_AliasAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// attribute=[ecore::EAttribute]
protected class VariableWhereEntry_AttributeAssignment_2 extends AssignmentToken  {
	
	public VariableWhereEntry_AttributeAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableWhereEntryAccess().getAttributeAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VariableWhereEntry_FullStopKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("attribute",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("attribute");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVariableWhereEntryAccess().getAttributeEAttributeCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getVariableWhereEntryAccess().getAttributeEAttributeCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}

// operator=NumericOperator
protected class VariableWhereEntry_OperatorAssignment_3 extends AssignmentToken  {
	
	public VariableWhereEntry_OperatorAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableWhereEntryAccess().getOperatorAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VariableWhereEntry_AttributeAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("operator",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("operator");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getVariableWhereEntryAccess().getOperatorNumericOperatorEnumRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// rightAlias=[FromEntry]
protected class VariableWhereEntry_RightAliasAssignment_4 extends AssignmentToken  {
	
	public VariableWhereEntry_RightAliasAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableWhereEntryAccess().getRightAliasAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VariableWhereEntry_OperatorAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("rightAlias",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("rightAlias");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVariableWhereEntryAccess().getRightAliasFromEntryCrossReference_4_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getVariableWhereEntryAccess().getRightAliasFromEntryCrossReference_4_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "."
protected class VariableWhereEntry_FullStopKeyword_5 extends KeywordToken  {
	
	public VariableWhereEntry_FullStopKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getVariableWhereEntryAccess().getFullStopKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VariableWhereEntry_RightAliasAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// rightAttribute=[ecore::EAttribute]
protected class VariableWhereEntry_RightAttributeAssignment_6 extends AssignmentToken  {
	
	public VariableWhereEntry_RightAttributeAssignment_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableWhereEntryAccess().getRightAttributeAssignment_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VariableWhereEntry_FullStopKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("rightAttribute",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("rightAttribute");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVariableWhereEntryAccess().getRightAttributeEAttributeCrossReference_6_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getVariableWhereEntryAccess().getRightAttributeEAttributeCrossReference_6_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule VariableWhereEntry ****************/


/************ begin Rule StringAttributeWhereEntry ****************
 *
 * StringAttributeWhereEntry:
 *   alias=[FromEntry] "." attribute=[ecore::EAttribute] operator=StringOperator pattern=
 *   STRING;
 *
 **/

// alias=[FromEntry] "." attribute=[ecore::EAttribute] operator=StringOperator pattern=
// STRING
protected class StringAttributeWhereEntry_Group extends GroupToken {
	
	public StringAttributeWhereEntry_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStringAttributeWhereEntryAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringAttributeWhereEntry_PatternAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getStringAttributeWhereEntryRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// alias=[FromEntry]
protected class StringAttributeWhereEntry_AliasAssignment_0 extends AssignmentToken  {
	
	public StringAttributeWhereEntry_AliasAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStringAttributeWhereEntryAccess().getAliasAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("alias",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("alias");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStringAttributeWhereEntryAccess().getAliasFromEntryCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getStringAttributeWhereEntryAccess().getAliasFromEntryCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "."
protected class StringAttributeWhereEntry_FullStopKeyword_1 extends KeywordToken  {
	
	public StringAttributeWhereEntry_FullStopKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStringAttributeWhereEntryAccess().getFullStopKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringAttributeWhereEntry_AliasAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// attribute=[ecore::EAttribute]
protected class StringAttributeWhereEntry_AttributeAssignment_2 extends AssignmentToken  {
	
	public StringAttributeWhereEntry_AttributeAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStringAttributeWhereEntryAccess().getAttributeAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringAttributeWhereEntry_FullStopKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("attribute",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("attribute");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStringAttributeWhereEntryAccess().getAttributeEAttributeCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getStringAttributeWhereEntryAccess().getAttributeEAttributeCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}

// operator=StringOperator
protected class StringAttributeWhereEntry_OperatorAssignment_3 extends AssignmentToken  {
	
	public StringAttributeWhereEntry_OperatorAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStringAttributeWhereEntryAccess().getOperatorAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringAttributeWhereEntry_AttributeAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("operator",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("operator");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getStringAttributeWhereEntryAccess().getOperatorStringOperatorEnumRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// pattern=STRING
protected class StringAttributeWhereEntry_PatternAssignment_4 extends AssignmentToken  {
	
	public StringAttributeWhereEntry_PatternAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStringAttributeWhereEntryAccess().getPatternAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringAttributeWhereEntry_OperatorAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("pattern",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("pattern");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getStringAttributeWhereEntryAccess().getPatternSTRINGTerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule StringAttributeWhereEntry ****************/


/************ begin Rule BooleanAttributeWhereEntry ****************
 *
 * BooleanAttributeWhereEntry:
 *   alias=[FromEntry] "." attribute=[ecore::EAttribute] operator=BooleanOperator (isTrue
 *   ?="true"|"false");
 *
 **/

// alias=[FromEntry] "." attribute=[ecore::EAttribute] operator=BooleanOperator (isTrue
// ?="true"|"false")
protected class BooleanAttributeWhereEntry_Group extends GroupToken {
	
	public BooleanAttributeWhereEntry_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBooleanAttributeWhereEntryAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BooleanAttributeWhereEntry_Alternatives_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBooleanAttributeWhereEntryRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// alias=[FromEntry]
protected class BooleanAttributeWhereEntry_AliasAssignment_0 extends AssignmentToken  {
	
	public BooleanAttributeWhereEntry_AliasAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBooleanAttributeWhereEntryAccess().getAliasAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("alias",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("alias");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBooleanAttributeWhereEntryAccess().getAliasFromEntryCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getBooleanAttributeWhereEntryAccess().getAliasFromEntryCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "."
protected class BooleanAttributeWhereEntry_FullStopKeyword_1 extends KeywordToken  {
	
	public BooleanAttributeWhereEntry_FullStopKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBooleanAttributeWhereEntryAccess().getFullStopKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BooleanAttributeWhereEntry_AliasAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// attribute=[ecore::EAttribute]
protected class BooleanAttributeWhereEntry_AttributeAssignment_2 extends AssignmentToken  {
	
	public BooleanAttributeWhereEntry_AttributeAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBooleanAttributeWhereEntryAccess().getAttributeAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BooleanAttributeWhereEntry_FullStopKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("attribute",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("attribute");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBooleanAttributeWhereEntryAccess().getAttributeEAttributeCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getBooleanAttributeWhereEntryAccess().getAttributeEAttributeCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}

// operator=BooleanOperator
protected class BooleanAttributeWhereEntry_OperatorAssignment_3 extends AssignmentToken  {
	
	public BooleanAttributeWhereEntry_OperatorAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBooleanAttributeWhereEntryAccess().getOperatorAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BooleanAttributeWhereEntry_AttributeAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("operator",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("operator");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getBooleanAttributeWhereEntryAccess().getOperatorBooleanOperatorEnumRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// isTrue?="true"|"false"
protected class BooleanAttributeWhereEntry_Alternatives_4 extends AlternativesToken {

	public BooleanAttributeWhereEntry_Alternatives_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getBooleanAttributeWhereEntryAccess().getAlternatives_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BooleanAttributeWhereEntry_IsTrueAssignment_4_0(parent, this, 0, inst);
			case 1: return new BooleanAttributeWhereEntry_FalseKeyword_4_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// isTrue?="true"
protected class BooleanAttributeWhereEntry_IsTrueAssignment_4_0 extends AssignmentToken  {
	
	public BooleanAttributeWhereEntry_IsTrueAssignment_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBooleanAttributeWhereEntryAccess().getIsTrueAssignment_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BooleanAttributeWhereEntry_OperatorAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isTrue",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isTrue");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getBooleanAttributeWhereEntryAccess().getIsTrueTrueKeyword_4_0_0();
			return obj;
		}
		return null;
	}

}

// "false"
protected class BooleanAttributeWhereEntry_FalseKeyword_4_1 extends KeywordToken  {
	
	public BooleanAttributeWhereEntry_FalseKeyword_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBooleanAttributeWhereEntryAccess().getFalseKeyword_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BooleanAttributeWhereEntry_OperatorAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule BooleanAttributeWhereEntry ****************/


/************ begin Rule ReferenceWhereEntry ****************
 *
 * ReferenceWhereEntry:
 *   ReferenceAliasWhereEntry|SubselectWhereEntry;
 *
 **/

// ReferenceAliasWhereEntry|SubselectWhereEntry
protected class ReferenceWhereEntry_Alternatives extends AlternativesToken {

	public ReferenceWhereEntry_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getReferenceWhereEntryAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ReferenceWhereEntry_ReferenceAliasWhereEntryParserRuleCall_0(parent, this, 0, inst);
			case 1: return new ReferenceWhereEntry_SubselectWhereEntryParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getReferenceWhereEntryRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ReferenceAliasWhereEntry
protected class ReferenceWhereEntry_ReferenceAliasWhereEntryParserRuleCall_0 extends RuleCallToken {
	
	public ReferenceWhereEntry_ReferenceAliasWhereEntryParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getReferenceWhereEntryAccess().getReferenceAliasWhereEntryParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ReferenceAliasWhereEntry_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ReferenceAliasWhereEntry_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getReferenceAliasWhereEntryRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// SubselectWhereEntry
protected class ReferenceWhereEntry_SubselectWhereEntryParserRuleCall_1 extends RuleCallToken {
	
	public ReferenceWhereEntry_SubselectWhereEntryParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getReferenceWhereEntryAccess().getSubselectWhereEntryParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SubselectWhereEntry_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(SubselectWhereEntry_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getSubselectWhereEntryRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ReferenceWhereEntry ****************/


/************ begin Rule NullWhereEntry ****************
 *
 * NullWhereEntry:
 *   alias=[FromEntry] "." feature=[ecore::EStructuralFeature] operator=BooleanOperator
 *   "null";
 *
 **/

// alias=[FromEntry] "." feature=[ecore::EStructuralFeature] operator=BooleanOperator
// "null"
protected class NullWhereEntry_Group extends GroupToken {
	
	public NullWhereEntry_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getNullWhereEntryAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NullWhereEntry_NullKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getNullWhereEntryRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// alias=[FromEntry]
protected class NullWhereEntry_AliasAssignment_0 extends AssignmentToken  {
	
	public NullWhereEntry_AliasAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getNullWhereEntryAccess().getAliasAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("alias",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("alias");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNullWhereEntryAccess().getAliasFromEntryCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getNullWhereEntryAccess().getAliasFromEntryCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "."
protected class NullWhereEntry_FullStopKeyword_1 extends KeywordToken  {
	
	public NullWhereEntry_FullStopKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getNullWhereEntryAccess().getFullStopKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NullWhereEntry_AliasAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// feature=[ecore::EStructuralFeature]
protected class NullWhereEntry_FeatureAssignment_2 extends AssignmentToken  {
	
	public NullWhereEntry_FeatureAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getNullWhereEntryAccess().getFeatureAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NullWhereEntry_FullStopKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("feature",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("feature");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNullWhereEntryAccess().getFeatureEStructuralFeatureCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getNullWhereEntryAccess().getFeatureEStructuralFeatureCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}

// operator=BooleanOperator
protected class NullWhereEntry_OperatorAssignment_3 extends AssignmentToken  {
	
	public NullWhereEntry_OperatorAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getNullWhereEntryAccess().getOperatorAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NullWhereEntry_FeatureAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("operator",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("operator");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getNullWhereEntryAccess().getOperatorBooleanOperatorEnumRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// "null"
protected class NullWhereEntry_NullKeyword_4 extends KeywordToken  {
	
	public NullWhereEntry_NullKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getNullWhereEntryAccess().getNullKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new NullWhereEntry_OperatorAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule NullWhereEntry ****************/


/************ begin Rule ReferenceAliasWhereEntry ****************
 *
 * ReferenceAliasWhereEntry:
 *   alias=[FromEntry] "." reference=[ecore::EReference] "=" rightAlias=[FromEntry];
 *
 **/

// alias=[FromEntry] "." reference=[ecore::EReference] "=" rightAlias=[FromEntry]
protected class ReferenceAliasWhereEntry_Group extends GroupToken {
	
	public ReferenceAliasWhereEntry_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getReferenceAliasWhereEntryAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ReferenceAliasWhereEntry_RightAliasAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getReferenceAliasWhereEntryRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// alias=[FromEntry]
protected class ReferenceAliasWhereEntry_AliasAssignment_0 extends AssignmentToken  {
	
	public ReferenceAliasWhereEntry_AliasAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getReferenceAliasWhereEntryAccess().getAliasAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("alias",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("alias");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getReferenceAliasWhereEntryAccess().getAliasFromEntryCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getReferenceAliasWhereEntryAccess().getAliasFromEntryCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "."
protected class ReferenceAliasWhereEntry_FullStopKeyword_1 extends KeywordToken  {
	
	public ReferenceAliasWhereEntry_FullStopKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getReferenceAliasWhereEntryAccess().getFullStopKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ReferenceAliasWhereEntry_AliasAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// reference=[ecore::EReference]
protected class ReferenceAliasWhereEntry_ReferenceAssignment_2 extends AssignmentToken  {
	
	public ReferenceAliasWhereEntry_ReferenceAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getReferenceAliasWhereEntryAccess().getReferenceAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ReferenceAliasWhereEntry_FullStopKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("reference",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("reference");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getReferenceAliasWhereEntryAccess().getReferenceEReferenceCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getReferenceAliasWhereEntryAccess().getReferenceEReferenceCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "="
protected class ReferenceAliasWhereEntry_EqualsSignKeyword_3 extends KeywordToken  {
	
	public ReferenceAliasWhereEntry_EqualsSignKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getReferenceAliasWhereEntryAccess().getEqualsSignKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ReferenceAliasWhereEntry_ReferenceAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// rightAlias=[FromEntry]
protected class ReferenceAliasWhereEntry_RightAliasAssignment_4 extends AssignmentToken  {
	
	public ReferenceAliasWhereEntry_RightAliasAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getReferenceAliasWhereEntryAccess().getRightAliasAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ReferenceAliasWhereEntry_EqualsSignKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("rightAlias",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("rightAlias");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getReferenceAliasWhereEntryAccess().getRightAliasFromEntryCrossReference_4_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getReferenceAliasWhereEntryAccess().getRightAliasFromEntryCrossReference_4_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule ReferenceAliasWhereEntry ****************/


/************ begin Rule SubselectWhereEntry ****************
 *
 * SubselectWhereEntry:
 *   alias=[FromEntry] "." reference=[ecore::EReference] notIn?="not"? "in" "(" subQuery=
 *   MQLquery ")";
 *
 **/

// alias=[FromEntry] "." reference=[ecore::EReference] notIn?="not"? "in" "(" subQuery=
// MQLquery ")"
protected class SubselectWhereEntry_Group extends GroupToken {
	
	public SubselectWhereEntry_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSubselectWhereEntryAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SubselectWhereEntry_RightParenthesisKeyword_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSubselectWhereEntryRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// alias=[FromEntry]
protected class SubselectWhereEntry_AliasAssignment_0 extends AssignmentToken  {
	
	public SubselectWhereEntry_AliasAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSubselectWhereEntryAccess().getAliasAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("alias",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("alias");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSubselectWhereEntryAccess().getAliasFromEntryCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getSubselectWhereEntryAccess().getAliasFromEntryCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "."
protected class SubselectWhereEntry_FullStopKeyword_1 extends KeywordToken  {
	
	public SubselectWhereEntry_FullStopKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSubselectWhereEntryAccess().getFullStopKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SubselectWhereEntry_AliasAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// reference=[ecore::EReference]
protected class SubselectWhereEntry_ReferenceAssignment_2 extends AssignmentToken  {
	
	public SubselectWhereEntry_ReferenceAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSubselectWhereEntryAccess().getReferenceAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SubselectWhereEntry_FullStopKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("reference",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("reference");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSubselectWhereEntryAccess().getReferenceEReferenceCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getSubselectWhereEntryAccess().getReferenceEReferenceCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}

// notIn?="not"?
protected class SubselectWhereEntry_NotInAssignment_3 extends AssignmentToken  {
	
	public SubselectWhereEntry_NotInAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSubselectWhereEntryAccess().getNotInAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SubselectWhereEntry_ReferenceAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("notIn",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("notIn");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getSubselectWhereEntryAccess().getNotInNotKeyword_3_0();
			return obj;
		}
		return null;
	}

}

// "in"
protected class SubselectWhereEntry_InKeyword_4 extends KeywordToken  {
	
	public SubselectWhereEntry_InKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSubselectWhereEntryAccess().getInKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SubselectWhereEntry_NotInAssignment_3(parent, this, 0, inst);
			case 1: return new SubselectWhereEntry_ReferenceAssignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class SubselectWhereEntry_LeftParenthesisKeyword_5 extends KeywordToken  {
	
	public SubselectWhereEntry_LeftParenthesisKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSubselectWhereEntryAccess().getLeftParenthesisKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SubselectWhereEntry_InKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// subQuery=MQLquery
protected class SubselectWhereEntry_SubQueryAssignment_6 extends AssignmentToken  {
	
	public SubselectWhereEntry_SubQueryAssignment_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSubselectWhereEntryAccess().getSubQueryAssignment_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MQLquery_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("subQuery",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("subQuery");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMQLqueryRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSubselectWhereEntryAccess().getSubQueryMQLqueryParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SubselectWhereEntry_LeftParenthesisKeyword_5(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class SubselectWhereEntry_RightParenthesisKeyword_7 extends KeywordToken  {
	
	public SubselectWhereEntry_RightParenthesisKeyword_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSubselectWhereEntryAccess().getRightParenthesisKeyword_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SubselectWhereEntry_SubQueryAssignment_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule SubselectWhereEntry ****************/


/************ begin Rule AliasWhereEntry ****************
 *
 * AliasWhereEntry:
 *   alias=[FromEntry] "=" rightAlias=[FromEntry];
 *
 **/

// alias=[FromEntry] "=" rightAlias=[FromEntry]
protected class AliasWhereEntry_Group extends GroupToken {
	
	public AliasWhereEntry_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAliasWhereEntryAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AliasWhereEntry_RightAliasAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAliasWhereEntryRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// alias=[FromEntry]
protected class AliasWhereEntry_AliasAssignment_0 extends AssignmentToken  {
	
	public AliasWhereEntry_AliasAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAliasWhereEntryAccess().getAliasAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("alias",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("alias");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAliasWhereEntryAccess().getAliasFromEntryCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getAliasWhereEntryAccess().getAliasFromEntryCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "="
protected class AliasWhereEntry_EqualsSignKeyword_1 extends KeywordToken  {
	
	public AliasWhereEntry_EqualsSignKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAliasWhereEntryAccess().getEqualsSignKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AliasWhereEntry_AliasAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// rightAlias=[FromEntry]
protected class AliasWhereEntry_RightAliasAssignment_2 extends AssignmentToken  {
	
	public AliasWhereEntry_RightAliasAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAliasWhereEntryAccess().getRightAliasAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AliasWhereEntry_EqualsSignKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("rightAlias",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("rightAlias");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAliasWhereEntryAccess().getRightAliasFromEntryCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getAliasWhereEntryAccess().getRightAliasFromEntryCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule AliasWhereEntry ****************/

}
